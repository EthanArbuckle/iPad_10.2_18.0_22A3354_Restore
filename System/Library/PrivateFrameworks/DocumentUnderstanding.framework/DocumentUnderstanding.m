void sub_2282CEB20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getOISpotlightImporterClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!OfficeImportLibraryCore_frameworkLibrary)
  {
    OfficeImportLibraryCore_frameworkLibrary = _sl_dlopen();
    if (!OfficeImportLibraryCore_frameworkLibrary)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("OISpotlightImporter");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)__getOISpotlightImporterClass_block_invoke_cold_1();
    free(v3);
  }
  getOISpotlightImporterClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_2282DD004(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void *getCopyHTMLForIWorkDataWithUTISymbolLoc()
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)getCopyHTMLForIWorkDataWithUTISymbolLoc_ptr;
  v6 = getCopyHTMLForIWorkDataWithUTISymbolLoc_ptr;
  if (!getCopyHTMLForIWorkDataWithUTISymbolLoc_ptr)
  {
    v1 = (void *)iWorkImportLibrary();
    v0 = dlsym(v1, "CopyHTMLForIWorkDataWithUTI");
    v4[3] = (uint64_t)v0;
    getCopyHTMLForIWorkDataWithUTISymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_2282DDA0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t iWorkImportLibrary()
{
  uint64_t v0;
  void *v2;

  if (!iWorkImportLibraryCore_frameworkLibrary)
    iWorkImportLibraryCore_frameworkLibrary = _sl_dlopen();
  v0 = iWorkImportLibraryCore_frameworkLibrary;
  if (!iWorkImportLibraryCore_frameworkLibrary)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

void *getCopyHTMLForIWorkFileAtURLSymbolLoc()
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)getCopyHTMLForIWorkFileAtURLSymbolLoc_ptr;
  v6 = getCopyHTMLForIWorkFileAtURLSymbolLoc_ptr;
  if (!getCopyHTMLForIWorkFileAtURLSymbolLoc_ptr)
  {
    v1 = (void *)iWorkImportLibrary();
    v0 = dlsym(v1, "CopyHTMLForIWorkFileAtURL");
    v4[3] = (uint64_t)v0;
    getCopyHTMLForIWorkFileAtURLSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_2282DDB4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void dispatchDeferChecking(void *a1)
{
  id v1;
  dispatch_time_t v2;
  NSObject *v3;
  id v4;
  _QWORD block[4];
  id v6;

  v1 = a1;
  v2 = dispatch_time(0, 1000000000);
  v3 = dispatch_queue_create("com.apple.TextUnderstanding.XPCMonitor", 0);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __dispatchDeferChecking_block_invoke;
  block[3] = &unk_24F0F3C98;
  v6 = v1;
  v4 = v1;
  dispatch_after(v2, v3, block);

}

void __dispatchDeferChecking_block_invoke(uint64_t a1)
{
  xpc_activity_state_t state;
  _BOOL8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t v11[16];
  uint8_t v12[16];
  uint8_t buf[16];

  state = xpc_activity_get_state(*(xpc_activity_t *)(a1 + 32));
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_2282CC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "Checking defer for XPC activity", buf, 2u);
  }
  while (state == 4 || state == 2)
  {
    if (xpc_activity_should_defer(*(xpc_activity_t *)(a1 + 32)))
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v12 = 0;
        _os_log_impl(&dword_2282CC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "Setting XPC activity state to DEFER", v12, 2u);
      }
      if (!xpc_activity_set_state(*(xpc_activity_t *)(a1 + 32), 3))
      {
        v3 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v3)
          __dispatchDeferChecking_block_invoke_cold_1(v3, v4, v5, v6, v7, v8, v9, v10);
      }
      break;
    }
    objc_msgSend(MEMORY[0x24BDD17F0], "sleepForTimeInterval:", 0.100000001);
    state = xpc_activity_get_state(*(xpc_activity_t *)(a1 + 32));
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_2282CC000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "Finished checking defer for XPC activity", v11, 2u);
  }
}

void OUTLINED_FUNCTION_0_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_2282E03C8(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v1);
  objc_destroyWeak(v2);
  objc_destroyWeak((id *)(v3 - 160));
  _Unwind_Resume(a1);
}

id procNameForPid(int a1, int *a2)
{
  unsigned int v4;
  _BYTE buffer[1024];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  *__error() = 0;
  v4 = proc_name(a1, buffer, 0x400u);
  if (a2)
    *a2 = *__error();
  if ((v4 & 0x80000000) != 0)
    return 0;
  else
    return (id)objc_msgSend(objc_alloc(MEMORY[0x24BDD17C8]), "initWithBytes:length:encoding:", buffer, v4, 4);
}

void sub_2282E15F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getWKWebsiteDataStoreClass_block_invoke(uint64_t a1)
{
  WebKitLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("WKWebsiteDataStore");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getWKWebsiteDataStoreClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    __getWKWebsiteDataStoreClass_block_invoke_cold_1();
    WebKitLibrary();
  }
}

void WebKitLibrary()
{
  void *v0;

  if (!WebKitLibraryCore_frameworkLibrary)
    WebKitLibraryCore_frameworkLibrary = _sl_dlopen();
  if (!WebKitLibraryCore_frameworkLibrary)
  {
    v0 = (void *)abort_report_np();
    free(v0);
  }
}

DUTopicDetectionResponseObjC *__getWKWebpagePreferencesClass_block_invoke(uint64_t a1)
{
  DUTopicDetectionResponseObjC *result;
  DUTopicDetectionResponseObjC *v3;
  SEL v4;

  WebKitLibrary();
  result = (DUTopicDetectionResponseObjC *)objc_getClass("WKWebpagePreferences");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getWKWebpagePreferencesClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = (DUTopicDetectionResponseObjC *)__getWKWebpagePreferencesClass_block_invoke_cold_1();
    return -[DUTopicDetectionResponseObjC init](v3, v4);
  }
  return result;
}

void sub_2282E2EFC(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v2;
  MEMORY[0x22E2B07A4](v3, 0x10B3C403AC161EFLL);

  _Unwind_Resume(a1);
}

void sub_2282E304C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&a9);
  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_2282E3190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_2282E33A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  va_list va;

  va_start(va, a5);

  sentencepiece::ImmutableSentencePieceText::~ImmutableSentencePieceText((sentencepiece::ImmutableSentencePieceText *)va);
  _Unwind_Resume(a1);
}

void sub_2282E3638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26)
{
  void *v26;

  if (a24 < 0)
    operator delete(__p);
  if (a25)
    operator delete(a25);

  _Unwind_Resume(a1);
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24F0F3378, MEMORY[0x24BEDAAF0]);
}

void sub_2282E3790(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

void std::vector<int>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a2);
}

id du_xpc_log_handle()
{
  if (du_xpc_log_handle__pasOnceToken2 != -1)
    dispatch_once(&du_xpc_log_handle__pasOnceToken2, &__block_literal_global_1);
  return (id)du_xpc_log_handle__pasExprOnceResult;
}

void __du_xpc_log_handle_block_invoke()
{
  void *v0;
  os_log_t v1;
  void *v2;

  v0 = (void *)MEMORY[0x22E2B0AD4]();
  v1 = os_log_create("com.apple.private.proactive.TextUnderstanding", "Server XPCClient");
  v2 = (void *)du_xpc_log_handle__pasExprOnceResult;
  du_xpc_log_handle__pasExprOnceResult = (uint64_t)v1;

  objc_autoreleasePoolPop(v0);
}

id du_file_notification_log_handle()
{
  if (du_file_notification_log_handle__pasOnceToken3 != -1)
    dispatch_once(&du_file_notification_log_handle__pasOnceToken3, &__block_literal_global_3);
  return (id)du_file_notification_log_handle__pasExprOnceResult;
}

void __du_file_notification_log_handle_block_invoke()
{
  void *v0;
  os_log_t v1;
  void *v2;

  v0 = (void *)MEMORY[0x22E2B0AD4]();
  v1 = os_log_create("com.apple.private.proactive.TextUnderstanding", "File Notification");
  v2 = (void *)du_file_notification_log_handle__pasExprOnceResult;
  du_file_notification_log_handle__pasExprOnceResult = (uint64_t)v1;

  objc_autoreleasePoolPop(v0);
}

sqlite3 *DU_UDF_prenorm_cosine_distance_create_function(sqlite3 *result)
{
  if (result)
    return (sqlite3 *)sqlite3_create_function(result, "prenorm_cosine_distance", 2, 1, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))DU_UDF_prenorm_cosine_distance, 0, 0);
  return result;
}

void DU_UDF_prenorm_cosine_distance(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  int v5;
  int v6;
  int v7;
  BOOL v8;
  const float *v9;
  const float *v10;
  float v11;

  if (a2 == 2
    && ((v5 = sqlite3_value_bytes(*a3), v6 = v5 >> 2, v7 = sqlite3_value_bytes(a3[1]) >> 2, v5 >= 4)
      ? (v8 = v6 == v7)
      : (v8 = 0),
        v8))
  {
    v9 = (const float *)sqlite3_value_blob(*a3);
    v10 = (const float *)sqlite3_value_blob(a3[1]);
    v11 = cblas_sdot(v6, v9, 1, v10, 1);
    sqlite3_result_double(a1, 1.0 - v11);
  }
  else
  {
    sqlite3_result_null(a1);
  }
}

void sub_2282E7838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getSGSimpleMailMessageClass_block_invoke(uint64_t a1)
{
  Class result;

  if (!CoreSuggestionsInternalsLibraryCore_frameworkLibrary)
  {
    CoreSuggestionsInternalsLibraryCore_frameworkLibrary = _sl_dlopen();
    if (!CoreSuggestionsInternalsLibraryCore_frameworkLibrary)
    {
      abort_report_np();
LABEL_6:
      __getSGSimpleMailMessageClass_block_invoke_cold_1();
    }
  }
  result = objc_getClass("SGSimpleMailMessage");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    goto LABEL_6;
  getSGSimpleMailMessageClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity.title.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20));
  swift_beginAccess();
  if (*(_QWORD *)(v1 + 24))
    v2 = *(_QWORD *)(v1 + 16);
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(uint64_t a1)
{
  return type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(a1, (uint64_t *)&type metadata singleton initialization cache for DocumentUnderstanding_ClientInterface_StructuredEntity);
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_StructuredEntity.title : DocumentUnderstanding_ClientInterface_StructuredEntity@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20));
  swift_beginAccess();
  if (*(_QWORD *)(v3 + 24))
  {
    v4 = *(_QWORD *)(v3 + 16);
    v5 = *(_QWORD *)(v3 + 24);
  }
  else
  {
    v4 = 0;
    v5 = 0xE000000000000000;
  }
  *a2 = v4;
  a2[1] = v5;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_StructuredEntity.title : DocumentUnderstanding_ClientInterface_StructuredEntity(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
    swift_allocObject();
    v6 = (_QWORD *)swift_retain();
    v7 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v6);
    swift_release();
    *(_QWORD *)(a2 + v5) = v7;
    swift_release();
  }
  v8 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v8 + 16) = v4;
  *(_QWORD *)(v8 + 24) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity.title.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = v2;
  v6 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
    swift_allocObject();
    v7 = (_QWORD *)swift_retain();
    v8 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v7);
    swift_release();
    *(_QWORD *)(v3 + v6) = v8;
    swift_release();
  }
  v9 = *(_QWORD *)(v3 + v6);
  swift_beginAccess();
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(uint64_t a1)
{
  return type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(a1, (uint64_t *)&type metadata singleton initialization cache for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass);
}

void (*DocumentUnderstanding_ClientInterface_StructuredEntity.title.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  if (*(_QWORD *)(v5 + 24))
  {
    v6 = *(_QWORD *)(v5 + 16);
    v7 = *(_QWORD *)(v5 + 24);
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  v3[9] = v6;
  v3[10] = v7;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_ClientInterface_StructuredEntity.title.modify;
}

void DocumentUnderstanding_ClientInterface_StructuredEntity.title.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
      swift_allocObject();
      v7 = (_QWORD *)swift_retain();
      v8 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v7);
      swift_release();
      *(_QWORD *)(v6 + v5) = v8;
      swift_release();
    }
    v9 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v9 + 16) = v3;
    *(_QWORD *)(v9 + 24) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v10 = *(int *)(v2 + 96);
      v11 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
      swift_allocObject();
      v12 = (_QWORD *)swift_retain();
      v13 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v12);
      swift_release();
      *(_QWORD *)(v11 + v10) = v13;
      swift_release();
    }
    v14 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v14 + 16) = v3;
    *(_QWORD *)(v14 + 24) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

BOOL DocumentUnderstanding_ClientInterface_StructuredEntity.hasTitle.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20));
  swift_beginAccess();
  return *(_QWORD *)(v1 + 24) != 0;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_StructuredEntity.clearTitle()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
    swift_allocObject();
    v3 = (_QWORD *)swift_retain();
    v4 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v3);
    swift_release();
    *(_QWORD *)(v1 + v2) = v4;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity.type.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20));
  swift_beginAccess();
  if (*(_QWORD *)(v1 + 40))
    v2 = *(_QWORD *)(v1 + 32);
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_StructuredEntity.type : DocumentUnderstanding_ClientInterface_StructuredEntity@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20));
  swift_beginAccess();
  if (*(_QWORD *)(v3 + 40))
  {
    v4 = *(_QWORD *)(v3 + 32);
    v5 = *(_QWORD *)(v3 + 40);
  }
  else
  {
    v4 = 0;
    v5 = 0xE000000000000000;
  }
  *a2 = v4;
  a2[1] = v5;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_StructuredEntity.type : DocumentUnderstanding_ClientInterface_StructuredEntity(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
    swift_allocObject();
    v6 = (_QWORD *)swift_retain();
    v7 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v6);
    swift_release();
    *(_QWORD *)(a2 + v5) = v7;
    swift_release();
  }
  v8 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v8 + 32) = v4;
  *(_QWORD *)(v8 + 40) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity.type.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = v2;
  v6 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
    swift_allocObject();
    v7 = (_QWORD *)swift_retain();
    v8 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v7);
    swift_release();
    *(_QWORD *)(v3 + v6) = v8;
    swift_release();
  }
  v9 = *(_QWORD *)(v3 + v6);
  swift_beginAccess();
  *(_QWORD *)(v9 + 32) = a1;
  *(_QWORD *)(v9 + 40) = a2;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_ClientInterface_StructuredEntity.type.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  if (*(_QWORD *)(v5 + 40))
  {
    v6 = *(_QWORD *)(v5 + 32);
    v7 = *(_QWORD *)(v5 + 40);
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  v3[9] = v6;
  v3[10] = v7;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_ClientInterface_StructuredEntity.type.modify;
}

void DocumentUnderstanding_ClientInterface_StructuredEntity.type.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
      swift_allocObject();
      v7 = (_QWORD *)swift_retain();
      v8 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v7);
      swift_release();
      *(_QWORD *)(v6 + v5) = v8;
      swift_release();
    }
    v9 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v9 + 32) = v3;
    *(_QWORD *)(v9 + 40) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v10 = *(int *)(v2 + 96);
      v11 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
      swift_allocObject();
      v12 = (_QWORD *)swift_retain();
      v13 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v12);
      swift_release();
      *(_QWORD *)(v11 + v10) = v13;
      swift_release();
    }
    v14 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v14 + 32) = v3;
    *(_QWORD *)(v14 + 40) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

BOOL DocumentUnderstanding_ClientInterface_StructuredEntity.hasType.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20));
  swift_beginAccess();
  return *(_QWORD *)(v1 + 40) != 0;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_StructuredEntity.clearType()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
    swift_allocObject();
    v3 = (_QWORD *)swift_retain();
    v4 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v3);
    swift_release();
    *(_QWORD *)(v1 + v2) = v4;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity.labels.getter()
{
  type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0);
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_StructuredEntity.labels : DocumentUnderstanding_ClientInterface_StructuredEntity@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20));
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 48);
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_StructuredEntity.labels : DocumentUnderstanding_ClientInterface_StructuredEntity(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
    swift_allocObject();
    v5 = (_QWORD *)swift_retain();
    v6 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v5);
    swift_release();
    *(_QWORD *)(a2 + v4) = v6;
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v4);
  swift_beginAccess();
  *(_QWORD *)(v7 + 48) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity.labels.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
    swift_allocObject();
    v5 = (_QWORD *)swift_retain();
    v6 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v5);
    swift_release();
    *(_QWORD *)(v2 + v4) = v6;
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v4);
  swift_beginAccess();
  *(_QWORD *)(v7 + 48) = a1;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_ClientInterface_StructuredEntity.labels.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v3[9] = *(_QWORD *)(v5 + 48);
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_ClientInterface_StructuredEntity.labels.modify;
}

void DocumentUnderstanding_ClientInterface_StructuredEntity.labels.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v4 = *(int *)(v2 + 88);
      v5 = *(_QWORD *)(v2 + 80);
      type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
      swift_allocObject();
      v6 = (_QWORD *)swift_retain();
      v7 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v6);
      swift_release();
      *(_QWORD *)(v5 + v4) = v7;
      swift_release();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess();
    *(_QWORD *)(v8 + 48) = v3;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = *(int *)(v2 + 88);
      v10 = *(_QWORD *)(v2 + 80);
      type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
      swift_allocObject();
      v11 = (_QWORD *)swift_retain();
      v12 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v11);
      swift_release();
      *(_QWORD *)(v10 + v9) = v12;
      swift_release();
    }
    v13 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess();
    *(_QWORD *)(v13 + 48) = v3;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity.phoneNumber.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20));
  swift_beginAccess();
  if (*(_QWORD *)(v1 + 64))
    v2 = *(_QWORD *)(v1 + 56);
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_StructuredEntity.phoneNumber : DocumentUnderstanding_ClientInterface_StructuredEntity@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20));
  swift_beginAccess();
  if (*(_QWORD *)(v3 + 64))
  {
    v4 = *(_QWORD *)(v3 + 56);
    v5 = *(_QWORD *)(v3 + 64);
  }
  else
  {
    v4 = 0;
    v5 = 0xE000000000000000;
  }
  *a2 = v4;
  a2[1] = v5;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_StructuredEntity.phoneNumber : DocumentUnderstanding_ClientInterface_StructuredEntity(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
    swift_allocObject();
    v6 = (_QWORD *)swift_retain();
    v7 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v6);
    swift_release();
    *(_QWORD *)(a2 + v5) = v7;
    swift_release();
  }
  v8 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v8 + 56) = v4;
  *(_QWORD *)(v8 + 64) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity.phoneNumber.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = v2;
  v6 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
    swift_allocObject();
    v7 = (_QWORD *)swift_retain();
    v8 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v7);
    swift_release();
    *(_QWORD *)(v3 + v6) = v8;
    swift_release();
  }
  v9 = *(_QWORD *)(v3 + v6);
  swift_beginAccess();
  *(_QWORD *)(v9 + 56) = a1;
  *(_QWORD *)(v9 + 64) = a2;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_ClientInterface_StructuredEntity.phoneNumber.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  if (*(_QWORD *)(v5 + 64))
  {
    v6 = *(_QWORD *)(v5 + 56);
    v7 = *(_QWORD *)(v5 + 64);
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  v3[9] = v6;
  v3[10] = v7;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_ClientInterface_StructuredEntity.phoneNumber.modify;
}

void DocumentUnderstanding_ClientInterface_StructuredEntity.phoneNumber.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
      swift_allocObject();
      v7 = (_QWORD *)swift_retain();
      v8 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v7);
      swift_release();
      *(_QWORD *)(v6 + v5) = v8;
      swift_release();
    }
    v9 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v9 + 56) = v3;
    *(_QWORD *)(v9 + 64) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v10 = *(int *)(v2 + 96);
      v11 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
      swift_allocObject();
      v12 = (_QWORD *)swift_retain();
      v13 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v12);
      swift_release();
      *(_QWORD *)(v11 + v10) = v13;
      swift_release();
    }
    v14 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v14 + 56) = v3;
    *(_QWORD *)(v14 + 64) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

BOOL DocumentUnderstanding_ClientInterface_StructuredEntity.hasPhoneNumber.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20));
  swift_beginAccess();
  return *(_QWORD *)(v1 + 64) != 0;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_StructuredEntity.clearPhoneNumber()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
    swift_allocObject();
    v3 = (_QWORD *)swift_retain();
    v4 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v3);
    swift_release();
    *(_QWORD *)(v1 + v2) = v4;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 64) = 0;
  swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity.email.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20));
  swift_beginAccess();
  if (*(_QWORD *)(v1 + 80))
    v2 = *(_QWORD *)(v1 + 72);
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_StructuredEntity.email : DocumentUnderstanding_ClientInterface_StructuredEntity@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20));
  swift_beginAccess();
  if (*(_QWORD *)(v3 + 80))
  {
    v4 = *(_QWORD *)(v3 + 72);
    v5 = *(_QWORD *)(v3 + 80);
  }
  else
  {
    v4 = 0;
    v5 = 0xE000000000000000;
  }
  *a2 = v4;
  a2[1] = v5;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_StructuredEntity.email : DocumentUnderstanding_ClientInterface_StructuredEntity(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
    swift_allocObject();
    v6 = (_QWORD *)swift_retain();
    v7 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v6);
    swift_release();
    *(_QWORD *)(a2 + v5) = v7;
    swift_release();
  }
  v8 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v8 + 72) = v4;
  *(_QWORD *)(v8 + 80) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity.email.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = v2;
  v6 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
    swift_allocObject();
    v7 = (_QWORD *)swift_retain();
    v8 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v7);
    swift_release();
    *(_QWORD *)(v3 + v6) = v8;
    swift_release();
  }
  v9 = *(_QWORD *)(v3 + v6);
  swift_beginAccess();
  *(_QWORD *)(v9 + 72) = a1;
  *(_QWORD *)(v9 + 80) = a2;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_ClientInterface_StructuredEntity.email.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  if (*(_QWORD *)(v5 + 80))
  {
    v6 = *(_QWORD *)(v5 + 72);
    v7 = *(_QWORD *)(v5 + 80);
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  v3[9] = v6;
  v3[10] = v7;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_ClientInterface_StructuredEntity.email.modify;
}

void DocumentUnderstanding_ClientInterface_StructuredEntity.email.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
      swift_allocObject();
      v7 = (_QWORD *)swift_retain();
      v8 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v7);
      swift_release();
      *(_QWORD *)(v6 + v5) = v8;
      swift_release();
    }
    v9 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v9 + 72) = v3;
    *(_QWORD *)(v9 + 80) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v10 = *(int *)(v2 + 96);
      v11 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
      swift_allocObject();
      v12 = (_QWORD *)swift_retain();
      v13 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v12);
      swift_release();
      *(_QWORD *)(v11 + v10) = v13;
      swift_release();
    }
    v14 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v14 + 72) = v3;
    *(_QWORD *)(v14 + 80) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

BOOL DocumentUnderstanding_ClientInterface_StructuredEntity.hasEmail.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20));
  swift_beginAccess();
  return *(_QWORD *)(v1 + 80) != 0;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_StructuredEntity.clearEmail()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
    swift_allocObject();
    v3 = (_QWORD *)swift_retain();
    v4 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v3);
    swift_release();
    *(_QWORD *)(v1 + v2) = v4;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_QWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity.url.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20));
  swift_beginAccess();
  if (*(_QWORD *)(v1 + 96))
    v2 = *(_QWORD *)(v1 + 88);
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_StructuredEntity.url : DocumentUnderstanding_ClientInterface_StructuredEntity@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20));
  swift_beginAccess();
  if (*(_QWORD *)(v3 + 96))
  {
    v4 = *(_QWORD *)(v3 + 88);
    v5 = *(_QWORD *)(v3 + 96);
  }
  else
  {
    v4 = 0;
    v5 = 0xE000000000000000;
  }
  *a2 = v4;
  a2[1] = v5;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_StructuredEntity.url : DocumentUnderstanding_ClientInterface_StructuredEntity(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
    swift_allocObject();
    v6 = (_QWORD *)swift_retain();
    v7 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v6);
    swift_release();
    *(_QWORD *)(a2 + v5) = v7;
    swift_release();
  }
  v8 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v8 + 88) = v4;
  *(_QWORD *)(v8 + 96) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity.url.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = v2;
  v6 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
    swift_allocObject();
    v7 = (_QWORD *)swift_retain();
    v8 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v7);
    swift_release();
    *(_QWORD *)(v3 + v6) = v8;
    swift_release();
  }
  v9 = *(_QWORD *)(v3 + v6);
  swift_beginAccess();
  *(_QWORD *)(v9 + 88) = a1;
  *(_QWORD *)(v9 + 96) = a2;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_ClientInterface_StructuredEntity.url.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  if (*(_QWORD *)(v5 + 96))
  {
    v6 = *(_QWORD *)(v5 + 88);
    v7 = *(_QWORD *)(v5 + 96);
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  v3[9] = v6;
  v3[10] = v7;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_ClientInterface_StructuredEntity.url.modify;
}

void DocumentUnderstanding_ClientInterface_StructuredEntity.url.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
      swift_allocObject();
      v7 = (_QWORD *)swift_retain();
      v8 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v7);
      swift_release();
      *(_QWORD *)(v6 + v5) = v8;
      swift_release();
    }
    v9 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v9 + 88) = v3;
    *(_QWORD *)(v9 + 96) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v10 = *(int *)(v2 + 96);
      v11 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
      swift_allocObject();
      v12 = (_QWORD *)swift_retain();
      v13 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v12);
      swift_release();
      *(_QWORD *)(v11 + v10) = v13;
      swift_release();
    }
    v14 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v14 + 88) = v3;
    *(_QWORD *)(v14 + 96) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

BOOL DocumentUnderstanding_ClientInterface_StructuredEntity.hasURL.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20));
  swift_beginAccess();
  return *(_QWORD *)(v1 + 96) != 0;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_StructuredEntity.clearURL()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
    swift_allocObject();
    v3 = (_QWORD *)swift_retain();
    v4 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v3);
    swift_release();
    *(_QWORD *)(v1 + v2) = v4;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_QWORD *)(v5 + 88) = 0;
  *(_QWORD *)(v5 + 96) = 0;
  swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity.addressComponents.getter()
{
  type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0);
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_StructuredEntity.addressComponents : DocumentUnderstanding_ClientInterface_StructuredEntity@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20));
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 104);
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_StructuredEntity.addressComponents : DocumentUnderstanding_ClientInterface_StructuredEntity(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
    swift_allocObject();
    v5 = (_QWORD *)swift_retain();
    v6 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v5);
    swift_release();
    *(_QWORD *)(a2 + v4) = v6;
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v4);
  swift_beginAccess();
  *(_QWORD *)(v7 + 104) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity.addressComponents.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
    swift_allocObject();
    v5 = (_QWORD *)swift_retain();
    v6 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v5);
    swift_release();
    *(_QWORD *)(v2 + v4) = v6;
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v4);
  swift_beginAccess();
  *(_QWORD *)(v7 + 104) = a1;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_ClientInterface_StructuredEntity.addressComponents.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v3[9] = *(_QWORD *)(v5 + 104);
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_ClientInterface_StructuredEntity.addressComponents.modify;
}

void DocumentUnderstanding_ClientInterface_StructuredEntity.addressComponents.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v4 = *(int *)(v2 + 88);
      v5 = *(_QWORD *)(v2 + 80);
      type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
      swift_allocObject();
      v6 = (_QWORD *)swift_retain();
      v7 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v6);
      swift_release();
      *(_QWORD *)(v5 + v4) = v7;
      swift_release();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess();
    *(_QWORD *)(v8 + 104) = v3;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = *(int *)(v2 + 88);
      v10 = *(_QWORD *)(v2 + 80);
      type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
      swift_allocObject();
      v11 = (_QWORD *)swift_retain();
      v12 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v11);
      swift_release();
      *(_QWORD *)(v10 + v9) = v12;
      swift_release();
    }
    v13 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess();
    *(_QWORD *)(v13 + 104) = v3;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity.calendarEvent.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CalendarEvent?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20))
     + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__calendarEvent;
  swift_beginAccess();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v6, (uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CalendarEvent?);
  v7 = (int *)type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v5, (uint64_t)a1, type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent);
  *a1 = 0;
  UnknownStorage.init()();
  *(_OWORD *)&a1[v7[6]] = xmmword_2284C0CD0;
  v8 = &a1[v7[7]];
  *v8 = 0;
  v8[1] = 0;
  *(_OWORD *)&a1[v7[8]] = xmmword_2284C0CD0;
  v9 = &a1[v7[9]];
  *v9 = 0;
  v9[1] = 0;
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CalendarEvent?);
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_StructuredEntity.calendarEvent : DocumentUnderstanding_ClientInterface_StructuredEntity@<X0>(_BYTE *a1@<X8>)
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.calendarEvent.getter(a1);
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_StructuredEntity.calendarEvent : DocumentUnderstanding_ClientInterface_StructuredEntity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for DocumentUnderstanding_ClientInterface_StructuredEntity.calendarEvent : DocumentUnderstanding_ClientInterface_StructuredEntity(a1, a2, a3, a4, type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent, (uint64_t (*)(char *))DocumentUnderstanding_ClientInterface_StructuredEntity.calendarEvent.setter);
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity.calendarEvent.setter(uint64_t a1)
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.calendarEvent.setter(a1, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CalendarEvent?, type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent, &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__calendarEvent);
}

double DocumentUnderstanding_ClientInterface_CalendarEvent.init()@<D0>(_BYTE *a1@<X8>)
{
  int *v2;
  double result;
  _QWORD *v4;
  _QWORD *v5;

  *a1 = 0;
  v2 = (int *)type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0);
  UnknownStorage.init()();
  result = 0.0;
  *(_OWORD *)&a1[v2[6]] = xmmword_2284C0CD0;
  v4 = &a1[v2[7]];
  *v4 = 0;
  v4[1] = 0;
  *(_OWORD *)&a1[v2[8]] = xmmword_2284C0CD0;
  v5 = &a1[v2[9]];
  *v5 = 0;
  v5[1] = 0;
  return result;
}

void (*DocumentUnderstanding_ClientInterface_StructuredEntity.calendarEvent.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CalendarEvent?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1
                  + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20))
      + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__calendarEvent;
  swift_beginAccess();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v10, (uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CalendarEvent?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = 0;
    UnknownStorage.init()();
    *(_OWORD *)&v9[v6[6]] = xmmword_2284C0CD0;
    v11 = &v9[v6[7]];
    *v11 = 0;
    v11[1] = 0;
    *(_OWORD *)&v9[v6[8]] = xmmword_2284C0CD0;
    v12 = &v9[v6[9]];
    *v12 = 0;
    v12[1] = 0;
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CalendarEvent?);
  }
  else
  {
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v5, (uint64_t)v9, type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent);
  }
  return DocumentUnderstanding_ClientInterface_StructuredEntity.calendarEvent.modify;
}

void DocumentUnderstanding_ClientInterface_StructuredEntity.calendarEvent.modify(uint64_t a1, char a2)
{
  DocumentUnderstanding_ClientInterface_StructuredEntity.calendarEvent.modify(a1, a2, (void (*)(void *))DocumentUnderstanding_ClientInterface_StructuredEntity.calendarEvent.setter, type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent);
}

BOOL DocumentUnderstanding_ClientInterface_StructuredEntity.hasCalendarEvent.getter()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.hasCalendarEvent.getter(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CalendarEvent?, &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__calendarEvent, type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent);
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_StructuredEntity.clearCalendarEvent()()
{
  DocumentUnderstanding_ClientInterface_StructuredEntity.clearCalendarEvent()(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CalendarEvent?, type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent, &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__calendarEvent);
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity.homeAutomationID.getter()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.homeAutomationID.getter(&OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__homeAutomationID);
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_StructuredEntity.homeAutomationID : DocumentUnderstanding_ClientInterface_StructuredEntity@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for DocumentUnderstanding_ClientInterface_StructuredEntity.homeAutomationID : DocumentUnderstanding_ClientInterface_StructuredEntity(a1, &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__homeAutomationID, a2);
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_StructuredEntity.homeAutomationID : DocumentUnderstanding_ClientInterface_StructuredEntity(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for DocumentUnderstanding_ClientInterface_StructuredEntity.homeAutomationID : DocumentUnderstanding_ClientInterface_StructuredEntity(a1, a2, a3, a4, &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__homeAutomationID);
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity.homeAutomationID.setter(uint64_t a1, uint64_t a2)
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.homeAutomationID.setter(a1, a2, &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__homeAutomationID);
}

void (*DocumentUnderstanding_ClientInterface_StructuredEntity.homeAutomationID.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = (uint64_t *)(*(_QWORD *)(v1 + v4)
                 + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__homeAutomationID);
  swift_beginAccess();
  if (v5[1])
  {
    v6 = *v5;
    v7 = v5[1];
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  v3[9] = v6;
  v3[10] = v7;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_ClientInterface_StructuredEntity.homeAutomationID.modify;
}

void DocumentUnderstanding_ClientInterface_StructuredEntity.homeAutomationID.modify(uint64_t *a1, char a2)
{
  DocumentUnderstanding_ClientInterface_StructuredEntity.homeAutomationID.modify(a1, a2, &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__homeAutomationID);
}

BOOL DocumentUnderstanding_ClientInterface_StructuredEntity.hasHomeAutomationID.getter()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.hasHomeAutomationID.getter(&OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__homeAutomationID);
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_StructuredEntity.clearHomeAutomationID()()
{
  DocumentUnderstanding_ClientInterface_StructuredEntity.clearHomeAutomationID()(&OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__homeAutomationID);
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity.displayInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DisplayInfo?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20))
     + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__displayInfo;
  swift_beginAccess();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v6, (uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DisplayInfo?);
  v7 = (int *)type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v5, a1, type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo);
  *(_OWORD *)a1 = xmmword_2284C0CE0;
  *(_OWORD *)(a1 + 16) = xmmword_2284C0CE0;
  *(_BYTE *)(a1 + 32) = 0;
  UnknownStorage.init()();
  v8 = a1 + v7[8];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + v7[9];
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = a1 + v7[10];
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  v11 = a1 + v7[11];
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  v12 = a1 + v7[12];
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = 1;
  v13 = a1 + v7[13];
  *(_QWORD *)v13 = 0;
  *(_BYTE *)(v13 + 8) = 1;
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DisplayInfo?);
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_StructuredEntity.displayInfo : DocumentUnderstanding_ClientInterface_StructuredEntity@<X0>(uint64_t a1@<X8>)
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.displayInfo.getter(a1);
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_StructuredEntity.displayInfo : DocumentUnderstanding_ClientInterface_StructuredEntity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for DocumentUnderstanding_ClientInterface_StructuredEntity.calendarEvent : DocumentUnderstanding_ClientInterface_StructuredEntity(a1, a2, a3, a4, type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo, (uint64_t (*)(char *))DocumentUnderstanding_ClientInterface_StructuredEntity.displayInfo.setter);
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_StructuredEntity.calendarEvent : DocumentUnderstanding_ClientInterface_StructuredEntity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t (*a6)(char *))
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  v9 = a5(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v13 - v10;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(a1, (uint64_t)&v13 - v10, a5);
  return a6(v11);
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity.displayInfo.setter(uint64_t a1)
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.calendarEvent.setter(a1, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DisplayInfo?, type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo, &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__displayInfo);
}

uint64_t DocumentUnderstanding_ClientInterface_DisplayInfo.init()@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_OWORD *)a1 = xmmword_2284C0CE0;
  *(_OWORD *)(a1 + 16) = xmmword_2284C0CE0;
  *(_BYTE *)(a1 + 32) = 0;
  v2 = (int *)type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0);
  result = UnknownStorage.init()();
  v4 = a1 + v2[8];
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = 1;
  v5 = a1 + v2[9];
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = a1 + v2[10];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = a1 + v2[11];
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  v8 = a1 + v2[12];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + v2[13];
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  return result;
}

void (*DocumentUnderstanding_ClientInterface_StructuredEntity.displayInfo.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _OWORD *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DisplayInfo?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1
                  + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20))
      + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__displayInfo;
  swift_beginAccess();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v10, (uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DisplayInfo?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = xmmword_2284C0CE0;
    v9[1] = xmmword_2284C0CE0;
    *((_BYTE *)v9 + 32) = 0;
    UnknownStorage.init()();
    v11 = (char *)v9 + v6[8];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = (char *)v9 + v6[9];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = (char *)v9 + v6[10];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    v14 = (char *)v9 + v6[11];
    *(_QWORD *)v14 = 0;
    v14[8] = 1;
    v15 = (char *)v9 + v6[12];
    *(_QWORD *)v15 = 0;
    v15[8] = 1;
    v16 = (char *)v9 + v6[13];
    *(_QWORD *)v16 = 0;
    v16[8] = 1;
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DisplayInfo?);
  }
  else
  {
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v5, (uint64_t)v9, type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo);
  }
  return DocumentUnderstanding_ClientInterface_StructuredEntity.displayInfo.modify;
}

void DocumentUnderstanding_ClientInterface_StructuredEntity.displayInfo.modify(uint64_t a1, char a2)
{
  DocumentUnderstanding_ClientInterface_StructuredEntity.calendarEvent.modify(a1, a2, (void (*)(void *))DocumentUnderstanding_ClientInterface_StructuredEntity.displayInfo.setter, type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo);
}

void DocumentUnderstanding_ClientInterface_StructuredEntity.calendarEvent.modify(uint64_t a1, char a2, void (*a3)(void *), uint64_t (*a4)(_QWORD))
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v5 = *(void **)a1;
  v6 = *(void **)(*(_QWORD *)a1 + 40);
  v7 = *(void **)(*(_QWORD *)a1 + 48);
  v8 = *(void **)(*(_QWORD *)a1 + 32);
  if ((a2 & 1) != 0)
  {
    outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)v6, a4);
    a3(v6);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v7, a4);
  }
  else
  {
    a3(*(void **)(*(_QWORD *)a1 + 48));
  }
  free(v7);
  free(v6);
  free(v8);
  free(v5);
}

BOOL DocumentUnderstanding_ClientInterface_StructuredEntity.hasDisplayInfo.getter()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.hasCalendarEvent.getter(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DisplayInfo?, &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__displayInfo, type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo);
}

BOOL DocumentUnderstanding_ClientInterface_StructuredEntity.hasCalendarEvent.getter(uint64_t *a1, _QWORD *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v14;

  v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v3
                  + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20))
      + *a2;
  swift_beginAccess();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v10, (uint64_t)v9, a1);
  v11 = a3(0);
  v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v9, a1);
  return v12;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_StructuredEntity.clearDisplayInfo()()
{
  DocumentUnderstanding_ClientInterface_StructuredEntity.clearCalendarEvent()(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DisplayInfo?, type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo, &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__displayInfo);
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity.clearCalendarEvent()(uint64_t *a1, uint64_t (*a2)(_QWORD), _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v7 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
    swift_allocObject();
    v12 = (_QWORD *)swift_retain();
    v13 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v12);
    swift_release();
    *(_QWORD *)(v7 + v11) = v13;
    swift_release();
  }
  v14 = *(_QWORD *)(v7 + v11);
  v15 = a2(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v10, 1, 1, v15);
  v16 = v14 + *a3;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v10, v16, a1);
  swift_endAccess();
  return swift_release();
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity.responseDebugInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20))
     + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__responseDebugInfo;
  swift_beginAccess();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v6, (uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  v7 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v5, a1, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
  UnknownStorage.init()();
  v8 = (_QWORD *)(a1 + *(int *)(v7 + 20));
  *v8 = 0;
  v8[1] = 0;
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_StructuredEntity.responseDebugInfo : DocumentUnderstanding_ClientInterface_StructuredEntity@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20))
     + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__responseDebugInfo;
  swift_beginAccess();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v7, (uint64_t)v6, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  v8 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v6, a2, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
  UnknownStorage.init()();
  v9 = (_QWORD *)(a2 + *(int *)(v8 + 20));
  *v9 = 0;
  v9[1] = 0;
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v6, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_StructuredEntity.responseDebugInfo : DocumentUnderstanding_ClientInterface_StructuredEntity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for DocumentUnderstanding_ClientInterface_StructuredEntity.calendarEvent : DocumentUnderstanding_ClientInterface_StructuredEntity(a1, a2, a3, a4, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo, (uint64_t (*)(char *))DocumentUnderstanding_ClientInterface_StructuredEntity.responseDebugInfo.setter);
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity.responseDebugInfo.setter(uint64_t a1)
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.calendarEvent.setter(a1, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo, &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__responseDebugInfo);
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity.calendarEvent.setter(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_QWORD), _QWORD *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v8 = v4;
  v10 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v23 - v14;
  v16 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
    swift_allocObject();
    v17 = (_QWORD *)swift_retain();
    v18 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v17);
    swift_release();
    *(_QWORD *)(v8 + v16) = v18;
    swift_release();
  }
  v19 = *(_QWORD *)(v8 + v16);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(a1, (uint64_t)v15, a3);
  v20 = a3(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v15, 0, 1, v20);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v15, (uint64_t)v13, a2);
  v21 = v19 + *a4;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v13, v21, a2);
  swift_endAccess();
  return swift_release();
}

void (*DocumentUnderstanding_ClientInterface_StructuredEntity.responseDebugInfo.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1
                  + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20))
      + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__responseDebugInfo;
  swift_beginAccess();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v10, (uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_QWORD *)v11 = 0;
    *((_QWORD *)v11 + 1) = 0;
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  }
  else
  {
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v5, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
  }
  return DocumentUnderstanding_ClientInterface_StructuredEntity.responseDebugInfo.modify;
}

void DocumentUnderstanding_ClientInterface_StructuredEntity.responseDebugInfo.modify(uint64_t a1, char a2)
{
  DocumentUnderstanding_ClientInterface_StructuredEntity.calendarEvent.modify(a1, a2, (void (*)(void *))DocumentUnderstanding_ClientInterface_StructuredEntity.responseDebugInfo.setter, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
}

BOOL DocumentUnderstanding_ClientInterface_StructuredEntity.hasResponseDebugInfo.getter()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.hasCalendarEvent.getter(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?, &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__responseDebugInfo, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_StructuredEntity.clearResponseDebugInfo()()
{
  DocumentUnderstanding_ClientInterface_StructuredEntity.clearCalendarEvent()(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo, &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__responseDebugInfo);
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity.phoneNumberLabel.getter()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.homeAutomationID.getter(&OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__phoneNumberLabel);
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity.homeAutomationID.getter(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(*(_QWORD *)(v1
                             + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0)
                                      + 20))
                 + *a1);
  swift_beginAccess();
  if (v2[1])
    v3 = *v2;
  else
    v3 = 0;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_StructuredEntity.phoneNumberLabel : DocumentUnderstanding_ClientInterface_StructuredEntity@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for DocumentUnderstanding_ClientInterface_StructuredEntity.homeAutomationID : DocumentUnderstanding_ClientInterface_StructuredEntity(a1, &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__phoneNumberLabel, a2);
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_StructuredEntity.homeAutomationID : DocumentUnderstanding_ClientInterface_StructuredEntity@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X3>, _QWORD *a3@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;

  v4 = (uint64_t *)(*(_QWORD *)(a1
                             + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0)
                                      + 20))
                 + *a2);
  swift_beginAccess();
  if (v4[1])
  {
    v5 = *v4;
    v6 = v4[1];
  }
  else
  {
    v5 = 0;
    v6 = 0xE000000000000000;
  }
  *a3 = v5;
  a3[1] = v6;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_StructuredEntity.phoneNumberLabel : DocumentUnderstanding_ClientInterface_StructuredEntity(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for DocumentUnderstanding_ClientInterface_StructuredEntity.homeAutomationID : DocumentUnderstanding_ClientInterface_StructuredEntity(a1, a2, a3, a4, &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__phoneNumberLabel);
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_StructuredEntity.homeAutomationID : DocumentUnderstanding_ClientInterface_StructuredEntity(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;

  v8 = *a1;
  v7 = a1[1];
  v9 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
    swift_allocObject();
    v10 = (_QWORD *)swift_retain();
    v11 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v10);
    swift_release();
    *(_QWORD *)(a2 + v9) = v11;
    swift_release();
  }
  v12 = (_QWORD *)(*(_QWORD *)(a2 + v9) + *a5);
  swift_beginAccess();
  *v12 = v8;
  v12[1] = v7;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity.phoneNumberLabel.setter(uint64_t a1, uint64_t a2)
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.homeAutomationID.setter(a1, a2, &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__phoneNumberLabel);
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity.homeAutomationID.setter(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  v5 = v3;
  v8 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
    swift_allocObject();
    v9 = (_QWORD *)swift_retain();
    v10 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v9);
    swift_release();
    *(_QWORD *)(v5 + v8) = v10;
    swift_release();
  }
  v11 = (_QWORD *)(*(_QWORD *)(v5 + v8) + *a3);
  swift_beginAccess();
  *v11 = a1;
  v11[1] = a2;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_ClientInterface_StructuredEntity.phoneNumberLabel.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = (uint64_t *)(*(_QWORD *)(v1 + v4)
                 + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__phoneNumberLabel);
  swift_beginAccess();
  if (v5[1])
  {
    v6 = *v5;
    v7 = v5[1];
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  v3[9] = v6;
  v3[10] = v7;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_ClientInterface_StructuredEntity.phoneNumberLabel.modify;
}

void DocumentUnderstanding_ClientInterface_StructuredEntity.phoneNumberLabel.modify(uint64_t *a1, char a2)
{
  DocumentUnderstanding_ClientInterface_StructuredEntity.homeAutomationID.modify(a1, a2, &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__phoneNumberLabel);
}

void DocumentUnderstanding_ClientInterface_StructuredEntity.homeAutomationID.modify(uint64_t *a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;

  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 72);
  v6 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v7 = *(int *)(v4 + 96);
      v8 = *(_QWORD *)(v4 + 88);
      type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
      swift_allocObject();
      v9 = (_QWORD *)swift_retain();
      v10 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v9);
      swift_release();
      *(_QWORD *)(v8 + v7) = v10;
      swift_release();
    }
    v11 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 88) + *(int *)(v4 + 96)) + *a3);
    swift_beginAccess();
    *v11 = v5;
    v11[1] = v6;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v12 = *(int *)(v4 + 96);
      v13 = *(_QWORD *)(v4 + 88);
      type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
      swift_allocObject();
      v14 = (_QWORD *)swift_retain();
      v15 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v14);
      swift_release();
      *(_QWORD *)(v13 + v12) = v15;
      swift_release();
    }
    v16 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 88) + *(int *)(v4 + 96)) + *a3);
    swift_beginAccess();
    *v16 = v5;
    v16[1] = v6;
  }
  swift_bridgeObjectRelease();
  free((void *)v4);
}

BOOL DocumentUnderstanding_ClientInterface_StructuredEntity.hasPhoneNumberLabel.getter()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.hasHomeAutomationID.getter(&OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__phoneNumberLabel);
}

BOOL DocumentUnderstanding_ClientInterface_StructuredEntity.hasHomeAutomationID.getter(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20))
     + *a1;
  swift_beginAccess();
  return *(_QWORD *)(v2 + 8) != 0;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_StructuredEntity.clearPhoneNumberLabel()()
{
  DocumentUnderstanding_ClientInterface_StructuredEntity.clearHomeAutomationID()(&OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__phoneNumberLabel);
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity.clearHomeAutomationID()(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;

  v3 = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
    swift_allocObject();
    v5 = (_QWORD *)swift_retain();
    v6 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v5);
    swift_release();
    *(_QWORD *)(v3 + v4) = v6;
    swift_release();
  }
  v7 = (_QWORD *)(*(_QWORD *)(v3 + v4) + *a1);
  swift_beginAccess();
  *v7 = 0;
  v7[1] = 0;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindow.getter()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindow.getter(&OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindow);
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindow : DocumentUnderstanding_ClientInterface_StructuredEntity@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindow : DocumentUnderstanding_ClientInterface_StructuredEntity(a1, &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindow, a2);
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindow : DocumentUnderstanding_ClientInterface_StructuredEntity(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindow : DocumentUnderstanding_ClientInterface_StructuredEntity(a1, a2, a3, a4, &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindow);
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindow.setter(uint64_t a1, uint64_t a2)
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindow.setter(a1, a2, &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindow);
}

void (*DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindow.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = (uint64_t *)(*(_QWORD *)(v1 + v4)
                 + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindow);
  swift_beginAccess();
  v6 = *v5;
  v7 = v5[1];
  v3[9] = *v5;
  v3[10] = v7;
  outlined copy of Data._Representation(v6, v7);
  return DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindow.modify;
}

void DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindow.modify(uint64_t *a1, char a2)
{
  DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindow.modify(a1, a2, &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindow);
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity.absoluteOriginOnScreen.getter()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindow.getter(&OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__absoluteOriginOnScreen);
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindow.getter(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20))
     + *a1;
  swift_beginAccess();
  v3 = *(_QWORD *)v2;
  outlined copy of Data._Representation(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  return v3;
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_StructuredEntity.absoluteOriginOnScreen : DocumentUnderstanding_ClientInterface_StructuredEntity@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindow : DocumentUnderstanding_ClientInterface_StructuredEntity(a1, &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__absoluteOriginOnScreen, a2);
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindow : DocumentUnderstanding_ClientInterface_StructuredEntity@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;

  v4 = (uint64_t *)(*(_QWORD *)(a1
                             + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0)
                                      + 20))
                 + *a2);
  swift_beginAccess();
  v5 = *v4;
  v6 = v4[1];
  *a3 = *v4;
  a3[1] = v6;
  return outlined copy of Data._Representation(v5, v6);
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_StructuredEntity.absoluteOriginOnScreen : DocumentUnderstanding_ClientInterface_StructuredEntity(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindow : DocumentUnderstanding_ClientInterface_StructuredEntity(a1, a2, a3, a4, &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__absoluteOriginOnScreen);
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindow : DocumentUnderstanding_ClientInterface_StructuredEntity(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;

  v7 = *a1;
  v8 = a1[1];
  v9 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20);
  outlined copy of Data._Representation(v7, v8);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
    swift_allocObject();
    v10 = (_QWORD *)swift_retain();
    v11 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v10);
    swift_release();
    *(_QWORD *)(a2 + v9) = v11;
    swift_release();
  }
  v12 = (uint64_t *)(*(_QWORD *)(a2 + v9) + *a5);
  swift_beginAccess();
  v13 = *v12;
  v14 = v12[1];
  *v12 = v7;
  v12[1] = v8;
  return outlined consume of Data._Representation(v13, v14);
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity.absoluteOriginOnScreen.setter(uint64_t a1, uint64_t a2)
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindow.setter(a1, a2, &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__absoluteOriginOnScreen);
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindow.setter(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;

  v5 = v3;
  v8 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
    swift_allocObject();
    v9 = (_QWORD *)swift_retain();
    v10 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v9);
    swift_release();
    *(_QWORD *)(v5 + v8) = v10;
    swift_release();
  }
  v11 = (uint64_t *)(*(_QWORD *)(v5 + v8) + *a3);
  swift_beginAccess();
  v12 = *v11;
  v13 = v11[1];
  *v11 = a1;
  v11[1] = a2;
  return outlined consume of Data._Representation(v12, v13);
}

void (*DocumentUnderstanding_ClientInterface_StructuredEntity.absoluteOriginOnScreen.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = (uint64_t *)(*(_QWORD *)(v1 + v4)
                 + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__absoluteOriginOnScreen);
  swift_beginAccess();
  v6 = *v5;
  v7 = v5[1];
  v3[9] = *v5;
  v3[10] = v7;
  outlined copy of Data._Representation(v6, v7);
  return DocumentUnderstanding_ClientInterface_StructuredEntity.absoluteOriginOnScreen.modify;
}

void DocumentUnderstanding_ClientInterface_StructuredEntity.absoluteOriginOnScreen.modify(uint64_t *a1, char a2)
{
  DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindow.modify(a1, a2, &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__absoluteOriginOnScreen);
}

void DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindow.modify(uint64_t *a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;

  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 72);
  v6 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    outlined copy of Data._Representation(*(_QWORD *)(*a1 + 72), v6);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v7 = *(int *)(v4 + 96);
      v8 = *(_QWORD *)(v4 + 88);
      type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
      swift_allocObject();
      v9 = (_QWORD *)swift_retain();
      v10 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v9);
      swift_release();
      *(_QWORD *)(v8 + v7) = v10;
      swift_release();
    }
    v11 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v4 + 88) + *(int *)(v4 + 96)) + *a3);
    swift_beginAccess();
    v12 = *v11;
    v13 = v11[1];
    *v11 = v5;
    v11[1] = v6;
    outlined consume of Data._Representation(v12, v13);
    v14 = *(_QWORD *)(v4 + 72);
    v15 = *(_QWORD *)(v4 + 80);
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v16 = *(int *)(v4 + 96);
      v17 = *(_QWORD *)(v4 + 88);
      type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
      swift_allocObject();
      v18 = (_QWORD *)swift_retain();
      v19 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v18);
      swift_release();
      *(_QWORD *)(v17 + v16) = v19;
      swift_release();
    }
    v20 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v4 + 88) + *(int *)(v4 + 96)) + *a3);
    swift_beginAccess();
    v14 = *v20;
    v15 = v20[1];
    *v20 = v5;
    v20[1] = v6;
  }
  outlined consume of Data._Representation(v14, v15);
  free((void *)v4);
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity.isOnScreen.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(*(_QWORD *)(v0
                                     + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0)
                                              + 20))
                         + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__isOnScreen);
  swift_beginAccess();
  return *v1;
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_StructuredEntity.isOnScreen : DocumentUnderstanding_ClientInterface_StructuredEntity@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(*(_QWORD *)(a1
                           + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0)
                                    + 20))
               + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__isOnScreen);
  result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_StructuredEntity.isOnScreen : DocumentUnderstanding_ClientInterface_StructuredEntity(char *a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t result;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
    swift_allocObject();
    v5 = (_QWORD *)swift_retain();
    v6 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v5);
    swift_release();
    *(_QWORD *)(a2 + v4) = v6;
    swift_release();
  }
  v7 = (_BYTE *)(*(_QWORD *)(a2 + v4)
               + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__isOnScreen);
  result = swift_beginAccess();
  *v7 = v3;
  return result;
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity.isOnScreen.setter(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
    swift_allocObject();
    v5 = (_QWORD *)swift_retain();
    v6 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v5);
    swift_release();
    *(_QWORD *)(v2 + v4) = v6;
    swift_release();
  }
  v7 = (_BYTE *)(*(_QWORD *)(v2 + v4)
               + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__isOnScreen);
  result = swift_beginAccess();
  *v7 = a1 & 1;
  return result;
}

void (*DocumentUnderstanding_ClientInterface_StructuredEntity.isOnScreen.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__isOnScreen);
  swift_beginAccess();
  *((_BYTE *)v3 + 84) = *v5;
  return DocumentUnderstanding_ClientInterface_StructuredEntity.isOnScreen.modify;
}

void DocumentUnderstanding_ClientInterface_StructuredEntity.isOnScreen.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE *v10;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 80);
    v7 = *(_QWORD *)(v3 + 72);
    type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
    swift_allocObject();
    v8 = (_QWORD *)swift_retain();
    v9 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v8);
    swift_release();
    *(_QWORD *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  v10 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80))
                + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__isOnScreen);
  swift_beginAccess();
  *v10 = v4;
  free((void *)v3);
}

double DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugX.getter()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugX.getter(&OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugX);
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugX : DocumentUnderstanding_ClientInterface_StructuredEntity@<X0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  return key path getter for DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugX : DocumentUnderstanding_ClientInterface_StructuredEntity(a1, &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugX, a2);
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugX : DocumentUnderstanding_ClientInterface_StructuredEntity(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugX : DocumentUnderstanding_ClientInterface_StructuredEntity(a1, a2, a3, a4, &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugX);
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugX.setter(double a1)
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugX.setter(&OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugX, a1);
}

void (*DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugX.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugX;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugX.modify;
}

void DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugX.modify(uint64_t *a1, char a2)
{
  DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugX.modify(a1, a2, &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugX);
}

BOOL DocumentUnderstanding_ClientInterface_StructuredEntity.hasFrameInWindowDebugX.getter()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.hasFrameInWindowDebugX.getter(&OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugX);
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_StructuredEntity.clearFrameInWindowDebugX()()
{
  DocumentUnderstanding_ClientInterface_StructuredEntity.clearFrameInWindowDebugX()(&OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugX);
}

double DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugY.getter()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugX.getter(&OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugY);
}

double DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugX.getter(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(v1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20))
     + *a1;
  swift_beginAccess();
  result = *(double *)v2;
  if (*(_BYTE *)(v2 + 8))
    return 0.0;
  return result;
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugY : DocumentUnderstanding_ClientInterface_StructuredEntity@<X0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  return key path getter for DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugX : DocumentUnderstanding_ClientInterface_StructuredEntity(a1, &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugY, a2);
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugX : DocumentUnderstanding_ClientInterface_StructuredEntity@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X3>, double *a3@<X8>)
{
  uint64_t v4;
  uint64_t result;
  double v6;

  v4 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20))
     + *a2;
  result = swift_beginAccess();
  v6 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v6 = 0.0;
  *a3 = v6;
  return result;
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugY : DocumentUnderstanding_ClientInterface_StructuredEntity(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugX : DocumentUnderstanding_ClientInterface_StructuredEntity(a1, a2, a3, a4, &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugY);
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugX : DocumentUnderstanding_ClientInterface_StructuredEntity(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v7 = *a1;
  v8 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
    swift_allocObject();
    v9 = (_QWORD *)swift_retain();
    v10 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v9);
    swift_release();
    *(_QWORD *)(a2 + v8) = v10;
    swift_release();
  }
  v11 = *(_QWORD *)(a2 + v8) + *a5;
  result = swift_beginAccess();
  *(_QWORD *)v11 = v7;
  *(_BYTE *)(v11 + 8) = 0;
  return result;
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugY.setter(double a1)
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugX.setter(&OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugY, a1);
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugX.setter(_QWORD *a1, double a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v4 = v2;
  v6 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
    swift_allocObject();
    v7 = (_QWORD *)swift_retain();
    v8 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v7);
    swift_release();
    *(_QWORD *)(v4 + v6) = v8;
    swift_release();
  }
  v9 = *(_QWORD *)(v4 + v6) + *a1;
  result = swift_beginAccess();
  *(double *)v9 = a2;
  *(_BYTE *)(v9 + 8) = 0;
  return result;
}

void (*DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugY.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugY;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugY.modify;
}

void DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugY.modify(uint64_t *a1, char a2)
{
  DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugX.modify(a1, a2, &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugY);
}

void DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugX.modify(uint64_t *a1, char a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v8 = *(int *)(v5 + 88);
    v9 = *(_QWORD *)(v5 + 80);
    type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
    swift_allocObject();
    v10 = (_QWORD *)swift_retain();
    v11 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v10);
    swift_release();
    *(_QWORD *)(v9 + v8) = v11;
    swift_release();
  }
LABEL_4:
  v12 = *(_QWORD *)(*(_QWORD *)(v5 + 80) + *(int *)(v5 + 88)) + *a3;
  swift_beginAccess();
  *(_QWORD *)v12 = v6;
  *(_BYTE *)(v12 + 8) = 0;
  free((void *)v5);
}

BOOL DocumentUnderstanding_ClientInterface_StructuredEntity.hasFrameInWindowDebugY.getter()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.hasFrameInWindowDebugX.getter(&OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugY);
}

BOOL DocumentUnderstanding_ClientInterface_StructuredEntity.hasFrameInWindowDebugX.getter(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20))
     + *a1;
  swift_beginAccess();
  return (*(_BYTE *)(v2 + 8) & 1) == 0;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_StructuredEntity.clearFrameInWindowDebugY()()
{
  DocumentUnderstanding_ClientInterface_StructuredEntity.clearFrameInWindowDebugX()(&OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugY);
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity.clearFrameInWindowDebugX()(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
    swift_allocObject();
    v5 = (_QWORD *)swift_retain();
    v6 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v5);
    swift_release();
    *(_QWORD *)(v3 + v4) = v6;
    swift_release();
  }
  v7 = *(_QWORD *)(v3 + v4) + *a1;
  result = swift_beginAccess();
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  return result;
}

double DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugWidth.getter()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugX.getter(&OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugWidth);
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugWidth : DocumentUnderstanding_ClientInterface_StructuredEntity@<X0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  return key path getter for DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugX : DocumentUnderstanding_ClientInterface_StructuredEntity(a1, &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugWidth, a2);
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugWidth : DocumentUnderstanding_ClientInterface_StructuredEntity(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugX : DocumentUnderstanding_ClientInterface_StructuredEntity(a1, a2, a3, a4, &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugWidth);
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugWidth.setter(double a1)
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugX.setter(&OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugWidth, a1);
}

void (*DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugWidth.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugWidth;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugWidth.modify;
}

void DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugWidth.modify(uint64_t *a1, char a2)
{
  DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugX.modify(a1, a2, &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugWidth);
}

BOOL DocumentUnderstanding_ClientInterface_StructuredEntity.hasFrameInWindowDebugWidth.getter()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.hasFrameInWindowDebugX.getter(&OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugWidth);
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_StructuredEntity.clearFrameInWindowDebugWidth()()
{
  DocumentUnderstanding_ClientInterface_StructuredEntity.clearFrameInWindowDebugX()(&OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugWidth);
}

double DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugHeight.getter()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugX.getter(&OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugHeight);
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugHeight : DocumentUnderstanding_ClientInterface_StructuredEntity@<X0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  return key path getter for DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugX : DocumentUnderstanding_ClientInterface_StructuredEntity(a1, &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugHeight, a2);
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugHeight : DocumentUnderstanding_ClientInterface_StructuredEntity(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugX : DocumentUnderstanding_ClientInterface_StructuredEntity(a1, a2, a3, a4, &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugHeight);
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugHeight.setter(double a1)
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugX.setter(&OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugHeight, a1);
}

void (*DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugHeight.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugHeight;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugHeight.modify;
}

void DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugHeight.modify(uint64_t *a1, char a2)
{
  DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugX.modify(a1, a2, &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugHeight);
}

BOOL DocumentUnderstanding_ClientInterface_StructuredEntity.hasFrameInWindowDebugHeight.getter()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.hasFrameInWindowDebugX.getter(&OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugHeight);
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_StructuredEntity.clearFrameInWindowDebugHeight()()
{
  DocumentUnderstanding_ClientInterface_StructuredEntity.clearFrameInWindowDebugX()(&OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugHeight);
}

double DocumentUnderstanding_ClientInterface_StructuredEntity.absoluteOriginOnScreenDebugX.getter()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugX.getter(&OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__absoluteOriginOnScreenDebugX);
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_StructuredEntity.absoluteOriginOnScreenDebugX : DocumentUnderstanding_ClientInterface_StructuredEntity@<X0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  return key path getter for DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugX : DocumentUnderstanding_ClientInterface_StructuredEntity(a1, &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__absoluteOriginOnScreenDebugX, a2);
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_StructuredEntity.absoluteOriginOnScreenDebugX : DocumentUnderstanding_ClientInterface_StructuredEntity(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugX : DocumentUnderstanding_ClientInterface_StructuredEntity(a1, a2, a3, a4, &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__absoluteOriginOnScreenDebugX);
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity.absoluteOriginOnScreenDebugX.setter(double a1)
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugX.setter(&OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__absoluteOriginOnScreenDebugX, a1);
}

void (*DocumentUnderstanding_ClientInterface_StructuredEntity.absoluteOriginOnScreenDebugX.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__absoluteOriginOnScreenDebugX;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return DocumentUnderstanding_ClientInterface_StructuredEntity.absoluteOriginOnScreenDebugX.modify;
}

void DocumentUnderstanding_ClientInterface_StructuredEntity.absoluteOriginOnScreenDebugX.modify(uint64_t *a1, char a2)
{
  DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugX.modify(a1, a2, &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__absoluteOriginOnScreenDebugX);
}

BOOL DocumentUnderstanding_ClientInterface_StructuredEntity.hasAbsoluteOriginOnScreenDebugX.getter()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.hasFrameInWindowDebugX.getter(&OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__absoluteOriginOnScreenDebugX);
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_StructuredEntity.clearAbsoluteOriginOnScreenDebugX()()
{
  DocumentUnderstanding_ClientInterface_StructuredEntity.clearFrameInWindowDebugX()(&OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__absoluteOriginOnScreenDebugX);
}

double DocumentUnderstanding_ClientInterface_StructuredEntity.absoluteOriginOnScreenDebugY.getter()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugX.getter(&OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__absoluteOriginOnScreenDebugY);
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_StructuredEntity.absoluteOriginOnScreenDebugY : DocumentUnderstanding_ClientInterface_StructuredEntity@<X0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  return key path getter for DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugX : DocumentUnderstanding_ClientInterface_StructuredEntity(a1, &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__absoluteOriginOnScreenDebugY, a2);
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_StructuredEntity.absoluteOriginOnScreenDebugY : DocumentUnderstanding_ClientInterface_StructuredEntity(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugX : DocumentUnderstanding_ClientInterface_StructuredEntity(a1, a2, a3, a4, &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__absoluteOriginOnScreenDebugY);
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity.absoluteOriginOnScreenDebugY.setter(double a1)
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugX.setter(&OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__absoluteOriginOnScreenDebugY, a1);
}

void (*DocumentUnderstanding_ClientInterface_StructuredEntity.absoluteOriginOnScreenDebugY.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__absoluteOriginOnScreenDebugY;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return DocumentUnderstanding_ClientInterface_StructuredEntity.absoluteOriginOnScreenDebugY.modify;
}

void DocumentUnderstanding_ClientInterface_StructuredEntity.absoluteOriginOnScreenDebugY.modify(uint64_t *a1, char a2)
{
  DocumentUnderstanding_ClientInterface_StructuredEntity.frameInWindowDebugX.modify(a1, a2, &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__absoluteOriginOnScreenDebugY);
}

BOOL DocumentUnderstanding_ClientInterface_StructuredEntity.hasAbsoluteOriginOnScreenDebugY.getter()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.hasFrameInWindowDebugX.getter(&OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__absoluteOriginOnScreenDebugY);
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_StructuredEntity.clearAbsoluteOriginOnScreenDebugY()()
{
  DocumentUnderstanding_ClientInterface_StructuredEntity.clearFrameInWindowDebugX()(&OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__absoluteOriginOnScreenDebugY);
}

uint64_t (*DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  UnknownStorage.init()();
  v2 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a1 + v2) = static DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.defaultInstance;
  return swift_retain();
}

uint64_t variable initialization expression of DocumentUnderstanding_ClientInterface_StructuredEntity._storage()
{
  return variable initialization expression of DocumentUnderstanding_ClientInterface_StructuredEntity._storage(&one-time initialization token for defaultInstance);
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntityLabel.labelName.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel(0)
                          + 20));
  if (v1[1])
    v2 = *v1;
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_StructuredEntityLabel.labelName : DocumentUnderstanding_ClientInterface_StructuredEntityLabel@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = (uint64_t *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel(0)
                          + 20));
  v4 = v3[1];
  if (v4)
  {
    v5 = *v3;
    v6 = v4;
  }
  else
  {
    v5 = 0;
    v6 = 0xE000000000000000;
  }
  *a2 = v5;
  a2[1] = v6;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_StructuredEntityLabel.labelName : DocumentUnderstanding_ClientInterface_StructuredEntityLabel(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;

  v3 = *a1;
  v2 = a1[1];
  v4 = (_QWORD *)(a2
                + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel(0)
                         + 20));
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *v4 = v3;
  v4[1] = v2;
  return result;
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntityLabel.labelName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2
                + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel(0)
                         + 20));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*DocumentUnderstanding_ClientInterface_StructuredEntityLabel.labelName.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel(0) + 20);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_ClientInterface_StructuredEntityLabel.labelName.modify;
}

BOOL DocumentUnderstanding_ClientInterface_StructuredEntityLabel.hasLabelName.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0
                   + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel(0)
                            + 20)
                   + 8) != 0;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_StructuredEntityLabel.clearLabelName()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(v0
                + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel(0)
                         + 20));
  swift_bridgeObjectRelease();
  *v1 = 0;
  v1[1] = 0;
}

double DocumentUnderstanding_ClientInterface_StructuredEntityLabel.confidenceScore.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = v0 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel(0) + 24);
  result = *(double *)v1;
  if (*(_BYTE *)(v1 + 8))
    return 0.0;
  return result;
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_StructuredEntityLabel.confidenceScore : DocumentUnderstanding_ClientInterface_StructuredEntityLabel@<X0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  double v6;

  result = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel(0);
  v5 = a1 + *(int *)(result + 24);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *a2 = v6;
  return result;
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_StructuredEntityLabel.confidenceScore : DocumentUnderstanding_ClientInterface_StructuredEntityLabel(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a1;
  result = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel(0);
  v5 = a2 + *(int *)(result + 24);
  *(_QWORD *)v5 = v3;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntityLabel.confidenceScore.setter(double a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel(0);
  v4 = v1 + *(int *)(result + 24);
  *(double *)v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*DocumentUnderstanding_ClientInterface_StructuredEntityLabel.confidenceScore.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return DocumentUnderstanding_ClientInterface_StructuredEntityLabel.confidenceScore.modify;
}

BOOL DocumentUnderstanding_ClientInterface_StructuredEntityLabel.hasConfidenceScore.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0
                   + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel(0)
                            + 24)
                   + 8) & 1) == 0;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_StructuredEntityLabel.clearConfidenceScore()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel(0) + 24);
  *(_QWORD *)v1 = 0;
  *(_BYTE *)(v1 + 8) = 1;
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*DocumentUnderstanding_ClientInterface_StructuredEntityLabel.unknownFields.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntityLabel.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;

  UnknownStorage.init()();
  result = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel(0);
  v3 = (_QWORD *)(a1 + *(int *)(result + 20));
  *v3 = 0;
  v3[1] = 0;
  v4 = a1 + *(int *)(result + 24);
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = 1;
  return result;
}

uint64_t variable initialization expression of DocumentUnderstanding_ClientInterface_StructuredEntityLabel._labelName()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_ClientInterface_StructuredEntityLabel._confidenceScore()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_ClientInterface_CalendarEvent.isAllDay()
{
  return 0;
}

uint64_t DocumentUnderstanding_ClientInterface_CalendarEvent.isAllDay.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t DocumentUnderstanding_ClientInterface_CalendarEvent.isAllDay.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*DocumentUnderstanding_ClientInterface_CalendarEvent.isAllDay.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DocumentUnderstanding_ClientInterface_CalendarEvent.startDate.getter()
{
  uint64_t v0;
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;

  v1 = (uint64_t *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0) + 24));
  v2 = v1[1];
  if (v2 >> 60 == 15)
    v3 = 0;
  else
    v3 = *v1;
  outlined copy of Data?(*v1, v2);
  return v3;
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_CalendarEvent.startDate : DocumentUnderstanding_ClientInterface_CalendarEvent@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = (uint64_t *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0) + 24));
  v4 = *v3;
  v5 = v3[1];
  if (v5 >> 60 == 15)
    v6 = 0;
  else
    v6 = *v3;
  v7 = 0xC000000000000000;
  if (v5 >> 60 != 15)
    v7 = v5;
  *a2 = v6;
  a2[1] = v7;
  return outlined copy of Data?(v4, v5);
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_CalendarEvent.startDate : DocumentUnderstanding_ClientInterface_CalendarEvent(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = (uint64_t *)(a2
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0) + 24));
  v5 = *v4;
  v6 = v4[1];
  outlined copy of Data._Representation(v2, v3);
  result = outlined consume of Data?(v5, v6);
  *v4 = v2;
  v4[1] = v3;
  return result;
}

uint64_t DocumentUnderstanding_ClientInterface_CalendarEvent.startDate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = v2 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0) + 24);
  result = outlined consume of Data?(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
  *(_QWORD *)v5 = a1;
  *(_QWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t (*DocumentUnderstanding_ClientInterface_CalendarEvent.startDate.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0) + 24);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = *v4;
  v6 = v4[1];
  if (v6 >> 60 == 15)
    v7 = 0;
  else
    v7 = *v4;
  v8 = 0xC000000000000000;
  if (v6 >> 60 != 15)
    v8 = v6;
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v8;
  outlined copy of Data?(v5, v6);
  return DocumentUnderstanding_ClientInterface_CalendarEvent.startDate.modify;
}

BOOL DocumentUnderstanding_ClientInterface_CalendarEvent.hasStartDate.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0
                   + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0) + 24)
                   + 8) >> 60 != 15;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_CalendarEvent.clearStartDate()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0) + 24);
  outlined consume of Data?(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  *(_OWORD *)v1 = xmmword_2284C0CD0;
}

uint64_t DocumentUnderstanding_ClientInterface_CalendarEvent.startTimezone.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0) + 28));
  if (v1[1])
    v2 = *v1;
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_CalendarEvent.startTimezone : DocumentUnderstanding_ClientInterface_CalendarEvent@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = (uint64_t *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0) + 28));
  v4 = v3[1];
  if (v4)
  {
    v5 = *v3;
    v6 = v4;
  }
  else
  {
    v5 = 0;
    v6 = 0xE000000000000000;
  }
  *a2 = v5;
  a2[1] = v6;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_CalendarEvent.startTimezone : DocumentUnderstanding_ClientInterface_CalendarEvent(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;

  v3 = *a1;
  v2 = a1[1];
  v4 = (_QWORD *)(a2 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0) + 28));
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *v4 = v3;
  v4[1] = v2;
  return result;
}

uint64_t DocumentUnderstanding_ClientInterface_CalendarEvent.startTimezone.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0) + 28));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*DocumentUnderstanding_ClientInterface_CalendarEvent.startTimezone.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0) + 28);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_ClientInterface_StructuredEntityLabel.labelName.modify;
}

BOOL DocumentUnderstanding_ClientInterface_CalendarEvent.hasStartTimezone.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0
                   + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0) + 28)
                   + 8) != 0;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_CalendarEvent.clearStartTimezone()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(v0 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0) + 28));
  swift_bridgeObjectRelease();
  *v1 = 0;
  v1[1] = 0;
}

uint64_t DocumentUnderstanding_ClientInterface_CalendarEvent.endDate.getter()
{
  uint64_t v0;
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;

  v1 = (uint64_t *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0) + 32));
  v2 = v1[1];
  if (v2 >> 60 == 15)
    v3 = 0;
  else
    v3 = *v1;
  outlined copy of Data?(*v1, v2);
  return v3;
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_CalendarEvent.endDate : DocumentUnderstanding_ClientInterface_CalendarEvent@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = (uint64_t *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0) + 32));
  v4 = *v3;
  v5 = v3[1];
  if (v5 >> 60 == 15)
    v6 = 0;
  else
    v6 = *v3;
  v7 = 0xC000000000000000;
  if (v5 >> 60 != 15)
    v7 = v5;
  *a2 = v6;
  a2[1] = v7;
  return outlined copy of Data?(v4, v5);
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_CalendarEvent.endDate : DocumentUnderstanding_ClientInterface_CalendarEvent(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = (uint64_t *)(a2
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0) + 32));
  v5 = *v4;
  v6 = v4[1];
  outlined copy of Data._Representation(v2, v3);
  result = outlined consume of Data?(v5, v6);
  *v4 = v2;
  v4[1] = v3;
  return result;
}

uint64_t DocumentUnderstanding_ClientInterface_CalendarEvent.endDate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = v2 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0) + 32);
  result = outlined consume of Data?(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
  *(_QWORD *)v5 = a1;
  *(_QWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t (*DocumentUnderstanding_ClientInterface_CalendarEvent.endDate.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0) + 32);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = *v4;
  v6 = v4[1];
  if (v6 >> 60 == 15)
    v7 = 0;
  else
    v7 = *v4;
  v8 = 0xC000000000000000;
  if (v6 >> 60 != 15)
    v8 = v6;
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v8;
  outlined copy of Data?(v5, v6);
  return DocumentUnderstanding_ClientInterface_CalendarEvent.startDate.modify;
}

uint64_t DocumentUnderstanding_ClientInterface_CalendarEvent.startDate.modify(uint64_t a1, char a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) + *(int *)(a1 + 24);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)v3;
  v6 = *(_QWORD *)(v3 + 8);
  if ((a2 & 1) != 0)
  {
    outlined copy of Data._Representation(*(_QWORD *)a1, v2);
    outlined consume of Data?(v5, v6);
    *(_QWORD *)v3 = v4;
    *(_QWORD *)(v3 + 8) = v2;
    return outlined consume of Data._Representation(v4, v2);
  }
  else
  {
    result = outlined consume of Data?(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
    *(_QWORD *)v3 = v4;
    *(_QWORD *)(v3 + 8) = v2;
  }
  return result;
}

BOOL DocumentUnderstanding_ClientInterface_CalendarEvent.hasEndDate.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0
                   + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0) + 32)
                   + 8) >> 60 != 15;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_CalendarEvent.clearEndDate()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0) + 32);
  outlined consume of Data?(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  *(_OWORD *)v1 = xmmword_2284C0CD0;
}

uint64_t DocumentUnderstanding_ClientInterface_CalendarEvent.endTimezone.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0) + 36));
  if (v1[1])
    v2 = *v1;
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_CalendarEvent.endTimezone : DocumentUnderstanding_ClientInterface_CalendarEvent@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = (uint64_t *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0) + 36));
  v4 = v3[1];
  if (v4)
  {
    v5 = *v3;
    v6 = v4;
  }
  else
  {
    v5 = 0;
    v6 = 0xE000000000000000;
  }
  *a2 = v5;
  a2[1] = v6;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_CalendarEvent.endTimezone : DocumentUnderstanding_ClientInterface_CalendarEvent(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;

  v3 = *a1;
  v2 = a1[1];
  v4 = (_QWORD *)(a2 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0) + 36));
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *v4 = v3;
  v4[1] = v2;
  return result;
}

uint64_t DocumentUnderstanding_ClientInterface_CalendarEvent.endTimezone.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0) + 36));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*DocumentUnderstanding_ClientInterface_CalendarEvent.endTimezone.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0) + 36);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_ClientInterface_StructuredEntityLabel.labelName.modify;
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntityLabel.labelName.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;

  v2 = a1[1];
  v3 = (_QWORD *)(a1[2] + *((int *)a1 + 6));
  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *v3 = v4;
    v3[1] = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    result = swift_bridgeObjectRelease();
    *v3 = v4;
    v3[1] = v2;
  }
  return result;
}

BOOL DocumentUnderstanding_ClientInterface_CalendarEvent.hasEndTimezone.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0
                   + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0) + 36)
                   + 8) != 0;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_CalendarEvent.clearEndTimezone()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(v0 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0) + 36));
  swift_bridgeObjectRelease();
  *v1 = 0;
  v1[1] = 0;
}

uint64_t DocumentUnderstanding_ClientInterface_CalendarEvent.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0) + 20);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t DocumentUnderstanding_ClientInterface_CalendarEvent.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0) + 20);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*DocumentUnderstanding_ClientInterface_CalendarEvent.unknownFields.modify())(_QWORD)
{
  type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0);
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t variable initialization expression of DocumentUnderstanding_ClientInterface_CalendarEvent._startDate()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_ClientInterface_CalendarEvent._startTimezone()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_ClientInterface_CalendarEvent._endDate()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_ClientInterface_CalendarEvent._endTimezone()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_ClientInterface_DisplayInfo.frameInWindow()
{
  return 0;
}

uint64_t DocumentUnderstanding_ClientInterface_DisplayInfo.frameInWindow.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  outlined copy of Data._Representation(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t DocumentUnderstanding_ClientInterface_DisplayInfo.frameInWindow.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of Data._Representation(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  *(_QWORD *)v2 = a1;
  *(_QWORD *)(v2 + 8) = a2;
  return result;
}

uint64_t (*DocumentUnderstanding_ClientInterface_DisplayInfo.frameInWindow.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t variable initialization expression of DocumentUnderstanding_ClientInterface_DisplayInfo.absoluteOriginOnScreen()
{
  return 0;
}

uint64_t DocumentUnderstanding_ClientInterface_DisplayInfo.absoluteOriginOnScreen.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  outlined copy of Data._Representation(v1, *(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t DocumentUnderstanding_ClientInterface_DisplayInfo.absoluteOriginOnScreen.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of Data._Representation(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*DocumentUnderstanding_ClientInterface_DisplayInfo.absoluteOriginOnScreen.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t variable initialization expression of DocumentUnderstanding_ClientInterface_DisplayInfo.isOnScreen()
{
  return 0;
}

uint64_t DocumentUnderstanding_ClientInterface_DisplayInfo.isOnScreen.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t DocumentUnderstanding_ClientInterface_DisplayInfo.isOnScreen.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 32) = result;
  return result;
}

uint64_t (*DocumentUnderstanding_ClientInterface_DisplayInfo.isOnScreen.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

double DocumentUnderstanding_ClientInterface_DisplayInfo.frameInWindowDebugX.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = v0 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0) + 32);
  result = *(double *)v1;
  if (*(_BYTE *)(v1 + 8))
    return 0.0;
  return result;
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_DisplayInfo.frameInWindowDebugX : DocumentUnderstanding_ClientInterface_DisplayInfo@<X0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  double v6;

  result = type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0);
  v5 = a1 + *(int *)(result + 32);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *a2 = v6;
  return result;
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_DisplayInfo.frameInWindowDebugX : DocumentUnderstanding_ClientInterface_DisplayInfo(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a1;
  result = type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0);
  v5 = a2 + *(int *)(result + 32);
  *(_QWORD *)v5 = v3;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t DocumentUnderstanding_ClientInterface_DisplayInfo.frameInWindowDebugX.setter(double a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0);
  v4 = v1 + *(int *)(result + 32);
  *(double *)v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*DocumentUnderstanding_ClientInterface_DisplayInfo.frameInWindowDebugX.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return DocumentUnderstanding_ClientInterface_StructuredEntityLabel.confidenceScore.modify;
}

BOOL DocumentUnderstanding_ClientInterface_DisplayInfo.hasFrameInWindowDebugX.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0
                   + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0) + 32)
                   + 8) & 1) == 0;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_DisplayInfo.clearFrameInWindowDebugX()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0) + 32);
  *(_QWORD *)v1 = 0;
  *(_BYTE *)(v1 + 8) = 1;
}

double DocumentUnderstanding_ClientInterface_DisplayInfo.frameInWindowDebugY.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = v0 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0) + 36);
  result = *(double *)v1;
  if (*(_BYTE *)(v1 + 8))
    return 0.0;
  return result;
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_DisplayInfo.frameInWindowDebugY : DocumentUnderstanding_ClientInterface_DisplayInfo@<X0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  double v6;

  result = type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0);
  v5 = a1 + *(int *)(result + 36);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *a2 = v6;
  return result;
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_DisplayInfo.frameInWindowDebugY : DocumentUnderstanding_ClientInterface_DisplayInfo(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a1;
  result = type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0);
  v5 = a2 + *(int *)(result + 36);
  *(_QWORD *)v5 = v3;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t DocumentUnderstanding_ClientInterface_DisplayInfo.frameInWindowDebugY.setter(double a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0);
  v4 = v1 + *(int *)(result + 36);
  *(double *)v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*DocumentUnderstanding_ClientInterface_DisplayInfo.frameInWindowDebugY.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0) + 36);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return DocumentUnderstanding_ClientInterface_StructuredEntityLabel.confidenceScore.modify;
}

BOOL DocumentUnderstanding_ClientInterface_DisplayInfo.hasFrameInWindowDebugY.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0
                   + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0) + 36)
                   + 8) & 1) == 0;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_DisplayInfo.clearFrameInWindowDebugY()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0) + 36);
  *(_QWORD *)v1 = 0;
  *(_BYTE *)(v1 + 8) = 1;
}

double DocumentUnderstanding_ClientInterface_DisplayInfo.frameInWindowDebugWidth.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = v0 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0) + 40);
  result = *(double *)v1;
  if (*(_BYTE *)(v1 + 8))
    return 0.0;
  return result;
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_DisplayInfo.frameInWindowDebugWidth : DocumentUnderstanding_ClientInterface_DisplayInfo@<X0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  double v6;

  result = type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0);
  v5 = a1 + *(int *)(result + 40);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *a2 = v6;
  return result;
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_DisplayInfo.frameInWindowDebugWidth : DocumentUnderstanding_ClientInterface_DisplayInfo(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a1;
  result = type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0);
  v5 = a2 + *(int *)(result + 40);
  *(_QWORD *)v5 = v3;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t DocumentUnderstanding_ClientInterface_DisplayInfo.frameInWindowDebugWidth.setter(double a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0);
  v4 = v1 + *(int *)(result + 40);
  *(double *)v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*DocumentUnderstanding_ClientInterface_DisplayInfo.frameInWindowDebugWidth.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0) + 40);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return DocumentUnderstanding_ClientInterface_StructuredEntityLabel.confidenceScore.modify;
}

BOOL DocumentUnderstanding_ClientInterface_DisplayInfo.hasFrameInWindowDebugWidth.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0
                   + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0) + 40)
                   + 8) & 1) == 0;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_DisplayInfo.clearFrameInWindowDebugWidth()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0) + 40);
  *(_QWORD *)v1 = 0;
  *(_BYTE *)(v1 + 8) = 1;
}

double DocumentUnderstanding_ClientInterface_DisplayInfo.frameInWindowDebugHeight.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = v0 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0) + 44);
  result = *(double *)v1;
  if (*(_BYTE *)(v1 + 8))
    return 0.0;
  return result;
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_DisplayInfo.frameInWindowDebugHeight : DocumentUnderstanding_ClientInterface_DisplayInfo@<X0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  double v6;

  result = type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0);
  v5 = a1 + *(int *)(result + 44);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *a2 = v6;
  return result;
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_DisplayInfo.frameInWindowDebugHeight : DocumentUnderstanding_ClientInterface_DisplayInfo(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a1;
  result = type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0);
  v5 = a2 + *(int *)(result + 44);
  *(_QWORD *)v5 = v3;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t DocumentUnderstanding_ClientInterface_DisplayInfo.frameInWindowDebugHeight.setter(double a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0);
  v4 = v1 + *(int *)(result + 44);
  *(double *)v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*DocumentUnderstanding_ClientInterface_DisplayInfo.frameInWindowDebugHeight.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0) + 44);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return DocumentUnderstanding_ClientInterface_StructuredEntityLabel.confidenceScore.modify;
}

BOOL DocumentUnderstanding_ClientInterface_DisplayInfo.hasFrameInWindowDebugHeight.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0
                   + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0) + 44)
                   + 8) & 1) == 0;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_DisplayInfo.clearFrameInWindowDebugHeight()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0) + 44);
  *(_QWORD *)v1 = 0;
  *(_BYTE *)(v1 + 8) = 1;
}

double DocumentUnderstanding_ClientInterface_DisplayInfo.absoluteOriginOnScreenDebugX.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = v0 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0) + 48);
  result = *(double *)v1;
  if (*(_BYTE *)(v1 + 8))
    return 0.0;
  return result;
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_DisplayInfo.absoluteOriginOnScreenDebugX : DocumentUnderstanding_ClientInterface_DisplayInfo@<X0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  double v6;

  result = type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0);
  v5 = a1 + *(int *)(result + 48);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *a2 = v6;
  return result;
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_DisplayInfo.absoluteOriginOnScreenDebugX : DocumentUnderstanding_ClientInterface_DisplayInfo(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a1;
  result = type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0);
  v5 = a2 + *(int *)(result + 48);
  *(_QWORD *)v5 = v3;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t DocumentUnderstanding_ClientInterface_DisplayInfo.absoluteOriginOnScreenDebugX.setter(double a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0);
  v4 = v1 + *(int *)(result + 48);
  *(double *)v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*DocumentUnderstanding_ClientInterface_DisplayInfo.absoluteOriginOnScreenDebugX.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0) + 48);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return DocumentUnderstanding_ClientInterface_StructuredEntityLabel.confidenceScore.modify;
}

BOOL DocumentUnderstanding_ClientInterface_DisplayInfo.hasAbsoluteOriginOnScreenDebugX.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0
                   + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0) + 48)
                   + 8) & 1) == 0;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_DisplayInfo.clearAbsoluteOriginOnScreenDebugX()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0) + 48);
  *(_QWORD *)v1 = 0;
  *(_BYTE *)(v1 + 8) = 1;
}

double DocumentUnderstanding_ClientInterface_DisplayInfo.absoluteOriginOnScreenDebugY.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = v0 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0) + 52);
  result = *(double *)v1;
  if (*(_BYTE *)(v1 + 8))
    return 0.0;
  return result;
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_DisplayInfo.absoluteOriginOnScreenDebugY : DocumentUnderstanding_ClientInterface_DisplayInfo@<X0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  double v6;

  result = type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0);
  v5 = a1 + *(int *)(result + 52);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *a2 = v6;
  return result;
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_DisplayInfo.absoluteOriginOnScreenDebugY : DocumentUnderstanding_ClientInterface_DisplayInfo(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a1;
  result = type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0);
  v5 = a2 + *(int *)(result + 52);
  *(_QWORD *)v5 = v3;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t DocumentUnderstanding_ClientInterface_DisplayInfo.absoluteOriginOnScreenDebugY.setter(double a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0);
  v4 = v1 + *(int *)(result + 52);
  *(double *)v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*DocumentUnderstanding_ClientInterface_DisplayInfo.absoluteOriginOnScreenDebugY.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0) + 52);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return DocumentUnderstanding_ClientInterface_StructuredEntityLabel.confidenceScore.modify;
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntityLabel.confidenceScore.modify(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 8) + *(int *)(result + 16);
  *(_QWORD *)v1 = *(_QWORD *)result;
  *(_BYTE *)(v1 + 8) = 0;
  return result;
}

BOOL DocumentUnderstanding_ClientInterface_DisplayInfo.hasAbsoluteOriginOnScreenDebugY.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0
                   + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0) + 52)
                   + 8) & 1) == 0;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_DisplayInfo.clearAbsoluteOriginOnScreenDebugY()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0) + 52);
  *(_QWORD *)v1 = 0;
  *(_BYTE *)(v1 + 8) = 1;
}

uint64_t DocumentUnderstanding_ClientInterface_DisplayInfo.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0) + 28);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t DocumentUnderstanding_ClientInterface_DisplayInfo.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0) + 28);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*DocumentUnderstanding_ClientInterface_DisplayInfo.unknownFields.modify())(_QWORD)
{
  type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0);
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t variable initialization expression of DocumentUnderstanding_ClientInterface_DisplayInfo._frameInWindowDebugX()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_ClientInterface_DisplayInfo._frameInWindowDebugY()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_ClientInterface_DisplayInfo._frameInWindowDebugWidth()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_ClientInterface_DisplayInfo._frameInWindowDebugHeight()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_ClientInterface_DisplayInfo._absoluteOriginOnScreenDebugX()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_ClientInterface_DisplayInfo._absoluteOriginOnScreenDebugY()
{
  return 0;
}

void *DocumentUnderstanding_ClientInterface_StructuredEntity.protoMessageName.unsafeMutableAddressor()
{
  return &static DocumentUnderstanding_ClientInterface_StructuredEntity.protoMessageName;
}

unint64_t static DocumentUnderstanding_ClientInterface_StructuredEntity.protoMessageName.getter()
{
  return 0xD000000000000038;
}

uint64_t one-time initialization function for _protobuf_nameMap()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  _QWORD *v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  uint64_t v48;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static DocumentUnderstanding_ClientInterface_StructuredEntity._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static DocumentUnderstanding_ClientInterface_StructuredEntity._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v48 = swift_allocObject();
  *(_OWORD *)(v48 + 16) = xmmword_2284C0CF0;
  v5 = v48 + v4;
  v6 = v48 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v48 + v4) = 1;
  *(_QWORD *)v6 = "title";
  *(_QWORD *)(v6 + 8) = 5;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v48 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 9;
  *(_QWORD *)v10 = "type";
  *(_QWORD *)(v10 + 8) = 4;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v48 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 20;
  *(_QWORD *)v12 = "labels";
  *((_QWORD *)v12 + 1) = 6;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v48 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 2;
  *(_QWORD *)v14 = "phoneNumber";
  *((_QWORD *)v14 + 1) = 11;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v48 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "email";
  *((_QWORD *)v16 + 1) = 5;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v48 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "url";
  *((_QWORD *)v18 + 1) = 3;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v48 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "addressComponents";
  *((_QWORD *)v20 + 1) = 17;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v48 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 7;
  *(_QWORD *)v22 = "CalendarEvent";
  *((_QWORD *)v22 + 1) = 13;
  v22[16] = 2;
  v9();
  v23 = v48 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 10;
  *(_QWORD *)v23 = "homeAutomationID";
  *(_QWORD *)(v23 + 8) = 16;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v48 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 21;
  *(_QWORD *)v25 = "displayInfo";
  *((_QWORD *)v25 + 1) = 11;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v48 + v4 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 8;
  *(_QWORD *)v27 = "responseDebugInfo";
  *((_QWORD *)v27 + 1) = 17;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v48 + v4 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 3;
  *(_QWORD *)v29 = "phoneNumberLabel";
  *((_QWORD *)v29 + 1) = 16;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v48 + v4 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 11;
  *(_QWORD *)v31 = "frameInWindow";
  *((_QWORD *)v31 + 1) = 13;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v48 + v4 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 12;
  *(_QWORD *)v33 = "absoluteOriginOnScreen";
  *((_QWORD *)v33 + 1) = 22;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v48 + v4 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 13;
  *(_QWORD *)v35 = "isOnScreen";
  *((_QWORD *)v35 + 1) = 10;
  v35[16] = 2;
  v9();
  v36 = (_QWORD *)(v48 + v4 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 14;
  *(_QWORD *)v37 = "frameInWindow_debugX";
  *((_QWORD *)v37 + 1) = 20;
  v37[16] = 2;
  v9();
  v38 = v48 + v4 + 16 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 16 * v3) = 15;
  *(_QWORD *)v38 = "frameInWindow_debugY";
  *(_QWORD *)(v38 + 8) = 20;
  *(_BYTE *)(v38 + 16) = 2;
  v9();
  v39 = (_QWORD *)(v48 + v4 + 17 * v3);
  v40 = (char *)v39 + *(int *)(v1 + 48);
  *v39 = 16;
  *(_QWORD *)v40 = "frameInWindow_debugWidth";
  *((_QWORD *)v40 + 1) = 24;
  v40[16] = 2;
  v9();
  v41 = (_QWORD *)(v48 + v4 + 18 * v3);
  v42 = (char *)v41 + *(int *)(v1 + 48);
  *v41 = 17;
  *(_QWORD *)v42 = "frameInWindow_debugHeight";
  *((_QWORD *)v42 + 1) = 25;
  v42[16] = 2;
  v9();
  v43 = (_QWORD *)(v48 + v4 + 19 * v3);
  v44 = (char *)v43 + *(int *)(v1 + 48);
  *v43 = 18;
  *(_QWORD *)v44 = "absoluteOriginOnScreen_debugX";
  *((_QWORD *)v44 + 1) = 29;
  v44[16] = 2;
  v9();
  v45 = (_QWORD *)(v48 + v4 + 20 * v3);
  v46 = (char *)v45 + *(int *)(v1 + 48);
  *v45 = 19;
  *(_QWORD *)v46 = "absoluteOriginOnScreen_debugY";
  *((_QWORD *)v46 + 1) = 29;
  v46[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static DocumentUnderstanding_ClientInterface_StructuredEntityLabel._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static DocumentUnderstanding_ClientInterface_StructuredEntityLabel._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2284C0D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "labelName";
  *(_QWORD *)(v7 + 8) = 9;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "confidenceScore";
  *((_QWORD *)v11 + 1) = 15;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static DocumentUnderstanding_ClientInterface_CalendarEvent._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static DocumentUnderstanding_ClientInterface_CalendarEvent._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2284C0D10;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "isAllDay";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "startDate";
  *(_QWORD *)(v11 + 8) = 9;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "startTimezone";
  *((_QWORD *)v13 + 1) = 13;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "endDate";
  *((_QWORD *)v15 + 1) = 7;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "endTimezone";
  *(_QWORD *)(v16 + 8) = 11;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static DocumentUnderstanding_ClientInterface_DisplayInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static DocumentUnderstanding_ClientInterface_DisplayInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_2284C0D20;
  v5 = v25 + v4;
  v6 = v25 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v25 + v4) = 1;
  *(_QWORD *)v6 = "frameInWindow";
  *(_QWORD *)(v6 + 8) = 13;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "absoluteOriginOnScreen";
  *(_QWORD *)(v10 + 8) = 22;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "isOnScreen";
  *((_QWORD *)v12 + 1) = 10;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "frameInWindow_debugX";
  *((_QWORD *)v14 + 1) = 20;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "frameInWindow_debugY";
  *((_QWORD *)v16 + 1) = 20;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "frameInWindow_debugWidth";
  *((_QWORD *)v18 + 1) = 24;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "frameInWindow_debugHeight";
  *((_QWORD *)v20 + 1) = 25;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "absoluteOriginOnScreen_debugX";
  *((_QWORD *)v22 + 1) = 29;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "absoluteOriginOnScreen_debugY";
  *(_QWORD *)(v23 + 8) = 29;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static DocumentUnderstanding_ClientInterface_Response._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static DocumentUnderstanding_ClientInterface_Response._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2284C1AF0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "topics";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "structuredEntities";
  *(_QWORD *)(v11 + 8) = 18;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 5;
  *(_QWORD *)v13 = "languageTags";
  *((_QWORD *)v13 + 1) = 12;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 6;
  *(_QWORD *)v15 = "userInterfaceUnderstandingResults";
  *((_QWORD *)v15 + 1) = 33;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 7;
  *(_QWORD *)v17 = "documentCategories";
  *((_QWORD *)v17 + 1) = 18;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 8;
  *(_QWORD *)v19 = "foundInEventResult";
  *((_QWORD *)v19 + 1) = 18;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 3;
  *(_QWORD *)v21 = "responseDebugInfo";
  *((_QWORD *)v21 + 1) = 17;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2284C0D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "topicIdentifier";
  *(_QWORD *)(v7 + 8) = 15;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "topicConfidence";
  *((_QWORD *)v11 + 1) = 15;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, (uint64_t *)&apostropheRegex.value._pattern);
  __swift_project_value_buffer(v0, (uint64_t)&apostropheRegex.value._pattern);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2284C1EE0;
  v5 = v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v4 + v3) = 1;
  *(_QWORD *)v5 = "values";
  *(_QWORD *)(v5 + 8) = 6;
  *(_BYTE *)(v5 + 16) = 2;
  v6 = *MEMORY[0x24BE5C318];
  v7 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, (uint64_t *)&apostropheRegex.value._checkout);
  __swift_project_value_buffer(v0, (uint64_t)&apostropheRegex.value._checkout);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2284C2A60;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "modelName";
  *(_QWORD *)(v7 + 8) = 9;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "hiddenLayerSize";
  *(_QWORD *)(v11 + 8) = 15;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "nHiddenLayers";
  *((_QWORD *)v13 + 1) = 13;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "sequenceSize";
  *((_QWORD *)v15 + 1) = 12;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "pooledHiddenLayerValues";
  *((_QWORD *)v17 + 1) = 23;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "hiddenLayerValues";
  *((_QWORD *)v19 + 1) = 17;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static DocumentUnderstanding_ClientInterface_TopicResult._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static DocumentUnderstanding_ClientInterface_TopicResult._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2284C2EB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "topicSet";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "topicIdentifier";
  *(_QWORD *)(v11 + 8) = 15;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "topicConfidence";
  *((_QWORD *)v13 + 1) = 15;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "topicNames";
  *((_QWORD *)v15 + 1) = 10;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2284C2EB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "attributeNamespace";
  *(_QWORD *)(v7 + 8) = 18;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "attributeType";
  *(_QWORD *)(v11 + 8) = 13;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "attributeId";
  *((_QWORD *)v13 + 1) = 11;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "displayName";
  *((_QWORD *)v15 + 1) = 11;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  uint64_t v42;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v42 = swift_allocObject();
  *(_OWORD *)(v42 + 16) = xmmword_2284C3440;
  v5 = v42 + v4;
  v6 = v42 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v42 + v4) = 1;
  *(_QWORD *)v6 = "text";
  *(_QWORD *)(v6 + 8) = 4;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v42 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "version";
  *(_QWORD *)(v10 + 8) = 7;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v42 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "classDescriptor";
  *((_QWORD *)v12 + 1) = 15;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v42 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "fontSize";
  *((_QWORD *)v14 + 1) = 8;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v42 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "superviewClassNames";
  *((_QWORD *)v16 + 1) = 19;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v42 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "frameInWindow";
  *((_QWORD *)v18 + 1) = 13;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v42 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "absoluteOriginOnScreen";
  *((_QWORD *)v20 + 1) = 22;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v42 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "isOnScreen";
  *((_QWORD *)v22 + 1) = 10;
  v22[16] = 2;
  v9();
  v23 = v42 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "isValidForContentExtraction";
  *(_QWORD *)(v23 + 8) = 27;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v42 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "frameInWindow_debugX";
  *((_QWORD *)v25 + 1) = 20;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v42 + v4 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "frameInWindow_debugY";
  *((_QWORD *)v27 + 1) = 20;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v42 + v4 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "frameInWindow_debugWidth";
  *((_QWORD *)v29 + 1) = 24;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v42 + v4 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 13;
  *(_QWORD *)v31 = "frameInWindow_debugHeight";
  *((_QWORD *)v31 + 1) = 25;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v42 + v4 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 14;
  *(_QWORD *)v33 = "absoluteOriginOnScreen_debugX";
  *((_QWORD *)v33 + 1) = 29;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v42 + v4 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 15;
  *(_QWORD *)v35 = "absoluteOriginOnScreen_debugY";
  *((_QWORD *)v35 + 1) = 29;
  v35[16] = 2;
  v9();
  v36 = (_QWORD *)(v42 + v4 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 16;
  *(_QWORD *)v37 = "superviewClassIndices";
  *((_QWORD *)v37 + 1) = 21;
  v37[16] = 2;
  v9();
  v38 = v42 + v4 + 16 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 16 * v3) = 17;
  *(_QWORD *)v38 = "range";
  *(_QWORD *)(v38 + 8) = 5;
  *(_BYTE *)(v38 + 16) = 2;
  v9();
  v39 = (_QWORD *)(v42 + v4 + 17 * v3);
  v40 = (char *)v39 + *(int *)(v1 + 48);
  *v39 = 18;
  *(_QWORD *)v40 = "styleProperties";
  *((_QWORD *)v40 + 1) = 15;
  v40[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  uint64_t v29;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static DocumentUnderstanding_DocumentRepresentation_DocumentEmailData._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static DocumentUnderstanding_DocumentRepresentation_DocumentEmailData._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_2284C3940;
  v5 = v29 + v4;
  v6 = v29 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v29 + v4) = 1;
  *(_QWORD *)v6 = "subject";
  *(_QWORD *)(v6 + 8) = 7;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "senderName";
  *(_QWORD *)(v10 + 8) = 10;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "senderEmail";
  *((_QWORD *)v12 + 1) = 11;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "senderDomain";
  *((_QWORD *)v14 + 1) = 12;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "recipientNames";
  *((_QWORD *)v16 + 1) = 14;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "recipientEmails";
  *((_QWORD *)v18 + 1) = 15;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "ccNames";
  *((_QWORD *)v20 + 1) = 7;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "ccEmails";
  *((_QWORD *)v22 + 1) = 8;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "bccNames";
  *(_QWORD *)(v23 + 8) = 8;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v5 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "bccEmails";
  *((_QWORD *)v25 + 1) = 9;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v5 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "dateReceived";
  *((_QWORD *)v27 + 1) = 12;
  v27[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static DocumentUnderstanding_ClientInterface_CategoryResult._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static DocumentUnderstanding_ClientInterface_CategoryResult._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2284C0D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "categoryIdentifier";
  *(_QWORD *)(v7 + 8) = 18;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "categoryConfidence";
  *((_QWORD *)v11 + 1) = 18;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static DocumentUnderstanding_ClientInterface_TopicDetectionResponse._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static DocumentUnderstanding_ClientInterface_TopicDetectionResponse._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2284C25C0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "globalTopics";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "personalTopics";
  *((_QWORD *)v11 + 1) = 14;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "responseDebugInfo";
  *(_QWORD *)(v12 + 8) = 17;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  _QWORD *v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  _QWORD *v49;
  char *v50;
  _QWORD *v51;
  char *v52;
  _QWORD *v53;
  char *v54;
  _QWORD *v55;
  char *v56;
  _QWORD *v57;
  char *v58;
  _QWORD *v59;
  char *v60;
  uint64_t v62;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v62 = swift_allocObject();
  *(_OWORD *)(v62 + 16) = xmmword_2284C43D0;
  v5 = v62 + v4;
  v6 = v62 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v62 + v4) = 1;
  *(_QWORD *)v6 = "featureCooccurrenceCount";
  *(_QWORD *)(v6 + 8) = 24;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "featureEntityCount";
  *(_QWORD *)(v10 + 8) = 18;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "featureImageCount";
  *((_QWORD *)v12 + 1) = 17;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "featureEntityImageRatio";
  *((_QWORD *)v14 + 1) = 23;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "featureImageEntityRatio";
  *((_QWORD *)v16 + 1) = 23;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "featureDeviceOwner";
  *((_QWORD *)v18 + 1) = 18;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "featureImageFaceRatio";
  *((_QWORD *)v20 + 1) = 21;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "featureNameMentionsRatio";
  *((_QWORD *)v22 + 1) = 24;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "featureUniqueNames";
  *(_QWORD *)(v23 + 8) = 18;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v5 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "featureUniqueFaces";
  *((_QWORD *)v25 + 1) = 18;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v5 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "featureFaceCount";
  *((_QWORD *)v27 + 1) = 16;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v5 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "featureSenderFaceCount";
  *((_QWORD *)v29 + 1) = 22;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v5 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 13;
  *(_QWORD *)v31 = "featureReceiverFaceCount";
  *((_QWORD *)v31 + 1) = 24;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v5 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 14;
  *(_QWORD *)v33 = "featureTaggerFaceCount";
  *((_QWORD *)v33 + 1) = 22;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v5 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 15;
  *(_QWORD *)v35 = "featurePronounFaceCount";
  *((_QWORD *)v35 + 1) = 23;
  v35[16] = 2;
  v9();
  v36 = (_QWORD *)(v5 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 16;
  *(_QWORD *)v37 = "featureTotalConversationThreads";
  *((_QWORD *)v37 + 1) = 31;
  v37[16] = 2;
  v9();
  v38 = v5 + 16 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 16 * v3) = 17;
  *(_QWORD *)v38 = "featureTotalMessages";
  *(_QWORD *)(v38 + 8) = 20;
  *(_BYTE *)(v38 + 16) = 2;
  v9();
  v39 = (_QWORD *)(v5 + 17 * v3);
  v40 = (char *)v39 + *(int *)(v1 + 48);
  *v39 = 18;
  *(_QWORD *)v40 = "featureMessagesCountInThreadsForFace";
  *((_QWORD *)v40 + 1) = 36;
  v40[16] = 2;
  v9();
  v41 = (_QWORD *)(v5 + 18 * v3);
  v42 = (char *)v41 + *(int *)(v1 + 48);
  *v41 = 19;
  *(_QWORD *)v42 = "featureMessagesCountInThreadsForName";
  *((_QWORD *)v42 + 1) = 36;
  v42[16] = 2;
  v9();
  v43 = (_QWORD *)(v5 + 19 * v3);
  v44 = (char *)v43 + *(int *)(v1 + 48);
  *v43 = 20;
  *(_QWORD *)v44 = "featureEntityDistances";
  *((_QWORD *)v44 + 1) = 22;
  v44[16] = 2;
  v9();
  v45 = (_QWORD *)(v5 + 20 * v3);
  v46 = (char *)v45 + *(int *)(v1 + 48);
  *v45 = 21;
  *(_QWORD *)v46 = "featureContextTextLengths";
  *((_QWORD *)v46 + 1) = 25;
  v46[16] = 2;
  v9();
  v47 = (_QWORD *)(v5 + 21 * v3);
  v48 = (char *)v47 + *(int *)(v1 + 48);
  *v47 = 22;
  *(_QWORD *)v48 = "featureModelConfidence";
  *((_QWORD *)v48 + 1) = 22;
  v48[16] = 2;
  v9();
  v49 = (_QWORD *)(v5 + 22 * v3);
  v50 = (char *)v49 + *(int *)(v1 + 48);
  *v49 = 23;
  *(_QWORD *)v50 = "featureModelThreshold";
  *((_QWORD *)v50 + 1) = 21;
  v50[16] = 2;
  v9();
  v51 = (_QWORD *)(v5 + 23 * v3);
  v52 = (char *)v51 + *(int *)(v1 + 48);
  *v51 = 24;
  *(_QWORD *)v52 = "featureEcrFaceCount";
  *((_QWORD *)v52 + 1) = 19;
  v52[16] = 2;
  v9();
  v53 = (_QWORD *)(v5 + 24 * v3);
  v54 = (char *)v53 + *(int *)(v1 + 48);
  *v53 = 25;
  *(_QWORD *)v54 = "featureEcrEntityDistances";
  *((_QWORD *)v54 + 1) = 25;
  v54[16] = 2;
  v9();
  v55 = (_QWORD *)(v5 + 25 * v3);
  v56 = (char *)v55 + *(int *)(v1 + 48);
  *v55 = 26;
  *(_QWORD *)v56 = "featureEcrContextTextLengths";
  *((_QWORD *)v56 + 1) = 28;
  v56[16] = 2;
  v9();
  v57 = (_QWORD *)(v5 + 26 * v3);
  v58 = (char *)v57 + *(int *)(v1 + 48);
  *v57 = 27;
  *(_QWORD *)v58 = "featureTaggerConfidences";
  *((_QWORD *)v58 + 1) = 24;
  v58[16] = 2;
  v9();
  v59 = (_QWORD *)(v5 + 27 * v3);
  v60 = (char *)v59 + *(int *)(v1 + 48);
  *v59 = 28;
  *(_QWORD *)v60 = "featureEcrConfidences";
  *((_QWORD *)v60 + 1) = 21;
  v60[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static DocumentUnderstanding_Autonaming_TrainingData._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static DocumentUnderstanding_Autonaming_TrainingData._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2284C2EB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "features";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "annotation";
  *(_QWORD *)(v11 + 8) = 10;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "groundTruthAvailable";
  *((_QWORD *)v13 + 1) = 20;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "cooccurrenceKey";
  *((_QWORD *)v15 + 1) = 15;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static DocumentUnderstanding_DocumentRepresentation_DocumentMessageData._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static DocumentUnderstanding_DocumentRepresentation_DocumentMessageData._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2284C2A60;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "conversationIdentifier";
  *(_QWORD *)(v7 + 8) = 22;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "creatorHandle";
  *(_QWORD *)(v11 + 8) = 13;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "recipientHandles";
  *((_QWORD *)v13 + 1) = 16;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "recipientNames";
  *((_QWORD *)v15 + 1) = 14;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "attachmentFileName";
  *((_QWORD *)v17 + 1) = 18;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "attachmentFilePath";
  *((_QWORD *)v19 + 1) = 18;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static DocumentUnderstanding_TopicSetIdentifier._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static DocumentUnderstanding_TopicSetIdentifier._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2284C0D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "topicSetName";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "topicSetVersion";
  *((_QWORD *)v11 + 1) = 15;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static DocumentUnderstanding_TopicSetIdentifier.TopicSetName._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static DocumentUnderstanding_TopicSetIdentifier.TopicSetName._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2284C0D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "WIKIDATA";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "NEWS";
  *((_QWORD *)v11 + 1) = 4;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static DocumentUnderstanding_ClientInterface_DebugInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static DocumentUnderstanding_ClientInterface_DebugInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2284C1EE0;
  v5 = v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v4 + v3) = 1;
  *(_QWORD *)v5 = "debugString";
  *(_QWORD *)(v5 + 8) = 11;
  *(_BYTE *)(v5 + 16) = 2;
  v6 = *MEMORY[0x24BE5C318];
  v7 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2284C0D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "htmlString";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "documentEmailData";
  *((_QWORD *)v11 + 1) = 17;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static DocumentUnderstanding_PosTaggingResult._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static DocumentUnderstanding_PosTaggingResult._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2284C2EB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "tag";
  *(_QWORD *)(v7 + 8) = 3;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "text";
  *(_QWORD *)(v11 + 8) = 4;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "start";
  *((_QWORD *)v13 + 1) = 5;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "len";
  *((_QWORD *)v15 + 1) = 3;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static DocumentUnderstanding_ClientInterface_LanguageTaggingResponse._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static DocumentUnderstanding_ClientInterface_LanguageTaggingResponse._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2284C0D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "languageTags";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "responseDebugInfo";
  *((_QWORD *)v11 + 1) = 17;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static DocumentUnderstanding_ClientInterface_StructuredEntityResponse._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static DocumentUnderstanding_ClientInterface_StructuredEntityResponse._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2284C0D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "structuredEntities";
  *(_QWORD *)(v7 + 8) = 18;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "responseDebugInfo";
  *((_QWORD *)v11 + 1) = 17;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2284C1AF0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "documentId";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "documentBody";
  *(_QWORD *)(v11 + 8) = 12;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 7;
  *(_QWORD *)v13 = "document";
  *((_QWORD *)v13 + 1) = 8;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 6;
  *(_QWORD *)v15 = "associatedFileURL";
  *((_QWORD *)v15 + 1) = 17;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 3;
  *(_QWORD *)v17 = "documentType";
  *((_QWORD *)v17 + 1) = 12;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 4;
  *(_QWORD *)v19 = "documentAttributes";
  *((_QWORD *)v19 + 1) = 18;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 5;
  *(_QWORD *)v21 = "updateTimestamp";
  *((_QWORD *)v21 + 1) = 15;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static DocumentUnderstanding_ClientInterface_TaggedCharacterRange._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static DocumentUnderstanding_ClientInterface_TaggedCharacterRange._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2284C2EB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "annotationType";
  *(_QWORD *)(v7 + 8) = 14;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "tags";
  *(_QWORD *)(v11 + 8) = 4;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "range";
  *((_QWORD *)v13 + 1) = 5;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "text";
  *((_QWORD *)v15 + 1) = 4;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_2284C0D20;
  v5 = v25 + v4;
  v6 = v25 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v25 + v4) = 0;
  *(_QWORD *)v6 = "unknown";
  *(_QWORD *)(v6 + 8) = 7;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 1;
  *(_QWORD *)v10 = "css";
  *(_QWORD *)(v10 + 8) = 3;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 2;
  *(_QWORD *)v12 = "cross";
  *((_QWORD *)v12 + 1) = 5;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "dataDetectors";
  *((_QWORD *)v14 + 1) = 13;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "html";
  *((_QWORD *)v16 + 1) = 4;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "human";
  *((_QWORD *)v18 + 1) = 5;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "misc";
  *((_QWORD *)v20 + 1) = 4;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 7;
  *(_QWORD *)v22 = "modelOutput";
  *((_QWORD *)v22 + 1) = 11;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 8;
  *(_QWORD *)v23 = "wordToken";
  *(_QWORD *)(v23 + 8) = 9;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  _QWORD *v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  _QWORD *v49;
  char *v50;
  _QWORD *v51;
  char *v52;
  _QWORD *v53;
  char *v54;
  _QWORD *v55;
  char *v56;
  _QWORD *v57;
  char *v58;
  uint64_t v60;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static DocumentUnderstanding_ClientInterface_FoundInEventResult._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static DocumentUnderstanding_ClientInterface_FoundInEventResult._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v60 = swift_allocObject();
  *(_OWORD *)(v60 + 16) = xmmword_2284C8280;
  v5 = v60 + v4;
  v6 = v60 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v60 + v4) = 1;
  *(_QWORD *)v6 = "detectedEventPolarity";
  *(_QWORD *)(v6 + 8) = 21;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v60 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "reservationIdError";
  *(_QWORD *)(v10 + 8) = 18;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v60 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "reservationId";
  *((_QWORD *)v12 + 1) = 13;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v60 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "reservationNameError";
  *((_QWORD *)v14 + 1) = 20;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v60 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "reservationName";
  *((_QWORD *)v16 + 1) = 15;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v60 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "startAddressError";
  *((_QWORD *)v18 + 1) = 17;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v60 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "startAddress";
  *((_QWORD *)v20 + 1) = 12;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v60 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "startAddressComponents";
  *((_QWORD *)v22 + 1) = 22;
  v22[16] = 2;
  v9();
  v23 = v60 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "endAddressError";
  *(_QWORD *)(v23 + 8) = 15;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v60 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "endAddress";
  *((_QWORD *)v25 + 1) = 10;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v60 + v4 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "endAddressComponents";
  *((_QWORD *)v27 + 1) = 20;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v60 + v4 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "startPlaceError";
  *((_QWORD *)v29 + 1) = 15;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v60 + v4 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 13;
  *(_QWORD *)v31 = "startPlace";
  *((_QWORD *)v31 + 1) = 10;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v60 + v4 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 14;
  *(_QWORD *)v33 = "endPlaceError";
  *((_QWORD *)v33 + 1) = 13;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v60 + v4 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 15;
  *(_QWORD *)v35 = "endPlace";
  *((_QWORD *)v35 + 1) = 8;
  v35[16] = 2;
  v9();
  v36 = (_QWORD *)(v60 + v4 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 16;
  *(_QWORD *)v37 = "startDateError";
  *((_QWORD *)v37 + 1) = 14;
  v37[16] = 2;
  v9();
  v38 = v60 + v4 + 16 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 16 * v3) = 17;
  *(_QWORD *)v38 = "startDate";
  *(_QWORD *)(v38 + 8) = 9;
  *(_BYTE *)(v38 + 16) = 2;
  v9();
  v39 = (_QWORD *)(v60 + v4 + 17 * v3);
  v40 = (char *)v39 + *(int *)(v1 + 48);
  *v39 = 18;
  *(_QWORD *)v40 = "endDateError";
  *((_QWORD *)v40 + 1) = 12;
  v40[16] = 2;
  v9();
  v41 = (_QWORD *)(v60 + v4 + 18 * v3);
  v42 = (char *)v41 + *(int *)(v1 + 48);
  *v41 = 19;
  *(_QWORD *)v42 = "endDate";
  *((_QWORD *)v42 + 1) = 7;
  v42[16] = 2;
  v9();
  v43 = (_QWORD *)(v60 + v4 + 19 * v3);
  v44 = (char *)v43 + *(int *)(v1 + 48);
  *v43 = 20;
  *(_QWORD *)v44 = "hotelNameError";
  *((_QWORD *)v44 + 1) = 14;
  v44[16] = 2;
  v9();
  v45 = (_QWORD *)(v60 + v4 + 20 * v3);
  v46 = (char *)v45 + *(int *)(v1 + 48);
  *v45 = 21;
  *(_QWORD *)v46 = "hotelName";
  *((_QWORD *)v46 + 1) = 9;
  v46[16] = 2;
  v9();
  v47 = (_QWORD *)(v60 + v4 + 21 * v3);
  v48 = (char *)v47 + *(int *)(v1 + 48);
  *v47 = 22;
  *(_QWORD *)v48 = "guestNameError";
  *((_QWORD *)v48 + 1) = 14;
  v48[16] = 2;
  v9();
  v49 = (_QWORD *)(v60 + v4 + 22 * v3);
  v50 = (char *)v49 + *(int *)(v1 + 48);
  *v49 = 23;
  *(_QWORD *)v50 = "guestName";
  *((_QWORD *)v50 + 1) = 9;
  v50[16] = 2;
  v9();
  v51 = (_QWORD *)(v60 + v4 + 23 * v3);
  v52 = (char *)v51 + *(int *)(v1 + 48);
  *v51 = 24;
  *(_QWORD *)v52 = "movieNameError";
  *((_QWORD *)v52 + 1) = 14;
  v52[16] = 2;
  v9();
  v53 = (_QWORD *)(v60 + v4 + 24 * v3);
  v54 = (char *)v53 + *(int *)(v1 + 48);
  *v53 = 25;
  *(_QWORD *)v54 = "movieName";
  *((_QWORD *)v54 + 1) = 9;
  v54[16] = 2;
  v9();
  v55 = (_QWORD *)(v60 + v4 + 25 * v3);
  v56 = (char *)v55 + *(int *)(v1 + 48);
  *v55 = 26;
  *(_QWORD *)v56 = "text";
  *((_QWORD *)v56 + 1) = 4;
  v56[16] = 2;
  v9();
  v57 = (_QWORD *)(v60 + v4 + 26 * v3);
  v58 = (char *)v57 + *(int *)(v1 + 48);
  *v57 = 27;
  *(_QWORD *)v58 = "tags";
  *((_QWORD *)v58 + 1) = 4;
  v58[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2284C25C0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "ErrorUnknown";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "ErrorUnableToResolveCandidates";
  *((_QWORD *)v11 + 1) = 30;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 2;
  *(_QWORD *)v12 = "ErrorUnableToPredictCandidates";
  *(_QWORD *)(v12 + 8) = 30;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Dutool_TopicVectorEntry._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Dutool_TopicVectorEntry._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2284C25C0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "title";
  *(_QWORD *)(v7 + 8) = 5;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "qid";
  *((_QWORD *)v11 + 1) = 3;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "vector";
  *(_QWORD *)(v12 + 8) = 6;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  uint64_t v42;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static DocumentUnderstanding_DocumentRepresentation_Document._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static DocumentUnderstanding_DocumentRepresentation_Document._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v42 = swift_allocObject();
  *(_OWORD *)(v42 + 16) = xmmword_2284C3440;
  v5 = v42 + v4;
  v6 = v42 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v42 + v4) = 1;
  *(_QWORD *)v6 = "headline";
  *(_QWORD *)(v6 + 8) = 8;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "subHeadline";
  *(_QWORD *)(v10 + 8) = 11;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "version";
  *((_QWORD *)v12 + 1) = 7;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "creator";
  *((_QWORD *)v14 + 1) = 7;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "abstract";
  *((_QWORD *)v16 + 1) = 8;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "comment";
  *((_QWORD *)v18 + 1) = 7;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "text";
  *((_QWORD *)v20 + 1) = 4;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "inLanguage";
  *((_QWORD *)v22 + 1) = 10;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "keywords";
  *(_QWORD *)(v23 + 8) = 8;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v5 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "identifier";
  *((_QWORD *)v25 + 1) = 10;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v5 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "url";
  *((_QWORD *)v27 + 1) = 3;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v5 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "thumbnailUrl";
  *((_QWORD *)v29 + 1) = 12;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v5 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 13;
  *(_QWORD *)v31 = "significantLink";
  *((_QWORD *)v31 + 1) = 15;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v5 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 14;
  *(_QWORD *)v33 = "dateCreated";
  *((_QWORD *)v33 + 1) = 11;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v5 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 15;
  *(_QWORD *)v35 = "dateModified";
  *((_QWORD *)v35 + 1) = 12;
  v35[16] = 2;
  v9();
  v36 = (_QWORD *)(v5 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 16;
  *(_QWORD *)v37 = "documentUIElements";
  *((_QWORD *)v37 + 1) = 18;
  v37[16] = 2;
  v9();
  v38 = v5 + 16 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 16 * v3) = 17;
  *(_QWORD *)v38 = "documentHTMLData";
  *(_QWORD *)(v38 + 8) = 16;
  *(_BYTE *)(v38 + 16) = 2;
  v9();
  v39 = (_QWORD *)(v5 + 17 * v3);
  v40 = (char *)v39 + *(int *)(v1 + 48);
  *v39 = 18;
  *(_QWORD *)v40 = "documentMessageData";
  *((_QWORD *)v40 + 1) = 19;
  v40[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2284C0D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "foundEntities";
  *(_QWORD *)(v7 + 8) = 13;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "responseDebugInfo";
  *((_QWORD *)v11 + 1) = 17;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static DocumentUnderstanding_ClientInterface_CategoryClassificationResponse._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static DocumentUnderstanding_ClientInterface_CategoryClassificationResponse._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2284C0D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "categories";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "responseDebugInfo";
  *((_QWORD *)v11 + 1) = 17;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2284C0D10;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "documentNamespace";
  *(_QWORD *)(v7 + 8) = 17;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "documentId";
  *(_QWORD *)(v11 + 8) = 10;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "spotlightBundleID";
  *((_QWORD *)v13 + 1) = 17;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "spotlightDomainIdentifier";
  *((_QWORD *)v15 + 1) = 25;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "spotlightUniqueIdentifier";
  *(_QWORD *)(v16 + 8) = 25;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity._protobuf_nameMap.unsafeMutableAddressor()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DocumentUnderstanding_ClientInterface_StructuredEntity._protobuf_nameMap);
}

uint64_t static DocumentUnderstanding_ClientInterface_StructuredEntity._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static DocumentUnderstanding_ClientInterface_StructuredEntity._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DocumentUnderstanding_ClientInterface_StructuredEntity._protobuf_nameMap, a1);
}

uint64_t one-time initialization function for defaultInstance()
{
  uint64_t result;

  type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
  swift_allocObject();
  result = DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init()();
  static DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.defaultInstance = result;
  return result;
}

{
  uint64_t result;

  type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
  swift_allocObject();
  result = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init()();
  static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance = result;
  return result;
}

{
  uint64_t result;

  type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
  swift_allocObject();
  result = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init()();
  static DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.defaultInstance = result;
  return result;
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  v1 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 48) = MEMORY[0x24BEE4AF8];
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_QWORD *)(v0 + 104) = specialized Dictionary.init(dictionaryLiteral:)(v1);
  v2 = v0
     + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__calendarEvent;
  v3 = type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  v4 = (_QWORD *)(v0
                + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__homeAutomationID);
  *v4 = 0;
  v4[1] = 0;
  v5 = v0
     + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__displayInfo;
  v6 = type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = v0
     + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__responseDebugInfo;
  v8 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = (_QWORD *)(v0
                + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__phoneNumberLabel);
  *v9 = 0;
  v9[1] = 0;
  *(_OWORD *)(v0
            + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindow) = xmmword_2284C0CE0;
  *(_OWORD *)(v0
            + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__absoluteOriginOnScreen) = xmmword_2284C0CE0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__isOnScreen) = 0;
  v10 = v0
      + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugX;
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  v11 = v0
      + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugY;
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  v12 = v0
      + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugWidth;
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = 1;
  v13 = v0
      + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugHeight;
  *(_QWORD *)v13 = 0;
  *(_BYTE *)(v13 + 8) = 1;
  v14 = v0
      + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__absoluteOriginOnScreenDebugX;
  *(_QWORD *)v14 = 0;
  *(_BYTE *)(v14 + 8) = 1;
  v15 = v0
      + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__absoluteOriginOnScreenDebugY;
  *(_QWORD *)v15 = 0;
  *(_BYTE *)(v15 + 8) = 1;
  return v0;
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0+ OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__calendarEvent, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CalendarEvent?);
  swift_bridgeObjectRelease();
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0+ OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__displayInfo, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DisplayInfo?);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0+ OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__responseDebugInfo, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(v0+ OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindow), *(_QWORD *)(v0+ OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindow+ 8));
  outlined consume of Data._Representation(*(_QWORD *)(v0+ OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__absoluteOriginOnScreen), *(_QWORD *)(v0+ OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__absoluteOriginOnScreen+ 8));
  return v0;
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.__deallocating_deinit()
{
  DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.deinit();
  return swift_deallocClassInstance();
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = v3;
  v8 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
    swift_allocObject();
    v9 = (_QWORD *)swift_retain();
    v10 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v9);
    swift_release();
    *(_QWORD *)(v4 + v8) = v10;
    swift_release();
  }
  v11 = swift_retain();
  closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.decodeMessage<A>(decoder:)(v11, a1, a2, a3);
  return swift_release();
}

uint64_t closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  char v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    v11 = (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BE5C118];
    v12 = (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BE5C0A8];
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          closure #1 in closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.decodeMessage<A>(decoder:)();
          break;
        case 2:
          closure #2 in closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.decodeMessage<A>(decoder:)();
          break;
        case 3:
          v13 = a2;
          v14 = a1;
          v15 = a3;
          v16 = a4;
          v17 = &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__phoneNumberLabel;
          goto LABEL_18;
        case 4:
          closure #4 in closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.decodeMessage<A>(decoder:)();
          break;
        case 5:
          closure #5 in closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.decodeMessage<A>(decoder:)();
          break;
        case 6:
          closure #6 in closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.decodeMessage<A>(decoder:)();
          break;
        case 7:
          closure #7 in closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.decodeMessage<A>(decoder:)(a2, a1, a3, a4, (uint64_t)&OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__calendarEvent, type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent, &lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_CalendarEvent and conformance DocumentUnderstanding_ClientInterface_CalendarEvent, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_CalendarEvent);
          break;
        case 8:
          closure #7 in closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.decodeMessage<A>(decoder:)(a2, a1, a3, a4, (uint64_t)&OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__responseDebugInfo, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo, &lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_DebugInfo and conformance DocumentUnderstanding_ClientInterface_DebugInfo, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_DebugInfo);
          break;
        case 9:
          closure #9 in closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.decodeMessage<A>(decoder:)();
          break;
        case 10:
          v13 = a2;
          v14 = a1;
          v15 = a3;
          v16 = a4;
          v17 = &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__homeAutomationID;
LABEL_18:
          closure #3 in closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.decodeMessage<A>(decoder:)(v13, v14, v15, v16, v17, v11);
          break;
        case 11:
          v18 = a2;
          v19 = a1;
          v20 = a3;
          v21 = a4;
          v22 = &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindow;
          goto LABEL_21;
        case 12:
          v18 = a2;
          v19 = a1;
          v20 = a3;
          v21 = a4;
          v22 = &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__absoluteOriginOnScreen;
LABEL_21:
          closure #3 in closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.decodeMessage<A>(decoder:)(v18, v19, v20, v21, v22, v12);
          break;
        case 13:
          closure #13 in closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.decodeMessage<A>(decoder:)();
          break;
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
          closure #14 in closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.decodeMessage<A>(decoder:)();
          break;
        case 20:
          closure #20 in closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.decodeMessage<A>(decoder:)();
          break;
        case 21:
          closure #7 in closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.decodeMessage<A>(decoder:)(a2, a1, a3, a4, (uint64_t)&OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__displayInfo, type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo, &lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_DisplayInfo and conformance DocumentUnderstanding_ClientInterface_DisplayInfo, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_DisplayInfo);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #2 in closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #4 in closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #5 in closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #6 in closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  type metadata accessor for ProtobufString();
  dispatch thunk of Decoder.decodeMapField<A, B>(fieldType:value:)();
  return swift_endAccess();
}

uint64_t closure #9 in closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #3 in closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, void (*a6)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;

  v9 = a2 + *a5;
  swift_beginAccess();
  a6(v9, a3, a4);
  return swift_endAccess();
}

uint64_t closure #13 in closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBoolField(value:)();
  return swift_endAccess();
}

uint64_t closure #14 in closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
  return swift_endAccess();
}

uint64_t closure #20 in closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel(0);
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_StructuredEntityLabel and conformance DocumentUnderstanding_ClientInterface_StructuredEntityLabel, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel);
  dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
  return swift_endAccess();
}

uint64_t closure #7 in closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t), unint64_t *a7, uint64_t a8)
{
  swift_beginAccess();
  a6(0);
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(a7, a6, a8);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  return swift_endAccess();
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t result;

  type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0);
  v7 = swift_retain();
  closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.traverse<A>(visitor:)(v7, a1, a2, a3);
  result = swift_release();
  if (!v3)
    return UnknownStorage.traverse<A>(visitor:)();
  return result;
}

uint64_t closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v10;

  result = closure #1 in closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.traverse<A>(visitor:)(a1);
  if (!v4)
  {
    closure #2 in closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.traverse<A>(visitor:)(a1);
    closure #3 in closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.traverse<A>(visitor:)(a1, a2, a3, a4, &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__phoneNumberLabel);
    closure #4 in closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.traverse<A>(visitor:)(a1);
    closure #5 in closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.traverse<A>(visitor:)(a1);
    swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)(a1 + 104) + 16))
    {
      type metadata accessor for ProtobufString();
      swift_bridgeObjectRetain();
      dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)();
      swift_bridgeObjectRelease();
    }
    closure #6 in closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.traverse<A>(visitor:)(a1, a2, a3, a4);
    closure #7 in closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.traverse<A>(visitor:)(a1, a2, a3, a4);
    closure #8 in closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.traverse<A>(visitor:)(a1);
    closure #3 in closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.traverse<A>(visitor:)(a1, a2, a3, a4, &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__homeAutomationID);
    v10 = a1
        + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindow;
    swift_beginAccess();
    __asm { BR              X10 }
  }
  return result;
}

uint64_t sub_2282EFAD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((v3 & 0xFF000000000000) != 0)
  {
    outlined copy of Data._Representation(v2, v3);
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    outlined consume of Data._Representation(v2, v3);
    if (v1)
      JUMPOUT(0x2282EF96CLL);
  }
  v4 = v0
     + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__absoluteOriginOnScreen;
  v5 = swift_beginAccess();
  return ((uint64_t (*)(uint64_t))((char *)sub_2282EFB70 + 4 * byte_2284C0D59[*(_QWORD *)(v4 + 8) >> 62]))(v5);
}

void sub_2282EFB70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _BYTE *v7;

  if ((v6 & 0xFF000000000000) == 0
    || (outlined copy of Data._Representation(v5, v6),
        dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(),
        outlined consume of Data._Representation(v5, v6),
        !v4))
  {
    v7 = (_BYTE *)(v3
                 + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__isOnScreen);
    swift_beginAccess();
    if (*v7 != 1 || (dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v4))
    {
      closure #10 in closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.traverse<A>(visitor:)(v3, v1, v2, v0, &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugX);
      if (!v4)
      {
        closure #10 in closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.traverse<A>(visitor:)(v3, v1, v2, v0, &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugY);
        closure #10 in closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.traverse<A>(visitor:)(v3, v1, v2, v0, &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugWidth);
        closure #10 in closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.traverse<A>(visitor:)(v3, v1, v2, v0, &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugHeight);
        closure #10 in closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.traverse<A>(visitor:)(v3, v1, v2, v0, &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__absoluteOriginOnScreenDebugX);
        closure #10 in closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.traverse<A>(visitor:)(v3, v1, v2, v0, &OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__absoluteOriginOnScreenDebugY);
        swift_beginAccess();
        if (*(_QWORD *)(*(_QWORD *)(v3 + 48) + 16))
        {
          type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel(0);
          lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_StructuredEntityLabel and conformance DocumentUnderstanding_ClientInterface_StructuredEntityLabel, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel);
          swift_bridgeObjectRetain();
          dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
          swift_bridgeObjectRelease();
        }
        closure #16 in closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.traverse<A>(visitor:)(v3, v1, v2, v0);
      }
    }
  }
  JUMPOUT(0x2282EF96CLL);
}

uint64_t closure #1 in closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if (*(_QWORD *)(a1 + 24))
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #2 in closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if (*(_QWORD *)(a1 + 64))
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #4 in closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if (*(_QWORD *)(a1 + 80))
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #5 in closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if (*(_QWORD *)(a1 + 96))
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #6 in closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CalendarEvent?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__calendarEvent;
  swift_beginAccess();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v12, (uint64_t)v7, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CalendarEvent?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v7, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CalendarEvent?);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v7, (uint64_t)v11, type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent);
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_CalendarEvent and conformance DocumentUnderstanding_ClientInterface_CalendarEvent, type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_CalendarEvent);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v11, type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent);
}

uint64_t closure #7 in closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__responseDebugInfo;
  swift_beginAccess();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v12, (uint64_t)v7, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v7, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v7, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_DebugInfo and conformance DocumentUnderstanding_ClientInterface_DebugInfo, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_DebugInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
}

uint64_t closure #8 in closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if (*(_QWORD *)(a1 + 40))
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #3 in closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t result;

  v5 = a1 + *a5;
  result = swift_beginAccess();
  if (*(_QWORD *)(v5 + 8))
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #10 in closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t result;

  v5 = a1 + *a5;
  result = swift_beginAccess();
  if ((*(_BYTE *)(v5 + 8) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  return result;
}

uint64_t closure #16 in closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DisplayInfo?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__displayInfo;
  swift_beginAccess();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v12, (uint64_t)v7, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DisplayInfo?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v7, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DisplayInfo?);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v7, (uint64_t)v11, type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo);
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_DisplayInfo and conformance DocumentUnderstanding_ClientInterface_DisplayInfo, type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_DisplayInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v11, type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo);
}

uint64_t closure #1 in static DocumentUnderstanding_ClientInterface_StructuredEntity.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 *v70;
  char v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int (*v83)(uint64_t, uint64_t, uint64_t);
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int (*v92)(uint64_t, uint64_t, uint64_t);
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  char v107;
  char v108;
  uint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  char v115;
  char v116;
  unsigned __int8 *v117;
  int v118;
  unsigned __int8 *v119;
  double *v120;
  double v121;
  char v122;
  uint64_t v123;
  double *v124;
  double v125;
  char v126;
  uint64_t v127;
  double *v128;
  double v129;
  char v130;
  uint64_t v131;
  double *v132;
  double v133;
  char v134;
  uint64_t v135;
  double *v136;
  double v137;
  char v138;
  uint64_t v139;
  double *v140;
  double v141;
  char v142;
  uint64_t v143;
  double v144;
  int v145;
  char v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unsigned __int8 *v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;

  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v152 = *(_QWORD *)(v4 - 8);
  v153 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v148 = (uint64_t)&v147 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v151 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DocumentUnderstanding_ClientInterface_DebugInfo?, DocumentUnderstanding_ClientInterface_DebugInfo?));
  MEMORY[0x24BDAC7A8](v151);
  v7 = (char *)&v147 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v149 = (uint64_t)&v147 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v154 = (uint64_t)&v147 - v11;
  v12 = type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0);
  v156 = *(_QWORD *)(v12 - 8);
  v157 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v150 = (uint64_t)&v147 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v155 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DocumentUnderstanding_ClientInterface_DisplayInfo?, DocumentUnderstanding_ClientInterface_DisplayInfo?));
  MEMORY[0x24BDAC7A8](v155);
  v160 = (char *)&v147 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DisplayInfo?);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v159 = (char *)&v147 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v163 = (char *)&v147 - v18;
  v161 = type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0);
  v19 = *(_QWORD *)(v161 - 8);
  MEMORY[0x24BDAC7A8](v161);
  v158 = (unsigned __int8 *)&v147 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DocumentUnderstanding_ClientInterface_CalendarEvent?, DocumentUnderstanding_ClientInterface_CalendarEvent?));
  MEMORY[0x24BDAC7A8](v21);
  v162 = (uint64_t)&v147 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CalendarEvent?);
  v24 = MEMORY[0x24BDAC7A8](v23);
  v26 = (unsigned __int8 *)&v147 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v28 = (char *)&v147 - v27;
  swift_beginAccess();
  v30 = a1[2];
  v29 = a1[3];
  swift_beginAccess();
  v31 = a2[3];
  if (!v29)
  {
    if (v31)
      return 0;
    goto LABEL_8;
  }
  if (!v31)
    return 0;
  if (v30 == a2[2] && v29 == v31 || (v32 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v32 & 1) != 0))
  {
LABEL_8:
    swift_beginAccess();
    v34 = a1[4];
    v35 = a1[5];
    swift_beginAccess();
    v36 = a2[5];
    if (v35)
    {
      if (v36)
      {
        if (v34 != a2[4] || v35 != v36)
        {
          v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
          result = 0;
          if ((v37 & 1) == 0)
            return result;
        }
LABEL_15:
        v147 = v7;
        swift_beginAccess();
        v38 = a1[6];
        swift_beginAccess();
        v39 = a2[6];
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v40 = a2;
        v41 = specialized static Array<A>.== infix(_:_:)(v38, v39);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v41 & 1) == 0)
          goto LABEL_41;
        swift_beginAccess();
        v42 = a1[7];
        v43 = a1[8];
        swift_beginAccess();
        v44 = v40[8];
        if (v43)
        {
          if (!v44 || (v42 != v40[7] || v43 != v44) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            goto LABEL_41;
        }
        else if (v44)
        {
          goto LABEL_41;
        }
        swift_beginAccess();
        v45 = a1[9];
        v46 = a1[10];
        swift_beginAccess();
        v47 = v40[10];
        if (v46)
        {
          if (!v47 || (v45 != v40[9] || v46 != v47) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            goto LABEL_41;
        }
        else if (v47)
        {
          goto LABEL_41;
        }
        swift_beginAccess();
        v48 = a1[11];
        v49 = a1[12];
        swift_beginAccess();
        v50 = v40[12];
        if (v49)
        {
          if (!v50 || (v48 != v40[11] || v49 != v50) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            goto LABEL_41;
        }
        else if (v50)
        {
          goto LABEL_41;
        }
        swift_beginAccess();
        v51 = a1[13];
        swift_beginAccess();
        v52 = v40[13];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v53 = specialized static Dictionary<>.== infix(_:_:)(v51, v52);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v53 & 1) == 0)
          goto LABEL_41;
        v54 = (uint64_t)a1
            + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__calendarEvent;
        swift_beginAccess();
        outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v54, (uint64_t)v28, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CalendarEvent?);
        v55 = (uint64_t)v40
            + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__calendarEvent;
        swift_beginAccess();
        v56 = v40;
        v57 = v162;
        v58 = v162 + *(int *)(v21 + 48);
        outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v28, v162, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CalendarEvent?);
        outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v55, v58, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CalendarEvent?);
        v59 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
        v60 = v57;
        v61 = v57;
        v62 = v161;
        v63 = v56;
        if (v59(v61, 1, v161) == 1)
        {
          outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v28, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CalendarEvent?);
          v64 = v59(v58, 1, v62);
          v65 = (uint64_t)v163;
          if (v64 == 1)
          {
            outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v60, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CalendarEvent?);
            goto LABEL_50;
          }
        }
        else
        {
          outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v60, (uint64_t)v26, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CalendarEvent?);
          v66 = v59(v58, 1, v62);
          v65 = (uint64_t)v163;
          if (v66 != 1)
          {
            v69 = v58;
            v70 = v158;
            outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v69, (uint64_t)v158, type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent);
            v71 = specialized static DocumentUnderstanding_ClientInterface_CalendarEvent.== infix(_:_:)(v26, v70);
            outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v70, type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent);
            outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v28, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CalendarEvent?);
            outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v26, type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent);
            outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v60, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CalendarEvent?);
            if ((v71 & 1) == 0)
              goto LABEL_41;
LABEL_50:
            v72 = (_QWORD *)((char *)a1
                           + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__homeAutomationID);
            swift_beginAccess();
            v73 = *v72;
            v74 = v72[1];
            v75 = (_QWORD *)((char *)v63
                           + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__homeAutomationID);
            swift_beginAccess();
            v76 = v75[1];
            if (v74)
            {
              v78 = (uint64_t)v159;
              v77 = (uint64_t)v160;
              if (!v76 || (v73 != *v75 || v74 != v76) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                goto LABEL_41;
            }
            else
            {
              v78 = (uint64_t)v159;
              v77 = (uint64_t)v160;
              if (v76)
                goto LABEL_41;
            }
            v79 = (uint64_t)a1
                + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__displayInfo;
            swift_beginAccess();
            outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v79, v65, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DisplayInfo?);
            v80 = (uint64_t)v63
                + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__displayInfo;
            swift_beginAccess();
            v81 = v77 + *(int *)(v155 + 48);
            outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v65, v77, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DisplayInfo?);
            outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v80, v81, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DisplayInfo?);
            v82 = v157;
            v83 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v156 + 48);
            if (v83(v77, 1, v157) == 1)
            {
              outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v65, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DisplayInfo?);
              if (v83(v81, 1, v82) == 1)
              {
                outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v77, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DisplayInfo?);
LABEL_64:
                v86 = (uint64_t)a1
                    + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__responseDebugInfo;
                swift_beginAccess();
                v87 = v154;
                outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v86, v154, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
                v88 = (uint64_t)v63
                    + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__responseDebugInfo;
                swift_beginAccess();
                v89 = (uint64_t)v147;
                v90 = (uint64_t)&v147[*(int *)(v151 + 48)];
                outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v87, (uint64_t)v147, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
                outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v88, v90, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
                v91 = v153;
                v92 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v152 + 48);
                if (v92(v89, 1, v153) == 1)
                {
                  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v154, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
                  if (v92(v90, 1, v91) == 1)
                  {
                    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v147, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
LABEL_71:
                    v96 = (_QWORD *)((char *)a1
                                   + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__phoneNumberLabel);
                    swift_beginAccess();
                    v97 = *v96;
                    v98 = v96[1];
                    v99 = (_QWORD *)((char *)v63
                                   + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__phoneNumberLabel);
                    swift_beginAccess();
                    v100 = v99[1];
                    if (v98)
                    {
                      if (!v100
                        || (v97 != *v99 || v98 != v100) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                      {
                        goto LABEL_41;
                      }
                    }
                    else if (v100)
                    {
                      goto LABEL_41;
                    }
                    v101 = (_QWORD *)((char *)a1
                                    + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindow);
                    swift_beginAccess();
                    v103 = *v101;
                    v102 = v101[1];
                    v104 = (_QWORD *)((char *)v63
                                    + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindow);
                    swift_beginAccess();
                    v106 = *v104;
                    v105 = v104[1];
                    outlined copy of Data._Representation(v103, v102);
                    outlined copy of Data._Representation(v106, v105);
                    specialized static Data.== infix(_:_:)(v103, v102);
                    v108 = v107;
                    outlined consume of Data._Representation(v106, v105);
                    outlined consume of Data._Representation(v103, v102);
                    if ((v108 & 1) == 0)
                      goto LABEL_41;
                    v109 = (_QWORD *)((char *)a1
                                    + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__absoluteOriginOnScreen);
                    swift_beginAccess();
                    v111 = *v109;
                    v110 = v109[1];
                    v112 = (_QWORD *)((char *)v63
                                    + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__absoluteOriginOnScreen);
                    swift_beginAccess();
                    v114 = *v112;
                    v113 = v112[1];
                    outlined copy of Data._Representation(v111, v110);
                    outlined copy of Data._Representation(v114, v113);
                    specialized static Data.== infix(_:_:)(v111, v110);
                    v116 = v115;
                    outlined consume of Data._Representation(v114, v113);
                    outlined consume of Data._Representation(v111, v110);
                    if ((v116 & 1) == 0)
                      goto LABEL_41;
                    v117 = (unsigned __int8 *)a1
                         + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__isOnScreen;
                    swift_beginAccess();
                    v118 = *v117;
                    v119 = (unsigned __int8 *)v63
                         + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__isOnScreen;
                    swift_beginAccess();
                    if (v118 != *v119)
                      goto LABEL_41;
                    v120 = (double *)((char *)a1
                                    + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugX);
                    swift_beginAccess();
                    v121 = *v120;
                    v122 = *((_BYTE *)v120 + 8);
                    v123 = (uint64_t)v63
                         + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugX;
                    swift_beginAccess();
                    if ((v122 & 1) != 0)
                    {
                      if ((*(_BYTE *)(v123 + 8) & 1) == 0)
                        goto LABEL_41;
                    }
                    else if ((*(_BYTE *)(v123 + 8) & 1) != 0 || v121 != *(double *)v123)
                    {
                      goto LABEL_41;
                    }
                    v124 = (double *)((char *)a1
                                    + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugY);
                    swift_beginAccess();
                    v125 = *v124;
                    v126 = *((_BYTE *)v124 + 8);
                    v127 = (uint64_t)v63
                         + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugY;
                    swift_beginAccess();
                    if ((v126 & 1) != 0)
                    {
                      if ((*(_BYTE *)(v127 + 8) & 1) == 0)
                        goto LABEL_41;
                    }
                    else if ((*(_BYTE *)(v127 + 8) & 1) != 0 || v125 != *(double *)v127)
                    {
                      goto LABEL_41;
                    }
                    v128 = (double *)((char *)a1
                                    + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugWidth);
                    swift_beginAccess();
                    v129 = *v128;
                    v130 = *((_BYTE *)v128 + 8);
                    v131 = (uint64_t)v63
                         + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugWidth;
                    swift_beginAccess();
                    if ((v130 & 1) != 0)
                    {
                      if ((*(_BYTE *)(v131 + 8) & 1) == 0)
                        goto LABEL_41;
                    }
                    else if ((*(_BYTE *)(v131 + 8) & 1) != 0 || v129 != *(double *)v131)
                    {
                      goto LABEL_41;
                    }
                    v132 = (double *)((char *)a1
                                    + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugHeight);
                    swift_beginAccess();
                    v133 = *v132;
                    v134 = *((_BYTE *)v132 + 8);
                    v135 = (uint64_t)v63
                         + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugHeight;
                    swift_beginAccess();
                    if ((v134 & 1) != 0)
                    {
                      if ((*(_BYTE *)(v135 + 8) & 1) == 0)
                        goto LABEL_41;
                    }
                    else if ((*(_BYTE *)(v135 + 8) & 1) != 0 || v133 != *(double *)v135)
                    {
                      goto LABEL_41;
                    }
                    v136 = (double *)((char *)a1
                                    + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__absoluteOriginOnScreenDebugX);
                    swift_beginAccess();
                    v137 = *v136;
                    v138 = *((_BYTE *)v136 + 8);
                    v139 = (uint64_t)v63
                         + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__absoluteOriginOnScreenDebugX;
                    swift_beginAccess();
                    if ((v138 & 1) != 0)
                    {
                      if ((*(_BYTE *)(v139 + 8) & 1) != 0)
                        goto LABEL_107;
                    }
                    else if ((*(_BYTE *)(v139 + 8) & 1) == 0 && v137 == *(double *)v139)
                    {
LABEL_107:
                      v140 = (double *)((char *)a1
                                      + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__absoluteOriginOnScreenDebugY);
                      swift_beginAccess();
                      v141 = *v140;
                      v142 = *((_BYTE *)v140 + 8);
                      swift_release();
                      v143 = (uint64_t)v63
                           + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__absoluteOriginOnScreenDebugY;
                      swift_beginAccess();
                      v144 = *(double *)v143;
                      v145 = *(unsigned __int8 *)(v143 + 8);
                      swift_release();
                      if ((v142 & 1) != 0)
                      {
                        if (!v145)
                          return 0;
                      }
                      else
                      {
                        if (v141 == v144)
                          v146 = v145;
                        else
                          v146 = 1;
                        if ((v146 & 1) != 0)
                          return 0;
                      }
                      return 1;
                    }
LABEL_41:
                    swift_release();
                    swift_release();
                    return 0;
                  }
                }
                else
                {
                  v93 = v149;
                  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v147, v149, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
                  if (v92(v90, 1, v91) != 1)
                  {
                    v94 = v148;
                    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v90, v148, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
                    v95 = static DocumentUnderstanding_ClientInterface_DebugInfo.== infix(_:_:)(v93, v94);
                    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v94, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
                    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v154, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
                    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v93, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
                    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v147, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
                    if ((v95 & 1) == 0)
                      goto LABEL_41;
                    goto LABEL_71;
                  }
                  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v154, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
                  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v93, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
                }
                v67 = &demangling cache variable for type metadata for (DocumentUnderstanding_ClientInterface_DebugInfo?, DocumentUnderstanding_ClientInterface_DebugInfo?);
                v68 = (uint64_t)v147;
LABEL_47:
                outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v68, v67);
                goto LABEL_41;
              }
            }
            else
            {
              outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v77, v78, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DisplayInfo?);
              if (v83(v81, 1, v82) != 1)
              {
                v84 = v150;
                outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v81, v150, type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo);
                v85 = specialized static DocumentUnderstanding_ClientInterface_DisplayInfo.== infix(_:_:)(v78, v84);
                outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v84, type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo);
                outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v65, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DisplayInfo?);
                outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v78, type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo);
                outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v77, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DisplayInfo?);
                if ((v85 & 1) == 0)
                  goto LABEL_41;
                goto LABEL_64;
              }
              outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v65, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DisplayInfo?);
              outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v78, type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo);
            }
            v67 = &demangling cache variable for type metadata for (DocumentUnderstanding_ClientInterface_DisplayInfo?, DocumentUnderstanding_ClientInterface_DisplayInfo?);
            v68 = v77;
            goto LABEL_47;
          }
          outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v28, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CalendarEvent?);
          outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v26, type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent);
        }
        v67 = &demangling cache variable for type metadata for (DocumentUnderstanding_ClientInterface_CalendarEvent?, DocumentUnderstanding_ClientInterface_CalendarEvent?);
        v68 = v60;
        goto LABEL_47;
      }
    }
    else if (!v36)
    {
      goto LABEL_15;
    }
    return 0;
  }
  return result;
}

Swift::Int DocumentUnderstanding_ClientInterface_StructuredEntity.hashValue.getter()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.hashValue.getter(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity, &lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_StructuredEntity);
}

uint64_t protocol witness for Message.init() in conformance DocumentUnderstanding_ClientInterface_StructuredEntity@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  UnknownStorage.init()();
  v4 = *(int *)(a1 + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a2 + v4) = static DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.defaultInstance;
  return swift_retain();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance DocumentUnderstanding_ClientInterface_StructuredEntity()
{
  return 0xD000000000000038;
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance DocumentUnderstanding_ClientInterface_StructuredEntity())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance DocumentUnderstanding_ClientInterface_StructuredEntity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance DocumentUnderstanding_ClientInterface_StructuredEntity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance DocumentUnderstanding_ClientInterface_StructuredEntity()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_StructuredEntity);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DocumentUnderstanding_ClientInterface_StructuredEntity@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DocumentUnderstanding_ClientInterface_StructuredEntity._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DocumentUnderstanding_ClientInterface_StructuredEntity()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_StructuredEntity);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DocumentUnderstanding_ClientInterface_StructuredEntity()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_StructuredEntity);
  return Message.hash(into:)();
}

void *DocumentUnderstanding_ClientInterface_StructuredEntityLabel.protoMessageName.unsafeMutableAddressor()
{
  return &static DocumentUnderstanding_ClientInterface_StructuredEntityLabel.protoMessageName;
}

unint64_t static DocumentUnderstanding_ClientInterface_StructuredEntityLabel.protoMessageName.getter()
{
  return 0xD00000000000003DLL;
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntityLabel._protobuf_nameMap.unsafeMutableAddressor()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DocumentUnderstanding_ClientInterface_StructuredEntityLabel._protobuf_nameMap);
}

uint64_t static DocumentUnderstanding_ClientInterface_StructuredEntityLabel._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static DocumentUnderstanding_ClientInterface_StructuredEntity._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DocumentUnderstanding_ClientInterface_StructuredEntityLabel._protobuf_nameMap, a1);
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntityLabel.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 2)
    {
      type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel(0);
      dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
    }
    else if (result == 1)
    {
      type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel(0);
      dispatch thunk of Decoder.decodeSingularStringField(value:)();
    }
    v0 = 0;
  }
  return result;
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntityLabel.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  result = closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntityLabel.traverse<A>(visitor:)(v0);
  if (!v1)
  {
    closure #2 in DocumentUnderstanding_ClientInterface_StructuredEntityLabel.traverse<A>(visitor:)(v0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntityLabel.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel(0);
  if (*(_QWORD *)(a1 + *(int *)(result + 20) + 8))
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  return result;
}

uint64_t closure #2 in DocumentUnderstanding_ClientInterface_StructuredEntityLabel.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 24) + 8) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  return result;
}

Swift::Int DocumentUnderstanding_ClientInterface_StructuredEntityLabel.hashValue.getter()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.hashValue.getter(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel, &lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_StructuredEntityLabel and conformance DocumentUnderstanding_ClientInterface_StructuredEntityLabel, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel);
}

uint64_t protocol witness for Message.init() in conformance DocumentUnderstanding_ClientInterface_StructuredEntityLabel@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  result = UnknownStorage.init()();
  v5 = *(int *)(a1 + 24);
  v6 = (_QWORD *)(a2 + *(int *)(a1 + 20));
  *v6 = 0;
  v6[1] = 0;
  v7 = a2 + v5;
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance DocumentUnderstanding_ClientInterface_StructuredEntityLabel()
{
  return 0xD00000000000003DLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance DocumentUnderstanding_ClientInterface_StructuredEntityLabel()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntityLabel.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance DocumentUnderstanding_ClientInterface_StructuredEntityLabel()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntityLabel.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance DocumentUnderstanding_ClientInterface_StructuredEntityLabel()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_StructuredEntityLabel and conformance DocumentUnderstanding_ClientInterface_StructuredEntityLabel, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DocumentUnderstanding_ClientInterface_StructuredEntityLabel@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DocumentUnderstanding_ClientInterface_StructuredEntityLabel._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DocumentUnderstanding_ClientInterface_StructuredEntityLabel()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_StructuredEntityLabel and conformance DocumentUnderstanding_ClientInterface_StructuredEntityLabel, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DocumentUnderstanding_ClientInterface_StructuredEntityLabel()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_StructuredEntityLabel and conformance DocumentUnderstanding_ClientInterface_StructuredEntityLabel, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel);
  return Message.hash(into:)();
}

void *DocumentUnderstanding_ClientInterface_CalendarEvent.protoMessageName.unsafeMutableAddressor()
{
  return &static DocumentUnderstanding_ClientInterface_CalendarEvent.protoMessageName;
}

unint64_t static DocumentUnderstanding_ClientInterface_CalendarEvent.protoMessageName.getter()
{
  return 0xD000000000000035;
}

uint64_t DocumentUnderstanding_ClientInterface_CalendarEvent._protobuf_nameMap.unsafeMutableAddressor()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DocumentUnderstanding_ClientInterface_CalendarEvent._protobuf_nameMap);
}

uint64_t static DocumentUnderstanding_ClientInterface_CalendarEvent._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static DocumentUnderstanding_ClientInterface_StructuredEntity._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DocumentUnderstanding_ClientInterface_CalendarEvent._protobuf_nameMap, a1);
}

uint64_t DocumentUnderstanding_ClientInterface_CalendarEvent.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_5;
        case 2:
        case 4:
          type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          goto LABEL_5;
        case 3:
        case 5:
          type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t DocumentUnderstanding_ClientInterface_CalendarEvent.traverse<A>(visitor:)()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t result;

  if (*v0 != 1 || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
  {
    result = closure #1 in DocumentUnderstanding_ClientInterface_CalendarEvent.traverse<A>(visitor:)((uint64_t)v0);
    if (!v1)
    {
      closure #2 in DocumentUnderstanding_ClientInterface_CalendarEvent.traverse<A>(visitor:)((uint64_t)v0);
      closure #3 in DocumentUnderstanding_ClientInterface_CalendarEvent.traverse<A>(visitor:)((uint64_t)v0);
      closure #4 in DocumentUnderstanding_ClientInterface_CalendarEvent.traverse<A>(visitor:)((uint64_t)v0);
      type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #1 in DocumentUnderstanding_ClientInterface_CalendarEvent.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  result = type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0);
  v3 = a1 + *(int *)(result + 24);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    v5 = *(_QWORD *)v3;
    outlined copy of Data._Representation(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

uint64_t closure #2 in DocumentUnderstanding_ClientInterface_CalendarEvent.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0);
  if (*(_QWORD *)(a1 + *(int *)(result + 28) + 8))
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  return result;
}

uint64_t closure #3 in DocumentUnderstanding_ClientInterface_CalendarEvent.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  result = type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0);
  v3 = a1 + *(int *)(result + 32);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    v5 = *(_QWORD *)v3;
    outlined copy of Data._Representation(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

uint64_t closure #4 in DocumentUnderstanding_ClientInterface_CalendarEvent.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0);
  if (*(_QWORD *)(a1 + *(int *)(result + 36) + 8))
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  return result;
}

Swift::Int DocumentUnderstanding_ClientInterface_CalendarEvent.hashValue.getter()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.hashValue.getter(type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent, &lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_CalendarEvent and conformance DocumentUnderstanding_ClientInterface_CalendarEvent, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_CalendarEvent);
}

double protocol witness for Message.init() in conformance DocumentUnderstanding_ClientInterface_CalendarEvent@<D0>(int *a1@<X0>, _BYTE *a2@<X8>)
{
  double result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  *a2 = 0;
  UnknownStorage.init()();
  result = 0.0;
  v5 = a1[7];
  *(_OWORD *)&a2[a1[6]] = xmmword_2284C0CD0;
  v6 = &a2[v5];
  *v6 = 0;
  v6[1] = 0;
  v7 = a1[9];
  *(_OWORD *)&a2[a1[8]] = xmmword_2284C0CD0;
  v8 = &a2[v7];
  *v8 = 0;
  v8[1] = 0;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance DocumentUnderstanding_ClientInterface_CalendarEvent()
{
  return 0xD000000000000035;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance DocumentUnderstanding_ClientInterface_CalendarEvent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 20);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance DocumentUnderstanding_ClientInterface_CalendarEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance DocumentUnderstanding_ClientInterface_CalendarEvent())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance DocumentUnderstanding_ClientInterface_CalendarEvent()
{
  return DocumentUnderstanding_ClientInterface_CalendarEvent.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance DocumentUnderstanding_ClientInterface_CalendarEvent()
{
  return DocumentUnderstanding_ClientInterface_CalendarEvent.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance DocumentUnderstanding_ClientInterface_CalendarEvent()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_CalendarEvent and conformance DocumentUnderstanding_ClientInterface_CalendarEvent, type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_CalendarEvent);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DocumentUnderstanding_ClientInterface_CalendarEvent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DocumentUnderstanding_ClientInterface_CalendarEvent._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DocumentUnderstanding_ClientInterface_CalendarEvent()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_CalendarEvent and conformance DocumentUnderstanding_ClientInterface_CalendarEvent, type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_CalendarEvent);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DocumentUnderstanding_ClientInterface_CalendarEvent()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_CalendarEvent and conformance DocumentUnderstanding_ClientInterface_CalendarEvent, type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_CalendarEvent);
  return Message.hash(into:)();
}

void *DocumentUnderstanding_ClientInterface_DisplayInfo.protoMessageName.unsafeMutableAddressor()
{
  return &static DocumentUnderstanding_ClientInterface_DisplayInfo.protoMessageName;
}

unint64_t static DocumentUnderstanding_ClientInterface_DisplayInfo.protoMessageName.getter()
{
  return 0xD000000000000033;
}

uint64_t DocumentUnderstanding_ClientInterface_DisplayInfo._protobuf_nameMap.unsafeMutableAddressor()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DocumentUnderstanding_ClientInterface_DisplayInfo._protobuf_nameMap);
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntity._protobuf_nameMap.unsafeMutableAddressor(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;

  if (*a1 != -1)
    swift_once();
  v3 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v3, a2);
}

uint64_t static DocumentUnderstanding_ClientInterface_DisplayInfo._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static DocumentUnderstanding_ClientInterface_StructuredEntity._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DocumentUnderstanding_ClientInterface_DisplayInfo._protobuf_nameMap, a1);
}

uint64_t static DocumentUnderstanding_ClientInterface_StructuredEntity._protobuf_nameMap.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = type metadata accessor for _NameMap();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t DocumentUnderstanding_ClientInterface_DisplayInfo.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          goto LABEL_8;
        case 3:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_8;
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
LABEL_8:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

void DocumentUnderstanding_ClientInterface_DisplayInfo.traverse<A>(visitor:)()
{
  __asm { BR              X10 }
}

uint64_t sub_2282F2C70(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  if ((a2 & 0xFF000000000000) == 0
    || (result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(), !v3))
  {
    __asm { BR              X10 }
  }
  return result;
}

uint64_t closure #1 in DocumentUnderstanding_ClientInterface_DisplayInfo.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 32) + 8) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  return result;
}

uint64_t closure #2 in DocumentUnderstanding_ClientInterface_DisplayInfo.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 36) + 8) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  return result;
}

uint64_t closure #3 in DocumentUnderstanding_ClientInterface_DisplayInfo.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 40) + 8) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  return result;
}

uint64_t closure #4 in DocumentUnderstanding_ClientInterface_DisplayInfo.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 44) + 8) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  return result;
}

uint64_t closure #5 in DocumentUnderstanding_ClientInterface_DisplayInfo.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 48) + 8) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  return result;
}

uint64_t closure #6 in DocumentUnderstanding_ClientInterface_DisplayInfo.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 52) + 8) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  return result;
}

Swift::Int DocumentUnderstanding_ClientInterface_DisplayInfo.hashValue.getter()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.hashValue.getter(type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo, &lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_DisplayInfo and conformance DocumentUnderstanding_ClientInterface_DisplayInfo, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_DisplayInfo);
}

Swift::Int DocumentUnderstanding_ClientInterface_StructuredEntity.hashValue.getter(uint64_t (*a1)(uint64_t), unint64_t *a2, uint64_t a3)
{
  Hasher.init(_seed:)();
  a1(0);
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(a2, a1, a3);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Message.init() in conformance DocumentUnderstanding_ClientInterface_DisplayInfo@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_OWORD *)a2 = xmmword_2284C0CE0;
  *(_OWORD *)(a2 + 16) = xmmword_2284C0CE0;
  *(_BYTE *)(a2 + 32) = 0;
  result = UnknownStorage.init()();
  v5 = a1[9];
  v6 = a2 + a1[8];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = a2 + v5;
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  v8 = a1[11];
  v9 = a2 + a1[10];
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = a2 + v8;
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  v11 = a1[13];
  v12 = a2 + a1[12];
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = 1;
  v13 = a2 + v11;
  *(_QWORD *)v13 = 0;
  *(_BYTE *)(v13 + 8) = 1;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance DocumentUnderstanding_ClientInterface_DisplayInfo()
{
  return 0xD000000000000033;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance DocumentUnderstanding_ClientInterface_DisplayInfo@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance DocumentUnderstanding_ClientInterface_DisplayInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance DocumentUnderstanding_ClientInterface_DisplayInfo())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance DocumentUnderstanding_ClientInterface_DisplayInfo()
{
  return DocumentUnderstanding_ClientInterface_DisplayInfo.decodeMessage<A>(decoder:)();
}

void protocol witness for Message.traverse<A>(visitor:) in conformance DocumentUnderstanding_ClientInterface_DisplayInfo()
{
  DocumentUnderstanding_ClientInterface_DisplayInfo.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance DocumentUnderstanding_ClientInterface_DisplayInfo()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_DisplayInfo and conformance DocumentUnderstanding_ClientInterface_DisplayInfo, type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_DisplayInfo);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DocumentUnderstanding_ClientInterface_DisplayInfo@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DocumentUnderstanding_ClientInterface_DisplayInfo._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DocumentUnderstanding_ClientInterface_StructuredEntity@<X0>(_QWORD *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = type metadata accessor for _NameMap();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DocumentUnderstanding_ClientInterface_DisplayInfo()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_DisplayInfo and conformance DocumentUnderstanding_ClientInterface_DisplayInfo, type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_DisplayInfo);
  return Message.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance DocumentUnderstanding_ClientInterface_StructuredEntity()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DocumentUnderstanding_ClientInterface_DisplayInfo()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_DisplayInfo and conformance DocumentUnderstanding_ClientInterface_DisplayInfo, type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_DisplayInfo);
  return Message.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DocumentUnderstanding_ClientInterface_StructuredEntity()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t variable initialization expression of DocumentUnderstanding_ClientInterface_Response._topics@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of DocumentUnderstanding_ClientInterface_Response._topics((uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse, a1);
}

uint64_t variable initialization expression of DocumentUnderstanding_ClientInterface_Response._structuredEntities@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of DocumentUnderstanding_ClientInterface_Response._topics((uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse, a1);
}

uint64_t variable initialization expression of DocumentUnderstanding_ClientInterface_Response._languageTags@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of DocumentUnderstanding_ClientInterface_Response._topics((uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse, a1);
}

uint64_t variable initialization expression of DocumentUnderstanding_ClientInterface_Response._userInterfaceUnderstandingResults@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of DocumentUnderstanding_ClientInterface_Response._topics((uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse, a1);
}

uint64_t variable initialization expression of DocumentUnderstanding_ClientInterface_Response._documentCategories@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of DocumentUnderstanding_ClientInterface_Response._topics((uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse, a1);
}

uint64_t variable initialization expression of DocumentUnderstanding_ClientInterface_Response._foundInEventResult@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of DocumentUnderstanding_ClientInterface_Response._topics(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult, a1);
}

uint64_t variable initialization expression of DocumentUnderstanding_ClientInterface_Response._responseDebugInfo@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of DocumentUnderstanding_ClientInterface_Response._topics((uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo, a1);
}

uint64_t default argument 1 of PDFDocumentNormalizer.getTextForPDF(pdfDocumentRef:targetStringLength:)()
{
  return 5120;
}

uint64_t default argument 1 of PDFDocumentNormalizer.getTextForPDF(pdfURL:targetStringLength:)()
{
  return 5120;
}

id variable initialization expression of DUFoundInEventMultilingualBERTImplementation.embedding()
{
  void *v0;
  id v1;

  v0 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000024, 0x80000002284D98C0);
  v1 = objc_msgSend((id)objc_opt_self(), sel_contextualEmbeddingWithIdentifier_, v0);

  return v1;
}

uint64_t default argument 4 of TaggedCharacterRange.init(annotationType:tags:range:text:values:)()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of DUCategoryResult.categoryIdentifier()
{
  return 0;
}

double variable initialization expression of DUCategoryResult.categoryConfidence()
{
  return 0.0;
}

double variable initialization expression of DUDisplayInfo.frameInWindow()
{
  return 0.0;
}

double variable initialization expression of DUDisplayInfo.absoluteOriginOnScreen()
{
  return 0.0;
}

uint64_t variable initialization expression of DUDisplayInfo.isOnScreen()
{
  return 0;
}

id variable initialization expression of SpotlightiOSFileOutputSink.coreSpotlightOutputSink()
{
  return variable initialization expression of SpotlightiOSFileOutputSink.coreSpotlightOutputSink((uint64_t (*)(_QWORD))type metadata accessor for CoreSpotlightOutputSink);
}

uint64_t variable initialization expression of DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult.topicIdentifier()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult._topicConfidence()
{
  return 0;
}

uint64_t variable initialization expression of SQLiteDatabase.internalSQLiteDB()
{
  return 0;
}

uint64_t variable initialization expression of SQLiteDatabase.temporaryURL@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of DocumentUnderstanding_ClientInterface_Response._topics((uint64_t (*)(_QWORD))MEMORY[0x24BDCDAC0], a1);
}

uint64_t variable initialization expression of Counter.counter()
{
  return MEMORY[0x24BEE4B00];
}

uint64_t variable initialization expression of DUGlobalTopicSetIdentifier.topicSetName()
{
  return 0;
}

uint64_t variable initialization expression of DUGlobalTopicSetIdentifier.topicSetVersion()
{
  return 0;
}

id variable initialization expression of DUTopicResult.topicSet()
{
  return variable initialization expression of SpotlightiOSFileOutputSink.coreSpotlightOutputSink((uint64_t (*)(_QWORD))type metadata accessor for DUGlobalTopicSetIdentifier);
}

uint64_t variable initialization expression of DUTopicResult.topicIdentifier()
{
  return 0;
}

double variable initialization expression of DUTopicResult.topicConfidence()
{
  return 0.0;
}

uint64_t variable initialization expression of DUTopicResult.topicNames()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of DURequestStrategy.preprocess()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_HiddenLayerOutput.values()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of DocumentUnderstanding_EncodingModelOutput.modelName()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_EncodingModelOutput.hiddenLayerSize()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_EncodingModelOutput.nHiddenLayers()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_EncodingModelOutput.sequenceSize()
{
  return 0;
}

unint64_t variable initialization expression of DocumentUnderstanding_EncodingModelOutput.pooledHiddenLayerValues()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
}

unint64_t variable initialization expression of DocumentUnderstanding_EncodingModelOutput.hiddenLayerValues()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
}

uint64_t variable initialization expression of DUProcessingRequest.inputDocument()
{
  return 0;
}

uint64_t variable initialization expression of DUProcessingRequest.preprocess()
{
  return 2;
}

uint64_t variable initialization expression of DocumentUnderstanding_ClientInterface_TopicResult.topicNames()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of DocumentUnderstanding_ClientInterface_TopicResult._topicSet@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of DocumentUnderstanding_ClientInterface_Response._topics((uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_TopicSetIdentifier, a1);
}

uint64_t variable initialization expression of DocumentUnderstanding_ClientInterface_TopicResult._topicIdentifier()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_ClientInterface_TopicResult._topicConfidence()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute._attributeNamespace()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute._attributeType()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute._attributeID()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute._displayName()
{
  return 0;
}

uint64_t variable initialization expression of PoemMessageThread.chatId()
{
  return 0;
}

uint64_t variable initialization expression of PoemMessageThread.messages()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of PoemMessageThread.entityIdMentions()
{
  return MEMORY[0x24BEE4B08];
}

uint64_t variable initialization expression of PoemMessageThread.photoIdMentions()
{
  return MEMORY[0x24BEE4B08];
}

unint64_t variable initialization expression of PoemConversations.threads()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
}

unint64_t variable initialization expression of PoemConversations.nameToId()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
}

unint64_t variable initialization expression of PoemConversations.idToName()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
}

unint64_t variable initialization expression of PoemConversations.megadomeIdMap()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
}

unint64_t variable initialization expression of PoemConversations.distinctEntitiesWithCounts()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
}

unint64_t variable initialization expression of PoemConversations.entityImageCooccurrenceCounts()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
}

unint64_t variable initialization expression of PoemConversations.distinctImagesWithCounts()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
}

uint64_t variable initialization expression of PoemMessage.chatId()
{
  return 0;
}

uint64_t variable initialization expression of PoemMessage.id()
{
  return 0;
}

uint64_t variable initialization expression of PoemMessage.text()
{
  return 0;
}

uint64_t variable initialization expression of PoemMessage.img()
{
  return 0;
}

uint64_t variable initialization expression of PoemMessage.path()
{
  return 0;
}

uint64_t variable initialization expression of PoemMessage.type()
{
  return 0;
}

uint64_t variable initialization expression of PoemMessage.sender()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of PoemMessage.receiver()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of PoemMessage.senderAddresses()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of PoemMessage.receiverAddresses()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of PoemMessage.madExtractions()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of PoemMessage.taggerExtractions()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of PoemMessage.ecrExtractions()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of PoemMessage.senderExtractions()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of PoemMessage.receiverExtractions()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of PoemMessage.pronounExtractions()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t default argument 4 of PoemMessage.init(chatId:id:time:type:text:)()
{
  return 0;
}

uint64_t variable initialization expression of PoemEntityCounts.tagger()
{
  return 0;
}

uint64_t variable initialization expression of PoemEntityCounts.ecr()
{
  return 0;
}

uint64_t variable initialization expression of PoemEntityCounts.pronoun()
{
  return 0;
}

uint64_t variable initialization expression of PoemEntityCounts.sender()
{
  return 0;
}

uint64_t variable initialization expression of PoemEntityCounts.receiver()
{
  return 0;
}

unint64_t variable initialization expression of PoemCooccurrenceCounts.tagger()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
}

unint64_t variable initialization expression of PoemCooccurrenceCounts.ecr()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
}

unint64_t variable initialization expression of PoemCooccurrenceCounts.pronoun()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
}

unint64_t variable initialization expression of PoemCooccurrenceCounts.sender()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
}

unint64_t variable initialization expression of PoemCooccurrenceCounts.receiver()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
}

uint64_t variable initialization expression of PoemCooccurrenceCounts.taggerDistances()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of PoemCooccurrenceCounts.taggerLengths()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of PoemCooccurrenceCounts.taggerConfidences()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of PoemCooccurrenceCounts.ecrDistances()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of PoemCooccurrenceCounts.ecrLengths()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of PoemCooccurrenceCounts.ecrConfidences()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._storage()
{
  return variable initialization expression of DocumentUnderstanding_ClientInterface_StructuredEntity._storage(&one-time initialization token for defaultInstance);
}

void *variable initialization expression of BasicTokenizer.neverSplit()
{
  return &outlined read-only object #0 of variable initialization expression of BasicTokenizer.neverSplit;
}

uint64_t variable initialization expression of DUResponse.topics()
{
  return 0;
}

uint64_t variable initialization expression of DUResponse.structuredEntities()
{
  return 0;
}

uint64_t variable initialization expression of DUResponse.languageTags()
{
  return 0;
}

uint64_t variable initialization expression of DUResponse.userInterfaceUnderstandingResults()
{
  return 0;
}

uint64_t variable initialization expression of DUResponse.documentCategories()
{
  return 0;
}

uint64_t variable initialization expression of DUResponse.foundInEventResult()
{
  return 0;
}

uint64_t variable initialization expression of DUResponse.poem()
{
  return 0;
}

uint64_t variable initialization expression of DUResponse.posTags()
{
  return 0;
}

uint64_t variable initialization expression of DUResponse.responseDebugInfo()
{
  return 0;
}

uint64_t variable initialization expression of DUDocumentMessageData.conversationIdentifier()
{
  return 0;
}

uint64_t variable initialization expression of DUDocumentMessageData.creatorHandle()
{
  return 0;
}

uint64_t variable initialization expression of DUDocumentMessageData.recipientHandles()
{
  return 0;
}

uint64_t variable initialization expression of DUDocumentMessageData.recipientNames()
{
  return 0;
}

uint64_t variable initialization expression of DUDocumentMessageData.attachmentFileName()
{
  return 0;
}

uint64_t variable initialization expression of DUDocumentMessageData.attachmentFilePath()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.subject()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.senderName()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.senderEmail()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.senderDomain()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.recipientNames()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.recipientEmails()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.ccNames()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.ccEmails()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.bccNames()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.bccEmails()
{
  return MEMORY[0x24BEE4AF8];
}

double variable initialization expression of DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.dateReceived()
{
  return 0.0;
}

uint64_t variable initialization expression of DUWikipediaTopicDetectionDefaultImplementation.$__lazy_storage_$_contextClient()
{
  return 1;
}

uint64_t variable initialization expression of DUUserInterfaceUnderstandingResponse.foundEntities()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of DUUserInterfaceUnderstandingResponse.responseDebugInfo()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_ClientInterface_CategoryResult._categoryIdentifier()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_ClientInterface_CategoryResult._categoryConfidence()
{
  return 0;
}

uint64_t variable initialization expression of GenerationTask.tgSession()
{
  return 0;
}

uint64_t default argument 2 of GenerationTask.generateRequest(prompt:model:numTokens:)()
{
  return 48;
}

uint64_t variable initialization expression of DUCategoryClassificationResponse.categories()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of DUCategoryClassificationResponse.responseDebugInfo()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_ClientInterface_TopicDetectionResponse.globalTopics()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of DocumentUnderstanding_ClientInterface_TopicDetectionResponse.personalTopics()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of DocumentUnderstanding_ClientInterface_TopicDetectionResponse._responseDebugInfo@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of DocumentUnderstanding_ClientInterface_Response._topics((uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo, a1);
}

uint64_t variable initialization expression of DUDocumentEmailData.subject()
{
  return 0;
}

uint64_t variable initialization expression of DUDocumentEmailData.senderName()
{
  return 0;
}

uint64_t variable initialization expression of DUDocumentEmailData.senderEmail()
{
  return 0;
}

uint64_t variable initialization expression of DUDocumentEmailData.senderDomain()
{
  return 0;
}

uint64_t variable initialization expression of DUDocumentEmailData.recipientNames()
{
  return 0;
}

uint64_t variable initialization expression of DUDocumentEmailData.recipientEmails()
{
  return 0;
}

uint64_t variable initialization expression of DUDocumentEmailData.ccNames()
{
  return 0;
}

uint64_t variable initialization expression of DUDocumentEmailData.ccEmails()
{
  return 0;
}

uint64_t variable initialization expression of DUDocumentEmailData.bccNames()
{
  return 0;
}

uint64_t variable initialization expression of DUDocumentEmailData.bccEmails()
{
  return 0;
}

uint64_t variable initialization expression of DUDocumentEmailData.dateReceived@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of DocumentUnderstanding_ClientInterface_Response._topics((uint64_t (*)(_QWORD))MEMORY[0x24BDCE900], a1);
}

uint64_t variable initialization expression of DocumentUnderstanding_Autonaming_XGBoostModelFeatures._storage()
{
  return variable initialization expression of DocumentUnderstanding_ClientInterface_StructuredEntity._storage(&one-time initialization token for defaultInstance);
}

uint64_t variable initialization expression of DocumentUnderstanding_Autonaming_TrainingData._features@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of DocumentUnderstanding_ClientInterface_Response._topics(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures, a1);
}

uint64_t variable initialization expression of DocumentUnderstanding_Autonaming_TrainingData._annotation()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_Autonaming_TrainingData._groundTruthAvailable()
{
  return 2;
}

uint64_t variable initialization expression of DocumentUnderstanding_Autonaming_TrainingData._cooccurrenceKey()
{
  return 0;
}

uint64_t variable initialization expression of TableAnalysisResult.tallies()
{
  return 0;
}

uint64_t variable initialization expression of TableAnalysisResult.matchesWithCommaIncluded()
{
  return 0;
}

uint64_t variable initialization expression of TableAnalysisResult.matchesWithCommaNotIncluded()
{
  return 0;
}

uint64_t variable initialization expression of TableAnalysisResult.matchesWithApostropheIncluded()
{
  return 0;
}

uint64_t variable initialization expression of TableAnalysisResult.matchesWithApostropheNotIncluded()
{
  return 0;
}

uint64_t variable initialization expression of TableAnalysisResult.acronymMatchesAllCaps()
{
  return 0;
}

uint64_t variable initialization expression of TableAnalysisResult.acronymMatchesNotAllCaps()
{
  return 0;
}

uint64_t variable initialization expression of TableAnalysisResult.questionMatchesWithQuestionMark()
{
  return 0;
}

uint64_t variable initialization expression of TableAnalysisResult.questionMatchesWithoutQuestionMark()
{
  return 0;
}

uint64_t variable initialization expression of TableAnalysisResult.exclamationsWithMark()
{
  return 0;
}

uint64_t variable initialization expression of TableAnalysisResult.exclamationsWithoutMark()
{
  return 0;
}

uint64_t default argument 7 of DUReplyEquivalenceTable.init(languageCode:isLockable:isLockedByDefault:questionRows:exclamationRows:acronymColumns:replyTable:defaultColumn:stringReplacements:)()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_DocumentRepresentation_DocumentMessageData.conversationIdentifier()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_DocumentRepresentation_DocumentMessageData.creatorHandle()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_DocumentRepresentation_DocumentMessageData.recipientHandles()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of DocumentUnderstanding_DocumentRepresentation_DocumentMessageData.recipientNames()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of DocumentUnderstanding_DocumentRepresentation_DocumentMessageData.attachmentFileName()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_DocumentRepresentation_DocumentMessageData.attachmentFilePath()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_TopicSetIdentifier.topicSetName()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_TopicSetIdentifier.topicSetVersion()
{
  return 0;
}

uint64_t variable initialization expression of DUDocumentUpdate.documentBody()
{
  return 0;
}

uint64_t variable initialization expression of DUDocumentUpdate.document()
{
  return 0;
}

uint64_t variable initialization expression of DUDocumentUpdate.associatedFileURL@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of DocumentUnderstanding_ClientInterface_Response._topics((uint64_t (*)(_QWORD))MEMORY[0x24BDCDAC0], a1);
}

uint64_t variable initialization expression of DUDocumentUpdate.updateTimestamp@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of DocumentUnderstanding_ClientInterface_Response._topics((uint64_t (*)(_QWORD))MEMORY[0x24BDCE900], a1);
}

uint64_t variable initialization expression of DUDocumentUpdate.documentAttributes()
{
  return 0;
}

id variable initialization expression of SpotlightOutputSink.iOSOutputSink()
{
  return variable initialization expression of SpotlightiOSFileOutputSink.coreSpotlightOutputSink((uint64_t (*)(_QWORD))type metadata accessor for SpotlightiOSFileOutputSink);
}

id variable initialization expression of SpotlightOutputSink.coreSpotlightOutputSink()
{
  return variable initialization expression of SpotlightiOSFileOutputSink.coreSpotlightOutputSink((uint64_t (*)(_QWORD))type metadata accessor for CoreSpotlightOutputSink);
}

uint64_t default argument 3 of SpotlightOutputSink.writeTopicsAndClassesToSpotlightForFile(searchableItem:topics:documentClasses:analysisVersion:)()
{
  return 0;
}

uint64_t default argument 3 of SpotlightOutputSink.writeTopicsAndClassesToSpotlightForNonfileDocument(searchableItem:topics:documentClasses:analysisVersion:)()
{
  return 0;
}

uint64_t variable initialization expression of DUDocumentHTMLData.htmlString()
{
  return 0;
}

uint64_t variable initialization expression of DUDocumentHTMLData.documentEmailData()
{
  return 0;
}

id variable initialization expression of CoreSpotlightUpdateFetcher.iOSUpdateFetcher()
{
  return variable initialization expression of SpotlightiOSFileOutputSink.coreSpotlightOutputSink((uint64_t (*)(_QWORD))type metadata accessor for CoreSpotlightiOSFileUpdateFetcher);
}

id variable initialization expression of SpotlightiOSFileOutputSink.coreSpotlightOutputSink(uint64_t (*a1)(_QWORD))
{
  return objc_msgSend(objc_allocWithZone((Class)a1(0)), sel_init);
}

uint64_t variable initialization expression of DUFoundInEventHTMLPreprocessingImplementation.$__lazy_storage_$_pageContentFetcher()
{
  return 0;
}

uint64_t variable initialization expression of DUWikipediaTopicResult.title()
{
  return 0;
}

uint64_t variable initialization expression of DUWikipediaTopicResult.topicId()
{
  return 0;
}

uint64_t variable initialization expression of DUWikipediaTopicResult.debug()
{
  return 0;
}

uint64_t variable initialization expression of DUWikipediaTopicResult.confidence()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_ClientInterface_DebugInfo._debugString()
{
  return 0;
}

double variable initialization expression of DUWikipediaTopicDetectionSmolBERToRetrievalImplementation.$__lazy_storage_$_topicRetrieval@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)&result = 1;
  *(_OWORD *)(a1 + 24) = xmmword_2284C0D30;
  return result;
}

uint64_t variable initialization expression of DUStructuredEntityResponse.structuredEntities()
{
  return 0;
}

uint64_t variable initialization expression of DUStructuredEntityResponse.responseDebugInfo()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData.htmlString()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData._documentEmailData@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of DocumentUnderstanding_ClientInterface_Response._topics((uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData, a1);
}

double variable initialization expression of PoemModelingParameters.modelPositiveClassThreshold()
{
  return 0.91;
}

uint64_t variable initialization expression of PoemModelingParameters.contextWindowSize()
{
  return 5;
}

uint64_t variable initialization expression of PoemModelingParameters.maxFaces()
{
  return 11;
}

uint64_t variable initialization expression of PoemModelingParameters.batchSize()
{
  return 32;
}

double variable initialization expression of PoemModelingParameters.madConfidenceThreshold()
{
  return 0.45;
}

double variable initialization expression of PoemModelingParameters.lookBackInYears()
{
  return 1.0;
}

uint64_t variable initialization expression of PoemAggregationModelHandler.model()
{
  return 0;
}

uint64_t variable initialization expression of PoemAggregationModelHandler.poemStatsDatabase()
{
  return 0;
}

double variable initialization expression of PoemAggregationModelHandler.analyticsUtilities@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 1;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_BYTE *)(a1 + 56) = 0;
  return result;
}

uint64_t variable initialization expression of PoemAggregationModelHandler.assetLoader()
{
  type metadata accessor for DUTrialAssetLoader();
  swift_allocObject();
  return DUTrialAssetLoader.init()();
}

uint64_t variable initialization expression of PoemAggregationModelHandler.$__lazy_storage_$_propertyListDecoder()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_PosTaggingResult._tag()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_PosTaggingResult._text()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_PosTaggingResult._start()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_PosTaggingResult._len()
{
  return 0;
}

uint64_t variable initialization expression of PosTaggingResult.tag()
{
  return 0;
}

uint64_t variable initialization expression of PosTaggingResult.text()
{
  return 0;
}

uint64_t variable initialization expression of PosTaggingResult.start()
{
  return 0;
}

uint64_t variable initialization expression of PosTaggingResult.len()
{
  return 0;
}

uint64_t variable initialization expression of AutonamingModelFeatures.annotation()
{
  return -1;
}

unint64_t variable initialization expression of AutonamingModelFeatures.featureMap()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
}

unint64_t variable initialization expression of AutonamingModelFeatures.listFeatureMap()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
}

uint64_t variable initialization expression of AutonamingModelFeatures.groundTruthAvailable()
{
  return 0;
}

uint64_t variable initialization expression of AutonamingModelFeatures.cooccurrenceKey()
{
  return 0;
}

uint64_t default argument 1 of DUTermsOfAddressAnalyzer.analyze(outgoingMessages:additionalUserText:)()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of FoundInEventDataDetectorsOutput.detectedDate@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of DocumentUnderstanding_ClientInterface_Response._topics((uint64_t (*)(_QWORD))MEMORY[0x24BDCBDE0], a1);
}

uint64_t variable initialization expression of FoundInEventDataDetectorsOutput.detectedTimeZone@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of DocumentUnderstanding_ClientInterface_Response._topics((uint64_t (*)(_QWORD))MEMORY[0x24BDCF510], a1);
}

uint64_t variable initialization expression of FoundInEventDataDetectorsOutput.detectedEndDate@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of DocumentUnderstanding_ClientInterface_Response._topics((uint64_t (*)(_QWORD))MEMORY[0x24BDCBDE0], a1);
}

uint64_t variable initialization expression of FoundInEventDataDetectorsOutput.detectedEndTimeZone@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of DocumentUnderstanding_ClientInterface_Response._topics((uint64_t (*)(_QWORD))MEMORY[0x24BDCF510], a1);
}

uint64_t variable initialization expression of FoundInEventDataDetectorsOutput.type()
{
  return 0;
}

uint64_t variable initialization expression of FoundInEventDataDetectorsOutput.trackingNumber()
{
  return 0;
}

uint64_t variable initialization expression of FoundInEventDataDetectorsOutput.carrier()
{
  return 0;
}

uint64_t variable initialization expression of FoundInEventDataDetectorsOutput.flightNumber()
{
  return 0;
}

uint64_t variable initialization expression of FoundInEventDataDetectorsOutput.flightAirline()
{
  return 0;
}

uint64_t variable initialization expression of FoundInEventDataDetectorsOutput.phoneNumber()
{
  return 0;
}

uint64_t variable initialization expression of FoundInEventDataDetectorsOutput.phoneNumberLabel()
{
  return 0;
}

uint64_t variable initialization expression of FoundInEventDataDetectorsOutput.emailAddress()
{
  return 0;
}

uint64_t variable initialization expression of FoundInEventDataDetectorsOutput.url@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of DocumentUnderstanding_ClientInterface_Response._topics((uint64_t (*)(_QWORD))MEMORY[0x24BDCDAC0], a1);
}

uint64_t variable initialization expression of FoundInEventDataDetectorsOutput.addressComponents()
{
  return 0;
}

uint64_t variable initialization expression of FoundInEventDataDetectorsOutput.text()
{
  return 0;
}

uint64_t variable initialization expression of FoundInEventDataDetectorsOutput.start()
{
  return 0;
}

uint64_t variable initialization expression of FoundInEventDataDetectorsOutput.len()
{
  return 0;
}

uint64_t variable initialization expression of DUDocumentIdentifier.spotlightBundleID()
{
  return 0;
}

uint64_t variable initialization expression of DUDocumentIdentifier.spotlightDomainIdentifier()
{
  return 0;
}

uint64_t variable initialization expression of DUDocumentIdentifier.spotlightUniqueIdentifier()
{
  return 0;
}

uint64_t variable initialization expression of DUDocumentUIElement.text()
{
  return 0;
}

uint64_t variable initialization expression of DUDocumentUIElement.version()
{
  return 0;
}

uint64_t variable initialization expression of DUDocumentUIElement.classDescriptor()
{
  return 0;
}

uint64_t variable initialization expression of DUDocumentUIElement.superviewClassNames()
{
  return 0;
}

uint64_t variable initialization expression of DUDocumentUIElement.superviewClassIndices()
{
  return 0;
}

uint64_t variable initialization expression of DUDocumentUIElement.range()
{
  return 0;
}

uint64_t variable initialization expression of DUDocumentUIElement.styleProperties()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_ClientInterface_LanguageTaggingResponse.languageTags()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of DocumentUnderstanding_ClientInterface_LanguageTaggingResponse._responseDebugInfo@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of DocumentUnderstanding_ClientInterface_Response._topics((uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo, a1);
}

uint64_t variable initialization expression of DUDebugInfo.debugString()
{
  return 0;
}

uint64_t variable initialization expression of PoemAnalyticsUtilities.poemStatsDatabase()
{
  return 0;
}

double variable initialization expression of PoemAnalyticsUtilities.configuration@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)(a1 + 48) = 1;
  return result;
}

uint64_t variable initialization expression of DocumentUnderstanding_ClientInterface_StructuredEntityResponse.structuredEntities()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of DocumentUnderstanding_ClientInterface_StructuredEntityResponse._responseDebugInfo@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of DocumentUnderstanding_ClientInterface_Response._topics((uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo, a1);
}

uint64_t variable initialization expression of RoBERTaTokenizer.maxSeqLength()
{
  return 512;
}

uint64_t variable initialization expression of RoBERTaTokenizer.maxStringLength()
{
  return 5120;
}

uint64_t variable initialization expression of RoBERTaTokenizer.bosToken()
{
  return 4092732;
}

uint64_t variable initialization expression of RoBERTaTokenizer.eosToken()
{
  return 1047736124;
}

uint64_t variable initialization expression of RoBERTaTokenizer.padToken()
{
  return 0x3E6461703CLL;
}

uint64_t variable initialization expression of RoBERTaTokenizer.pad_token_id()
{
  return 1;
}

uint64_t variable initialization expression of DUEncodingModelOutput.sequenceSize()
{
  return 0;
}

unint64_t variable initialization expression of DUEncodingModelOutput.pooledHiddenLayerValues()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
}

uint64_t variable initialization expression of DUEncodingModelOutput.hiddenLayerValues()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.documentAttributes()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate._documentID@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of DocumentUnderstanding_ClientInterface_Response._topics((uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier, a1);
}

uint64_t variable initialization expression of DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate._documentBody()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate._document@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of DocumentUnderstanding_ClientInterface_Response._topics(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document, a1);
}

uint64_t variable initialization expression of DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate._associatedFileURL()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate._documentType()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate._updateTimestamp()
{
  return 0;
}

id variable initialization expression of TextUnderstandingManager.queue()
{
  return objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1710]), sel_init);
}

uint64_t variable initialization expression of TextUnderstandingManager.$__lazy_storage_$_client()
{
  return 0;
}

uint64_t variable initialization expression of TextUnderstandingManager.$__lazy_storage_$_updater()
{
  return 0;
}

uint64_t variable initialization expression of TextUnderstandingManager.$__lazy_storage_$_bulkupdater()
{
  return 0;
}

uint64_t variable initialization expression of DUCreateContextRequestDefaultImplementation.$__lazy_storage_$_contextClient()
{
  return 1;
}

uint64_t variable initialization expression of FoundInEventsPostProcessingFieldOutput.value()
{
  return 0;
}

uint64_t variable initialization expression of FoundInEventsPostProcessingFieldOutput.dictionaryValues()
{
  return 0;
}

uint64_t variable initialization expression of DUStructuredEntity.title()
{
  return 0;
}

uint64_t variable initialization expression of DUStructuredEntity.type()
{
  return 0;
}

uint64_t variable initialization expression of DUStructuredEntity.labels()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of DUStructuredEntity.phoneNumber()
{
  return 0;
}

uint64_t variable initialization expression of DUStructuredEntity.email()
{
  return 0;
}

uint64_t variable initialization expression of DUStructuredEntity.url()
{
  return 0;
}

uint64_t variable initialization expression of DUStructuredEntity.addressComponents()
{
  return 0;
}

uint64_t variable initialization expression of DUStructuredEntity.calendarEvent()
{
  return 0;
}

uint64_t variable initialization expression of DUStructuredEntity.homeAutomationID()
{
  return 0;
}

uint64_t variable initialization expression of DUStructuredEntity.displayInfo()
{
  return 0;
}

uint64_t variable initialization expression of DUStructuredEntity.responseDebugInfo()
{
  return 0;
}

uint64_t variable initialization expression of DUStructuredExtractionLabel.labelName()
{
  return 0;
}

double variable initialization expression of DUStructuredExtractionLabel.confidenceScore()
{
  return 0.0;
}

uint64_t variable initialization expression of DUCalendarEvent.isAllDay()
{
  return 0;
}

uint64_t variable initialization expression of DUCalendarEvent.startDateComponents@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of DocumentUnderstanding_ClientInterface_Response._topics((uint64_t (*)(_QWORD))MEMORY[0x24BDCBDE0], a1);
}

uint64_t variable initialization expression of DUCalendarEvent.startTimezone@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of DocumentUnderstanding_ClientInterface_Response._topics((uint64_t (*)(_QWORD))MEMORY[0x24BDCF510], a1);
}

uint64_t variable initialization expression of DUCalendarEvent.endDateComponents@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of DocumentUnderstanding_ClientInterface_Response._topics((uint64_t (*)(_QWORD))MEMORY[0x24BDCBDE0], a1);
}

uint64_t variable initialization expression of DUCalendarEvent.endTimezone@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of DocumentUnderstanding_ClientInterface_Response._topics((uint64_t (*)(_QWORD))MEMORY[0x24BDCF510], a1);
}

uint64_t variable initialization expression of DocumentUnderstanding_ClientInterface_TaggedCharacterRange.annotationType()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_ClientInterface_TaggedCharacterRange.tags()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of DocumentUnderstanding_ClientInterface_TaggedCharacterRange.range()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of DocumentUnderstanding_ClientInterface_TaggedCharacterRange.text()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_ClientInterface_FoundInEventResult._storage()
{
  return variable initialization expression of DocumentUnderstanding_ClientInterface_StructuredEntity._storage(&one-time initialization token for defaultInstance);
}

uint64_t variable initialization expression of Dutool_TopicVectorEntry.vector()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of Dutool_TopicVectorEntry._title()
{
  return 0;
}

uint64_t variable initialization expression of Dutool_TopicVectorEntry._qid()
{
  return 0;
}

uint64_t variable initialization expression of DUTopicDetectionResponse.globalTopics()
{
  return 0;
}

uint64_t variable initialization expression of DUTopicDetectionResponse.personalTopics()
{
  return 0;
}

uint64_t variable initialization expression of DUTopicDetectionResponse.responseDebugInfo()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_DocumentRepresentation_Document._storage()
{
  return variable initialization expression of DocumentUnderstanding_ClientInterface_StructuredEntity._storage(&one-time initialization token for defaultInstance);
}

uint64_t variable initialization expression of DocumentUnderstanding_ClientInterface_StructuredEntity._storage(_QWORD *a1)
{
  if (*a1 != -1)
    swift_once();
  return swift_retain();
}

uint64_t variable initialization expression of DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse.foundEntities()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse._responseDebugInfo@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of DocumentUnderstanding_ClientInterface_Response._topics((uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo, a1);
}

uint64_t variable initialization expression of DocumentUnderstanding_ClientInterface_CategoryClassificationResponse.categories()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of DocumentUnderstanding_ClientInterface_CategoryClassificationResponse._responseDebugInfo@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of DocumentUnderstanding_ClientInterface_Response._topics((uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo, a1);
}

uint64_t variable initialization expression of DUFoundInEventResult.reservationIdError()
{
  return 0;
}

uint64_t variable initialization expression of DUFoundInEventResult.reservationId()
{
  return 0;
}

uint64_t variable initialization expression of DUFoundInEventResult.reservationNameError()
{
  return 0;
}

uint64_t variable initialization expression of DUFoundInEventResult.reservationName()
{
  return 0;
}

uint64_t variable initialization expression of DUFoundInEventResult.hotelNameError()
{
  return 0;
}

uint64_t variable initialization expression of DUFoundInEventResult.hotelName()
{
  return 0;
}

uint64_t variable initialization expression of DUFoundInEventResult.guestNameError()
{
  return 0;
}

uint64_t variable initialization expression of DUFoundInEventResult.guestName()
{
  return 0;
}

uint64_t variable initialization expression of DUFoundInEventResult.movieNameError()
{
  return 0;
}

uint64_t variable initialization expression of DUFoundInEventResult.movieName()
{
  return 0;
}

uint64_t variable initialization expression of DUFoundInEventResult.startAddressError()
{
  return 0;
}

uint64_t variable initialization expression of DUFoundInEventResult.startAddress()
{
  return 0;
}

uint64_t variable initialization expression of DUFoundInEventResult.startAddressComponents()
{
  return 0;
}

uint64_t variable initialization expression of DUFoundInEventResult.endAddressError()
{
  return 0;
}

uint64_t variable initialization expression of DUFoundInEventResult.endAddress()
{
  return 0;
}

uint64_t variable initialization expression of DUFoundInEventResult.endAddressComponents()
{
  return 0;
}

uint64_t variable initialization expression of DUFoundInEventResult.startPlaceError()
{
  return 0;
}

uint64_t variable initialization expression of DUFoundInEventResult.startPlace()
{
  return 0;
}

uint64_t variable initialization expression of DUFoundInEventResult.endPlaceError()
{
  return 0;
}

uint64_t variable initialization expression of DUFoundInEventResult.endPlace()
{
  return 0;
}

uint64_t variable initialization expression of DUFoundInEventResult.startDateError()
{
  return 0;
}

uint64_t variable initialization expression of DUFoundInEventResult.startDate()
{
  return 0;
}

uint64_t variable initialization expression of DUFoundInEventResult.endDateError()
{
  return 0;
}

uint64_t variable initialization expression of DUFoundInEventResult.endDate()
{
  return 0;
}

uint64_t variable initialization expression of DUFoundInEventResult.text()
{
  return 0;
}

uint64_t variable initialization expression of DUFoundInEventResult.tags()
{
  return 0;
}

uint64_t variable initialization expression of DUStructuredExtractionContextKitImplementation.emailURLPrefix()
{
  return 0x2F3A6F746C69616DLL;
}

uint64_t variable initialization expression of DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier._documentNamespace()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier._documentID()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier._spotlightBundleID()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier._spotlightDomainIdentifier()
{
  return 0;
}

uint64_t variable initialization expression of DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier._spotlightUniqueIdentifier()
{
  return 0;
}

uint64_t variable initialization expression of DUStructuredExtractionResult.type()
{
  return 0;
}

uint64_t variable initialization expression of DUStructuredExtractionResult.debug()
{
  return 0;
}

uint64_t variable initialization expression of DUStructuredExtractionResult.phoneNumber()
{
  return 0;
}

uint64_t variable initialization expression of DUStructuredExtractionResult.phoneNumberLabel()
{
  return 0;
}

uint64_t variable initialization expression of DUStructuredExtractionResult.emailAddress()
{
  return 0;
}

uint64_t variable initialization expression of DUStructuredExtractionResult.url@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of DocumentUnderstanding_ClientInterface_Response._topics((uint64_t (*)(_QWORD))MEMORY[0x24BDCDAC0], a1);
}

uint64_t variable initialization expression of DUStructuredExtractionResult.addressComponents()
{
  return 0;
}

uint64_t variable initialization expression of DUStructuredExtractionResult.event@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of DocumentUnderstanding_ClientInterface_Response._topics(type metadata accessor for CalendarEvent, a1);
}

uint64_t variable initialization expression of DUStructuredExtractionResult.homeAutomationID()
{
  return 0;
}

double variable initialization expression of DUStructuredExtractionResult.frameInWindow()
{
  return 0.0;
}

double variable initialization expression of DUStructuredExtractionResult.absoluteOriginOnScreen()
{
  return 0.0;
}

uint64_t variable initialization expression of DUStructuredExtractionResult.isOnScreen()
{
  return 0;
}

uint64_t variable initialization expression of CalendarEvent.endDateComponents@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of DocumentUnderstanding_ClientInterface_Response._topics((uint64_t (*)(_QWORD))MEMORY[0x24BDCBDE0], a1);
}

uint64_t variable initialization expression of DULanguageTaggingResponse.languageTags()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of DULanguageTaggingResponse.responseDebugInfo()
{
  return 0;
}

uint64_t variable initialization expression of DUUserInterfaceUnderstandingResult.topicIdentifier()
{
  return 0;
}

double variable initialization expression of DUUserInterfaceUnderstandingResult.topicConfidence()
{
  return 0.0;
}

double variable initialization expression of FeatureProviderWithMask.tokenized@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t variable initialization expression of DUDocumentAttribute.displayName()
{
  return 0;
}

uint64_t variable initialization expression of DURawDocument.headline()
{
  return 0;
}

uint64_t variable initialization expression of DURawDocument.subHeadline()
{
  return 0;
}

uint64_t variable initialization expression of DURawDocument.version()
{
  return 0;
}

uint64_t variable initialization expression of DURawDocument.creator()
{
  return 0;
}

uint64_t variable initialization expression of DURawDocument.abstract()
{
  return 0;
}

uint64_t variable initialization expression of DURawDocument.comment()
{
  return 0;
}

uint64_t variable initialization expression of DURawDocument.text()
{
  return 0;
}

uint64_t variable initialization expression of DURawDocument.inLanguage()
{
  return 0;
}

uint64_t variable initialization expression of DURawDocument.keywords()
{
  return 0;
}

uint64_t variable initialization expression of DURawDocument.identifier()
{
  return 0;
}

uint64_t variable initialization expression of DURawDocument.url@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of DocumentUnderstanding_ClientInterface_Response._topics((uint64_t (*)(_QWORD))MEMORY[0x24BDCDAC0], a1);
}

uint64_t variable initialization expression of DURawDocument.thumbnailUrl@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of DocumentUnderstanding_ClientInterface_Response._topics((uint64_t (*)(_QWORD))MEMORY[0x24BDCDAC0], a1);
}

uint64_t variable initialization expression of DURawDocument.significantLink@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of DocumentUnderstanding_ClientInterface_Response._topics((uint64_t (*)(_QWORD))MEMORY[0x24BDCDAC0], a1);
}

uint64_t variable initialization expression of DURawDocument.dateCreated@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of DocumentUnderstanding_ClientInterface_Response._topics((uint64_t (*)(_QWORD))MEMORY[0x24BDCE900], a1);
}

uint64_t variable initialization expression of DURawDocument.dateModified@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of DocumentUnderstanding_ClientInterface_Response._topics((uint64_t (*)(_QWORD))MEMORY[0x24BDCE900], a1);
}

uint64_t variable initialization expression of DocumentUnderstanding_ClientInterface_Response._topics@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = a1(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a2, 1, 1, v3);
}

uint64_t variable initialization expression of DURawDocument.documentMessageData()
{
  return 0;
}

uint64_t variable initialization expression of DURawDocument.documentUIElements()
{
  return 0;
}

uint64_t variable initialization expression of DURawDocument.documentHTMLData()
{
  return 0;
}

uint64_t variable initialization expression of DUFoundInEventsPostprocessing.engineConfiguration()
{
  return 0;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance NLTaggerOptions(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NLTag(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NLTag(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF9E0]);
}

void protocol witness for SetAlgebra.init() in conformance NSPropertyListMutabilityOptions(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance NLTag(uint64_t a1, id *a2)
{
  uint64_t result;

  result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance NLTag(uint64_t a1, id *a2)
{
  char v3;

  v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance NLTag@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = MEMORY[0x22E2AF8EC](v2);
  result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance BMTextUnderstandingPoemBufferExtractionExtractionType(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance DUDocumentType@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance DUDocumentType(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NSComparisonResult(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CFStringRef(uint64_t a1)
{
  MEMORY[0x22E2B10E0](&protocol conformance descriptor for CFStringRef, a1);
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CFStringRef()
{
  MEMORY[0x22E2B10E0](&protocol conformance descriptor for CFStringRef);
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CFStringRef(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  MEMORY[0x22E2B10E0](&protocol conformance descriptor for CFStringRef, a2);
  _CFObject.hash(into:)();
  return Hasher._finalize()();
}

_QWORD *protocol witness for OptionSet.init(rawValue:) in conformance NSJSONReadingOptions@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NLTag()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type NLTag and conformance NLTag, (uint64_t (*)(uint64_t))type metadata accessor for NLTag, (uint64_t)&protocol conformance descriptor for NLTag);
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type NLTag and conformance NLTag, (uint64_t (*)(uint64_t))type metadata accessor for NLTag, (uint64_t)&protocol conformance descriptor for NLTag);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance NLTag@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = MEMORY[0x22E2AF8EC](*a1, a1[1]);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance NLTagScheme@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NLTagScheme()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type NLTagScheme and conformance NLTagScheme, (uint64_t (*)(uint64_t))type metadata accessor for NLTagScheme, (uint64_t)&protocol conformance descriptor for NLTagScheme);
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type NLTagScheme and conformance NLTagScheme, (uint64_t (*)(uint64_t))type metadata accessor for NLTagScheme, (uint64_t)&protocol conformance descriptor for NLTagScheme);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CFStringRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x22E2B10E0](&protocol conformance descriptor for CFStringRef, a3);
  return static _CFObject.== infix(_:_:)();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSTextCheckingKey()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity((unint64_t *)&lazy protocol witness table cache variable for type NSTextCheckingKey and conformance NSTextCheckingKey, (uint64_t (*)(uint64_t))type metadata accessor for NSTextCheckingKey, (uint64_t)&protocol conformance descriptor for NSTextCheckingKey);
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type NSTextCheckingKey and conformance NSTextCheckingKey, (uint64_t (*)(uint64_t))type metadata accessor for NSTextCheckingKey, (uint64_t)&protocol conformance descriptor for NSTextCheckingKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance NLTagScheme(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NLTag(a1, a2, MEMORY[0x24BEE0CD8]);
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NLTag(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NSTextCheckingKey()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSTextCheckingKey()
{
  Swift::Int v0;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NLTag()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3)
    v5 = 1;
  else
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  _BYTE *v68;
  _BYTE *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  _BYTE *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  MEMORY[0x24BDAC7A8](v3);
  v101 = (uint64_t)&v89 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DisplayInfo?);
  MEMORY[0x24BDAC7A8](v5);
  v99 = (uint64_t)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CalendarEvent?);
  MEMORY[0x24BDAC7A8](v7);
  v94 = (uint64_t)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  v9 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 48) = MEMORY[0x24BEE4AF8];
  *(_OWORD *)(v1 + 88) = 0u;
  v90 = (_QWORD *)(v1 + 88);
  *(_OWORD *)(v1 + 72) = 0u;
  v89 = (_QWORD *)(v1 + 72);
  *(_OWORD *)(v1 + 56) = 0u;
  *(_QWORD *)(v1 + 104) = specialized Dictionary.init(dictionaryLiteral:)(v9);
  v91 = (_QWORD *)(v1 + 104);
  v10 = v1
      + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__calendarEvent;
  v92 = v1
      + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__calendarEvent;
  v11 = type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v12 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__homeAutomationID);
  v93 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__homeAutomationID);
  *v12 = 0;
  v12[1] = 0;
  v13 = v1
      + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__displayInfo;
  v95 = v1
      + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__displayInfo;
  v14 = type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  v15 = v1
      + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__responseDebugInfo;
  v96 = v1
      + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__responseDebugInfo;
  v16 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  v17 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__phoneNumberLabel);
  v97 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__phoneNumberLabel);
  *v17 = 0;
  v17[1] = 0;
  v98 = (uint64_t *)(v1
                  + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindow);
  *(_OWORD *)(v1
            + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindow) = xmmword_2284C0CE0;
  v100 = (uint64_t *)(v1
                   + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__absoluteOriginOnScreen);
  *(_OWORD *)(v1
            + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__absoluteOriginOnScreen) = xmmword_2284C0CE0;
  v102 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__isOnScreen);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__isOnScreen) = 0;
  v18 = v1
      + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugX;
  v103 = v1
       + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugX;
  *(_QWORD *)v18 = 0;
  *(_BYTE *)(v18 + 8) = 1;
  v19 = v1
      + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugY;
  v104 = v1
       + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugY;
  *(_QWORD *)v19 = 0;
  *(_BYTE *)(v19 + 8) = 1;
  v20 = v1
      + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugWidth;
  v105 = v1
       + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugWidth;
  *(_QWORD *)v20 = 0;
  *(_BYTE *)(v20 + 8) = 1;
  v21 = v1
      + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugHeight;
  v106 = v1
       + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugHeight;
  *(_QWORD *)v21 = 0;
  *(_BYTE *)(v21 + 8) = 1;
  v22 = v1
      + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__absoluteOriginOnScreenDebugX;
  v107 = v1
       + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__absoluteOriginOnScreenDebugX;
  *(_QWORD *)v22 = 0;
  *(_BYTE *)(v22 + 8) = 1;
  v23 = v1
      + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__absoluteOriginOnScreenDebugY;
  v108 = v1
       + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__absoluteOriginOnScreenDebugY;
  *(_QWORD *)v23 = 0;
  *(_BYTE *)(v23 + 8) = 1;
  swift_beginAccess();
  v24 = a1[2];
  v25 = a1[3];
  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = v24;
  *(_QWORD *)(v1 + 24) = v25;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v27 = a1[4];
  v26 = a1[5];
  swift_beginAccess();
  *(_QWORD *)(v1 + 32) = v27;
  *(_QWORD *)(v1 + 40) = v26;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v28 = a1[6];
  swift_beginAccess();
  *(_QWORD *)(v1 + 48) = v28;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v30 = a1[7];
  v29 = a1[8];
  swift_beginAccess();
  *(_QWORD *)(v1 + 56) = v30;
  *(_QWORD *)(v1 + 64) = v29;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v32 = a1[9];
  v31 = a1[10];
  v33 = v89;
  swift_beginAccess();
  *v33 = v32;
  *(_QWORD *)(v1 + 80) = v31;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v35 = a1[11];
  v34 = a1[12];
  v36 = v90;
  swift_beginAccess();
  *v36 = v35;
  *(_QWORD *)(v1 + 96) = v34;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v37 = a1[13];
  v38 = v91;
  swift_beginAccess();
  *v38 = v37;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v39 = (uint64_t)a1
      + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__calendarEvent;
  swift_beginAccess();
  v40 = v94;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v39, v94, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CalendarEvent?);
  v41 = v92;
  swift_beginAccess();
  outlined assign with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v40, v41, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CalendarEvent?);
  swift_endAccess();
  v42 = (_QWORD *)((char *)a1
                 + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__homeAutomationID);
  swift_beginAccess();
  v44 = *v42;
  v43 = v42[1];
  v45 = v93;
  swift_beginAccess();
  *v45 = v44;
  v45[1] = v43;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v46 = (uint64_t)a1
      + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__displayInfo;
  swift_beginAccess();
  v47 = v99;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v46, v99, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DisplayInfo?);
  v48 = v95;
  swift_beginAccess();
  outlined assign with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v47, v48, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DisplayInfo?);
  swift_endAccess();
  v49 = (uint64_t)a1
      + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__responseDebugInfo;
  swift_beginAccess();
  v50 = v101;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v49, v101, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  v51 = v96;
  swift_beginAccess();
  outlined assign with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v50, v51, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  swift_endAccess();
  v52 = (_QWORD *)((char *)a1
                 + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__phoneNumberLabel);
  swift_beginAccess();
  v54 = *v52;
  v53 = v52[1];
  v55 = v97;
  swift_beginAccess();
  *v55 = v54;
  v55[1] = v53;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v56 = (_QWORD *)((char *)a1
                 + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindow);
  swift_beginAccess();
  v58 = *v56;
  v57 = v56[1];
  v59 = v98;
  swift_beginAccess();
  v60 = *v59;
  v61 = v59[1];
  *v59 = v58;
  v59[1] = v57;
  outlined copy of Data._Representation(v58, v57);
  outlined consume of Data._Representation(v60, v61);
  v62 = (_QWORD *)((char *)a1
                 + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__absoluteOriginOnScreen);
  swift_beginAccess();
  v64 = *v62;
  v63 = v62[1];
  v65 = v100;
  swift_beginAccess();
  v66 = *v65;
  v67 = v65[1];
  *v65 = v64;
  v65[1] = v63;
  outlined copy of Data._Representation(v64, v63);
  outlined consume of Data._Representation(v66, v67);
  v68 = (char *)a1
      + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__isOnScreen;
  swift_beginAccess();
  LOBYTE(v68) = *v68;
  v69 = v102;
  swift_beginAccess();
  *v69 = (_BYTE)v68;
  v70 = (char *)a1
      + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugX;
  swift_beginAccess();
  v71 = *(_QWORD *)v70;
  LOBYTE(v70) = v70[8];
  v72 = v103;
  swift_beginAccess();
  *(_QWORD *)v72 = v71;
  *(_BYTE *)(v72 + 8) = (_BYTE)v70;
  v73 = (char *)a1
      + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugY;
  swift_beginAccess();
  v74 = *(_QWORD *)v73;
  LOBYTE(v73) = v73[8];
  v75 = v104;
  swift_beginAccess();
  *(_QWORD *)v75 = v74;
  *(_BYTE *)(v75 + 8) = (_BYTE)v73;
  v76 = (char *)a1
      + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugWidth;
  swift_beginAccess();
  v77 = *(_QWORD *)v76;
  LOBYTE(v76) = v76[8];
  v78 = v105;
  swift_beginAccess();
  *(_QWORD *)v78 = v77;
  *(_BYTE *)(v78 + 8) = (_BYTE)v76;
  v79 = (char *)a1
      + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__frameInWindowDebugHeight;
  swift_beginAccess();
  v80 = *(_QWORD *)v79;
  LOBYTE(v79) = v79[8];
  v81 = v106;
  swift_beginAccess();
  *(_QWORD *)v81 = v80;
  *(_BYTE *)(v81 + 8) = (_BYTE)v79;
  v82 = (char *)a1
      + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__absoluteOriginOnScreenDebugX;
  swift_beginAccess();
  v83 = *(_QWORD *)v82;
  LOBYTE(v82) = v82[8];
  v84 = v107;
  swift_beginAccess();
  *(_QWORD *)v84 = v83;
  *(_BYTE *)(v84 + 8) = (_BYTE)v82;
  v85 = (char *)a1
      + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__absoluteOriginOnScreenDebugY;
  swift_beginAccess();
  v86 = *(_QWORD *)v85;
  LOBYTE(v85) = v85[8];
  v87 = v108;
  swift_beginAccess();
  *(_QWORD *)v87 = v86;
  *(_BYTE *)(v87 + 8) = (_BYTE)v85;
  return v1;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x22E2B10C8]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(uint64_t a1)
{
  return type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(a1, (uint64_t *)&type metadata singleton initialization cache for DocumentUnderstanding_ClientInterface_CalendarEvent);
}

uint64_t type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(uint64_t a1)
{
  return type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(a1, (uint64_t *)&type metadata singleton initialization cache for DocumentUnderstanding_ClientInterface_DisplayInfo);
}

uint64_t outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined assign with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel(uint64_t a1)
{
  return type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(a1, (uint64_t *)&type metadata singleton initialization cache for DocumentUnderstanding_ClientInterface_StructuredEntityLabel);
}

uint64_t type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t outlined copy of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined copy of Data._Representation(a1, a2);
  return a1;
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined consume of Data._Representation(a1, a2);
  return a1;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t specialized static DocumentUnderstanding_ClientInterface_StructuredEntityLabel.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  uint64_t v19;
  double *v20;
  char v21;
  double *v22;
  int v23;
  void (*v24)(char *, uint64_t, uint64_t);
  void (*v25)(char *, uint64_t);
  uint64_t v27;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v27 - v9;
  v11 = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel(0);
  v12 = *(int *)(v11 + 20);
  v13 = (_QWORD *)(a1 + v12);
  v14 = *(_QWORD *)(a1 + v12 + 8);
  v15 = (_QWORD *)(a2 + v12);
  v16 = v15[1];
  if (!v14)
  {
    if (!v16)
      goto LABEL_10;
LABEL_12:
    v18 = 0;
    return v18 & 1;
  }
  if (!v16)
    goto LABEL_12;
  v17 = *v13 == *v15 && v14 == v16;
  if (v17 || (v18 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
LABEL_10:
    v19 = *(int *)(v11 + 24);
    v20 = (double *)(a1 + v19);
    v21 = *(_BYTE *)(a1 + v19 + 8);
    v22 = (double *)(a2 + v19);
    v23 = *(unsigned __int8 *)(a2 + v19 + 8);
    if ((v21 & 1) != 0)
    {
      if (!v23)
        goto LABEL_12;
    }
    else
    {
      if (*v20 != *v22)
        LOBYTE(v23) = 1;
      if ((v23 & 1) != 0)
        goto LABEL_12;
    }
    v24 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v24(v10, a1, v4);
    v24(v8, a2, v4);
    lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v18 = dispatch thunk of static Equatable.== infix(_:_:)();
    v25 = *(void (**)(char *, uint64_t))(v5 + 8);
    v25(v8, v4);
    v25(v10, v4);
  }
  return v18 & 1;
}

uint64_t specialized static DocumentUnderstanding_ClientInterface_StructuredEntity.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  void (*v15)(char *, uint64_t, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v19 - v9;
  v11 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20);
  v12 = *(_QWORD **)(a1 + v11);
  v13 = *(_QWORD **)(a2 + v11);
  if (v12 == v13
    || (swift_retain(),
        swift_retain(),
        v14 = closure #1 in static DocumentUnderstanding_ClientInterface_StructuredEntity.== infix(_:_:)(v12, v13),
        swift_release(),
        swift_release(),
        (v14 & 1) != 0))
  {
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15(v10, a1, v4);
    v15(v8, a2, v4);
    lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v10, v4);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x22E2B10E0](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized static DocumentUnderstanding_ClientInterface_CalendarEvent.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  int v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  int *v27;
  char v28;
  uint64_t v29;
  uint64_t *v30;
  int v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  int *v37;
  char v38;
  unsigned __int8 *v39;
  void (*v40)(_BYTE *, unsigned __int8 *, uint64_t);
  int *v41;
  void (*v42)(_BYTE *, uint64_t);
  _BYTE v43[4];
  int v44;
  int *v45;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = &v43[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v6);
  v10 = &v43[-v9];
  if (*a1 != *a2)
    goto LABEL_7;
  v11 = (int *)type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0);
  v12 = v11[6];
  v13 = *(_QWORD *)&a1[v12];
  v14 = *(_QWORD *)&a1[v12 + 8];
  v15 = (uint64_t *)&a2[v12];
  v16 = *v15;
  v17 = v15[1];
  if (v14 >> 60 == 15)
  {
    if (v17 >> 60 != 15)
      goto LABEL_6;
  }
  else
  {
    if (v17 >> 60 == 15)
      goto LABEL_6;
    v45 = v11;
    outlined copy of Data?(v13, v14);
    outlined copy of Data?(v16, v17);
    specialized static Data.== infix(_:_:)(v13, v14);
    v44 = v20;
    outlined consume of Data?(v16, v17);
    outlined consume of Data?(v13, v14);
    v11 = v45;
    if ((v44 & 1) == 0)
      goto LABEL_7;
  }
  v21 = v11[7];
  v22 = &a1[v21];
  v23 = *(_QWORD *)&a1[v21 + 8];
  v24 = &a2[v21];
  v25 = *((_QWORD *)v24 + 1);
  if (v23)
  {
    if (!v25)
      goto LABEL_7;
    if (*(_QWORD *)v22 != *(_QWORD *)v24 || v23 != v25)
    {
      v27 = v11;
      v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v11 = v27;
      v18 = 0;
      if ((v28 & 1) == 0)
        return v18 & 1;
    }
  }
  else if (v25)
  {
    goto LABEL_7;
  }
  v29 = v11[8];
  v13 = *(_QWORD *)&a1[v29];
  v14 = *(_QWORD *)&a1[v29 + 8];
  v30 = (uint64_t *)&a2[v29];
  v16 = *v30;
  v17 = v30[1];
  if (v14 >> 60 == 15)
  {
    if (v17 >> 60 == 15)
      goto LABEL_24;
LABEL_6:
    outlined copy of Data?(v13, v14);
    outlined copy of Data?(v16, v17);
    outlined consume of Data?(v13, v14);
    outlined consume of Data?(v16, v17);
    goto LABEL_7;
  }
  if (v17 >> 60 == 15)
    goto LABEL_6;
  v45 = v11;
  outlined copy of Data?(v13, v14);
  outlined copy of Data?(v16, v17);
  specialized static Data.== infix(_:_:)(v13, v14);
  v44 = v31;
  outlined consume of Data?(v16, v17);
  outlined consume of Data?(v13, v14);
  v11 = v45;
  if ((v44 & 1) == 0)
    goto LABEL_7;
LABEL_24:
  v32 = v11[9];
  v33 = &a1[v32];
  v34 = *(_QWORD *)&a1[v32 + 8];
  v35 = &a2[v32];
  v36 = *((_QWORD *)v35 + 1);
  if (!v34)
  {
    if (!v36)
    {
LABEL_31:
      v39 = &a1[v11[5]];
      v40 = *(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v5 + 16);
      v41 = v11;
      v40(v10, v39, v4);
      v40(v8, &a2[v41[5]], v4);
      lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v18 = dispatch thunk of static Equatable.== infix(_:_:)();
      v42 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
      v42(v8, v4);
      v42(v10, v4);
      return v18 & 1;
    }
    goto LABEL_7;
  }
  if (!v36)
  {
LABEL_7:
    v18 = 0;
    return v18 & 1;
  }
  if (*(_QWORD *)v33 == *(_QWORD *)v35 && v34 == v36)
    goto LABEL_31;
  v37 = v11;
  v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v11 = v37;
  v18 = 0;
  if ((v38 & 1) != 0)
    goto LABEL_31;
  return v18 & 1;
}

uint64_t specialized static DocumentUnderstanding_ClientInterface_DisplayInfo.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  char v12;
  char v13;
  int *v15;
  int *v16;
  uint64_t v17;
  double *v18;
  char v19;
  double *v20;
  int v21;
  uint64_t v22;
  double *v23;
  char v24;
  double *v25;
  int v26;
  uint64_t v27;
  double *v28;
  char v29;
  double *v30;
  int v31;
  uint64_t v32;
  double *v33;
  char v34;
  double *v35;
  int v36;
  uint64_t v37;
  double *v38;
  char v39;
  double *v40;
  int v41;
  uint64_t v42;
  double *v43;
  char v44;
  double *v45;
  int v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t);
  void (*v49)(char *, uint64_t);
  uint64_t v50;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v50 - v9;
  specialized static Data.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  if ((v11 & 1) == 0)
    goto LABEL_4;
  specialized static Data.== infix(_:_:)(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  if ((v12 & 1) == 0 || *(unsigned __int8 *)(a1 + 32) != *(unsigned __int8 *)(a2 + 32))
    goto LABEL_4;
  v15 = (int *)type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0);
  v16 = v15;
  v17 = v15[8];
  v18 = (double *)(a1 + v17);
  v19 = *(_BYTE *)(a1 + v17 + 8);
  v20 = (double *)(a2 + v17);
  v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if ((v19 & 1) != 0)
  {
    if (!v21)
      goto LABEL_4;
  }
  else
  {
    if (*v18 != *v20)
      LOBYTE(v21) = 1;
    if ((v21 & 1) != 0)
      goto LABEL_4;
  }
  v22 = v15[9];
  v23 = (double *)(a1 + v22);
  v24 = *(_BYTE *)(a1 + v22 + 8);
  v25 = (double *)(a2 + v22);
  v26 = *(unsigned __int8 *)(a2 + v22 + 8);
  if ((v24 & 1) != 0)
  {
    if (!v26)
      goto LABEL_4;
  }
  else
  {
    if (*v23 != *v25)
      LOBYTE(v26) = 1;
    if ((v26 & 1) != 0)
      goto LABEL_4;
  }
  v27 = v15[10];
  v28 = (double *)(a1 + v27);
  v29 = *(_BYTE *)(a1 + v27 + 8);
  v30 = (double *)(a2 + v27);
  v31 = *(unsigned __int8 *)(a2 + v27 + 8);
  if ((v29 & 1) != 0)
  {
    if (!v31)
      goto LABEL_4;
  }
  else
  {
    if (*v28 != *v30)
      LOBYTE(v31) = 1;
    if ((v31 & 1) != 0)
      goto LABEL_4;
  }
  v32 = v15[11];
  v33 = (double *)(a1 + v32);
  v34 = *(_BYTE *)(a1 + v32 + 8);
  v35 = (double *)(a2 + v32);
  v36 = *(unsigned __int8 *)(a2 + v32 + 8);
  if ((v34 & 1) != 0)
  {
    if (!v36)
      goto LABEL_4;
  }
  else
  {
    if (*v33 != *v35)
      LOBYTE(v36) = 1;
    if ((v36 & 1) != 0)
      goto LABEL_4;
  }
  v37 = v15[12];
  v38 = (double *)(a1 + v37);
  v39 = *(_BYTE *)(a1 + v37 + 8);
  v40 = (double *)(a2 + v37);
  v41 = *(unsigned __int8 *)(a2 + v37 + 8);
  if ((v39 & 1) != 0)
  {
    if (!v41)
      goto LABEL_4;
  }
  else
  {
    if (*v38 != *v40)
      LOBYTE(v41) = 1;
    if ((v41 & 1) != 0)
      goto LABEL_4;
  }
  v42 = v15[13];
  v43 = (double *)(a1 + v42);
  v44 = *(_BYTE *)(a1 + v42 + 8);
  v45 = (double *)(a2 + v42);
  v46 = *(unsigned __int8 *)(a2 + v42 + 8);
  if ((v44 & 1) == 0)
  {
    if (*v43 != *v45)
      LOBYTE(v46) = 1;
    if ((v46 & 1) != 0)
      goto LABEL_4;
LABEL_42:
    v47 = a1 + v15[7];
    v48 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v48(v10, v47, v4);
    v48(v8, a2 + v16[7], v4);
    lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    v49 = *(void (**)(char *, uint64_t))(v5 + 8);
    v49(v8, v4);
    v49(v10, v4);
    return v13 & 1;
  }
  if (v46)
    goto LABEL_42;
LABEL_4:
  v13 = 0;
  return v13 & 1;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in DocumentUnderstanding_ClientInterface_StructuredEntity()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_StructuredEntity);
}

uint64_t base witness table accessor for Message in DocumentUnderstanding_ClientInterface_StructuredEntity()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_StructuredEntity);
}

uint64_t base witness table accessor for Hashable in DocumentUnderstanding_ClientInterface_StructuredEntity()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_StructuredEntity);
}

uint64_t base witness table accessor for Equatable in DocumentUnderstanding_ClientInterface_StructuredEntity()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_StructuredEntity);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in DocumentUnderstanding_ClientInterface_StructuredEntityLabel()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_StructuredEntityLabel and conformance DocumentUnderstanding_ClientInterface_StructuredEntityLabel, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel);
}

uint64_t base witness table accessor for Message in DocumentUnderstanding_ClientInterface_StructuredEntityLabel()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_StructuredEntityLabel and conformance DocumentUnderstanding_ClientInterface_StructuredEntityLabel, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel);
}

uint64_t base witness table accessor for Hashable in DocumentUnderstanding_ClientInterface_StructuredEntityLabel()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_StructuredEntityLabel and conformance DocumentUnderstanding_ClientInterface_StructuredEntityLabel, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel);
}

uint64_t base witness table accessor for Equatable in DocumentUnderstanding_ClientInterface_StructuredEntityLabel()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_StructuredEntityLabel and conformance DocumentUnderstanding_ClientInterface_StructuredEntityLabel, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in DocumentUnderstanding_ClientInterface_CalendarEvent()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_CalendarEvent and conformance DocumentUnderstanding_ClientInterface_CalendarEvent, type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_CalendarEvent);
}

uint64_t base witness table accessor for Message in DocumentUnderstanding_ClientInterface_CalendarEvent()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_CalendarEvent and conformance DocumentUnderstanding_ClientInterface_CalendarEvent, type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_CalendarEvent);
}

uint64_t base witness table accessor for Hashable in DocumentUnderstanding_ClientInterface_CalendarEvent()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_CalendarEvent and conformance DocumentUnderstanding_ClientInterface_CalendarEvent, type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_CalendarEvent);
}

uint64_t base witness table accessor for Equatable in DocumentUnderstanding_ClientInterface_CalendarEvent()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_CalendarEvent and conformance DocumentUnderstanding_ClientInterface_CalendarEvent, type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_CalendarEvent);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in DocumentUnderstanding_ClientInterface_DisplayInfo()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_DisplayInfo and conformance DocumentUnderstanding_ClientInterface_DisplayInfo, type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_DisplayInfo);
}

uint64_t base witness table accessor for Message in DocumentUnderstanding_ClientInterface_DisplayInfo()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_DisplayInfo and conformance DocumentUnderstanding_ClientInterface_DisplayInfo, type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_DisplayInfo);
}

uint64_t base witness table accessor for Hashable in DocumentUnderstanding_ClientInterface_DisplayInfo()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_DisplayInfo and conformance DocumentUnderstanding_ClientInterface_DisplayInfo, type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_DisplayInfo);
}

uint64_t base witness table accessor for Equatable in DocumentUnderstanding_ClientInterface_DisplayInfo()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_DisplayInfo and conformance DocumentUnderstanding_ClientInterface_DisplayInfo, type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_DisplayInfo);
}

uint64_t *initializeBufferWithCopyOfBuffer for DocumentUnderstanding_ClientInterface_StructuredEntity(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  swift_retain();
  return a1;
}

uint64_t destroy for DocumentUnderstanding_ClientInterface_StructuredEntity(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_release();
}

uint64_t initializeWithCopy for DocumentUnderstanding_ClientInterface_StructuredEntity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for DocumentUnderstanding_ClientInterface_StructuredEntity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for DocumentUnderstanding_ClientInterface_StructuredEntity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for DocumentUnderstanding_ClientInterface_StructuredEntity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DocumentUnderstanding_ClientInterface_StructuredEntity()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2282F6848(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for DocumentUnderstanding_ClientInterface_StructuredEntity()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2282F68D0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata completion function for DocumentUnderstanding_ClientInterface_StructuredEntity()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DocumentUnderstanding_ClientInterface_StructuredEntityLabel(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (char *)a1 + v9;
    v14 = (char *)a2 + v9;
    v13[8] = v14[8];
    *(_QWORD *)v13 = *(_QWORD *)v14;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for DocumentUnderstanding_ClientInterface_StructuredEntityLabel(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DocumentUnderstanding_ClientInterface_StructuredEntityLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = a1 + v8;
  v13 = a2 + v8;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  *(_QWORD *)v12 = *(_QWORD *)v13;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DocumentUnderstanding_ClientInterface_StructuredEntityLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = *(int *)(a3 + 24);
  v11 = a1 + v10;
  v12 = (uint64_t *)(a2 + v10);
  v13 = *v12;
  *(_BYTE *)(v11 + 8) = *((_BYTE *)v12 + 8);
  *(_QWORD *)v11 = v13;
  return a1;
}

uint64_t initializeWithTake for DocumentUnderstanding_ClientInterface_StructuredEntityLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  return a1;
}

uint64_t assignWithTake for DocumentUnderstanding_ClientInterface_StructuredEntityLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  v12 = *(int *)(a3 + 24);
  v13 = a1 + v12;
  v14 = a2 + v12;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for DocumentUnderstanding_ClientInterface_StructuredEntityLabel()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2282F6CD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for DocumentUnderstanding_ClientInterface_StructuredEntityLabel()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2282F6D68(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  return result;
}

uint64_t type metadata completion function for DocumentUnderstanding_ClientInterface_StructuredEntityLabel()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DocumentUnderstanding_ClientInterface_CalendarEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  _OWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = a3[5];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = a3[6];
    v12 = (char *)v4 + v11;
    v13 = (char *)a2 + v11;
    v14 = *((_QWORD *)v13 + 1);
    if (v14 >> 60 == 15)
    {
      *(_OWORD *)v12 = *(_OWORD *)v13;
    }
    else
    {
      v16 = *(_QWORD *)v13;
      outlined copy of Data._Representation(*(_QWORD *)v13, *((_QWORD *)v13 + 1));
      *(_QWORD *)v12 = v16;
      *((_QWORD *)v12 + 1) = v14;
    }
    v17 = a3[7];
    v18 = a3[8];
    v19 = (uint64_t *)((char *)v4 + v17);
    v20 = (uint64_t *)((char *)a2 + v17);
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    v22 = (char *)v4 + v18;
    v23 = (_OWORD *)((char *)a2 + v18);
    v24 = *(uint64_t *)((char *)a2 + v18 + 8);
    swift_bridgeObjectRetain();
    if (v24 >> 60 == 15)
    {
      *(_OWORD *)v22 = *v23;
    }
    else
    {
      v25 = *(_QWORD *)v23;
      outlined copy of Data._Representation(v25, v24);
      *(_QWORD *)v22 = v25;
      *((_QWORD *)v22 + 1) = v24;
    }
    v26 = a3[9];
    v27 = (uint64_t *)((char *)v4 + v26);
    v28 = (uint64_t *)((char *)a2 + v26);
    v29 = v28[1];
    *v27 = *v28;
    v27[1] = v29;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for DocumentUnderstanding_ClientInterface_CalendarEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;

  v4 = a1 + a2[5];
  v5 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = (uint64_t *)(a1 + a2[6]);
  v7 = v6[1];
  if (v7 >> 60 != 15)
    outlined consume of Data._Representation(*v6, v7);
  swift_bridgeObjectRelease();
  v8 = (uint64_t *)(a1 + a2[8]);
  v9 = v8[1];
  if (v9 >> 60 != 15)
    outlined consume of Data._Representation(*v8, v9);
  return swift_bridgeObjectRelease();
}

_BYTE *initializeWithCopy for DocumentUnderstanding_ClientInterface_CalendarEvent(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _BYTE *v20;
  _OWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = a3[6];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = *((_QWORD *)v12 + 1);
  if (v13 >> 60 == 15)
  {
    *(_OWORD *)v11 = *(_OWORD *)v12;
  }
  else
  {
    v14 = *(_QWORD *)v12;
    outlined copy of Data._Representation(*(_QWORD *)v12, *((_QWORD *)v12 + 1));
    *(_QWORD *)v11 = v14;
    *((_QWORD *)v11 + 1) = v13;
  }
  v15 = a3[7];
  v16 = a3[8];
  v17 = &a1[v15];
  v18 = &a2[v15];
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  v20 = &a1[v16];
  v21 = &a2[v16];
  v22 = *(_QWORD *)&a2[v16 + 8];
  swift_bridgeObjectRetain();
  if (v22 >> 60 == 15)
  {
    *(_OWORD *)v20 = *v21;
  }
  else
  {
    v23 = *(_QWORD *)v21;
    outlined copy of Data._Representation(v23, v22);
    *(_QWORD *)v20 = v23;
    *((_QWORD *)v20 + 1) = v22;
  }
  v24 = a3[9];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v27 = v26[1];
  *v25 = *v26;
  v25[1] = v27;
  swift_bridgeObjectRetain();
  return a1;
}

_BYTE *assignWithCopy for DocumentUnderstanding_ClientInterface_CalendarEvent(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[6];
  v11 = (uint64_t *)&a1[v10];
  v12 = (uint64_t *)&a2[v10];
  v13 = *(_QWORD *)&a2[v10 + 8];
  if (*(_QWORD *)&a1[v10 + 8] >> 60 == 15)
  {
    if (v13 >> 60 != 15)
    {
      v14 = *v12;
      outlined copy of Data._Representation(v14, v13);
      *v11 = v14;
      v11[1] = v13;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v13 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v11);
LABEL_6:
    *(_OWORD *)v11 = *(_OWORD *)v12;
    goto LABEL_8;
  }
  v15 = *v12;
  outlined copy of Data._Representation(v15, v13);
  v16 = *v11;
  v17 = v11[1];
  *v11 = v15;
  v11[1] = v13;
  outlined consume of Data._Representation(v16, v17);
LABEL_8:
  v18 = a3[7];
  v19 = &a1[v18];
  v20 = &a2[v18];
  *v19 = *v20;
  v19[1] = v20[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v21 = a3[8];
  v22 = (uint64_t *)&a1[v21];
  v23 = (uint64_t *)&a2[v21];
  v24 = *(_QWORD *)&a2[v21 + 8];
  if (*(_QWORD *)&a1[v21 + 8] >> 60 != 15)
  {
    if (v24 >> 60 != 15)
    {
      v26 = *v23;
      outlined copy of Data._Representation(v26, v24);
      v27 = *v22;
      v28 = v22[1];
      *v22 = v26;
      v22[1] = v24;
      outlined consume of Data._Representation(v27, v28);
      goto LABEL_15;
    }
    outlined destroy of Data((uint64_t)v22);
    goto LABEL_13;
  }
  if (v24 >> 60 == 15)
  {
LABEL_13:
    *(_OWORD *)v22 = *(_OWORD *)v23;
    goto LABEL_15;
  }
  v25 = *v23;
  outlined copy of Data._Representation(v25, v24);
  *v22 = v25;
  v22[1] = v24;
LABEL_15:
  v29 = a3[9];
  v30 = &a1[v29];
  v31 = &a2[v29];
  *v30 = *v31;
  v30[1] = v31[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of Data(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BDCDDE8] - 8) + 8))();
  return a1;
}

_BYTE *initializeWithTake for DocumentUnderstanding_ClientInterface_CalendarEvent(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  *(_OWORD *)&a1[v10] = *(_OWORD *)&a2[v10];
  v11 = a3[9];
  *(_OWORD *)&a1[a3[8]] = *(_OWORD *)&a2[a3[8]];
  *(_OWORD *)&a1[v11] = *(_OWORD *)&a2[v11];
  return a1;
}

_BYTE *assignWithTake for DocumentUnderstanding_ClientInterface_CalendarEvent(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[6];
  v11 = (uint64_t)&a1[v10];
  v12 = &a2[v10];
  v13 = *(_QWORD *)&a1[v10 + 8];
  if (v13 >> 60 == 15)
    goto LABEL_4;
  v14 = *((_QWORD *)v12 + 1);
  if (v14 >> 60 == 15)
  {
    outlined destroy of Data(v11);
LABEL_4:
    *(_OWORD *)v11 = *(_OWORD *)v12;
    goto LABEL_6;
  }
  v15 = *(_QWORD *)v11;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_QWORD *)(v11 + 8) = v14;
  outlined consume of Data._Representation(v15, v13);
LABEL_6:
  v16 = a3[7];
  v17 = &a1[v16];
  v18 = (uint64_t *)&a2[v16];
  v20 = *v18;
  v19 = v18[1];
  *v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease();
  v21 = a3[8];
  v22 = (uint64_t *)&a1[v21];
  v23 = (uint64_t *)&a2[v21];
  v24 = *(_QWORD *)&a1[v21 + 8];
  if (v24 >> 60 != 15)
  {
    v25 = v23[1];
    if (v25 >> 60 != 15)
    {
      v26 = *v22;
      *v22 = *v23;
      v22[1] = v25;
      outlined consume of Data._Representation(v26, v24);
      goto LABEL_11;
    }
    outlined destroy of Data((uint64_t)v22);
  }
  *(_OWORD *)v22 = *(_OWORD *)v23;
LABEL_11:
  v27 = a3[9];
  v28 = &a1[v27];
  v29 = (uint64_t *)&a2[v27];
  v31 = *v29;
  v30 = v29[1];
  *v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DocumentUnderstanding_ClientInterface_CalendarEvent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2282F7530(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 28) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for DocumentUnderstanding_ClientInterface_CalendarEvent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2282F75CC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 28) + 8) = a2;
  return result;
}

uint64_t type metadata completion function for DocumentUnderstanding_ClientInterface_CalendarEvent()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t initializeBufferWithCopyOfBuffer for DocumentUnderstanding_ClientInterface_DisplayInfo(unint64_t a1, uint64_t a2, int *a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v33 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v33 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    outlined copy of Data._Representation(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    v9 = *(_QWORD *)(a2 + 16);
    v10 = *(_QWORD *)(a2 + 24);
    outlined copy of Data._Representation(v9, v10);
    *(_QWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = v10;
    *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
    v11 = a3[7];
    v12 = a1 + v11;
    v13 = a2 + v11;
    v14 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
    v15 = a3[8];
    v16 = a3[9];
    v17 = a1 + v15;
    v18 = a2 + v15;
    *(_QWORD *)v17 = *(_QWORD *)v18;
    *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
    v19 = a1 + v16;
    v20 = a2 + v16;
    *(_QWORD *)v19 = *(_QWORD *)v20;
    *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
    v21 = a3[10];
    v22 = a3[11];
    v23 = a1 + v21;
    v24 = a2 + v21;
    *(_QWORD *)v23 = *(_QWORD *)v24;
    *(_BYTE *)(v23 + 8) = *(_BYTE *)(v24 + 8);
    v25 = a1 + v22;
    v26 = a2 + v22;
    *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
    *(_QWORD *)v25 = *(_QWORD *)v26;
    v27 = a3[12];
    v28 = a3[13];
    v29 = a1 + v27;
    v30 = a2 + v27;
    *(_QWORD *)v29 = *(_QWORD *)v30;
    *(_BYTE *)(v29 + 8) = *(_BYTE *)(v30 + 8);
    v31 = a1 + v28;
    v32 = a2 + v28;
    *(_QWORD *)v31 = *(_QWORD *)v32;
    *(_BYTE *)(v31 + 8) = *(_BYTE *)(v32 + 8);
  }
  return a1;
}

uint64_t destroy for DocumentUnderstanding_ClientInterface_DisplayInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for DocumentUnderstanding_ClientInterface_DisplayInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  outlined copy of Data._Representation(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  outlined copy of Data._Representation(v8, v9);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v10 = a3[7];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  v14 = a3[8];
  v15 = a3[9];
  v16 = a1 + v14;
  v17 = a2 + v14;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  v18 = a1 + v15;
  v19 = a2 + v15;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  v20 = a3[10];
  v21 = a3[11];
  v22 = a1 + v20;
  v23 = a2 + v20;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  v24 = a1 + v21;
  v25 = a2 + v21;
  *(_BYTE *)(v24 + 8) = *(_BYTE *)(v25 + 8);
  *(_QWORD *)v24 = *(_QWORD *)v25;
  v26 = a3[12];
  v27 = a3[13];
  v28 = a1 + v26;
  v29 = a2 + v26;
  *(_QWORD *)v28 = *(_QWORD *)v29;
  *(_BYTE *)(v28 + 8) = *(_BYTE *)(v29 + 8);
  v30 = a1 + v27;
  v31 = a2 + v27;
  *(_QWORD *)v30 = *(_QWORD *)v31;
  *(_BYTE *)(v30 + 8) = *(_BYTE *)(v31 + 8);
  return a1;
}

uint64_t assignWithCopy for DocumentUnderstanding_ClientInterface_DisplayInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  outlined copy of Data._Representation(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  outlined consume of Data._Representation(v8, v9);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 24);
  outlined copy of Data._Representation(v10, v11);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 24) = v11;
  outlined consume of Data._Representation(v12, v13);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v14 = a3[7];
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 24))(v15, v16, v17);
  v18 = a3[8];
  v19 = a1 + v18;
  v20 = (uint64_t *)(a2 + v18);
  v21 = *v20;
  *(_BYTE *)(v19 + 8) = *((_BYTE *)v20 + 8);
  *(_QWORD *)v19 = v21;
  v22 = a3[9];
  v23 = a1 + v22;
  v24 = a2 + v22;
  LOBYTE(v21) = *(_BYTE *)(v24 + 8);
  *(_QWORD *)v23 = *(_QWORD *)v24;
  *(_BYTE *)(v23 + 8) = v21;
  v25 = a3[10];
  v26 = a1 + v25;
  v27 = a2 + v25;
  LOBYTE(v21) = *(_BYTE *)(v27 + 8);
  *(_QWORD *)v26 = *(_QWORD *)v27;
  *(_BYTE *)(v26 + 8) = v21;
  v28 = a3[11];
  v29 = a1 + v28;
  v30 = a2 + v28;
  LOBYTE(v21) = *(_BYTE *)(v30 + 8);
  *(_QWORD *)v29 = *(_QWORD *)v30;
  *(_BYTE *)(v29 + 8) = v21;
  v31 = a3[12];
  v32 = a1 + v31;
  v33 = a2 + v31;
  LOBYTE(v21) = *(_BYTE *)(v33 + 8);
  *(_QWORD *)v32 = *(_QWORD *)v33;
  *(_BYTE *)(v32 + 8) = v21;
  v34 = a3[13];
  v35 = a1 + v34;
  v36 = a2 + v34;
  LOBYTE(v21) = *(_BYTE *)(v36 + 8);
  *(_QWORD *)v35 = *(_QWORD *)v36;
  *(_BYTE *)(v35 + 8) = v21;
  return a1;
}

uint64_t initializeWithTake for DocumentUnderstanding_ClientInterface_DisplayInfo(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v7 = a3[7];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[8];
  v12 = a3[9];
  v13 = a1 + v11;
  v14 = a2 + v11;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  v15 = a1 + v12;
  v16 = a2 + v12;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  v17 = a3[10];
  v18 = a3[11];
  v19 = a1 + v17;
  v20 = a2 + v17;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  v21 = a1 + v18;
  v22 = a2 + v18;
  *(_BYTE *)(v21 + 8) = *(_BYTE *)(v22 + 8);
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v23 = a3[12];
  v24 = a3[13];
  v25 = a1 + v23;
  v26 = a2 + v23;
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
  v27 = a1 + v24;
  v28 = a2 + v24;
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
  return a1;
}

uint64_t assignWithTake for DocumentUnderstanding_ClientInterface_DisplayInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v6, v7);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  outlined consume of Data._Representation(v8, v9);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v10 = a3[7];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  v14 = a3[8];
  v15 = a3[9];
  v16 = a1 + v14;
  v17 = a2 + v14;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  v18 = a1 + v15;
  v19 = a2 + v15;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  v20 = a3[10];
  v21 = a3[11];
  v22 = a1 + v20;
  v23 = a2 + v20;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  v24 = a1 + v21;
  v25 = a2 + v21;
  *(_BYTE *)(v24 + 8) = *(_BYTE *)(v25 + 8);
  *(_QWORD *)v24 = *(_QWORD *)v25;
  v26 = a3[12];
  v27 = a3[13];
  v28 = a1 + v26;
  v29 = a2 + v26;
  *(_QWORD *)v28 = *(_QWORD *)v29;
  *(_BYTE *)(v28 + 8) = *(_BYTE *)(v29 + 8);
  v30 = a1 + v27;
  v31 = a2 + v27;
  *(_QWORD *)v30 = *(_QWORD *)v31;
  *(_BYTE *)(v30 + 8) = *(_BYTE *)(v31 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for DocumentUnderstanding_ClientInterface_DisplayInfo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2282F7D4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v10;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 32);
    v5 = v4 >= 2;
    v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5)
      return (v6 + 1);
    else
      return 0;
  }
  else
  {
    v10 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for DocumentUnderstanding_ClientInterface_DisplayInfo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2282F7DD4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 32) = a2 + 1;
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for DocumentUnderstanding_ClientInterface_DisplayInfo()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t ObjC metadata update function for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass()
{
  return type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
}

void type metadata completion function for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent?(319, &lazy cache variable for type metadata for DocumentUnderstanding_ClientInterface_CalendarEvent?, (void (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent);
  if (v0 <= 0x3F)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent?(319, &lazy cache variable for type metadata for DocumentUnderstanding_ClientInterface_DisplayInfo?, (void (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo);
    if (v1 <= 0x3F)
    {
      type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent?(319, (unint64_t *)&lazy cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?, (void (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      if (v2 <= 0x3F)
        swift_updateClassMetadata2();
    }
  }
}

void type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = type metadata accessor for Optional();
    if (!v5)
      atomic_store(v4, a2);
  }
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  type metadata accessor for CGPoint(a1, &lazy cache variable for type metadata for CGPoint);
}

uint64_t initializeBufferWithCopyOfBuffer for CGRect(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for CGRect(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CGRect(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
  type metadata accessor for CGPoint(a1, &lazy cache variable for type metadata for CGRect);
}

void type metadata accessor for DUDocumentType(uint64_t a1)
{
  type metadata accessor for CGPoint(a1, &lazy cache variable for type metadata for DUDocumentType);
}

void type metadata accessor for NSTextCheckingKey(uint64_t a1)
{
  type metadata accessor for CGPoint(a1, &lazy cache variable for type metadata for NSTextCheckingKey);
}

void type metadata accessor for NLTag(uint64_t a1)
{
  type metadata accessor for CGPoint(a1, &lazy cache variable for type metadata for NLTag);
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for _PASDBIterAction_(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for _PASDBIterAction_(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2282F8240 + 4 * byte_2284C0D78[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2282F8274 + 4 * byte_2284C0D73[v4]))();
}

uint64_t sub_2282F8274(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2282F827C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2282F8284);
  return result;
}

uint64_t sub_2282F8290(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2282F8298);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2282F829C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2282F82A4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for _PASDBIterAction_(uint64_t a1)
{
  type metadata accessor for CGPoint(a1, &lazy cache variable for type metadata for _PASDBIterAction_);
}

void type metadata accessor for NLTagScheme(uint64_t a1)
{
  type metadata accessor for CGPoint(a1, &lazy cache variable for type metadata for NLTagScheme);
}

void type metadata accessor for _NSRange(uint64_t a1)
{
  type metadata accessor for CGPoint(a1, &lazy cache variable for type metadata for _NSRange);
}

uint64_t base witness table accessor for RawRepresentable in NLTagScheme()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type NLTagScheme and conformance NLTagScheme, (uint64_t (*)(uint64_t))type metadata accessor for NLTagScheme, (uint64_t)&protocol conformance descriptor for NLTagScheme);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NLTagScheme()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type NLTagScheme and conformance NLTagScheme, (uint64_t (*)(uint64_t))type metadata accessor for NLTagScheme, (uint64_t)&protocol conformance descriptor for NLTagScheme);
}

uint64_t base witness table accessor for Equatable in NLTagScheme()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type NLTagScheme and conformance NLTagScheme, (uint64_t (*)(uint64_t))type metadata accessor for NLTagScheme, (uint64_t)&protocol conformance descriptor for NLTagScheme);
}

uint64_t base witness table accessor for RawRepresentable in NLTag()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type NLTag and conformance NLTag, (uint64_t (*)(uint64_t))type metadata accessor for NLTag, (uint64_t)&protocol conformance descriptor for NLTag);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NLTag()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type NLTag and conformance NLTag, (uint64_t (*)(uint64_t))type metadata accessor for NLTag, (uint64_t)&protocol conformance descriptor for NLTag);
}

uint64_t base witness table accessor for Equatable in NLTag()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type NLTag and conformance NLTag, (uint64_t (*)(uint64_t))type metadata accessor for NLTag, (uint64_t)&protocol conformance descriptor for NLTag);
}

uint64_t base witness table accessor for RawRepresentable in NSTextCheckingKey()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type NSTextCheckingKey and conformance NSTextCheckingKey, (uint64_t (*)(uint64_t))type metadata accessor for NSTextCheckingKey, (uint64_t)&protocol conformance descriptor for NSTextCheckingKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSTextCheckingKey()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type NSTextCheckingKey and conformance NSTextCheckingKey, (uint64_t (*)(uint64_t))type metadata accessor for NSTextCheckingKey, (uint64_t)&protocol conformance descriptor for NSTextCheckingKey);
}

uint64_t base witness table accessor for Equatable in NSTextCheckingKey()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type NSTextCheckingKey and conformance NSTextCheckingKey, (uint64_t (*)(uint64_t))type metadata accessor for NSTextCheckingKey, (uint64_t)&protocol conformance descriptor for NSTextCheckingKey);
}

uint64_t outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

void type metadata accessor for CFStringRef(uint64_t a1)
{
  type metadata accessor for CGPoint(a1, &lazy cache variable for type metadata for CFStringRef);
}

void type metadata accessor for PHPersonType(uint64_t a1)
{
  type metadata accessor for CGPoint(a1, &lazy cache variable for type metadata for PHPersonType);
}

uint64_t getEnumTagSinglePayload for CGSize(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CGSize(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  type metadata accessor for CGPoint(a1, &lazy cache variable for type metadata for CGSize);
}

void type metadata accessor for CGPoint(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t base witness table accessor for Equatable in CFStringRef()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
}

uint64_t base witness table accessor for Hashable in CFStringRef()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
}

void DUWikipediaTopicDetectionSmolBERToRetrievalImplementation.convertRecordToResult(qid:titleJSONData:distance:)()
{
  swift_deletedMethodError();
  __break(1u);
}

uint64_t DocumentUnderstanding_ClientInterface_Response.topics.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DocumentUnderstanding_ClientInterface_Response();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v1 + *(int *)(v6 + 20), (uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?);
  v7 = type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v5, (uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse);
  v8 = MEMORY[0x24BEE4AF8];
  *a1 = MEMORY[0x24BEE4AF8];
  a1[1] = v8;
  UnknownStorage.init()();
  v9 = (char *)a1 + *(int *)(v7 + 28);
  v10 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?);
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_Response.topics : DocumentUnderstanding_ClientInterface_Response@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DocumentUnderstanding_ClientInterface_Response();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(a1 + *(int *)(v7 + 20), (uint64_t)v6, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?);
  v8 = type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v6, (uint64_t)a2, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse);
  v9 = MEMORY[0x24BEE4AF8];
  *a2 = MEMORY[0x24BEE4AF8];
  a2[1] = v9;
  UnknownStorage.init()();
  v10 = (char *)a2 + *(int *)(v8 + 28);
  v11 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v6, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?);
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_Response.topics : DocumentUnderstanding_ClientInterface_Response(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(a1, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse);
  v8 = a2 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_Response() + 20);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v8, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v7, v8, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t DocumentUnderstanding_ClientInterface_Response.topics.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_Response() + 20);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v3, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(a1, v3, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse);
  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

uint64_t type metadata accessor for DocumentUnderstanding_ClientInterface_Response()
{
  uint64_t result;

  result = type metadata singleton initialization cache for DocumentUnderstanding_ClientInterface_Response;
  if (!type metadata singleton initialization cache for DocumentUnderstanding_ClientInterface_Response)
    return swift_getSingletonMetadata();
  return result;
}

void (*DocumentUnderstanding_ClientInterface_Response.topics.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse();
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_Response() + 20);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    v11 = MEMORY[0x24BEE4AF8];
    *v9 = MEMORY[0x24BEE4AF8];
    v9[1] = v11;
    UnknownStorage.init()();
    v12 = (char *)v9 + *(int *)(v6 + 28);
    v13 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?);
  }
  else
  {
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v5, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse);
  }
  return DocumentUnderstanding_ClientInterface_Response.topics.modify;
}

void DocumentUnderstanding_ClientInterface_Response.topics.modify(uint64_t a1, char a2)
{
  DocumentUnderstanding_ClientInterface_Response.topics.modify(a1, a2, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse);
}

BOOL DocumentUnderstanding_ClientInterface_Response.hasTopics.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_Response();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + *(int *)(v4 + 20), (uint64_t)v3, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?);
  v5 = type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse();
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v3, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?);
  return v6;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_Response.clearTopics()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_Response() + 20);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v1, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?);
  v2 = type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t DocumentUnderstanding_ClientInterface_Response.structuredEntities.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DocumentUnderstanding_ClientInterface_Response();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v1 + *(int *)(v6 + 24), (uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?);
  v7 = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v5, (uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse);
  *a1 = MEMORY[0x24BEE4AF8];
  UnknownStorage.init()();
  v8 = (char *)a1 + *(int *)(v7 + 24);
  v9 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?);
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_Response.structuredEntities : DocumentUnderstanding_ClientInterface_Response@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DocumentUnderstanding_ClientInterface_Response();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(a1 + *(int *)(v7 + 24), (uint64_t)v6, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?);
  v8 = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v6, (uint64_t)a2, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse);
  *a2 = MEMORY[0x24BEE4AF8];
  UnknownStorage.init()();
  v9 = (char *)a2 + *(int *)(v8 + 24);
  v10 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v6, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?);
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_Response.structuredEntities : DocumentUnderstanding_ClientInterface_Response(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(a1, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse);
  v8 = a2 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_Response() + 24);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v8, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v7, v8, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t DocumentUnderstanding_ClientInterface_Response.structuredEntities.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_Response() + 24);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v3, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(a1, v3, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse);
  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

void (*DocumentUnderstanding_ClientInterface_Response.structuredEntities.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse();
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_Response() + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = MEMORY[0x24BEE4AF8];
    UnknownStorage.init()();
    v11 = (char *)v9 + *(int *)(v6 + 24);
    v12 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?);
  }
  else
  {
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v5, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse);
  }
  return DocumentUnderstanding_ClientInterface_Response.structuredEntities.modify;
}

void DocumentUnderstanding_ClientInterface_Response.structuredEntities.modify(uint64_t a1, char a2)
{
  DocumentUnderstanding_ClientInterface_Response.topics.modify(a1, a2, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse);
}

void DocumentUnderstanding_ClientInterface_Response.topics.modify(uint64_t a1, char a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;

  v6 = *(void **)a1;
  v7 = *(int *)(*(_QWORD *)a1 + 48);
  v8 = *(void **)(*(_QWORD *)a1 + 32);
  v9 = *(void **)(*(_QWORD *)a1 + 40);
  v10 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v11 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v12 = *(void **)(*(_QWORD *)a1 + 8);
  v13 = **(_QWORD **)a1 + v7;
  if ((a2 & 1) != 0)
  {
    outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)v8, a4);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v13, a3);
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v8, v13, a4);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v10);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v9, a4);
  }
  else
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(**(_QWORD **)a1 + v7, a3);
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v9, v13, a4);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v10);
  }
  free(v9);
  free(v8);
  free(v12);
  free(v6);
}

BOOL DocumentUnderstanding_ClientInterface_Response.hasStructuredEntities.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_Response();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + *(int *)(v4 + 24), (uint64_t)v3, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?);
  v5 = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse();
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v3, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?);
  return v6;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_Response.clearStructuredEntities()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_Response() + 24);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v1, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?);
  v2 = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t DocumentUnderstanding_ClientInterface_Response.languageTags.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DocumentUnderstanding_ClientInterface_Response();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?);
  v7 = type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v5, (uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse);
  *a1 = MEMORY[0x24BEE4AF8];
  UnknownStorage.init()();
  v8 = (char *)a1 + *(int *)(v7 + 24);
  v9 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?);
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_Response.languageTags : DocumentUnderstanding_ClientInterface_Response@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DocumentUnderstanding_ClientInterface_Response();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(a1 + *(int *)(v7 + 28), (uint64_t)v6, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?);
  v8 = type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v6, (uint64_t)a2, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse);
  *a2 = MEMORY[0x24BEE4AF8];
  UnknownStorage.init()();
  v9 = (char *)a2 + *(int *)(v8 + 24);
  v10 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v6, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?);
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_Response.languageTags : DocumentUnderstanding_ClientInterface_Response(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(a1, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse);
  v8 = a2 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_Response() + 28);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v8, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v7, v8, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t DocumentUnderstanding_ClientInterface_Response.languageTags.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_Response() + 28);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v3, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(a1, v3, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse);
  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

void (*DocumentUnderstanding_ClientInterface_Response.languageTags.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse();
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_Response() + 28);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = MEMORY[0x24BEE4AF8];
    UnknownStorage.init()();
    v11 = (char *)v9 + *(int *)(v6 + 24);
    v12 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?);
  }
  else
  {
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v5, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse);
  }
  return DocumentUnderstanding_ClientInterface_Response.languageTags.modify;
}

void DocumentUnderstanding_ClientInterface_Response.languageTags.modify(uint64_t a1, char a2)
{
  DocumentUnderstanding_ClientInterface_Response.topics.modify(a1, a2, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse);
}

BOOL DocumentUnderstanding_ClientInterface_Response.hasLanguageTags.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_Response();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + *(int *)(v4 + 28), (uint64_t)v3, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?);
  v5 = type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse();
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v3, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?);
  return v6;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_Response.clearLanguageTags()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_Response() + 28);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v1, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?);
  v2 = type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t DocumentUnderstanding_ClientInterface_Response.userInterfaceUnderstandingResults.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DocumentUnderstanding_ClientInterface_Response();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v1 + *(int *)(v6 + 32), (uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?);
  v7 = type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v5, (uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse);
  *a1 = MEMORY[0x24BEE4AF8];
  UnknownStorage.init()();
  v8 = (char *)a1 + *(int *)(v7 + 24);
  v9 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?);
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_Response.userInterfaceUnderstandingResults : DocumentUnderstanding_ClientInterface_Response@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DocumentUnderstanding_ClientInterface_Response();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(a1 + *(int *)(v7 + 32), (uint64_t)v6, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?);
  v8 = type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v6, (uint64_t)a2, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse);
  *a2 = MEMORY[0x24BEE4AF8];
  UnknownStorage.init()();
  v9 = (char *)a2 + *(int *)(v8 + 24);
  v10 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v6, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?);
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_Response.userInterfaceUnderstandingResults : DocumentUnderstanding_ClientInterface_Response(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(a1, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse);
  v8 = a2 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_Response() + 32);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v8, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v7, v8, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t DocumentUnderstanding_ClientInterface_Response.userInterfaceUnderstandingResults.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_Response() + 32);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v3, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(a1, v3, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse);
  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

void (*DocumentUnderstanding_ClientInterface_Response.userInterfaceUnderstandingResults.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse();
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_Response() + 32);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = MEMORY[0x24BEE4AF8];
    UnknownStorage.init()();
    v11 = (char *)v9 + *(int *)(v6 + 24);
    v12 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?);
  }
  else
  {
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v5, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse);
  }
  return DocumentUnderstanding_ClientInterface_Response.userInterfaceUnderstandingResults.modify;
}

void DocumentUnderstanding_ClientInterface_Response.userInterfaceUnderstandingResults.modify(uint64_t a1, char a2)
{
  DocumentUnderstanding_ClientInterface_Response.topics.modify(a1, a2, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse);
}

BOOL DocumentUnderstanding_ClientInterface_Response.hasUserInterfaceUnderstandingResults.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_Response();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + *(int *)(v4 + 32), (uint64_t)v3, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?);
  v5 = type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse();
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v3, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?);
  return v6;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_Response.clearUserInterfaceUnderstandingResults()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_Response() + 32);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v1, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?);
  v2 = type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t DocumentUnderstanding_ClientInterface_Response.documentCategories.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DocumentUnderstanding_ClientInterface_Response();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v1 + *(int *)(v6 + 36), (uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?);
  v7 = type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v5, (uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse);
  *a1 = MEMORY[0x24BEE4AF8];
  UnknownStorage.init()();
  v8 = (char *)a1 + *(int *)(v7 + 24);
  v9 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?);
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_Response.documentCategories : DocumentUnderstanding_ClientInterface_Response@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DocumentUnderstanding_ClientInterface_Response();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(a1 + *(int *)(v7 + 36), (uint64_t)v6, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?);
  v8 = type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v6, (uint64_t)a2, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse);
  *a2 = MEMORY[0x24BEE4AF8];
  UnknownStorage.init()();
  v9 = (char *)a2 + *(int *)(v8 + 24);
  v10 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v6, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?);
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_Response.documentCategories : DocumentUnderstanding_ClientInterface_Response(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(a1, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse);
  v8 = a2 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_Response() + 36);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v8, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v7, v8, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t DocumentUnderstanding_ClientInterface_Response.documentCategories.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_Response() + 36);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v3, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(a1, v3, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse);
  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

void (*DocumentUnderstanding_ClientInterface_Response.documentCategories.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse();
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_Response() + 36);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = MEMORY[0x24BEE4AF8];
    UnknownStorage.init()();
    v11 = (char *)v9 + *(int *)(v6 + 24);
    v12 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?);
  }
  else
  {
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v5, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse);
  }
  return DocumentUnderstanding_ClientInterface_Response.documentCategories.modify;
}

void DocumentUnderstanding_ClientInterface_Response.documentCategories.modify(uint64_t a1, char a2)
{
  DocumentUnderstanding_ClientInterface_Response.topics.modify(a1, a2, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse);
}

BOOL DocumentUnderstanding_ClientInterface_Response.hasDocumentCategories.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_Response();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + *(int *)(v4 + 36), (uint64_t)v3, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?);
  v5 = type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse();
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v3, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?);
  return v6;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_Response.clearDocumentCategories()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_Response() + 36);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v1, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?);
  v2 = type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t DocumentUnderstanding_ClientInterface_Response.foundInEventResult.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DocumentUnderstanding_ClientInterface_Response();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v1 + *(int *)(v6 + 40), (uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
  v7 = type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v5, a1, type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult);
  UnknownStorage.init()();
  v8 = *(int *)(v7 + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a1 + v8) = static DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.defaultInstance;
  swift_retain();
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_Response.foundInEventResult : DocumentUnderstanding_ClientInterface_Response@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DocumentUnderstanding_ClientInterface_Response();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(a1 + *(int *)(v7 + 40), (uint64_t)v6, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
  v8 = type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v6, a2, type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult);
  UnknownStorage.init()();
  v9 = *(int *)(v8 + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a2 + v9) = static DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.defaultInstance;
  swift_retain();
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v6, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_Response.foundInEventResult : DocumentUnderstanding_ClientInterface_Response(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(a1, (uint64_t)v7, type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult);
  v8 = a2 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_Response() + 40);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v8, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v7, v8, type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t DocumentUnderstanding_ClientInterface_Response.foundInEventResult.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_Response() + 40);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v3, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(a1, v3, type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult);
  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

void (*DocumentUnderstanding_ClientInterface_Response.foundInEventResult.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_Response() + 40);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = *(int *)(v6 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)&v9[v11] = static DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
  }
  else
  {
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v5, (uint64_t)v9, type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult);
  }
  return DocumentUnderstanding_ClientInterface_Response.foundInEventResult.modify;
}

void DocumentUnderstanding_ClientInterface_Response.foundInEventResult.modify(uint64_t a1, char a2)
{
  DocumentUnderstanding_ClientInterface_Response.topics.modify(a1, a2, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?, type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult);
}

BOOL DocumentUnderstanding_ClientInterface_Response.hasFoundInEventResult.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_Response();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + *(int *)(v4 + 40), (uint64_t)v3, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
  v5 = type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0);
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v3, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
  return v6;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_Response.clearFoundInEventResult()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_Response() + 40);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v1, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
  v2 = type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t DocumentUnderstanding_ClientInterface_Response.responseDebugInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DocumentUnderstanding_ClientInterface_Response();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v1 + *(int *)(v6 + 44), (uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  v7 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v5, a1, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
  UnknownStorage.init()();
  v8 = (_QWORD *)(a1 + *(int *)(v7 + 20));
  *v8 = 0;
  v8[1] = 0;
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_Response.responseDebugInfo : DocumentUnderstanding_ClientInterface_Response@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DocumentUnderstanding_ClientInterface_Response();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(a1 + *(int *)(v7 + 44), (uint64_t)v6, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  v8 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v6, a2, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
  UnknownStorage.init()();
  v9 = (_QWORD *)(a2 + *(int *)(v8 + 20));
  *v9 = 0;
  v9[1] = 0;
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v6, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_Response.responseDebugInfo : DocumentUnderstanding_ClientInterface_Response(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(a1, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
  v8 = a2 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_Response() + 44);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v8, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v7, v8, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t DocumentUnderstanding_ClientInterface_Response.responseDebugInfo.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_Response() + 44);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v3, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(a1, v3, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

void (*DocumentUnderstanding_ClientInterface_Response.responseDebugInfo.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_Response() + 44);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_QWORD *)v11 = 0;
    *((_QWORD *)v11 + 1) = 0;
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  }
  else
  {
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v5, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
  }
  return DocumentUnderstanding_ClientInterface_Response.responseDebugInfo.modify;
}

void DocumentUnderstanding_ClientInterface_Response.responseDebugInfo.modify(uint64_t a1, char a2)
{
  DocumentUnderstanding_ClientInterface_Response.topics.modify(a1, a2, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
}

BOOL DocumentUnderstanding_ClientInterface_Response.hasResponseDebugInfo.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_Response();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + *(int *)(v4 + 44), (uint64_t)v3, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  v5 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v3, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  return v6;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_Response.clearResponseDebugInfo()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_Response() + 44);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v1, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  v2 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t DocumentUnderstanding_ClientInterface_Response.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t DocumentUnderstanding_ClientInterface_Response.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*DocumentUnderstanding_ClientInterface_Response.unknownFields.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DocumentUnderstanding_ClientInterface_Response.init()@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for DocumentUnderstanding_ClientInterface_Response();
  v3 = a1 + v2[5];
  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = a1 + v2[6];
  v6 = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = a1 + v2[7];
  v8 = type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = a1 + v2[8];
  v10 = type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = a1 + v2[9];
  v12 = type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = a1 + v2[10];
  v14 = type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  v15 = a1 + v2[11];
  v16 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
}

void *DocumentUnderstanding_ClientInterface_Response.protoMessageName.unsafeMutableAddressor()
{
  return &static DocumentUnderstanding_ClientInterface_Response.protoMessageName;
}

unint64_t static DocumentUnderstanding_ClientInterface_Response.protoMessageName.getter()
{
  return 0xD000000000000030;
}

uint64_t DocumentUnderstanding_ClientInterface_Response._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static DocumentUnderstanding_ClientInterface_Response._protobuf_nameMap);
}

uint64_t static DocumentUnderstanding_ClientInterface_Response._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v2 = type metadata accessor for _NameMap();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static DocumentUnderstanding_ClientInterface_Response._protobuf_nameMap);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t DocumentUnderstanding_ClientInterface_Response.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          closure #1 in DocumentUnderstanding_ClientInterface_Response.decodeMessage<A>(decoder:)();
          break;
        case 2:
          closure #2 in DocumentUnderstanding_ClientInterface_Response.decodeMessage<A>(decoder:)();
          break;
        case 3:
          closure #3 in DocumentUnderstanding_ClientInterface_Response.decodeMessage<A>(decoder:)();
          break;
        case 5:
          closure #4 in DocumentUnderstanding_ClientInterface_Response.decodeMessage<A>(decoder:)();
          break;
        case 6:
          closure #5 in DocumentUnderstanding_ClientInterface_Response.decodeMessage<A>(decoder:)();
          break;
        case 7:
          closure #6 in DocumentUnderstanding_ClientInterface_Response.decodeMessage<A>(decoder:)();
          break;
        case 8:
          closure #7 in DocumentUnderstanding_ClientInterface_Response.decodeMessage<A>(decoder:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in DocumentUnderstanding_ClientInterface_Response.decodeMessage<A>(decoder:)()
{
  type metadata accessor for DocumentUnderstanding_ClientInterface_Response();
  type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse();
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_TopicDetectionResponse and conformance DocumentUnderstanding_ClientInterface_TopicDetectionResponse, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #2 in DocumentUnderstanding_ClientInterface_Response.decodeMessage<A>(decoder:)()
{
  type metadata accessor for DocumentUnderstanding_ClientInterface_Response();
  type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse();
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_StructuredEntityResponse and conformance DocumentUnderstanding_ClientInterface_StructuredEntityResponse, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #3 in DocumentUnderstanding_ClientInterface_Response.decodeMessage<A>(decoder:)()
{
  type metadata accessor for DocumentUnderstanding_ClientInterface_Response();
  type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_DebugInfo and conformance DocumentUnderstanding_ClientInterface_DebugInfo, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_DebugInfo);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #4 in DocumentUnderstanding_ClientInterface_Response.decodeMessage<A>(decoder:)()
{
  type metadata accessor for DocumentUnderstanding_ClientInterface_Response();
  type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse();
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_LanguageTaggingResponse and conformance DocumentUnderstanding_ClientInterface_LanguageTaggingResponse, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #5 in DocumentUnderstanding_ClientInterface_Response.decodeMessage<A>(decoder:)()
{
  type metadata accessor for DocumentUnderstanding_ClientInterface_Response();
  type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse();
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse and conformance DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #6 in DocumentUnderstanding_ClientInterface_Response.decodeMessage<A>(decoder:)()
{
  type metadata accessor for DocumentUnderstanding_ClientInterface_Response();
  type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse();
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_CategoryClassificationResponse and conformance DocumentUnderstanding_ClientInterface_CategoryClassificationResponse, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #7 in DocumentUnderstanding_ClientInterface_Response.decodeMessage<A>(decoder:)()
{
  type metadata accessor for DocumentUnderstanding_ClientInterface_Response();
  type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0);
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_FoundInEventResult and conformance DocumentUnderstanding_ClientInterface_FoundInEventResult, type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_FoundInEventResult);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t DocumentUnderstanding_ClientInterface_Response.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in DocumentUnderstanding_ClientInterface_Response.traverse<A>(visitor:)(v3, a1, a2, a3);
  if (!v4)
  {
    closure #2 in DocumentUnderstanding_ClientInterface_Response.traverse<A>(visitor:)(v3, a1, a2, a3);
    closure #3 in DocumentUnderstanding_ClientInterface_Response.traverse<A>(visitor:)(v3, a1, a2, a3);
    closure #4 in DocumentUnderstanding_ClientInterface_Response.traverse<A>(visitor:)(v3, a1, a2, a3);
    closure #5 in DocumentUnderstanding_ClientInterface_Response.traverse<A>(visitor:)(v3, a1, a2, a3);
    closure #6 in DocumentUnderstanding_ClientInterface_Response.traverse<A>(visitor:)(v3, a1, a2, a3);
    closure #7 in DocumentUnderstanding_ClientInterface_Response.traverse<A>(visitor:)(v3, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in DocumentUnderstanding_ClientInterface_Response.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DocumentUnderstanding_ClientInterface_Response();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(a1 + *(int *)(v12 + 20), (uint64_t)v7, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v7, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v7, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse);
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_TopicDetectionResponse and conformance DocumentUnderstanding_ClientInterface_TopicDetectionResponse, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse);
}

uint64_t closure #2 in DocumentUnderstanding_ClientInterface_Response.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DocumentUnderstanding_ClientInterface_Response();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v7, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v7, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse);
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_StructuredEntityResponse and conformance DocumentUnderstanding_ClientInterface_StructuredEntityResponse, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse);
}

uint64_t closure #3 in DocumentUnderstanding_ClientInterface_Response.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DocumentUnderstanding_ClientInterface_Response();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(a1 + *(int *)(v12 + 44), (uint64_t)v7, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v7, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v7, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_DebugInfo and conformance DocumentUnderstanding_ClientInterface_DebugInfo, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_DebugInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
}

uint64_t closure #4 in DocumentUnderstanding_ClientInterface_Response.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DocumentUnderstanding_ClientInterface_Response();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v7, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v7, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse);
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_LanguageTaggingResponse and conformance DocumentUnderstanding_ClientInterface_LanguageTaggingResponse, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse);
}

uint64_t closure #5 in DocumentUnderstanding_ClientInterface_Response.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DocumentUnderstanding_ClientInterface_Response();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(a1 + *(int *)(v12 + 32), (uint64_t)v7, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v7, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v7, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse);
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse and conformance DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse);
}

uint64_t closure #6 in DocumentUnderstanding_ClientInterface_Response.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DocumentUnderstanding_ClientInterface_Response();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(a1 + *(int *)(v12 + 36), (uint64_t)v7, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v7, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v7, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse);
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_CategoryClassificationResponse and conformance DocumentUnderstanding_ClientInterface_CategoryClassificationResponse, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse);
}

uint64_t closure #7 in DocumentUnderstanding_ClientInterface_Response.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DocumentUnderstanding_ClientInterface_Response();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(a1 + *(int *)(v12 + 40), (uint64_t)v7, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v7, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v7, (uint64_t)v11, type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult);
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_FoundInEventResult and conformance DocumentUnderstanding_ClientInterface_FoundInEventResult, type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_FoundInEventResult);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v11, type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult);
}

Swift::Int DocumentUnderstanding_ClientInterface_Response.hashValue.getter()
{
  Hasher.init(_seed:)();
  type metadata accessor for DocumentUnderstanding_ClientInterface_Response();
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_Response and conformance DocumentUnderstanding_ClientInterface_Response, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_Response, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_Response);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Message.init() in conformance DocumentUnderstanding_ClientInterface_Response@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  UnknownStorage.init()();
  v4 = a2 + a1[5];
  v5 = type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = a2 + a1[6];
  v7 = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = a2 + a1[7];
  v9 = type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = a2 + a1[8];
  v11 = type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v12 = a2 + a1[9];
  v13 = type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v14 = a2 + a1[10];
  v15 = type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  v16 = a2 + a1[11];
  v17 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance DocumentUnderstanding_ClientInterface_Response()
{
  return 0xD000000000000030;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance DocumentUnderstanding_ClientInterface_Response()
{
  return DocumentUnderstanding_ClientInterface_Response.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance DocumentUnderstanding_ClientInterface_Response(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return DocumentUnderstanding_ClientInterface_Response.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance DocumentUnderstanding_ClientInterface_Response()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_Response and conformance DocumentUnderstanding_ClientInterface_Response, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_Response, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_Response);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DocumentUnderstanding_ClientInterface_Response@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v2 = type metadata accessor for _NameMap();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static DocumentUnderstanding_ClientInterface_Response._protobuf_nameMap);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DocumentUnderstanding_ClientInterface_Response()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_Response and conformance DocumentUnderstanding_ClientInterface_Response, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_Response, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_Response);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DocumentUnderstanding_ClientInterface_Response()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_Response and conformance DocumentUnderstanding_ClientInterface_Response, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_Response, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_Response);
  return Message.hash(into:)();
}

uint64_t specialized static DocumentUnderstanding_ClientInterface_Response.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int (*v72)(uint64_t, uint64_t, uint64_t);
  uint64_t *v73;
  uint64_t v74;
  char v75;
  int *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t (*v83)(uint64_t, uint64_t, uint64_t);
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD **v88;
  uint64_t v89;
  uint64_t *v90;
  int v91;
  uint64_t *v92;
  int *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int (*v100)(uint64_t, uint64_t, uint64_t);
  char v101;
  _QWORD **v103;
  char v104;
  int *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int (*v111)(uint64_t, uint64_t, uint64_t);
  uint64_t *v112;
  uint64_t *v113;
  char v114;
  int *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int (*v120)(uint64_t, uint64_t, uint64_t);
  uint64_t v121;
  uint64_t *v122;
  uint64_t *v123;
  char v124;
  int *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int (*v130)(uint64_t, uint64_t, uint64_t);
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int (*v140)(uint64_t, uint64_t, uint64_t);
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  uint64_t v145;
  void (*v146)(char *, uint64_t, uint64_t);
  char *v147;
  uint64_t v148;
  char *v149;
  void (*v150)(char *, uint64_t);
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  _QWORD **v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  int *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;

  v204 = a1;
  v205 = a2;
  v155 = type metadata accessor for UnknownStorage();
  v154 = *(_QWORD *)(v155 - 8);
  v2 = MEMORY[0x24BDAC7A8](v155);
  v153 = (char *)&v151 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v2);
  v152 = (char *)&v151 - v4;
  v160 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v159 = *(_QWORD *)(v160 - 8);
  MEMORY[0x24BDAC7A8](v160);
  v151 = (uint64_t)&v151 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v158 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DocumentUnderstanding_ClientInterface_DebugInfo?, DocumentUnderstanding_ClientInterface_DebugInfo?));
  MEMORY[0x24BDAC7A8](v158);
  v164 = (char *)&v151 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v156 = (uint64_t)&v151 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v162 = (uint64_t)&v151 - v11;
  MEMORY[0x24BDAC7A8](v10);
  v163 = (uint64_t)&v151 - v12;
  v168 = type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0);
  v167 = *(_QWORD *)(v168 - 8);
  MEMORY[0x24BDAC7A8](v168);
  v157 = (uint64_t)&v151 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v166 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DocumentUnderstanding_ClientInterface_FoundInEventResult?, DocumentUnderstanding_ClientInterface_FoundInEventResult?));
  MEMORY[0x24BDAC7A8](v166);
  v172 = (uint64_t)&v151 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v161 = (uint64_t)&v151 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v170 = (uint64_t)&v151 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v171 = (uint64_t)&v151 - v20;
  v176 = type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse();
  v175 = *(_QWORD *)(v176 - 8);
  MEMORY[0x24BDAC7A8](v176);
  v165 = (uint64_t *)((char *)&v151 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v174 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?, DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?));
  MEMORY[0x24BDAC7A8](v174);
  v180 = (char *)&v151 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?);
  v24 = MEMORY[0x24BDAC7A8](v23);
  v169 = (uint64_t *)((char *)&v151 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  v26 = MEMORY[0x24BDAC7A8](v24);
  v178 = (uint64_t)&v151 - v27;
  MEMORY[0x24BDAC7A8](v26);
  v179 = (uint64_t)&v151 - v28;
  v193 = type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse();
  v183 = *(_QWORD *)(v193 - 8);
  MEMORY[0x24BDAC7A8](v193);
  v173 = (uint64_t *)((char *)&v151 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  v182 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?, DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?));
  MEMORY[0x24BDAC7A8](v182);
  v184 = (char *)&v151 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?);
  v32 = MEMORY[0x24BDAC7A8](v31);
  v177 = (uint64_t *)((char *)&v151 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  v34 = MEMORY[0x24BDAC7A8](v32);
  v185 = (uint64_t)&v151 - v35;
  MEMORY[0x24BDAC7A8](v34);
  v194 = (uint64_t)&v151 - v36;
  v37 = type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse();
  v188 = *(_QWORD *)(v37 - 8);
  v189 = v37;
  MEMORY[0x24BDAC7A8](v37);
  v181 = (_QWORD **)((char *)&v151 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0));
  v187 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?, DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?));
  MEMORY[0x24BDAC7A8](v187);
  v196 = (char *)&v151 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?);
  v41 = MEMORY[0x24BDAC7A8](v40);
  v195 = (char *)&v151 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = MEMORY[0x24BDAC7A8](v41);
  v191 = (uint64_t)&v151 - v44;
  MEMORY[0x24BDAC7A8](v43);
  v192 = (uint64_t)&v151 - v45;
  v201 = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse();
  v198 = *(_QWORD *)(v201 - 8);
  MEMORY[0x24BDAC7A8](v201);
  v186 = (uint64_t *)((char *)&v151 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0));
  v197 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DocumentUnderstanding_ClientInterface_StructuredEntityResponse?, DocumentUnderstanding_ClientInterface_StructuredEntityResponse?));
  MEMORY[0x24BDAC7A8](v197);
  v203 = (uint64_t)&v151 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?);
  v49 = MEMORY[0x24BDAC7A8](v48);
  v190 = (uint64_t *)((char *)&v151 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0));
  v51 = MEMORY[0x24BDAC7A8](v49);
  v199 = (uint64_t)&v151 - v52;
  MEMORY[0x24BDAC7A8](v51);
  v200 = (uint64_t)&v151 - v53;
  v54 = type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse();
  v55 = *(_QWORD *)(v54 - 8);
  MEMORY[0x24BDAC7A8](v54);
  v57 = (uint64_t *)((char *)&v151 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0));
  v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DocumentUnderstanding_ClientInterface_TopicDetectionResponse?, DocumentUnderstanding_ClientInterface_TopicDetectionResponse?));
  MEMORY[0x24BDAC7A8](v58);
  v60 = (char *)&v151 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?);
  v62 = MEMORY[0x24BDAC7A8](v61);
  v64 = (uint64_t *)((char *)&v151 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0));
  v65 = MEMORY[0x24BDAC7A8](v62);
  v67 = (char *)&v151 - v66;
  MEMORY[0x24BDAC7A8](v65);
  v69 = (char *)&v151 - v68;
  v70 = type metadata accessor for DocumentUnderstanding_ClientInterface_Response();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v204 + *(int *)(v70 + 20), (uint64_t)v69, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?);
  v202 = (int *)v70;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v205 + *(int *)(v70 + 20), (uint64_t)v67, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?);
  v71 = (uint64_t)&v60[*(int *)(v58 + 48)];
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v69, (uint64_t)v60, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?);
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v67, v71, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?);
  v72 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48);
  if (v72((uint64_t)v60, 1, v54) == 1)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v67, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v69, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?);
    if (v72(v71, 1, v54) == 1)
    {
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v60, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?);
      goto LABEL_9;
    }
LABEL_6:
    v73 = &demangling cache variable for type metadata for (DocumentUnderstanding_ClientInterface_TopicDetectionResponse?, DocumentUnderstanding_ClientInterface_TopicDetectionResponse?);
LABEL_7:
    v74 = (uint64_t)v60;
LABEL_22:
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v74, v73);
    goto LABEL_23;
  }
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v60, (uint64_t)v64, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?);
  if (v72(v71, 1, v54) == 1)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v67, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v69, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v64, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse);
    goto LABEL_6;
  }
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v71, (uint64_t)v57, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse);
  v75 = specialized static DocumentUnderstanding_ClientInterface_TopicDetectionResponse.== infix(_:_:)(v64, v57);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v57, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v67, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v69, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v64, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v60, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?);
  if ((v75 & 1) == 0)
    goto LABEL_23;
LABEL_9:
  v76 = v202;
  v77 = v204;
  v78 = v200;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v204 + v202[6], v200, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?);
  v79 = v205;
  v80 = v199;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v205 + v76[6], v199, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?);
  v81 = v203;
  v82 = v203 + *(int *)(v197 + 48);
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v78, v203, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?);
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v80, v82, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?);
  v83 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v198 + 48);
  v84 = v201;
  if (v83(v81, 1, v201) == 1)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v80, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v78, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?);
    v85 = v83(v82, 1, v84);
    v86 = v193;
    v87 = v194;
    v88 = (_QWORD **)v195;
    v89 = (uint64_t)v196;
    if (v85 == 1)
    {
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v203, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?);
      goto LABEL_16;
    }
LABEL_14:
    v73 = &demangling cache variable for type metadata for (DocumentUnderstanding_ClientInterface_StructuredEntityResponse?, DocumentUnderstanding_ClientInterface_StructuredEntityResponse?);
    v74 = v203;
    goto LABEL_22;
  }
  v90 = v190;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v81, (uint64_t)v190, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?);
  v91 = v83(v82, 1, v84);
  v88 = (_QWORD **)v195;
  v89 = (uint64_t)v196;
  if (v91 == 1)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v80, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v78, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v90, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse);
    goto LABEL_14;
  }
  v92 = v186;
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v82, (uint64_t)v186, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse);
  LODWORD(v201) = specialized static DocumentUnderstanding_ClientInterface_StructuredEntityResponse.== infix(_:_:)(v90, v92);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v92, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v80, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v78, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v90, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v81, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?);
  v86 = v193;
  v87 = v194;
  if ((v201 & 1) == 0)
    goto LABEL_23;
LABEL_16:
  v93 = v202;
  v94 = v77 + v202[7];
  v95 = v192;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v94, v192, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?);
  v96 = v79 + v93[7];
  v97 = v191;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v96, v191, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?);
  v98 = v89 + *(int *)(v187 + 48);
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v95, v89, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?);
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v97, v98, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?);
  v99 = v189;
  v100 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v188 + 48);
  if (v100(v89, 1, v189) == 1)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v97, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v95, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?);
    if (v100(v98, 1, v99) == 1)
    {
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v89, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?);
      goto LABEL_26;
    }
LABEL_21:
    v73 = &demangling cache variable for type metadata for (DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?, DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?);
    v74 = v89;
    goto LABEL_22;
  }
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v89, (uint64_t)v88, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?);
  if (v100(v98, 1, v99) == 1)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v191, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v192, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v88, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse);
    goto LABEL_21;
  }
  v103 = v181;
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v98, (uint64_t)v181, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse);
  v104 = specialized static DocumentUnderstanding_ClientInterface_LanguageTaggingResponse.== infix(_:_:)(v88, v103);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v103, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v191, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v192, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v88, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v89, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?);
  if ((v104 & 1) == 0)
    goto LABEL_23;
LABEL_26:
  v105 = v202;
  v106 = v204;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v204 + v202[8], v87, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?);
  v107 = v205;
  v108 = v185;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v205 + v105[8], v185, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?);
  v109 = (uint64_t)v184;
  v110 = (uint64_t)&v184[*(int *)(v182 + 48)];
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v87, (uint64_t)v184, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?);
  v60 = (char *)v109;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v108, v110, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?);
  v111 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v183 + 48);
  if (v111((uint64_t)v60, 1, v86) == 1)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v108, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?);
    v60 = v184;
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v87, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?);
    if (v111(v110, 1, v86) == 1)
    {
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v60, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?);
      goto LABEL_33;
    }
    goto LABEL_31;
  }
  v112 = v177;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v60, (uint64_t)v177, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?);
  if (v111(v110, 1, v86) == 1)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v185, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v194, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v112, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse);
LABEL_31:
    v73 = &demangling cache variable for type metadata for (DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?, DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?);
    goto LABEL_7;
  }
  v113 = v173;
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v110, (uint64_t)v173, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse);
  v114 = specialized static DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse.== infix(_:_:)(v112, v113);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v113, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v185, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v194, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v112, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v60, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?);
  if ((v114 & 1) == 0)
    goto LABEL_23;
LABEL_33:
  v115 = v202;
  v116 = v179;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v106 + v202[9], v179, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?);
  v117 = v178;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v107 + v115[9], v178, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?);
  v118 = (uint64_t)v180;
  v119 = (uint64_t)&v180[*(int *)(v174 + 48)];
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v116, (uint64_t)v180, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?);
  v60 = (char *)v118;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v117, v119, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?);
  v120 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v175 + 48);
  v121 = v176;
  if (v120((uint64_t)v60, 1, v176) == 1)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v117, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?);
    v60 = v180;
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v116, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?);
    if (v120(v119, 1, v121) == 1)
    {
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v60, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?);
      goto LABEL_40;
    }
    goto LABEL_38;
  }
  v122 = v169;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v60, (uint64_t)v169, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?);
  if (v120(v119, 1, v121) == 1)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v178, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v179, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v122, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse);
LABEL_38:
    v73 = &demangling cache variable for type metadata for (DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?, DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?);
    goto LABEL_7;
  }
  v123 = v165;
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v119, (uint64_t)v165, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse);
  v124 = specialized static DocumentUnderstanding_ClientInterface_CategoryClassificationResponse.== infix(_:_:)(v122, v123);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v123, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v178, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v179, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v122, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v60, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?);
  if ((v124 & 1) == 0)
    goto LABEL_23;
LABEL_40:
  v125 = v202;
  v126 = v171;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v106 + v202[10], v171, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
  v127 = v170;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v107 + v125[10], v170, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
  v128 = v172;
  v129 = v172 + *(int *)(v166 + 48);
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v126, v172, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v127, v129, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
  v130 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v167 + 48);
  v131 = v168;
  if (v130(v128, 1, v168) != 1)
  {
    v132 = v161;
    outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v128, v161, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
    if (v130(v129, 1, v131) != 1)
    {
      v133 = v157;
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v129, v157, type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult);
      v134 = specialized static DocumentUnderstanding_ClientInterface_FoundInEventResult.== infix(_:_:)(v132, v133);
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v133, type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult);
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v170, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v171, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v132, type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult);
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v128, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
      if ((v134 & 1) == 0)
        goto LABEL_23;
      goto LABEL_47;
    }
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v170, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v171, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v132, type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult);
LABEL_45:
    v73 = &demangling cache variable for type metadata for (DocumentUnderstanding_ClientInterface_FoundInEventResult?, DocumentUnderstanding_ClientInterface_FoundInEventResult?);
    v74 = v128;
    goto LABEL_22;
  }
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v127, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
  v128 = v172;
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v126, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
  if (v130(v129, 1, v131) != 1)
    goto LABEL_45;
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v128, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
LABEL_47:
  v135 = v163;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v106 + v125[11], v163, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  v136 = v107 + v125[11];
  v137 = v162;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v136, v162, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  v138 = (uint64_t)v164;
  v139 = (uint64_t)&v164[*(int *)(v158 + 48)];
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v135, (uint64_t)v164, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  v60 = (char *)v138;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v137, v139, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  v140 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v159 + 48);
  v141 = v160;
  if (v140((uint64_t)v60, 1, v160) == 1)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v137, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    v60 = v164;
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v135, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    if (v140(v139, 1, v141) == 1)
    {
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v60, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
LABEL_54:
      v145 = v154;
      v146 = *(void (**)(char *, uint64_t, uint64_t))(v154 + 16);
      v147 = v152;
      v148 = v155;
      v146(v152, v106, v155);
      v149 = v153;
      v146(v153, v107, v148);
      lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v101 = dispatch thunk of static Equatable.== infix(_:_:)();
      v150 = *(void (**)(char *, uint64_t))(v145 + 8);
      v150(v149, v148);
      v150(v147, v148);
      return v101 & 1;
    }
    goto LABEL_52;
  }
  v142 = v156;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v60, v156, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  if (v140(v139, 1, v141) == 1)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v162, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v163, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v142, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
LABEL_52:
    v73 = &demangling cache variable for type metadata for (DocumentUnderstanding_ClientInterface_DebugInfo?, DocumentUnderstanding_ClientInterface_DebugInfo?);
    goto LABEL_7;
  }
  v143 = v151;
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v139, v151, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
  v144 = specialized static DocumentUnderstanding_ClientInterface_DebugInfo.== infix(_:_:)(v142, v143);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v143, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v162, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v163, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v142, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v60, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  if ((v144 & 1) != 0)
    goto LABEL_54;
LABEL_23:
  v101 = 0;
  return v101 & 1;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in DocumentUnderstanding_ClientInterface_Response()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_Response and conformance DocumentUnderstanding_ClientInterface_Response, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_Response, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_Response);
}

uint64_t base witness table accessor for Message in DocumentUnderstanding_ClientInterface_Response()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_Response and conformance DocumentUnderstanding_ClientInterface_Response, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_Response, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_Response);
}

uint64_t base witness table accessor for Hashable in DocumentUnderstanding_ClientInterface_Response()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_Response and conformance DocumentUnderstanding_ClientInterface_Response, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_Response, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_Response);
}

uint64_t base witness table accessor for Equatable in DocumentUnderstanding_ClientInterface_Response()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_Response and conformance DocumentUnderstanding_ClientInterface_Response, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_Response, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_Response);
}

char *initializeBufferWithCopyOfBuffer for DocumentUnderstanding_ClientInterface_Response(char *a1, char *a2, int *a3)
{
  char *v3;
  int v5;
  int *v6;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  void (*v50)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  void (*v70)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  void (*v90)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(char *, char *, uint64_t);
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  void (*v111)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void (*v118)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  void (*v129)(char *, _QWORD, uint64_t, uint64_t);
  int *v131;
  char *v132;
  uint64_t v133;

  v3 = a2;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = a3;
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, v3, v7);
    v9 = v6[5];
    v10 = &a1[v9];
    v11 = &v3[v9];
    v12 = type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse();
    v13 = *(_QWORD *)(v12 - 8);
    v133 = v7;
    v132 = v3;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v131 = v6;
      v16 = *((_QWORD *)v11 + 1);
      *(_QWORD *)v10 = *(_QWORD *)v11;
      *((_QWORD *)v10 + 1) = v16;
      v17 = *(int *)(v12 + 24);
      v18 = &v10[v17];
      v19 = &v11[v17];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v8(v18, v19, v7);
      v20 = *(int *)(v12 + 28);
      v21 = &v10[v20];
      v22 = &v11[v20];
      v23 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
      v24 = *(_QWORD *)(v23 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
      {
        v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
        memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      }
      else
      {
        v8(v21, v22, v133);
        v26 = *(int *)(v23 + 20);
        v27 = &v21[v26];
        v28 = &v22[v26];
        v29 = *((_QWORD *)v28 + 1);
        *(_QWORD *)v27 = *(_QWORD *)v28;
        *((_QWORD *)v27 + 1) = v29;
        v30 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56);
        swift_bridgeObjectRetain();
        v30(v21, 0, 1, v23);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      v7 = v133;
      v6 = v131;
      v3 = v132;
    }
    v31 = v6[6];
    v32 = &a1[v31];
    v33 = &v3[v31];
    v34 = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse();
    v35 = *(_QWORD *)(v34 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
    {
      v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v32 = *(_QWORD *)v33;
      v37 = *(int *)(v34 + 20);
      v38 = &v32[v37];
      v39 = &v33[v37];
      swift_bridgeObjectRetain();
      v8(v38, v39, v7);
      v40 = *(int *)(v34 + 24);
      v41 = &v32[v40];
      v42 = &v33[v40];
      v43 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
      v44 = *(_QWORD *)(v43 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
      {
        v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
        memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
      }
      else
      {
        v8(v41, v42, v133);
        v46 = *(int *)(v43 + 20);
        v47 = &v41[v46];
        v48 = &v42[v46];
        v49 = *((_QWORD *)v48 + 1);
        *(_QWORD *)v47 = *(_QWORD *)v48;
        *((_QWORD *)v47 + 1) = v49;
        v50 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56);
        swift_bridgeObjectRetain();
        v50(v41, 0, 1, v43);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
      v7 = v133;
      v3 = v132;
    }
    v51 = v6[7];
    v52 = &a1[v51];
    v53 = &v3[v51];
    v54 = type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse();
    v55 = *(_QWORD *)(v54 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
    {
      v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?);
      memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v52 = *(_QWORD *)v53;
      v57 = *(int *)(v54 + 20);
      v58 = &v52[v57];
      v59 = &v53[v57];
      swift_bridgeObjectRetain();
      v8(v58, v59, v7);
      v60 = *(int *)(v54 + 24);
      v61 = &v52[v60];
      v62 = &v53[v60];
      v63 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
      v64 = *(_QWORD *)(v63 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63))
      {
        v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
        memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
      }
      else
      {
        v8(v61, v62, v133);
        v66 = *(int *)(v63 + 20);
        v67 = &v61[v66];
        v68 = &v62[v66];
        v69 = *((_QWORD *)v68 + 1);
        *(_QWORD *)v67 = *(_QWORD *)v68;
        *((_QWORD *)v67 + 1) = v69;
        v70 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v64 + 56);
        swift_bridgeObjectRetain();
        v70(v61, 0, 1, v63);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
      v7 = v133;
      v3 = v132;
    }
    v71 = v6[8];
    v72 = &a1[v71];
    v73 = &v3[v71];
    v74 = type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse();
    v75 = *(_QWORD *)(v74 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v73, 1, v74))
    {
      v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?);
      memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v72 = *(_QWORD *)v73;
      v77 = *(int *)(v74 + 20);
      v78 = &v72[v77];
      v79 = &v73[v77];
      swift_bridgeObjectRetain();
      v8(v78, v79, v7);
      v80 = *(int *)(v74 + 24);
      v81 = &v72[v80];
      v82 = &v73[v80];
      v83 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
      v84 = *(_QWORD *)(v83 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v84 + 48))(v82, 1, v83))
      {
        v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
        memcpy(v81, v82, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
      }
      else
      {
        v8(v81, v82, v133);
        v86 = *(int *)(v83 + 20);
        v87 = &v81[v86];
        v88 = &v82[v86];
        v89 = *((_QWORD *)v88 + 1);
        *(_QWORD *)v87 = *(_QWORD *)v88;
        *((_QWORD *)v87 + 1) = v89;
        v90 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v84 + 56);
        swift_bridgeObjectRetain();
        v90(v81, 0, 1, v83);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v75 + 56))(v72, 0, 1, v74);
      v7 = v133;
      v3 = v132;
    }
    v91 = v6[9];
    v92 = &a1[v91];
    v93 = &v3[v91];
    v94 = type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse();
    v95 = *(_QWORD *)(v94 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v95 + 48))(v93, 1, v94))
    {
      v96 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?);
      memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v96 - 8) + 64));
      v97 = v8;
    }
    else
    {
      *(_QWORD *)v92 = *(_QWORD *)v93;
      v98 = *(int *)(v94 + 20);
      v99 = &v92[v98];
      v100 = &v93[v98];
      swift_bridgeObjectRetain();
      v8(v99, v100, v7);
      v101 = *(int *)(v94 + 24);
      v102 = &v92[v101];
      v103 = &v93[v101];
      v104 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
      v105 = *(_QWORD *)(v104 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v105 + 48))(v103, 1, v104))
      {
        v106 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
        memcpy(v102, v103, *(_QWORD *)(*(_QWORD *)(v106 - 8) + 64));
      }
      else
      {
        v8(v102, v103, v133);
        v107 = *(int *)(v104 + 20);
        v108 = &v102[v107];
        v109 = &v103[v107];
        v110 = *((_QWORD *)v109 + 1);
        *(_QWORD *)v108 = *(_QWORD *)v109;
        *((_QWORD *)v108 + 1) = v110;
        v111 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v105 + 56);
        swift_bridgeObjectRetain();
        v111(v102, 0, 1, v104);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v95 + 56))(v92, 0, 1, v94);
      v97 = v8;
      v7 = v133;
      v3 = v132;
    }
    v112 = v6[10];
    v113 = &a1[v112];
    v114 = &v3[v112];
    v115 = type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0);
    v116 = *(_QWORD *)(v115 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v116 + 48))(v114, 1, v115))
    {
      v117 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
      memcpy(v113, v114, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
    }
    else
    {
      v97(v113, v114, v7);
      *(_QWORD *)&v113[*(int *)(v115 + 20)] = *(_QWORD *)&v114[*(int *)(v115 + 20)];
      v118 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v116 + 56);
      swift_retain();
      v118(v113, 0, 1, v115);
    }
    v119 = v6[11];
    v120 = &a1[v119];
    v121 = &v3[v119];
    v122 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
    v123 = *(_QWORD *)(v122 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v123 + 48))(v121, 1, v122))
    {
      v124 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
      memcpy(v120, v121, *(_QWORD *)(*(_QWORD *)(v124 - 8) + 64));
    }
    else
    {
      v97(v120, v121, v7);
      v125 = *(int *)(v122 + 20);
      v126 = &v120[v125];
      v127 = &v121[v125];
      v128 = *((_QWORD *)v127 + 1);
      *(_QWORD *)v126 = *(_QWORD *)v127;
      *((_QWORD *)v126 + 1) = v128;
      v129 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v123 + 56);
      swift_bridgeObjectRetain();
      v129(v120, 0, 1, v122);
    }
  }
  return a1;
}

uint64_t destroy for DocumentUnderstanding_ClientInterface_Response(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = a1 + a2[5];
  v7 = type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v5(v6 + *(int *)(v7 + 24), v4);
    v8 = v6 + *(int *)(v7 + 28);
    v9 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
    {
      v5(v8, v4);
      swift_bridgeObjectRelease();
    }
  }
  v10 = a1 + a2[6];
  v11 = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11))
  {
    swift_bridgeObjectRelease();
    v5(v10 + *(int *)(v11 + 20), v4);
    v12 = v10 + *(int *)(v11 + 24);
    v13 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1, v13))
    {
      v5(v12, v4);
      swift_bridgeObjectRelease();
    }
  }
  v14 = a1 + a2[7];
  v15 = type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
  {
    swift_bridgeObjectRelease();
    v5(v14 + *(int *)(v15 + 20), v4);
    v16 = v14 + *(int *)(v15 + 24);
    v17 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v16, 1, v17))
    {
      v5(v16, v4);
      swift_bridgeObjectRelease();
    }
  }
  v18 = a1 + a2[8];
  v19 = type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48))(v18, 1, v19))
  {
    swift_bridgeObjectRelease();
    v5(v18 + *(int *)(v19 + 20), v4);
    v20 = v18 + *(int *)(v19 + 24);
    v21 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v20, 1, v21))
    {
      v5(v20, v4);
      swift_bridgeObjectRelease();
    }
  }
  v22 = a1 + a2[9];
  v23 = type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 48))(v22, 1, v23))
  {
    swift_bridgeObjectRelease();
    v5(v22 + *(int *)(v23 + 20), v4);
    v24 = v22 + *(int *)(v23 + 24);
    v25 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(v24, 1, v25))
    {
      v5(v24, v4);
      swift_bridgeObjectRelease();
    }
  }
  v26 = a1 + a2[10];
  v27 = type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48))(v26, 1, v27))
  {
    v5(v26, v4);
    swift_release();
  }
  v28 = a1 + a2[11];
  v29 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 48))(v28, 1, v29);
  if (!(_DWORD)result)
  {
    v5(v28, v4);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for DocumentUnderstanding_ClientInterface_Response(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  void (*v52)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  void (*v66)(char *, char *, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  void (*v74)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  void (*v88)(char *, char *, uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  void (*v96)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  void (*v110)(char *, char *, uint64_t);
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  void (*v118)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  void (*v124)(char *, char *, uint64_t);
  uint64_t v125;
  void (*v126)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  void (*v137)(char *, _QWORD, uint64_t, uint64_t);
  int *v139;
  uint64_t v140;
  uint64_t v141;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse();
  v12 = *(_QWORD *)(v11 - 8);
  v140 = a2;
  v141 = v6;
  v139 = a3;
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v14 = v10[1];
    *v9 = *v10;
    v9[1] = v14;
    v15 = *(int *)(v11 + 24);
    v16 = (char *)v9 + v15;
    v17 = (void (*)(char *, char *, uint64_t))v7;
    v18 = v6;
    v19 = (char *)v10 + v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17(v16, v19, v18);
    v20 = *(int *)(v11 + 28);
    v21 = (char *)v9 + v20;
    v22 = (char *)v10 + v20;
    v23 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
    v24 = *(_QWORD *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      v17(v21, v22, v18);
      v26 = *(int *)(v23 + 20);
      v27 = &v21[v26];
      v28 = &v22[v26];
      v29 = *((_QWORD *)v28 + 1);
      *(_QWORD *)v27 = *(_QWORD *)v28;
      *((_QWORD *)v27 + 1) = v29;
      v30 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56);
      swift_bridgeObjectRetain();
      v30(v21, 0, 1, v23);
    }
    v7 = (void (*)(uint64_t, uint64_t, uint64_t))v17;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    a2 = v140;
    v6 = v141;
    a3 = v139;
  }
  v31 = a3[6];
  v32 = (_QWORD *)(a1 + v31);
  v33 = (_QWORD *)(a2 + v31);
  v34 = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse();
  v35 = *(_QWORD *)(v34 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
  {
    v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    *v32 = *v33;
    v37 = *(int *)(v34 + 20);
    v38 = (char *)v32 + v37;
    v39 = (char *)v33 + v37;
    swift_bridgeObjectRetain();
    v7((uint64_t)v38, (uint64_t)v39, v6);
    v40 = *(int *)(v34 + 24);
    v41 = (char *)v32 + v40;
    v42 = (char *)v33 + v40;
    v43 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
    v44 = (void (*)(char *, char *, uint64_t))v7;
    v45 = v6;
    v46 = *(_QWORD *)(v43 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v42, 1, v43))
    {
      v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
      memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    }
    else
    {
      v44(v41, v42, v45);
      v48 = *(int *)(v43 + 20);
      v49 = &v41[v48];
      v50 = &v42[v48];
      v51 = *((_QWORD *)v50 + 1);
      *(_QWORD *)v49 = *(_QWORD *)v50;
      *((_QWORD *)v49 + 1) = v51;
      v52 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56);
      swift_bridgeObjectRetain();
      v52(v41, 0, 1, v43);
    }
    v7 = (void (*)(uint64_t, uint64_t, uint64_t))v44;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
    a2 = v140;
    v6 = v141;
    a3 = v139;
  }
  v53 = a3[7];
  v54 = (_QWORD *)(a1 + v53);
  v55 = (_QWORD *)(a2 + v53);
  v56 = type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse();
  v57 = *(_QWORD *)(v56 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56))
  {
    v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
  }
  else
  {
    *v54 = *v55;
    v59 = *(int *)(v56 + 20);
    v60 = (char *)v54 + v59;
    v61 = (char *)v55 + v59;
    swift_bridgeObjectRetain();
    v7((uint64_t)v60, (uint64_t)v61, v6);
    v62 = *(int *)(v56 + 24);
    v63 = (char *)v54 + v62;
    v64 = (char *)v55 + v62;
    v65 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
    v66 = (void (*)(char *, char *, uint64_t))v7;
    v67 = v6;
    v68 = *(_QWORD *)(v65 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v64, 1, v65))
    {
      v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
      memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
    }
    else
    {
      v66(v63, v64, v67);
      v70 = *(int *)(v65 + 20);
      v71 = &v63[v70];
      v72 = &v64[v70];
      v73 = *((_QWORD *)v72 + 1);
      *(_QWORD *)v71 = *(_QWORD *)v72;
      *((_QWORD *)v71 + 1) = v73;
      v74 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v68 + 56);
      swift_bridgeObjectRetain();
      v74(v63, 0, 1, v65);
    }
    v7 = (void (*)(uint64_t, uint64_t, uint64_t))v66;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
    a2 = v140;
    v6 = v141;
    a3 = v139;
  }
  v75 = a3[8];
  v76 = (_QWORD *)(a1 + v75);
  v77 = (_QWORD *)(a2 + v75);
  v78 = type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse();
  v79 = *(_QWORD *)(v78 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v79 + 48))(v77, 1, v78))
  {
    v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?);
    memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
  }
  else
  {
    *v76 = *v77;
    v81 = *(int *)(v78 + 20);
    v82 = (char *)v76 + v81;
    v83 = (char *)v77 + v81;
    swift_bridgeObjectRetain();
    v7((uint64_t)v82, (uint64_t)v83, v6);
    v84 = *(int *)(v78 + 24);
    v85 = (char *)v76 + v84;
    v86 = (char *)v77 + v84;
    v87 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
    v88 = (void (*)(char *, char *, uint64_t))v7;
    v89 = v6;
    v90 = *(_QWORD *)(v87 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48))(v86, 1, v87))
    {
      v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
      memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
    }
    else
    {
      v88(v85, v86, v89);
      v92 = *(int *)(v87 + 20);
      v93 = &v85[v92];
      v94 = &v86[v92];
      v95 = *((_QWORD *)v94 + 1);
      *(_QWORD *)v93 = *(_QWORD *)v94;
      *((_QWORD *)v93 + 1) = v95;
      v96 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v90 + 56);
      swift_bridgeObjectRetain();
      v96(v85, 0, 1, v87);
    }
    v7 = (void (*)(uint64_t, uint64_t, uint64_t))v88;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v79 + 56))(v76, 0, 1, v78);
    a2 = v140;
    v6 = v141;
    a3 = v139;
  }
  v97 = a3[9];
  v98 = (_QWORD *)(a1 + v97);
  v99 = (_QWORD *)(a2 + v97);
  v100 = type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse();
  v101 = *(_QWORD *)(v100 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v101 + 48))(v99, 1, v100))
  {
    v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?);
    memcpy(v98, v99, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
  }
  else
  {
    *v98 = *v99;
    v103 = *(int *)(v100 + 20);
    v104 = (char *)v98 + v103;
    v105 = (char *)v99 + v103;
    swift_bridgeObjectRetain();
    v7((uint64_t)v104, (uint64_t)v105, v6);
    v106 = *(int *)(v100 + 24);
    v107 = (char *)v98 + v106;
    v108 = (char *)v99 + v106;
    v109 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
    v110 = (void (*)(char *, char *, uint64_t))v7;
    v111 = v6;
    v112 = *(_QWORD *)(v109 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v112 + 48))(v108, 1, v109))
    {
      v113 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
      memcpy(v107, v108, *(_QWORD *)(*(_QWORD *)(v113 - 8) + 64));
    }
    else
    {
      v110(v107, v108, v111);
      v114 = *(int *)(v109 + 20);
      v115 = &v107[v114];
      v116 = &v108[v114];
      v117 = *((_QWORD *)v116 + 1);
      *(_QWORD *)v115 = *(_QWORD *)v116;
      *((_QWORD *)v115 + 1) = v117;
      v118 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v112 + 56);
      swift_bridgeObjectRetain();
      v118(v107, 0, 1, v109);
    }
    v7 = (void (*)(uint64_t, uint64_t, uint64_t))v110;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v101 + 56))(v98, 0, 1, v100);
    a2 = v140;
    v6 = v141;
    a3 = v139;
  }
  v119 = a3[10];
  v120 = (char *)(a1 + v119);
  v121 = (char *)(a2 + v119);
  v122 = type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0);
  v123 = *(_QWORD *)(v122 - 8);
  v124 = (void (*)(char *, char *, uint64_t))v7;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v123 + 48))(v121, 1, v122))
  {
    v125 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
    memcpy(v120, v121, *(_QWORD *)(*(_QWORD *)(v125 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v120, (uint64_t)v121, v6);
    *(_QWORD *)&v120[*(int *)(v122 + 20)] = *(_QWORD *)&v121[*(int *)(v122 + 20)];
    v126 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v123 + 56);
    swift_retain();
    v126(v120, 0, 1, v122);
  }
  v127 = a3[11];
  v128 = (char *)(a1 + v127);
  v129 = (char *)(a2 + v127);
  v130 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v131 = *(_QWORD *)(v130 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v131 + 48))(v129, 1, v130))
  {
    v132 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    memcpy(v128, v129, *(_QWORD *)(*(_QWORD *)(v132 - 8) + 64));
  }
  else
  {
    v124(v128, v129, v6);
    v133 = *(int *)(v130 + 20);
    v134 = &v128[v133];
    v135 = &v129[v133];
    v136 = *((_QWORD *)v135 + 1);
    *(_QWORD *)v134 = *(_QWORD *)v135;
    *((_QWORD *)v134 + 1) = v136;
    v137 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v131 + 56);
    swift_bridgeObjectRetain();
    v137(v128, 0, 1, v130);
  }
  return a1;
}

uint64_t assignWithCopy for DocumentUnderstanding_ClientInterface_Response(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  void *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t);
  int v35;
  int v36;
  uint64_t v37;
  _QWORD *v38;
  char *v39;
  void (*v40)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v41;
  char *v42;
  char *v43;
  void (*v44)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(char *, uint64_t, uint64_t);
  int v51;
  int v52;
  uint64_t v53;
  char *v54;
  char *v55;
  void (*v56)(char *, char *, uint64_t);
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  size_t v64;
  void *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(uint64_t, uint64_t, uint64_t);
  int v73;
  int v74;
  uint64_t v75;
  _QWORD *v76;
  char *v77;
  void (*v78)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v79;
  char *v80;
  char *v81;
  void (*v82)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t (*v88)(char *, uint64_t, uint64_t);
  int v89;
  int v90;
  uint64_t v91;
  char *v92;
  char *v93;
  void (*v94)(char *, char *, uint64_t);
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  size_t v102;
  void *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t (*v110)(uint64_t, uint64_t, uint64_t);
  int v111;
  int v112;
  uint64_t v113;
  _QWORD *v114;
  char *v115;
  void (*v116)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v117;
  char *v118;
  char *v119;
  void (*v120)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t (*v126)(char *, uint64_t, uint64_t);
  int v127;
  int v128;
  uint64_t v129;
  char *v130;
  char *v131;
  void (*v132)(char *, char *, uint64_t);
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  size_t v140;
  void *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t (*v148)(uint64_t, uint64_t, uint64_t);
  int v149;
  int v150;
  uint64_t v151;
  _QWORD *v152;
  char *v153;
  void (*v154)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v155;
  char *v156;
  char *v157;
  void (*v158)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t (*v164)(char *, uint64_t, uint64_t);
  int v165;
  int v166;
  uint64_t v167;
  char *v168;
  char *v169;
  void (*v170)(char *, char *, uint64_t);
  uint64_t v171;
  char *v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  size_t v178;
  void *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t (*v186)(uint64_t, uint64_t, uint64_t);
  int v187;
  int v188;
  uint64_t v189;
  _QWORD *v190;
  char *v191;
  void (*v192)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v193;
  char *v194;
  char *v195;
  void (*v196)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v197;
  char *v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t (*v202)(char *, uint64_t, uint64_t);
  int v203;
  int v204;
  void (*v205)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v206;
  uint64_t v207;
  char *v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t (*v212)(char *, uint64_t, uint64_t);
  int v213;
  int v214;
  uint64_t v215;
  char *v216;
  char *v217;
  void (*v218)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v219;
  uint64_t v221;
  char *v222;
  char *v223;
  uint64_t v224;
  _QWORD *v225;
  char *v226;
  uint64_t v227;
  _QWORD *v228;
  char *v229;
  uint64_t v230;
  _QWORD *v231;
  char *v232;
  uint64_t v233;
  _QWORD *v234;
  char *v235;
  uint64_t v236;
  _QWORD *v237;
  char *v238;
  void (*v239)(uint64_t, uint64_t, uint64_t);
  int *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;

  v6 = type metadata accessor for UnknownStorage();
  v243 = *(_QWORD *)(v6 - 8);
  v239 = *(void (**)(uint64_t, uint64_t, uint64_t))(v243 + 24);
  v239(a1, a2, v6);
  v7 = a3[5];
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  v241 = a2;
  v242 = v6;
  v240 = a3;
  if (!v13)
  {
    if (!v14)
    {
      *(_QWORD *)v8 = *(_QWORD *)v9;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_QWORD *)v8 + 1) = *((_QWORD *)v9 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v239((uint64_t)&v8[*(int *)(v10 + 24)], (uint64_t)&v9[*(int *)(v10 + 24)], v6);
      v29 = *(int *)(v10 + 28);
      v30 = (uint64_t)&v8[v29];
      v31 = &v9[v29];
      v32 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
      v33 = *(_QWORD *)(v32 - 8);
      v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 48);
      v35 = v34(v30, 1, v32);
      v36 = v34((uint64_t)v31, 1, v32);
      if (v35)
      {
        if (!v36)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v243 + 16))(v30, v31, v6);
          v37 = *(int *)(v32 + 20);
          v38 = (_QWORD *)(v30 + v37);
          v39 = &v31[v37];
          *v38 = *(_QWORD *)v39;
          v38[1] = *((_QWORD *)v39 + 1);
          v40 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v33 + 56);
          swift_bridgeObjectRetain();
          v40(v30, 0, 1, v32);
          goto LABEL_14;
        }
      }
      else
      {
        if (!v36)
        {
          v239(v30, (uint64_t)v31, v6);
          v224 = *(int *)(v32 + 20);
          v225 = (_QWORD *)(v30 + v224);
          v226 = &v31[v224];
          *v225 = *(_QWORD *)v226;
          v225[1] = *((_QWORD *)v226 + 1);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          goto LABEL_14;
        }
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v30, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      }
      v26 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?)
                                  - 8)
                      + 64);
      v27 = (void *)v30;
      v28 = v31;
LABEL_8:
      memcpy(v27, v28, v26);
      goto LABEL_14;
    }
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse);
LABEL_7:
    v26 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?)
                                - 8)
                    + 64);
    v27 = v8;
    v28 = v9;
    goto LABEL_8;
  }
  if (v14)
    goto LABEL_7;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *((_QWORD *)v8 + 1) = *((_QWORD *)v9 + 1);
  v15 = *(int *)(v10 + 24);
  v16 = &v8[v15];
  v17 = v6;
  v18 = &v9[v15];
  v19 = *(void (**)(char *, char *, uint64_t))(v243 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v19(v16, v18, v17);
  v20 = *(int *)(v10 + 28);
  v21 = &v8[v20];
  v22 = &v9[v20];
  v23 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    v19(v21, v22, v17);
    v41 = *(int *)(v23 + 20);
    v42 = &v21[v41];
    v43 = &v22[v41];
    *(_QWORD *)v42 = *(_QWORD *)v43;
    *((_QWORD *)v42 + 1) = *((_QWORD *)v43 + 1);
    v44 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56);
    swift_bridgeObjectRetain();
    v44(v21, 0, 1, v23);
  }
  a3 = v240;
  a2 = v241;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  v6 = v242;
LABEL_14:
  v45 = a3[6];
  v46 = (char *)(a1 + v45);
  v47 = (char *)(a2 + v45);
  v48 = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse();
  v49 = *(_QWORD *)(v48 - 8);
  v50 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v49 + 48);
  v51 = v50(v46, 1, v48);
  v52 = v50(v47, 1, v48);
  if (!v51)
  {
    if (!v52)
    {
      *(_QWORD *)v46 = *(_QWORD *)v47;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v239((uint64_t)&v46[*(int *)(v48 + 20)], (uint64_t)&v47[*(int *)(v48 + 20)], v6);
      v67 = *(int *)(v48 + 24);
      v68 = (uint64_t)&v46[v67];
      v69 = &v47[v67];
      v70 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
      v71 = *(_QWORD *)(v70 - 8);
      v72 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v71 + 48);
      v73 = v72(v68, 1, v70);
      v74 = v72((uint64_t)v69, 1, v70);
      if (v73)
      {
        if (!v74)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v243 + 16))(v68, v69, v6);
          v75 = *(int *)(v70 + 20);
          v76 = (_QWORD *)(v68 + v75);
          v77 = &v69[v75];
          *v76 = *(_QWORD *)v77;
          v76[1] = *((_QWORD *)v77 + 1);
          v78 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v71 + 56);
          swift_bridgeObjectRetain();
          v78(v68, 0, 1, v70);
          goto LABEL_27;
        }
      }
      else
      {
        if (!v74)
        {
          v239(v68, (uint64_t)v69, v6);
          v227 = *(int *)(v70 + 20);
          v228 = (_QWORD *)(v68 + v227);
          v229 = &v69[v227];
          *v228 = *(_QWORD *)v229;
          v228[1] = *((_QWORD *)v229 + 1);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          goto LABEL_27;
        }
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v68, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      }
      v64 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?)
                                  - 8)
                      + 64);
      v65 = (void *)v68;
      v66 = v69;
LABEL_21:
      memcpy(v65, v66, v64);
      goto LABEL_27;
    }
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v46, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse);
LABEL_20:
    v64 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?)
                                - 8)
                    + 64);
    v65 = v46;
    v66 = v47;
    goto LABEL_21;
  }
  if (v52)
    goto LABEL_20;
  *(_QWORD *)v46 = *(_QWORD *)v47;
  v53 = *(int *)(v48 + 20);
  v54 = &v46[v53];
  v55 = &v47[v53];
  v56 = *(void (**)(char *, char *, uint64_t))(v243 + 16);
  swift_bridgeObjectRetain();
  v56(v54, v55, v6);
  v57 = *(int *)(v48 + 24);
  v58 = &v46[v57];
  v59 = &v47[v57];
  v60 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v61 = v6;
  v62 = *(_QWORD *)(v60 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v59, 1, v60))
  {
    v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
  }
  else
  {
    v56(v58, v59, v61);
    v79 = *(int *)(v60 + 20);
    v80 = &v58[v79];
    v81 = &v59[v79];
    *(_QWORD *)v80 = *(_QWORD *)v81;
    *((_QWORD *)v80 + 1) = *((_QWORD *)v81 + 1);
    v82 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v62 + 56);
    swift_bridgeObjectRetain();
    v82(v58, 0, 1, v60);
  }
  a3 = v240;
  a2 = v241;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
  v6 = v242;
LABEL_27:
  v83 = a3[7];
  v84 = (char *)(a1 + v83);
  v85 = (char *)(a2 + v83);
  v86 = type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse();
  v87 = *(_QWORD *)(v86 - 8);
  v88 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v87 + 48);
  v89 = v88(v84, 1, v86);
  v90 = v88(v85, 1, v86);
  if (!v89)
  {
    if (!v90)
    {
      *(_QWORD *)v84 = *(_QWORD *)v85;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v239((uint64_t)&v84[*(int *)(v86 + 20)], (uint64_t)&v85[*(int *)(v86 + 20)], v6);
      v105 = *(int *)(v86 + 24);
      v106 = (uint64_t)&v84[v105];
      v107 = &v85[v105];
      v108 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
      v109 = *(_QWORD *)(v108 - 8);
      v110 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v109 + 48);
      v111 = v110(v106, 1, v108);
      v112 = v110((uint64_t)v107, 1, v108);
      if (v111)
      {
        if (!v112)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v243 + 16))(v106, v107, v6);
          v113 = *(int *)(v108 + 20);
          v114 = (_QWORD *)(v106 + v113);
          v115 = &v107[v113];
          *v114 = *(_QWORD *)v115;
          v114[1] = *((_QWORD *)v115 + 1);
          v116 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v109 + 56);
          swift_bridgeObjectRetain();
          v116(v106, 0, 1, v108);
          goto LABEL_40;
        }
      }
      else
      {
        if (!v112)
        {
          v239(v106, (uint64_t)v107, v6);
          v230 = *(int *)(v108 + 20);
          v231 = (_QWORD *)(v106 + v230);
          v232 = &v107[v230];
          *v231 = *(_QWORD *)v232;
          v231[1] = *((_QWORD *)v232 + 1);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          goto LABEL_40;
        }
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v106, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      }
      v102 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?)
                                   - 8)
                       + 64);
      v103 = (void *)v106;
      v104 = v107;
LABEL_34:
      memcpy(v103, v104, v102);
      goto LABEL_40;
    }
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v84, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse);
LABEL_33:
    v102 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?)
                                 - 8)
                     + 64);
    v103 = v84;
    v104 = v85;
    goto LABEL_34;
  }
  if (v90)
    goto LABEL_33;
  *(_QWORD *)v84 = *(_QWORD *)v85;
  v91 = *(int *)(v86 + 20);
  v92 = &v84[v91];
  v93 = &v85[v91];
  v94 = *(void (**)(char *, char *, uint64_t))(v243 + 16);
  swift_bridgeObjectRetain();
  v94(v92, v93, v6);
  v95 = *(int *)(v86 + 24);
  v96 = &v84[v95];
  v97 = &v85[v95];
  v98 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v99 = v6;
  v100 = *(_QWORD *)(v98 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v100 + 48))(v97, 1, v98))
  {
    v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    memcpy(v96, v97, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
  }
  else
  {
    v94(v96, v97, v99);
    v117 = *(int *)(v98 + 20);
    v118 = &v96[v117];
    v119 = &v97[v117];
    *(_QWORD *)v118 = *(_QWORD *)v119;
    *((_QWORD *)v118 + 1) = *((_QWORD *)v119 + 1);
    v120 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v100 + 56);
    swift_bridgeObjectRetain();
    v120(v96, 0, 1, v98);
  }
  a3 = v240;
  a2 = v241;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v87 + 56))(v84, 0, 1, v86);
  v6 = v242;
LABEL_40:
  v121 = a3[8];
  v122 = (char *)(a1 + v121);
  v123 = (char *)(a2 + v121);
  v124 = type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse();
  v125 = *(_QWORD *)(v124 - 8);
  v126 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v125 + 48);
  v127 = v126(v122, 1, v124);
  v128 = v126(v123, 1, v124);
  if (!v127)
  {
    if (!v128)
    {
      *(_QWORD *)v122 = *(_QWORD *)v123;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v239((uint64_t)&v122[*(int *)(v124 + 20)], (uint64_t)&v123[*(int *)(v124 + 20)], v6);
      v143 = *(int *)(v124 + 24);
      v144 = (uint64_t)&v122[v143];
      v145 = &v123[v143];
      v146 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
      v147 = *(_QWORD *)(v146 - 8);
      v148 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v147 + 48);
      v149 = v148(v144, 1, v146);
      v150 = v148((uint64_t)v145, 1, v146);
      if (v149)
      {
        if (!v150)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v243 + 16))(v144, v145, v6);
          v151 = *(int *)(v146 + 20);
          v152 = (_QWORD *)(v144 + v151);
          v153 = &v145[v151];
          *v152 = *(_QWORD *)v153;
          v152[1] = *((_QWORD *)v153 + 1);
          v154 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v147 + 56);
          swift_bridgeObjectRetain();
          v154(v144, 0, 1, v146);
          goto LABEL_53;
        }
      }
      else
      {
        if (!v150)
        {
          v239(v144, (uint64_t)v145, v6);
          v233 = *(int *)(v146 + 20);
          v234 = (_QWORD *)(v144 + v233);
          v235 = &v145[v233];
          *v234 = *(_QWORD *)v235;
          v234[1] = *((_QWORD *)v235 + 1);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          goto LABEL_53;
        }
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v144, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      }
      v140 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?)
                                   - 8)
                       + 64);
      v141 = (void *)v144;
      v142 = v145;
LABEL_47:
      memcpy(v141, v142, v140);
      goto LABEL_53;
    }
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v122, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse);
LABEL_46:
    v140 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?)
                                 - 8)
                     + 64);
    v141 = v122;
    v142 = v123;
    goto LABEL_47;
  }
  if (v128)
    goto LABEL_46;
  *(_QWORD *)v122 = *(_QWORD *)v123;
  v129 = *(int *)(v124 + 20);
  v130 = &v122[v129];
  v131 = &v123[v129];
  v132 = *(void (**)(char *, char *, uint64_t))(v243 + 16);
  swift_bridgeObjectRetain();
  v132(v130, v131, v6);
  v133 = *(int *)(v124 + 24);
  v134 = &v122[v133];
  v135 = &v123[v133];
  v136 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v137 = v6;
  v138 = *(_QWORD *)(v136 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v138 + 48))(v135, 1, v136))
  {
    v139 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    memcpy(v134, v135, *(_QWORD *)(*(_QWORD *)(v139 - 8) + 64));
  }
  else
  {
    v132(v134, v135, v137);
    v155 = *(int *)(v136 + 20);
    v156 = &v134[v155];
    v157 = &v135[v155];
    *(_QWORD *)v156 = *(_QWORD *)v157;
    *((_QWORD *)v156 + 1) = *((_QWORD *)v157 + 1);
    v158 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v138 + 56);
    swift_bridgeObjectRetain();
    v158(v134, 0, 1, v136);
  }
  a3 = v240;
  a2 = v241;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v125 + 56))(v122, 0, 1, v124);
  v6 = v242;
LABEL_53:
  v159 = a3[9];
  v160 = (char *)(a1 + v159);
  v161 = (char *)(a2 + v159);
  v162 = type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse();
  v163 = *(_QWORD *)(v162 - 8);
  v164 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v163 + 48);
  v165 = v164(v160, 1, v162);
  v166 = v164(v161, 1, v162);
  if (!v165)
  {
    if (!v166)
    {
      *(_QWORD *)v160 = *(_QWORD *)v161;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v239((uint64_t)&v160[*(int *)(v162 + 20)], (uint64_t)&v161[*(int *)(v162 + 20)], v6);
      v181 = *(int *)(v162 + 24);
      v182 = (uint64_t)&v160[v181];
      v183 = &v161[v181];
      v184 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
      v185 = *(_QWORD *)(v184 - 8);
      v186 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v185 + 48);
      v187 = v186(v182, 1, v184);
      v188 = v186((uint64_t)v183, 1, v184);
      if (v187)
      {
        if (!v188)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v243 + 16))(v182, v183, v6);
          v189 = *(int *)(v184 + 20);
          v190 = (_QWORD *)(v182 + v189);
          v191 = &v183[v189];
          *v190 = *(_QWORD *)v191;
          v190[1] = *((_QWORD *)v191 + 1);
          v192 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v185 + 56);
          swift_bridgeObjectRetain();
          v192(v182, 0, 1, v184);
          goto LABEL_66;
        }
      }
      else
      {
        if (!v188)
        {
          v239(v182, (uint64_t)v183, v6);
          v236 = *(int *)(v184 + 20);
          v237 = (_QWORD *)(v182 + v236);
          v238 = &v183[v236];
          *v237 = *(_QWORD *)v238;
          v237[1] = *((_QWORD *)v238 + 1);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          goto LABEL_66;
        }
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v182, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      }
      v178 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?)
                                   - 8)
                       + 64);
      v179 = (void *)v182;
      v180 = v183;
LABEL_60:
      memcpy(v179, v180, v178);
      goto LABEL_66;
    }
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v160, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse);
LABEL_59:
    v178 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?)
                                 - 8)
                     + 64);
    v179 = v160;
    v180 = v161;
    goto LABEL_60;
  }
  if (v166)
    goto LABEL_59;
  *(_QWORD *)v160 = *(_QWORD *)v161;
  v167 = *(int *)(v162 + 20);
  v168 = &v160[v167];
  v169 = &v161[v167];
  v170 = *(void (**)(char *, char *, uint64_t))(v243 + 16);
  swift_bridgeObjectRetain();
  v170(v168, v169, v6);
  v171 = *(int *)(v162 + 24);
  v172 = &v160[v171];
  v173 = &v161[v171];
  v174 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v175 = v6;
  v176 = *(_QWORD *)(v174 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v176 + 48))(v173, 1, v174))
  {
    v177 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    memcpy(v172, v173, *(_QWORD *)(*(_QWORD *)(v177 - 8) + 64));
  }
  else
  {
    v170(v172, v173, v175);
    v193 = *(int *)(v174 + 20);
    v194 = &v172[v193];
    v195 = &v173[v193];
    *(_QWORD *)v194 = *(_QWORD *)v195;
    *((_QWORD *)v194 + 1) = *((_QWORD *)v195 + 1);
    v196 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v176 + 56);
    swift_bridgeObjectRetain();
    v196(v172, 0, 1, v174);
  }
  a3 = v240;
  a2 = v241;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v163 + 56))(v160, 0, 1, v162);
  v6 = v242;
LABEL_66:
  v197 = a3[10];
  v198 = (char *)(a1 + v197);
  v199 = (char *)(a2 + v197);
  v200 = type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0);
  v201 = *(_QWORD *)(v200 - 8);
  v202 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v201 + 48);
  v203 = v202(v198, 1, v200);
  v204 = v202(v199, 1, v200);
  if (v203)
  {
    if (!v204)
    {
      (*(void (**)(char *, char *, uint64_t))(v243 + 16))(v198, v199, v6);
      *(_QWORD *)&v198[*(int *)(v200 + 20)] = *(_QWORD *)&v199[*(int *)(v200 + 20)];
      v205 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v201 + 56);
      swift_retain();
      v205(v198, 0, 1, v200);
      goto LABEL_72;
    }
    goto LABEL_71;
  }
  if (v204)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v198, type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult);
LABEL_71:
    v206 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
    memcpy(v198, v199, *(_QWORD *)(*(_QWORD *)(v206 - 8) + 64));
    goto LABEL_72;
  }
  v239((uint64_t)v198, (uint64_t)v199, v6);
  *(_QWORD *)&v198[*(int *)(v200 + 20)] = *(_QWORD *)&v199[*(int *)(v200 + 20)];
  swift_retain();
  swift_release();
LABEL_72:
  v207 = a3[11];
  v208 = (char *)(a1 + v207);
  v209 = (char *)(a2 + v207);
  v210 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v211 = *(_QWORD *)(v210 - 8);
  v212 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v211 + 48);
  v213 = v212(v208, 1, v210);
  v214 = v212(v209, 1, v210);
  if (!v213)
  {
    if (!v214)
    {
      v239((uint64_t)v208, (uint64_t)v209, v6);
      v221 = *(int *)(v210 + 20);
      v222 = &v208[v221];
      v223 = &v209[v221];
      *(_QWORD *)v222 = *(_QWORD *)v223;
      *((_QWORD *)v222 + 1) = *((_QWORD *)v223 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v208, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
    goto LABEL_77;
  }
  if (v214)
  {
LABEL_77:
    v219 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    memcpy(v208, v209, *(_QWORD *)(*(_QWORD *)(v219 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v243 + 16))(v208, v209, v6);
  v215 = *(int *)(v210 + 20);
  v216 = &v208[v215];
  v217 = &v209[v215];
  *(_QWORD *)v216 = *(_QWORD *)v217;
  *((_QWORD *)v216 + 1) = *((_QWORD *)v217 + 1);
  v218 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v211 + 56);
  swift_bridgeObjectRetain();
  v218(v208, 0, 1, v210);
  return a1;
}

uint64_t initializeWithTake for DocumentUnderstanding_ClientInterface_Response(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(char *, char *, uint64_t);
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  int *v83;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (_OWORD *)(a1 + v8);
  v10 = (_OWORD *)(a2 + v8);
  v11 = type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse();
  v12 = *(_QWORD *)(v11 - 8);
  v82 = v6;
  v83 = a3;
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    *v9 = *v10;
    v7((uint64_t)v9 + *(int *)(v11 + 24), (uint64_t)v10 + *(int *)(v11 + 24), v6);
    v14 = *(int *)(v11 + 28);
    v15 = (char *)v9 + v14;
    v16 = (char *)v10 + v14;
    v17 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      v7((uint64_t)v15, (uint64_t)v16, v82);
      *(_OWORD *)&v15[*(int *)(v17 + 20)] = *(_OWORD *)&v16[*(int *)(v17 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    v6 = v82;
    a3 = v83;
  }
  v20 = a3[6];
  v21 = (_QWORD *)(a1 + v20);
  v22 = (_QWORD *)(a2 + v20);
  v23 = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse();
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    *v21 = *v22;
    v7((uint64_t)v21 + *(int *)(v23 + 20), (uint64_t)v22 + *(int *)(v23 + 20), v6);
    v26 = *(int *)(v23 + 24);
    v27 = (char *)v21 + v26;
    v28 = (char *)v22 + v26;
    v29 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
    v30 = *(_QWORD *)(v29 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
    {
      v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      v7((uint64_t)v27, (uint64_t)v28, v82);
      *(_OWORD *)&v27[*(int *)(v29 + 20)] = *(_OWORD *)&v28[*(int *)(v29 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    v6 = v82;
    a3 = v83;
  }
  v32 = a3[7];
  v33 = (_QWORD *)(a1 + v32);
  v34 = (_QWORD *)(a2 + v32);
  v35 = type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse();
  v36 = *(_QWORD *)(v35 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
  {
    v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  else
  {
    *v33 = *v34;
    v7((uint64_t)v33 + *(int *)(v35 + 20), (uint64_t)v34 + *(int *)(v35 + 20), v6);
    v38 = *(int *)(v35 + 24);
    v39 = (char *)v33 + v38;
    v40 = (char *)v34 + v38;
    v41 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
    v42 = *(_QWORD *)(v41 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
    {
      v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
      memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    }
    else
    {
      v7((uint64_t)v39, (uint64_t)v40, v82);
      *(_OWORD *)&v39[*(int *)(v41 + 20)] = *(_OWORD *)&v40[*(int *)(v41 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
    v6 = v82;
    a3 = v83;
  }
  v44 = a3[8];
  v45 = (_QWORD *)(a1 + v44);
  v46 = (_QWORD *)(a2 + v44);
  v47 = type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse();
  v48 = *(_QWORD *)(v47 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
  {
    v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
  }
  else
  {
    *v45 = *v46;
    v7((uint64_t)v45 + *(int *)(v47 + 20), (uint64_t)v46 + *(int *)(v47 + 20), v6);
    v50 = *(int *)(v47 + 24);
    v51 = (char *)v45 + v50;
    v52 = (char *)v46 + v50;
    v53 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
    v54 = *(_QWORD *)(v53 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
    {
      v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
      memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
    }
    else
    {
      v7((uint64_t)v51, (uint64_t)v52, v82);
      *(_OWORD *)&v51[*(int *)(v53 + 20)] = *(_OWORD *)&v52[*(int *)(v53 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
    v6 = v82;
    a3 = v83;
  }
  v56 = a3[9];
  v57 = (_QWORD *)(a1 + v56);
  v58 = (_QWORD *)(a2 + v56);
  v59 = type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse();
  v60 = *(_QWORD *)(v59 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59))
  {
    v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?);
    memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
  }
  else
  {
    *v57 = *v58;
    v7((uint64_t)v57 + *(int *)(v59 + 20), (uint64_t)v58 + *(int *)(v59 + 20), v6);
    v62 = *(int *)(v59 + 24);
    v63 = (char *)v57 + v62;
    v64 = (char *)v58 + v62;
    v65 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
    v66 = *(_QWORD *)(v65 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v64, 1, v65))
    {
      v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
      memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
    }
    else
    {
      v7((uint64_t)v63, (uint64_t)v64, v82);
      *(_OWORD *)&v63[*(int *)(v65 + 20)] = *(_OWORD *)&v64[*(int *)(v65 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v66 + 56))(v63, 0, 1, v65);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v57, 0, 1, v59);
    v6 = v82;
    a3 = v83;
  }
  v68 = a3[10];
  v69 = (char *)(a1 + v68);
  v70 = (char *)(a2 + v68);
  v71 = type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0);
  v72 = *(_QWORD *)(v71 - 8);
  v73 = (void (*)(char *, char *, uint64_t))v7;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48))(v70, 1, v71))
  {
    v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
    memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v69, (uint64_t)v70, v6);
    *(_QWORD *)&v69[*(int *)(v71 + 20)] = *(_QWORD *)&v70[*(int *)(v71 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v72 + 56))(v69, 0, 1, v71);
  }
  v75 = v83[11];
  v76 = (char *)(a1 + v75);
  v77 = (char *)(a2 + v75);
  v78 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v79 = *(_QWORD *)(v78 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v79 + 48))(v77, 1, v78))
  {
    v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
  }
  else
  {
    v73(v76, v77, v6);
    *(_OWORD *)&v76[*(int *)(v78 + 20)] = *(_OWORD *)&v77[*(int *)(v78 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v79 + 56))(v76, 0, 1, v78);
  }
  return a1;
}

uint64_t assignWithTake for DocumentUnderstanding_ClientInterface_Response(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  void *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, uint64_t);
  int v32;
  int v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(char *, uint64_t, uint64_t);
  int v40;
  int v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  size_t v50;
  void *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(uint64_t, uint64_t, uint64_t);
  int v59;
  int v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(char *, uint64_t, uint64_t);
  int v67;
  int v68;
  void (*v69)(char *, char *, uint64_t);
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  size_t v77;
  void *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t (*v85)(uint64_t, uint64_t, uint64_t);
  int v86;
  int v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t (*v93)(char *, uint64_t, uint64_t);
  int v94;
  int v95;
  void (*v96)(char *, char *, uint64_t);
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  size_t v104;
  void *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t (*v112)(uint64_t, uint64_t, uint64_t);
  int v113;
  int v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t (*v120)(char *, uint64_t, uint64_t);
  int v121;
  int v122;
  void (*v123)(char *, char *, uint64_t);
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  size_t v131;
  void *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t (*v139)(uint64_t, uint64_t, uint64_t);
  int v140;
  int v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t (*v147)(char *, uint64_t, uint64_t);
  int v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t (*v156)(char *, uint64_t, uint64_t);
  int v157;
  int v158;
  uint64_t v159;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  void (*v191)(uint64_t, uint64_t, uint64_t);
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  int *v195;

  v6 = type metadata accessor for UnknownStorage();
  v194 = *(_QWORD *)(v6 - 8);
  v191 = *(void (**)(uint64_t, uint64_t, uint64_t))(v194 + 40);
  v191(a1, a2, v6);
  v7 = a3[5];
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  v192 = a2;
  v193 = v6;
  v195 = a3;
  if (!v13)
  {
    if (!v14)
    {
      *(_QWORD *)v8 = *(_QWORD *)v9;
      swift_bridgeObjectRelease();
      *((_QWORD *)v8 + 1) = *((_QWORD *)v9 + 1);
      swift_bridgeObjectRelease();
      v191((uint64_t)&v8[*(int *)(v10 + 24)], (uint64_t)&v9[*(int *)(v10 + 24)], v6);
      v26 = *(int *)(v10 + 28);
      v27 = (uint64_t)&v8[v26];
      v28 = &v9[v26];
      v29 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
      v30 = *(_QWORD *)(v29 - 8);
      v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 48);
      v32 = v31(v27, 1, v29);
      v33 = v31((uint64_t)v28, 1, v29);
      if (v32)
      {
        a3 = v195;
        if (!v33)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v194 + 32))(v27, v28, v6);
          *(_OWORD *)(v27 + *(int *)(v29 + 20)) = *(_OWORD *)&v28[*(int *)(v29 + 20)];
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
          goto LABEL_14;
        }
      }
      else
      {
        a3 = v195;
        if (!v33)
        {
          v191(v27, (uint64_t)v28, v6);
          v166 = *(int *)(v29 + 20);
          v167 = (_QWORD *)(v27 + v166);
          v168 = &v28[v166];
          v170 = *(_QWORD *)v168;
          v169 = *((_QWORD *)v168 + 1);
          *v167 = v170;
          v167[1] = v169;
          swift_bridgeObjectRelease();
          goto LABEL_14;
        }
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v27, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      }
      v23 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?)
                                  - 8)
                      + 64);
      v24 = (void *)v27;
      v25 = v28;
LABEL_8:
      memcpy(v24, v25, v23);
      goto LABEL_14;
    }
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse);
LABEL_7:
    v23 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?)
                                - 8)
                    + 64);
    v24 = v8;
    v25 = v9;
    goto LABEL_8;
  }
  if (v14)
    goto LABEL_7;
  *(_OWORD *)v8 = *(_OWORD *)v9;
  v15 = *(void (**)(char *, char *, uint64_t))(v194 + 32);
  v15(&v8[*(int *)(v10 + 24)], &v9[*(int *)(v10 + 24)], v6);
  v16 = *(int *)(v10 + 28);
  v17 = &v8[v16];
  v18 = &v9[v16];
  v19 = v6;
  v20 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v18, 1, v20))
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    v15(v17, v18, v19);
    *(_OWORD *)&v17[*(int *)(v20 + 20)] = *(_OWORD *)&v18[*(int *)(v20 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v17, 0, 1, v20);
  }
  a2 = v192;
  a3 = v195;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  v6 = v193;
LABEL_14:
  v34 = a3[6];
  v35 = (char *)(a1 + v34);
  v36 = (char *)(a2 + v34);
  v37 = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse();
  v38 = *(_QWORD *)(v37 - 8);
  v39 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v38 + 48);
  v40 = v39(v35, 1, v37);
  v41 = v39(v36, 1, v37);
  if (!v40)
  {
    if (!v41)
    {
      *(_QWORD *)v35 = *(_QWORD *)v36;
      swift_bridgeObjectRelease();
      v191((uint64_t)&v35[*(int *)(v37 + 20)], (uint64_t)&v36[*(int *)(v37 + 20)], v6);
      v53 = *(int *)(v37 + 24);
      v54 = (uint64_t)&v35[v53];
      v55 = &v36[v53];
      v56 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
      v57 = *(_QWORD *)(v56 - 8);
      v58 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v57 + 48);
      v59 = v58(v54, 1, v56);
      v60 = v58((uint64_t)v55, 1, v56);
      if (v59)
      {
        a3 = v195;
        if (!v60)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v194 + 32))(v54, v55, v6);
          *(_OWORD *)(v54 + *(int *)(v56 + 20)) = *(_OWORD *)&v55[*(int *)(v56 + 20)];
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
          goto LABEL_27;
        }
      }
      else
      {
        a3 = v195;
        if (!v60)
        {
          v191(v54, (uint64_t)v55, v6);
          v171 = *(int *)(v56 + 20);
          v172 = (_QWORD *)(v54 + v171);
          v173 = &v55[v171];
          v175 = *(_QWORD *)v173;
          v174 = *((_QWORD *)v173 + 1);
          *v172 = v175;
          v172[1] = v174;
          swift_bridgeObjectRelease();
          goto LABEL_27;
        }
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v54, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      }
      v50 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?)
                                  - 8)
                      + 64);
      v51 = (void *)v54;
      v52 = v55;
LABEL_21:
      memcpy(v51, v52, v50);
      goto LABEL_27;
    }
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v35, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse);
LABEL_20:
    v50 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?)
                                - 8)
                    + 64);
    v51 = v35;
    v52 = v36;
    goto LABEL_21;
  }
  if (v41)
    goto LABEL_20;
  *(_QWORD *)v35 = *(_QWORD *)v36;
  v42 = *(void (**)(char *, char *, uint64_t))(v194 + 32);
  v42(&v35[*(int *)(v37 + 20)], &v36[*(int *)(v37 + 20)], v6);
  v43 = *(int *)(v37 + 24);
  v44 = &v35[v43];
  v45 = &v36[v43];
  v46 = v6;
  v47 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v48 = *(_QWORD *)(v47 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v45, 1, v47))
  {
    v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
  }
  else
  {
    v42(v44, v45, v46);
    *(_OWORD *)&v44[*(int *)(v47 + 20)] = *(_OWORD *)&v45[*(int *)(v47 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v44, 0, 1, v47);
  }
  a2 = v192;
  a3 = v195;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
  v6 = v193;
LABEL_27:
  v61 = a3[7];
  v62 = (char *)(a1 + v61);
  v63 = (char *)(a2 + v61);
  v64 = type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse();
  v65 = *(_QWORD *)(v64 - 8);
  v66 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v65 + 48);
  v67 = v66(v62, 1, v64);
  v68 = v66(v63, 1, v64);
  if (!v67)
  {
    if (!v68)
    {
      *(_QWORD *)v62 = *(_QWORD *)v63;
      swift_bridgeObjectRelease();
      v191((uint64_t)&v62[*(int *)(v64 + 20)], (uint64_t)&v63[*(int *)(v64 + 20)], v6);
      v80 = *(int *)(v64 + 24);
      v81 = (uint64_t)&v62[v80];
      v82 = &v63[v80];
      v83 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
      v84 = *(_QWORD *)(v83 - 8);
      v85 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v84 + 48);
      v86 = v85(v81, 1, v83);
      v87 = v85((uint64_t)v82, 1, v83);
      if (v86)
      {
        a3 = v195;
        if (!v87)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v194 + 32))(v81, v82, v6);
          *(_OWORD *)(v81 + *(int *)(v83 + 20)) = *(_OWORD *)&v82[*(int *)(v83 + 20)];
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v84 + 56))(v81, 0, 1, v83);
          goto LABEL_40;
        }
      }
      else
      {
        a3 = v195;
        if (!v87)
        {
          v191(v81, (uint64_t)v82, v6);
          v176 = *(int *)(v83 + 20);
          v177 = (_QWORD *)(v81 + v176);
          v178 = &v82[v176];
          v180 = *(_QWORD *)v178;
          v179 = *((_QWORD *)v178 + 1);
          *v177 = v180;
          v177[1] = v179;
          swift_bridgeObjectRelease();
          goto LABEL_40;
        }
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v81, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      }
      v77 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?)
                                  - 8)
                      + 64);
      v78 = (void *)v81;
      v79 = v82;
LABEL_34:
      memcpy(v78, v79, v77);
      goto LABEL_40;
    }
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v62, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse);
LABEL_33:
    v77 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?)
                                - 8)
                    + 64);
    v78 = v62;
    v79 = v63;
    goto LABEL_34;
  }
  if (v68)
    goto LABEL_33;
  *(_QWORD *)v62 = *(_QWORD *)v63;
  v69 = *(void (**)(char *, char *, uint64_t))(v194 + 32);
  v69(&v62[*(int *)(v64 + 20)], &v63[*(int *)(v64 + 20)], v6);
  v70 = *(int *)(v64 + 24);
  v71 = &v62[v70];
  v72 = &v63[v70];
  v73 = v6;
  v74 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v75 = *(_QWORD *)(v74 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v72, 1, v74))
  {
    v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
  }
  else
  {
    v69(v71, v72, v73);
    *(_OWORD *)&v71[*(int *)(v74 + 20)] = *(_OWORD *)&v72[*(int *)(v74 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v75 + 56))(v71, 0, 1, v74);
  }
  a2 = v192;
  a3 = v195;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v62, 0, 1, v64);
  v6 = v193;
LABEL_40:
  v88 = a3[8];
  v89 = (char *)(a1 + v88);
  v90 = (char *)(a2 + v88);
  v91 = type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse();
  v92 = *(_QWORD *)(v91 - 8);
  v93 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v92 + 48);
  v94 = v93(v89, 1, v91);
  v95 = v93(v90, 1, v91);
  if (!v94)
  {
    if (!v95)
    {
      *(_QWORD *)v89 = *(_QWORD *)v90;
      swift_bridgeObjectRelease();
      v191((uint64_t)&v89[*(int *)(v91 + 20)], (uint64_t)&v90[*(int *)(v91 + 20)], v6);
      v107 = *(int *)(v91 + 24);
      v108 = (uint64_t)&v89[v107];
      v109 = &v90[v107];
      v110 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
      v111 = *(_QWORD *)(v110 - 8);
      v112 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v111 + 48);
      v113 = v112(v108, 1, v110);
      v114 = v112((uint64_t)v109, 1, v110);
      if (v113)
      {
        a3 = v195;
        if (!v114)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v194 + 32))(v108, v109, v6);
          *(_OWORD *)(v108 + *(int *)(v110 + 20)) = *(_OWORD *)&v109[*(int *)(v110 + 20)];
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v111 + 56))(v108, 0, 1, v110);
          goto LABEL_53;
        }
      }
      else
      {
        a3 = v195;
        if (!v114)
        {
          v191(v108, (uint64_t)v109, v6);
          v181 = *(int *)(v110 + 20);
          v182 = (_QWORD *)(v108 + v181);
          v183 = &v109[v181];
          v185 = *(_QWORD *)v183;
          v184 = *((_QWORD *)v183 + 1);
          *v182 = v185;
          v182[1] = v184;
          swift_bridgeObjectRelease();
          goto LABEL_53;
        }
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v108, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      }
      v104 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?)
                                   - 8)
                       + 64);
      v105 = (void *)v108;
      v106 = v109;
LABEL_47:
      memcpy(v105, v106, v104);
      goto LABEL_53;
    }
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v89, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse);
LABEL_46:
    v104 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?)
                                 - 8)
                     + 64);
    v105 = v89;
    v106 = v90;
    goto LABEL_47;
  }
  if (v95)
    goto LABEL_46;
  *(_QWORD *)v89 = *(_QWORD *)v90;
  v96 = *(void (**)(char *, char *, uint64_t))(v194 + 32);
  v96(&v89[*(int *)(v91 + 20)], &v90[*(int *)(v91 + 20)], v6);
  v97 = *(int *)(v91 + 24);
  v98 = &v89[v97];
  v99 = &v90[v97];
  v100 = v6;
  v101 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v102 = *(_QWORD *)(v101 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v102 + 48))(v99, 1, v101))
  {
    v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    memcpy(v98, v99, *(_QWORD *)(*(_QWORD *)(v103 - 8) + 64));
  }
  else
  {
    v96(v98, v99, v100);
    *(_OWORD *)&v98[*(int *)(v101 + 20)] = *(_OWORD *)&v99[*(int *)(v101 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v102 + 56))(v98, 0, 1, v101);
  }
  a2 = v192;
  a3 = v195;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v89, 0, 1, v91);
  v6 = v193;
LABEL_53:
  v115 = a3[9];
  v116 = (char *)(a1 + v115);
  v117 = (char *)(a2 + v115);
  v118 = type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse();
  v119 = *(_QWORD *)(v118 - 8);
  v120 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v119 + 48);
  v121 = v120(v116, 1, v118);
  v122 = v120(v117, 1, v118);
  if (!v121)
  {
    if (!v122)
    {
      *(_QWORD *)v116 = *(_QWORD *)v117;
      swift_bridgeObjectRelease();
      v191((uint64_t)&v116[*(int *)(v118 + 20)], (uint64_t)&v117[*(int *)(v118 + 20)], v6);
      v134 = *(int *)(v118 + 24);
      v135 = (uint64_t)&v116[v134];
      v136 = &v117[v134];
      v137 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
      v138 = *(_QWORD *)(v137 - 8);
      v139 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v138 + 48);
      v140 = v139(v135, 1, v137);
      v141 = v139((uint64_t)v136, 1, v137);
      if (v140)
      {
        a3 = v195;
        if (!v141)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v194 + 32))(v135, v136, v6);
          *(_OWORD *)(v135 + *(int *)(v137 + 20)) = *(_OWORD *)&v136[*(int *)(v137 + 20)];
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v138 + 56))(v135, 0, 1, v137);
          goto LABEL_66;
        }
      }
      else
      {
        a3 = v195;
        if (!v141)
        {
          v191(v135, (uint64_t)v136, v6);
          v186 = *(int *)(v137 + 20);
          v187 = (_QWORD *)(v135 + v186);
          v188 = &v136[v186];
          v190 = *(_QWORD *)v188;
          v189 = *((_QWORD *)v188 + 1);
          *v187 = v190;
          v187[1] = v189;
          swift_bridgeObjectRelease();
          goto LABEL_66;
        }
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v135, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      }
      v131 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?)
                                   - 8)
                       + 64);
      v132 = (void *)v135;
      v133 = v136;
LABEL_60:
      memcpy(v132, v133, v131);
      goto LABEL_66;
    }
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v116, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse);
LABEL_59:
    v131 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?)
                                 - 8)
                     + 64);
    v132 = v116;
    v133 = v117;
    goto LABEL_60;
  }
  if (v122)
    goto LABEL_59;
  *(_QWORD *)v116 = *(_QWORD *)v117;
  v123 = *(void (**)(char *, char *, uint64_t))(v194 + 32);
  v123(&v116[*(int *)(v118 + 20)], &v117[*(int *)(v118 + 20)], v6);
  v124 = *(int *)(v118 + 24);
  v125 = &v116[v124];
  v126 = &v117[v124];
  v127 = v6;
  v128 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v129 = *(_QWORD *)(v128 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v129 + 48))(v126, 1, v128))
  {
    v130 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    memcpy(v125, v126, *(_QWORD *)(*(_QWORD *)(v130 - 8) + 64));
  }
  else
  {
    v123(v125, v126, v127);
    *(_OWORD *)&v125[*(int *)(v128 + 20)] = *(_OWORD *)&v126[*(int *)(v128 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v129 + 56))(v125, 0, 1, v128);
  }
  a2 = v192;
  a3 = v195;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v119 + 56))(v116, 0, 1, v118);
  v6 = v193;
LABEL_66:
  v142 = a3[10];
  v143 = (char *)(a1 + v142);
  v144 = (char *)(a2 + v142);
  v145 = type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0);
  v146 = *(_QWORD *)(v145 - 8);
  v147 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v146 + 48);
  v148 = v147(v143, 1, v145);
  v149 = v147(v144, 1, v145);
  if (v148)
  {
    if (!v149)
    {
      (*(void (**)(char *, char *, uint64_t))(v194 + 32))(v143, v144, v6);
      *(_QWORD *)&v143[*(int *)(v145 + 20)] = *(_QWORD *)&v144[*(int *)(v145 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v146 + 56))(v143, 0, 1, v145);
      goto LABEL_72;
    }
    goto LABEL_71;
  }
  if (v149)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v143, type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult);
LABEL_71:
    v150 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
    memcpy(v143, v144, *(_QWORD *)(*(_QWORD *)(v150 - 8) + 64));
    goto LABEL_72;
  }
  v191((uint64_t)v143, (uint64_t)v144, v6);
  *(_QWORD *)&v143[*(int *)(v145 + 20)] = *(_QWORD *)&v144[*(int *)(v145 + 20)];
  swift_release();
LABEL_72:
  v151 = v195[11];
  v152 = (char *)(a1 + v151);
  v153 = (char *)(a2 + v151);
  v154 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v155 = *(_QWORD *)(v154 - 8);
  v156 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v155 + 48);
  v157 = v156(v152, 1, v154);
  v158 = v156(v153, 1, v154);
  if (!v157)
  {
    if (!v158)
    {
      v191((uint64_t)v152, (uint64_t)v153, v6);
      v161 = *(int *)(v154 + 20);
      v162 = &v152[v161];
      v163 = &v153[v161];
      v165 = *(_QWORD *)v163;
      v164 = *((_QWORD *)v163 + 1);
      *(_QWORD *)v162 = v165;
      *((_QWORD *)v162 + 1) = v164;
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v152, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
    goto LABEL_77;
  }
  if (v158)
  {
LABEL_77:
    v159 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    memcpy(v152, v153, *(_QWORD *)(*(_QWORD *)(v159 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v194 + 32))(v152, v153, v6);
  *(_OWORD *)&v152[*(int *)(v154 + 20)] = *(_OWORD *)&v153[*(int *)(v154 + 20)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v155 + 56))(v152, 0, 1, v154);
  return a1;
}

uint64_t getEnumTagSinglePayload for DocumentUnderstanding_ClientInterface_Response()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_228301A64(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?);
        v12 = *(_QWORD *)(v15 - 8);
        if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
        {
          v8 = v15;
          v13 = a3[7];
        }
        else
        {
          v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?);
          v12 = *(_QWORD *)(v16 - 8);
          if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
          {
            v8 = v16;
            v13 = a3[8];
          }
          else
          {
            v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?);
            v12 = *(_QWORD *)(v17 - 8);
            if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
            {
              v8 = v17;
              v13 = a3[9];
            }
            else
            {
              v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
              v12 = *(_QWORD *)(v18 - 8);
              if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
              {
                v8 = v18;
                v13 = a3[10];
              }
              else
              {
                v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
                v12 = *(_QWORD *)(v8 - 8);
                v13 = a3[11];
              }
            }
          }
        }
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for DocumentUnderstanding_ClientInterface_Response()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_228301BD8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[7];
        }
        else
        {
          v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?);
          v14 = *(_QWORD *)(v18 - 8);
          if (*(_DWORD *)(v14 + 84) == a3)
          {
            v10 = v18;
            v15 = a4[8];
          }
          else
          {
            v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?);
            v14 = *(_QWORD *)(v19 - 8);
            if (*(_DWORD *)(v14 + 84) == a3)
            {
              v10 = v19;
              v15 = a4[9];
            }
            else
            {
              v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
              v14 = *(_QWORD *)(v20 - 8);
              if (*(_DWORD *)(v14 + 84) == a3)
              {
                v10 = v20;
                v15 = a4[10];
              }
              else
              {
                v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
                v14 = *(_QWORD *)(v10 - 8);
                v15 = a4[11];
              }
            }
          }
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for DocumentUnderstanding_ClientInterface_Response()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent?(319, &lazy cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?, (void (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse);
    if (v1 <= 0x3F)
    {
      type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent?(319, &lazy cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?, (void (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse);
      if (v2 <= 0x3F)
      {
        type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent?(319, &lazy cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?, (void (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse);
        if (v3 <= 0x3F)
        {
          type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent?(319, &lazy cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?, (void (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse);
          if (v4 <= 0x3F)
          {
            type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent?(319, &lazy cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?, (void (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse);
            if (v5 <= 0x3F)
            {
              type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent?(319, &lazy cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?, (void (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult);
              if (v6 <= 0x3F)
              {
                type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent?(319, (unint64_t *)&lazy cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?, (void (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
                if (v7 <= 0x3F)
                  swift_initStructMetadata();
              }
            }
          }
        }
      }
    }
  }
}

unint64_t static DUCategoryClassificationSmolBERToImplementation.implementationID.getter()
{
  return 0xD000000000000030;
}

uint64_t static DUCategoryClassificationSmolBERToImplementation.specification.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for DUCategoryClassificationSpecification();
  result = swift_allocObject();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for DUCategoryClassificationSpecification;
  *a1 = result;
  return result;
}

void *static DUCategoryClassificationSmolBERToImplementation.implementationAttributes.getter()
{
  return &outlined read-only object #0 of static DUCategoryClassificationSmolBERToImplementation.implementationAttributes.getter;
}

uint64_t DUCategoryClassificationSmolBERToImplementation.runTypedOnRequest(request:)()
{
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
  v1 = swift_allocError();
  *(_QWORD *)v2 = 0xD000000000000023;
  *(_QWORD *)(v2 + 8) = 0x80000002284D9E00;
  *(_BYTE *)(v2 + 16) = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, 1);
}

uint64_t DUCategoryClassificationSmolBERToImplementation.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t DUCategoryClassificationSmolBERToImplementation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t DUCategoryClassificationSmolBERToImplementation.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t DUCategoryClassificationSmolBERToImplementation.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t protocol witness for static DUProcessingPhaseImplementation.specification.getter in conformance DUCategoryClassificationSmolBERToImplementation@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for DUCategoryClassificationSpecification();
  result = swift_allocObject();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for DUCategoryClassificationSpecification;
  *a1 = result;
  return result;
}

unint64_t protocol witness for static DUProcessingPhaseImplementation.implementationID.getter in conformance DUCategoryClassificationSmolBERToImplementation()
{
  return 0xD000000000000030;
}

void *protocol witness for static DUProcessingPhaseImplementation.implementationAttributes.getter in conformance DUCategoryClassificationSmolBERToImplementation()
{
  return &outlined read-only object #0 of protocol witness for static DUProcessingPhaseImplementation.implementationAttributes.getter in conformance DUCategoryClassificationSmolBERToImplementation;
}

uint64_t protocol witness for DUProcessingPhaseImplementation.runTypedOnRequest(request:) in conformance DUCategoryClassificationSmolBERToImplementation(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  *(_QWORD *)(v3 + 16) = a1;
  v7 = (uint64_t (*)(uint64_t))(**(int **)(**(_QWORD **)v2 + 88) + *(_QWORD *)(**(_QWORD **)v2 + 88));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v5;
  *v5 = v3;
  v5[1] = protocol witness for DUProcessingPhaseImplementation.runTypedOnRequest(request:) in conformance DUCategoryClassificationSmolBERToImplementation;
  return v7(a2);
}

uint64_t protocol witness for DUProcessingPhaseImplementation.runTypedOnRequest(request:) in conformance DUCategoryClassificationSmolBERToImplementation(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v7;

  v5 = *(_QWORD *)(*v2 + 16);
  v7 = *v2;
  swift_task_dealloc();
  *(_QWORD *)v5 = a1;
  *(_BYTE *)(v5 + 8) = a2 & 1;
  return (*(uint64_t (**)(void))(v7 + 8))();
}

unint64_t lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError;
  if (!lazy protocol witness table cache variable for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for DUProcessingPhaseImplementationBaseError, &type metadata for DUProcessingPhaseImplementationBaseError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError);
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for DUProcessingPhaseImplementation.SpecificationType : DUProcessingPhaseSpecification in DUCategoryClassificationSmolBERToImplementation()
{
  return &protocol witness table for DUCategoryClassificationSpecification;
}

uint64_t type metadata accessor for DUCategoryClassificationSmolBERToImplementation()
{
  return objc_opt_self();
}

uint64_t static PDFNormalizationError.__derived_enum_equals(_:_:)()
{
  return 1;
}

void PDFNormalizationError.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int PDFNormalizationError.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PDFNormalizationError()
{
  return 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PDFNormalizationError()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance PDFNormalizationError()
{
  Hasher._combine(_:)(0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PDFNormalizationError()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t PDFDocumentNormalizer.getTextForPDF(pdfURL:targetStringLength:)@<X0>(uint64_t a1@<X1>, NSURL *a2@<X8>)
{
  const __CFURL *v3;
  const __CFURL *v4;
  CGPDFDocument *v5;
  uint64_t v6;
  uint64_t v7;

  URL._bridgeToObjectiveC()(a2);
  v4 = v3;
  v5 = CGPDFDocumentCreateWithURL(v3);

  if (v5)
  {
    specialized PDFDocumentNormalizer.getTextForPDF(pdfDocumentRef:targetStringLength:)(v5, a1);
    v7 = v6;

    return v7;
  }
  else
  {
    lazy protocol witness table accessor for type PDFNormalizationError and conformance PDFNormalizationError();
    swift_allocError();
    return swift_willThrow();
  }
}

void specialized PDFDocumentNormalizer.getTextForPDF(pdfDocumentRef:targetStringLength:)(CGPDFDocument *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int64_t NumberOfPages;
  id v7;
  size_t v8;
  void *v9;
  CGPDFPage *v10;
  CGPDFPage *v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;

  v4 = type metadata accessor for Logger();
  v23 = *(_QWORD *)(v4 - 8);
  v24 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v22 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  NumberOfPages = CGPDFDocumentGetNumberOfPages(a1);
  v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16A8]), sel_init);
  if (NumberOfPages >= 1)
  {
    v8 = 1;
    while ((uint64_t)objc_msgSend(v7, sel_length) < a2)
    {
      v10 = CGPDFDocumentGetPage(a1, v8);
      if (!v10)
      {
        v18 = v22;
        Logger.init()();
        v19 = Logger.logObject.getter();
        v20 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v19, v20))
        {
          v21 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)v21 = 134217984;
          v25 = v8;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_2282CC000, v19, v20, "Error while reading page %ld in PDF", v21, 0xCu);
          MEMORY[0x22E2B117C](v21, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v23 + 8))(v18, v24);
        break;
      }
      v11 = v10;
      v12 = (void *)CGPDFPageCopyString();
      v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v15 = v14;

      v16 = v8 + 1;
      if (__OFADD__(v8, 1))
      {
        __break(1u);
        return;
      }
      v17 = HIBYTE(v15) & 0xF;
      if ((v15 & 0x2000000000000000) == 0)
        v17 = v13 & 0xFFFFFFFFFFFFLL;
      if (v17)
      {
        v9 = (void *)MEMORY[0x22E2AF8EC](v13, v15);
        swift_bridgeObjectRelease();
        objc_msgSend(v7, sel_appendString_, v9);

      }
      else
      {
        swift_bridgeObjectRelease();
      }

      ++v8;
      if (NumberOfPages < v16)
        break;
    }
  }
  String.init(_:)(v7);
}

unint64_t lazy protocol witness table accessor for type PDFNormalizationError and conformance PDFNormalizationError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PDFNormalizationError and conformance PDFNormalizationError;
  if (!lazy protocol witness table cache variable for type PDFNormalizationError and conformance PDFNormalizationError)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for PDFNormalizationError, &type metadata for PDFNormalizationError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PDFNormalizationError and conformance PDFNormalizationError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PDFNormalizationError and conformance PDFNormalizationError;
  if (!lazy protocol witness table cache variable for type PDFNormalizationError and conformance PDFNormalizationError)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for PDFNormalizationError, &type metadata for PDFNormalizationError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PDFNormalizationError and conformance PDFNormalizationError);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PDFNormalizationError(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for PDFNormalizationError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_2283026B8 + 4 * asc_2284C1D40[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_2283026D8 + 4 * byte_2284C1D45[v4]))();
}

_BYTE *sub_2283026B8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_2283026D8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2283026E0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2283026E8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2283026F0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2283026F8(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t getEnumTag for PDFNormalizationError()
{
  return 0;
}

ValueMetadata *type metadata accessor for PDFNormalizationError()
{
  return &type metadata for PDFNormalizationError;
}

ValueMetadata *type metadata accessor for PDFDocumentNormalizer()
{
  return &type metadata for PDFDocumentNormalizer;
}

unint64_t static DUWordPieceTokenizerSpecification.phaseID.getter()
{
  return 0xD000000000000019;
}

uint64_t DUWordPieceTokenizerSpecification.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t DUWordPieceTokenizerSpecification.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t DUWordPieceTokenizerSpecification.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t DUWordPieceTokenizerSpecification.init()()
{
  uint64_t v0;

  return v0;
}

unint64_t protocol witness for static DUProcessingPhaseSpecification.phaseID.getter in conformance DUWordPieceTokenizerSpecification()
{
  return 0xD000000000000019;
}

uint64_t type metadata accessor for DUWordPieceTokenizerSpecification()
{
  return objc_opt_self();
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v8 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (_QWORD *)(v2[7] + 16 * result);
    *v12 = v8;
    v12[1] = v7;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, BMTextUnderstandingPoemBufferExtraction>);
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v6, (uint64_t)&v15, &demangling cache variable for type metadata for (String, Any));
    v7 = v15;
    v8 = v16;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, Set<String>>);
}

{
  _QWORD *v2;
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data?>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (unint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v7 = *(v4 - 1);
    v8 = *v4;
    swift_bridgeObjectRetain();
    outlined copy of Data?(v7, v8);
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (uint64_t *)(v2[7] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Result<Any?, Error>>);
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v6, (uint64_t)&v15, &demangling cache variable for type metadata for (String, Result<Any?, Error>));
    v7 = v15;
    v8 = v16;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)&v17, v3[7] + 40 * result, &demangling cache variable for type metadata for Result<Any?, Error>);
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 56;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PoemMessageThread>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_retain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Int>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PoemCooccurrenceCounts>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (__int128 *)(a1 + 64);
  while (1)
  {
    v5 = *((_QWORD *)v4 - 4);
    v6 = *((_QWORD *)v4 - 3);
    v18 = *v4;
    v19 = *(v4 - 1);
    v16 = v4[2];
    v17 = v4[1];
    v15 = v4[3];
    v7 = *((_QWORD *)v4 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    v11 = v2[7] + 88 * result;
    *(_OWORD *)v11 = v19;
    *(_OWORD *)(v11 + 16) = v18;
    *(_OWORD *)(v11 + 32) = v17;
    *(_OWORD *)(v11 + 48) = v16;
    *(_OWORD *)(v11 + 64) = v15;
    *(_QWORD *)(v11 + 80) = v7;
    v12 = v2[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v2[2] = v14;
    v4 = (__int128 *)((char *)v4 + 104);
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, [Int : Int]>);
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (eid: String, confidence: Double)>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 64);
  while (1)
  {
    v5 = *(v4 - 4);
    v6 = *(v4 - 3);
    v7 = *(v4 - 2);
    v8 = *(v4 - 1);
    v9 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v2[6] + 16 * result);
    *v12 = v5;
    v12[1] = v6;
    v13 = (_QWORD *)(v2[7] + 24 * result);
    *v13 = v7;
    v13[1] = v8;
    v13[2] = v9;
    v14 = v2[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v2[2] = v16;
    v4 += 5;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, BMTextUnderstandingPoem>);
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  unint64_t result;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSTextCheckingKey, String>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 1);
    v6 = *v4;
    v7 = (id)*(v4 - 2);
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v7);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v2[6] + 8 * result) = v7;
    v10 = (_QWORD *)(v2[7] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t result;
  char v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PoemEntityCounts>);
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v20 = v2 + 64;
  swift_retain();
  v5 = (uint64_t *)(a1 + 80);
  while (1)
  {
    v6 = *(v5 - 6);
    v7 = *(v5 - 5);
    v9 = *(v5 - 4);
    v8 = *(v5 - 3);
    v10 = *(v5 - 2);
    v11 = *(v5 - 1);
    v12 = *v5;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
    if ((v14 & 1) != 0)
      break;
    *(_QWORD *)(v20 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v15 = (uint64_t *)(v3[6] + 16 * result);
    *v15 = v6;
    v15[1] = v7;
    v16 = (_QWORD *)(v3[7] + 40 * result);
    *v16 = v9;
    v16[1] = v8;
    v16[2] = v10;
    v16[3] = v11;
    v16[4] = v12;
    v17 = v3[2];
    v18 = __OFADD__(v17, 1);
    v19 = v17 + 1;
    if (v18)
      goto LABEL_11;
    v5 += 7;
    v3[2] = v19;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Bool>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_BYTE *)(a1 + 48);
  while (1)
  {
    v5 = *((_QWORD *)v4 - 2);
    v6 = *((_QWORD *)v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_BYTE *)(v2[7] + result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4 += 24;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Swift.AnyObject>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, UInt8>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_BYTE *)(a1 + 48);
  while (1)
  {
    v5 = *((_QWORD *)v4 - 2);
    v6 = *((_QWORD *)v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_BYTE *)(v2[7] + result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4 += 24;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Double>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, [Double]>);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t result;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int64, DocumentUnderstanding_HiddenLayerOutput));
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (uint64_t *)((char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int64, DocumentUnderstanding_HiddenLayerOutput>);
    v7 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    v8 = (uint64_t)v5 + *(int *)(v2 + 48);
    v9 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v10 = *(_QWORD *)(v3 + 72);
    while (1)
    {
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v9, (uint64_t)v5, &demangling cache variable for type metadata for (Int64, DocumentUnderstanding_HiddenLayerOutput));
      v11 = *v5;
      result = specialized __RawDictionaryStorage.find<A>(_:)(*v5);
      if ((v13 & 1) != 0)
        break;
      v14 = result;
      *(_QWORD *)((char *)v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v7[6] + 8 * result) = v11;
      v15 = v7[7];
      v16 = type metadata accessor for DocumentUnderstanding_HiddenLayerOutput(0);
      result = outlined init with take of DocumentUnderstanding_HiddenLayerOutput(v8, v15 + *(_QWORD *)(*(_QWORD *)(v16 - 8) + 72) * v14);
      v17 = v7[2];
      v18 = __OFADD__(v17, 1);
      v19 = v17 + 1;
      if (v18)
        goto LABEL_10;
      v7[2] = v19;
      v9 += v10;
      if (!--v6)
        return (unint64_t)v7;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, Int>);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      v5 = *(i - 1);
      v6 = *i;
      result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v9 = 8 * result;
      *(_QWORD *)(v3[6] + v9) = v5;
      *(_QWORD *)(v3[7] + v9) = v6;
      v10 = v3[2];
      v11 = __OFADD__(v10, 1);
      v12 = v10 + 1;
      if (v11)
        goto LABEL_10;
      v3[2] = v12;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char v16;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4B00];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt8, String>);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = *(_BYTE *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  v9 = (_QWORD *)(a1 + 72);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v3[6] + result) = v4;
    v10 = (_QWORD *)(v3[7] + 16 * result);
    *v10 = v6;
    v10[1] = v5;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      break;
    v3[2] = v13;
    if (!--v1)
      goto LABEL_8;
    v14 = v9 + 3;
    v4 = *((_BYTE *)v9 - 16);
    v6 = *(v9 - 1);
    v15 = *v9;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
    v9 = v14;
    v5 = v15;
    if ((v16 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (void **)(a1 + 48);
  while (1)
  {
    v6 = (uint64_t)*(v5 - 2);
    v7 = (uint64_t)*(v5 - 1);
    v8 = *v5;
    swift_bridgeObjectRetain();
    v9 = v8;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v3[6] + 16 * result);
    *v12 = v6;
    v12[1] = v7;
    *(_QWORD *)(v3[7] + 8 * result) = v9;
    v13 = v3[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v3[2] = v15;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v6 = *(v5 - 2);
    v7 = *(v5 - 1);
    v8 = *v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v6;
    v11[1] = v7;
    *(_QWORD *)(v3[7] + 8 * result) = v8;
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t specialized DUProcessingPhaseSpecification.outputFromRequest(request:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 184) = a1;
  *(_QWORD *)(v2 + 192) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 176) = a1;
  *(_QWORD *)(v2 + 184) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 176) = a1;
  *(_QWORD *)(v2 + 184) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 176) = a1;
  *(_QWORD *)(v2 + 184) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 176) = a1;
  *(_QWORD *)(v2 + 184) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 176) = a1;
  *(_QWORD *)(v2 + 184) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 176) = a1;
  *(_QWORD *)(v2 + 184) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 176) = a1;
  *(_QWORD *)(v2 + 184) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 176) = a1;
  *(_QWORD *)(v2 + 184) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 176) = a1;
  *(_QWORD *)(v2 + 184) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 176) = a1;
  *(_QWORD *)(v2 + 184) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 176) = a1;
  *(_QWORD *)(v2 + 184) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 176) = a1;
  *(_QWORD *)(v2 + 184) = v1;
  return swift_task_switch();
}

uint64_t specialized DUProcessingPhaseSpecification.outputFromRequest(request:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD *, _QWORD *);

  v2 = v0[23];
  v1 = v0[24];
  v3 = type metadata accessor for DUConcatenatedDocumentTextSpecification();
  v0[2] = v1;
  v0[5] = v3;
  v0[6] = &protocol witness table for DUConcatenatedDocumentTextSpecification;
  v6 = (uint64_t (*)(_QWORD *, _QWORD *))(**(int **)(*(_QWORD *)v2 + 232)
                                                  + *(_QWORD *)(*(_QWORD *)v2 + 232));
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc();
  v0[25] = v4;
  *v4 = v0;
  v4[1] = specialized DUProcessingPhaseSpecification.outputFromRequest(request:);
  return v6(v0 + 7, v0 + 2);
}

{
  _QWORD *v0;
  uint64_t v1;

  v1 = *v0 + 16;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1Tm(v1);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 56, v0 + 96, &demangling cache variable for type metadata for Result<Any?, Error>);
  if ((*(_BYTE *)(v0 + 128) & 1) != 0)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 96, &demangling cache variable for type metadata for Result<Any?, Error>);
LABEL_5:
    v2 = 0;
    v1 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
  }
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 96, v0 + 136, &demangling cache variable for type metadata for Any?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  if (!swift_dynamicCast())
    goto LABEL_5;
  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 176);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD *, _QWORD *);

  v2 = v0[22];
  v1 = v0[23];
  v3 = type metadata accessor for DUCreateContextRequestSpecification();
  v0[2] = v1;
  v0[5] = v3;
  v0[6] = &protocol witness table for DUCreateContextRequestSpecification;
  v6 = (uint64_t (*)(_QWORD *, _QWORD *))(**(int **)(*(_QWORD *)v2 + 232)
                                                  + *(_QWORD *)(*(_QWORD *)v2 + 232));
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc();
  v0[24] = v4;
  *v4 = v0;
  v4[1] = specialized DUProcessingPhaseSpecification.outputFromRequest(request:);
  return v6(v0 + 7, v0 + 2);
}

{
  _QWORD *v0;
  uint64_t v1;

  v1 = *v0 + 16;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1Tm(v1);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 56, v0 + 96, &demangling cache variable for type metadata for Result<Any?, Error>);
  if ((*(_BYTE *)(v0 + 128) & 1) != 0)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 96, &demangling cache variable for type metadata for Result<Any?, Error>);
    v1 = 0;
  }
  else
  {
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 96, v0 + 136, &demangling cache variable for type metadata for Any?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
    type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for CKContextRequest);
    if (swift_dynamicCast())
      v1 = *(_QWORD *)(v0 + 168);
    else
      v1 = 0;
  }
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD *, _QWORD *);

  v2 = v0[22];
  v1 = v0[23];
  v3 = type metadata accessor for DUBackboneEncodingSmolBERToSpecification();
  v0[2] = v1;
  v0[5] = v3;
  v0[6] = &protocol witness table for DUBackboneEncodingSmolBERToSpecification;
  v6 = (uint64_t (*)(_QWORD *, _QWORD *))(**(int **)(*(_QWORD *)v2 + 232)
                                                  + *(_QWORD *)(*(_QWORD *)v2 + 232));
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc();
  v0[24] = v4;
  *v4 = v0;
  v4[1] = specialized DUProcessingPhaseSpecification.outputFromRequest(request:);
  return v6(v0 + 7, v0 + 2);
}

{
  _QWORD *v0;
  uint64_t v1;

  v1 = *v0 + 16;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1Tm(v1);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 56, v0 + 96, &demangling cache variable for type metadata for Result<Any?, Error>);
  if ((*(_BYTE *)(v0 + 128) & 1) != 0)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 96, &demangling cache variable for type metadata for Result<Any?, Error>);
    v1 = 0;
  }
  else
  {
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 96, v0 + 136, &demangling cache variable for type metadata for Any?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
    type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for MLDictionaryFeatureProvider);
    if (swift_dynamicCast())
      v1 = *(_QWORD *)(v0 + 168);
    else
      v1 = 0;
  }
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD *, _QWORD *);

  v2 = v0[28];
  v1 = v0[29];
  v3 = type metadata accessor for DUWordPieceTokenizerSpecification();
  v0[8] = v1;
  v0[11] = v3;
  v0[12] = &protocol witness table for DUWordPieceTokenizerSpecification;
  v6 = (uint64_t (*)(_QWORD *, _QWORD *))(**(int **)(*(_QWORD *)v2 + 232)
                                                  + *(_QWORD *)(*(_QWORD *)v2 + 232));
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc();
  v0[30] = v4;
  *v4 = v0;
  v4[1] = specialized DUProcessingPhaseSpecification.outputFromRequest(request:);
  return v6(v0 + 13, v0 + 8);
}

{
  _QWORD *v0;
  uint64_t v1;

  v1 = *v0 + 64;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1Tm(v1);
  return swift_task_switch();
}

{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  int v4;
  _OWORD *v5;

  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 104, v0 + 144, &demangling cache variable for type metadata for Result<Any?, Error>);
  if ((*(_BYTE *)(v0 + 176) & 1) != 0)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 144, &demangling cache variable for type metadata for Result<Any?, Error>);
    v1 = 0uLL;
    v2 = 0uLL;
    v3 = 0uLL;
  }
  else
  {
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 144, v0 + 184, &demangling cache variable for type metadata for Any?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
    v4 = swift_dynamicCast();
    v1 = 0uLL;
    v2 = 0uLL;
    v3 = 0uLL;
    if (v4)
    {
      v1 = *(_OWORD *)(v0 + 16);
      v2 = *(_OWORD *)(v0 + 32);
      v3 = *(_OWORD *)(v0 + 48);
    }
  }
  v5 = *(_OWORD **)(v0 + 216);
  *v5 = v1;
  v5[1] = v2;
  v5[2] = v3;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD *, _QWORD *);

  v2 = v0[22];
  v1 = v0[23];
  v3 = type metadata accessor for DUFoundInEventHTMLPreprocessingSpecification();
  v0[2] = v1;
  v0[5] = v3;
  v0[6] = &protocol witness table for DUFoundInEventHTMLPreprocessingSpecification;
  v6 = (uint64_t (*)(_QWORD *, _QWORD *))(**(int **)(*(_QWORD *)v2 + 232)
                                                  + *(_QWORD *)(*(_QWORD *)v2 + 232));
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc();
  v0[24] = v4;
  *v4 = v0;
  v4[1] = specialized DUProcessingPhaseSpecification.outputFromRequest(request:);
  return v6(v0 + 7, v0 + 2);
}

{
  _QWORD *v0;
  uint64_t v1;

  v1 = *v0 + 16;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1Tm(v1);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 56, v0 + 96, &demangling cache variable for type metadata for Result<Any?, Error>);
  if ((*(_BYTE *)(v0 + 128) & 1) != 0)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 96, &demangling cache variable for type metadata for Result<Any?, Error>);
    v1 = 0;
  }
  else
  {
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 96, v0 + 136, &demangling cache variable for type metadata for Any?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
    type metadata accessor for DUDocument();
    if (swift_dynamicCast())
      v1 = *(_QWORD *)(v0 + 168);
    else
      v1 = 0;
  }
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD *, _QWORD *);

  v2 = v0[22];
  v1 = v0[23];
  v3 = type metadata accessor for DUFoundInEventDDSpecification();
  v0[2] = v1;
  v0[5] = v3;
  v0[6] = &protocol witness table for DUFoundInEventDDSpecification;
  v6 = (uint64_t (*)(_QWORD *, _QWORD *))(**(int **)(*(_QWORD *)v2 + 232)
                                                  + *(_QWORD *)(*(_QWORD *)v2 + 232));
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc();
  v0[24] = v4;
  *v4 = v0;
  v4[1] = specialized DUProcessingPhaseSpecification.outputFromRequest(request:);
  return v6(v0 + 7, v0 + 2);
}

{
  _QWORD *v0;
  uint64_t v1;

  v1 = *v0 + 16;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1Tm(v1);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 56, v0 + 96, &demangling cache variable for type metadata for Result<Any?, Error>);
  if ((*(_BYTE *)(v0 + 128) & 1) != 0)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 96, &demangling cache variable for type metadata for Result<Any?, Error>);
    v1 = 0;
  }
  else
  {
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 96, v0 + 136, &demangling cache variable for type metadata for Any?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [FoundInEventDataDetectorsOutput]);
    if (swift_dynamicCast())
      v1 = *(_QWORD *)(v0 + 168);
    else
      v1 = 0;
  }
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD *, _QWORD *);

  v2 = v0[22];
  v1 = v0[23];
  v3 = type metadata accessor for DUPosTaggingSpecification();
  v0[2] = v1;
  v0[5] = v3;
  v0[6] = &protocol witness table for DUPosTaggingSpecification;
  v6 = (uint64_t (*)(_QWORD *, _QWORD *))(**(int **)(*(_QWORD *)v2 + 232)
                                                  + *(_QWORD *)(*(_QWORD *)v2 + 232));
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc();
  v0[24] = v4;
  *v4 = v0;
  v4[1] = specialized DUProcessingPhaseSpecification.outputFromRequest(request:);
  return v6(v0 + 7, v0 + 2);
}

{
  _QWORD *v0;
  uint64_t v1;

  v1 = *v0 + 16;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1Tm(v1);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 56, v0 + 96, &demangling cache variable for type metadata for Result<Any?, Error>);
  if ((*(_BYTE *)(v0 + 128) & 1) != 0)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 96, &demangling cache variable for type metadata for Result<Any?, Error>);
    v1 = 0;
  }
  else
  {
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 96, v0 + 136, &demangling cache variable for type metadata for Any?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PosTaggingResult]);
    if (swift_dynamicCast())
      v1 = *(_QWORD *)(v0 + 168);
    else
      v1 = 0;
  }
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD *, _QWORD *);

  v2 = v0[22];
  v1 = v0[23];
  v3 = type metadata accessor for DUUserInterfaceUnderstandingSpecification();
  v0[2] = v1;
  v0[5] = v3;
  v0[6] = &protocol witness table for DUUserInterfaceUnderstandingSpecification;
  v6 = (uint64_t (*)(_QWORD *, _QWORD *))(**(int **)(*(_QWORD *)v2 + 232)
                                                  + *(_QWORD *)(*(_QWORD *)v2 + 232));
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc();
  v0[24] = v4;
  *v4 = v0;
  v4[1] = specialized DUProcessingPhaseSpecification.outputFromRequest(request:);
  return v6(v0 + 7, v0 + 2);
}

{
  _QWORD *v0;
  uint64_t v1;

  v1 = *v0 + 16;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1Tm(v1);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 56, v0 + 96, &demangling cache variable for type metadata for Result<Any?, Error>);
  if ((*(_BYTE *)(v0 + 128) & 1) != 0)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 96, &demangling cache variable for type metadata for Result<Any?, Error>);
    v1 = 0;
  }
  else
  {
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 96, v0 + 136, &demangling cache variable for type metadata for Any?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DUUserInterfaceUnderstandingResult]);
    if (swift_dynamicCast())
      v1 = *(_QWORD *)(v0 + 168);
    else
      v1 = 0;
  }
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD *, _QWORD *);

  v2 = v0[22];
  v1 = v0[23];
  v3 = type metadata accessor for DUPoemSpecification();
  v0[2] = v1;
  v0[5] = v3;
  v0[6] = &protocol witness table for DUPoemSpecification;
  v6 = (uint64_t (*)(_QWORD *, _QWORD *))(**(int **)(*(_QWORD *)v2 + 232)
                                                  + *(_QWORD *)(*(_QWORD *)v2 + 232));
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc();
  v0[24] = v4;
  *v4 = v0;
  v4[1] = specialized DUProcessingPhaseSpecification.outputFromRequest(request:);
  return v6(v0 + 7, v0 + 2);
}

{
  _QWORD *v0;
  uint64_t v1;

  v1 = *v0 + 16;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1Tm(v1);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 56, v0 + 96, &demangling cache variable for type metadata for Result<Any?, Error>);
  if ((*(_BYTE *)(v0 + 128) & 1) != 0)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 96, &demangling cache variable for type metadata for Result<Any?, Error>);
    v1 = 0;
  }
  else
  {
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 96, v0 + 136, &demangling cache variable for type metadata for Any?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [BMTextUnderstandingPoemBufferExtraction]);
    if (swift_dynamicCast())
      v1 = *(_QWORD *)(v0 + 168);
    else
      v1 = 0;
  }
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD *, _QWORD *);

  v2 = v0[22];
  v1 = v0[23];
  v3 = type metadata accessor for DUFoundInEventSpecification();
  v0[2] = v1;
  v0[5] = v3;
  v0[6] = &protocol witness table for DUFoundInEventSpecification;
  v6 = (uint64_t (*)(_QWORD *, _QWORD *))(**(int **)(*(_QWORD *)v2 + 232)
                                                  + *(_QWORD *)(*(_QWORD *)v2 + 232));
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc();
  v0[24] = v4;
  *v4 = v0;
  v4[1] = specialized DUProcessingPhaseSpecification.outputFromRequest(request:);
  return v6(v0 + 7, v0 + 2);
}

{
  _QWORD *v0;
  uint64_t v1;

  v1 = *v0 + 16;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1Tm(v1);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 56, v0 + 96, &demangling cache variable for type metadata for Result<Any?, Error>);
  if ((*(_BYTE *)(v0 + 128) & 1) != 0)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 96, &demangling cache variable for type metadata for Result<Any?, Error>);
    v1 = 0;
  }
  else
  {
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 96, v0 + 136, &demangling cache variable for type metadata for Any?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
    type metadata accessor for DUFoundInEventResult();
    if (swift_dynamicCast())
      v1 = *(_QWORD *)(v0 + 168);
    else
      v1 = 0;
  }
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD *, _QWORD *);

  v2 = v0[22];
  v1 = v0[23];
  v3 = type metadata accessor for DULanguageTaggingSpecification();
  v0[2] = v1;
  v0[5] = v3;
  v0[6] = &protocol witness table for DULanguageTaggingSpecification;
  v6 = (uint64_t (*)(_QWORD *, _QWORD *))(**(int **)(*(_QWORD *)v2 + 232)
                                                  + *(_QWORD *)(*(_QWORD *)v2 + 232));
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc();
  v0[24] = v4;
  *v4 = v0;
  v4[1] = specialized DUProcessingPhaseSpecification.outputFromRequest(request:);
  return v6(v0 + 7, v0 + 2);
}

{
  _QWORD *v0;
  uint64_t v1;

  v1 = *v0 + 16;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1Tm(v1);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 56, v0 + 96, &demangling cache variable for type metadata for Result<Any?, Error>);
  if ((*(_BYTE *)(v0 + 128) & 1) != 0)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 96, &demangling cache variable for type metadata for Result<Any?, Error>);
    v1 = 0;
  }
  else
  {
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 96, v0 + 136, &demangling cache variable for type metadata for Any?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    if (swift_dynamicCast())
      v1 = *(_QWORD *)(v0 + 168);
    else
      v1 = 0;
  }
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD *, _QWORD *);

  v2 = v0[22];
  v1 = v0[23];
  v3 = type metadata accessor for DUStructuredExtractionSpecification();
  v0[2] = v1;
  v0[5] = v3;
  v0[6] = &protocol witness table for DUStructuredExtractionSpecification;
  v6 = (uint64_t (*)(_QWORD *, _QWORD *))(**(int **)(*(_QWORD *)v2 + 232)
                                                  + *(_QWORD *)(*(_QWORD *)v2 + 232));
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc();
  v0[24] = v4;
  *v4 = v0;
  v4[1] = specialized DUProcessingPhaseSpecification.outputFromRequest(request:);
  return v6(v0 + 7, v0 + 2);
}

{
  _QWORD *v0;
  uint64_t v1;

  v1 = *v0 + 16;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1Tm(v1);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 56, v0 + 96, &demangling cache variable for type metadata for Result<Any?, Error>);
  if ((*(_BYTE *)(v0 + 128) & 1) != 0)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 96, &demangling cache variable for type metadata for Result<Any?, Error>);
    v1 = 0;
  }
  else
  {
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 96, v0 + 136, &demangling cache variable for type metadata for Any?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DUStructuredExtractionResult]);
    if (swift_dynamicCast())
      v1 = *(_QWORD *)(v0 + 168);
    else
      v1 = 0;
  }
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD *, _QWORD *);

  v2 = v0[22];
  v1 = v0[23];
  v3 = type metadata accessor for DUCategoryClassificationSpecification();
  v0[2] = v1;
  v0[5] = v3;
  v0[6] = &protocol witness table for DUCategoryClassificationSpecification;
  v6 = (uint64_t (*)(_QWORD *, _QWORD *))(**(int **)(*(_QWORD *)v2 + 232)
                                                  + *(_QWORD *)(*(_QWORD *)v2 + 232));
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc();
  v0[24] = v4;
  *v4 = v0;
  v4[1] = specialized DUProcessingPhaseSpecification.outputFromRequest(request:);
  return v6(v0 + 7, v0 + 2);
}

{
  _QWORD *v0;
  uint64_t v1;

  v1 = *v0 + 16;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1Tm(v1);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 56, v0 + 96, &demangling cache variable for type metadata for Result<Any?, Error>);
  if ((*(_BYTE *)(v0 + 128) & 1) != 0)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 96, &demangling cache variable for type metadata for Result<Any?, Error>);
    v1 = 0;
  }
  else
  {
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 96, v0 + 136, &demangling cache variable for type metadata for Any?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DUCategoryResult]);
    if (swift_dynamicCast())
      v1 = *(_QWORD *)(v0 + 168);
    else
      v1 = 0;
  }
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD *, _QWORD *);

  v2 = v0[22];
  v1 = v0[23];
  v3 = type metadata accessor for DUWikipediaTopicDetectionSpecification();
  v0[2] = v1;
  v0[5] = v3;
  v0[6] = &protocol witness table for DUWikipediaTopicDetectionSpecification;
  v6 = (uint64_t (*)(_QWORD *, _QWORD *))(**(int **)(*(_QWORD *)v2 + 232)
                                                  + *(_QWORD *)(*(_QWORD *)v2 + 232));
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc();
  v0[24] = v4;
  *v4 = v0;
  v4[1] = specialized DUProcessingPhaseSpecification.outputFromRequest(request:);
  return v6(v0 + 7, v0 + 2);
}

{
  _QWORD *v0;
  uint64_t v1;

  v1 = *v0 + 16;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1Tm(v1);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 56, v0 + 96, &demangling cache variable for type metadata for Result<Any?, Error>);
  if ((*(_BYTE *)(v0 + 128) & 1) != 0)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 96, &demangling cache variable for type metadata for Result<Any?, Error>);
    v1 = 0;
  }
  else
  {
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 96, v0 + 136, &demangling cache variable for type metadata for Any?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DUWikipediaTopicResult]);
    if (swift_dynamicCast())
      v1 = *(_QWORD *)(v0 + 168);
    else
      v1 = 0;
  }
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t specialized DUProcessingPhaseSpecification.outputFromRequest(request:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[28] = a2;
  v3[29] = v2;
  v3[27] = a1;
  return swift_task_switch();
}

NLLanguage one-time initialization function for NLContextualEmbeddingLanguage()
{
  NLContextualEmbeddingLanguage = (NLLanguage)*MEMORY[0x24BDDFC08];
  return NLContextualEmbeddingLanguage;
}

void *DUFoundInEventMultilingualBERTImplementation.embedding.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 16);
  v2 = v1;
  return v1;
}

unint64_t static DUFoundInEventMultilingualBERTImplementation.implementationID.getter()
{
  return 0xD00000000000002ALL;
}

uint64_t static DUFoundInEventMultilingualBERTImplementation.specification.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for DUFoundInEventSpecification();
  result = swift_allocObject();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for DUFoundInEventSpecification;
  *a1 = result;
  return result;
}

void *static DUFoundInEventMultilingualBERTImplementation.implementationAttributes.getter()
{
  return &outlined read-only object #0 of static DUFoundInEventMultilingualBERTImplementation.implementationAttributes.getter;
}

_QWORD *DUFoundInEventMultilingualBERTImplementation.postprocessModelOutput(modelOutput:engineConfiguration:)(uint64_t *a1, void *a2)
{
  objc_class *v4;
  id v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  void *v14;
  NSDictionary v15;
  id v16;
  char v17;
  unint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  id v27;
  void *v28;
  NSDictionary v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  void (*v36)(uint64_t);
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  unint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  id v46;
  void *v47;
  Class isa;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t *v54;
  _QWORD *v55;
  void (*v56)(uint64_t);
  uint64_t v57;
  _QWORD *v58;
  void (*v59)(uint64_t, uint64_t);
  unint64_t v60;
  id v61;
  void *v62;
  Class v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  unint64_t v69;
  id v70;
  void *v71;
  NSDictionary v72;
  id v73;
  char v74;
  unint64_t v75;
  id v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  unint64_t v83;
  id v84;
  void *v85;
  NSDictionary v86;
  id v87;
  char v88;
  unint64_t v89;
  id v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  unint64_t v97;
  id v98;
  void *v99;
  NSDictionary v100;
  id v101;
  char v102;
  unint64_t v103;
  id v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  unint64_t v111;
  id v112;
  void *v113;
  NSDictionary v114;
  id v115;
  char v116;
  unint64_t v117;
  id v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  unint64_t v125;
  id v126;
  void *v127;
  NSDictionary v128;
  id v129;
  char v130;
  unint64_t v131;
  id v132;
  id v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  uint64_t v138;
  unint64_t v139;
  id v140;
  void *v141;
  NSDictionary v142;
  id v143;
  char v144;
  unint64_t v145;
  id v146;
  id v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  uint64_t v152;
  unint64_t v153;
  id v154;
  void *v155;
  NSDictionary v156;
  id v157;
  char v158;
  unint64_t v159;
  id v160;
  id v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char v165;
  uint64_t v166;
  unint64_t v167;
  id v168;
  void *v169;
  NSDictionary v170;
  id v171;
  char v172;
  unint64_t v173;
  id v174;
  id v175;
  uint64_t v176;

  type metadata accessor for DUFoundInEventsPostprocessing();
  *(_QWORD *)(swift_allocObject() + 16) = a2;
  v4 = (objc_class *)type metadata accessor for DUFoundInEventResult();
  v5 = a2;
  v6 = objc_msgSend(objc_allocWithZone(v4), sel_init);
  v7 = (_QWORD *)MEMORY[0x24BEE4EA0];
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v6) + 0x130))(1);
  v8 = DUFoundInEventsPostprocessing.simpleCandidateResolutionForModelOutput(modelOutput:type:)(a1, 0x7461767265736572, 0xED000064496E6F69);
  if (!v9)
  {
    v17 = v10;
    swift_bridgeObjectRelease();
    if ((v17 & 1) == 0)
      goto LABEL_8;
    v18 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x7461767265736572, 0xED000064496E6F69, 1);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v18);
    swift_bridgeObjectRelease();
    v19 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v14 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, 0x80000002284D9F10);
    v15.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v16 = objc_msgSend(v19, sel_initWithDomain_code_userInfo_, v14, 1, v15.super.isa);
    goto LABEL_6;
  }
  v11 = v9;
  if (v9 == 1)
  {
    v12 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x7461767265736572, 0xED000064496E6F69, 0);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v12);
    swift_bridgeObjectRelease();
    v13 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v14 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, 0x80000002284D9F10);
    v15.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v16 = objc_msgSend(v13, sel_initWithDomain_code_userInfo_, v14, 0, v15.super.isa);
LABEL_6:
    v20 = v16;

    (*(void (**)(id))((*v7 & *v6) + 0x148))(v20);
    goto LABEL_8;
  }
  v21 = v8;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))((*v7 & *v6) + 0x160))(v21, v11);
LABEL_8:
  v22 = DUFoundInEventsPostprocessing.addressValuesForModelOutput(modelOutput:startAddress:)(a1, 1);
  if (v23 == 1)
  {
    v26 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x6464417472617473, 0xEC00000073736572, 0);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v26);
    swift_bridgeObjectRelease();
    v27 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v28 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, 0x80000002284D9F10);
    v29.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v30 = objc_msgSend(v27, sel_initWithDomain_code_userInfo_, v28, 0, v29.super.isa);
LABEL_10:
    v31 = v30;

    (*(void (**)(id))((*v7 & *v6) + 0x238))(v31);
    goto LABEL_19;
  }
  v32 = v22;
  v33 = v23;
  v34 = v24;
  v35 = v25;
  if (v24)
  {
    v36 = *(void (**)(uint64_t))((*v7 & *v6) + 0x268);
    v37 = swift_bridgeObjectRetain();
    v36(v37);
    if (!v33)
      goto LABEL_18;
  }
  else if (!v23)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  v38 = *(void (**)(uint64_t, uint64_t))((*v7 & *v6) + 0x250);
  swift_bridgeObjectRetain();
  v38(v32, v33);
  if (!v34)
    goto LABEL_18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v35 & 1) != 0)
  {
    v39 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x6464417472617473, 0xEC00000073736572, 1);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v39);
    swift_bridgeObjectRelease();
    v40 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v28 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, 0x80000002284D9F10);
    v29.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v30 = objc_msgSend(v40, sel_initWithDomain_code_userInfo_, v28, 1, v29.super.isa);
    goto LABEL_10;
  }
LABEL_19:
  v41 = DUFoundInEventsPostprocessing.addressValuesForModelOutput(modelOutput:startAddress:)(a1, 0);
  if (v42 == 1)
  {
    v45 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x6572646441646E65, 0xEA00000000007373, 0);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v45);
    swift_bridgeObjectRelease();
    v46 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v47 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, 0x80000002284D9F10);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v49 = objc_msgSend(v46, sel_initWithDomain_code_userInfo_, v47, 0, isa);

    (*(void (**)(id))((*v7 & *v6) + 0x280))(v49);
    goto LABEL_29;
  }
  v50 = v41;
  v51 = v42;
  v52 = v43;
  v53 = v44;
  v54 = a1;
  if (v43)
  {
    v55 = v7;
    v56 = *(void (**)(uint64_t))((*v7 & *v6) + 0x2B0);
    v57 = swift_bridgeObjectRetain();
    v56(v57);
    v7 = v55;
    if (!v51)
      goto LABEL_28;
  }
  else if (!v42)
  {
LABEL_28:
    swift_bridgeObjectRelease();
    a1 = v54;
    goto LABEL_29;
  }
  v58 = v7;
  v59 = *(void (**)(uint64_t, uint64_t))((*v7 & *v6) + 0x298);
  swift_bridgeObjectRetain();
  v59(v50, v51);
  v7 = v58;
  if (!v52)
    goto LABEL_28;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1 = v54;
  if ((v53 & 1) != 0)
  {
    v60 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x6572646441646E65, 0xEA00000000007373, 1);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v60);
    swift_bridgeObjectRelease();
    v61 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v62 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, 0x80000002284D9F10);
    v63 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v64 = objc_msgSend(v61, sel_initWithDomain_code_userInfo_, v62, 1, v63);

    (*(void (**)(id))((*v7 & *v6) + 0x280))(v64);
  }
LABEL_29:
  v65 = DUFoundInEventsPostprocessing.dateStringForModelOutput(modelOutput:startDate:)(a1, 1);
  if (!v66)
  {
    v74 = v67;
    swift_bridgeObjectRelease();
    if ((v74 & 1) == 0)
      goto LABEL_36;
    v75 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x7461447472617473, 0xE900000000000065, 1);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v75);
    swift_bridgeObjectRelease();
    v76 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v71 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, 0x80000002284D9F10);
    v72.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v73 = objc_msgSend(v76, sel_initWithDomain_code_userInfo_, v71, 1, v72.super.isa);
    goto LABEL_34;
  }
  v68 = v66;
  if (v66 == 1)
  {
    v69 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x7461447472617473, 0xE900000000000065, 0);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v69);
    swift_bridgeObjectRelease();
    v70 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v71 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, 0x80000002284D9F10);
    v72.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v73 = objc_msgSend(v70, sel_initWithDomain_code_userInfo_, v71, 0, v72.super.isa);
LABEL_34:
    v77 = v73;

    (*(void (**)(id))((*v7 & *v6) + 0x328))(v77);
    goto LABEL_36;
  }
  v78 = v65;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))((*v7 & *v6) + 0x340))(v78, v68);
LABEL_36:
  v79 = DUFoundInEventsPostprocessing.dateStringForModelOutput(modelOutput:startDate:)(a1, 0);
  if (!v80)
  {
    v88 = v81;
    swift_bridgeObjectRelease();
    if ((v88 & 1) == 0)
      goto LABEL_43;
    v89 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x65746144646E65, 0xE700000000000000, 1);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v89);
    swift_bridgeObjectRelease();
    v90 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v85 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, 0x80000002284D9F10);
    v86.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v87 = objc_msgSend(v90, sel_initWithDomain_code_userInfo_, v85, 1, v86.super.isa);
    goto LABEL_41;
  }
  v82 = v80;
  if (v80 == 1)
  {
    v83 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x65746144646E65, 0xE700000000000000, 0);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v83);
    swift_bridgeObjectRelease();
    v84 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v85 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, 0x80000002284D9F10);
    v86.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v87 = objc_msgSend(v84, sel_initWithDomain_code_userInfo_, v85, 0, v86.super.isa);
LABEL_41:
    v91 = v87;

    (*(void (**)(id))((*v7 & *v6) + 0x358))(v91);
    goto LABEL_43;
  }
  v92 = v79;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))((*v7 & *v6) + 0x370))(v92, v82);
LABEL_43:
  v93 = DUFoundInEventsPostprocessing.simpleCandidateResolutionForModelOutput(modelOutput:type:)(a1, 0x616C507472617473, 0xEA00000000006563);
  if (!v94)
  {
    v102 = v95;
    swift_bridgeObjectRelease();
    if ((v102 & 1) == 0)
      goto LABEL_50;
    v103 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x616C507472617473, 0xEA00000000006563, 1);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v103);
    swift_bridgeObjectRelease();
    v104 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v99 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, 0x80000002284D9F10);
    v100.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v101 = objc_msgSend(v104, sel_initWithDomain_code_userInfo_, v99, 1, v100.super.isa);
    goto LABEL_48;
  }
  v96 = v94;
  if (v94 == 1)
  {
    v97 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x616C507472617473, 0xEA00000000006563, 0);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v97);
    swift_bridgeObjectRelease();
    v98 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v99 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, 0x80000002284D9F10);
    v100.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v101 = objc_msgSend(v98, sel_initWithDomain_code_userInfo_, v99, 0, v100.super.isa);
LABEL_48:
    v105 = v101;

    (*(void (**)(id))((*v7 & *v6) + 0x2C8))(v105);
    goto LABEL_50;
  }
  v106 = v93;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))((*v7 & *v6) + 0x2E0))(v106, v96);
LABEL_50:
  v107 = DUFoundInEventsPostprocessing.simpleCandidateResolutionForModelOutput(modelOutput:type:)(a1, 0x6563616C50646E65, 0xE800000000000000);
  if (!v108)
  {
    v116 = v109;
    swift_bridgeObjectRelease();
    if ((v116 & 1) == 0)
      goto LABEL_57;
    v117 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x6563616C50646E65, 0xE800000000000000, 1);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v117);
    swift_bridgeObjectRelease();
    v118 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v113 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, 0x80000002284D9F10);
    v114.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v115 = objc_msgSend(v118, sel_initWithDomain_code_userInfo_, v113, 1, v114.super.isa);
    goto LABEL_55;
  }
  v110 = v108;
  if (v108 == 1)
  {
    v111 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x6563616C50646E65, 0xE800000000000000, 0);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v111);
    swift_bridgeObjectRelease();
    v112 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v113 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, 0x80000002284D9F10);
    v114.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v115 = objc_msgSend(v112, sel_initWithDomain_code_userInfo_, v113, 0, v114.super.isa);
LABEL_55:
    v119 = v115;

    (*(void (**)(id))((*v7 & *v6) + 0x2F8))(v119);
    goto LABEL_57;
  }
  v120 = v107;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))((*v7 & *v6) + 0x310))(v120, v110);
LABEL_57:
  v121 = DUFoundInEventsPostprocessing.simpleCandidateResolutionForModelOutput(modelOutput:type:)(a1, 0x7461767265736572, 0xEF656D614E6E6F69);
  if (!v122)
  {
    v130 = v123;
    swift_bridgeObjectRelease();
    if ((v130 & 1) == 0)
      goto LABEL_64;
    v131 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x7461767265736572, 0xEF656D614E6E6F69, 1);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v131);
    swift_bridgeObjectRelease();
    v132 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v127 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, 0x80000002284D9F10);
    v128.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v129 = objc_msgSend(v132, sel_initWithDomain_code_userInfo_, v127, 1, v128.super.isa);
    goto LABEL_62;
  }
  v124 = v122;
  if (v122 == 1)
  {
    v125 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x7461767265736572, 0xEF656D614E6E6F69, 0);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v125);
    swift_bridgeObjectRelease();
    v126 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v127 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, 0x80000002284D9F10);
    v128.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v129 = objc_msgSend(v126, sel_initWithDomain_code_userInfo_, v127, 0, v128.super.isa);
LABEL_62:
    v133 = v129;

    (*(void (**)(id))((*v7 & *v6) + 0x178))(v133);
    goto LABEL_64;
  }
  v134 = v121;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))((*v7 & *v6) + 0x190))(v134, v124);
LABEL_64:
  v135 = DUFoundInEventsPostprocessing.simpleCandidateResolutionForModelOutput(modelOutput:type:)(a1, 0xD000000000000013, 0x80000002284D9F50);
  if (!v136)
  {
    v144 = v137;
    swift_bridgeObjectRelease();
    if ((v144 & 1) == 0)
      goto LABEL_71;
    v145 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0xD000000000000013, 0x80000002284D9F50, 1);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v145);
    swift_bridgeObjectRelease();
    v146 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v141 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, 0x80000002284D9F10);
    v142.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v143 = objc_msgSend(v146, sel_initWithDomain_code_userInfo_, v141, 1, v142.super.isa);
    goto LABEL_69;
  }
  v138 = v136;
  if (v136 == 1)
  {
    v139 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0xD000000000000013, 0x80000002284D9F50, 0);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v139);
    swift_bridgeObjectRelease();
    v140 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v141 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, 0x80000002284D9F10);
    v142.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v143 = objc_msgSend(v140, sel_initWithDomain_code_userInfo_, v141, 0, v142.super.isa);
LABEL_69:
    v147 = v143;

    (*(void (**)(id))((*v7 & *v6) + 0x1A8))(v147);
    goto LABEL_71;
  }
  v148 = v135;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))((*v7 & *v6) + 0x1C0))(v148, v138);
LABEL_71:
  v149 = DUFoundInEventsPostprocessing.simpleCandidateResolutionForModelOutput(modelOutput:type:)(a1, 0x6D614E7473657567, 0xE900000000000065);
  if (!v150)
  {
    v158 = v151;
    swift_bridgeObjectRelease();
    if ((v158 & 1) == 0)
      goto LABEL_78;
    v159 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x6D614E7473657567, 0xE900000000000065, 1);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v159);
    swift_bridgeObjectRelease();
    v160 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v155 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, 0x80000002284D9F10);
    v156.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v157 = objc_msgSend(v160, sel_initWithDomain_code_userInfo_, v155, 1, v156.super.isa);
    goto LABEL_76;
  }
  v152 = v150;
  if (v150 == 1)
  {
    v153 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x6D614E7473657567, 0xE900000000000065, 0);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v153);
    swift_bridgeObjectRelease();
    v154 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v155 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, 0x80000002284D9F10);
    v156.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v157 = objc_msgSend(v154, sel_initWithDomain_code_userInfo_, v155, 0, v156.super.isa);
LABEL_76:
    v161 = v157;

    (*(void (**)(id))((*v7 & *v6) + 0x1D8))(v161);
    goto LABEL_78;
  }
  v162 = v149;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))((*v7 & *v6) + 0x1F0))(v162, v152);
LABEL_78:
  v163 = DUFoundInEventsPostprocessing.simpleCandidateResolutionForModelOutput(modelOutput:type:)(a1, 0x6369546569766F6DLL, 0xEF656D614E74656BLL);
  if (v164)
  {
    v166 = v164;
    if (v164 != 1)
    {
      v176 = v163;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))((*v7 & *v6) + 0x220))(v176, v166);
      goto LABEL_85;
    }
    v167 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x6369546569766F6DLL, 0xEF656D614E74656BLL, 0);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v167);
    swift_bridgeObjectRelease();
    v168 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v169 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, 0x80000002284D9F10);
    v170.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v171 = objc_msgSend(v168, sel_initWithDomain_code_userInfo_, v169, 0, v170.super.isa);
    goto LABEL_83;
  }
  v172 = v165;
  swift_bridgeObjectRelease();
  if ((v172 & 1) != 0)
  {
    v173 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x6369546569766F6DLL, 0xEF656D614E74656BLL, 1);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v173);
    swift_bridgeObjectRelease();
    v174 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v169 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, 0x80000002284D9F10);
    v170.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v171 = objc_msgSend(v174, sel_initWithDomain_code_userInfo_, v169, 1, v170.super.isa);
LABEL_83:
    v175 = v171;

    (*(void (**)(id))((*v7 & *v6) + 0x208))(v175);
  }
LABEL_85:
  swift_release();
  return v6;
}

Swift::OpaquePointer_optional __swiftcall DUFoundInEventMultilingualBERTImplementation.modelTokenOutputFromMergedTcr(input:tokenOutput:tokenOutputSectionMapping:)(Swift::String input, Swift::OpaquePointer tokenOutput, Swift::OpaquePointer tokenOutputSectionMapping)
{
  uint64_t v3;
  _QWORD *v4;
  Swift::Bool v5;
  void *v6;
  void *v7;
  Swift::OpaquePointer_optional result;

  if (*(_QWORD *)(_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySSSaySSGG_SS_AFts5NeverOTg5045_sSSSaySSGSSAAIgggoo_SS3key_AA5valuetSS_AAts5D11OIegnrzr_TRSSAFSSAFIgggoo_Tf1cn_nTf4ng_n((uint64_t)tokenOutputSectionMapping._rawValue, partial apply for closure #1 in DUFoundInEventMultilingualBERTImplementation.modelTokenOutputFromMergedTcr(input:tokenOutput:tokenOutputSectionMapping:))+ 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
    v3 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v3 = MEMORY[0x24BEE4B00];
  }
  v7 = (void *)v3;
  v4 = (_QWORD *)swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v4, 1, &v7);
  swift_bridgeObjectRelease();
  v6 = v7;
  result.value._rawValue = v6;
  result.is_nil = v5;
  return result;
}

uint64_t closure #1 in DUFoundInEventMultilingualBERTImplementation.modelTokenOutputFromMergedTcr(input:tokenOutput:tokenOutputSectionMapping:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t *v8;
  uint64_t v9;
  _QWORD v11[2];
  uint64_t v12;

  v12 = MEMORY[0x24BEE4AF8];
  v5 = *(_QWORD *)(a4 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    v8 = (uint64_t *)(a4 + 40);
    do
    {
      v9 = *v8;
      v11[0] = *(v8 - 1);
      v11[1] = v9;
      swift_bridgeObjectRetain();
      closure #1 in closure #1 in DUFoundInEventMultilingualBERTImplementation.modelTokenOutputFromMergedTcr(input:tokenOutput:tokenOutputSectionMapping:)((uint64_t)v11, a3, &v12);
      swift_bridgeObjectRelease();
      v8 += 2;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t closure #1 in closure #1 in DUFoundInEventMultilingualBERTImplementation.modelTokenOutputFromMergedTcr(input:tokenOutput:tokenOutputSectionMapping:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t *v18;

  lazy protocol witness table accessor for type String and conformance String();
  lazy protocol witness table accessor for type String and conformance String();
  if ((BidirectionalCollection<>.starts<A>(with:)() & 1) == 0)
    goto LABEL_11;
  lazy protocol witness table accessor for type String and conformance String();
  if (*(_QWORD *)(MEMORY[0x22E2AFE50](24392, 0xE200000000000000, 0x7FFFFFFFFFFFFFFFLL, 1, MEMORY[0x24BEE0D00])
                 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    MEMORY[0x22E2AFDA8](1162760014, 0xE400000000000000);
  }
  v4 = *(_QWORD *)(a2 + 16);
  if (!v4)
  {
    swift_bridgeObjectRelease();
LABEL_11:
    v8 = (_QWORD *)*a3;
    result = swift_isUniquelyReferenced_nonNull_native();
    *a3 = (uint64_t)v8;
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
      v8 = (_QWORD *)result;
      *a3 = result;
    }
    v11 = v8[2];
    v10 = v8[3];
    if (v11 >= v10 >> 1)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v8);
      v8 = (_QWORD *)result;
      *a3 = result;
    }
    v8[2] = v11 + 1;
    v12 = &v8[2 * v11];
    v12[4] = 1162760014;
    v13 = v12 + 4;
    v7 = 0xE400000000000000;
    goto LABEL_16;
  }
  v18 = a3;
  swift_bridgeObjectRetain();
  lazy protocol witness table accessor for type Substring and conformance Substring();
  v5 = (unint64_t *)(a2 + 40);
  while (1)
  {
    v6 = *(v5 - 1);
    v7 = *v5;
    swift_bridgeObjectRetain();
    if ((StringProtocol.contains<A>(_:)() & 1) != 0)
      break;
    v5 += 2;
    swift_bridgeObjectRelease();
    if (!--v4)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a3 = v18;
      goto LABEL_11;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v14 = (_QWORD *)*v18;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v18 = (uint64_t)v14;
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
    v14 = (_QWORD *)result;
    *v18 = result;
  }
  v16 = v14[2];
  v15 = v14[3];
  if (v16 >= v15 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v14);
    v14 = (_QWORD *)result;
    *v18 = result;
  }
  v14[2] = v16 + 1;
  v17 = &v14[2 * v16];
  v17[4] = v6;
  v13 = v17 + 4;
LABEL_16:
  v13[1] = v7;
  return result;
}

uint64_t DUFoundInEventMultilingualBERTImplementation.tokenizedFromTcr(inputString:mergedTcrs:)@<X0>(unint64_t a1@<X2>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  _OWORD v14[3];

  v12 = (char *)MEMORY[0x24BEE4AF8];
  v13 = (char *)MEMORY[0x24BEE4AF8];
  v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v11 = MEMORY[0x24BEE4AF8];
  v9 = 0;
  if (!(a1 >> 62))
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v4)
      goto LABEL_3;
LABEL_11:
    swift_bridgeObjectRelease();
LABEL_12:
    TokenizerOutput.init(tokenIds:attentionMask:tokenizerWordRangesUTF8:wordIds:processedInput:)();
    v8 = v14[1];
    *a2 = v14[0];
    a2[1] = v8;
    a2[2] = v14[2];
    return swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v4 = result;
  if (!result)
    goto LABEL_11;
LABEL_3:
  if (v4 >= 1)
  {
    v6 = 0;
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v7 = MEMORY[0x22E2AFF34](v6, a1);
      }
      else
      {
        v7 = *(_QWORD *)(a1 + 8 * v6 + 32);
        swift_retain();
      }
      ++v6;
      *(_QWORD *)&v14[0] = v7;
      closure #1 in DUFoundInEventMultilingualBERTImplementation.tokenizedFromTcr(inputString:mergedTcrs:)((_QWORD **)v14, &v13, &v9, &v10, &v12, &v11);
      swift_release();
    }
    while (v4 != v6);
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in DUFoundInEventMultilingualBERTImplementation.tokenizedFromTcr(inputString:mergedTcrs:)(_QWORD **a1, char **a2, uint64_t *a3, _QWORD **a4, char **a5, uint64_t *a6)
{
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t (*v27)(void);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t *v38;

  v11 = *a1;
  v12 = *a3;
  v13 = *a2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a2 = v13;
  v38 = a6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
    *a2 = v13;
  }
  v16 = (uint64_t *)*((_QWORD *)v13 + 2);
  v15 = *((_QWORD *)v13 + 3);
  if ((unint64_t)v16 >= v15 >> 1)
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), (int64_t)v16 + 1, 1, v13);
  *((_QWORD *)v13 + 2) = (char *)v16 + 1;
  *(float *)&v13[4 * (_QWORD)v16 + 32] = (float)v12;
  *a2 = v13;
  v17 = *a3;
  v18 = *a4;
  v19 = swift_isUniquelyReferenced_nonNull_native();
  *a4 = v18;
  if ((v19 & 1) == 0)
  {
    v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    *a4 = v18;
  }
  v21 = v18[2];
  v20 = v18[3];
  if (v21 >= v20 >> 1)
    v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v21 + 1, 1, v18, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  v18[2] = v21 + 1;
  v18[v21 + 4] = v17;
  *a4 = v18;
  v22 = *a5;
  v23 = swift_isUniquelyReferenced_nonNull_native();
  *a5 = v22;
  if ((v23 & 1) == 0)
  {
    v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v22 + 2) + 1, 1, v22);
    *a5 = v22;
  }
  v25 = *((_QWORD *)v22 + 2);
  v24 = *((_QWORD *)v22 + 3);
  v26 = (char *)(v25 + 1);
  if (v25 >= v24 >> 1)
    v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v24 > 1), v25 + 1, 1, v22);
  *((_QWORD *)v22 + 2) = v26;
  *(_DWORD *)&v22[4 * v25 + 32] = 0;
  *a5 = v22;
  v27 = *(uint64_t (**)(void))(*v11 + 168);
  v28 = v27();
  if (!*(_QWORD *)(v28 + 16))
  {
    __break(1u);
    goto LABEL_23;
  }
  v22 = *(char **)(v28 + 32);
  v29 = swift_bridgeObjectRelease();
  v30 = ((uint64_t (*)(uint64_t))v27)(v29);
  if (*(_QWORD *)(v30 + 16) < 2uLL)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v16 = *(uint64_t **)(v30 + 40);
  v31 = swift_bridgeObjectRelease();
  v32 = ((uint64_t (*)(uint64_t))v27)(v31);
  if (!*(_QWORD *)(v32 + 16))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v33 = *(_QWORD *)(v32 + 32);
  swift_bridgeObjectRelease();
  v26 = (char *)v16 - v33;
  if (!__OFSUB__(v16, v33))
  {
    v16 = v38;
    v11 = (_QWORD *)*v38;
    result = swift_isUniquelyReferenced_nonNull_native();
    *v38 = (uint64_t)v11;
    if ((result & 1) != 0)
      goto LABEL_18;
    goto LABEL_26;
  }
LABEL_25:
  __break(1u);
LABEL_26:
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
  v11 = (_QWORD *)result;
  *v16 = result;
LABEL_18:
  v36 = v11[2];
  v35 = v11[3];
  if (v36 >= v35 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v35 > 1), v36 + 1, 1, v11);
    v11 = (_QWORD *)result;
  }
  v11[2] = v36 + 1;
  v37 = &v11[2 * v36];
  v37[4] = v22;
  v37[5] = v26;
  *v16 = (uint64_t)v11;
  if (__OFADD__(*a3, 1))
    __break(1u);
  else
    ++*a3;
  return result;
}

uint64_t DUFoundInEventMultilingualBERTImplementation.chunkTextWithNLContextualEmbedding(text:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[22] = a2;
  v3[23] = v2;
  v3[21] = a1;
  v4 = type metadata accessor for Logger();
  v3[24] = v4;
  v3[25] = *(_QWORD *)(v4 - 8);
  v3[26] = swift_task_alloc();
  v3[27] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t DUFoundInEventMultilingualBERTImplementation.chunkTextWithNLContextualEmbedding(text:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  NLLanguage v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  unint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  id v35;
  id v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  id v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  id v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  _QWORD *v62;
  _QWORD *v63;

  v1 = *(_QWORD *)(v0 + 168);
  *(_QWORD *)(v0 + 80) = v1;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_QWORD *)(v0 + 112) = 0;
  v61 = (uint64_t *)(v0 + 112);
  v2 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 120) = MEMORY[0x24BEE4AF8];
  v62 = (_QWORD *)(v0 + 120);
  *(_QWORD *)(v0 + 144) = v2;
  v3 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 184);
  v5 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0)
    v5 = v1;
  v6 = ((v3 >> 60) & ((v1 & 0x800000000000000) == 0)) == 0;
  v7 = 7;
  if (!v6)
    v7 = 11;
  *(_QWORD *)(v0 + 96) = 15;
  *(_OWORD *)(v0 + 128) = 0uLL;
  v8 = (_QWORD *)(v0 + 128);
  *(_QWORD *)(v0 + 104) = v7 | (v5 << 16);
  *(_QWORD *)(v0 + 88) = v3;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<String.Index>);
  lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>(&lazy protocol witness table cache variable for type Range<String.Index> and conformance Range<A>, &demangling cache variable for type metadata for Range<String.Index>, MEMORY[0x24BEE1BC0]);
  lazy protocol witness table accessor for type String and conformance String();
  v59 = _NSRange.init<A, B>(_:in:)();
  v60 = v9;
  v10 = *(void **)(v4 + 16);
  if (v10)
  {
    v58 = (_QWORD *)(v0 + 144);
    v11 = *(_QWORD *)(v0 + 168);
    v12 = *(_QWORD *)(v0 + 176);
    v57 = v10;
    v13 = (void *)MEMORY[0x22E2AF8EC](v11, v12);
    if (one-time initialization token for NLContextualEmbeddingLanguage != -1)
      swift_once();
    v15 = *(_QWORD *)(v0 + 168);
    v14 = *(_QWORD *)(v0 + 176);
    v16 = NLContextualEmbeddingLanguage;
    v17 = (_QWORD *)swift_allocObject();
    v17[2] = v8;
    v17[3] = v0 + 136;
    v17[4] = v61;
    v17[5] = v0 + 64;
    v17[6] = v62;
    v17[7] = v15;
    v17[8] = v14;
    v17[9] = v58;
    v18 = swift_allocObject();
    *(_QWORD *)(v18 + 16) = partial apply for closure #1 in DUFoundInEventMultilingualBERTImplementation.chunkTextWithNLContextualEmbedding(text:);
    *(_QWORD *)(v18 + 24) = v17;
    *(_QWORD *)(v0 + 48) = partial apply for thunk for @callee_guaranteed (@unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>?) -> ();
    *(_QWORD *)(v0 + 56) = v18;
    *(_QWORD *)(v0 + 16) = MEMORY[0x24BDAC760];
    *(_QWORD *)(v0 + 24) = 1107296256;
    *(_QWORD *)(v0 + 32) = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>?) -> ();
    *(_QWORD *)(v0 + 40) = &block_descriptor;
    v19 = _Block_copy((const void *)(v0 + 16));
    swift_bridgeObjectRetain();
    swift_release();
    *(_QWORD *)(v0 + 152) = 0;
    v20 = (unint64_t)v57;
    v21 = objc_msgSend(v57, sel_enumerateTokensForString_language_inRange_error_usingBlock_, v13, v16, v59, v60, v0 + 152, v19);
    _Block_release(v19);

    v22 = *(id *)(v0 + 152);
    if ((_DWORD)v21)
    {
      if (*v8 == 2 || !*(_QWORD *)(v0 + 136))
      {
LABEL_34:

        v42 = (_QWORD *)*v62;
        v43 = (_QWORD *)*v58;
        swift_release();
        goto LABEL_35;
      }
      v23 = *(_QWORD *)(v0 + 64);
      v24 = *(_QWORD *)(v0 + 72);
      v25 = (_QWORD *)(v23 + v24);
      if (__OFADD__(v23, v24))
      {
        __break(1u);
      }
      else
      {
        v21 = 0;
        v26 = *(_QWORD *)(v0 + 112);
        v20 = 0xE000000000000000;
        if ((v26 & 0x8000000000000000) == 0 && v26 < (uint64_t)v25)
        {
          if (String.count.getter() >= (uint64_t)v25)
          {
            v44 = String.index(_:offsetBy:)();
            if ((unint64_t)String.index(_:offsetBy:)() >> 14 < v44 >> 14)
              __break(1u);
            v45 = String.subscript.getter();
            v21 = (id)MEMORY[0x22E2AF988](v45);
            v20 = v46;
            swift_bridgeObjectRelease();
          }
          else
          {
            v21 = 0;
          }
        }
        v25 = (_QWORD *)*v62;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *v62 = v25;
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          goto LABEL_27;
      }
      v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, v25);
      *v62 = v25;
LABEL_27:
      v49 = v25[2];
      v48 = v25[3];
      if (v49 >= v48 >> 1)
      {
        v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v48 > 1), v49 + 1, 1, v25);
        *v62 = v25;
      }
      v25[2] = v49 + 1;
      v50 = &v25[2 * v49];
      v50[4] = v21;
      v50[5] = v20;
      v51 = *v61;
      v52 = (_QWORD *)*v58;
      v53 = swift_isUniquelyReferenced_nonNull_native();
      *v58 = v52;
      if ((v53 & 1) == 0)
      {
        v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v52[2] + 1, 1, v52, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
        *v58 = v52;
      }
      v55 = v52[2];
      v54 = v52[3];
      if (v55 >= v54 >> 1)
        v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v54 > 1), v55 + 1, 1, v52, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      v52[2] = v55 + 1;
      v52[v55 + 4] = v51;
      *v58 = v52;
      goto LABEL_34;
    }
    v33 = v22;
    v34 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    Logger.init()();
    v35 = v34;
    v36 = v34;
    v37 = Logger.logObject.getter();
    v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc();
      v63 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v39 = 138412290;
      v40 = v34;
      v41 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v0 + 160) = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v63 = v41;

      _os_log_impl(&dword_2282CC000, v37, v38, "DUFoundInEventMultilingualBERTImplementation: error enumerateTokens in NLContextualEmbedding %@", v39, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x22E2B117C](v63, -1, -1);
      MEMORY[0x22E2B117C](v39, -1, -1);

    }
    else
    {

    }
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 200) + 8))(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 192));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    Logger.init()();
    v27 = Logger.logObject.getter();
    v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v29 = 0;
      _os_log_impl(&dword_2282CC000, v27, v28, "DUFoundInEventMultilingualBERTImplementation: NLContextualEmbedding not available", v29, 2u);
      MEMORY[0x22E2B117C](v29, -1, -1);
    }
    v30 = *(_QWORD *)(v0 + 216);
    v31 = *(_QWORD *)(v0 + 192);
    v32 = *(_QWORD *)(v0 + 200);

    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v30, v31);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v42 = 0;
  v43 = 0;
LABEL_35:
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD *, _QWORD *))(v0 + 8))(v42, v43);
}

unint64_t closure #1 in DUFoundInEventMultilingualBERTImplementation.chunkTextWithNLContextualEmbedding(text:)(unint64_t result, unint64_t a2, uint64_t a3, _QWORD *a4, uint64_t *a5, unint64_t *a6, unint64_t *a7, _QWORD **a8, uint64_t a9, uint64_t a10, unint64_t *a11)
{
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t *v14;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v34;

  if (*a4 == 2)
    return result;
  v17 = *a5;
  if (!*a5)
  {
    *a6 = result;
    v17 = *a5;
  }
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (v18)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  *a5 = v19;
  *a7 = result;
  a7[1] = a2;
  if (*a5 != 255)
    return result;
  if (__OFADD__(*a4, 1))
    goto LABEL_24;
  ++*a4;
  *a5 = 0;
  v13 = (_QWORD *)(result + a2);
  if (!__OFADD__(result, a2))
  {
    v11 = 0;
    v12 = 0xE000000000000000;
    if ((*a6 & 0x8000000000000000) == 0 && (uint64_t)*a6 < (uint64_t)v13)
    {
      if (String.count.getter() >= (uint64_t)v13)
      {
        v20 = String.index(_:offsetBy:)();
        result = String.index(_:offsetBy:)();
        if (result >> 14 < v20 >> 14)
        {
          __break(1u);
          return result;
        }
        v21 = String.subscript.getter();
        v11 = MEMORY[0x22E2AF988](v21);
        v12 = v22;
        swift_bridgeObjectRelease();
      }
      else
      {
        v11 = 0;
        v12 = 0xE000000000000000;
      }
    }
    v14 = a11;
    v13 = *a8;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a8 = v13;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_15;
    goto LABEL_26;
  }
LABEL_25:
  __break(1u);
LABEL_26:
  v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
  *a8 = v13;
LABEL_15:
  v24 = v13[2];
  v25 = v13[3];
  v26 = v24 + 1;
  if (v24 >= v25 >> 1)
  {
    v32 = v13;
    v33 = v13[2];
    v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v25 > 1), v24 + 1, 1, v32);
    v24 = v33;
    v13 = v34;
    *a8 = v34;
  }
  v13[2] = v26;
  v27 = &v13[2 * v24];
  v27[4] = v11;
  v27[5] = v12;
  v28 = *a6;
  v29 = (_QWORD *)*v14;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v14 = (unint64_t)v29;
  if ((result & 1) == 0)
  {
    result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29[2] + 1, 1, v29, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    v29 = (_QWORD *)result;
    *v14 = result;
  }
  v31 = v29[2];
  v30 = v29[3];
  if (v31 >= v30 >> 1)
  {
    result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v30 > 1), v31 + 1, 1, v29, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    v29 = (_QWORD *)result;
  }
  v29[2] = v31 + 1;
  v29[v31 + 4] = v28;
  *v14 = (unint64_t)v29;
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>?) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 32))(a2, a3, a4);
}

uint64_t DUFoundInEventMultilingualBERTImplementation.getContextualEmbeddingResult(text:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[21] = a2;
  v3[22] = v2;
  v3[20] = a1;
  v4 = type metadata accessor for Logger();
  v3[23] = v4;
  v3[24] = *(_QWORD *)(v4 - 8);
  v3[25] = swift_task_alloc();
  v3[26] = swift_task_alloc();
  v3[27] = swift_task_alloc();
  v3[28] = swift_task_alloc();
  v3[29] = swift_task_alloc();
  v3[30] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 264) = a1;
  *(_QWORD *)(v3 + 272) = a2;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t DUFoundInEventMultilingualBERTImplementation.getContextualEmbeddingResult(text:)()
{
  uint64_t v0;
  void *v1;
  id v2;
  int *v3;
  _QWORD *v4;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;

  v1 = *(void **)(*(_QWORD *)(v0 + 176) + 16);
  *(_QWORD *)(v0 + 248) = v1;
  if (v1)
  {
    v2 = v1;
    if ((objc_msgSend(v2, sel_hasAvailableAssets) & 1) != 0)
    {
      v3 = *(int **)(**(_QWORD **)(v0 + 176) + 112);
      v18 = (int *)((char *)v3 + *v3);
      v4 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 256) = v4;
      *v4 = v0;
      v4[1] = DUFoundInEventMultilingualBERTImplementation.getContextualEmbeddingResult(text:);
      return ((uint64_t (*)(_QWORD, _QWORD))v18)(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168));
    }
    Logger.init()();
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_2282CC000, v12, v13, "DUFoundInEventMultilingualBERTImplementation: embedding assets not available", v14, 2u);
      MEMORY[0x22E2B117C](v14, -1, -1);
    }
    v15 = *(_QWORD *)(v0 + 240);
    v16 = *(_QWORD *)(v0 + 184);
    v17 = *(_QWORD *)(v0 + 192);

    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
  }
  else
  {
    Logger.init()();
    v6 = Logger.logObject.getter();
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_2282CC000, v6, v7, "DUFoundInEventMultilingualBERTImplementation: NLContextualEmbedding not available", v8, 2u);
      MEMORY[0x22E2B117C](v8, -1, -1);
    }
    v9 = *(_QWORD *)(v0 + 208);
    v10 = *(_QWORD *)(v0 + 184);
    v11 = *(_QWORD *)(v0 + 192);

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(0, 0);
}

{
  uint64_t v0;
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  NLLanguage v8;
  uint64_t v9;
  _QWORD *v10;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v1 = *(_QWORD **)(v0 + 264);
  if (!v1)
  {
    Logger.init()();
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_2282CC000, v12, v13, "DUFoundInEventMultilingualBERTImplementation: Failed to chunk text", v14, 2u);
      MEMORY[0x22E2B117C](v14, -1, -1);
    }
    v15 = *(void **)(v0 + 248);
    v16 = *(_QWORD *)(v0 + 216);
    v17 = *(_QWORD *)(v0 + 184);
    v18 = *(_QWORD *)(v0 + 192);

    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
    goto LABEL_9;
  }
  v2 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 128) = MEMORY[0x24BEE4AF8];
  v3 = v1[2];
  *(_QWORD *)(v0 + 280) = v3;
  if (!v3)
  {
    swift_bridgeObjectRelease();
    if (v2 >> 62)
    {
      swift_bridgeObjectRetain();
      v21 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v21 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    if (v21 == *(_QWORD *)(*(_QWORD *)(v0 + 272) + 16))
    {

      v20 = *(_QWORD *)(v0 + 272);
      v19 = MEMORY[0x24BEE4AF8];
      goto LABEL_10;
    }
    Logger.init()();
    v22 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v23 = Logger.logObject.getter();
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = swift_slowAlloc();
      v26 = swift_slowAlloc();
      v40 = v26;
      *(_DWORD *)v25 = 134218242;
      if (v22 >> 62)
      {
        swift_bridgeObjectRetain();
        v27 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v27 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v36 = *(void **)(v0 + 248);
      v37 = *(_QWORD *)(v0 + 192);
      v38 = *(_QWORD *)(v0 + 184);
      v39 = *(_QWORD *)(v0 + 224);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 144) = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v25 + 12) = 2080;
      v28 = swift_bridgeObjectRetain();
      v29 = MEMORY[0x22E2AFB2C](v28, MEMORY[0x24BEE1768]);
      v31 = v30;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 152) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_2282CC000, v23, v24, "DUFoundInEventMultilingualBERTImplementation: number of embeddingResults %ld is not consistent with number of shiftedStartLocations %s", (uint8_t *)v25, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x22E2B117C](v26, -1, -1);
      MEMORY[0x22E2B117C](v25, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v39, v38);
    }
    else
    {
      v32 = *(void **)(v0 + 248);
      v33 = *(_QWORD *)(v0 + 224);
      v34 = *(_QWORD *)(v0 + 184);
      v35 = *(_QWORD *)(v0 + 192);
      swift_bridgeObjectRelease_n();

      swift_bridgeObjectRelease_n();
      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v33, v34);
    }
LABEL_9:
    v19 = 0;
    v20 = 0;
LABEL_10:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v19, v20);
  }
  *(_QWORD *)(v0 + 288) = 0;
  v5 = v1[4];
  v4 = v1[5];
  swift_bridgeObjectRetain();
  v6 = MEMORY[0x22E2AF8EC](v5, v4);
  *(_QWORD *)(v0 + 296) = v6;
  swift_bridgeObjectRelease();
  if (one-time initialization token for NLContextualEmbeddingLanguage != -1)
    swift_once();
  v7 = *(void **)(v0 + 248);
  v8 = NLContextualEmbeddingLanguage;
  *(_QWORD *)(v0 + 56) = v0 + 120;
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = DUFoundInEventMultilingualBERTImplementation.getContextualEmbeddingResult(text:);
  v9 = swift_continuation_init();
  *(_QWORD *)(v0 + 80) = MEMORY[0x24BDAC760];
  v10 = (_QWORD *)(v0 + 80);
  v10[1] = 0x40000000;
  v10[2] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NLContextualEmbeddingResult?, @unowned NSError?) -> () with result type NLContextualEmbeddingResult?;
  v10[3] = &block_descriptor_5;
  v10[4] = v9;
  objc_msgSend(v7, sel_requestEmbeddingResultForString_language_completionHandler_, v6, v8, v10);
  return swift_continuation_await();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 304) = v1;
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint8_t *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  NLLanguage v23;
  uint64_t v24;
  _QWORD *v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v1 = *(void **)(v0 + 120);
  v2 = *(void **)(v0 + 296);
  if (!v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    Logger.init()();
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, (os_log_type_t)v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_2282CC000, v9, (os_log_type_t)v10, "DUFoundInEventMultilingualBERTImplementation: fail to requestResult from NLContextualEmbedding", v11, 2u);
      MEMORY[0x22E2B117C](v11, -1, -1);
    }
    v12 = *(void **)(v0 + 248);
    v13 = *(_QWORD *)(v0 + 232);
    v14 = *(_QWORD *)(v0 + 184);
    v15 = *(_QWORD *)(v0 + 192);

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
    goto LABEL_12;
  }

  v3 = v1;
  MEMORY[0x22E2AFAFC]();
  if (*(_QWORD *)((*(_QWORD *)(v0 + 128) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 128) & 0xFFFFFFFFFFFFFF8)
                                                                                      + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  v4 = *(_QWORD *)(v0 + 280);
  v5 = *(_QWORD *)(v0 + 288) + 1;
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  if (v5 == v4)
  {
    swift_bridgeObjectRelease();
    v6 = *(_QWORD *)(v0 + 128);
    if (v6 >> 62)
    {
      swift_bridgeObjectRetain();
      v7 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    if (v7 == *(_QWORD *)(*(_QWORD *)(v0 + 272) + 16))
    {

      v8 = *(_QWORD *)(v0 + 272);
LABEL_13:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(unint64_t, uint64_t))(v0 + 8))(v6, v8);
    }
    Logger.init()();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v26 = Logger.logObject.getter();
    v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = swift_slowAlloc();
      v29 = swift_slowAlloc();
      v43 = v29;
      *(_DWORD *)v28 = 134218242;
      if (v6 >> 62)
      {
        swift_bridgeObjectRetain();
        v30 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v30 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v39 = *(void **)(v0 + 248);
      v40 = *(_QWORD *)(v0 + 192);
      v41 = *(_QWORD *)(v0 + 184);
      v42 = *(_QWORD *)(v0 + 224);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 144) = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v28 + 12) = 2080;
      v31 = swift_bridgeObjectRetain();
      v32 = MEMORY[0x22E2AFB2C](v31, MEMORY[0x24BEE1768]);
      v34 = v33;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 152) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v34, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_2282CC000, v26, v27, "DUFoundInEventMultilingualBERTImplementation: number of embeddingResults %ld is not consistent with number of shiftedStartLocations %s", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x22E2B117C](v29, -1, -1);
      MEMORY[0x22E2B117C](v28, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v42, v41);
    }
    else
    {
      v35 = *(void **)(v0 + 248);
      v36 = *(_QWORD *)(v0 + 224);
      v37 = *(_QWORD *)(v0 + 184);
      v38 = *(_QWORD *)(v0 + 192);
      swift_bridgeObjectRelease_n();

      swift_bridgeObjectRelease_n();
      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v36, v37);
    }
LABEL_12:
    v6 = 0;
    v8 = 0;
    goto LABEL_13;
  }
  v17 = *(_QWORD *)(v0 + 288) + 1;
  *(_QWORD *)(v0 + 288) = v17;
  v18 = *(_QWORD *)(v0 + 264) + 16 * v17;
  v20 = *(_QWORD *)(v18 + 32);
  v19 = *(_QWORD *)(v18 + 40);
  swift_bridgeObjectRetain();
  v21 = MEMORY[0x22E2AF8EC](v20, v19);
  *(_QWORD *)(v0 + 296) = v21;
  swift_bridgeObjectRelease();
  if (one-time initialization token for NLContextualEmbeddingLanguage != -1)
    swift_once();
  v22 = *(void **)(v0 + 248);
  v23 = NLContextualEmbeddingLanguage;
  *(_QWORD *)(v0 + 56) = v0 + 120;
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = DUFoundInEventMultilingualBERTImplementation.getContextualEmbeddingResult(text:);
  v24 = swift_continuation_init();
  *(_QWORD *)(v0 + 80) = MEMORY[0x24BDAC760];
  v25 = (_QWORD *)(v0 + 80);
  v25[1] = 0x40000000;
  v25[2] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NLContextualEmbeddingResult?, @unowned NSError?) -> () with result type NLContextualEmbeddingResult?;
  v25[3] = &block_descriptor_5;
  v25[4] = v24;
  objc_msgSend(v22, sel_requestEmbeddingResultForString_language_completionHandler_, v21, v23, v25);
  return swift_continuation_await();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  void *v7;
  void *v8;
  uint8_t *v9;
  _QWORD *v10;
  id v11;
  uint64_t v12;
  void *v13;

  v2 = *(void **)(v0 + 296);
  v1 = *(void **)(v0 + 304);
  swift_willThrow();

  Logger.init()();
  v3 = v1;
  v4 = v1;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = *(void **)(v0 + 304);
    v8 = *(void **)(v0 + 248);
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v9 = 138412290;
    v11 = v7;
    v12 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 136) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v10 = v12;

    _os_log_impl(&dword_2282CC000, v5, v6, "DUFoundInEventMultilingualBERTImplementation: Fail to obtain NLContextualEmbeddingResult with error: %@", v9, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x22E2B117C](v10, -1, -1);
    MEMORY[0x22E2B117C](v9, -1, -1);

  }
  else
  {
    v13 = *(void **)(v0 + 304);

  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 192) + 8))(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 184));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(0, 0);
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NLContextualEmbeddingResult?, @unowned NSError?) -> () with result type NLContextualEmbeddingResult?(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  _QWORD *v5;
  id v6;
  uint64_t v8;
  id v9;
  void *v10;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    swift_allocError();
    *v5 = a3;
    v6 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    v10 = a2;
    v8 = *(_QWORD *)(*(_QWORD *)(v3 + 64) + 40);
    v9 = a2;
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)&v10, v8, &demangling cache variable for type metadata for NLContextualEmbeddingResult?);
    return swift_continuation_throwingResume();
  }
}

uint64_t DUFoundInEventMultilingualBERTImplementation.createBaseTaggedCharacterRange(embeddingResults:tagger:adjustedStartLocations:)(unint64_t a1, void *a2)
{
  return DUFoundInEventMultilingualBERTImplementation.createBaseTaggedCharacterRange(embeddingResults:tagger:adjustedStartLocations:)(a1, a2);
}

{
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  id v9;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v17 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type String and conformance String();
  v4 = String.Index.init<A>(utf16Offset:in:)();
  if ((unint64_t)String.Index.init<A>(utf16Offset:in:)() >> 14 < v4 >> 14)
  {
    __break(1u);
  }
  else if (!(a1 >> 62))
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v5)
      goto LABEL_4;
LABEL_15:
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v5 = result;
  if (!result)
    goto LABEL_15;
LABEL_4:
  if (v5 < 1)
  {
    __break(1u);
  }
  else
  {
    v7 = 0;
    v16 = a1 & 0xC000000000000001;
    v8 = a1;
    do
    {
      if (v16)
        v11 = (id)MEMORY[0x22E2AFF34](v7, a1);
      else
        v11 = *(id *)(a1 + 8 * v7 + 32);
      v12 = v11;

      v13 = objc_msgSend(v12, sel_string);
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      String.index(_:offsetBy:)();
      swift_bridgeObjectRelease();
      v14 = objc_msgSend(v12, sel_string);
      if (!v14)
      {
        v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v14 = (id)MEMORY[0x22E2AF8EC](v15);
        swift_bridgeObjectRelease();
      }
      objc_msgSend(a2, sel_setString_, v14);

      v9 = objc_msgSend(v12, sel_string);
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      v10 = swift_bridgeObjectRelease();
      MEMORY[0x24BDAC7A8](v10);
      NLTagger.enumerateTags(in:unit:scheme:options:using:)();

      ++v7;
      a1 = v8;
    }
    while (v5 != v7);
    swift_bridgeObjectRelease();
    return v17;
  }
  return result;
}

uint64_t closure #1 in DUFoundInEventMultilingualBERTImplementation.createBaseTaggedCharacterRange(embeddingResults:tagger:adjustedStartLocations:)(int a1, int a2, int a3, id a4)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = objc_msgSend(a4, sel_string);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  v5 = String.subscript.getter();
  v7 = v6;
  v9 = v8;
  v11 = v10;
  swift_bridgeObjectRelease();
  MEMORY[0x22E2AF988](v5, v7, v9, v11);
  swift_bridgeObjectRelease();
  v12 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(v12 + 16) = 512;
  bzero((void *)(v12 + 32), 0x1000uLL);
  NLContextualEmbeddingResult.enumerateTokenVectors(in:using:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t specialized Array.init(repeating:count:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;

  if (a3 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (a3)
    {
      v6 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      v7 = v6;
      v6[2] = a3;
      v6[4] = a1;
      v6[5] = a2;
      if (a3 != 1)
      {
        v6[6] = a1;
        v6[7] = a2;
        v8 = a3 - 2;
        if (v8)
        {
          v9 = v6 + 9;
          do
          {
            *(v9 - 1) = a1;
            *v9 = a2;
            swift_bridgeObjectRetain();
            v9 += 2;
            --v8;
          }
          while (v8);
        }
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x24BEE4AF8];
    }
    return (uint64_t)v7;
  }
  return result;
}

uint64_t specialized Array.init(repeating:count:)(unint64_t a1, unint64_t a2)
{
  uint64_t result;
  unint64_t *v5;
  unint64_t v6;
  int64x2_t v7;
  int64x2_t *v8;
  unint64_t v9;
  unint64_t v10;

  if ((a2 & 0x8000000000000000) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (!a2)
    return MEMORY[0x24BEE4AF8];
  result = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(result + 16) = a2;
  v5 = (unint64_t *)(result + 32);
  if (a2 < 4)
  {
    v6 = 0;
LABEL_9:
    v10 = a2 - v6;
    do
    {
      *v5++ = a1;
      --v10;
    }
    while (v10);
    return result;
  }
  v6 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  v5 += a2 & 0xFFFFFFFFFFFFFFFCLL;
  v7 = vdupq_n_s64(a1);
  v8 = (int64x2_t *)(result + 48);
  v9 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v8[-1] = v7;
    *v8 = v7;
    v8 += 2;
    v9 -= 4;
  }
  while (v9);
  if (v6 != a2)
    goto LABEL_9;
  return result;
}

uint64_t specialized Array.init(repeating:count:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t result;

  if (a2 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v3 = a1[1];
    if (a2)
    {
      v4 = *a1;
      v5 = a1[2];
      v6 = a1[3];
      v7 = a1[4];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (token: String, start: Int, length: Int, wordId: Int));
      v8 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      v9 = v8;
      v8[2] = a2;
      v8[4] = v4;
      v8[5] = v3;
      v8[6] = v5;
      v8[7] = v6;
      v8[8] = v7;
      if (a2 != 1)
      {
        v8[9] = v4;
        v8[10] = v3;
        v8[11] = v5;
        v8[12] = v6;
        v8[13] = v7;
        v10 = a2 - 2;
        if (v10)
        {
          v11 = v8 + 18;
          do
          {
            *(v11 - 4) = v4;
            *(v11 - 3) = v3;
            *(v11 - 2) = v5;
            *(v11 - 1) = v6;
            *v11 = v7;
            v11 += 5;
            swift_bridgeObjectRetain();
            --v10;
          }
          while (v10);
        }
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x24BEE4AF8];
    }
    return (uint64_t)v9;
  }
  return result;
}

uint64_t specialized Array.init(repeating:count:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t result;
  unint64_t *v9;
  unint64_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  double *v14;
  unint64_t v15;
  double *v16;
  unint64_t v17;

  if ((a4 & 0x8000000000000000) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (!a4)
    return MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: Int, start: Int, length: Int));
  result = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(result + 16) = a4;
  v9 = (unint64_t *)(result + 32);
  if (a4 < 4)
  {
    v10 = 0;
LABEL_9:
    v17 = a4 - v10;
    do
    {
      *v9 = a1;
      v9[1] = a2;
      v9[2] = a3;
      v9 += 3;
      --v17;
    }
    while (v17);
    return result;
  }
  v10 = a4 & 0xFFFFFFFFFFFFFFFCLL;
  v9 += 3 * (a4 & 0xFFFFFFFFFFFFFFFCLL);
  v11 = vdupq_n_s64(a1);
  v12 = vdupq_n_s64(a2);
  v13 = vdupq_n_s64(a3);
  v14 = (double *)(result + 80);
  v15 = a4 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v16 = v14 - 6;
    vst3q_f64(v16, *(float64x2x3_t *)v11.i8);
    vst3q_f64(v14, *(float64x2x3_t *)v11.i8);
    v14 += 12;
    v15 -= 4;
  }
  while (v15);
  if (v10 != a4)
    goto LABEL_9;
  return result;
}

uint64_t closure #1 in closure #1 in DUFoundInEventMultilingualBERTImplementation.createBaseTaggedCharacterRange(embeddingResults:tagger:adjustedStartLocations:)(uint64_t result, unint64_t a2, unint64_t a3, _QWORD *a4, uint64_t *a5, _QWORD *a6, uint64_t *a7)
{
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t started;

  v8 = result;
  if ((*a4 ^ a2) >= 0x4000)
  {
    v9 = *a5;
  }
  else
  {
    v9 = *a5;
    if ((a4[1] ^ a3) >> 14)
      v10 = 0;
    else
      v10 = v9 == 0;
    if (v10)
    {
      *a5 = 1;
      return 1;
    }
  }
  v11 = __OFADD__(v9, 1);
  v12 = v9 + 1;
  if (v11)
  {
    __break(1u);
  }
  else
  {
    *a5 = v12;
    if (!__OFADD__(*a6, 1))
    {
      ++*a6;
      v13 = *a7;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      started = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySaySdGAHG_Sds5NeverOTg5021_sS3dIgyyd_Sd_SdtSds5f275OIegnrzr_TR0257_s21DocumentUnderstanding44DUFoundInEventMultilingualBERTImplementationC30createBaseTaggedCharacterRange16embeddingResults6tagger22adjustedStartLocationsSayAA0jkL0CGSaySo27NLContextualEmbeddingResultCG_So8NLTaggerCSaySiGtFSbSo5NLTagaSg_SnySS5IndexVGtXEfU_SbR24j14G_AVtXEfU_S2d_K15XEfU_Tf3nnnpf_nTf1cn_nTm(v13, v8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *a7 = started;
      swift_bridgeObjectRelease();
      return 1;
    }
  }
  __break(1u);
  return result;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySaySdGAHG_Sds5NeverOTg5021_sS3dIgyyd_Sd_SdtSds5f275OIegnrzr_TR0257_s21DocumentUnderstanding44DUFoundInEventMultilingualBERTImplementationC30createBaseTaggedCharacterRange16embeddingResults6tagger22adjustedStartLocationsSayAA0jkL0CGSaySo27NLContextualEmbeddingResultCG_So8NLTaggerCSaySiGtFSbSo5NLTagaSg_SnySS5IndexVGtXEfU_SbR24j14G_AVtXEfU_S2d_K15XEfU_Tf3nnnpf_nTf1cn_nTm(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  int64_t v6;
  double *v7;
  double *v8;
  uint64_t result;
  int64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (v5 >= v4)
    v6 = *(_QWORD *)(a1 + 16);
  else
    v6 = *(_QWORD *)(a2 + 16);
  v33 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
  v30 = v5;
  v31 = v4;
  v32 = a1;
  if (v6)
  {
    v7 = (double *)(a1 + 32);
    v8 = (double *)(a2 + 32);
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v10 = v6;
    v11 = a2;
    while (v4)
    {
      if (!v5)
        goto LABEL_26;
      v12 = *v7;
      v13 = *v8;
      v15 = *(_QWORD *)(v33 + 16);
      v14 = *(_QWORD *)(v33 + 24);
      if (v15 >= v14 >> 1)
      {
        v28 = v11;
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
        v11 = v28;
      }
      --v5;
      *(_QWORD *)(v33 + 16) = v15 + 1;
      *(double *)(v33 + 8 * v15 + 32) = v12 + v13;
      --v4;
      ++v8;
      ++v7;
      if (!--v10)
        goto LABEL_13;
    }
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v11 = a2;
LABEL_13:
    if (v31 <= v30)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v33;
    }
    v16 = 0;
    if (v6 <= v30)
      v17 = v30;
    else
      v17 = v6;
    v18 = v17 - v6;
    v19 = v31 - v6;
    v20 = v30 - v6;
    v21 = 8 * v6 + 32;
    v22 = v32 + v21;
    v23 = v11 + v21;
    while (v19 != v16)
    {
      if (v20 == v16)
        goto LABEL_24;
      if (v18 == v16)
        goto LABEL_28;
      v24 = *(double *)(v22 + 8 * v16);
      v25 = *(double *)(v23 + 8 * v16);
      v27 = *(_QWORD *)(v33 + 16);
      v26 = *(_QWORD *)(v33 + 24);
      if (v27 >= v26 >> 1)
      {
        v29 = v11;
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
        v11 = v29;
      }
      *(_QWORD *)(v33 + 16) = v27 + 1;
      *(double *)(v33 + 8 * v27 + 32) = v24 + v25;
      if (v19 == ++v16)
        goto LABEL_24;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t DUFoundInEventMultilingualBERTImplementation.createBaseTaggedCharacterRangeForChunks(embeddingResults:tagger:adjustedStartLocations:)(unint64_t a1, void *a2)
{
  return DUFoundInEventMultilingualBERTImplementation.createBaseTaggedCharacterRange(embeddingResults:tagger:adjustedStartLocations:)(a1, a2);
}

uint64_t closure #1 in DUFoundInEventMultilingualBERTImplementation.createBaseTaggedCharacterRangeForChunks(embeddingResults:tagger:adjustedStartLocations:)(int a1, int a2, int a3, id a4)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = objc_msgSend(a4, sel_string);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  v5 = String.subscript.getter();
  v7 = v6;
  v9 = v8;
  v11 = v10;
  swift_bridgeObjectRelease();
  MEMORY[0x22E2AF988](v5, v7, v9, v11);
  swift_bridgeObjectRelease();
  v12 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(v12 + 16) = 512;
  bzero((void *)(v12 + 32), 0x1000uLL);
  NLContextualEmbeddingResult.enumerateTokenVectors(in:using:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t closure #1 in closure #1 in DUFoundInEventMultilingualBERTImplementation.createBaseTaggedCharacterRangeForChunks(embeddingResults:tagger:adjustedStartLocations:)(uint64_t result, unint64_t a2, unint64_t a3, _QWORD *a4, uint64_t *a5, _QWORD *a6, uint64_t *a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t started;
  BOOL v13;
  uint64_t v14;

  v9 = result;
  if ((*a4 ^ a2) >> 14 || (a4[1] ^ a3) >> 14 || (v10 = *a5) != 0)
  {
    if (__OFADD__(*a6, 1))
    {
      __break(1u);
      goto LABEL_9;
    }
    ++*a6;
    v11 = *a7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    started = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySaySdGAHG_Sds5NeverOTg5021_sS3dIgyyd_Sd_SdtSds5f275OIegnrzr_TR0257_s21DocumentUnderstanding44DUFoundInEventMultilingualBERTImplementationC30createBaseTaggedCharacterRange16embeddingResults6tagger22adjustedStartLocationsSayAA0jkL0CGSaySo27NLContextualEmbeddingResultCG_So8NLTaggerCSaySiGtFSbSo5NLTagaSg_SnySS5IndexVGtXEfU_SbR24j14G_AVtXEfU_S2d_K15XEfU_Tf3nnnpf_nTf1cn_nTm(v11, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *a7 = started;
    result = swift_bridgeObjectRelease();
    v10 = *a5;
  }
  v13 = __OFADD__(v10, 1);
  v14 = v10 + 1;
  if (!v13)
  {
    *a5 = v14;
    return 1;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t DUFoundInEventMultilingualBERTImplementation.createTaggedCharacterRangeForDD(text:ddResults:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;

  v4 = (int *)type metadata accessor for FoundInEventDataDetectorsOutput();
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x24BEE4AF8];
  v37 = MEMORY[0x24BEE4AF8];
  v9 = *(_QWORD *)(a3 + 16);
  if (v9)
  {
    v10 = a3 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v11 = a3;
    v12 = *(_QWORD *)(v5 + 72);
    v29 = v11;
    swift_bridgeObjectRetain();
    v34 = xmmword_2284C1EE0;
    v33 = xmmword_2284C0D00;
    v31 = (unint64_t)"SGDDMatchDelivery";
    v32 = (unint64_t)"SGDDMatchEmailAddress";
    v30 = (unint64_t)"ult\"8@\"NSError\"16";
    do
    {
      outlined init with copy of FoundInEventDataDetectorsOutput(v10, (uint64_t)v7);
      v13 = &v7[v4[19]];
      if ((v13[8] & 1) != 0 || (v14 = &v7[v4[20]], (v14[8] & 1) != 0))
      {
        outlined destroy of FoundInEventDataDetectorsOutput((uint64_t)v7);
      }
      else
      {
        v15 = *(_QWORD *)v13;
        v16 = *(_QWORD *)v14;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
        v17 = swift_allocObject();
        *(_OWORD *)(v17 + 16) = v34;
        v18 = 0xED00006574614468;
        v19 = 0x6374614D44444753;
        switch(v7[v4[8]])
        {
          case 2:
            v18 = 0xEE00656E6F685068;
            break;
          case 3:
            v18 = 0xED00006B6E694C68;
            break;
          case 4:
            v19 = 0xD000000000000016;
            v18 = v32 | 0x8000000000000000;
            break;
          case 5:
            break;
          case 8:
            v19 = 0xD000000000000015;
            v18 = v31 | 0x8000000000000000;
            break;
          case 9:
            v18 = 0xEF746867696C4668;
            break;
          case 10:
            v18 = v30 | 0x8000000000000000;
            v19 = 0xD000000000000011;
            break;
          default:
            v18 = 0xEE00726568744F68;
            v19 = 0x6374614D44444753;
            break;
        }
        v35 = 24388;
        v36 = 0xE200000000000000;
        v20 = v18;
        String.append(_:)(*(Swift::String *)&v19);
        swift_bridgeObjectRelease();
        v21 = v36;
        *(_QWORD *)(v17 + 32) = v35;
        *(_QWORD *)(v17 + 40) = v21;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
        v22 = swift_allocObject();
        *(_OWORD *)(v22 + 16) = v33;
        *(_QWORD *)(v22 + 32) = v15;
        if (__OFADD__(v15, v16))
        {
          __break(1u);
          JUMPOUT(0x22830A678);
        }
        v23 = v22;
        *(_QWORD *)(v22 + 40) = v15 + v16;
        v24 = &v7[v4[18]];
        v25 = *(_QWORD *)v24;
        v26 = *((_QWORD *)v24 + 1);
        type metadata accessor for TaggedCharacterRange();
        v27 = swift_allocObject();
        *(_BYTE *)(v27 + 16) = 3;
        *(_QWORD *)(v27 + 24) = v17;
        *(_QWORD *)(v27 + 32) = v23;
        *(_QWORD *)(v27 + 40) = v25;
        *(_QWORD *)(v27 + 48) = v26;
        *(_QWORD *)(v27 + 56) = MEMORY[0x24BEE4AF8];
        swift_bridgeObjectRetain();
        v28 = outlined destroy of FoundInEventDataDetectorsOutput((uint64_t)v7);
        MEMORY[0x22E2AFAFC](v28);
        if (*(_QWORD *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v10 += v12;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
    return v37;
  }
  return result;
}

uint64_t DUFoundInEventMultilingualBERTImplementation.createTaggedCharacterRangeForCSS(text:uiElements:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = 0;
  if (a3 >> 62)
    goto LABEL_14;
  v4 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    result = MEMORY[0x24BEE4AF8];
    if (!v4)
      break;
    v11 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray.reserveCapacity(_:)();
    if (v4 < 0)
    {
      __break(1u);
      result = swift_release();
      __break(1u);
      return result;
    }
    v6 = 0;
    while (v4 != v6)
    {
      if ((a3 & 0xC000000000000001) != 0)
        v7 = (_QWORD *)MEMORY[0x22E2AFF34](v6, a3);
      else
        v7 = *(id *)(a3 + 8 * v6 + 32);
      v8 = v7;
      v9 = v7;
      closure #1 in DUFoundInEventMultilingualBERTImplementation.createTaggedCharacterRangeForCSS(text:uiElements:)(&v9, &v12, &v10);

      ++v6;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v4 == v6)
        return v11;
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #1 in DUFoundInEventMultilingualBERTImplementation.createTaggedCharacterRangeForCSS(text:uiElements:)@<X0>(_QWORD **a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t (*v7)(void);
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  void **v17;
  uint64_t v18;
  void *v19;
  Swift::String v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t (*v35)(void);
  uint64_t *v36;
  _QWORD *v37;

  v5 = *a1;
  v6 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v7 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0xB0);
  result = v7();
  if (v9)
  {
    v10 = String.count.getter();
    result = swift_bridgeObjectRelease();
    v11 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
LABEL_13:
      swift_bridgeObjectRelease();
      goto LABEL_14;
    }
  }
  else
  {
    v11 = 1;
  }
  v12 = __OFADD__(*a2, v11);
  v13 = *a2 + v11;
  if (v12)
    goto LABEL_27;
  *a2 = v13;
  v14 = (*(uint64_t (**)(void))((*v6 & *v5) + 0x1B8))();
  v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v36 = a3;
  if (!v14)
    goto LABEL_14;
  v15 = v14;
  v16 = *(_QWORD *)(v14 + 16);
  if (!v16)
    goto LABEL_13;
  v34 = a2;
  v35 = v7;
  v37 = (_QWORD *)MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16, 0);
  v6 = v37;
  v17 = (void **)(v15 + 40);
  do
  {
    v18 = (uint64_t)*(v17 - 1);
    v19 = *v17;
    swift_bridgeObjectRetain();
    v20._countAndFlagsBits = v18;
    v20._object = v19;
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v22 = v37[2];
    v21 = v37[3];
    if (v22 >= v21 >> 1)
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
    v17 += 2;
    v37[2] = v22 + 1;
    v23 = &v37[2 * v22];
    v23[4] = 24387;
    v23[5] = 0xE200000000000000;
    --v16;
  }
  while (v16);
  swift_bridgeObjectRelease();
  a2 = v34;
  v7 = v35;
LABEL_14:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_2284C0D00;
  v25 = *a2;
  result = v7();
  if (v26)
  {
    v27 = String.count.getter();
    result = swift_bridgeObjectRelease();
    v28 = v25 - v27;
    if (!__OFSUB__(v25, v27))
      goto LABEL_16;
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v28 = v25;
LABEL_16:
  v12 = __OFSUB__(v28, 1);
  v29 = v28 - 1;
  if (v12)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  *(_QWORD *)(v24 + 32) = v29;
  if (__OFSUB__(*a2, 1))
  {
LABEL_29:
    __break(1u);
    return result;
  }
  *(_QWORD *)(v24 + 40) = *a2 - 1;
  v30 = v7();
  if (v31)
    v32 = v30;
  else
    v32 = 0;
  if (v31)
    v33 = v31;
  else
    v33 = 0xE000000000000000;
  type metadata accessor for TaggedCharacterRange();
  result = swift_allocObject();
  *(_BYTE *)(result + 16) = 1;
  *(_QWORD *)(result + 24) = v6;
  *(_QWORD *)(result + 32) = v24;
  *(_QWORD *)(result + 40) = v32;
  *(_QWORD *)(result + 48) = v33;
  *(_QWORD *)(result + 56) = MEMORY[0x24BEE4AF8];
  *v36 = result;
  return result;
}

uint64_t DUFoundInEventMultilingualBERTImplementation.convertFeatureValuesToMultihotVector(allPossibleValues:selectedValues:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t result;
  BOOL v16;
  unint64_t v17;
  BOOL v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v4 = type metadata accessor for Logger();
  v34 = *(_QWORD *)(v4 - 8);
  v35 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[2];
  if (v7)
  {
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v8 + 16) = v7;
    bzero((void *)(v8 + 32), 8 * v7);
    v9 = *(_QWORD *)(a2 + 16);
    if (!v9)
      return v8;
  }
  else
  {
    v8 = MEMORY[0x24BEE4AF8];
    v9 = *(_QWORD *)(a2 + 16);
    if (!v9)
      return v8;
  }
  v36 = v8 + 32;
  v37 = a2 + 32;
  v29 = a2;
  swift_bridgeObjectRetain();
  v10 = 0;
  v28 = a1 + 9;
  *(_QWORD *)&v11 = 136315138;
  v31 = v11;
  v30 = MEMORY[0x24BEE4AD8] + 8;
  v32 = v9;
  v33 = v8;
  while (1)
  {
    v12 = (uint64_t *)(v37 + 16 * v10);
    v13 = *v12;
    v14 = v12[1];
    if (!v7)
      goto LABEL_19;
    result = a1[4];
    v16 = result == v13 && a1[5] == v14;
    if (v16 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      v17 = 0;
    }
    else
    {
      if (v7 == 1)
        goto LABEL_19;
      result = a1[6];
      if (result != v13 || a1[7] != v14)
      {
        result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0)
        {
          v24 = v28;
          v25 = 2;
          while (v7 != v25)
          {
            v17 = v25;
            result = *(v24 - 1);
            if (result != v13 || *v24 != v14)
            {
              result = _stringCompareWithSmolCheck(_:_:expecting:)();
              v25 = v17 + 1;
              v24 += 2;
              if ((result & 1) == 0)
                continue;
            }
            goto LABEL_16;
          }
LABEL_19:
          v18 = v13 == 0x676761544C4E5F4CLL && v14 == 0xEF6E656B6F547265;
          if (!v18 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            swift_bridgeObjectRetain();
            Logger.init()();
            swift_bridgeObjectRetain();
            v19 = Logger.logObject.getter();
            v20 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v19, v20))
            {
              v21 = swift_slowAlloc();
              v22 = swift_slowAlloc();
              v38 = v22;
              *(_DWORD *)v21 = v31;
              swift_bridgeObjectRetain();
              *(_QWORD *)(v21 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v38);
              swift_bridgeObjectRelease_n();
              _os_log_impl(&dword_2282CC000, v19, v20, "DUFoundInEventMultilingualBERTImplementation: unexpected multihot feature %s", (uint8_t *)v21, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x22E2B117C](v22, -1, -1);
              MEMORY[0x22E2B117C](v21, -1, -1);

            }
            else
            {

              swift_bridgeObjectRelease_n();
            }
            (*(void (**)(char *, uint64_t))(v34 + 8))(v6, v35);
            v9 = v32;
            v8 = v33;
          }
          goto LABEL_8;
        }
      }
      v17 = 1;
    }
LABEL_16:
    if (v17 >= *(_QWORD *)(v8 + 16))
      break;
    *(_QWORD *)(v36 + 8 * v17) = 0x3FF0000000000000;
LABEL_8:
    if (++v10 == v9)
    {
      swift_bridgeObjectRelease();
      return v8;
    }
  }
  __break(1u);
  return result;
}

uint64_t DUFoundInEventMultilingualBERTImplementation.convertTcrToFeatureEmbeddings(tcrs:allPossibleValues:)(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  swift_retain();
  swift_bridgeObjectRetain();
  v5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay21DocumentUnderstanding20TaggedCharacterRangeCG_SaySdGs5NeverOTg504_s21d118Understanding44DUFoundInEventMultilingualBERTImplementationC29convertTcrToFeatureEmbeddings4tcrs17allPossibleValuesSayx11SdGGSayAA20fgh3CG_X13SSGtFAgJXEfU_AF0lmnoP0CSaySSGTf1cn_nTf4ngg_n(a1, v2, a2);
  swift_release();
  swift_bridgeObjectRelease();
  return v5;
}

Swift::OpaquePointer_optional __swiftcall DUFoundInEventMultilingualBERTImplementation.processModelTokenOutput(flattenedOutputScores:tokenOutputMapping:seqLen:)(Swift::OpaquePointer flattenedOutputScores, Swift::OpaquePointer tokenOutputMapping, Swift::Int seqLen)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  Swift::Bool v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  Swift::OpaquePointer_optional result;

  v6 = *((_QWORD *)tokenOutputMapping._rawValue + 2);
  if (v6)
  {
    v7 = (char *)tokenOutputMapping._rawValue + 16 * v6;
    v9 = *((_QWORD *)v7 + 2);
    v8 = *((_QWORD *)v7 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    v8 = 0xE100000000000000;
    v9 = 79;
  }
  v10 = (void *)specialized Array.init(repeating:count:)(v9, v8, seqLen);
  v15 = v10;
  if (seqLen < 0)
  {
    __break(1u);
  }
  else if (seqLen)
  {
    v12 = 0;
    do
    {
      v13 = v12 + 1;
      v14 = v12;
      closure #1 in DUFoundInEventMultilingualBERTImplementation.processModelTokenOutput(flattenedOutputScores:tokenOutputMapping:seqLen:)(&v14, (uint64_t)flattenedOutputScores._rawValue, (uint64_t *)&v15, (uint64_t)tokenOutputMapping._rawValue);
      v12 = v13;
    }
    while (seqLen != v13);
    v10 = v15;
  }
  result.value._rawValue = v10;
  result.is_nil = v11;
  return result;
}

uint64_t closure #1 in DUFoundInEventMultilingualBERTImplementation.processModelTokenOutput(flattenedOutputScores:tokenOutputMapping:seqLen:)(unint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  char v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t result;
  uint64_t v31;
  _QWORD *v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  char *v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;

  v7 = v4;
  v40 = a3;
  v41 = a4;
  v10 = type metadata accessor for Logger();
  v11 = MEMORY[0x24BDAC7A8](v10);
  v42 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v16 = (uint64_t *)((char *)&v40 - v15);
  v17 = *a1;
  v18 = (unsigned __int128)((uint64_t)*a1 * (__int128)12) >> 64;
  v19 = 12 * *a1;
  if (v18 != v19 >> 63)
  {
    __break(1u);
    goto LABEL_32;
  }
  v6 = 12 * (v17 + 1);
  if ((unsigned __int128)((uint64_t)(v17 + 1) * (__int128)12) >> 64 != v6 >> 63)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (v6 < v19)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (v19 < 0)
  {
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    swift_bridgeObjectRelease();
    v22 = specialized _copyCollectionToContiguousArray<A>(_:)(a2, a2 + 32, v19, (2 * v6) | 1);
    goto LABEL_12;
  }
  v20 = *(_QWORD *)(a2 + 16);
  if (v20 < (unint64_t)v19 || v20 < v6)
    goto LABEL_35;
  v43 = v14;
  v44 = v13;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  v21 = swift_dynamicCastClass();
  if (!v21)
  {
    swift_bridgeObjectRelease();
    v21 = MEMORY[0x24BEE4AF8];
  }
  v5 = *(_QWORD **)(v21 + 16);
  swift_release();
  if (v5 != (_QWORD *)(v6 - v19))
    goto LABEL_36;
  v22 = swift_dynamicCastClass();
  if (!v22)
  {
    swift_bridgeObjectRelease();
    v22 = MEMORY[0x24BEE4AF8];
  }
LABEL_12:
  swift_bridgeObjectRelease();
  v23 = COERCE_DOUBLE(specialized Sequence<>.max()(v22));
  if ((v24 & 1) == 0)
  {
    v25 = *(_QWORD *)(v22 + 16);
    if (!v25)
    {
LABEL_27:
      swift_release();
      v36 = v42;
      Logger.init()();
      v37 = Logger.logObject.getter();
      v38 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v37, v38))
      {
        v39 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v39 = 0;
        _os_log_impl(&dword_2282CC000, v37, v38, "DUFoundInEventMultilingualBERTImplementation: cannot find matched max value element for token prediction", v39, 2u);
        MEMORY[0x22E2B117C](v39, -1, -1);
      }

      return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v36, v44);
    }
    v26 = v23;
    v27 = 0;
    if (*(double *)(v22 + 32) != v23)
    {
      v28 = v25 - 1;
      while (v28 != v27)
      {
        v29 = *(double *)(v22 + 40 + 8 * v27++);
        if (v29 == v23)
          goto LABEL_18;
      }
      goto LABEL_27;
    }
LABEL_18:
    result = swift_release();
    if (v26 <= 0.0)
      return result;
    if (v27 >= *(_QWORD *)(v41 + 16))
    {
      __break(1u);
    }
    else
    {
      v31 = v41 + 16 * v27;
      v27 = *(_QWORD *)(v31 + 32);
      v7 = *(_QWORD *)(v31 + 40);
      v16 = v40;
      v5 = (_QWORD *)*v40;
      swift_bridgeObjectRetain();
      result = swift_isUniquelyReferenced_nonNull_native();
      *v16 = (uint64_t)v5;
      if ((result & 1) != 0)
      {
        if ((v17 & 0x8000000000000000) == 0)
          goto LABEL_22;
        goto LABEL_39;
      }
    }
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
    v5 = (_QWORD *)result;
    *v16 = result;
    if ((v17 & 0x8000000000000000) == 0)
    {
LABEL_22:
      if (v17 < v5[2])
      {
        v32 = &v5[2 * v17];
        v32[4] = v27;
        v32[5] = v7;
        return swift_bridgeObjectRelease();
      }
      goto LABEL_40;
    }
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    return result;
  }
  swift_release();
  Logger.init()();
  v33 = Logger.logObject.getter();
  v34 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v35 = 134217984;
    v45 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_2282CC000, v33, v34, "DUFoundInEventMultilingualBERTImplementation: cannot find max value element for token %ld", v35, 0xCu);
    MEMORY[0x22E2B117C](v35, -1, -1);
  }

  return (*(uint64_t (**)(uint64_t *, uint64_t))(v43 + 8))(v16, v44);
}

Swift::OpaquePointer_optional __swiftcall DUFoundInEventMultilingualBERTImplementation.runInferenceOnModelHead(modelHeadWrapper:inputArray:seqLen:)(MRLNeuralNetworkWrapper modelHeadWrapper, Swift::OpaquePointer inputArray, Swift::UInt seqLen)
{
  MontrealNeuralNetwork *model;
  Class isa;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  Class v14;
  id v15;
  uint64_t v16;
  void *v17;
  Swift::Bool v18;
  uint64_t v19;
  _QWORD *v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  NSObject *v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  _QWORD *v34;
  Swift::OpaquePointer_optional result;

  model = modelHeadWrapper.model;
  isa = modelHeadWrapper.super.isa;
  v6 = type metadata accessor for Logger();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v33 - v11;
  if (!is_mul_ok((unint64_t)inputArray._rawValue, 0x29DuLL))
  {
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v16)
      goto LABEL_6;
LABEL_26:
    swift_bridgeObjectRelease();
    v20 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_23;
  }
  v13 = *((_QWORD *)model + 2);
  if (v13 != 669 * (uint64_t)inputArray._rawValue)
  {
    Logger.init()();
    swift_bridgeObjectRetain();
    v27 = Logger.logObject.getter();
    v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v29 = 134217984;
      v34 = (_QWORD *)v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2282CC000, v27, v28, "DUFoundInEventMultilingualBERTImplementation: inputArray wrong dimension %ld", v29, 0xCu);
      MEMORY[0x22E2B117C](v29, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease();
    }
    (*(void (**)(char *, unint64_t))(v7 + 8))(v12, v6);
LABEL_22:
    v20 = 0;
    goto LABEL_23;
  }
  specialized _arrayForceCast<A, B>(_:)((uint64_t)model);
  type metadata accessor for NSNumber(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  v14 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v15 = -[objc_class lstmPredictions:embeddingDimension:classSize:seqLen:](isa, sel_lstmPredictions_embeddingDimension_classSize_seqLen_, v14, 669, 12, inputArray._rawValue);

  if (!v15)
  {
    Logger.init()();
    v30 = Logger.logObject.getter();
    v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, (os_log_type_t)v31))
    {
      v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v32 = 0;
      _os_log_impl(&dword_2282CC000, v30, (os_log_type_t)v31, "DUFoundInEventMultilingualBERTImplementation: Fail to run lstmPredictions with modelHeadWrapper", v32, 2u);
      MEMORY[0x22E2B117C](v32, -1, -1);
    }

    (*(void (**)(char *, unint64_t))(v7 + 8))(v10, v6);
    goto LABEL_22;
  }
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v6 >> 62)
    goto LABEL_25;
  v16 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v16)
    goto LABEL_26;
LABEL_6:
  v34 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v17 = (void *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16 & ~(v16 >> 63), 0);
  if (v16 < 0)
  {
    __break(1u);
    goto LABEL_28;
  }
  v19 = 0;
  v20 = v34;
  do
  {
    if ((v6 & 0xC000000000000001) != 0)
      v21 = (id)MEMORY[0x22E2AFF34](v19, v6);
    else
      v21 = *(id *)(v6 + 8 * v19 + 32);
    v22 = v21;
    Double.init(truncating:)();
    v24 = v23;

    v34 = v20;
    v26 = v20[2];
    v25 = v20[3];
    if (v26 >= v25 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
      v20 = v34;
    }
    ++v19;
    v20[2] = v26 + 1;
    v20[v26 + 4] = v24;
  }
  while (v16 != v19);
  swift_bridgeObjectRelease();
LABEL_23:
  v17 = v20;
LABEL_28:
  result.value._rawValue = v17;
  result.is_nil = v18;
  return result;
}

uint64_t specialized _arrayForceCast<A, B>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  double *v5;
  double v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v7 = MEMORY[0x24BEE4AF8];
    v4 = specialized ContiguousArray.reserveCapacity(_:)();
    v5 = (double *)(a1 + 32);
    do
    {
      v6 = *v5++;
      MEMORY[0x22E2AFBEC](v4, v6);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      v4 = specialized ContiguousArray._endMutation()();
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v5 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v4 = a1 + 32;
    do
    {
      v4 += 8;
      Int._bridgeToObjectiveC()();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v2;
    }
    while (v2);
    return v5;
  }
  return result;
}

NSBundle_optional __swiftcall DUFoundInEventMultilingualBERTImplementation.loadModelHeadBundle()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  objc_class *v14;
  Swift::Bool v15;
  objc_class *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Class isa;
  _QWORD *v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  id v28;
  id v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  char *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD aBlock[6];
  NSBundle_optional result;

  v1 = type metadata accessor for Logger();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Locale();
  v9 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(void **)(v0 + 16);
  if (!v13)
  {
    Logger.init()();
    v30 = Logger.logObject.getter();
    v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v32 = 0;
      _os_log_impl(&dword_2282CC000, v30, v31, "DUFoundInEventMultilingualBERTImplementation: NLContextualEmbedding not available", v32, 2u);
      MEMORY[0x22E2B117C](v32, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    goto LABEL_10;
  }
  v33 = v7;
  v35 = v10;
  v36 = v9;
  v34 = v13;
  v14 = (objc_class *)objc_msgSend(v34, sel_assetLocaleIdentifier);
  if (!v14)
  {
    __break(1u);
    goto LABEL_13;
  }
  v16 = v14;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  Locale.init(identifier:)();
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = 0;
  v18 = swift_allocObject();
  *(_BYTE *)(v18 + 16) = 0;
  v19 = swift_allocObject();
  *(_BYTE *)(v19 + 16) = 0;
  isa = Locale._bridgeToObjectiveC()().super.isa;
  v21 = (_QWORD *)swift_allocObject();
  v21[2] = v17;
  v21[3] = v19;
  v21[4] = v18;
  aBlock[4] = partial apply for closure #1 in DUFoundInEventMultilingualBERTImplementation.loadModelHeadBundle();
  aBlock[5] = v21;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed CFURLRef?, @unowned LDAssetBundleType, @guaranteed CFLocaleRef?, @guaranteed CFStringRef?, @unowned UnsafeMutablePointer<Bool>?) -> ();
  aBlock[3] = &block_descriptor_18;
  v22 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  LDEnumerateAssetDataItems();
  _Block_release(v22);

  swift_beginAccess();
  if (*(_BYTE *)(v19 + 16) != 1 || (swift_beginAccess(), (*(_BYTE *)(v18 + 16) & 1) == 0))
  {
    v25 = type metadata accessor for TaskPriority();
    v26 = (uint64_t)v33;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v33, 1, 1, v25);
    v27 = (_QWORD *)swift_allocObject();
    v27[2] = 0;
    v27[3] = 0;
    v28 = v34;
    v27[4] = v34;
    v29 = v28;
    _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v26, (uint64_t)&async function pointer to partial apply for closure #2 in DUFoundInEventMultilingualBERTImplementation.loadModelHeadBundle(), (uint64_t)v27);

    swift_release();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v12, v36);
    swift_release();
    swift_release();
    swift_release();
LABEL_10:
    v23 = 0;
    goto LABEL_11;
  }
  (*(void (**)(char *, uint64_t))(v35 + 8))(v12, v36);

  swift_beginAccess();
  v23 = *(void **)(v17 + 16);
  v24 = v23;
  swift_release();
  swift_release();
  swift_release();
LABEL_11:
  v14 = (objc_class *)v23;
LABEL_13:
  result.value.super.isa = v14;
  result.is_nil = v15;
  return result;
}

void closure #1 in DUFoundInEventMultilingualBERTImplementation.loadModelHeadBundle()(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, _BYTE *a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  id v25;
  void *v26;
  char v27;
  void (*v28)(char *, char *, uint64_t);
  void **v29;
  id v30;
  NSURL *v31;
  void *v32;
  void *v33;
  id v34;
  void *v35;
  _BYTE *v36;
  id v37;
  void *v38;
  char v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;

  v46 = a1;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v42 - v16;
  v18 = type metadata accessor for URL();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v42 - v23;
  if (!a4)
    return;
  v42 = a6;
  v43 = a7;
  v44 = a8;
  v45 = v15;
  type metadata accessor for CFStringRef(0);
  v25 = a4;
  v26 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000015, 0x80000002284DA210);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef();
  v27 = static _CFObject.== infix(_:_:)();

  if ((v27 & 1) != 0)
  {
    if (v46)
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)();
      v28 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
      v28(v17, v22, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v17, 0, 1, v18);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) != 1)
      {
        v29 = (void **)(v42 + 16);
        v43 += 16;
        v28(v24, v17, v18);
        v30 = objc_allocWithZone(MEMORY[0x24BDD1488]);
        URL._bridgeToObjectiveC()(v31);
        v33 = v32;
        v34 = objc_msgSend(v30, sel_initWithURL_, v32);

        (*(void (**)(char *, uint64_t))(v19 + 8))(v24, v18);
        swift_beginAccess();
        v35 = *v29;
        *v29 = v34;

        v36 = v43;
        swift_beginAccess();
        *v36 = 1;
        goto LABEL_9;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v17, 1, 1, v18);
    }

    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v17, &demangling cache variable for type metadata for URL?);
  }
  else
  {

  }
LABEL_9:
  v37 = v25;
  v38 = (void *)MEMORY[0x22E2AF8EC](0x6E69646465626D45, 0xE900000000000067);
  v39 = static _CFObject.== infix(_:_:)();

  if ((v39 & 1) != 0)
  {
    if (v46)
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      v40 = (uint64_t)v45;
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v45, v22, v18);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v19 + 56))(v40, 0, 1, v18);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v40, 1, v18) != 1)
      {
        v41 = (_BYTE *)(v44 + 16);
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v40, &demangling cache variable for type metadata for URL?);
        swift_beginAccess();
        *v41 = 1;
        return;
      }
    }
    else
    {

      v40 = (uint64_t)v45;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v45, 1, 1, v18);
    }
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v40, &demangling cache variable for type metadata for URL?);
  }
  else
  {

  }
}

void thunk for @escaping @callee_guaranteed (@guaranteed CFURLRef?, @unowned LDAssetBundleType, @guaranteed CFLocaleRef?, @guaranteed CFStringRef?, @unowned UnsafeMutablePointer<Bool>?) -> ()(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5, uint64_t a6)
{
  void (*v11)(void *, uint64_t, void *, void *, uint64_t);
  id v12;
  id v13;
  id v14;

  v11 = *(void (**)(void *, uint64_t, void *, void *, uint64_t))(a1 + 32);
  swift_retain();
  v14 = a2;
  v12 = a4;
  v13 = a5;
  v11(a2, a3, a4, a5, a6);
  swift_release();

}

uint64_t closure #2 in DUFoundInEventMultilingualBERTImplementation.loadModelHeadBundle()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 128) = a4;
  return swift_task_switch();
}

uint64_t closure #2 in DUFoundInEventMultilingualBERTImplementation.loadModelHeadBundle()()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = (void *)v0[16];
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = closure #2 in DUFoundInEventMultilingualBERTImplementation.loadModelHeadBundle();
  v2 = swift_continuation_init();
  v0[10] = MEMORY[0x24BDAC760];
  v3 = v0 + 10;
  v3[1] = 0x40000000;
  v3[2] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned Int, @unowned NSError?) -> () with result type Int;
  v3[3] = &block_descriptor_41;
  v3[4] = v2;
  objc_msgSend(v1, sel_requestAssetsWithCompletionHandler_, v3);
  return swift_continuation_await();
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 136) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned Int, @unowned NSError?) -> () with result type Int(uint64_t a1, uint64_t a2, void *a3)
{
  _QWORD *v4;
  id v5;

  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    swift_allocError();
    *v4 = a3;
    v5 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) + 40) = a2;
    return swift_continuation_throwingResume();
  }
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = type metadata accessor for TaskPriority();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(_QWORD *)(a3 + 16))
      return swift_task_create();
    goto LABEL_3;
  }
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t DUFoundInEventMultilingualBERTImplementation.runTypedOnRequest(request:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[73] = v1;
  v2[72] = a1;
  v3 = type metadata accessor for Logger();
  v2[74] = v3;
  v2[75] = *(_QWORD *)(v3 - 8);
  v2[76] = swift_task_alloc();
  v4 = type metadata accessor for URL();
  v2[77] = v4;
  v2[78] = *(_QWORD *)(v4 - 8);
  v2[79] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 664) = a1;
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 784) = a1;
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t DUFoundInEventMultilingualBERTImplementation.runTypedOnRequest(request:)()
{
  uint64_t v0;
  uint64_t (*v1)(void);
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  const char *v8;

  if (*(_BYTE *)DocumentUnderstandingFeatureFlagReader.isFoundInModelsEnabled.unsafeMutableAddressor() == 1)
  {
    v1 = *(uint64_t (**)(void))(**(_QWORD **)(v0 + 576) + 136);
    *(_QWORD *)(v0 + 640) = v1;
    v2 = (void *)v1();

    if (v2)
    {
      type metadata accessor for DUFoundInEventHTMLPreprocessingSpecification();
      *(_QWORD *)(v0 + 648) = swift_allocObject();
      v3 = async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:);
      v4 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 656) = v4;
      *v4 = v0;
      v4[1] = DUFoundInEventMultilingualBERTImplementation.runTypedOnRequest(request:);
      return ((uint64_t (*)(uint64_t))((char *)&async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:)
                                              + v3))(*(_QWORD *)(v0 + 576));
    }
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v7 = swift_allocError();
    *(_QWORD *)v6 = 0xD000000000000043;
    v8 = "DUFoundInEventMultilingualBERTImplementation: nil document received";
  }
  else
  {
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v7 = swift_allocError();
    *(_QWORD *)v6 = 0xD000000000000048;
    v8 = "DUFoundInEventMultilingualBERTImplementation: FoundInModels are disabled";
  }
  *(_QWORD *)(v6 + 8) = (unint64_t)(v8 - 32) | 0x8000000000000000;
  *(_BYTE *)(v6 + 16) = 0;
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v7, 1);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(uint64_t);
  uint64_t (*v3)(void *);
  id v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  unsigned __int8 v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  const char *v34;
  unint64_t v35;
  uint64_t v36;
  id v37;
  id v38;
  uint64_t v39;
  void *v40;
  void *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  void *v47;
  id v48;
  void *v49;
  void *v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  void *v56;
  id v57;
  id v58;
  void *v59;
  void *v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  id v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  void *v74;
  Class isa;
  id v76;
  void *v77;
  id v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  void *v82;
  uint64_t v83;
  id v84;
  void *v85;
  NSObject *v86;
  os_log_type_t v87;
  uint8_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;

  v1 = *(void **)(v0 + 664);
  if (!v1)
  {
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v30 = swift_allocError();
    *(_QWORD *)v31 = 0xD000000000000020;
    *(_QWORD *)(v31 + 8) = 0x80000002284DA130;
    *(_BYTE *)(v31 + 16) = 0;
    goto LABEL_15;
  }
  v2 = *(uint64_t (**)(uint64_t))(v0 + 640);
  v3 = *(uint64_t (**)(void *))(**(_QWORD **)(v0 + 576) + 144);
  v4 = v1;
  v5 = v3(v1);
  v6 = (_QWORD *)v2(v5);
  if (!v6
    || (v7 = v6,
        v8 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v6) + 0x88))(),
        v10 = v9,
        v7,
        *(_QWORD *)(v0 + 672) = v8,
        (*(_QWORD *)(v0 + 680) = v10) == 0))
  {
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v30 = swift_allocError();
    *(_QWORD *)v29 = 0xD000000000000048;
    *(_QWORD *)(v29 + 8) = 0x80000002284DA160;
LABEL_12:
    *(_BYTE *)(v29 + 16) = 0;
LABEL_13:

LABEL_15:
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v30, 1);
  }
  v11 = (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 584) + 192))();
  *(_QWORD *)(v0 + 688) = v11;
  if (!v11)
  {
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v30 = swift_allocError();
    *(_QWORD *)v29 = 0xD00000000000005ELL;
    *(_QWORD *)(v29 + 8) = 0x80000002284DA1B0;
    goto LABEL_12;
  }
  v12 = (void *)v11;
  v13 = objc_msgSend(objc_allocWithZone((Class)MRLNeuralNetworkWrapper), sel_init);
  *(_QWORD *)(v0 + 696) = v13;
  v14 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000015, 0x80000002284DA210);
  v15 = (void *)MEMORY[0x22E2AF8EC](0x6F73736572707365, 0xEC0000006E69622ELL);
  v16 = objc_msgSend(v12, sel_pathForResource_ofType_, v14, v15);

  if (!v16)
  {
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v30 = swift_allocError();
    v34 = "DUFoundInEventMultilingualBERTImplementation: Unable to load FoundInEvent model head";
    v35 = 0xD000000000000054;
LABEL_19:
    *(_QWORD *)v33 = v35;
    *(_QWORD *)(v33 + 8) = (unint64_t)(v34 - 32) | 0x8000000000000000;
    *(_BYTE *)(v33 + 16) = 0;

    goto LABEL_13;
  }
  v17 = objc_msgSend(v13, sel_load_, v16);

  if ((v17 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v30 = swift_allocError();
    v34 = "DUFoundInEventMultilingualBERTImplementation: Error loading FoundInEvent model head";
    v35 = 0xD000000000000053;
    goto LABEL_19;
  }
  v18 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000018, 0x80000002284DA2F0);
  v19 = (void *)MEMORY[0x22E2AF8EC](0x7473696C70, 0xE500000000000000);
  v20 = objc_msgSend(v12, sel_pathForResource_ofType_, v18, v19);

  if (!v20)
  {
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v30 = swift_allocError();
    *(_QWORD *)v36 = 0xD000000000000049;
    *(_QWORD *)(v36 + 8) = 0x80000002284DA310;
    *(_BYTE *)(v36 + 16) = 0;

    goto LABEL_15;
  }
  v99 = v13;
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v23 = v22;

  v24 = objc_allocWithZone(MEMORY[0x24BDBCE70]);
  v25 = (void *)MEMORY[0x22E2AF8EC](v21, v23);
  swift_bridgeObjectRelease();
  v26 = objc_msgSend(v24, sel_initWithContentsOfFile_, v25);
  *(_QWORD *)(v0 + 704) = v26;

  if (!v26)
  {
    *(_OWORD *)(v0 + 152) = 0u;
    *(_OWORD *)(v0 + 168) = 0u;
LABEL_27:
    swift_bridgeObjectRelease();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 152, &demangling cache variable for type metadata for Any?);
LABEL_29:
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v30 = swift_allocError();
    *(_QWORD *)v39 = 0xD00000000000004BLL;
    *(_QWORD *)(v39 + 8) = 0x80000002284DA360;
    *(_BYTE *)(v39 + 16) = 0;

    goto LABEL_15;
  }
  *(_QWORD *)(v0 + 480) = 67;
  *(_QWORD *)(v0 + 488) = 0xE100000000000000;
  v27 = v26;
  v28 = objc_msgSend(v27, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());

  swift_unknownObjectRelease();
  if (v28)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    *(_OWORD *)(v0 + 216) = 0u;
    *(_OWORD *)(v0 + 232) = 0u;
  }
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 216, v0 + 152, &demangling cache variable for type metadata for Any?);
  if (!*(_QWORD *)(v0 + 176))
    goto LABEL_27;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Int]);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_29;
  }
  *(_QWORD *)(v0 + 712) = *(_QWORD *)(v0 + 544);
  *(_QWORD *)(v0 + 496) = 68;
  *(_QWORD *)(v0 + 504) = 0xE100000000000000;
  v37 = v27;
  v38 = objc_msgSend(v37, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());

  swift_unknownObjectRelease();
  if (v38)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    *(_OWORD *)(v0 + 344) = 0u;
    *(_OWORD *)(v0 + 360) = 0u;
  }
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 344, v0 + 280, &demangling cache variable for type metadata for Any?);
  if (!*(_QWORD *)(v0 + 304))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 280, &demangling cache variable for type metadata for Any?);
LABEL_43:
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v30 = swift_allocError();
    *(_QWORD *)v67 = 0xD00000000000004ALL;
    *(_QWORD *)(v67 + 8) = 0x80000002284DA3B0;
    *(_BYTE *)(v67 + 16) = 0;

    goto LABEL_15;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_43;
  }
  v98 = v37;
  *(_QWORD *)(v0 + 720) = *(_QWORD *)(v0 + 560);
  v40 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000019, 0x80000002284DA400);
  v41 = (void *)MEMORY[0x22E2AF8EC](0x7473696C70, 0xE500000000000000);
  v42 = objc_msgSend(v12, sel_pathForResource_ofType_, v40, v41);

  if (!v42)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v30 = swift_allocError();
    *(_QWORD *)v68 = 0xD00000000000004ALL;
    *(_QWORD *)(v68 + 8) = 0x80000002284DA420;
    *(_BYTE *)(v68 + 16) = 0;

LABEL_58:
    goto LABEL_15;
  }
  v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v45 = v44;

  v46 = objc_allocWithZone(MEMORY[0x24BDBCE70]);
  v47 = (void *)MEMORY[0x22E2AF8EC](v43, v45);
  swift_bridgeObjectRelease();
  v48 = objc_msgSend(v46, sel_initWithContentsOfFile_, v47);
  *(_QWORD *)(v0 + 728) = v48;

  v49 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000018, 0x80000002284DA470);
  v50 = (void *)MEMORY[0x22E2AF8EC](0x7473696C70, 0xE500000000000000);
  v51 = objc_msgSend(v12, sel_pathForResource_ofType_, v49, v50);

  if (!v51)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v30 = swift_allocError();
    *(_QWORD *)v69 = 0xD000000000000050;
    *(_QWORD *)(v69 + 8) = 0x80000002284DA490;
    *(_BYTE *)(v69 + 16) = 0;

    goto LABEL_58;
  }
  v97 = v48;
  v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v54 = v53;

  v55 = objc_allocWithZone(MEMORY[0x24BDBCE70]);
  v56 = (void *)MEMORY[0x22E2AF8EC](v52, v54);
  swift_bridgeObjectRelease();
  v57 = objc_msgSend(v55, sel_initWithContentsOfFile_, v56);
  *(_QWORD *)(v0 + 736) = v57;

  v58 = v57;
  v59 = (void *)MEMORY[0x22E2AF8EC](0x6C65646F6DLL, 0xE500000000000000);
  v60 = (void *)MEMORY[0x22E2AF8EC](0x7473696C70, 0xE500000000000000);
  v61 = objc_msgSend(v12, sel_pathForResource_ofType_, v59, v60);

  if (!v61)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v30 = swift_allocError();
    *(_QWORD *)v70 = 0xD000000000000053;
    *(_QWORD *)(v70 + 8) = 0x80000002284DA4F0;
    *(_BYTE *)(v70 + 16) = 0;

    goto LABEL_15;
  }
  v96 = v58;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  URL.init(fileURLWithPath:)();
  swift_bridgeObjectRelease();
  v62 = Data.init(contentsOf:options:)();
  v72 = v71;
  v73 = v62;
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 624) + 8))(*(_QWORD *)(v0 + 632), *(_QWORD *)(v0 + 616));
  v74 = (void *)objc_opt_self();
  v94 = v73;
  v95 = v72;
  isa = Data._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)(v0 + 536) = 0;
  v76 = objc_msgSend(v74, sel_propertyListWithData_options_format_error_, isa, 0, 0, v0 + 536);

  v77 = *(void **)(v0 + 536);
  if (!v76)
  {
    v84 = v77;
    v85 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    Logger.init()();
    v86 = Logger.logObject.getter();
    v87 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v86, v87))
    {
      v88 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v88 = 0;
      _os_log_impl(&dword_2282CC000, v86, v87, "DUFoundInEventMultilingualBERTImplementation: error parsing tokenOutputMapping", v88, 2u);
      MEMORY[0x22E2B117C](v88, -1, -1);
    }
    v89 = *(_QWORD *)(v0 + 608);
    v90 = *(_QWORD *)(v0 + 600);
    v91 = *(_QWORD *)(v0 + 592);
    outlined consume of Data._Representation(v94, v95);

    (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v89, v91);
    goto LABEL_37;
  }
  v78 = v77;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  if (swift_dynamicCast())
    v79 = *(_QWORD *)(v0 + 552);
  else
    v79 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  if (*(_QWORD *)(v79 + 16)
    && (v92 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000022, 0x80000002284DA840), (v93 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v79 + 56) + 32 * v92, v0 + 184);
  }
  else
  {
    *(_OWORD *)(v0 + 184) = 0u;
    *(_OWORD *)(v0 + 200) = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v0 + 208))
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 184, &demangling cache variable for type metadata for Any?);
    goto LABEL_71;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  if (!swift_dynamicCast())
  {
LABEL_71:
    outlined consume of Data._Representation(v94, v95);
LABEL_37:
    v63 = MEMORY[0x24BEE4AF8];
    goto LABEL_38;
  }
  v63 = *(_QWORD *)(v0 + 568);
  outlined consume of Data._Representation(v94, v95);
LABEL_38:
  v64 = v97;
  *(_QWORD *)(v0 + 752) = v63;
  *(_QWORD *)(v0 + 744) = 0;
  if (!v97)
  {
    *(_OWORD *)(v0 + 408) = 0u;
    *(_OWORD *)(v0 + 424) = 0u;
LABEL_55:
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v82 = v96;
    swift_bridgeObjectRelease();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 408, &demangling cache variable for type metadata for Any?);
LABEL_57:
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v30 = swift_allocError();
    *(_QWORD *)v83 = 0xD000000000000086;
    *(_QWORD *)(v83 + 8) = 0x80000002284DA550;
    *(_BYTE *)(v83 + 16) = 0;

    goto LABEL_58;
  }
  *(_QWORD *)(v0 + 464) = 0x6E656B6F74;
  *(_QWORD *)(v0 + 472) = 0xE500000000000000;
  v65 = v97;
  v66 = objc_msgSend(v65, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());

  swift_unknownObjectRelease();
  if (v66)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    *(_OWORD *)(v0 + 376) = 0u;
    *(_OWORD *)(v0 + 392) = 0u;
  }
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 376, v0 + 408, &demangling cache variable for type metadata for Any?);
  v64 = v97;
  if (!*(_QWORD *)(v0 + 432))
    goto LABEL_55;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : [String]]);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v82 = v96;

    goto LABEL_57;
  }
  *(_QWORD *)(v0 + 760) = *(_QWORD *)(v0 + 528);
  type metadata accessor for DUFoundInEventDDSpecification();
  *(_QWORD *)(v0 + 768) = swift_allocObject();
  v80 = async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:);
  v81 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 776) = v81;
  *v81 = v0;
  v81[1] = DUFoundInEventMultilingualBERTImplementation.runTypedOnRequest(request:);
  return ((uint64_t (*)(uint64_t))((char *)&async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:)
                                          + v80))(*(_QWORD *)(v0 + 576));
}

{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  _QWORD *v4;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  if (*(_QWORD *)(v0 + 784))
  {
    v1 = *(_QWORD *)(v0 + 680);
    v2 = *(int **)(**(_QWORD **)(v0 + 584) + 120);
    v3 = *v2;
    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 792) = v4;
    *v4 = v0;
    v4[1] = DUFoundInEventMultilingualBERTImplementation.runTypedOnRequest(request:);
    return ((uint64_t (*)(_QWORD, uint64_t))((char *)v2 + v3))(*(_QWORD *)(v0 + 672), v1);
  }
  else
  {
    v6 = *(void **)(v0 + 736);
    v7 = *(void **)(v0 + 728);
    v13 = *(void **)(v0 + 704);
    v8 = *(void **)(v0 + 696);
    v9 = *(void **)(v0 + 688);
    v10 = *(void **)(v0 + 664);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v11 = swift_allocError();
    *(_QWORD *)v12 = 0xD000000000000049;
    *(_QWORD *)(v12 + 8) = 0x80000002284DA5E0;
    *(_BYTE *)(v12 + 16) = 0;

    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v11, 1);
  }
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  Class isa;
  id v12;
  uint64_t v13;
  int64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  void **v38;
  void *v39;
  uint64_t v40;
  Swift::String v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  void **v51;
  uint64_t v52;
  void *v53;
  Swift::String v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  int64_t v73;
  int64_t v74;
  _QWORD *v75;
  int64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t (*v88)(_QWORD, uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  uint64_t v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  uint64_t v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  uint64_t v125;
  void *v126;
  void *v127;
  void *v128;
  unint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  void **v134;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  Swift::String v138;
  unint64_t v139;
  uint64_t v140;
  void (*v141)(uint64_t, _QWORD);
  _QWORD **v142;
  _QWORD *v143;
  _QWORD *v144;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  _QWORD *v149;
  unint64_t v150;
  void *v151;
  void *v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  _QWORD *v157;
  uint64_t v158;
  void *v159;
  unint64_t v160;
  void *v161;
  void *v162;
  int64_t v163;
  void *v164;
  uint64_t (*v165)(void);
  void *v166;
  _QWORD *v167;
  void *v168;
  void *v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;

  v175 = *MEMORY[0x24BDAC8D0];
  v1 = v0[100];
  if (!v1)
  {
    v19 = (void *)v0[92];
    v162 = (void *)v0[91];
    v166 = (void *)v0[88];
    v20 = (void *)v0[87];
    v21 = (void *)v0[86];
    v22 = *(void **)(v171 + 664);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    v23 = (_QWORD *)v171;
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v170 = (_QWORD *)swift_allocError();
    *(_QWORD *)v24 = 0xD000000000000052;
    *(_QWORD *)(v24 + 8) = 0x80000002284DA630;
    *(_BYTE *)(v24 + 16) = 0;

    v25 = 1;
    goto LABEL_7;
  }
  v2 = v0[57];
  v3 = v0[98];
  v4 = v0[85];
  v5 = v0[84];
  v165 = (uint64_t (*)(void))v0[80];
  v6 = v0[73];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NLTagScheme>);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_2284C1EE0;
  v8 = (void *)*MEMORY[0x24BDDFD18];
  *(_QWORD *)(v7 + 32) = *MEMORY[0x24BDDFD18];
  v9 = objc_allocWithZone(MEMORY[0x24BDDFD68]);
  type metadata accessor for NLTagScheme(0);
  v10 = v8;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v12 = objc_msgSend(v9, sel_initWithTagSchemes_, isa);

  v161 = v12;
  v13 = (*(uint64_t (**)(uint64_t, id, uint64_t))(*(_QWORD *)v6 + 136))(v1, v12, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 144))(v5, v4, v3);
  v15 = (_QWORD *)v165();
  v16 = MEMORY[0x24BEE4AF8];
  if (v15)
  {
    v17 = v15;
    v18 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v15) + 0xD8))();

    if (!v18)
      v18 = v16;
  }
  else
  {
    v18 = MEMORY[0x24BEE4AF8];
  }
  v27 = v171;
  v28 = *(_QWORD *)(v171 + 744);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v171 + 584) + 152))(*(_QWORD *)(v171 + 672), *(_QWORD *)(v171 + 680), v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v29 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySay21DocumentUnderstanding20TaggedCharacterRangeCGG_AIs5NeverOTg504_s21d108Understanding44DUFoundInEventMultilingualBERTImplementationC17runTypedOnRequest7requests6ResultOyAA0cdeM0Cs5c35_pGAA012DUProcessingK0C_tYaFSayAA20fgH9CGAPXEfU_A2ITf1cn_nTf4ngg_n(v13, v14);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  v173 = v16;
  v30 = *(_QWORD *)(v29 + 16);
  if (v30)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v30; ++i)
    {
      v32 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v32);
    }
    swift_bridgeObjectRelease();
    v33 = v173;
  }
  else
  {
    v33 = v16;
  }
  v34 = *(_QWORD *)(v171 + 712);
  swift_bridgeObjectRetain_n();
  v173 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v34);
  specialized MutableCollection<>.sort(by:)(&v173, v34);
  swift_bridgeObjectRelease();
  if (v28)
    return swift_release();
  swift_bridgeObjectRelease_n();
  v35 = v173;
  v36 = *(_QWORD *)(v173 + 16);
  v160 = v33;
  v167 = (_QWORD *)v29;
  if (v36)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36, 0);
    v37 = v16;
    v38 = (void **)(v35 + 40);
    do
    {
      v40 = (uint64_t)*(v38 - 1);
      v39 = *v38;
      v173 = 24387;
      v174 = 0xE200000000000000;
      swift_bridgeObjectRetain();
      v41._countAndFlagsBits = v40;
      v41._object = v39;
      String.append(_:)(v41);
      swift_bridgeObjectRelease();
      v43 = v173;
      v42 = v174;
      v45 = *(_QWORD *)(v16 + 16);
      v44 = *(_QWORD *)(v16 + 24);
      if (v45 >= v44 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v44 > 1, v45 + 1, 1);
      *(_QWORD *)(v16 + 16) = v45 + 1;
      v46 = v16 + 16 * v45;
      *(_QWORD *)(v46 + 32) = v43;
      *(_QWORD *)(v46 + 40) = v42;
      v38 += 2;
      --v36;
    }
    while (v36);
    swift_release();
    v27 = v171;
    v29 = (uint64_t)v167;
  }
  else
  {
    swift_release();
    v37 = MEMORY[0x24BEE4AF8];
  }
  v47 = *(_QWORD *)(v27 + 720);
  swift_bridgeObjectRetain_n();
  v173 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v47);
  specialized MutableCollection<>.sort(by:)(&v173, v47);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  v48 = v173;
  v49 = *(_QWORD *)(v173 + 16);
  if (v49)
  {
    v172 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v49, 0);
    v50 = v172;
    v51 = (void **)(v48 + 40);
    do
    {
      v52 = (uint64_t)*(v51 - 1);
      v53 = *v51;
      v173 = 24388;
      v174 = 0xE200000000000000;
      swift_bridgeObjectRetain();
      v54._countAndFlagsBits = v52;
      v54._object = v53;
      String.append(_:)(v54);
      swift_bridgeObjectRelease();
      v55 = v173;
      v56 = v174;
      v58 = *(_QWORD *)(v172 + 16);
      v57 = *(_QWORD *)(v172 + 24);
      if (v58 >= v57 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v57 > 1, v58 + 1, 1);
      *(_QWORD *)(v172 + 16) = v58 + 1;
      v59 = v172 + 16 * v58;
      *(_QWORD *)(v59 + 32) = v55;
      *(_QWORD *)(v59 + 40) = v56;
      v51 += 2;
      --v49;
    }
    while (v49);
    swift_release();
    v27 = v171;
    v29 = (uint64_t)v167;
  }
  else
  {
    swift_release();
    v50 = MEMORY[0x24BEE4AF8];
  }
  v60 = *(_QWORD *)(v27 + 584);
  v173 = v37;
  specialized Array.append<A>(contentsOf:)(v50);
  v61 = v173;
  swift_retain();
  swift_bridgeObjectRetain();
  v62 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySay21DocumentUnderstanding20TaggedCharacterRangeCGG_SaySaySdGGs5NeverOTg504_s21d108Understanding44DUFoundInEventMultilingualBERTImplementationC17runTypedOnRequest7requests6ResultOyAA0cdeM0Cs5c45_pGAA012DUProcessingK0C_tYaFSaySaySdGGSayAA20fgH8CGXEfU5_AF0lmnoP0CSaySSGTf1cn_nTf4ngg_n(v29, v60, v61);
  swift_bridgeObjectRelease_n();
  swift_release();
  v63 = *(_QWORD *)(v62 + 16);
  if (!v63)
  {
    swift_bridgeObjectRelease();
    v66 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v64 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_62:
    v85 = v66[2];
    if (v85)
    {
      if (!v167[2])
        goto LABEL_116;
      v62 = v66[4];
      v86 = v167[4];
      if (v86 >> 62)
        goto LABEL_117;
      v87 = *(_QWORD *)((v86 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      while (1)
      {
        v88 = *(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v171 + 584) + 184);
        v89 = v88(*(_QWORD *)(v171 + 696), v62, v87);
        swift_bridgeObjectRelease();
        if (!v89)
          break;
        v90 = 0;
        --v85;
        while (1)
        {
          specialized Array.append<A>(contentsOf:)(v89);
          if (v85 == v90)
          {
            swift_bridgeObjectRelease();
            goto LABEL_80;
          }
          if ((unint64_t)(v90 + 1) >= v66[2])
            break;
          if ((unint64_t)(v90 + 1) >= v167[2])
            goto LABEL_115;
          v62 = v66[v90 + 5];
          v91 = v167[v90 + 5];
          if (v91 >> 62)
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v92 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (v92 < 0)
              return _assertionFailure(_:_:file:line:flags:)();
          }
          else
          {
            v92 = *(_QWORD *)((v91 & 0xFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain();
          }
          v89 = v88(*(_QWORD *)(v171 + 696), v62, v92);
          swift_bridgeObjectRelease();
          ++v90;
          if (!v89)
            goto LABEL_87;
        }
        __break(1u);
LABEL_115:
        __break(1u);
LABEL_116:
        __break(1u);
LABEL_117:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v87 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v87 < 0)
          return _assertionFailure(_:_:file:line:flags:)();
      }
LABEL_87:
      v115 = *(void **)(v171 + 736);
      v159 = *(void **)(v171 + 728);
      v164 = *(void **)(v171 + 704);
      v116 = *(void **)(v171 + 696);
      v117 = *(void **)(v171 + 688);
      v118 = *(void **)(v171 + 664);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
      v170 = (_QWORD *)swift_allocError();
      *(_QWORD *)v119 = 0xD000000000000061;
      *(_QWORD *)(v119 + 8) = 0x80000002284DA690;
      v25 = 1;
      *(_BYTE *)(v119 + 16) = 1;

      v23 = (_QWORD *)v171;
      goto LABEL_7;
    }
    swift_bridgeObjectRelease();
    v64 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_80:
    swift_bridgeObjectRelease();
    if (v160 >> 62)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v93 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v93 = *(_QWORD *)((v160 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    v69 = (_QWORD *)v171;
    v94 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(**(_QWORD **)(v171 + 584) + 176))(v64, *(_QWORD *)(v171 + 752), v93);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v94)
    {
      v95 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(v171 + 584) + 96))(*(_QWORD *)(v171 + 672), *(_QWORD *)(v171 + 680), v94, *(_QWORD *)(v171 + 760));
      swift_bridgeObjectRelease();
      v96 = *(_QWORD *)(v171 + 784);
      v167 = *(_QWORD **)(v171 + 736);
      if (v95)
      {
        v163 = v160 >> 62;
        v158 = v94;
        v97 = *(_QWORD *)(v171 + 584);
        v98 = *(_QWORD *)(v171 + 576);
        (*(void (**)(_QWORD, _QWORD, unint64_t))(*(_QWORD *)v97 + 104))(*(_QWORD *)(v171 + 672), *(_QWORD *)(v171 + 680), v160);
        v99 = *(_QWORD *)(v171 + 136);
        v100 = *(_QWORD *)(v171 + 144);
        swift_bridgeObjectRetain();
        v101 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8], &demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
        specialized FoundInEventModelOutput.init(plainText:dataDetectorMatches:modelSequenceOutput:modelTokenOutput:tokenizerOutput:)(v99, v100, v96, v101, v95, (_QWORD *)(v171 + 104), (_QWORD *)(v171 + 16));
        v170 = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v97 + 88))(v171 + 16, v167);
        outlined release of FoundInEventModelOutput(v171 + 16);

        v102 = (*(uint64_t (**)(void))(*(_QWORD *)v98 + 184))();
        if (v102 == 2)
        {
          v103 = *(void **)(v171 + 736);
          v104 = *(void **)(v171 + 728);
          v105 = *(void **)(v171 + 704);
          v106 = *(void **)(v171 + 696);
          v107 = *(void **)(v171 + 688);
          v108 = *(void **)(v171 + 664);
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

LABEL_94:
          swift_bridgeObjectRelease();
LABEL_113:

          v25 = 0;
          v23 = (_QWORD *)v171;
          goto LABEL_7;
        }
        if ((v102 & 1) == 0)
        {
          v126 = *(void **)(v171 + 736);
          v127 = *(void **)(v171 + 728);
          v105 = *(void **)(v171 + 704);
          v128 = *(void **)(v171 + 696);
          v107 = *(void **)(v171 + 688);
          v108 = *(void **)(v171 + 664);
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          goto LABEL_94;
        }
LABEL_96:
        v129 = v160;
        if (v163)
        {
          swift_bridgeObjectRetain();
          result = _CocoaArrayWrapper.endIndex.getter();
          v130 = result;
        }
        else
        {
          v130 = *(_QWORD *)((v160 & 0xFFFFFFFFFFFFF8) + 0x10);
          result = swift_bridgeObjectRetain();
        }
        v131 = (_QWORD *)v171;
        if (v130)
        {
          if (v130 < 1)
          {
            __break(1u);
          }
          else if ((unint64_t)(v130 - 1) < *(_QWORD *)(v158 + 16))
          {
            v132 = 0;
            v133 = v171 + 312;
            v134 = (void **)(v158 + 40);
            do
            {
              v135 = *(_QWORD *)(v129 + 8 * v132 + 32);
              v137 = (uint64_t)*(v134 - 1);
              v136 = *v134;
              v173 = 24397;
              v174 = 0xE200000000000000;
              swift_retain();
              swift_bridgeObjectRetain();
              v138._countAndFlagsBits = v137;
              v138._object = v136;
              String.append(_:)(v138);
              swift_bridgeObjectRelease();
              v140 = v173;
              v139 = v174;
              v141 = (void (*)(uint64_t, _QWORD))(*(uint64_t (**)(uint64_t))(*(_QWORD *)v135 + 160))(v133);
              v143 = v142;
              v144 = *v142;
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              *v143 = v144;
              v146 = v139;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                v144 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v144[2] + 1, 1, v144);
                *v143 = v144;
              }
              v148 = v144[2];
              v147 = v144[3];
              if (v148 >= v147 >> 1)
              {
                v144 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v147 > 1), v148 + 1, 1, v144);
                *v143 = v144;
              }
              ++v132;
              v144[2] = v148 + 1;
              v149 = &v144[2 * v148];
              v149[4] = v140;
              v149[5] = v146;
              v133 = v171 + 312;
              v141(v171 + 312, 0);
              swift_release();
              v134 += 2;
              v129 = v160;
            }
            while (v130 != v132);
            swift_bridgeObjectRelease();
            v131 = (_QWORD *)v171;
            v150 = v160;
            goto LABEL_112;
          }
          __break(1u);
          return result;
        }
        swift_bridgeObjectRelease();
        v150 = v160;
LABEL_112:
        swift_bridgeObjectRelease();
        v151 = (void *)v131[92];
        v169 = (void *)v131[91];
        v108 = (void *)v131[88];
        v152 = (void *)v131[87];
        v153 = (void *)v131[86];
        v154 = v131[85];
        v155 = v131[84];
        v156 = (void *)v131[83];
        swift_bridgeObjectRelease();
        v157 = (_QWORD *)MEMORY[0x24BEE4EA0];
        (*(void (**)(uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & *v170) + 0x388))(v155, v154);
        (*(void (**)(unint64_t))((*v157 & *v170) + 0x3A0))(v150);

        goto LABEL_113;
      }
LABEL_90:
      v120 = (void *)v69[91];
      v121 = (void *)v69[88];
      v122 = (void *)v69[87];
      v123 = (void *)v69[86];
      v124 = (void *)v69[83];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
      v170 = (_QWORD *)swift_allocError();
      *(_QWORD *)v125 = 0xD000000000000082;
      *(_QWORD *)(v125 + 8) = 0x80000002284DA750;
      *(_BYTE *)(v125 + 16) = 0;

    }
    else
    {
      v109 = *(void **)(v171 + 736);
      v110 = *(void **)(v171 + 728);
      v168 = *(void **)(v171 + 704);
      v111 = *(void **)(v171 + 696);
      v112 = *(void **)(v171 + 688);
      v113 = *(void **)(v171 + 664);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
      v170 = (_QWORD *)swift_allocError();
      *(_QWORD *)v114 = 0xD000000000000082;
      *(_QWORD *)(v114 + 8) = 0x80000002284DA750;
      *(_BYTE *)(v114 + 16) = 0;

    }
    v25 = 1;
    v23 = v69;
LABEL_7:
    swift_task_dealloc();
    swift_task_dealloc();
    return ((uint64_t (*)(_QWORD *, uint64_t))v23[1])(v170, v25);
  }
  v64 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v173 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v63, 0);
  v65 = 0;
  v66 = (_QWORD *)v173;
  v170 = (_QWORD *)(v62 + 32);
  v163 = v63;
  while (1)
  {
    v67 = v170[v65];
    v68 = *(_QWORD **)(v67 + 16);
    if (v68)
      break;
    v70 = v64;
LABEL_57:
    v173 = (uint64_t)v66;
    v84 = v66[2];
    v83 = v66[3];
    v62 = v84 + 1;
    if (v84 >= v83 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v83 > 1, v84 + 1, 1);
      v66 = (_QWORD *)v173;
    }
    ++v65;
    v66[2] = v62;
    v66[v84 + 4] = v70;
    if (v65 == v63)
    {
      swift_bridgeObjectRelease();
      goto LABEL_62;
    }
  }
  swift_bridgeObjectRetain_n();
  v69 = 0;
  v70 = v64;
  while (1)
  {
    v71 = *(_QWORD *)(v67 + 8 * (_QWORD)v69 + 32);
    v72 = *(_QWORD *)(v71 + 16);
    v73 = v70[2];
    v74 = v73 + v72;
    if (__OFADD__(v73, v72))
    {
      __break(1u);
LABEL_89:
      __break(1u);
      goto LABEL_90;
    }
    swift_bridgeObjectRetain();
    v75 = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
    if ((_DWORD)v75 && v74 <= v70[3] >> 1)
    {
      if (!*(_QWORD *)(v71 + 16))
        goto LABEL_35;
    }
    else
    {
      if (v73 <= v74)
        v76 = v73 + v72;
      else
        v76 = v73;
      v70 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v75, v76, 1, v70);
      if (!*(_QWORD *)(v71 + 16))
      {
LABEL_35:
        if (v72)
          goto LABEL_89;
        goto LABEL_36;
      }
    }
    v77 = v70[2];
    if ((v70[3] >> 1) - v77 < v72)
    {
      __break(1u);
      goto LABEL_96;
    }
    v78 = &v70[v77 + 4];
    if (v71 + 32 < (unint64_t)&v78[v72] && (unint64_t)v78 < v71 + 32 + 8 * v72)
      return _fatalErrorMessage(_:_:file:line:flags:)();
    memcpy(v78, (const void *)(v71 + 32), 8 * v72);
    if (v72)
      break;
LABEL_36:
    v69 = (_QWORD *)((char *)v69 + 1);
    swift_bridgeObjectRelease();
    if (v68 == v69)
    {
      swift_bridgeObjectRelease_n();
      v64 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v63 = v163;
      goto LABEL_57;
    }
  }
  v80 = v70[2];
  v81 = __OFADD__(v80, v72);
  v82 = v80 + v72;
  if (!v81)
  {
    v70[2] = v82;
    goto LABEL_36;
  }
  __break(1u);
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t DUFoundInEventMultilingualBERTImplementation.runTypedOnRequest(request:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[55] = v2;
  v3[56] = a1;
  v3[57] = a2;
  v3[100] = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t DUFoundInEventMultilingualBERTImplementation.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t DUFoundInEventMultilingualBERTImplementation.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t DUFoundInEventMultilingualBERTImplementation.__allocating_init()()
{
  uint64_t v0;
  void *v1;
  id v2;

  v0 = swift_allocObject();
  v1 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000024, 0x80000002284D98C0);
  v2 = objc_msgSend((id)objc_opt_self(), sel_contextualEmbeddingWithIdentifier_, v1);

  *(_QWORD *)(v0 + 16) = v2;
  return v0;
}

uint64_t DUFoundInEventMultilingualBERTImplementation.init()()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000024, 0x80000002284D98C0);
  v2 = objc_msgSend((id)objc_opt_self(), sel_contextualEmbeddingWithIdentifier_, v1);

  *(_QWORD *)(v0 + 16) = v2;
  return v0;
}

uint64_t protocol witness for static DUProcessingPhaseImplementation.specification.getter in conformance DUFoundInEventMultilingualBERTImplementation@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for DUFoundInEventSpecification();
  result = swift_allocObject();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for DUFoundInEventSpecification;
  *a1 = result;
  return result;
}

unint64_t protocol witness for static DUProcessingPhaseImplementation.implementationID.getter in conformance DUFoundInEventMultilingualBERTImplementation()
{
  return 0xD00000000000002ALL;
}

void *protocol witness for static DUProcessingPhaseImplementation.implementationAttributes.getter in conformance DUFoundInEventMultilingualBERTImplementation()
{
  return &outlined read-only object #0 of protocol witness for static DUProcessingPhaseImplementation.implementationAttributes.getter in conformance DUFoundInEventMultilingualBERTImplementation;
}

uint64_t protocol witness for DUProcessingPhaseImplementation.runTypedOnRequest(request:) in conformance DUFoundInEventMultilingualBERTImplementation(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  *(_QWORD *)(v3 + 16) = a1;
  v7 = (uint64_t (*)(uint64_t))(**(int **)(**(_QWORD **)v2 + 200) + *(_QWORD *)(**(_QWORD **)v2 + 200));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v5;
  *v5 = v3;
  v5[1] = protocol witness for DUProcessingPhaseImplementation.runTypedOnRequest(request:) in conformance DUCategoryClassificationSmolBERToImplementation;
  return v7(a2);
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = &v3[v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[v2] && (unint64_t)v9 < a1 + 32 + 8 * v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), 8 * v2);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  int64_t v23;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v23 = v4 + v2;
  else
    v23 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v23, 1, v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<DUStructuredExtractionResult>, type metadata accessor for DUStructuredExtractionResult);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = *(_QWORD *)(v3 + 16);
  v9 = (*(_QWORD *)(v3 + 24) >> 1) - v8;
  v10 = type metadata accessor for DUStructuredExtractionResult(0);
  if (v9 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v11 = *(_QWORD *)(v10 - 8);
  v12 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v13 = *(_QWORD *)(v11 + 72);
  v14 = v3 + v12 + v13 * v8;
  v15 = a1 + v12;
  v16 = v13 * v2;
  v17 = v14 + v16;
  v18 = v15 + v16;
  if (v15 < v17 && v14 < v18)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v20 = *(_QWORD *)(v3 + 16);
  v21 = __OFADD__(v20, v2);
  v22 = v20 + v2;
  if (!v21)
  {
    *(_QWORD *)(v3 + 16) = v22;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<DUProcessingPhaseImplementation>, &demangling cache variable for type metadata for DUProcessingPhaseImplementation);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[5 * v8 + 4];
  if (a1 + 32 < v9 + 40 * v2 && v9 < a1 + 32 + 40 * v2)
    goto LABEL_24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DUProcessingPhaseImplementation);
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = (unint64_t)&v3[5 * v9 + 4];
  if (a1 + 32 < v10 + 40 * v8 && v10 < a1 + 32 + 40 * v8)
    goto LABEL_24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (token: String, start: Int, length: Int, wordId: Int));
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = &v3[v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[v2] && (unint64_t)v9 < a1 + 32 + 8 * v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), 8 * v2);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = &v3[3 * v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[3 * v2] && (unint64_t)v9 < a1 + 32 + 24 * v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), 24 * v2);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1)
{
  unint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_23;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if (v4 >> 62)
    goto LABEL_25;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain();
    v4 = MEMORY[0x22E2AFF40](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = specialized Array._copyContents(initializing:)(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1, (void (*)(_QWORD))type metadata accessor for TaggedCharacterRange, &lazy protocol witness table cache variable for type [TaggedCharacterRange] and conformance [A], &demangling cache variable for type metadata for [TaggedCharacterRange], (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
    if (v11 >= v3)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    swift_bridgeObjectRelease();
    return specialized Array._endMutation()();
  }
  __break(1u);
  return result;
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(uint64_t, _QWORD, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (unint64_t *)type metadata accessor for DUUserInterfaceUnderstandingResult, &lazy protocol witness table cache variable for type [DUUserInterfaceUnderstandingResult] and conformance [A], &demangling cache variable for type metadata for [DUUserInterfaceUnderstandingResult], (uint64_t *)specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (unint64_t *)type metadata accessor for DUStructuredEntity, &lazy protocol witness table cache variable for type [DUStructuredEntity] and conformance [A], &demangling cache variable for type metadata for [DUStructuredEntity], (uint64_t *)specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (unint64_t *)type metadata accessor for DUCategoryResult, &lazy protocol witness table cache variable for type [DUCategoryResult] and conformance [A], &demangling cache variable for type metadata for [DUCategoryResult], (uint64_t *)specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (unint64_t *)type metadata accessor for DUTopicResult, &lazy protocol witness table cache variable for type [DUTopicResult] and conformance [A], &demangling cache variable for type metadata for [DUTopicResult], (uint64_t *)specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  unint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_23;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if (v4 >> 62)
    goto LABEL_25;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain();
    v4 = MEMORY[0x22E2AFF40](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = specialized Array._copyContents(initializing:)(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v11 >= v3)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    swift_bridgeObjectRelease();
    return specialized Array._endMutation()();
  }
  __break(1u);
  return result;
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(uint64_t, _QWORD, unint64_t))specialized Array._copyContents(initializing:));
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  unint64_t *v5;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v12 = *v5;
  if (*v5 >> 62)
  {
    swift_bridgeObjectRetain();
    v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v14 = v13 + v11;
    if (!__OFADD__(v13, v11))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  v14 = v13 + v11;
  if (__OFADD__(v13, v11))
    goto LABEL_23;
LABEL_5:
  v12 = *v5;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v5 = v12;
  v13 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject
    && (v12 & 0x8000000000000000) == 0
    && (v12 & 0x4000000000000000) == 0)
  {
    v16 = v12 & 0xFFFFFFFFFFFFFF8;
    if (v14 <= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v13 = 1;
  }
  v23 = v11;
  v11 = (uint64_t)a2;
  a2 = a3;
  a3 = (unint64_t *)a4;
  a4 = a5;
  if (v12 >> 62)
    goto LABEL_25;
  v17 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v17 <= v14)
      v17 = v14;
    swift_bridgeObjectRetain();
    v12 = MEMORY[0x22E2AFF40](v13, v17, 1, v12);
    swift_bridgeObjectRelease();
    *v5 = v12;
    v16 = v12 & 0xFFFFFFFFFFFFFF8;
    a5 = a4;
    a4 = (uint64_t *)a3;
    a3 = a2;
    a2 = (unint64_t *)v11;
    v11 = v23;
LABEL_15:
    result = specialized Array._copyContents(initializing:)(v16 + 8 * *(_QWORD *)(v16 + 16) + 32, (*(_QWORD *)(v16 + 24) >> 1) - *(_QWORD *)(v16 + 16), a1, (void (*)(_QWORD))a2, a3, a4, (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))a5);
    if (v19 >= v11)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v19 < 1)
    goto LABEL_19;
  v20 = *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v21 = __OFADD__(v20, v19);
  v22 = v20 + v19;
  if (!v21)
  {
    *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10) = v22;
LABEL_19:
    swift_bridgeObjectRelease();
    return specialized Array._endMutation()();
  }
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, unint64_t))
{
  unint64_t *v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v6 = *v2;
  if (*v2 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v8 = v7 + v5;
    if (!__OFADD__(v7, v5))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  v8 = v7 + v5;
  if (__OFADD__(v7, v5))
    goto LABEL_23;
LABEL_5:
  v6 = *v2;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v2 = v6;
  v7 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    v10 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v8 <= *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v7 = 1;
  }
  if (v6 >> 62)
    goto LABEL_25;
  v11 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v11 <= v8)
      v11 = v8;
    swift_bridgeObjectRetain();
    v6 = MEMORY[0x22E2AFF40](v7, v11, 1, v6);
    swift_bridgeObjectRelease();
    *v2 = v6;
    v10 = v6 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = a2(v10 + 8 * *(_QWORD *)(v10 + 16) + 32, (*(_QWORD *)(v10 + 24) >> 1) - *(_QWORD *)(v10 + 16), a1);
    if (v13 >= v5)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v13 < 1)
    goto LABEL_19;
  v14 = *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v15 = __OFADD__(v14, v13);
  v16 = v14 + v13;
  if (!v15)
  {
    *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) = v16;
LABEL_19:
    swift_bridgeObjectRelease();
    return specialized Array._endMutation()();
  }
  __break(1u);
  return result;
}

unint64_t specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t result;
  int64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _OWORD *v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t *v24;
  unint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  _OWORD v40[2];

  v1 = a1;
  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
  }
  v32 = v1 + 64;
  v3 = -1 << *(_BYTE *)(v1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v31 = (unint64_t)(63 - v3) >> 6;
  v6 = &v37;
  v7 = &v39;
  result = swift_bridgeObjectRetain();
  i = 0;
  v10 = MEMORY[0x24BEE4AD8] + 8;
  v11 = MEMORY[0x24BEE0D00];
  if (v5)
    goto LABEL_10;
LABEL_11:
  v20 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_35;
  if (v20 >= v31)
    goto LABEL_32;
  v21 = *(_QWORD *)(v32 + 8 * v20);
  v22 = i + 1;
  if (!v21)
  {
    v22 = i + 2;
    if (i + 2 >= v31)
      goto LABEL_32;
    v21 = *(_QWORD *)(v32 + 8 * v22);
    if (!v21)
    {
      v22 = i + 3;
      if (i + 3 >= v31)
        goto LABEL_32;
      v21 = *(_QWORD *)(v32 + 8 * v22);
      if (!v21)
      {
        v22 = i + 4;
        if (i + 4 >= v31)
          goto LABEL_32;
        v21 = *(_QWORD *)(v32 + 8 * v22);
        if (!v21)
        {
          v23 = i + 5;
          if (i + 5 < v31)
          {
            v21 = *(_QWORD *)(v32 + 8 * v23);
            if (v21)
            {
              v22 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              v22 = v23 + 1;
              if (__OFADD__(v23, 1))
                goto LABEL_36;
              if (v22 >= v31)
                break;
              v21 = *(_QWORD *)(v32 + 8 * v22);
              ++v23;
              if (v21)
                goto LABEL_26;
            }
          }
LABEL_32:
          outlined consume of [String : String].Iterator._Variant();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  v34 = (v21 - 1) & v21;
  v19 = __clz(__rbit64(v21)) + (v22 << 6);
  for (i = v22; ; v19 = __clz(__rbit64(v5)) | (i << 6))
  {
    v24 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v19);
    v35 = *v24;
    v36 = v24[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    outlined init with take of Any(v6, v7);
    outlined init with take of Any(v7, v40);
    outlined init with take of Any(v40, &v38);
    result = specialized __RawDictionaryStorage.find<A>(_:)(v35, v36);
    v25 = result;
    if ((v26 & 1) != 0)
    {
      v33 = i;
      v12 = v7;
      v13 = v6;
      v14 = v1;
      v15 = v11;
      v16 = v10;
      v17 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *v17 = v35;
      v17[1] = v36;
      v10 = v16;
      v11 = v15;
      v1 = v14;
      v6 = v13;
      v7 = v12;
      i = v33;
      v18 = (_OWORD *)(v2[7] + 32 * v25);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      result = (unint64_t)outlined init with take of Any(&v38, v18);
      v5 = v34;
      if (!v34)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v2[2] >= v2[3])
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v27 = (uint64_t *)(v2[6] + 16 * result);
    *v27 = v35;
    v27[1] = v36;
    result = (unint64_t)outlined init with take of Any(&v38, (_OWORD *)(v2[7] + 32 * result));
    v28 = v2[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (v29)
      goto LABEL_34;
    v2[2] = v30;
    v5 = v34;
    if (!v34)
      goto LABEL_11;
LABEL_10:
    v34 = (v5 - 1) & v5;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t result;
  int64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _OWORD *v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t *v24;
  unint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  _OWORD v40[2];

  v1 = a1;
  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
  }
  v32 = v1 + 64;
  v3 = -1 << *(_BYTE *)(v1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v31 = (unint64_t)(63 - v3) >> 6;
  v6 = &v37;
  v7 = &v39;
  result = swift_bridgeObjectRetain();
  i = 0;
  v10 = MEMORY[0x24BEE4AD8] + 8;
  v11 = MEMORY[0x24BEE13C8];
  if (v5)
    goto LABEL_10;
LABEL_11:
  v20 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_35;
  if (v20 >= v31)
    goto LABEL_32;
  v21 = *(_QWORD *)(v32 + 8 * v20);
  v22 = i + 1;
  if (!v21)
  {
    v22 = i + 2;
    if (i + 2 >= v31)
      goto LABEL_32;
    v21 = *(_QWORD *)(v32 + 8 * v22);
    if (!v21)
    {
      v22 = i + 3;
      if (i + 3 >= v31)
        goto LABEL_32;
      v21 = *(_QWORD *)(v32 + 8 * v22);
      if (!v21)
      {
        v22 = i + 4;
        if (i + 4 >= v31)
          goto LABEL_32;
        v21 = *(_QWORD *)(v32 + 8 * v22);
        if (!v21)
        {
          v23 = i + 5;
          if (i + 5 < v31)
          {
            v21 = *(_QWORD *)(v32 + 8 * v23);
            if (v21)
            {
              v22 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              v22 = v23 + 1;
              if (__OFADD__(v23, 1))
                goto LABEL_36;
              if (v22 >= v31)
                break;
              v21 = *(_QWORD *)(v32 + 8 * v22);
              ++v23;
              if (v21)
                goto LABEL_26;
            }
          }
LABEL_32:
          outlined consume of [String : String].Iterator._Variant();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  v34 = (v21 - 1) & v21;
  v19 = __clz(__rbit64(v21)) + (v22 << 6);
  for (i = v22; ; v19 = __clz(__rbit64(v5)) | (i << 6))
  {
    v24 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v19);
    v35 = *v24;
    v36 = v24[1];
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    outlined init with take of Any(v6, v7);
    outlined init with take of Any(v7, v40);
    outlined init with take of Any(v40, &v38);
    result = specialized __RawDictionaryStorage.find<A>(_:)(v35, v36);
    v25 = result;
    if ((v26 & 1) != 0)
    {
      v33 = i;
      v12 = v7;
      v13 = v6;
      v14 = v1;
      v15 = v11;
      v16 = v10;
      v17 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *v17 = v35;
      v17[1] = v36;
      v10 = v16;
      v11 = v15;
      v1 = v14;
      v6 = v13;
      v7 = v12;
      i = v33;
      v18 = (_OWORD *)(v2[7] + 32 * v25);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      result = (unint64_t)outlined init with take of Any(&v38, v18);
      v5 = v34;
      if (!v34)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v2[2] >= v2[3])
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v27 = (uint64_t *)(v2[6] + 16 * result);
    *v27 = v35;
    v27[1] = v36;
    result = (unint64_t)outlined init with take of Any(&v38, (_OWORD *)(v2[7] + 32 * result));
    v28 = v2[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (v29)
      goto LABEL_34;
    v2[2] = v30;
    v5 = v34;
    if (!v34)
      goto LABEL_11;
LABEL_10:
    v34 = (v5 - 1) & v5;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t result;
  int64_t i;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  _OWORD *v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t *v24;
  unint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  _OWORD v40[2];

  v1 = a1;
  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
  }
  v32 = v1 + 64;
  v3 = -1 << *(_BYTE *)(v1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v31 = (unint64_t)(63 - v3) >> 6;
  v6 = &v37;
  v7 = &v39;
  result = swift_bridgeObjectRetain();
  i = 0;
  v10 = &demangling cache variable for type metadata for [Double];
  v11 = MEMORY[0x24BEE4AD8] + 8;
  if (v5)
    goto LABEL_10;
LABEL_11:
  v20 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_35;
  if (v20 >= v31)
    goto LABEL_32;
  v21 = *(_QWORD *)(v32 + 8 * v20);
  v22 = i + 1;
  if (!v21)
  {
    v22 = i + 2;
    if (i + 2 >= v31)
      goto LABEL_32;
    v21 = *(_QWORD *)(v32 + 8 * v22);
    if (!v21)
    {
      v22 = i + 3;
      if (i + 3 >= v31)
        goto LABEL_32;
      v21 = *(_QWORD *)(v32 + 8 * v22);
      if (!v21)
      {
        v22 = i + 4;
        if (i + 4 >= v31)
          goto LABEL_32;
        v21 = *(_QWORD *)(v32 + 8 * v22);
        if (!v21)
        {
          v23 = i + 5;
          if (i + 5 < v31)
          {
            v21 = *(_QWORD *)(v32 + 8 * v23);
            if (v21)
            {
              v22 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              v22 = v23 + 1;
              if (__OFADD__(v23, 1))
                goto LABEL_36;
              if (v22 >= v31)
                break;
              v21 = *(_QWORD *)(v32 + 8 * v22);
              ++v23;
              if (v21)
                goto LABEL_26;
            }
          }
LABEL_32:
          outlined consume of [String : String].Iterator._Variant();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  v34 = (v21 - 1) & v21;
  v19 = __clz(__rbit64(v21)) + (v22 << 6);
  for (i = v22; ; v19 = __clz(__rbit64(v5)) | (i << 6))
  {
    v24 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v19);
    v35 = *v24;
    v36 = v24[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(v10);
    swift_dynamicCast();
    outlined init with take of Any(v6, v7);
    outlined init with take of Any(v7, v40);
    outlined init with take of Any(v40, &v38);
    result = specialized __RawDictionaryStorage.find<A>(_:)(v35, v36);
    v25 = result;
    if ((v26 & 1) != 0)
    {
      v33 = i;
      v12 = v7;
      v13 = v6;
      v14 = v1;
      v15 = v11;
      v16 = v10;
      v17 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *v17 = v35;
      v17[1] = v36;
      v10 = v16;
      v11 = v15;
      v1 = v14;
      v6 = v13;
      v7 = v12;
      i = v33;
      v18 = (_OWORD *)(v2[7] + 32 * v25);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      result = (unint64_t)outlined init with take of Any(&v38, v18);
      v5 = v34;
      if (!v34)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v2[2] >= v2[3])
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v27 = (uint64_t *)(v2[6] + 16 * result);
    *v27 = v35;
    v27[1] = v36;
    result = (unint64_t)outlined init with take of Any(&v38, (_OWORD *)(v2[7] + 32 * result));
    v28 = v2[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (v29)
      goto LABEL_34;
    v2[2] = v30;
    v5 = v34;
    if (!v34)
      goto LABEL_11;
LABEL_10:
    v34 = (v5 - 1) & v5;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t result;
  int64_t i;
  uint64_t *v8;
  uint64_t *v9;
  int64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;

  v1 = a1;
  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (weight: Float, BOOLeanProperties: [String : Bool])>);
    v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
  }
  v33 = v1 + 64;
  v3 = -1 << *(_BYTE *)(v1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v32 = (unint64_t)(63 - v3) >> 6;
  result = swift_bridgeObjectRetain();
  i = 0;
  v8 = (uint64_t *)&demangling cache variable for type metadata for (Float, [String : Bool]);
  v9 = (uint64_t *)&demangling cache variable for type metadata for (weight: Float, BOOLeanProperties: [String : Bool]);
  v31 = v1;
  if (v5)
    goto LABEL_10;
LABEL_11:
  v18 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_35;
  if (v18 >= v32)
    goto LABEL_32;
  v19 = *(_QWORD *)(v33 + 8 * v18);
  v20 = i + 1;
  if (!v19)
  {
    v20 = i + 2;
    if (i + 2 >= v32)
      goto LABEL_32;
    v19 = *(_QWORD *)(v33 + 8 * v20);
    if (!v19)
    {
      v20 = i + 3;
      if (i + 3 >= v32)
        goto LABEL_32;
      v19 = *(_QWORD *)(v33 + 8 * v20);
      if (!v19)
      {
        v20 = i + 4;
        if (i + 4 >= v32)
          goto LABEL_32;
        v19 = *(_QWORD *)(v33 + 8 * v20);
        if (!v19)
        {
          v21 = i + 5;
          if (i + 5 < v32)
          {
            v19 = *(_QWORD *)(v33 + 8 * v21);
            if (v19)
            {
              v20 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              v20 = v21 + 1;
              if (__OFADD__(v21, 1))
                goto LABEL_36;
              if (v20 >= v32)
                break;
              v19 = *(_QWORD *)(v33 + 8 * v20);
              ++v21;
              if (v19)
                goto LABEL_26;
            }
          }
LABEL_32:
          outlined consume of [String : String].Iterator._Variant();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  v5 = (v19 - 1) & v19;
  v17 = __clz(__rbit64(v19)) + (v20 << 6);
  for (i = v20; ; v17 = v16 | (i << 6))
  {
    v22 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v17);
    v24 = *v22;
    v23 = v22[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(v8);
    __swift_instantiateConcreteTypeFromMangledName(v9);
    swift_dynamicCast();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v24, v23);
    if ((v25 & 1) != 0)
    {
      v10 = i;
      v11 = v9;
      v12 = v8;
      v13 = 16 * result;
      v14 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *v14 = v24;
      v14[1] = v23;
      v15 = v2[7] + v13;
      result = swift_bridgeObjectRelease();
      *(_DWORD *)v15 = v34;
      *(_QWORD *)(v15 + 8) = v35;
      v8 = v12;
      v9 = v11;
      i = v10;
      v1 = v31;
      if (!v5)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v2[2] >= v2[3])
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v26 = (uint64_t *)(v2[6] + 16 * result);
    *v26 = v24;
    v26[1] = v23;
    v27 = v2[7] + 16 * result;
    *(_DWORD *)v27 = v34;
    *(_QWORD *)(v27 + 8) = v35;
    v28 = v2[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (v29)
      goto LABEL_34;
    v2[2] = v30;
    if (!v5)
      goto LABEL_11;
LABEL_10:
    v16 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _OWORD v35[2];
  _OWORD v36[2];

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    v2 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v2 = MEMORY[0x24BEE4B00];
  }
  v27 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v26 = (unint64_t)(63 - v3) >> 6;
  v6 = v2 + 64;
  swift_bridgeObjectRetain();
  result = swift_retain();
  v8 = 0;
  while (1)
  {
    if (v5)
    {
      v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v26)
      goto LABEL_37;
    v14 = *(_QWORD *)(v27 + 8 * v13);
    v15 = v8 + 1;
    if (!v14)
    {
      v15 = v8 + 2;
      if (v8 + 2 >= v26)
        goto LABEL_37;
      v14 = *(_QWORD *)(v27 + 8 * v15);
      if (!v14)
      {
        v15 = v8 + 3;
        if (v8 + 3 >= v26)
          goto LABEL_37;
        v14 = *(_QWORD *)(v27 + 8 * v15);
        if (!v14)
        {
          v15 = v8 + 4;
          if (v8 + 4 >= v26)
            goto LABEL_37;
          v14 = *(_QWORD *)(v27 + 8 * v15);
          if (!v14)
            break;
        }
      }
    }
LABEL_27:
    v5 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v15 << 6);
    v8 = v15;
LABEL_28:
    v17 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v12);
    v18 = v17[1];
    *(_QWORD *)&v36[0] = *v17;
    *((_QWORD *)&v36[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    swift_dynamicCast();
    v32 = v28;
    v33 = v29;
    v34 = v30;
    outlined init with take of Any(&v31, v35);
    v28 = v32;
    v29 = v33;
    v30 = v34;
    outlined init with take of Any(v35, v36);
    outlined init with take of Any(v36, &v32);
    result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
    v19 = -1 << *(_BYTE *)(v2 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v6 + 8 * (v20 >> 6))) != 0)
    {
      v9 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v6 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v6 + 8 * v21);
      }
      while (v25 == -1);
      v9 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    v10 = *(_QWORD *)(v2 + 48) + 40 * v9;
    *(_OWORD *)v10 = v28;
    *(_OWORD *)(v10 + 16) = v29;
    *(_QWORD *)(v10 + 32) = v30;
    result = (uint64_t)outlined init with take of Any(&v32, (_OWORD *)(*(_QWORD *)(v2 + 56) + 32 * v9));
    ++*(_QWORD *)(v2 + 16);
  }
  v16 = v8 + 5;
  if (v8 + 5 >= v26)
  {
LABEL_37:
    swift_release();
    outlined consume of [String : String].Iterator._Variant();
    return v2;
  }
  v14 = *(_QWORD *)(v27 + 8 * v16);
  if (v14)
  {
    v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v15 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v15 >= v26)
      goto LABEL_37;
    v14 = *(_QWORD *)(v27 + 8 * v15);
    ++v16;
    if (v14)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;

  Hasher.init(_seed:)();
  String.hash(into:)();
  v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  Swift::Int v2;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v2;

  v2 = static Hasher._hash(seed:_:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned __int8 a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = MEMORY[0x22E2B01F8](*(_QWORD *)(v1 + 40), a1, 1);
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      v12 = ~v4;
      v5 = (v5 + 1) & v12;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16)
            break;
          v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            v5 = (v5 + 1) & v12;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = MEMORY[0x22E2AFEB0](v9, a1);
      outlined destroy of AnyHashable((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1)
          break;
      }
    }
  }
  return result;
}

uint64_t serialize(_:at:)(uint64_t result, _BYTE **a2)
{
  _BYTE *v2;

  v2 = *a2;
  *v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t closure #1 in osLogInternal(_:log:type:)(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)(void (*a1)(void))
{
  a1();
  return _swift_stdlib_bridgeErrorToNSError();
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)(uint64_t (*a1)(void))
{
  return a1();
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<_NSRange>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, DUProcessingPhaseSpecification)>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4])
          memmove(v12, a4 + 4, 56 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [DUProcessingPhaseImplementation])>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(message: PoemMessage, distance: Int)>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DUReplyEquivalenceTable>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 72);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[9 * v8 + 4])
          memmove(v12, a4 + 4, 72 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TableAnalysisResult>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 88);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[11 * v8 + 4])
          memmove(v12, a4 + 4, 88 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DUReplyMetadata>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4])
          memmove(v12, a4 + 4, 48 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DUConversationAnalysisResult>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DUPersonalizeRepliesConversation>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(DUDocumentUpdate?, CSSearchableItem)>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(DUDocumentUpdate, CSSearchableItem)>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<String.Index>>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(token: String, start: Int, length: Int, wordId: Int)>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(id: Int, start: Int, length: Int)>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<FoundInEventDataDetectorsOutput>, (uint64_t (*)(_QWORD))type metadata accessor for FoundInEventDataDetectorsOutput);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<DUStructuredExtractionResult>, type metadata accessor for DUStructuredExtractionResult);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<DocumentUnderstanding_ClientInterface_TopicResult>, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<DocumentUnderstanding_ClientInterface_StructuredEntity>, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult>, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<DocumentUnderstanding_ClientInterface_CategoryResult>, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<DocumentUnderstanding_DocumentRepresentation_DocumentUIElement>, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute>, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<DocumentUnderstanding_ClientInterface_StructuredEntityLabel>, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel);
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(DUDocument, URL, CSSearchableItem)>);
  v10 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DUDocument, URL, CSSearchableItem))
                  - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = _swift_stdlib_malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (v15 = v11 == -1) : (v15 = 0), v15))
  {
LABEL_29:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DUDocument, URL, CSSearchableItem))
                  - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (unint64_t)v13 + v17;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(_QWORD *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<DateComponents>, (uint64_t (*)(_QWORD))MEMORY[0x24BDCBDE0]);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(_QWORD *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int64>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[TaggedCharacterRange]>, &demangling cache variable for type metadata for [TaggedCharacterRange]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Data?, Float)>, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))specialized _ArrayBuffer._copyContents(subRange:initializing:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<DUProcessingPhaseImplementation>, &demangling cache variable for type metadata for DUProcessingPhaseImplementation);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<TopLevelSpecificationProtocol>, &demangling cache variable for type metadata for TopLevelSpecificationProtocol);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(photoId: String, entityName: String)>, &demangling cache variable for type metadata for (photoId: String, entityName: String));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[BMTextUnderstandingPoemBufferExtraction]>, &demangling cache variable for type metadata for [BMTextUnderstandingPoemBufferExtraction]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[MLFeatureProvider]>, &demangling cache variable for type metadata for [MLFeatureProvider]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[NSRegularExpression]>, &demangling cache variable for type metadata for [NSRegularExpression]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[Int]>, &demangling cache variable for type metadata for [Int]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[String]>, &demangling cache variable for type metadata for [String]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(candidate: String, prefix: String)>, &demangling cache variable for type metadata for (candidate: String, prefix: String));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<NeighborRetrievalResult>, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))specialized _ArrayBuffer._copyContents(subRange:initializing:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[String : String]>, &demangling cache variable for type metadata for [String : String]);
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v14 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v9 + 4])
          memmove(v14, a4 + 4, 8 * v9);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 29;
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
      v13 = v10 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v13 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32])
          memmove(v13, a4 + 32, 4 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  size_t v14;
  _QWORD *v15;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v13 = (_QWORD *)swift_allocObject();
      v14 = _swift_stdlib_malloc_size(v13);
      v13[2] = v11;
      v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
      v15 = v13 + 4;
      if ((v8 & 1) != 0)
      {
LABEL_13:
        if (v13 != a4 || v15 >= &a4[5 * v11 + 4])
          memmove(v15, a4 + 4, 40 * v11);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v15 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, (unint64_t)v15, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v13 = (_QWORD *)swift_allocObject();
      v14 = _swift_stdlib_malloc_size(v13);
      v15 = v14 - 32;
      if (v14 < 32)
        v15 = v14 - 25;
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 3);
      v16 = v13 + 4;
      if ((v8 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v16 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[v11 + 4])
          memmove(v16, a4 + 4, 8 * v11);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v13 = (_QWORD *)swift_allocObject();
      v14 = _swift_stdlib_malloc_size(v13);
      v15 = v14 - 32;
      if (v14 < 32)
        v15 = v14 - 1;
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 5);
      v16 = v13 + 4;
      if ((v8 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v16 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[4 * v11 + 4])
          memmove(v16, a4 + 4, 32 * v11);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, void (*a6)(_QWORD, int64_t, _QWORD *, _QWORD *))
{
  char v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  int64_t v12;
  _QWORD *v13;
  size_t v14;
  _QWORD *v15;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v13 = (_QWORD *)swift_allocObject();
      v14 = _swift_stdlib_malloc_size(v13);
      v13[2] = v11;
      v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
      v15 = v13 + 4;
      if ((v8 & 1) != 0)
      {
LABEL_13:
        if (v13 != a4 || v15 >= &a4[5 * v11 + 4])
          memmove(v15, a4 + 4, 40 * v11);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v15 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    a6(0, v11, v15, a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;

  v6 = a4();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, a3);
  v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_BYTE **closure #1 in OSLogArguments.append(_:)(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

void *closure #1 in serialize<A>(_:at:)(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  uint64_t v4;

  if (__src)
    v4 = a2 - (_QWORD)__src;
  else
    v4 = 0;
  if (!__dst)
  {
    if (v4 <= 0)
      return __src;
LABEL_10:
    __src = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return __src;
  }
  if (a4 - (uint64_t)__dst < v4)
    goto LABEL_10;
  if (__src)
    return memmove(__dst, __src, a2 - (_QWORD)__src);
  return __src;
}

void closure #1 in OSLogArguments.append(_:)(uint64_t *a1, _QWORD **a2, uint64_t a3, uint64_t (*a4)(void))
{
  void *v6;
  uint64_t v7;
  _QWORD *v8;

  v6 = (void *)a4();
  v7 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v7;
  v8 = *a2;
  if (*a2)
  {
    *v8 = v6;
    *a2 = v8 + 1;
  }
  else
  {

  }
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(_QWORD *a1, char a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  void *v18;
  id v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  char v36;
  char v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  Swift::String v42;
  Swift::String v43;
  uint64_t v44;

  if (!a1[2])
  {
    swift_bridgeObjectRelease();
    return;
  }
  v44 = a1[2];
  v7 = a1[4];
  v6 = a1[5];
  v8 = a1[6];
  swift_bridgeObjectRetain();
  v9 = (_QWORD *)*a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
  v12 = v9[2];
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
    goto LABEL_23;
  v15 = v10;
  if (v9[3] >= v14)
  {
    if ((a2 & 1) != 0)
    {
      if ((v10 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if ((v15 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v20 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    v21 = (uint64_t *)(v20[6] + 16 * v11);
    *v21 = v7;
    v21[1] = v6;
    *(_QWORD *)(v20[7] + 8 * v11) = v8;
    v22 = v20[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v20[2] = v24;
    v25 = v44 - 1;
    if (v44 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    v26 = a1 + 9;
    while (1)
    {
      v28 = *(v26 - 2);
      v27 = *(v26 - 1);
      v29 = *v26;
      v30 = (_QWORD *)*a3;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v31 = specialized __RawDictionaryStorage.find<A>(_:)(v28, v27);
      v33 = v30[2];
      v34 = (v32 & 1) == 0;
      v23 = __OFADD__(v33, v34);
      v35 = v33 + v34;
      if (v23)
        break;
      v36 = v32;
      if (v30[3] < v35)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v35, 1);
        v31 = specialized __RawDictionaryStorage.find<A>(_:)(v28, v27);
        if ((v36 & 1) != (v37 & 1))
          goto LABEL_25;
      }
      if ((v36 & 1) != 0)
        goto LABEL_10;
      v38 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v31 >> 6) + 64) |= 1 << v31;
      v39 = (uint64_t *)(v38[6] + 16 * v31);
      *v39 = v28;
      v39[1] = v27;
      *(_QWORD *)(v38[7] + 8 * v31) = v29;
      v40 = v38[2];
      v23 = __OFADD__(v40, 1);
      v41 = v40 + 1;
      if (v23)
        goto LABEL_24;
      v38[2] = v41;
      v26 += 3;
      if (!--v25)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a2 & 1);
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
  if ((v15 & 1) == (v17 & 1))
  {
    v11 = v16;
    if ((v15 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v18 = (void *)swift_allocError();
    swift_willThrow();
    v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  _StringGuts.grow(_:)(30);
  v42._object = (void *)0x80000002284DAB80;
  v42._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v42);
  _print_unlocked<A, B>(_:_:)();
  v43._countAndFlagsBits = 39;
  v43._object = (void *)0xE100000000000000;
  String.append(_:)(v43);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  void *v20;
  id v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  Swift::String v46;
  Swift::String v47;

  v4 = a1[2];
  if (!v4)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v8 = a1[4];
  v7 = a1[5];
  swift_bridgeObjectRetain();
  v9 = (_QWORD *)*a3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
  v12 = v9[2];
  v13 = (v11 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
    goto LABEL_24;
  v15 = v10;
  v16 = v11;
  v17 = v9[3];
  swift_bridgeObjectRetain();
  if (v17 >= v14)
  {
    if ((a2 & 1) != 0)
    {
      if ((v16 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if ((v16 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v22 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v15 >> 6) + 64) |= 1 << v15;
    v23 = 8 * v15;
    *(_QWORD *)(v22[6] + v23) = v8;
    *(_QWORD *)(v22[7] + v23) = v7;
    v24 = v22[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v22[2] = v26;
    v27 = v4 - 1;
    if (v4 == 1)
    {
LABEL_23:
      swift_bridgeObjectRelease_n();
      return;
    }
    v28 = a1 + 7;
    while (1)
    {
      v30 = *(v28 - 1);
      v29 = *v28;
      v31 = (_QWORD *)*a3;
      v32 = specialized __RawDictionaryStorage.find<A>(_:)(v30);
      v34 = v31[2];
      v35 = (v33 & 1) == 0;
      v36 = v34 + v35;
      if (__OFADD__(v34, v35))
        break;
      v37 = v32;
      v38 = v33;
      v39 = v31[3];
      swift_bridgeObjectRetain();
      if (v39 < v36)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v36, 1);
        v40 = specialized __RawDictionaryStorage.find<A>(_:)(v30);
        if ((v38 & 1) != (v41 & 1))
          goto LABEL_26;
        v37 = v40;
      }
      if ((v38 & 1) != 0)
        goto LABEL_10;
      v42 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v37 >> 6) + 64) |= 1 << v37;
      v43 = 8 * v37;
      *(_QWORD *)(v42[6] + v43) = v30;
      *(_QWORD *)(v42[7] + v43) = v29;
      v44 = v42[2];
      v25 = __OFADD__(v44, 1);
      v45 = v44 + 1;
      if (v25)
        goto LABEL_25;
      v42[2] = v45;
      v28 += 2;
      if (!--v27)
        goto LABEL_23;
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a2 & 1);
  v18 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
  if ((v16 & 1) == (v19 & 1))
  {
    v15 = v18;
    if ((v16 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v20 = (void *)swift_allocError();
    swift_willThrow();
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_27;
  }
LABEL_26:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_27:
  _StringGuts.grow(_:)(30);
  v46._object = (void *)0x80000002284DAB80;
  v46._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v46);
  _print_unlocked<A, B>(_:_:)();
  v47._countAndFlagsBits = 39;
  v47._object = (void *)0xE100000000000000;
  String.append(_:)(v47);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[Double]>, &demangling cache variable for type metadata for [Double]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[[Double]]>, &demangling cache variable for type metadata for [[Double]]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[TaggedCharacterRange]>, &demangling cache variable for type metadata for [TaggedCharacterRange]);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[MLDictionaryFeatureProvider]>, &demangling cache variable for type metadata for [MLDictionaryFeatureProvider]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[MLFeatureProvider]>, &demangling cache variable for type metadata for [MLFeatureProvider]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[String]>, &demangling cache variable for type metadata for [String]);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int64>);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[String : String]>, &demangling cache variable for type metadata for [String : String]);
  *v3 = result;
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [String])>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8)
      memmove(v10 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, [String]));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DocumentUnderstanding_ClientInterface_TaggedCharacterRange>);
  v10 = *(_QWORD *)(type metadata accessor for DocumentUnderstanding_ClientInterface_TaggedCharacterRange(0) - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_34;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(type metadata accessor for DocumentUnderstanding_ClientInterface_TaggedCharacterRange(0) - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (char *)v13 + v17;
  v19 = (char *)a4 + v17;
  if ((a1 & 1) != 0)
  {
    if (v13 < a4 || v18 >= &v19[*(_QWORD *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v20 = *(_QWORD *)(v16 + 72) * v8;
  v21 = &v18[v20];
  v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(token: String, start: Int, wordId: Int)>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 32 * v8)
      memmove(v10 + 4, a4 + 4, 32 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 32 * v8 || v13 >= v14 + 32 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (token: String, start: Int, wordId: Int));
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(token: String, start: Int, length: Int, wordId: Int)>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8)
      memmove(v10 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (token: String, start: Int, length: Int, wordId: Int));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, [Float])>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8)
      memmove(v10 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, [Float]));
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 29;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8])
      memmove(v13, v14, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[4 * v8] || v13 >= &v14[4 * v8])
  {
    memcpy(v13, v14, 4 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NeighborRetrievalResult>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 40 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DUWikipediaTopicResult>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 + 31;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 6);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  v15 = v8 << 6;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DUPersonalizeRepliesConversation>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(id: Int, start: Int, length: Int, wordId: Int)>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    memcpy(v13, v14, 32 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(id: Int, start: Int, length: Int)>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8])
      memmove(v12, v13, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[24 * v8] || v12 >= &v13[24 * v8])
  {
    memcpy(v12, v13, 24 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9])
      memmove(v14, v15, 8 * v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v9] || v14 >= &v15[8 * v9])
  {
    memcpy(v14, v15, 8 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v13 = (_QWORD *)swift_allocObject();
    v14 = _swift_stdlib_malloc_size(v13);
    v15 = v14 - 32;
    if (v14 < 32)
      v15 = v14 - 25;
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 3);
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v16 = (unint64_t)(v13 + 4);
  v17 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v13 != a4 || v16 >= v17 + 8 * v11)
      memmove(v13 + 4, a4 + 4, 8 * v11);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v17 >= v16 + 8 * v11 || v16 >= v17 + 8 * v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 17;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  v6 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : String].Iterator._Variant();
  if (v6 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 17;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  v6 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : String].Iterator._Variant();
  if (v6 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 25;
  v3[2] = v1;
  v3[3] = (2 * (v5 >> 3)) | 1;
  v6 = specialized Sequence._copySequenceContents(initializing:)(&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : String].Iterator._Variant();
  if (v6 != (_QWORD *)v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1)
{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (void (*)(_QWORD *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (void (*)(_QWORD *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (void (*)(_QWORD *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
}

{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_10;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    if (v2 <= 0)
    {
      v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v3 = (_QWORD *)swift_allocObject();
      v4 = _swift_stdlib_malloc_size(v3);
      v5 = v4 - 32;
      if (v4 < 32)
        v5 = v4 - 25;
      v3[2] = v2;
      v3[3] = (2 * (v5 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    specialized Array._copyContents(initializing:)((unint64_t)(v3 + 4), v2, v1, (void (*)(_QWORD))type metadata accessor for PoemMessage, &lazy protocol witness table cache variable for type [PoemMessage] and conformance [A], &demangling cache variable for type metadata for [PoemMessage], (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
    v1 = v6;
    swift_bridgeObjectRelease();
    if (v1 == v2)
      break;
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v2)
      return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x24BEE4AF8];
    v8 = 8 * v5;
    if (v5 <= 0)
    {
      v9 = (char *)MEMORY[0x24BEE4AF8];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0)
          goto LABEL_19;
        v12 = v9 + 32;
        v13 = (char *)(a2 + 8 * a3);
        if (v13 < &v9[v8 + 32] && v12 < &v13[v8])
          goto LABEL_19;
        memcpy(v12, v13, 8 * v5);
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
      v9 = (char *)swift_allocObject();
      v10 = _swift_stdlib_malloc_size(v9);
      v11 = v10 - 32;
      if (v10 < 32)
        v11 = v10 - 25;
      *((_QWORD *)v9 + 2) = v5;
      *((_QWORD *)v9 + 3) = 2 * (v11 >> 3);
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x24BEE4AF8];
    v8 = v5;
    if (v5 <= 0)
    {
      v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0)
          goto LABEL_19;
        v12 = a2 + 8 * a3;
        if (v12 < (unint64_t)&v9[v8 + 4] && (unint64_t)(v9 + 4) < v12 + v8 * 8)
          goto LABEL_19;
        type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for MLDictionaryFeatureProvider);
        swift_arrayInitWithCopy();
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v9 = (_QWORD *)swift_allocObject();
      v10 = _swift_stdlib_malloc_size(v9);
      v11 = v10 - 32;
      if (v10 < 32)
        v11 = v10 - 25;
      v9[2] = v5;
      v9[3] = (2 * (v11 >> 3)) | 1;
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x24BEE4AF8];
    v8 = 4 * v5;
    if (v5 <= 0)
    {
      v9 = (char *)MEMORY[0x24BEE4AF8];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0)
          goto LABEL_19;
        v12 = v9 + 32;
        v13 = (char *)(a2 + 4 * a3);
        if (v13 < &v9[v8 + 32] && v12 < &v13[v8])
          goto LABEL_19;
        memcpy(v12, v13, 4 * v5);
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
      v9 = (char *)swift_allocObject();
      v10 = _swift_stdlib_malloc_size(v9);
      v11 = v10 - 32;
      if (v10 < 32)
        v11 = v10 - 29;
      *((_QWORD *)v9 + 2) = v5;
      *((_QWORD *)v9 + 3) = 2 * (v11 >> 2);
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1, void (*a2)(_QWORD *, uint64_t, unint64_t))
{
  uint64_t v4;
  _QWORD *v5;
  int64_t v6;
  uint64_t v7;
  void (*v8)(_QWORD *, uint64_t, unint64_t);

  if (a1 >> 62)
    goto LABEL_10;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v4)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    if (v4 <= 0)
    {
      v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v5 = (_QWORD *)swift_allocObject();
      v6 = _swift_stdlib_malloc_size(v5);
      v7 = v6 - 32;
      if (v6 < 32)
        v7 = v6 - 25;
      v5[2] = v4;
      v5[3] = (2 * (v7 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    a2(v5 + 4, v4, a1);
    a2 = v8;
    swift_bridgeObjectRelease();
    if (a2 == (void (*)(_QWORD *, uint64_t, unint64_t))v4)
      break;
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v4)
      return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v5;
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](void (**a1)(id *a1), unint64_t a2, uint64_t a3))()
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

void protocol witness for Collection.subscript.read in conformance [A]specialized (_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t (*specialized Array.subscript.read(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t (*v3)();
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)MEMORY[0x22E2AFF34](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = MEMORY[0x22E2AFF34](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_retain();
LABEL_5:
    *v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = MEMORY[0x22E2AFF34](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_retain();
LABEL_5:
    *v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = MEMORY[0x22E2AFF34](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_unknownObjectRetain();
LABEL_5:
    *v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

void (*specialized Array.subscript.read(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)MEMORY[0x22E2AFF34](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

void Array.subscript.readspecialized (id *a1)
{

}

uint64_t Array.subscript.readspecialized ()
{
  return swift_release();
}

{
  return swift_unknownObjectRelease();
}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  id *v13;
  id v14;
  uint64_t result;
  uint64_t (*v16[4])();

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>(&lazy protocol witness table cache variable for type [CKContextUIElement] and conformance [A], &demangling cache variable for type metadata for [CKContextUIElement], MEMORY[0x24BEE12E0]);
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CKContextUIElement]);
          v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          v14 = *v13;
          ((void (*)(uint64_t (**)(), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for NSNumber(0, (unint64_t *)&lazy cache variable for type metadata for CKContextUIElement);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  id *v13;
  id v14;
  uint64_t result;
  uint64_t (*v16[4])();

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>(&lazy protocol witness table cache variable for type [BMTextUnderstandingPoemBufferExtraction] and conformance [A], &demangling cache variable for type metadata for [BMTextUnderstandingPoemBufferExtraction], MEMORY[0x24BEE12E0]);
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [BMTextUnderstandingPoemBufferExtraction]);
          v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          v14 = *v13;
          ((void (*)(uint64_t (**)(), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for BMTextUnderstandingPoemBufferExtraction);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  id *v13;
  id v14;
  uint64_t result;
  uint64_t (*v16[4])();

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>(&lazy protocol witness table cache variable for type [CSDocumentUnderstandingTopic] and conformance [A], &demangling cache variable for type metadata for [CSDocumentUnderstandingTopic], MEMORY[0x24BEE12E0]);
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CSDocumentUnderstandingTopic]);
          v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          v14 = *v13;
          ((void (*)(uint64_t (**)(), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for CSDocumentUnderstandingTopic);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  id *v13;
  id v14;
  uint64_t result;
  uint64_t (*v16[4])();

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>(&lazy protocol witness table cache variable for type [CSDocumentUnderstandingCategory] and conformance [A], &demangling cache variable for type metadata for [CSDocumentUnderstandingCategory], MEMORY[0x24BEE12E0]);
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CSDocumentUnderstandingCategory]);
          v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          v14 = *v13;
          ((void (*)(uint64_t (**)(), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for CSDocumentUnderstandingCategory);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  uint64_t *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t (*v16[4])();

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>(&lazy protocol witness table cache variable for type [MLFeatureProvider] and conformance [A], &demangling cache variable for type metadata for [MLFeatureProvider], MEMORY[0x24BEE12E0]);
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MLFeatureProvider]);
          v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          v14 = *v13;
          swift_unknownObjectRetain();
          ((void (*)(uint64_t (**)(), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLFeatureProvider);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  id *v13;
  id v14;
  uint64_t result;
  uint64_t (*v16[4])();

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>(&lazy protocol witness table cache variable for type [CSSearchableItem] and conformance [A], &demangling cache variable for type metadata for [CSSearchableItem], MEMORY[0x24BEE12E0]);
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CSSearchableItem]);
          v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          v14 = *v13;
          ((void (*)(uint64_t (**)(), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for NSNumber(0, (unint64_t *)&lazy cache variable for type metadata for CSSearchableItem);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(_QWORD), unint64_t *a5, uint64_t *a6, uint64_t (*a7)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))
{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  void (*v22)(_BYTE *, _QWORD);
  id *v23;
  id v24;
  uint64_t result;
  _BYTE v26[32];

  v14 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v15)
      return a3;
  }
  else
  {
    v15 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v15)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v16 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v14)
  {
    swift_bridgeObjectRetain();
    v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v18 <= a2)
    {
      if (v15 >= 1)
      {
        v19 = lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>(a5, a6, MEMORY[0x24BEE12E0]);
        swift_bridgeObjectRetain();
        for (i = 0; i != v15; ++i)
        {
          v21 = __swift_instantiateConcreteTypeFromMangledName(a6);
          v22 = (void (*)(_BYTE *, _QWORD))a7(v26, i, a3, v21, v19);
          v24 = *v23;
          v22(v26, 0);
          *(_QWORD *)(a1 + 8 * i) = v24;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v17 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v17 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v16 + 32 >= a1 + 8 * v17 || v16 + 32 + 8 * v17 <= a1)
  {
    a4(0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  void (*v22)(_BYTE *, _QWORD);
  uint64_t *v23;
  uint64_t v24;
  uint64_t result;
  _BYTE v26[32];

  v14 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v15)
      return a3;
  }
  else
  {
    v15 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v15)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v16 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v14)
  {
    swift_bridgeObjectRetain();
    v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v18 <= a2)
    {
      if (v15 >= 1)
      {
        v19 = lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>(a5, a6, MEMORY[0x24BEE12E0]);
        swift_bridgeObjectRetain();
        for (i = 0; i != v15; ++i)
        {
          v21 = __swift_instantiateConcreteTypeFromMangledName(a6);
          v22 = (void (*)(_BYTE *, _QWORD))a7(v26, i, a3, v21, v19);
          v24 = *v23;
          swift_retain();
          v22(v26, 0);
          *(_QWORD *)(a1 + 8 * i) = v24;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v17 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v17 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v16 + 32 >= a1 + 8 * v17 || v16 + 32 + 8 * v17 <= a1)
  {
    a4(0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;

  v1 = a1[2];
  if (!v1)
    return MEMORY[0x24BEE4B00];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, String>);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[6];
  result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  v9 = a1 + 9;
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v4;
    v10 = (_QWORD *)(v3[7] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      break;
    v3[2] = v13;
    if (!--v1)
      goto LABEL_8;
    v14 = v9 + 3;
    v4 = *(v9 - 2);
    v5 = *(v9 - 1);
    v15 = *v9;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
    v9 = v14;
    v6 = v15;
    if ((v16 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;

  v1 = a1[2];
  if (!v1)
    return MEMORY[0x24BEE4B00];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, [Float]>);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v5 = a1[4];
  v4 = a1[5];
  result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
  if ((v7 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  v8 = a1 + 7;
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = 8 * result;
    *(_QWORD *)(v3[6] + v9) = v5;
    *(_QWORD *)(v3[7] + v9) = v4;
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      break;
    v3[2] = v12;
    if (!--v1)
      goto LABEL_8;
    v13 = v8 + 2;
    v5 = *(v8 - 1);
    v14 = *v8;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    v8 = v13;
    v4 = v14;
    if ((v15 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (message: PoemMessage, distance: Int));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DUDocumentUpdate?, CSSearchableItem));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DUDocumentUpdate, CSSearchableItem));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (token: String, start: Int, length: Int, wordId: Int));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Data?, Float));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 56 * a1 + 32;
    v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, DUProcessingPhaseSpecification));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, [DUProcessingPhaseImplementation]));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 72 * a1 + 32;
    v6 = a3 + 72 * v4;
    if (v5 >= v6 || v5 + 72 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 88 * a1 + 32;
    v6 = a3 + 88 * v4;
    if (v5 >= v6 || v5 + 88 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 48 * a1 + 32;
    v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v8 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DUDocument, URL, CSSearchableItem))
                   - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v10 = *(_QWORD *)(v8 + 72);
    v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
    v12 = v10 * v4;
    v13 = a3 + v12;
    v14 = v11 + v12;
    if (v11 >= v13 || v14 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySay21DocumentUnderstanding20TaggedCharacterRangeCGG_AIs5NeverOTg504_s21d108Understanding44DUFoundInEventMultilingualBERTImplementationC17runTypedOnRequest7requests6ResultOyAA0cdeM0Cs5c35_pGAA012DUProcessingK0C_tYaFSayAA20fgH9CGAPXEfU_A2ITf1cn_nTf4ngg_n(uint64_t a1, int64_t a2)
{
  int64_t v2;
  uint64_t v3;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v13 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    v3 = v13;
    v6 = (unint64_t *)(a1 + 32);
    do
    {
      v7 = *v6;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v8 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v8);
      v9 = specialized static TaggedCharacterRange.mergeTagsFromTaggedCharacterRanges(_:withTaggedCharacterRanges:)(v7, a2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v11 = *(_QWORD *)(v13 + 16);
      v10 = *(_QWORD *)(v13 + 24);
      if (v11 >= v10 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
      *(_QWORD *)(v13 + 16) = v11 + 1;
      *(_QWORD *)(v13 + 8 * v11 + 32) = v9;
      ++v6;
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(uint64_t *__src, uint64_t *a2, unint64_t a3, uint64_t *__dst, uint64_t a5)
{
  uint64_t *v7;
  uint64_t *v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  char *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  char *v47;
  uint64_t *v48;
  uint64_t *v49;

  v7 = a2;
  v8 = __src;
  v9 = (char *)a2 - (char *)__src;
  v10 = (char *)a2 - (char *)__src + 15;
  if ((char *)a2 - (char *)__src >= 0)
    v10 = (char *)a2 - (char *)__src;
  v11 = v10 >> 4;
  v12 = a3 - (_QWORD)a2;
  v13 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v13 = a3 - (_QWORD)a2;
  v14 = v13 >> 4;
  v49 = __src;
  v48 = __dst;
  v44 = __dst;
  if (v11 >= v13 >> 4)
  {
    if (v12 < -15)
      goto LABEL_55;
    if (__dst != a2 || &a2[2 * v14] <= __dst)
    {
      memmove(__dst, a2, 16 * v14);
      __dst = v44;
    }
    v27 = &__dst[2 * v14];
    v47 = (char *)v27;
    v49 = v7;
    if (v8 >= v7 || v12 < 16)
    {
LABEL_54:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v49, (const void **)&v48, &v47);
      return 1;
    }
    v28 = (uint64_t *)(a3 - 16);
    v29 = v7;
    while (1)
    {
      v30 = v28 + 2;
      v32 = *(v29 - 2);
      v29 -= 2;
      v31 = v32;
      if (!*(_QWORD *)(a5 + 16))
        goto LABEL_48;
      v46 = v27;
      v33 = *(v27 - 1);
      v34 = v29[1];
      v43 = (char *)(v27 - 2);
      v35 = *(v27 - 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v36 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v33);
      if ((v37 & 1) == 0 || !*(_QWORD *)(a5 + 16))
        goto LABEL_47;
      v42 = *(_QWORD *)(*(_QWORD *)(a5 + 56) + 8 * v36);
      swift_bridgeObjectRetain();
      v38 = specialized __RawDictionaryStorage.find<A>(_:)(v31, v34);
      if ((v39 & 1) == 0)
        break;
      v40 = *(_QWORD *)(*(_QWORD *)(a5 + 56) + 8 * v38);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v27 = v46;
      if (v42 < v40)
        goto LABEL_48;
      v47 = v43;
      if (v30 < v46 || v28 >= v46 || v30 != v46)
        *(_OWORD *)v28 = *(_OWORD *)v43;
      v29 = v7;
      v27 = (uint64_t *)v43;
LABEL_52:
      if (v29 > v8)
      {
        v28 -= 2;
        v7 = v29;
        if (v27 > v44)
          continue;
      }
      goto LABEL_54;
    }
    swift_bridgeObjectRelease();
LABEL_47:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v27 = v46;
LABEL_48:
    if (v30 != v7 || v28 >= v7)
      *(_OWORD *)v28 = *(_OWORD *)v29;
    v49 = v29;
    goto LABEL_52;
  }
  if (v9 >= -15)
  {
    if (__dst != __src || &__src[2 * v11] <= __dst)
    {
      memmove(__dst, __src, 16 * v11);
      __dst = v44;
    }
    v15 = &__dst[2 * v11];
    v47 = (char *)v15;
    if ((unint64_t)v7 < a3 && v9 >= 16)
    {
      while (1)
      {
        if (!*(_QWORD *)(a5 + 16))
          goto LABEL_22;
        v17 = *__dst;
        v16 = __dst[1];
        v18 = __dst;
        v19 = *v7;
        v20 = v7[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v21 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v20);
        if ((v22 & 1) == 0 || !*(_QWORD *)(a5 + 16))
          goto LABEL_21;
        v45 = *(_QWORD *)(*(_QWORD *)(a5 + 56) + 8 * v21);
        swift_bridgeObjectRetain();
        v23 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v16);
        if ((v24 & 1) == 0)
          break;
        v25 = *(_QWORD *)(*(_QWORD *)(a5 + 56) + 8 * v23);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        __dst = v18;
        if (v45 < v25)
          goto LABEL_22;
        if (v8 != v18)
          *(_OWORD *)v8 = *(_OWORD *)v18;
        __dst = v18 + 2;
        v48 = v18 + 2;
        v26 = v7;
LABEL_26:
        v8 += 2;
        if (__dst < v15)
        {
          v7 = v26;
          if ((unint64_t)v26 < a3)
            continue;
        }
        v49 = v8;
        goto LABEL_54;
      }
      swift_bridgeObjectRelease();
LABEL_21:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __dst = v18;
LABEL_22:
      v26 = v7 + 2;
      if (v8 < v7 || v8 >= v26 || v8 != v7)
        *(_OWORD *)v8 = *(_OWORD *)v7;
      goto LABEL_26;
    }
    goto LABEL_54;
  }
LABEL_55:
  swift_bridgeObjectRelease();
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;

  v21 = result;
  if (a3 == a2)
    return result;
  v6 = a3;
  v7 = *a4;
  v8 = (uint64_t *)(*a4 + 16 * a3);
  while (2)
  {
    v9 = *(_QWORD *)(v7 + 16 * v6 + 8);
    v10 = v21;
    v22 = v8;
    do
    {
      v11 = *(v8 - 2);
      if (!*(_QWORD *)(a5 + 16))
        goto LABEL_12;
      v12 = *(v8 - 1);
      v13 = *v8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v14 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v9);
      if ((v15 & 1) == 0 || !*(_QWORD *)(a5 + 16))
        goto LABEL_11;
      v23 = *(_QWORD *)(*(_QWORD *)(a5 + 56) + 8 * v14);
      swift_bridgeObjectRetain();
      v16 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v12);
      if ((v17 & 1) == 0)
      {
        swift_bridgeObjectRelease();
LABEL_11:
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        goto LABEL_12;
      }
      v18 = *(_QWORD *)(*(_QWORD *)(a5 + 56) + 8 * v16);
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease_n();
      if (v23 >= v18)
        break;
LABEL_12:
      if (!v7)
      {
        __break(1u);
        return result;
      }
      v19 = *v8;
      v9 = v8[1];
      *(_OWORD *)v8 = *((_OWORD *)v8 - 1);
      *(v8 - 1) = v9;
      *(v8 - 2) = v19;
      v8 -= 2;
      ++v10;
    }
    while (v6 != v10);
    ++v6;
    v8 = v22 + 2;
    if (v6 != a2)
      continue;
    return result;
  }
}

uint64_t specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::Int v11;
  uint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  Swift::Int v15;
  Swift::Int v16;
  Swift::Int v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char *v29;
  uint64_t v30;
  int v31;
  Swift::Int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  int v45;
  Swift::Int v46;
  uint64_t v47;
  uint64_t v48;
  Swift::Int v49;
  Swift::Int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  Swift::Int v54;
  uint64_t *v55;
  uint64_t v56;
  Swift::Int v57;
  uint64_t v58;
  Swift::Int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  uint64_t v95;
  char v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  BOOL v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t *v121;
  unint64_t v122;
  unint64_t v123;
  char *v124;
  uint64_t result;
  uint64_t v126;
  unint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  char *v132;
  unint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  Swift::Int v137;
  Swift::Int v138;
  Swift::Int v139;
  Swift::Int v140;
  char *v141;
  uint64_t *__dst;
  uint64_t *v143;
  Swift::Int v144;
  int v145;
  char *v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;

  v5 = a1[1];
  swift_bridgeObjectRetain_n();
  v6 = _minimumMergeRunLength(_:)(v5);
  if (v6 >= v5)
  {
    if (v5 < 0)
      goto LABEL_161;
    if (!v5)
      return swift_bridgeObjectRelease_n();
    swift_bridgeObjectRetain();
    specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v5, 1, a1, a2);
    if (!v2)
      return swift_bridgeObjectRelease_n();
LABEL_139:
    swift_bridgeObjectRelease_n();
    return swift_bridgeObjectRelease();
  }
  if (v5 >= 0)
    v7 = v5;
  else
    v7 = v5 + 1;
  if (v5 < -1)
    goto LABEL_169;
  v139 = v5;
  v137 = v6;
  v150 = v2;
  v134 = a1;
  if (v5 < 2)
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
    __dst = (uint64_t *)(MEMORY[0x24BEE4AF8] + 32);
    v136 = MEMORY[0x24BEE4AF8];
    if (v5 != 1)
    {
      v14 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_126:
      if (v14 >= 2)
      {
        v126 = *v134;
        do
        {
          v127 = v14 - 2;
          if (v14 < 2)
            goto LABEL_156;
          if (!v126)
            goto LABEL_168;
          v148 = v10;
          v128 = v10 + 32;
          v129 = *(_QWORD *)&v10[16 * v127 + 32];
          v130 = *(_QWORD *)&v128[16 * v14 - 8];
          v131 = (uint64_t *)(v126 + 16 * *(_QWORD *)&v128[16 * v14 - 16]);
          swift_bridgeObjectRetain();
          specialized _merge<A>(low:mid:high:buffer:by:)((uint64_t *)(v126 + 16 * v129), v131, v126 + 16 * v130, __dst, a2);
          if (v150)
            goto LABEL_138;
          swift_bridgeObjectRelease();
          if (v130 < v129)
            goto LABEL_157;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v148 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v148);
          if (v127 >= *((_QWORD *)v148 + 2))
            goto LABEL_158;
          v132 = &v148[16 * v127 + 32];
          *(_QWORD *)v132 = v129;
          *((_QWORD *)v132 + 1) = v130;
          v133 = *((_QWORD *)v148 + 2);
          if (v14 > v133)
            goto LABEL_159;
          v10 = v148;
          memmove(&v148[16 * v14 + 16], &v148[16 * v14 + 32], 16 * (v133 - v14));
          *((_QWORD *)v148 + 2) = v133 - 1;
          v14 = v133 - 1;
        }
        while (v133 > 2);
      }
      swift_bridgeObjectRelease();
      *(_QWORD *)(v136 + 16) = 0;
      swift_bridgeObjectRelease_n();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v8 = v7 >> 1;
    v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v9 + 16) = v8;
    v136 = v9;
    __dst = (uint64_t *)(v9 + 32);
  }
  v11 = 0;
  v12 = *a1;
  v135 = *a1 + 8;
  v10 = (char *)MEMORY[0x24BEE4AF8];
  v13 = v139;
  v151 = *a1;
  v149 = a2;
  while (1)
  {
    v15 = v11;
    v16 = v11 + 1;
    v140 = v11;
    if (v11 + 1 < v13)
    {
      if (*(_QWORD *)(a2 + 16))
      {
        v17 = v11 + 1;
        v18 = (uint64_t *)(v12 + 16 * v16);
        v19 = (uint64_t *)(v12 + 16 * v11);
        v20 = *v19;
        v21 = v19[1];
        v22 = *v18;
        v23 = v18[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v24 = specialized __RawDictionaryStorage.find<A>(_:)(v22, v23);
        if ((v25 & 1) != 0 && *(_QWORD *)(a2 + 16))
        {
          v26 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v24);
          swift_bridgeObjectRetain();
          v27 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
          if ((v28 & 1) != 0)
          {
            v29 = v10;
            v30 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v27);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            v101 = v26 < v30;
            v12 = v151;
            v31 = v101;
            v145 = v31;
            v13 = v139;
            v32 = v140 + 2;
            v16 = v17;
            v15 = v140;
            if (v140 + 2 < v139)
              goto LABEL_30;
LABEL_45:
            if (!v145)
              goto LABEL_53;
            if (v32 < v15)
              goto LABEL_162;
LABEL_47:
            if (v15 < v32)
            {
              v47 = 16 * v32;
              v48 = 16 * v15;
              v49 = v32;
              v50 = v15;
              do
              {
                if (v50 != --v49)
                {
                  if (!v12)
                    goto LABEL_167;
                  v51 = v12 + v47;
                  v52 = *(_QWORD *)(v12 + v48);
                  v53 = *(_QWORD *)(v12 + v48 + 8);
                  *(_OWORD *)(v12 + v48) = *(_OWORD *)(v12 + v47 - 16);
                  *(_QWORD *)(v51 - 16) = v52;
                  *(_QWORD *)(v51 - 8) = v53;
                }
                ++v50;
                v47 -= 16;
                v48 += 16;
              }
              while (v50 < v49);
            }
LABEL_53:
            v16 = v32;
            v10 = v29;
            goto LABEL_54;
          }
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v16 = v17;
        v13 = v139;
        v15 = v140;
      }
      v29 = v10;
      v32 = v15 + 2;
      if (v15 + 2 >= v13)
        goto LABEL_47;
      v145 = 1;
LABEL_30:
      v33 = (uint64_t *)(v135 + 16 * v32);
      while (1)
      {
        if (*(_QWORD *)(a2 + 16))
        {
          v34 = *(v33 - 1);
          v35 = *v33;
          v36 = (uint64_t *)(v12 + 16 * v16);
          v37 = *v36;
          v38 = v36[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v39 = specialized __RawDictionaryStorage.find<A>(_:)(v34, v35);
          if ((v40 & 1) != 0 && *(_QWORD *)(a2 + 16))
          {
            v41 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v39);
            swift_bridgeObjectRetain();
            v42 = specialized __RawDictionaryStorage.find<A>(_:)(v37, v38);
            if ((v43 & 1) != 0)
            {
              v44 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v42);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease_n();
              v101 = v41 < v44;
              v13 = v139;
              v15 = v140;
              v45 = !v101;
              v12 = v151;
              if (((v145 ^ v45) & 1) == 0)
                goto LABEL_45;
              goto LABEL_43;
            }
            swift_bridgeObjectRelease();
            v12 = v151;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v13 = v139;
        }
        if ((v145 & 1) == 0)
          goto LABEL_53;
LABEL_43:
        v46 = v32 + 1;
        v33 += 2;
        v16 = v32;
        v32 = v46;
        if (v46 >= v13)
        {
          v32 = v46;
          goto LABEL_45;
        }
      }
    }
LABEL_54:
    if (v16 < v13)
    {
      if (__OFSUB__(v16, v15))
        goto LABEL_160;
      if (v16 - v15 < v137)
        break;
    }
LABEL_76:
    if (v16 < v15)
      goto LABEL_155;
    v144 = v16;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
    v70 = *((_QWORD *)v10 + 2);
    v69 = *((_QWORD *)v10 + 3);
    v14 = v70 + 1;
    v11 = v144;
    if (v70 >= v69 >> 1)
    {
      v124 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v69 > 1), v70 + 1, 1, v10);
      v11 = v144;
      v10 = v124;
    }
    *((_QWORD *)v10 + 2) = v14;
    v71 = v10 + 32;
    v72 = &v10[16 * v70 + 32];
    *(_QWORD *)v72 = v15;
    *((_QWORD *)v72 + 1) = v11;
    if (v70)
    {
      v147 = v10;
      v141 = v10 + 32;
      while (1)
      {
        v73 = v14 - 1;
        if (v14 >= 4)
        {
          v78 = &v71[16 * v14];
          v79 = *((_QWORD *)v78 - 8);
          v80 = *((_QWORD *)v78 - 7);
          v84 = __OFSUB__(v80, v79);
          v81 = v80 - v79;
          if (v84)
            goto LABEL_144;
          v83 = *((_QWORD *)v78 - 6);
          v82 = *((_QWORD *)v78 - 5);
          v84 = __OFSUB__(v82, v83);
          v76 = v82 - v83;
          v77 = v84;
          if (v84)
            goto LABEL_145;
          v85 = v14 - 2;
          v86 = &v71[16 * v14 - 32];
          v88 = *(_QWORD *)v86;
          v87 = *((_QWORD *)v86 + 1);
          v84 = __OFSUB__(v87, v88);
          v89 = v87 - v88;
          if (v84)
            goto LABEL_147;
          v84 = __OFADD__(v76, v89);
          v90 = v76 + v89;
          if (v84)
            goto LABEL_150;
          if (v90 >= v81)
          {
            v108 = &v71[16 * v73];
            v110 = *(_QWORD *)v108;
            v109 = *((_QWORD *)v108 + 1);
            v84 = __OFSUB__(v109, v110);
            v111 = v109 - v110;
            if (v84)
              goto LABEL_154;
            v101 = v76 < v111;
            goto LABEL_114;
          }
        }
        else
        {
          if (v14 != 3)
          {
            v102 = *((_QWORD *)v10 + 4);
            v103 = *((_QWORD *)v10 + 5);
            v84 = __OFSUB__(v103, v102);
            v95 = v103 - v102;
            v96 = v84;
            goto LABEL_108;
          }
          v75 = *((_QWORD *)v10 + 4);
          v74 = *((_QWORD *)v10 + 5);
          v84 = __OFSUB__(v74, v75);
          v76 = v74 - v75;
          v77 = v84;
        }
        if ((v77 & 1) != 0)
          goto LABEL_146;
        v85 = v14 - 2;
        v91 = &v71[16 * v14 - 32];
        v93 = *(_QWORD *)v91;
        v92 = *((_QWORD *)v91 + 1);
        v94 = __OFSUB__(v92, v93);
        v95 = v92 - v93;
        v96 = v94;
        if (v94)
          goto LABEL_149;
        v97 = &v71[16 * v73];
        v99 = *(_QWORD *)v97;
        v98 = *((_QWORD *)v97 + 1);
        v84 = __OFSUB__(v98, v99);
        v100 = v98 - v99;
        if (v84)
          goto LABEL_152;
        if (__OFADD__(v95, v100))
          goto LABEL_153;
        if (v95 + v100 >= v76)
        {
          v101 = v76 < v100;
LABEL_114:
          if (v101)
            v73 = v85;
          goto LABEL_116;
        }
LABEL_108:
        if ((v96 & 1) != 0)
          goto LABEL_148;
        v104 = &v71[16 * v73];
        v106 = *(_QWORD *)v104;
        v105 = *((_QWORD *)v104 + 1);
        v84 = __OFSUB__(v105, v106);
        v107 = v105 - v106;
        if (v84)
          goto LABEL_151;
        if (v107 < v95)
          goto LABEL_15;
LABEL_116:
        v112 = v73 - 1;
        if (v73 - 1 >= v14)
        {
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
LABEL_161:
          __break(1u);
LABEL_162:
          __break(1u);
LABEL_163:
          __break(1u);
          goto LABEL_164;
        }
        if (!v12)
          goto LABEL_166;
        v113 = v12;
        v114 = &v71[16 * v112];
        v115 = v71;
        v116 = *(_QWORD *)v114;
        v117 = v73;
        v118 = &v115[16 * v73];
        v119 = *((_QWORD *)v118 + 1);
        v120 = (uint64_t *)(v113 + 16 * *(_QWORD *)v114);
        v121 = (uint64_t *)(v113 + 16 * *(_QWORD *)v118);
        v122 = v113 + 16 * v119;
        swift_bridgeObjectRetain();
        specialized _merge<A>(low:mid:high:buffer:by:)(v120, v121, v122, __dst, v149);
        if (v150)
        {
LABEL_138:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *(_QWORD *)(v136 + 16) = 0;
          goto LABEL_139;
        }
        swift_bridgeObjectRelease();
        if (v119 < v116)
          goto LABEL_141;
        if (v117 > *((_QWORD *)v147 + 2))
          goto LABEL_142;
        *(_QWORD *)v114 = v116;
        v71 = v141;
        *(_QWORD *)&v141[16 * v112 + 8] = v119;
        v123 = *((_QWORD *)v147 + 2);
        if (v117 >= v123)
          goto LABEL_143;
        v10 = v147;
        v150 = 0;
        v14 = v123 - 1;
        memmove(v118, v118 + 16, 16 * (v123 - 1 - v117));
        *((_QWORD *)v147 + 2) = v123 - 1;
        v101 = v123 > 2;
        v12 = v151;
        v11 = v144;
        a2 = v149;
        if (!v101)
          goto LABEL_15;
      }
    }
    v14 = 1;
LABEL_15:
    v13 = v139;
    if (v11 >= v139)
      goto LABEL_126;
  }
  v54 = v15 + v137;
  if (__OFADD__(v15, v137))
    goto LABEL_163;
  if (v54 >= v13)
    v54 = v13;
  if (v54 >= v15)
  {
    if (v16 == v54)
      goto LABEL_76;
    v146 = v10;
    v55 = (uint64_t *)(v12 + 16 * v16);
    v138 = v54;
    while (1)
    {
      v56 = *(_QWORD *)(v12 + 16 * v16 + 8);
      v57 = v15;
      v143 = v55;
      do
      {
        v58 = *(v55 - 2);
        if (!*(_QWORD *)(a2 + 16))
          goto LABEL_72;
        v59 = v16;
        v60 = *(v55 - 1);
        v61 = *v55;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v62 = specialized __RawDictionaryStorage.find<A>(_:)(v61, v56);
        if ((v63 & 1) == 0 || !*(_QWORD *)(a2 + 16))
          goto LABEL_71;
        v64 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v62);
        swift_bridgeObjectRetain();
        v65 = specialized __RawDictionaryStorage.find<A>(_:)(v58, v60);
        if ((v66 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          v12 = v151;
LABEL_71:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v16 = v59;
          goto LABEL_72;
        }
        v67 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v65);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        v101 = v64 < v67;
        v12 = v151;
        v16 = v59;
        if (!v101)
          break;
LABEL_72:
        if (!v12)
          goto LABEL_165;
        v68 = *v55;
        v56 = v55[1];
        *(_OWORD *)v55 = *((_OWORD *)v55 - 1);
        *(v55 - 1) = v56;
        *(v55 - 2) = v68;
        v55 -= 2;
        ++v57;
      }
      while (v16 != v57);
      ++v16;
      v55 = v143 + 2;
      v15 = v140;
      if (v16 == v138)
      {
        v16 = v138;
        v10 = v146;
        goto LABEL_76;
      }
    }
  }
LABEL_164:
  __break(1u);
LABEL_165:
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_166:
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_167:
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_168:
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_169:
  swift_bridgeObjectRelease_n();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[2];

  v4 = *a1;
  swift_bridgeObjectRetain_n();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v4);
  v5 = *(_QWORD *)(v4 + 16);
  v7[0] = v4 + 32;
  v7[1] = v5;
  swift_bridgeObjectRetain();
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v7, a2);
  swift_bridgeObjectRelease();
  *a1 = v4;
  return swift_bridgeObjectRelease_n();
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 4 * a1 + 32);
    v6 = 4 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 16 * a1 + 32);
    v6 = 16 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 24 * a1 + 32);
    v6 = 24 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay21DocumentUnderstanding20TaggedCharacterRangeCG_SaySdGs5NeverOTg504_s21d118Understanding44DUFoundInEventMultilingualBERTImplementationC29convertTcrToFeatureEmbeddings4tcrs17allPossibleValuesSayx11SdGGSayAA20fgh3CG_X13SSGtFAgJXEfU_AF0lmnoP0CSaySSGTf1cn_nTf4ngg_n(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  unint64_t v16;
  uint64_t v19;

  v3 = a1;
  if (a1 >> 62)
    goto LABEL_15;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v5 = MEMORY[0x24BEE4AF8];
    if (!v4)
      return v5;
    v19 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 & ~(v4 >> 63), 0);
    if (v4 < 0)
      break;
    v7 = 0;
    v5 = v19;
    v16 = v3 & 0xC000000000000001;
    v15 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 160);
    v8 = v3;
    while (v4 != v7)
    {
      if (v16)
      {
        v9 = MEMORY[0x22E2AFF34](v7, v3);
      }
      else
      {
        v9 = *(_QWORD *)(v3 + 8 * v7 + 32);
        swift_retain();
      }
      v10 = (*(uint64_t (**)(void))(*(_QWORD *)v9 + 216))();
      v11 = (*(uint64_t (**)(void))(*(_QWORD *)v9 + 144))();
      v12 = v15(a3, v11);
      swift_bridgeObjectRelease();
      specialized Array.append<A>(contentsOf:)(v12);
      swift_release();
      v14 = *(_QWORD *)(v19 + 16);
      v13 = *(_QWORD *)(v19 + 24);
      if (v14 >= v13 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
      ++v7;
      *(_QWORD *)(v19 + 16) = v14 + 1;
      *(_QWORD *)(v19 + 8 * v14 + 32) = v10;
      v3 = v8;
      if (v4 == v7)
        return v5;
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySay21DocumentUnderstanding20TaggedCharacterRangeCGG_SaySaySdGGs5NeverOTg504_s21d108Understanding44DUFoundInEventMultilingualBERTImplementationC17runTypedOnRequest7requests6ResultOyAA0cdeM0Cs5c45_pGAA012DUProcessingK0C_tYaFSaySaySdGGSayAA20fgH8CGXEfU5_AF0lmnoP0CSaySSGTf1cn_nTf4ngg_n(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v15;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v15 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    v4 = v15;
    v7 = a1 + 32;
    v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 168);
    do
    {
      v9 = swift_bridgeObjectRetain();
      v10 = v8(v9, a3);
      swift_bridgeObjectRelease();
      v12 = *(_QWORD *)(v15 + 16);
      v11 = *(_QWORD *)(v15 + 24);
      if (v12 >= v11 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
      *(_QWORD *)(v15 + 16) = v12 + 1;
      *(_QWORD *)(v15 + 8 * v12 + 32) = v10;
      v7 += 8;
      --v3;
    }
    while (v3);
  }
  return v4;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySSSaySSGG_SS_AFts5NeverOTg5045_sSSSaySSGSSAAIgggoo_SS3key_AA5valuetSS_AAts5D11OIegnrzr_TRSSAFSSAFIgggoo_Tf1cn_nTf4ng_n(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  int64_t v2;
  uint64_t v3;
  uint64_t result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  int64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (!v2)
    return v3;
  v35 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
  v3 = v35;
  result = specialized Dictionary.startIndex.getter(a1);
  v7 = result;
  v8 = 0;
  v9 = a1 + 64;
  v29 = v2;
  v30 = v6;
  v31 = a1 + 64;
  while ((v7 & 0x8000000000000000) == 0 && v7 < 1 << *(_BYTE *)(a1 + 32))
  {
    v12 = (unint64_t)v7 >> 6;
    if ((*(_QWORD *)(v9 + 8 * ((unint64_t)v7 >> 6)) & (1 << v7)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(a1 + 36) != v6)
      goto LABEL_24;
    v13 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v7);
    v14 = *v13;
    v15 = v13[1];
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v7);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17 = a2(v14, v15, v16);
    v33 = v18;
    v34 = v17;
    v20 = v19;
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v22 = *(_QWORD *)(v35 + 16);
    v21 = *(_QWORD *)(v35 + 24);
    if (v22 >= v21 >> 1)
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
    *(_QWORD *)(v35 + 16) = v22 + 1;
    v23 = (_QWORD *)(v35 + 24 * v22);
    v23[4] = v34;
    v23[5] = v33;
    v23[6] = v20;
    v10 = 1 << *(_BYTE *)(a1 + 32);
    if (v7 >= v10)
      goto LABEL_25;
    v9 = a1 + 64;
    v24 = *(_QWORD *)(v31 + 8 * v12);
    if ((v24 & (1 << v7)) == 0)
      goto LABEL_26;
    v6 = v30;
    if (*(_DWORD *)(a1 + 36) != v30)
      goto LABEL_27;
    v25 = v24 & (-2 << (v7 & 0x3F));
    if (v25)
    {
      v10 = __clz(__rbit64(v25)) | v7 & 0xFFFFFFFFFFFFFFC0;
      v11 = v29;
    }
    else
    {
      v26 = v12 + 1;
      v27 = (unint64_t)(v10 + 63) >> 6;
      v11 = v29;
      if (v12 + 1 < v27)
      {
        v28 = *(_QWORD *)(v31 + 8 * v26);
        if (v28)
        {
LABEL_20:
          v10 = __clz(__rbit64(v28)) + (v26 << 6);
        }
        else
        {
          while (v27 - 2 != v12)
          {
            v28 = *(_QWORD *)(a1 + 80 + 8 * v12++);
            if (v28)
            {
              v26 = v12 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    ++v8;
    v7 = v10;
    if (v8 == v11)
      return v3;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in DUFoundInEventMultilingualBERTImplementation.modelTokenOutputFromMergedTcr(input:tokenOutput:tokenOutputSectionMapping:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in DUFoundInEventMultilingualBERTImplementation.modelTokenOutputFromMergedTcr(input:tokenOutput:tokenOutputSectionMapping:)(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x22E2B10D4](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x22E2B10E0](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x22E2B10E0](MEMORY[0x24BEE0D18], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x22E2B10E0](MEMORY[0x24BEE5E60], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x22E2B10E0](MEMORY[0x24BDCFB50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

uint64_t sub_228319570()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t partial apply for closure #1 in DUFoundInEventMultilingualBERTImplementation.chunkTextWithNLContextualEmbedding(text:)(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in DUFoundInEventMultilingualBERTImplementation.chunkTextWithNLContextualEmbedding(text:)(a1, a2, a3, *(_QWORD **)(v3 + 16), *(uint64_t **)(v3 + 24), *(unint64_t **)(v3 + 32), *(unint64_t **)(v3 + 40), *(_QWORD ***)(v3 + 48), *(_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 64), *(unint64_t **)(v3 + 72));
}

uint64_t sub_2283195CC()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>?) -> ()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t partial apply for closure #1 in DUFoundInEventMultilingualBERTImplementation.createBaseTaggedCharacterRange(embeddingResults:tagger:adjustedStartLocations:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return partial apply for closure #1 in DUFoundInEventMultilingualBERTImplementation.createBaseTaggedCharacterRange(embeddingResults:tagger:adjustedStartLocations:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in DUFoundInEventMultilingualBERTImplementation.createBaseTaggedCharacterRange(embeddingResults:tagger:adjustedStartLocations:));
}

uint64_t partial apply for closure #1 in DUFoundInEventMultilingualBERTImplementation.createBaseTaggedCharacterRangeForChunks(embeddingResults:tagger:adjustedStartLocations:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return partial apply for closure #1 in DUFoundInEventMultilingualBERTImplementation.createBaseTaggedCharacterRange(embeddingResults:tagger:adjustedStartLocations:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in DUFoundInEventMultilingualBERTImplementation.createBaseTaggedCharacterRangeForChunks(embeddingResults:tagger:adjustedStartLocations:));
}

uint64_t partial apply for closure #1 in DUFoundInEventMultilingualBERTImplementation.createBaseTaggedCharacterRange(embeddingResults:tagger:adjustedStartLocations:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v4;

  return a4(a1, a2, a3, v4[2], v4[3], v4[4], v4[5], v4[6]);
}

uint64_t outlined init with copy of FoundInEventDataDetectorsOutput(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FoundInEventDataDetectorsOutput();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of FoundInEventDataDetectorsOutput(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FoundInEventDataDetectorsOutput();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2283196C0()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_2283196E4()
{
  return swift_deallocObject();
}

uint64_t sub_2283196F4()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in DUFoundInEventMultilingualBERTImplementation.loadModelHeadBundle()(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v5;

  closure #1 in DUFoundInEventMultilingualBERTImplementation.loadModelHeadBundle()(a1, a2, a3, a4, a5, *(_QWORD *)(v5 + 16), *(_BYTE **)(v5 + 24), *(_QWORD *)(v5 + 32));
}

uint64_t sub_228319734()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in DUFoundInEventMultilingualBERTImplementation.loadModelHeadBundle()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = partial apply for closure #2 in DUFoundInEventMultilingualBERTImplementation.loadModelHeadBundle();
  v3[16] = v2;
  return swift_task_switch();
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t outlined release of FoundInEventModelOutput(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

_UNKNOWN **associated type witness table accessor for DUProcessingPhaseImplementation.SpecificationType : DUProcessingPhaseSpecification in DUFoundInEventMultilingualBERTImplementation()
{
  return &protocol witness table for DUFoundInEventSpecification;
}

uint64_t type metadata accessor for DUFoundInEventMultilingualBERTImplementation()
{
  return objc_opt_self();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_Sis5NeverOTg5264_s21DocumentUnderstanding44DUFoundInEventMultilingualBERTImplementationC30createBaseTaggedCharacterRange16embeddingResults6tagger22adjustedStartLocationsSayAA0jkL0CGSaySo27NLContextualEmbeddingResultCG_So8NLTaggerCSaySiGtFSbSo5NLTagaSg_SnySS5IndexVGtXEfU_S2iXEfU1_AFSiTf1cn_nTf4ngn_nTm(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int64_t v4;
  uint64_t result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v14 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    if ((a3 & 0x8000000000000000) == 0)
    {
      if (*(_QWORD *)(a2 + 16) <= a3)
      {
LABEL_12:
        __break(1u);
        return result;
      }
      v8 = (uint64_t *)(a1 + 32);
      v9 = *(_QWORD *)(a2 + 8 * a3 + 32);
      result = v14;
      while (1)
      {
        v10 = *v8++;
        v11 = v10 + v9;
        if (__OFADD__(v10, v9))
          break;
        v15 = result;
        v13 = *(_QWORD *)(result + 16);
        v12 = *(_QWORD *)(result + 24);
        if (v13 >= v12 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
          result = v15;
        }
        *(_QWORD *)(result + 16) = v13 + 1;
        *(_QWORD *)(result + 8 * v13 + 32) = v11;
        if (!--v4)
          return result;
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_12;
  }
  return result;
}

_QWORD *specialized Array.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int64_t v8;
  int64_t v9;
  _QWORD *result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v5 = a4 >> 1;
  v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_24;
  }
  v7 = *(_QWORD **)v4;
  v8 = *(_QWORD *)(*(_QWORD *)v4 + 16);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  result = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || v9 > v7[3] >> 1)
    goto LABEL_8;
  if (v5 == a3)
  {
    while (v6 > 0)
    {
      __break(1u);
LABEL_8:
      if (v8 <= v9)
        v13 = v8 + v6;
      else
        v13 = v8;
      result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v13, 1, v7);
      v7 = result;
      if (v5 != a3)
        goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_12:
  v14 = v7[2];
  if ((v7[3] >> 1) - v14 < v6)
    goto LABEL_25;
  if (v6 < 0)
    goto LABEL_27;
  v15 = (unint64_t)&v7[2 * v14 + 4];
  v16 = a2 + 16 * a3;
  if (v16 < v15 + 16 * v6 && v15 < v16 + 16 * v6)
    goto LABEL_27;
  result = (_QWORD *)swift_arrayInitWithCopy();
  if (!v6)
  {
LABEL_22:
    *(_QWORD *)v4 = v7;
    return result;
  }
  v18 = v7[2];
  v19 = __OFADD__(v18, v6);
  v20 = v18 + v6;
  if (!v19)
  {
    v7[2] = v20;
    goto LABEL_22;
  }
LABEL_26:
  __break(1u);
LABEL_27:
  result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int64_t v8;
  int64_t v9;
  _QWORD *result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v5 = a4 >> 1;
  v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_24;
  }
  v7 = *(_QWORD **)v4;
  v8 = *(_QWORD *)(*(_QWORD *)v4 + 16);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  result = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || v9 > v7[3] >> 1)
    goto LABEL_8;
  if (v5 == a3)
  {
    while (v6 > 0)
    {
      __break(1u);
LABEL_8:
      if (v8 <= v9)
        v13 = v8 + v6;
      else
        v13 = v8;
      result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v13, 1, v7);
      v7 = result;
      if (v5 != a3)
        goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_12:
  v14 = v7[2];
  if ((v7[3] >> 1) - v14 < v6)
    goto LABEL_25;
  if (v6 < 0)
    goto LABEL_27;
  v15 = (unint64_t)&v7[2 * v14 + 4];
  v16 = a2 + 16 * a3;
  if (v16 < v15 + 16 * v6 && v15 < v16 + 16 * v6)
    goto LABEL_27;
  result = (_QWORD *)swift_arrayInitWithCopy();
  if (!v6)
  {
LABEL_22:
    *(_QWORD *)v4 = v7;
    return result;
  }
  v18 = v7[2];
  v19 = __OFADD__(v18, v6);
  v20 = v18 + v6;
  if (!v19)
  {
    v7[2] = v20;
    goto LABEL_22;
  }
LABEL_26:
  __break(1u);
LABEL_27:
  result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int64_t v8;
  int64_t v9;
  _QWORD *result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v5 = a4 >> 1;
  v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_24;
  }
  v7 = *(_QWORD **)v4;
  v8 = *(_QWORD *)(*(_QWORD *)v4 + 16);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  result = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || v9 > v7[3] >> 1)
    goto LABEL_8;
  if (v5 == a3)
  {
    while (v6 > 0)
    {
      __break(1u);
LABEL_8:
      if (v8 <= v9)
        v13 = v8 + v6;
      else
        v13 = v8;
      result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v13, 1, v7);
      v7 = result;
      if (v5 != a3)
        goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_12:
  v14 = v7[2];
  if ((v7[3] >> 1) - v14 < v6)
    goto LABEL_25;
  if (v6 < 0)
    goto LABEL_27;
  v15 = (unint64_t)&v7[5 * v14 + 4];
  v16 = a2 + 40 * a3;
  if (v16 < v15 + 40 * v6 && v15 < v16 + 40 * v6)
    goto LABEL_27;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (token: String, start: Int, length: Int, wordId: Int));
  result = (_QWORD *)swift_arrayInitWithCopy();
  if (!v6)
  {
LABEL_22:
    *(_QWORD *)v4 = v7;
    return result;
  }
  v18 = v7[2];
  v19 = __OFADD__(v18, v6);
  v20 = v18 + v6;
  if (!v19)
  {
    v7[2] = v20;
    goto LABEL_22;
  }
LABEL_26:
  __break(1u);
LABEL_27:
  result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int64_t v8;
  int64_t v9;
  _QWORD *result;
  int64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v5 = a4 >> 1;
  v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_24;
  }
  v7 = *(_QWORD **)v4;
  v8 = *(_QWORD *)(*(_QWORD *)v4 + 16);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  result = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || v9 > v7[3] >> 1)
    goto LABEL_8;
  if (v5 == a3)
  {
    while (v6 > 0)
    {
      __break(1u);
LABEL_8:
      if (v8 <= v9)
        v13 = v8 + v6;
      else
        v13 = v8;
      result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v13, 1, v7, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      v7 = result;
      if (v5 != a3)
        goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_12:
  v14 = v7[2];
  if ((v7[3] >> 1) - v14 < v6)
    goto LABEL_25;
  if (v6 < 0)
    goto LABEL_27;
  v15 = (char *)&v7[v14 + 4];
  v16 = (char *)(a2 + 8 * a3);
  if (v16 < &v15[8 * v6] && v15 < &v16[8 * v6])
    goto LABEL_27;
  result = memcpy(v15, v16, 8 * v6);
  if (!v6)
  {
LABEL_22:
    *(_QWORD *)v4 = v7;
    return result;
  }
  v18 = v7[2];
  v19 = __OFADD__(v18, v6);
  v20 = v18 + v6;
  if (!v19)
  {
    v7[2] = v20;
    goto LABEL_22;
  }
LABEL_26:
  __break(1u);
LABEL_27:
  result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int64_t v8;
  int64_t v9;
  _QWORD *result;
  int64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v5 = a4 >> 1;
  v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_24;
  }
  v7 = *(_QWORD **)v4;
  v8 = *(_QWORD *)(*(_QWORD *)v4 + 16);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  result = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || v9 > v7[3] >> 1)
    goto LABEL_8;
  if (v5 == a3)
  {
    while (v6 > 0)
    {
      __break(1u);
LABEL_8:
      if (v8 <= v9)
        v13 = v8 + v6;
      else
        v13 = v8;
      result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v13, 1, v7);
      v7 = result;
      if (v5 != a3)
        goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_12:
  v14 = v7[2];
  if ((v7[3] >> 1) - v14 < v6)
    goto LABEL_25;
  if (v6 < 0)
    goto LABEL_27;
  v15 = (char *)&v7[3 * v14 + 4];
  v16 = (char *)(a2 + 24 * a3);
  if (v16 < &v15[24 * v6] && v15 < &v16[24 * v6])
    goto LABEL_27;
  result = memcpy(v15, v16, 24 * v6);
  if (!v6)
  {
LABEL_22:
    *(_QWORD *)v4 = v7;
    return result;
  }
  v18 = v7[2];
  v19 = __OFADD__(v18, v6);
  v20 = v18 + v6;
  if (!v19)
  {
    v7[2] = v20;
    goto LABEL_22;
  }
LABEL_26:
  __break(1u);
LABEL_27:
  result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v6 = a4 + 40 * a1 + 32;
    v7 = a3 + 40 * v5;
    if (v6 >= v7 || v6 + 40 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v6 = a4 + 32 * a1 + 32;
    v7 = a3 + 32 * v5;
    if (v6 >= v7 || v6 + 32 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v6 = a4 + 8 * a1 + 32;
    v7 = a3 + 8 * v5;
    if (v6 >= v7 || v6 + 8 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a5(0) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t __swift_destroy_boxed_opaque_existential_1Tm(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 16))(a2, a1);
  return a2;
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 8))();
  return a1;
}

uint64_t outlined init with take of DocumentUnderstanding_HiddenLayerOutput(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DocumentUnderstanding_HiddenLayerOutput(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for NSNumber(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x22E2B10E0](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef;
  if (!lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef)
  {
    type metadata accessor for CFStringRef(255);
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for CFStringRef, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in DUFoundInEventMultilingualBERTImplementation.createBaseTaggedCharacterRangeForChunks(embeddingResults:tagger:adjustedStartLocations:)(uint64_t a1, unint64_t a2, unint64_t a3)
{
  _QWORD **v3;

  return closure #1 in closure #1 in DUFoundInEventMultilingualBERTImplementation.createBaseTaggedCharacterRangeForChunks(embeddingResults:tagger:adjustedStartLocations:)(a1, a2, a3, v3[2], v3[3], v3[4], v3[5]);
}

uint64_t partial apply for closure #1 in closure #1 in DUFoundInEventMultilingualBERTImplementation.createBaseTaggedCharacterRange(embeddingResults:tagger:adjustedStartLocations:)(uint64_t a1, unint64_t a2, unint64_t a3)
{
  _QWORD **v3;

  return closure #1 in closure #1 in DUFoundInEventMultilingualBERTImplementation.createBaseTaggedCharacterRange(embeddingResults:tagger:adjustedStartLocations:)(a1, a2, a3, v3[2], v3[3], v3[4], v3[5]);
}

unint64_t lazy protocol witness table accessor for type Substring and conformance Substring()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    result = MEMORY[0x22E2B10E0](MEMORY[0x24BEE1E38], MEMORY[0x24BEE1E08]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

id DUCategoryResult.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t DUCategoryResult.categoryIdentifier.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding16DUCategoryResult_categoryIdentifier);
  swift_beginAccess();
  v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t DUCategoryResult.categoryIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC21DocumentUnderstanding16DUCategoryResult_categoryIdentifier);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*DUCategoryResult.categoryIdentifier.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

double DUCategoryResult.categoryConfidence.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC21DocumentUnderstanding16DUCategoryResult_categoryConfidence;
  swift_beginAccess();
  return *(double *)v1;
}

uint64_t DUCategoryResult.categoryConfidence.setter(double a1)
{
  uint64_t v1;
  double *v3;
  uint64_t result;

  v3 = (double *)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding16DUCategoryResult_categoryConfidence);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*DUCategoryResult.categoryConfidence.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryConfidence.modify;
}

char *specialized DUCategoryResult.__allocating_init<A>(proto:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  char *v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  double *v11;
  double v12;
  double *v13;
  _BYTE v15[24];

  v2 = type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult();
  MEMORY[0x24BDAC7A8](v2);
  v4 = &v15[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUCategoryResult()), sel_init);
  outlined init with take of DocumentUnderstanding_ClientInterface_CategoryResult(a1, (uint64_t)v4);
  v6 = (uint64_t *)&v4[*(int *)(v2 + 20)];
  if (v6[1])
  {
    v7 = *v6;
    v8 = v6[1];
  }
  else
  {
    v7 = 0;
    v8 = 0xE000000000000000;
  }
  v9 = &v5[OBJC_IVAR____TtC21DocumentUnderstanding16DUCategoryResult_categoryIdentifier];
  swift_beginAccess();
  *(_QWORD *)v9 = v7;
  *((_QWORD *)v9 + 1) = v8;
  v10 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11 = (double *)&v4[*(int *)(v2 + 24)];
  if (*((_BYTE *)v11 + 8))
    v12 = 0.0;
  else
    v12 = *v11;
  outlined destroy of DocumentUnderstanding_ClientInterface_CategoryResult((uint64_t)v4);
  v13 = (double *)&v10[OBJC_IVAR____TtC21DocumentUnderstanding16DUCategoryResult_categoryConfidence];
  swift_beginAccess();
  *v13 = v12;

  return v10;
}

char *DUCategoryResult.__allocating_init<A>(proto:)()
{
  objc_class *v0;
  objc_class *v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  char v10;
  void (*v11)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  double *v16;
  double v17;
  double *v18;
  _BYTE v20[24];

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryResult?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = &v20[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v20[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = (char *)objc_msgSend(objc_allocWithZone(v1), sel_init);
  v10 = swift_dynamicCast();
  v11 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  if ((v10 & 1) != 0)
  {
    v11(v4, 0, 1, v5);
    outlined init with take of DocumentUnderstanding_ClientInterface_CategoryResult((uint64_t)v4, (uint64_t)v8);
    v12 = (uint64_t *)&v8[*(int *)(v5 + 20)];
    if (v12[1])
    {
      v13 = *v12;
      v14 = v12[1];
    }
    else
    {
      v13 = 0;
      v14 = 0xE000000000000000;
    }
    v15 = &v9[OBJC_IVAR____TtC21DocumentUnderstanding16DUCategoryResult_categoryIdentifier];
    swift_beginAccess();
    *(_QWORD *)v15 = v13;
    *((_QWORD *)v15 + 1) = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v16 = (double *)&v8[*(int *)(v5 + 24)];
    if (*((_BYTE *)v16 + 8))
      v17 = 0.0;
    else
      v17 = *v16;
    outlined destroy of DocumentUnderstanding_ClientInterface_CategoryResult((uint64_t)v8);
    v18 = (double *)&v9[OBJC_IVAR____TtC21DocumentUnderstanding16DUCategoryResult_categoryConfidence];
    swift_beginAccess();
    *v18 = v17;

  }
  else
  {
    v11(v4, 1, 1, v5);

    outlined destroy of DocumentUnderstanding_ClientInterface_CategoryResult?((uint64_t)v4);
    return 0;
  }
  return v9;
}

uint64_t outlined destroy of DocumentUnderstanding_ClientInterface_CategoryResult?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryResult?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of DocumentUnderstanding_ClientInterface_CategoryResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of DocumentUnderstanding_ClientInterface_CategoryResult(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void DUCategoryResult.protoRepresentation.getter(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  UnknownStorage.init()();
  v3 = type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult();
  v4 = (_QWORD *)(a1 + *(int *)(v3 + 20));
  *v4 = 0;
  v4[1] = 0;
  v5 = a1 + *(int *)(v3 + 24);
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = (_QWORD *)MEMORY[0x24BEE4EA0];
  *v4 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v1) + 0x60))();
  v4[1] = v7;
  *(double *)v5 = (*(double (**)(void))((*v6 & *v1) + 0x78))();
  *(_BYTE *)(v5 + 8) = 0;
}

uint64_t DUCategoryResult.copy(with:)@<X0>(char **a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t result;
  uint64_t v9;

  v3 = type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult();
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0x98))(v4);
  v7 = specialized DUCategoryResult.__allocating_init<A>(proto:)((uint64_t)v6);
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DUCategoryResult?);
  a1[3] = (char *)result;
  *a1 = v7;
  return result;
}

Swift::Void __swiftcall DUCategoryResult.encode(with:)(NSCoder with)
{
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;

  type metadata accessor for DUCategoryResult();
  lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DUCategoryResult and conformance DUCategoryResult, v2, (uint64_t (*)(uint64_t))type metadata accessor for DUCategoryResult, (uint64_t)&protocol conformance descriptor for DUCategoryResult);
  v3 = (void *)DUProtobufEncodableProtocol.serializedData()();
  if (v3)
  {
    v4 = v3;
    v5 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000016, 0x80000002284DABA0);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v4, v5);

  }
}

uint64_t type metadata accessor for DUCategoryResult()
{
  return objc_opt_self();
}

uint64_t DUCategoryResult.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return DUCategoryResult.init(coder:)(a1);
}

uint64_t DUCategoryResult.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  swift_getObjectType();
  type metadata accessor for NSData();
  v3 = v1;
  if (!NSCoder.decodeObject<A>(of:forKey:)())
  {

    goto LABEL_5;
  }
  swift_getObjectType();

  lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DUCategoryResult and conformance DUCategoryResult, v4, (uint64_t (*)(uint64_t))type metadata accessor for DUCategoryResult, (uint64_t)&protocol conformance descriptor for DUCategoryResult);
  DUProtobufEncodableProtocol.init(serializedData:)();

  v5 = v7;
  if (!v7)
  {
LABEL_5:
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v5;
}

unint64_t type metadata accessor for NSData()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSData;
  if (!lazy cache variable for type metadata for NSData)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSData);
  }
  return result;
}

id DUCategoryResult.init()()
{
  char *v0;
  char *v1;
  objc_super v3;

  v1 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding16DUCategoryResult_categoryIdentifier];
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0xE000000000000000;
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding16DUCategoryResult_categoryConfidence] = 0;
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for DUCategoryResult();
  return objc_msgSendSuper2(&v3, sel_init);
}

id DUCategoryResult.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DUCategoryResult();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t associated type witness table accessor for DUProtobufEncodableProtocol.ProtobufType : Message in DUCategoryResult()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for DUProtobufEncodableProtocol.protoRepresentation.getter in conformance DUCategoryResult()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **v0) + 0x98))();
}

uint64_t protocol witness for DUProtobufEncodableProtocol.init(proto:) in conformance DUCategoryResult@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 144);
  v6 = type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult();
  v7 = lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_CategoryResult and conformance DocumentUnderstanding_ClientInterface_CategoryResult, 255, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_CategoryResult);
  result = v5(a1, v6, v7);
  *a2 = result;
  return result;
}

uint64_t sub_22831C648()
{
  return lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_CategoryResult and conformance DocumentUnderstanding_ClientInterface_CategoryResult, 255, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_CategoryResult);
}

uint64_t lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = MEMORY[0x22E2B10E0](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

double DUDisplayInfo.frameInWindow.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC21DocumentUnderstanding13DUDisplayInfo_frameInWindow;
  swift_beginAccess();
  return *(double *)v1;
}

uint64_t DUDisplayInfo.frameInWindow.setter(double a1, double a2, double a3, double a4)
{
  uint64_t v4;
  double *v9;
  uint64_t result;

  v9 = (double *)(v4 + OBJC_IVAR____TtC21DocumentUnderstanding13DUDisplayInfo_frameInWindow);
  result = swift_beginAccess();
  *v9 = a1;
  v9[1] = a2;
  v9[2] = a3;
  v9[3] = a4;
  return result;
}

uint64_t (*DUDisplayInfo.frameInWindow.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

double DUDisplayInfo.absoluteOriginOnScreen.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC21DocumentUnderstanding13DUDisplayInfo_absoluteOriginOnScreen;
  swift_beginAccess();
  return *(double *)v1;
}

uint64_t DUDisplayInfo.absoluteOriginOnScreen.setter(double a1, double a2)
{
  uint64_t v2;
  double *v5;
  uint64_t result;

  v5 = (double *)(v2 + OBJC_IVAR____TtC21DocumentUnderstanding13DUDisplayInfo_absoluteOriginOnScreen);
  result = swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*DUDisplayInfo.absoluteOriginOnScreen.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUDisplayInfo.isOnScreen.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding13DUDisplayInfo_isOnScreen);
  swift_beginAccess();
  return *v1;
}

uint64_t DUDisplayInfo.isOnScreen.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding13DUDisplayInfo_isOnScreen);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*DUDisplayInfo.isOnScreen.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryConfidence.modify;
}

char *specialized DUDisplayInfo.__allocating_init<A>(proto:)(uint64_t a1)
{
  uint64_t v2;
  int *v3;
  uint64_t v4;
  char *v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  NSString *v14;
  double x;
  double y;
  double width;
  double height;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  double *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  NSString *v30;
  CGPoint v31;
  double v32;
  double v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  double *v37;
  char *v38;
  uint64_t v40;
  CGRect v41;

  v2 = type metadata accessor for String.Encoding();
  MEMORY[0x24BDAC7A8](v2);
  v3 = (int *)type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUDisplayInfo()), sel_init);
  outlined init with copy of DocumentUnderstanding_ClientInterface_DisplayInfo(a1, (uint64_t)v5);
  v7 = *(_QWORD *)v5;
  v8 = *((_QWORD *)v5 + 1);
  v9 = (char *)v6;
  outlined copy of Data._Representation(v7, v8);
  static String.Encoding.utf8.getter();
  v10 = String.init(data:encoding:)();
  v12 = v11;
  outlined consume of Data._Representation(v7, v8);
  if (v12)
  {
    v13 = HIBYTE(v12) & 0xF;
    if ((v12 & 0x2000000000000000) == 0)
      v13 = v10 & 0xFFFFFFFFFFFFLL;
    if (v13)
    {
      v14 = (NSString *)MEMORY[0x22E2AF8EC](v10, v12);
      swift_bridgeObjectRelease();
      v41 = CGRectFromString(v14);
      x = v41.origin.x;
      y = v41.origin.y;
      width = v41.size.width;
      height = v41.size.height;

      goto LABEL_19;
    }
    swift_bridgeObjectRelease();
  }
  v19 = v3[9];
  v20 = &v5[v3[8]];
  if (v20[8])
    x = 0.0;
  else
    x = *(double *)v20;
  if (v5[v19 + 8])
    y = 0.0;
  else
    y = *(double *)&v5[v19];
  v21 = v3[11];
  v22 = &v5[v3[10]];
  if (v22[8])
    width = 0.0;
  else
    width = *(double *)v22;
  if (v5[v21 + 8])
    height = 0.0;
  else
    height = *(double *)&v5[v21];
LABEL_19:
  v23 = (double *)&v9[OBJC_IVAR____TtC21DocumentUnderstanding13DUDisplayInfo_frameInWindow];
  swift_beginAccess();
  *v23 = x;
  v23[1] = y;
  v23[2] = width;
  v23[3] = height;
  v24 = *((_QWORD *)v5 + 2);
  v25 = *((_QWORD *)v5 + 3);
  outlined copy of Data._Representation(v24, v25);
  static String.Encoding.utf8.getter();
  v26 = String.init(data:encoding:)();
  v28 = v27;
  outlined consume of Data._Representation(v24, v25);
  if (v28)
  {
    v29 = HIBYTE(v28) & 0xF;
    if ((v28 & 0x2000000000000000) == 0)
      v29 = v26 & 0xFFFFFFFFFFFFLL;
    if (v29)
    {
      v30 = (NSString *)MEMORY[0x22E2AF8EC](v26, v28);
      swift_bridgeObjectRelease();
      v31 = CGPointFromString(v30);
      v32 = v31.x;
      v33 = v31.y;

      goto LABEL_31;
    }
    swift_bridgeObjectRelease();
  }
  v34 = v3[13];
  v35 = &v5[v3[12]];
  if (v35[8])
    v32 = 0.0;
  else
    v32 = *(double *)v35;
  if (v5[v34 + 8])
    v33 = 0.0;
  else
    v33 = *(double *)&v5[v34];
LABEL_31:
  outlined destroy of DocumentUnderstanding_ClientInterface_DisplayInfo(a1);
  v36 = OBJC_IVAR____TtC21DocumentUnderstanding13DUDisplayInfo_absoluteOriginOnScreen;
  v37 = (double *)&v9[OBJC_IVAR____TtC21DocumentUnderstanding13DUDisplayInfo_absoluteOriginOnScreen];
  swift_beginAccess();
  *v37 = v32;
  *(double *)&v9[v36 + 8] = v33;
  LOBYTE(v37) = v5[32];
  outlined destroy of DocumentUnderstanding_ClientInterface_DisplayInfo((uint64_t)v5);
  v38 = &v9[OBJC_IVAR____TtC21DocumentUnderstanding13DUDisplayInfo_isOnScreen];
  swift_beginAccess();
  *v38 = (char)v37;

  return v9;
}

char *DUDisplayInfo.__allocating_init<A>(proto:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  objc_class *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  id v18;
  char *v19;
  char v20;
  void (*v21)(char *, uint64_t, uint64_t, int *);
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  NSString *v28;
  double x;
  double y;
  double width;
  double height;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  double *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  NSString *v45;
  CGPoint v46;
  double v47;
  double v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  double *v52;
  char *v53;
  uint64_t v55;
  CGRect v56;

  v3 = v2;
  v6 = type metadata accessor for String.Encoding();
  MEMORY[0x24BDAC7A8](v6);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DisplayInfo?);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (int *)type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0);
  v15 = *((_QWORD *)v14 - 1);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = objc_msgSend(objc_allocWithZone(v3), sel_init);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, a2);
  v19 = (char *)v18;
  v20 = swift_dynamicCast();
  v21 = *(void (**)(char *, uint64_t, uint64_t, int *))(v15 + 56);
  if ((v20 & 1) != 0)
  {
    v55 = a1;
    v21(v10, 0, 1, v14);
    outlined init with take of DocumentUnderstanding_ClientInterface_DisplayInfo((uint64_t)v10, (uint64_t)v17);
    v22 = *(_QWORD *)v17;
    v23 = *((_QWORD *)v17 + 1);
    outlined copy of Data._Representation(*(_QWORD *)v17, v23);
    static String.Encoding.utf8.getter();
    v24 = String.init(data:encoding:)();
    v26 = v25;
    outlined consume of Data._Representation(v22, v23);
    if (v26)
    {
      v27 = HIBYTE(v26) & 0xF;
      if ((v26 & 0x2000000000000000) == 0)
        v27 = v24 & 0xFFFFFFFFFFFFLL;
      if (v27)
      {
        v28 = (NSString *)MEMORY[0x22E2AF8EC](v24, v26);
        swift_bridgeObjectRelease();
        v56 = CGRectFromString(v28);
        x = v56.origin.x;
        y = v56.origin.y;
        width = v56.size.width;
        height = v56.size.height;

        goto LABEL_21;
      }
      swift_bridgeObjectRelease();
    }
    v33 = v14[9];
    v34 = &v17[v14[8]];
    if (v34[8])
      x = 0.0;
    else
      x = *(double *)v34;
    if (v17[v33 + 8])
      y = 0.0;
    else
      y = *(double *)&v17[v33];
    v35 = v14[11];
    v36 = &v17[v14[10]];
    if (v36[8])
      width = 0.0;
    else
      width = *(double *)v36;
    if (v17[v35 + 8])
      height = 0.0;
    else
      height = *(double *)&v17[v35];
LABEL_21:
    v37 = (double *)&v19[OBJC_IVAR____TtC21DocumentUnderstanding13DUDisplayInfo_frameInWindow];
    swift_beginAccess();
    *v37 = x;
    v37[1] = y;
    v38 = v55;
    v37[2] = width;
    v37[3] = height;
    v39 = *((_QWORD *)v17 + 2);
    v40 = *((_QWORD *)v17 + 3);
    outlined copy of Data._Representation(v39, v40);
    static String.Encoding.utf8.getter();
    v41 = String.init(data:encoding:)();
    v43 = v42;
    outlined consume of Data._Representation(v39, v40);
    if (v43)
    {
      v44 = HIBYTE(v43) & 0xF;
      if ((v43 & 0x2000000000000000) == 0)
        v44 = v41 & 0xFFFFFFFFFFFFLL;
      if (v44)
      {
        v45 = (NSString *)MEMORY[0x22E2AF8EC](v41, v43);
        swift_bridgeObjectRelease();
        v46 = CGPointFromString(v45);
        v47 = v46.x;
        v48 = v46.y;

LABEL_33:
        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v38, a2);
        v51 = OBJC_IVAR____TtC21DocumentUnderstanding13DUDisplayInfo_absoluteOriginOnScreen;
        v52 = (double *)&v19[OBJC_IVAR____TtC21DocumentUnderstanding13DUDisplayInfo_absoluteOriginOnScreen];
        swift_beginAccess();
        *v52 = v47;
        *(double *)&v19[v51 + 8] = v48;
        LOBYTE(v51) = v17[32];
        outlined destroy of DocumentUnderstanding_ClientInterface_DisplayInfo((uint64_t)v17);
        v53 = &v19[OBJC_IVAR____TtC21DocumentUnderstanding13DUDisplayInfo_isOnScreen];
        swift_beginAccess();
        *v53 = v51;

        return v19;
      }
      swift_bridgeObjectRelease();
    }
    v49 = v14[13];
    v50 = &v17[v14[12]];
    if (v50[8])
      v47 = 0.0;
    else
      v47 = *(double *)v50;
    if (v17[v49 + 8])
      v48 = 0.0;
    else
      v48 = *(double *)&v17[v49];
    goto LABEL_33;
  }
  v21(v10, 1, 1, v14);

  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, a2);
  outlined destroy of DocumentUnderstanding_ClientInterface_DisplayInfo?((uint64_t)v10);
  return 0;
}

uint64_t outlined destroy of DocumentUnderstanding_ClientInterface_DisplayInfo?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DisplayInfo?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of DocumentUnderstanding_ClientInterface_DisplayInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of DocumentUnderstanding_ClientInterface_DisplayInfo(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t DUDisplayInfo.protoRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double (*v15)(void);
  NSString *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t (*v20)(char *, uint64_t);
  uint64_t v21;
  _QWORD *v22;
  uint64_t (*v23)(void);
  NSString *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  double v29;
  double *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  double v40;
  double *v41;
  uint64_t result;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  double *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  double *v51;
  _QWORD *v52;
  CGPoint v53;
  CGRect v54;

  v3 = type metadata accessor for String.Encoding();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)a1 = xmmword_2284C0CE0;
  *(_OWORD *)(a1 + 16) = xmmword_2284C0CE0;
  *(_BYTE *)(a1 + 32) = 0;
  v7 = (int *)type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0);
  v8 = UnknownStorage.init()();
  v9 = a1 + v7[8];
  *(_QWORD *)v9 = 0;
  v46 = (double *)v9;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = a1 + v7[9];
  *(_QWORD *)v10 = 0;
  v48 = (_QWORD *)v10;
  *(_BYTE *)(v10 + 8) = 1;
  v11 = a1 + v7[10];
  *(_QWORD *)v11 = 0;
  v49 = (_QWORD *)v11;
  *(_BYTE *)(v11 + 8) = 1;
  v12 = a1 + v7[11];
  *(_QWORD *)v12 = 0;
  v50 = (_QWORD *)v12;
  *(_BYTE *)(v12 + 8) = 1;
  v13 = a1 + v7[12];
  *(_QWORD *)v13 = 0;
  v51 = (double *)v13;
  *(_BYTE *)(v13 + 8) = 1;
  v14 = a1 + v7[13];
  *(_QWORD *)v14 = 0;
  v52 = (_QWORD *)v14;
  *(_BYTE *)(v14 + 8) = 1;
  v15 = *(double (**)(void))((*MEMORY[0x24BEE4EA0] & *v1) + 0x68);
  v54.origin.x = ((double (*)(uint64_t))v15)(v8);
  v16 = NSStringFromCGRect(v54);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  static String.Encoding.utf8.getter();
  v17 = String.data(using:allowLossyConversion:)();
  v19 = v18;
  swift_bridgeObjectRelease();
  v20 = *(uint64_t (**)(char *, uint64_t))(v4 + 8);
  v47 = v3;
  v21 = v20(v6, v3);
  if (v19 >> 60 != 15)
  {
    v21 = outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
    *(_QWORD *)a1 = v17;
    *(_QWORD *)(a1 + 8) = v19;
  }
  v22 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v23 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v1) + 0x80);
  v53.x = ((double (*)(uint64_t))v23)(v21);
  v24 = NSStringFromCGPoint(v53);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  static String.Encoding.utf8.getter();
  v25 = String.data(using:allowLossyConversion:)();
  v27 = v26;
  swift_bridgeObjectRelease();
  v28 = v20(v6, v47);
  if (v27 >> 60 != 15)
  {
    v28 = outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
    *(_QWORD *)(a1 + 16) = v25;
    *(_QWORD *)(a1 + 24) = v27;
  }
  *(_BYTE *)(a1 + 32) = (*(uint64_t (**)(uint64_t))((*v22 & *v1) + 0x98))(v28) & 1;
  v29 = v15();
  v30 = v46;
  *v46 = v29;
  *((_BYTE *)v30 + 8) = 0;
  v31 = ((uint64_t (*)(void))v15)();
  v32 = v48;
  *v48 = v33;
  *((_BYTE *)v32 + 8) = 0;
  v34 = ((uint64_t (*)(uint64_t))v15)(v31);
  v35 = v49;
  *v49 = v36;
  *((_BYTE *)v35 + 8) = 0;
  v37 = ((uint64_t (*)(uint64_t))v15)(v34);
  v38 = v50;
  *v50 = v39;
  *((_BYTE *)v38 + 8) = 0;
  v40 = ((double (*)(uint64_t))v23)(v37);
  v41 = v51;
  *v51 = v40;
  *((_BYTE *)v41 + 8) = 0;
  result = v23();
  v43 = v52;
  *v52 = v44;
  *((_BYTE *)v43 + 8) = 0;
  return result;
}

uint64_t DUDisplayInfo.copy(with:)@<X0>(char **a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t result;
  uint64_t v9;

  v3 = type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0xB8))(v4);
  v7 = specialized DUDisplayInfo.__allocating_init<A>(proto:)((uint64_t)v6);
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DUDisplayInfo?);
  a1[3] = (char *)result;
  *a1 = v7;
  return result;
}

Swift::Void __swiftcall DUDisplayInfo.encode(with:)(NSCoder with)
{
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;

  type metadata accessor for DUDisplayInfo();
  lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DUDisplayInfo and conformance DUDisplayInfo, v2, (uint64_t (*)(uint64_t))type metadata accessor for DUDisplayInfo, (uint64_t)&protocol conformance descriptor for DUDisplayInfo);
  v3 = (void *)DUProtobufEncodableProtocol.serializedData()();
  if (v3)
  {
    v4 = v3;
    v5 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000016, 0x80000002284DABA0);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v4, v5);

  }
}

uint64_t type metadata accessor for DUDisplayInfo()
{
  return objc_opt_self();
}

uint64_t DUDisplayInfo.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return DUDisplayInfo.init(coder:)(a1);
}

uint64_t DUDisplayInfo.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  swift_getObjectType();
  type metadata accessor for NSData();
  v3 = v1;
  if (!NSCoder.decodeObject<A>(of:forKey:)())
  {

    goto LABEL_5;
  }
  swift_getObjectType();

  lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DUDisplayInfo and conformance DUDisplayInfo, v4, (uint64_t (*)(uint64_t))type metadata accessor for DUDisplayInfo, (uint64_t)&protocol conformance descriptor for DUDisplayInfo);
  DUProtobufEncodableProtocol.init(serializedData:)();

  v5 = v7;
  if (!v7)
  {
LABEL_5:
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v5;
}

id DUDisplayInfo.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id DUDisplayInfo.init()()
{
  _BYTE *v0;
  _OWORD *v1;
  _QWORD *v2;
  objc_super v4;

  v1 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding13DUDisplayInfo_frameInWindow];
  *v1 = 0u;
  v1[1] = 0u;
  v2 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding13DUDisplayInfo_absoluteOriginOnScreen];
  *v2 = 0;
  v2[1] = 0;
  v0[OBJC_IVAR____TtC21DocumentUnderstanding13DUDisplayInfo_isOnScreen] = 0;
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for DUDisplayInfo();
  return objc_msgSendSuper2(&v4, sel_init);
}

id DUDisplayInfo.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DUDisplayInfo();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t associated type witness table accessor for DUProtobufEncodableProtocol.ProtobufType : Message in DUDisplayInfo()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for DUProtobufEncodableProtocol.protoRepresentation.getter in conformance DUDisplayInfo()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **v0) + 0xB8))();
}

uint64_t protocol witness for DUProtobufEncodableProtocol.init(proto:) in conformance DUDisplayInfo@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 176);
  v6 = type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0);
  v7 = lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_DisplayInfo and conformance DocumentUnderstanding_ClientInterface_DisplayInfo, 255, type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_DisplayInfo);
  result = v5(a1, v6, v7);
  *a2 = result;
  return result;
}

uint64_t sub_22831DC58()
{
  return lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_DisplayInfo and conformance DocumentUnderstanding_ClientInterface_DisplayInfo, 255, type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_DisplayInfo);
}

uint64_t outlined init with copy of DocumentUnderstanding_ClientInterface_DisplayInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id SpotlightiOSFileOutputSink.coreSpotlightOutputSink.getter()
{
  uint64_t v0;

  return objc_retain(*(id *)(v0
                           + OBJC_IVAR____TtC21DocumentUnderstanding26SpotlightiOSFileOutputSink_coreSpotlightOutputSink));
}

uint64_t SpotlightiOSFileOutputSink.writeTopicsAndClassesToSpotlight(searchableItem:topics:documentClasses:analysisVersion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v6 = type metadata accessor for Logger();
  v5[7] = v6;
  v5[8] = *(_QWORD *)(v6 - 8);
  v5[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t SpotlightiOSFileOutputSink.writeTopicsAndClassesToSpotlight(searchableItem:topics:documentClasses:analysisVersion:)()
{
  _QWORD *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  _QWORD *v9;
  int *v11;

  Logger.init()();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_2282CC000, v1, v2, "SpotlightiOSFileOutputSink: Beginning writeTopicsAndClassesToSpotlight", v3, 2u);
    MEMORY[0x22E2B117C](v3, -1, -1);
  }
  v5 = v0[8];
  v4 = v0[9];
  v7 = v0[6];
  v6 = v0[7];

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v8 = *(int **)((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v7
                                                     + OBJC_IVAR____TtC21DocumentUnderstanding26SpotlightiOSFileOutputSink_coreSpotlightOutputSink))
               + 0x50);
  v11 = (int *)((char *)v8 + *v8);
  v9 = (_QWORD *)swift_task_alloc();
  v0[10] = v9;
  *v9 = v0;
  v9[1] = SpotlightiOSFileOutputSink.writeTopicsAndClassesToSpotlight(searchableItem:topics:documentClasses:analysisVersion:);
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))v11)(v0[2], v0[3], v0[4], v0[5]);
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

id SpotlightiOSFileOutputSink.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id SpotlightiOSFileOutputSink.init()()
{
  char *v0;
  uint64_t v1;
  id v2;
  char *v3;
  objc_super v5;

  v1 = OBJC_IVAR____TtC21DocumentUnderstanding26SpotlightiOSFileOutputSink_coreSpotlightOutputSink;
  v2 = objc_allocWithZone((Class)type metadata accessor for CoreSpotlightOutputSink());
  v3 = v0;
  *(_QWORD *)&v0[v1] = objc_msgSend(v2, sel_init);

  v5.receiver = v3;
  v5.super_class = (Class)type metadata accessor for SpotlightiOSFileOutputSink();
  return objc_msgSendSuper2(&v5, sel_init);
}

id SpotlightiOSFileOutputSink.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SpotlightiOSFileOutputSink();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for SpotlightiOSFileOutputSink()
{
  return objc_opt_self();
}

uint64_t DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult.topicIdentifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult.topicIdentifier.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult.topicIdentifier.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

double DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult.topicConfidence.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = v0
     + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult() + 24);
  result = *(double *)v1;
  if (*(_BYTE *)(v1 + 8))
    return 0.0;
  return result;
}

uint64_t type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult()
{
  uint64_t result;

  result = type metadata singleton initialization cache for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult;
  if (!type metadata singleton initialization cache for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult.topicConfidence.setter(double a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult();
  v4 = v1 + *(int *)(result + 24);
  *(double *)v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult.topicConfidence.modify(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult() + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return DocumentUnderstanding_ClientInterface_StructuredEntityLabel.confidenceScore.modify;
}

BOOL DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult.hasTopicConfidence.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0
                   + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult()
                            + 24)
                   + 8) & 1) == 0;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult.clearTopicConfidence()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0
     + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult() + 24);
  *(_QWORD *)v1 = 0;
  *(_BYTE *)(v1 + 8) = 1;
}

uint64_t DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1
     + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult() + 20);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1
     + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult() + 20);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult.unknownFields.modify())(_QWORD)
{
  type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult();
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char *v4;

  *a1 = 0;
  a1[1] = 0xE000000000000000;
  v2 = type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult();
  result = UnknownStorage.init()();
  v4 = (char *)a1 + *(int *)(v2 + 24);
  *(_QWORD *)v4 = 0;
  v4[8] = 1;
  return result;
}

void *DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult.protoMessageName.unsafeMutableAddressor()
{
  return &static DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult.protoMessageName;
}

unint64_t static DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult.protoMessageName.getter()
{
  return 0xD000000000000048;
}

uint64_t DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult._protobuf_nameMap);
}

uint64_t static DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v2 = type metadata accessor for _NameMap();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult._protobuf_nameMap);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 2)
    {
      type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult();
      dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
    }
    else if (result == 1)
    {
      dispatch thunk of Decoder.decodeSingularStringField(value:)();
    }
    v0 = 0;
  }
  return result;
}

uint64_t DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = v0[1];
  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = *v0 & 0xFFFFFFFFFFFFLL;
  if (!v3 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    result = closure #1 in DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult.traverse<A>(visitor:)((uint64_t)v0);
    if (!v1)
    {
      type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult();
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #1 in DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult();
  if ((*(_BYTE *)(a1 + *(int *)(result + 24) + 8) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  return result;
}

Swift::Int DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult.hashValue.getter()
{
  Hasher.init(_seed:)();
  type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult();
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult and conformance DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Message.init() in conformance DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  char *v5;

  *a2 = 0;
  a2[1] = 0xE000000000000000;
  result = UnknownStorage.init()();
  v5 = (char *)a2 + *(int *)(a1 + 24);
  *(_QWORD *)v5 = 0;
  v5[8] = 1;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult()
{
  return 0xD000000000000048;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult()
{
  return DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult()
{
  return DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult and conformance DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v2 = type metadata accessor for _NameMap();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult._protobuf_nameMap);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult and conformance DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult and conformance DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult);
  return Message.hash(into:)();
}

uint64_t specialized static DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult.== infix(_:_:)(_QWORD *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  BOOL v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  char v17;
  double *v18;
  int v19;
  char *v20;
  void (*v21)(char *, char *, uint64_t);
  void (*v22)(char *, uint64_t);
  uint64_t v24;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v24 - v9;
  v11 = *a1 == *(_QWORD *)a2 && a1[1] == *((_QWORD *)a2 + 1);
  if (v11 || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v13 = type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult();
    v14 = v13;
    v15 = *(int *)(v13 + 24);
    v16 = (double *)((char *)a1 + v15);
    v17 = *((_BYTE *)a1 + v15 + 8);
    v18 = (double *)&a2[v15];
    v19 = a2[v15 + 8];
    if ((v17 & 1) != 0)
    {
      if (!v19)
      {
LABEL_8:
        v12 = 0;
        return v12 & 1;
      }
    }
    else
    {
      if (*v16 != *v18)
        LOBYTE(v19) = 1;
      if ((v19 & 1) != 0)
        goto LABEL_8;
    }
    v20 = (char *)a1 + *(int *)(v13 + 20);
    v21 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v21(v10, v20, v4);
    v21(v8, &a2[*(int *)(v14 + 20)], v4);
    lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v12 = dispatch thunk of static Equatable.== infix(_:_:)();
    v22 = *(void (**)(char *, uint64_t))(v5 + 8);
    v22(v8, v4);
    v22(v10, v4);
  }
  return v12 & 1;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult and conformance DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult);
}

uint64_t base witness table accessor for Message in DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult and conformance DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult);
}

uint64_t base witness table accessor for Hashable in DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult and conformance DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult);
}

uint64_t base witness table accessor for Equatable in DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult and conformance DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult);
}

uint64_t sub_22831EB9C@<X0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  double v6;

  result = type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult();
  v5 = a1 + *(int *)(result + 24);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *a2 = v6;
  return result;
}

uint64_t sub_22831EBE4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a1;
  result = type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult();
  v5 = a2 + *(int *)(result + 24);
  *(_QWORD *)v5 = v3;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 24);
    v14 = (char *)v4 + v13;
    v15 = (char *)a2 + v13;
    *(_QWORD *)v14 = *(_QWORD *)v15;
    v14[8] = v15[8];
  }
  return v4;
}

uint64_t destroy for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  return a1;
}

_QWORD *assignWithCopy for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char v13;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = v12[8];
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v11[8] = v13;
  return a1;
}

_OWORD *initializeWithTake for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v11[8] = v12[8];
  return a1;
}

_QWORD *assignWithTake for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  v12[8] = v13[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_22831EF8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_22831F014(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *SQLiteDatabase.internalSQLiteDB.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding14SQLiteDatabase_internalSQLiteDB);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void SQLiteDatabase.internalSQLiteDB.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;

  v3 = (void **)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding14SQLiteDatabase_internalSQLiteDB);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*SQLiteDatabase.internalSQLiteDB.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryConfidence.modify;
}

uint64_t SQLiteDatabase.dbPath.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding14SQLiteDatabase_dbPath);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t key path setter for SQLiteDatabase.temporaryURL : SQLiteDatabase(uint64_t a1, _QWORD **a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of URL?(a1, (uint64_t)v6);
  return (*(uint64_t (**)(char *))((*MEMORY[0x24BEE4EA0] & **a2) + 0x98))(v6);
}

uint64_t SQLiteDatabase.temporaryURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC21DocumentUnderstanding14SQLiteDatabase_temporaryURL;
  swift_beginAccess();
  return outlined init with copy of URL?(v3, a1);
}

uint64_t outlined init with copy of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t SQLiteDatabase.temporaryURL.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC21DocumentUnderstanding14SQLiteDatabase_temporaryURL;
  swift_beginAccess();
  outlined assign with take of URL?(a1, v3);
  return swift_endAccess();
}

uint64_t outlined assign with take of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*SQLiteDatabase.temporaryURL.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t SQLiteDatabase.isFrozen.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding14SQLiteDatabase_isFrozen);
}

uint64_t SQLiteDatabase.migrationsList.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t SQLiteDatabase.migrationsList.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding14SQLiteDatabase_migrationsList);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*SQLiteDatabase.migrationsList.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

id SQLiteDatabase.__allocating_init(dbPath:migrationsList:isFrozen:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  objc_class *v4;
  id v9;

  v9 = objc_allocWithZone(v4);
  return SQLiteDatabase.init(dbPath:migrationsList:isFrozen:)(a1, a2, a3, a4);
}

id SQLiteDatabase.init(dbPath:migrationsList:isFrozen:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  objc_class *v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  objc_super v22;

  v9 = type metadata accessor for Logger();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v4[OBJC_IVAR____TtC21DocumentUnderstanding14SQLiteDatabase_internalSQLiteDB] = 0;
  v13 = &v4[OBJC_IVAR____TtC21DocumentUnderstanding14SQLiteDatabase_temporaryURL];
  v14 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  v15 = &v4[OBJC_IVAR____TtC21DocumentUnderstanding14SQLiteDatabase_dbPath];
  *v15 = a1;
  v15[1] = a2;
  *(_QWORD *)&v4[OBJC_IVAR____TtC21DocumentUnderstanding14SQLiteDatabase_migrationsList] = a3;
  v4[OBJC_IVAR____TtC21DocumentUnderstanding14SQLiteDatabase_isFrozen] = a4;
  v16 = (objc_class *)type metadata accessor for SQLiteDatabase();
  v22.receiver = v4;
  v22.super_class = v16;
  v17 = objc_msgSendSuper2(&v22, sel_init);
  if ((SQLiteDatabase.initDatabase()() & 1) != 0)
  {

  }
  else
  {
    Logger.init()();
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v20 = 0;
      _os_log_impl(&dword_2282CC000, v18, v19, "SQLiteDatabase: Unable to initialize database", v20, 2u);
      MEMORY[0x22E2B117C](v20, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  return v17;
}

uint64_t type metadata accessor for SQLiteDatabase()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SQLiteDatabase;
  if (!type metadata singleton initialization cache for SQLiteDatabase)
    return swift_getSingletonMetadata();
  return result;
}

id SQLiteDatabase.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  SQLiteDatabase.deleteTemporary()();
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SQLiteDatabase();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t SQLiteDatabase.initDatabase()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t (*v37)(uint64_t);
  _QWORD *v38;
  void *v39;
  _QWORD *v41;
  NSString *v42;
  void (*v43)(char *, uint64_t);
  void *v44;
  void (*v45)(char *, uint64_t, uint64_t, void *);
  void (*v46)(_QWORD);
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t);
  char *v53;
  char *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  Swift::String v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  void *v63;
  void *v64;
  Swift::String v65;
  char *v66;
  void (*v67)(char *, char *, void *);
  char *v68;
  char *v69;
  NSObject *v70;
  os_log_type_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  unint64_t v75;
  void (*v76)(char *, void *);
  uint64_t v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t);
  id v83;
  char *v84;
  void *v85;
  void *v86;
  NSURL *v87;
  void *v88;
  void *v89;
  unsigned int v90;
  id v91;
  char *v92;
  char *v93;
  void (*v94)(char *, char *, void *);
  char *v95;
  NSObject *v96;
  os_log_type_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  void *v103;
  id v104;
  void *v105;
  char *v106;
  id v107;
  id v108;
  NSObject *v109;
  int v110;
  uint8_t *v111;
  void *v112;
  id v113;
  uint64_t v114;
  unint64_t v115;
  char *v116;
  _QWORD *v117;
  char *v118;
  uint64_t v119;
  char *v120;
  void *v121;
  void *v122;
  id v123;
  void *v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  id v128;
  void *v129;
  unsigned __int8 v130;
  void *v131;
  id v132;
  unsigned __int8 v133;
  void *v134;
  id v135;
  unsigned int v136;
  id v137;
  void *v138;
  id v139;
  uint64_t v140;
  void *v141;
  id v142;
  void *v143;
  void (*v144)(char *, uint64_t, uint64_t, void *);
  unsigned int v145;
  void (*v146)(char *, _QWORD, uint64_t);
  char *v147;
  char *v148;
  _QWORD *v149;
  char *v150;
  char *v151;
  int v152;
  uint64_t (*v153)(uint64_t);
  char *v154;
  char *v155;
  char *v156;
  char *v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  uint64_t v166;
  char *v167;
  char *v168;
  void (*v169)(char *, char *, void *);
  void *v170;
  void (*v171)(char *, uint64_t);
  uint64_t v172;
  id v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;

  v175 = *MEMORY[0x24BDAC8D0];
  v1 = type metadata accessor for Logger();
  v162 = *(_QWORD *)(v1 - 8);
  v163 = v1;
  v2 = MEMORY[0x24BDAC7A8](v1);
  v158 = (char *)&v144 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v157 = (char *)&v144 - v5;
  MEMORY[0x24BDAC7A8](v4);
  v167 = (char *)&v144 - v6;
  v7 = type metadata accessor for UUID();
  v160 = *(_QWORD *)(v7 - 8);
  v161 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v159 = (char *)&v144 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v166 = type metadata accessor for URL.DirectoryHint();
  v169 = *(void (**)(char *, char *, void *))(v166 - 8);
  MEMORY[0x24BDAC7A8](v166);
  v165 = (char *)&v144 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v164 = (char *)&v144 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v168 = (char *)&v144 - v13;
  v14 = type metadata accessor for URL();
  v15 = *(void (**)(char *, uint64_t))(v14 - 8);
  v170 = (void *)v14;
  v171 = v15;
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v144 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v16);
  v21 = (char *)&v144 - v20;
  v22 = MEMORY[0x24BDAC7A8](v19);
  v24 = (char *)&v144 - v23;
  v25 = MEMORY[0x24BDAC7A8](v22);
  v27 = (char *)&v144 - v26;
  v28 = MEMORY[0x24BDAC7A8](v25);
  v30 = (char *)&v144 - v29;
  v31 = MEMORY[0x24BDAC7A8](v28);
  v33 = (char *)&v144 - v32;
  v34 = MEMORY[0x24BDAC7A8](v31);
  v36 = (char *)&v144 - v35;
  v37 = *(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v0) + 0x78);
  v38 = v0;
  v39 = (void *)v37(v34);

  if (v39)
    return 1;
  v150 = v27;
  v151 = v24;
  v147 = v21;
  v148 = v18;
  v154 = v30;
  v155 = v33;
  v156 = v36;
  v152 = *((unsigned __int8 *)v38 + OBJC_IVAR____TtC21DocumentUnderstanding14SQLiteDatabase_isFrozen);
  v41 = v38;
  v153 = v37;
  if (v152 == 1)
  {
    v42 = NSTemporaryDirectory();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    v149 = v38;

    v44 = v170;
    v43 = v171;
    v45 = (void (*)(char *, uint64_t, uint64_t, void *))*((_QWORD *)v171 + 7);
    v45(v168, 1, 1, v170);
    v46 = (void (*)(_QWORD))*((_QWORD *)v169 + 13);
    v47 = v165;
    v145 = *MEMORY[0x24BDCD7A0];
    v48 = v166;
    v146 = (void (*)(char *, _QWORD, uint64_t))v46;
    v46(v165);
    URL.init(filePath:directoryHint:relativeTo:)();
    v49 = (uint64_t)v164;
    URL.init(string:)();
    if ((*((unsigned int (**)(uint64_t, uint64_t, void *))v43 + 6))(v49, 1, v44) == 1)
    {
      (*((void (**)(char *, void *))v171 + 1))(v156, v44);
      outlined destroy of URL?(v49);
      return 0;
    }
    v144 = v45;
    v52 = v171;
    v53 = v155;
    (*((void (**)(char *, uint64_t, void *))v171 + 4))(v155, v49, v44);
    v54 = v159;
    UUID.init()();
    v55 = (void *)UUID.uuidString.getter();
    v57 = v56;
    (*(void (**)(char *, uint64_t))(v160 + 8))(v54, v161);
    v173 = v55;
    v174 = v57;
    swift_bridgeObjectRetain();
    v58._countAndFlagsBits = 95;
    v58._object = (void *)0xE100000000000000;
    String.append(_:)(v58);
    swift_bridgeObjectRelease();
    v59 = v48;
    v61 = v173;
    v60 = v174;
    v62 = URL.lastPathComponent.getter();
    v64 = v63;
    v173 = v61;
    v174 = v60;
    swift_bridgeObjectRetain();
    v65._countAndFlagsBits = v62;
    v65._object = v64;
    String.append(_:)(v65);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v146(v47, v145, v59);
    lazy protocol witness table accessor for type String and conformance String();
    v66 = v154;
    URL.appending<A>(path:directoryHint:)();
    (*((void (**)(char *, uint64_t))v169 + 1))(v47, v59);
    swift_bridgeObjectRelease();
    Logger.init()();
    v67 = (void (*)(char *, char *, void *))*((_QWORD *)v52 + 2);
    v68 = v150;
    v67(v150, v53, v44);
    v69 = v151;
    v169 = v67;
    v67(v151, v66, v44);
    v70 = Logger.logObject.getter();
    v71 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v70, v71))
    {
      v72 = swift_slowAlloc();
      v73 = (void *)swift_slowAlloc();
      v173 = v73;
      *(_DWORD *)v72 = 136315394;
      v74 = URL.path.getter();
      v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v75, (uint64_t *)&v173);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v76 = (void (*)(char *, void *))*((_QWORD *)v171 + 1);
      v76(v68, v170);
      *(_WORD *)(v72 + 12) = 2080;
      v77 = URL.path.getter();
      v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v78, (uint64_t *)&v173);
      v79 = v170;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v76(v69, v79);
      _os_log_impl(&dword_2282CC000, v70, v71, "(SQLiteDatabase) Copying file from %s to %s", (uint8_t *)v72, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x22E2B117C](v73, -1, -1);
      v80 = v72;
      v66 = v154;
      MEMORY[0x22E2B117C](v80, -1, -1);
    }
    else
    {
      v79 = v44;
      v76 = (void (*)(char *, void *))*((_QWORD *)v171 + 1);
      v76(v68, v79);
      v76(v69, v79);
    }

    v81 = v163;
    v82 = *(void (**)(char *, uint64_t))(v162 + 8);
    v82(v167, v163);
    v83 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    v84 = v155;
    URL._bridgeToObjectiveC()((NSURL *)&v176);
    v86 = v85;
    URL._bridgeToObjectiveC()(v87);
    v89 = v88;
    v173 = 0;
    v90 = objc_msgSend(v83, sel_copyItemAtURL_toURL_error_, v86, v88, &v173);

    if (!v90)
    {
      v104 = v173;
      v105 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
      v106 = v158;
      Logger.init()();
      v107 = v105;
      v108 = v105;
      v109 = Logger.logObject.getter();
      v110 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v109, (os_log_type_t)v110))
      {
        v111 = (uint8_t *)swift_slowAlloc();
        v112 = (void *)swift_slowAlloc();
        v173 = v112;
        v171 = v82;
        v172 = (uint64_t)v105;
        *(_DWORD *)v111 = 136315138;
        v113 = v105;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        v114 = String.init<A>(describing:)();
        v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v114, v115, (uint64_t *)&v173);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_2282CC000, v109, (os_log_type_t)v110, "(SQLiteDatabase) Could not copy original database to writable DB location with error: %s", v111, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x22E2B117C](v112, -1, -1);
        MEMORY[0x22E2B117C](v111, -1, -1);

        v171(v158, v163);
        v76(v154, v79);
        v116 = v155;
      }
      else
      {

        v82(v106, v81);
        v76(v66, v79);
        v116 = v84;
      }
      v76(v116, v79);
      v76(v156, v79);
      return 0;
    }
    v91 = v173;
    v92 = v157;
    Logger.init()();
    v93 = v147;
    v94 = v169;
    v169(v147, v84, v79);
    v95 = v148;
    v94(v148, v66, v79);
    v96 = Logger.logObject.getter();
    v97 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v96, v97))
    {
      v98 = swift_slowAlloc();
      v170 = (void *)swift_slowAlloc();
      v173 = v170;
      *(_DWORD *)v98 = 136315394;
      v171 = v82;
      v99 = URL.path.getter();
      v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v99, v100, (uint64_t *)&v173);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v76(v93, v79);
      *(_WORD *)(v98 + 12) = 2080;
      v101 = URL.path.getter();
      v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v101, v102, (uint64_t *)&v173);
      v84 = v155;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v76(v95, v79);
      _os_log_impl(&dword_2282CC000, v96, v97, "(SQLiteDatabase) Copied file from %s to %s", (uint8_t *)v98, 0x16u);
      v103 = v170;
      swift_arrayDestroy();
      MEMORY[0x22E2B117C](v103, -1, -1);
      MEMORY[0x22E2B117C](v98, -1, -1);

      v171(v157, v163);
    }
    else
    {
      v76(v93, v79);
      v76(v95, v79);

      v82(v92, v163);
    }
    v117 = (_QWORD *)MEMORY[0x24BEE4EA0];
    v118 = v154;
    v51 = URL.path.getter();
    v50 = v119;
    v120 = v168;
    v169(v168, v118, v79);
    v144(v120, 0, 1, v79);
    v41 = v149;
    (*(void (**)(char *))((*v117 & *v149) + 0x98))(v120);
    v76(v118, v79);
    v76(v84, v79);
    v76(v156, v79);
  }
  else
  {
    v51 = *(_QWORD *)((char *)v38 + OBJC_IVAR____TtC21DocumentUnderstanding14SQLiteDatabase_dbPath);
    v50 = *(_QWORD *)((char *)v38 + OBJC_IVAR____TtC21DocumentUnderstanding14SQLiteDatabase_dbPath + 8);
    swift_bridgeObjectRetain();
  }
  v121 = (void *)objc_opt_self();
  v122 = (void *)MEMORY[0x22E2AF8EC](v51, v50);
  v123 = objc_msgSend(v121, sel_corruptionMarkerPathForPath_, v122);

  v124 = v123;
  v125 = v123;
  if (!v123)
  {
    v126 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v125 = (void *)MEMORY[0x22E2AF8EC](v126);
    swift_bridgeObjectRelease();
    v127 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v124 = (void *)MEMORY[0x22E2AF8EC](v127);
    swift_bridgeObjectRelease();
  }
  v128 = v123;
  v129 = (void *)MEMORY[0x22E2AF8EC](v51, v50);
  v130 = objc_msgSend(v121, sel_isInMemoryPath_, v129);

  if ((v130 & 1) != 0)
  {

  }
  else
  {
    v131 = (void *)objc_opt_self();
    v132 = objc_msgSend(v131, sel_defaultManager);
    v133 = objc_msgSend(v132, sel_fileExistsAtPath_, v125);

    if ((v133 & 1) != 0)
    {
      v134 = (void *)MEMORY[0x22E2AF8EC](v51, v50);
      objc_msgSend(v121, sel_truncateDatabaseAtPath_, v134);

      v135 = objc_msgSend(v131, sel_defaultManager);
      v173 = 0;
      v136 = objc_msgSend(v135, sel_removeItemAtPath_error_, v124, &v173);

      if (!v136)
      {
        v142 = v173;
        swift_bridgeObjectRelease();
        v143 = (void *)_convertNSErrorToError(_:)();

        swift_willThrow();
        SQLiteDatabase.deleteTemporary()();

        return 0;
      }
      v137 = v173;
    }
    else
    {

    }
  }
  v138 = (void *)MEMORY[0x22E2AF8EC](v51, v50);
  swift_bridgeObjectRelease();
  v139 = objc_msgSend(v121, sel_initializeDatabase_withContentProtection_newDatabaseCreated_errorHandler_, v138, 0, 0, 0);

  v140 = (*(uint64_t (**)(id))((*MEMORY[0x24BEE4EA0] & *v41) + 0x80))(v139);
  v141 = (void *)v153(v140);

  if (!v141)
  {
    SQLiteDatabase.deleteTemporary()();
    return 0;
  }
  SQLiteDatabase.configureDatabase()();
  if ((v152 & 1) != 0)
    return 1;
  SQLiteDatabase.runMigrations()();
  return 1;
}

uint64_t SQLiteDatabase.deleteTemporary()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  void *v17;
  id v18;
  uint64_t v19;
  void *v20;
  unsigned int v21;
  id v22;
  NSURL *v23;
  void *v24;
  void *v25;
  unsigned int v26;
  uint64_t (*v27)(_BYTE *, uint64_t);
  id v28;
  id v29;
  void *v30;
  id v31;
  id v32;
  NSObject *v33;
  os_log_type_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void (*v39)(_BYTE *, uint64_t);
  id v40;
  uint64_t v41;
  unint64_t v42;
  void *v43;
  _BYTE v44[4];
  int v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50[2];

  v50[1] = *(id *)MEMORY[0x24BDAC8D0];
  v1 = type metadata accessor for Logger();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = &v44[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = &v44[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for URL();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = &v44[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = &v44[-v14];
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v0) + 0x90))(v13);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of URL?((uint64_t)v7);
  v47 = v2;
  v48 = v1;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 32))(v15, v7, v8);
  v17 = (void *)objc_opt_self();
  v18 = objc_msgSend(v17, sel_defaultManager);
  v19 = URL.path.getter();
  v20 = (void *)MEMORY[0x22E2AF8EC](v19);
  swift_bridgeObjectRelease();
  v21 = objc_msgSend(v18, sel_fileExistsAtPath_, v20);

  if (!v21)
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v9 + 8))(v15, v8);
  v22 = objc_msgSend(v17, sel_defaultManager);
  URL._bridgeToObjectiveC()(v23);
  v25 = v24;
  v50[0] = 0;
  v26 = objc_msgSend(v22, sel_removeItemAtURL_error_, v24, v50);

  if (v26)
  {
    v27 = *(uint64_t (**)(_BYTE *, uint64_t))(v9 + 8);
    v28 = v50[0];
    return v27(v15, v8);
  }
  else
  {
    v29 = v50[0];
    v30 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    Logger.init()();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 16))(v12, v15, v8);
    v31 = v30;
    v32 = v30;
    v33 = Logger.logObject.getter();
    v34 = static os_log_type_t.error.getter();
    v35 = v34;
    if (os_log_type_enabled(v33, v34))
    {
      v36 = swift_slowAlloc();
      v46 = (void *)swift_slowAlloc();
      v50[0] = v46;
      *(_DWORD *)v36 = 136315394;
      v45 = v35;
      v37 = URL.path.getter();
      v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, (uint64_t *)v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v39 = *(void (**)(_BYTE *, uint64_t))(v9 + 8);
      v39(v12, v8);
      *(_WORD *)(v36 + 12) = 2080;
      v49 = (uint64_t)v30;
      v40 = v30;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v41 = String.init<A>(describing:)();
      v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, (uint64_t *)v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_2282CC000, v33, (os_log_type_t)v45, "(SQLiteDatabase) Unable to remove file at %s.  Error: %s", (uint8_t *)v36, 0x16u);
      v43 = v46;
      swift_arrayDestroy();
      MEMORY[0x22E2B117C](v43, -1, -1);
      MEMORY[0x22E2B117C](v36, -1, -1);

    }
    else
    {

      v39 = *(void (**)(_BYTE *, uint64_t))(v9 + 8);
      v39(v12, v8);
    }

    (*(void (**)(_BYTE *, uint64_t))(v47 + 8))(v4, v48);
    return ((uint64_t (*)(_BYTE *, uint64_t))v39)(v15, v8);
  }
}

sqlite3 *SQLiteDatabase.configureDatabase()()
{
  _QWORD *v0;
  uint64_t inited;
  uint64_t (*v2)(void);
  uint64_t v3;
  void *v4;
  Class isa;
  uint64_t v6;
  void *v7;
  sqlite3 *v8;
  id v9;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2284C1EE0;
  *(_QWORD *)(inited + 32) = 0xD000000000000019;
  *(_QWORD *)(inited + 40) = 0x80000002284D9600;
  v2 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x78);
  v3 = v2();
  if (v3)
  {
    v4 = (void *)v3;
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v4, sel_prepAndRunNonDataQueries_onError_, isa, 0);
    swift_release();

  }
  else
  {
    v6 = swift_release();
  }
  v7 = (void *)((uint64_t (*)(uint64_t))v2)(v6);
  v8 = (sqlite3 *)objc_msgSend(v7, sel_handle);
  v9 = v7;
  return DU_UDF_prenorm_cosine_distance_create_function(v8);
}

void *SQLiteDatabase.getCurrentSchemaVersion()()
{
  _QWORD *v0;
  uint64_t (*v1)(void);
  uint64_t v2;
  void *v3;
  Class isa;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void *);
  void *v10;
  _QWORD aBlock[6];
  void *v13;

  v1 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x78);
  v2 = v1();
  if (v2)
  {
    v3 = (void *)v2;
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v3, sel_prepAndRunNonDataQueries_onError_, isa, 0);

  }
  v13 = 0;
  v5 = (void *)v1();
  if (v5)
  {
    v6 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000018, 0x80000002284DB010);
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = &v13;
    v8 = swift_allocObject();
    v9 = partial apply for closure #1 in SQLiteDatabase.getCurrentSchemaVersion();
    *(_QWORD *)(v8 + 16) = partial apply for closure #1 in SQLiteDatabase.getCurrentSchemaVersion();
    *(_QWORD *)(v8 + 24) = v7;
    aBlock[4] = thunk for @callee_guaranteed (@guaranteed _PASSqliteStatement) -> (@unowned _PASDBIterAction_)partial apply;
    aBlock[5] = v8;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed _PASSqliteStatement) -> (@unowned _PASDBIterAction_);
    aBlock[3] = &block_descriptor_40;
    v10 = _Block_copy(aBlock);
    swift_release();
    objc_msgSend(v5, sel_prepAndRunQuery_onPrep_onRow_onError_, v6, 0, v10, 0);
    _Block_release(v10);

    v5 = v13;
  }
  else
  {
    v9 = 0;
  }
  outlined consume of (@escaping @callee_guaranteed (@guaranteed _PASSqliteStatement) -> (@unowned _PASDBIterAction_))?((uint64_t)v9);
  return v5;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed _PASSqliteStatement) -> (@unowned _PASDBIterAction_)(uint64_t a1, void *a2)
{
  uint64_t (*v2)(void);
  id v3;
  char v4;

  v2 = *(uint64_t (**)(void))(a1 + 32);
  v3 = a2;
  v4 = v2();

  return v4 & 1;
}

void SQLiteDatabase.writeCurrentSchemaVersion(version:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[6];

  v3 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v1) + 0x78))();
  if (v3)
  {
    v4 = (void *)v3;
    v5 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000036, 0x80000002284DAFD0);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = a1;
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = partial apply for closure #1 in SQLiteDatabase.writeCurrentSchemaVersion(version:);
    *(_QWORD *)(v7 + 24) = v6;
    v9[4] = thunk for @callee_guaranteed (@guaranteed _PASSqliteStatement) -> ()partial apply;
    v9[5] = v7;
    v9[0] = MEMORY[0x24BDAC760];
    v9[1] = 1107296256;
    v9[2] = thunk for @escaping @callee_guaranteed (@guaranteed _PASSqliteStatement) -> ();
    v9[3] = &block_descriptor_30;
    v8 = _Block_copy(v9);
    swift_release();
    objc_msgSend(v4, sel_prepAndRunQuery_onPrep_onRow_onError_, v5, v8, 0, 0);
    _Block_release(v8);
    swift_release();

  }
}

void thunk for @escaping @callee_guaranteed (@guaranteed _PASSqliteStatement) -> ()(uint64_t a1, void *a2)
{
  void (*v2)(void);
  id v3;

  v2 = *(void (**)(void))(a1 + 32);
  v3 = a2;
  v2();

}

void SQLiteDatabase.runMigrations()()
{
  _QWORD *v0;
  int64_t v1;
  _QWORD *v2;
  uint64_t (*v3)(void);
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  Class isa;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = (int64_t)SQLiteDatabase.getCurrentSchemaVersion()();
  v2 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v3 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA8);
  v4 = *(_QWORD *)(v3() + 16);
  v5 = swift_bridgeObjectRelease();
  if (v1 >= v4)
  {
    v8 = v1;
LABEL_10:
    SQLiteDatabase.writeCurrentSchemaVersion(version:)(v8);
  }
  else
  {
    v6 = *(uint64_t (**)(uint64_t))((*v2 & *v0) + 0x78);
    v7 = 16 * v1;
    v8 = v1;
    while (1)
    {
      v13 = ((uint64_t (*)(uint64_t))v3)(v5);
      if (v1 < 0)
        break;
      if (v8 >= *(_QWORD *)(v13 + 16))
        goto LABEL_12;
      v15 = *(_QWORD *)(v13 + v7 + 32);
      v14 = *(_QWORD *)(v13 + v7 + 40);
      swift_bridgeObjectRetain();
      v16 = swift_bridgeObjectRelease();
      v17 = v6(v16);
      if (v17)
      {
        v9 = (void *)v17;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
        v10 = swift_allocObject();
        *(_OWORD *)(v10 + 16) = xmmword_2284C1EE0;
        *(_QWORD *)(v10 + 32) = v15;
        *(_QWORD *)(v10 + 40) = v14;
        swift_bridgeObjectRetain();
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v9, sel_prepAndRunNonDataQueries_onError_, isa, 0);
        swift_bridgeObjectRelease();

      }
      else
      {
        swift_bridgeObjectRelease();
      }
      ++v8;
      v12 = *(_QWORD *)(v3() + 16);
      v5 = swift_bridgeObjectRelease();
      v7 += 16;
      if (v8 >= v12)
        goto LABEL_10;
    }
    __break(1u);
LABEL_12:
    __break(1u);
  }
}

Swift::Void __swiftcall SQLiteDatabase.addMigrations(migrations:)(Swift::OpaquePointer migrations)
{
  _QWORD *v1;
  uint64_t (*v3)(_BYTE *);
  void (*v4)(_BYTE *, _QWORD);
  _BYTE v5[32];

  v3 = *(uint64_t (**)(_BYTE *))((*MEMORY[0x24BEE4EA0] & *v1) + 0xB8);
  swift_bridgeObjectRetain();
  v4 = (void (*)(_BYTE *, _QWORD))v3(v5);
  specialized Array.append<A>(contentsOf:)((uint64_t)migrations._rawValue);
  v4(v5, 0);
  SQLiteDatabase.runMigrations()();
}

void SQLiteDatabase.executeQuery(query:prep:onRow:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t aBlock;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t (*v32)();
  uint64_t v33;

  v13 = type metadata accessor for Logger();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&aBlock - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((SQLiteDatabase.initDatabase()() & 1) != 0)
  {
    v17 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v6) + 0x78))();
    if (!v17)
      return;
    v18 = (void *)v17;
    v19 = (void *)MEMORY[0x22E2AF8EC](a1, a2);
    v20 = MEMORY[0x24BDAC760];
    if (a3)
    {
      v21 = swift_allocObject();
      *(_QWORD *)(v21 + 16) = a3;
      *(_QWORD *)(v21 + 24) = a4;
      v32 = partial apply for thunk for @callee_guaranteed (@unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>?) -> ();
      v33 = v21;
      aBlock = v20;
      v29 = 1107296256;
      v30 = thunk for @escaping @callee_guaranteed (@guaranteed _PASSqliteStatement) -> ();
      v31 = &block_descriptor_6;
      v22 = _Block_copy(&aBlock);
      swift_release();
      if (a5)
      {
LABEL_5:
        v23 = swift_allocObject();
        *(_QWORD *)(v23 + 16) = a5;
        *(_QWORD *)(v23 + 24) = a6;
        v32 = partial apply for thunk for @callee_guaranteed (@guaranteed _PASSqliteStatement) -> (@unowned _PASDBIterAction_);
        v33 = v23;
        aBlock = v20;
        v29 = 1107296256;
        v30 = thunk for @escaping @callee_guaranteed (@guaranteed _PASSqliteStatement) -> (@unowned _PASDBIterAction_);
        v31 = &block_descriptor_0;
        v24 = _Block_copy(&aBlock);
        swift_release();
LABEL_11:
        objc_msgSend(v18, sel_prepAndRunQuery_onPrep_onRow_onError_, v19, v22, v24, 0);
        _Block_release(v24);
        _Block_release(v22);

        return;
      }
    }
    else
    {
      v22 = 0;
      if (a5)
        goto LABEL_5;
    }
    v24 = 0;
    goto LABEL_11;
  }
  Logger.init()();
  v25 = Logger.logObject.getter();
  v26 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v27 = 0;
    _os_log_impl(&dword_2282CC000, v25, v26, "SQLiteDatabase: Unable to initialize database", v27, 2u);
    MEMORY[0x22E2B117C](v27, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

sqlite3_stmt *SQLiteDatabase.printStmt(stmt:)(void *a1)
{
  id v1;
  sqlite3_stmt *result;
  uint64_t v3;
  id v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = objc_retainAutorelease(a1);
  result = (sqlite3_stmt *)sqlite3_column_count((sqlite3_stmt *)objc_msgSend(v1, sel_stmt));
  if ((result & 0x80000000) != 0)
  {
LABEL_13:
    __break(1u);
  }
  else
  {
    v3 = (int)result;
    v4 = objc_retainAutorelease(v1);
    result = (sqlite3_stmt *)objc_msgSend(v4, sel_stmt);
    v5 = 0;
    v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
    while (1)
    {
      if (sqlite3_column_text(result, v5))
      {
        v7 = String.init(cString:)();
        v9 = v8;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
        v11 = v6[2];
        v10 = v6[3];
        if (v11 >= v10 >> 1)
          v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v6);
        v6[2] = v11 + 1;
        v12 = &v6[2 * v11];
        v12[4] = v7;
        v12[5] = v9;
      }
      if (v3 == v5)
        break;
      ++v5;
      result = (sqlite3_stmt *)objc_msgSend(objc_retainAutorelease(v4), sel_stmt);
      if (v5 == 0x80000000)
      {
        __break(1u);
        goto LABEL_13;
      }
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_2284C1EE0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    v14 = BidirectionalCollection<>.joined(separator:)();
    v16 = v15;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v13 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v13 + 32) = v14;
    *(_QWORD *)(v13 + 40) = v16;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
    return (sqlite3_stmt *)*MEMORY[0x24BE7A6A8];
  }
  return result;
}

Swift::Void __swiftcall SQLiteDatabase.executeQueryForDebugging(query:)(Swift::String query)
{
  _QWORD *v1;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _QWORD *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  _QWORD aBlock[6];

  object = query._object;
  countAndFlagsBits = query._countAndFlagsBits;
  v4 = type metadata accessor for Logger();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((SQLiteDatabase.initDatabase()() & 1) != 0)
  {
    v8 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v1) + 0x78))();
    if (v8)
    {
      v9 = (void *)v8;
      v10 = (void *)MEMORY[0x22E2AF8EC](countAndFlagsBits, object);
      v11 = swift_allocObject();
      *(_QWORD *)(v11 + 16) = v1;
      v12 = swift_allocObject();
      *(_QWORD *)(v12 + 16) = partial apply for implicit closure #2 in implicit closure #1 in SQLiteDatabase.executeQueryForDebugging(query:);
      *(_QWORD *)(v12 + 24) = v11;
      aBlock[4] = thunk for @callee_guaranteed (@guaranteed _PASSqliteStatement) -> (@unowned _PASDBIterAction_)partial apply;
      aBlock[5] = v12;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed _PASSqliteStatement) -> (@unowned _PASDBIterAction_);
      aBlock[3] = &block_descriptor_16;
      v13 = _Block_copy(aBlock);
      v14 = v1;
      swift_release();
      objc_msgSend(v9, sel_prepAndRunQuery_onPrep_onRow_onError_, v10, 0, v13, 0);
      _Block_release(v13);
      swift_release();

    }
  }
  else
  {
    Logger.init()();
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_2282CC000, v15, v16, "SQLiteDatabase: Unable to initialize database", v17, 2u);
      MEMORY[0x22E2B117C](v17, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

id SQLiteDatabase.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void SQLiteDatabase.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_228321820()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed _PASSqliteStatement) -> (@unowned _PASDBIterAction_)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t sub_22832186C()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    result = MEMORY[0x22E2B10E0](MEMORY[0x24BEE12B0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

uint64_t sub_2283218C8()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in SQLiteDatabase.executeQueryForDebugging(query:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 16)) + 0x110))() & 1;
}

uint64_t sub_228321928()
{
  return swift_deallocObject();
}

uint64_t sub_228321938@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x78))();
  *a2 = result;
  return result;
}

uint64_t sub_228321978(id *a1, _QWORD **a2)
{
  id v2;
  uint64_t (*v3)(id);
  id v4;

  v2 = *a1;
  v3 = *(uint64_t (**)(id))((*MEMORY[0x24BEE4EA0] & **a2) + 0x80);
  v4 = *a1;
  return v3(v2);
}

uint64_t sub_2283219C4(_QWORD **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x90))();
}

uint64_t sub_228321A00@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0xA8))();
  *a2 = result;
  return result;
}

uint64_t sub_228321A40(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & **a2) + 0xB0);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t ObjC metadata update function for SQLiteDatabase()
{
  return type metadata accessor for SQLiteDatabase();
}

void type metadata completion function for SQLiteDatabase()
{
  unint64_t v0;

  type metadata accessor for URL?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

void type metadata accessor for URL?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for URL?)
  {
    type metadata accessor for URL();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for URL?);
  }
}

uint64_t sub_228321B74()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in SQLiteDatabase.writeCurrentSchemaVersion(version:)(void *a1)
{
  Class isa;

  isa = Int._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(a1, sel_bindParam_toInt64AsNSNumber_, 1, isa);

}

uint64_t sub_228321BD0()
{
  return swift_deallocObject();
}

uint64_t sub_228321BE0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SQLiteDatabase.getCurrentSchemaVersion()(void *a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)(v1 + 16);
  *v2 = objc_msgSend(a1, sel_getIntegerForColumn_, 0);
  return *MEMORY[0x24BE7A6B0];
}

uint64_t sub_228321C2C()
{
  return swift_deallocObject();
}

uint64_t outlined consume of (@escaping @callee_guaranteed (@guaranteed _PASSqliteStatement) -> (@unowned _PASDBIterAction_))?(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t outlined destroy of URL?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id PoemUpdateHandler.client.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding17PoemUpdateHandler_client);
}

id PoemUpdateHandler.__allocating_init(client:)(uint64_t a1)
{
  objc_class *v1;
  char *v3;
  objc_super v5;

  v3 = (char *)objc_allocWithZone(v1);
  *(_QWORD *)&v3[OBJC_IVAR____TtC21DocumentUnderstanding17PoemUpdateHandler_client] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, sel_init);
}

id PoemUpdateHandler.init(client:)(uint64_t a1)
{
  char *v1;
  objc_super v3;

  *(_QWORD *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding17PoemUpdateHandler_client] = a1;
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for PoemUpdateHandler();
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t type metadata accessor for PoemUpdateHandler()
{
  return objc_opt_self();
}

id PoemUpdateHandler.createRequest()()
{
  uint64_t v0;
  void *v1;
  objc_class *v2;
  char *v3;
  id v4;
  id v5;
  objc_class *v6;
  char *v7;
  objc_super v9;
  objc_super v10;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding17PoemUpdateHandler_client);
  v2 = (objc_class *)type metadata accessor for DURequestContentType();
  v3 = (char *)objc_allocWithZone(v2);
  *(_QWORD *)&v3[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = 512;
  v10.receiver = v3;
  v10.super_class = v2;
  v4 = v1;
  v5 = objc_msgSendSuper2(&v10, sel_init);
  v6 = (objc_class *)type metadata accessor for DURequest();
  v7 = (char *)objc_allocWithZone(v6);
  *(_QWORD *)&v7[OBJC_IVAR____TtC21DocumentUnderstanding9DURequest_client] = v4;
  *(_QWORD *)&v7[OBJC_IVAR____TtC21DocumentUnderstanding9DURequest_contentType] = v5;
  *(_QWORD *)&v7[OBJC_IVAR____TtC21DocumentUnderstanding9DURequest_strategies] = 0;
  v9.receiver = v7;
  v9.super_class = v6;
  return objc_msgSendSuper2(&v9, sel_init);
}

uint64_t PoemUpdateHandler.handleDocumentUpdate(documentUpdate:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 56) = a1;
  *(_QWORD *)(v3 + 64) = v1;
  swift_task_dealloc();
  if (!v1)

  return swift_task_switch();
}

uint64_t PoemUpdateHandler.handleDocumentUpdate(documentUpdate:)()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  int *v6;
  id v7;
  _QWORD *v8;
  uint64_t (*v10)(void *);

  v1 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v2 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 16)) + 0xB8))();
  *(_QWORD *)(v0 + 32) = v2;
  if (v2)
  {
    v3 = v2;
    v4 = (void *)(*(uint64_t (**)(void))((*v1 & *v2) + 0xD0))();

    if (v4)
    {
      v5 = (_QWORD *)(*(uint64_t (**)(void))((*v1 & **(_QWORD **)(v0 + 24)) + 0x68))();
      *(_QWORD *)(v0 + 40) = v5;
      v6 = *(int **)((*v1 & *v5) + 0x70);
      v10 = (uint64_t (*)(void *))((char *)v6 + *v6);
      v7 = v3;
      v8 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 48) = v8;
      *v8 = v0;
      v8[1] = PoemUpdateHandler.handleDocumentUpdate(documentUpdate:);
      return v10(v3);
    }

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  unint64_t v1;
  void *v2;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 56)) + 0x128))();
  if (v1)
  {
    specialized PoemUpdateHandler.addExtractionsToBufferStream(document:extractions:)(*(_QWORD **)(v0 + 32), v1);
    swift_bridgeObjectRelease();
  }
  v2 = *(void **)(v0 + 32);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 32);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

id PoemUpdateHandler.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void PoemUpdateHandler.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id PoemUpdateHandler.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PoemUpdateHandler();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id @nonobjc BMTextUnderstandingPoemBuffer.init(messageTimestamp:conversationId:spotlightId:photoAttachment:extractions:continuousFeatures:rawMessage:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v15;
  uint64_t v16;
  Class isa;
  void *v18;
  uint64_t v19;
  void *v20;
  NSArray v21;
  NSArray v22;
  void *v23;
  id v24;
  void *v26;

  v15 = type metadata accessor for Date();
  v16 = *(_QWORD *)(v15 - 8);
  isa = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(a1, 1, v15) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a1, v15);
  }
  if (a3)
  {
    v18 = (void *)MEMORY[0x22E2AF8EC](a2, a3);
    swift_bridgeObjectRelease();
    v19 = a10;
    if (a5)
    {
LABEL_5:
      v20 = (void *)MEMORY[0x22E2AF8EC](a4, a5);
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
  }
  else
  {
    v18 = 0;
    v19 = a10;
    if (a5)
      goto LABEL_5;
  }
  v20 = 0;
LABEL_8:
  type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for BMTextUnderstandingPoemBufferExtraction);
  v21.super.isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  type metadata accessor for NSNumber(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  v22.super.isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  if (v19)
  {
    v23 = (void *)MEMORY[0x22E2AF8EC](a9, v19);
    swift_bridgeObjectRelease();
  }
  else
  {
    v23 = 0;
  }
  v24 = objc_msgSend(v26, sel_initWithMessageTimestamp_conversationId_spotlightId_photoAttachment_extractions_continuousFeatures_rawMessage_, isa, v18, v20, a6, v21.super.isa, v22.super.isa, v23);

  return v24;
}

uint64_t specialized PoemUpdateHandler.addExtractionsToBufferStream(document:extractions:)(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  _QWORD *v18;
  uint64_t (*v19)(void);
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  Class isa;
  uint64_t (*v37)(uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  id v51;
  _BOOL4 v52;
  id v53;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v46 - v8;
  v10 = type metadata accessor for Date();
  v11 = *(_QWORD *)(v10 - 8);
  result = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    v45 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v45)
      return result;
  }
  else if (!*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  v15 = (_QWORD *)MEMORY[0x24BEE4EA0];
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *a1) + 0xC0))(result);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    return outlined destroy of Date?((uint64_t)v9);
  v16 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 32))(v14, v9, v10);
  v17 = *(uint64_t (**)(uint64_t))((*v15 & *a1) + 0xD0);
  v18 = (_QWORD *)v17(v16);
  if (v18)
  {
    v19 = *(uint64_t (**)(void))((*v15 & *v18) + 0xE0);
    v53 = v18;
    v20 = v19();
    if (v21)
    {
      v22 = v20;
      v23 = v21;
      swift_bridgeObjectRelease();
      v24 = HIBYTE(v23) & 0xF;
      if ((v23 & 0x2000000000000000) == 0)
        v24 = v22 & 0xFFFFFFFFFFFFLL;
      v52 = v24 != 0;
    }
    else
    {
      v52 = 0;
    }
    v25 = objc_msgSend((id)BiomeLibrary(), sel_TextUnderstanding);
    swift_unknownObjectRelease();
    v26 = objc_msgSend(v25, sel_DocumentUnderstanding);
    swift_unknownObjectRelease();
    v27 = objc_msgSend(v26, sel_PoemBuffer);
    swift_unknownObjectRelease();
    v51 = v27;
    v50 = objc_msgSend(v27, sel_source);
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v7, v14, v10);
    v28 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
    v29 = (_QWORD *)v17(v28);
    if (v29)
    {
      v30 = v29;
      v31 = (*(uint64_t (**)(void))((*v15 & *v29) + 0x80))();
      v48 = v32;
      v49 = v31;

    }
    else
    {
      v48 = 0;
      v49 = 0;
    }
    v33 = v15;
    v34 = (*(uint64_t (**)(void))((*v15 & *a1) + 0xA0))();
    v47 = v35;
    isa = Bool._bridgeToObjectiveC()().super.super.isa;
    v37 = *(uint64_t (**)(uint64_t))((*v33 & *a1) + 0x88);
    v38 = swift_bridgeObjectRetain();
    v39 = v37(v38);
    v41 = v40;
    v42 = objc_allocWithZone(MEMORY[0x24BE0C7F0]);
    v43 = @nonobjc BMTextUnderstandingPoemBuffer.init(messageTimestamp:conversationId:spotlightId:photoAttachment:extractions:continuousFeatures:rawMessage:)((uint64_t)v7, v49, v48, v34, v47, isa, a2, MEMORY[0x24BEE4AF8], v39, v41);
    v44 = v50;
    objc_msgSend(v50, sel_sendEvent_, v43);

  }
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

uint64_t outlined destroy of Date?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t static DUConcatenatedDocumentTextDefaultImplementation.implementationID.getter()
{
  return 0xD000000000000031;
}

uint64_t static DUConcatenatedDocumentTextDefaultImplementation.specification.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for DUConcatenatedDocumentTextSpecification();
  result = swift_allocObject();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for DUConcatenatedDocumentTextSpecification;
  *a1 = result;
  return result;
}

void *static DUConcatenatedDocumentTextDefaultImplementation.implementationAttributes.getter()
{
  return &outlined read-only object #0 of static DUConcatenatedDocumentTextDefaultImplementation.implementationAttributes.getter;
}

uint64_t DUConcatenatedDocumentTextDefaultImplementation.runTypedOnRequest(request:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch();
}

unint64_t DUConcatenatedDocumentTextDefaultImplementation.runTypedOnRequest(request:)()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  unint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  Swift::String v35;
  Swift::String v36;

  v1 = (_QWORD *)(*(uint64_t (**)(void))(**(_QWORD **)(v0 + 16) + 136))();
  v2 = v1;
  if (!v1)
  {
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v16 = swift_allocError();
    v17 = 0;
    *(_QWORD *)v18 = 0xD000000000000015;
    *(_QWORD *)(v18 + 8) = 0x80000002284DB0D0;
    *(_BYTE *)(v18 + 16) = 0;
    return (*(uint64_t (**)(uint64_t, unint64_t, BOOL))(v0 + 8))(v16, v17, v2 == 0);
  }
  v3 = (_QWORD *)MEMORY[0x24BEE4EA0];
  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v1) + 0xD8))();
  if (!result)
  {
LABEL_18:
    v19 = (*(uint64_t (**)(unint64_t))((*v3 & *v2) + 0x58))(result);
    if (v20)
    {
      v21 = v19;
      v22 = v20;
      v23._countAndFlagsBits = 10;
      v23._object = (void *)0xE100000000000000;
      String.append(_:)(v23);
      v24._countAndFlagsBits = v21;
      v24._object = v22;
      String.append(_:)(v24);
      v19 = swift_bridgeObjectRelease();
    }
    v25 = (*(uint64_t (**)(uint64_t))((*v3 & *v2) + 0x60))(v19);
    if (v26)
    {
      v27 = v25;
      v28 = v26;
      v29._countAndFlagsBits = 10;
      v29._object = (void *)0xE100000000000000;
      String.append(_:)(v29);
      v30._countAndFlagsBits = v27;
      v30._object = v28;
      String.append(_:)(v30);
      v25 = swift_bridgeObjectRelease();
    }
    v31 = (*(uint64_t (**)(uint64_t))((*v3 & *v2) + 0x88))(v25);
    if (v32)
    {
      v33 = v31;
      v34 = v32;
      v35._countAndFlagsBits = 10;
      v35._object = (void *)0xE100000000000000;
      String.append(_:)(v35);
      v36._countAndFlagsBits = v33;
      v36._object = v34;
      String.append(_:)(v36);
      swift_bridgeObjectRelease();
    }

    swift_bridgeObjectRelease();
    v16 = 0;
    v17 = 0xE000000000000000;
    return (*(uint64_t (**)(uint64_t, unint64_t, BOOL))(v0 + 8))(v16, v17, v2 == 0);
  }
  v5 = result;
  if (!(result >> 62))
  {
    v6 = *(_QWORD *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v6)
      goto LABEL_5;
LABEL_17:
    result = swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  result = _CocoaArrayWrapper.endIndex.getter();
  v6 = result;
  if (!result)
    goto LABEL_17;
LABEL_5:
  if (v6 >= 1)
  {
    for (i = 0; i != v6; ++i)
    {
      if ((v5 & 0xC000000000000001) != 0)
        v8 = (_QWORD *)MEMORY[0x22E2AFF34](i, v5);
      else
        v8 = *(id *)(v5 + 8 * i + 32);
      v9 = v8;
      v10 = (*(uint64_t (**)(void))((*v3 & *v8) + 0xB0))();
      if (v11)
      {
        v12 = v10;
        v13 = v11;
        v14._countAndFlagsBits = 10;
        v14._object = (void *)0xE100000000000000;
        String.append(_:)(v14);
        v15._countAndFlagsBits = v12;
        v15._object = v13;
        String.append(_:)(v15);
        swift_bridgeObjectRelease();
      }

    }
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t DUConcatenatedDocumentTextDefaultImplementation.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t DUConcatenatedDocumentTextDefaultImplementation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t DUConcatenatedDocumentTextDefaultImplementation.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t DUConcatenatedDocumentTextDefaultImplementation.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t protocol witness for static DUProcessingPhaseImplementation.specification.getter in conformance DUConcatenatedDocumentTextDefaultImplementation@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for DUConcatenatedDocumentTextSpecification();
  result = swift_allocObject();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for DUConcatenatedDocumentTextSpecification;
  *a1 = result;
  return result;
}

unint64_t protocol witness for static DUProcessingPhaseImplementation.implementationID.getter in conformance DUConcatenatedDocumentTextDefaultImplementation()
{
  return 0xD000000000000031;
}

void *protocol witness for static DUProcessingPhaseImplementation.implementationAttributes.getter in conformance DUConcatenatedDocumentTextDefaultImplementation()
{
  return &outlined read-only object #0 of protocol witness for static DUProcessingPhaseImplementation.implementationAttributes.getter in conformance DUConcatenatedDocumentTextDefaultImplementation;
}

uint64_t protocol witness for DUProcessingPhaseImplementation.runTypedOnRequest(request:) in conformance DUConcatenatedDocumentTextDefaultImplementation(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  *(_QWORD *)(v3 + 16) = a1;
  v7 = (uint64_t (*)(uint64_t))(**(int **)(**(_QWORD **)v2 + 80) + *(_QWORD *)(**(_QWORD **)v2 + 80));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v5;
  *v5 = v3;
  v5[1] = protocol witness for DUProcessingPhaseImplementation.runTypedOnRequest(request:) in conformance DUConcatenatedDocumentTextDefaultImplementation;
  return v7(a2);
}

uint64_t protocol witness for DUProcessingPhaseImplementation.runTypedOnRequest(request:) in conformance DUConcatenatedDocumentTextDefaultImplementation(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v9;

  v7 = *(_QWORD *)(*v3 + 16);
  v9 = *v3;
  swift_task_dealloc();
  *(_QWORD *)v7 = a1;
  *(_QWORD *)(v7 + 8) = a2;
  *(_BYTE *)(v7 + 16) = a3 & 1;
  return (*(uint64_t (**)(void))(v9 + 8))();
}

_UNKNOWN **associated type witness table accessor for DUProcessingPhaseImplementation.SpecificationType : DUProcessingPhaseSpecification in DUConcatenatedDocumentTextDefaultImplementation()
{
  return &protocol witness table for DUConcatenatedDocumentTextSpecification;
}

uint64_t type metadata accessor for DUConcatenatedDocumentTextDefaultImplementation()
{
  return objc_opt_self();
}

void one-time initialization function for migrations()
{
  static PoemStatsDatabaseMigration.migrations = (uint64_t)&outlined read-only object #0 of one-time initialization function for migrations;
}

{
  static RetrievalDatabaseMigrations.migrations = (uint64_t)&outlined read-only object #0 of one-time initialization function for migrations;
}

uint64_t *PoemStatsDatabaseMigration.migrations.unsafeMutableAddressor()
{
  if (one-time initialization token for migrations != -1)
    swift_once();
  return &static PoemStatsDatabaseMigration.migrations;
}

uint64_t static PoemStatsDatabaseMigration.migrations.getter()
{
  if (one-time initialization token for migrations != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

ValueMetadata *type metadata accessor for PoemStatsDatabaseMigration()
{
  return &type metadata for PoemStatsDatabaseMigration;
}

uint64_t specialized BidirectionalCollection.last.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return 0;
  String.index(before:)();
  return String.subscript.getter();
}

void one-time initialization function for apostropheVariants()
{
  apostropheVariants._rawValue = &outlined read-only object #0 of one-time initialization function for apostropheVariants;
}

Swift::OpaquePointer *apostropheVariants.unsafeMutableAddressor()
{
  if (one-time initialization token for apostropheVariants != -1)
    swift_once();
  return &apostropheVariants;
}

objc_class *one-time initialization function for apostropheRegex()
{
  uint64_t v0;
  void *v1;
  void *v2;
  Swift::String v3;
  Swift::String v4;
  id v5;
  objc_class *result;

  if (one-time initialization token for apostropheVariants != -1)
    swift_once();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v0 = BidirectionalCollection<>.joined(separator:)();
  v2 = v1;
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = v0;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 93;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  v5 = objc_allocWithZone(MEMORY[0x24BDD1798]);
  result = (objc_class *)@nonobjc NSRegularExpression.init(pattern:options:)(91, 0xE100000000000000, 0);
  apostropheRegex.value.super.isa = result;
  return result;
}

NSRegularExpression_optional *apostropheRegex.unsafeMutableAddressor()
{
  if (one-time initialization token for apostropheRegex != -1)
    swift_once();
  return &apostropheRegex;
}

Swift::String *termOfAddressPlaceholder.unsafeMutableAddressor()
{
  return &termOfAddressPlaceholder;
}

uint64_t Counter.counter.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*Counter.counter.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

Swift::Void __swiftcall Counter.increment(key:)(Swift::String key)
{
  uint64_t *v1;
  uint64_t *v2;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;

  v2 = v1;
  object = key._object;
  countAndFlagsBits = key._countAndFlagsBits;
  v5 = *v1;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_6;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, (uint64_t)object);
  if ((v7 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_6:
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v2;
    *v2 = 0x8000000000000000;
    v10 = 1;
    goto LABEL_7;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v6);
  swift_bridgeObjectRelease();
  if (!__OFADD__(v8, 1))
  {
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v2;
    *v2 = 0x8000000000000000;
    v10 = v8 + 1;
LABEL_7:
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v10, countAndFlagsBits, (uint64_t)object, isUniquelyReferenced_nonNull_native);
    *v2 = v11;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  __break(1u);
}

DocumentUnderstanding::Counter __swiftcall Counter.init()()
{
  return (DocumentUnderstanding::Counter)MEMORY[0x24BEE4B00];
}

uint64_t default argument 0 of Counter.init(counter:)()
{
  return MEMORY[0x24BEE4B00];
}

Swift::String_optional __swiftcall String.handleApostrophesForRegex()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  Swift::String_optional result;

  v2 = v1;
  v3 = v0;
  if (one-time initialization token for apostropheRegex != -1)
    swift_once();
  if (apostropheRegex.value.super.isa)
  {
    v4 = apostropheRegex.value.super.isa;
    v5 = (void *)MEMORY[0x22E2AF8EC](v3, v2);
    v6 = String.count.getter();
    v7 = (void *)MEMORY[0x22E2AF8EC](0x5D9980E2BCCA275BLL, 0xA90000000000003FLL);
    v8 = -[objc_class stringByReplacingMatchesInString:options:range:withTemplate:](v4, sel_stringByReplacingMatchesInString_options_range_withTemplate_, v5, 0, 0, v6, v7);

    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v11 = v10;

  }
  else
  {
    v9 = 0;
    v11 = 0;
  }
  v12 = v9;
  v13 = v11;
  result.value._object = v13;
  result.value._countAndFlagsBits = v12;
  return result;
}

Swift::String_optional __swiftcall String.handleCommasForRegex()()
{
  uint64_t v0;
  void *v1;
  Swift::String_optional result;

  lazy protocol witness table accessor for type String and conformance String();
  v0 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  result.value._object = v1;
  result.value._countAndFlagsBits = v0;
  return result;
}

Swift::Bool __swiftcall String.hasEmoji()()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _QWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = v1;
  v3 = v0;
  v4 = type metadata accessor for Unicode.Scalar.Properties();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) != 0)
    v8 = HIBYTE(v2) & 0xF;
  else
    v8 = v3 & 0xFFFFFFFFFFFFLL;
  if (v8)
  {
    v14[1] = (v2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    v15 = v2 & 0xFFFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain();
    for (i = 0; i < v8; i += v11)
    {
      if ((v2 & 0x1000000000000000) != 0)
      {
        _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((v2 & 0x2000000000000000) != 0)
        {
          v17 = v3;
          v18 = v15;
        }
        else if ((v3 & 0x1000000000000000) == 0)
        {
          _StringObject.sharedUTF8.getter();
        }
        _decodeScalar(_:startingAt:)();
      }
      v11 = v10;
      Unicode.Scalar.properties.getter();
      v12 = Unicode.Scalar.Properties.isEmoji.getter();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      if ((v12 & 1) != 0)
        break;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = 0;
  }
  return v12 & 1;
}

Swift::String __swiftcall String.removeEmojis()()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  char v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  void *v24;
  Swift::String result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36;

  v2 = v1;
  v3 = v0;
  v4 = type metadata accessor for Unicode.Scalar.Properties();
  v30 = *(_QWORD *)(v4 - 8);
  v31 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = v3 & 0xFFFFFFFFFFFFLL;
  v29 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) != 0)
    v7 = HIBYTE(v2) & 0xF;
  else
    v7 = v3 & 0xFFFFFFFFFFFFLL;
  if (v7)
  {
    v26 = (v2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    v27 = v2 & 0xFFFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain_n();
    v8 = 0;
    v9 = v3;
    v10 = v2;
    v11 = v3;
    do
    {
      if ((v2 & 0x1000000000000000) != 0)
      {
        v15 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((v2 & 0x2000000000000000) != 0)
        {
          v35 = v3;
          v36 = v27;
        }
        else if ((v3 & 0x1000000000000000) == 0)
        {
          _StringObject.sharedUTF8.getter();
        }
        v15 = _decodeScalar(_:startingAt:)();
      }
      v17 = v15;
      v18 = v16;
      Unicode.Scalar.properties.getter();
      v19 = Unicode.Scalar.Properties.isEmoji.getter();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v6, v31);
      if ((v19 & 1) != 0)
      {
        v35 = v9;
        v36 = v10;
        if (v17 <= 0x7F)
        {
          v12 = v17 + 1;
        }
        else
        {
          v20 = (v17 & 0x3F) << 8;
          if (v17 >= 0x800)
          {
            v21 = (v20 | (v17 >> 6) & 0x3F) << 8;
            v22 = (((v21 | (v17 >> 12) & 0x3F) << 8) | (v17 >> 18)) - 2122219023;
            v12 = (v21 | (v17 >> 12)) + 8487393;
            if (HIWORD(v17))
              v12 = v22;
          }
          else
          {
            v12 = (v20 | (v17 >> 6)) + 33217;
          }
        }
        v34[0] = (v12 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v12) >> 3))));
        v34[0] = MEMORY[0x22E2AF9AC](v34);
        v34[1] = v13;
        v32 = 0;
        v33 = 0xE000000000000000;
        lazy protocol witness table accessor for type String and conformance String();
        v9 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        v10 = v14;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      v8 += v18;
      v3 = v11;
    }
    while (v8 < v7);
    swift_bridgeObjectRelease();
    v3 = v9;
    v2 = v10;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  v23 = v3;
  v24 = (void *)v2;
  result._object = v24;
  result._countAndFlagsBits = v23;
  return result;
}

Swift::Bool __swiftcall String.firstWordIsAcronym()()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String_optional v16;
  unint64_t countAndFlagsBits;
  void *object;
  unint64_t v19;
  char v20;
  char v21;
  char v22;
  Swift::String_optional v23;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = v1;
  v3 = v0;
  v4 = type metadata accessor for Unicode.Scalar.Properties();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CharacterSet();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = v3;
  v26 = v2;
  static CharacterSet.whitespacesAndNewlines.getter();
  lazy protocol witness table accessor for type String and conformance String();
  v12 = (_QWORD *)StringProtocol.components(separatedBy:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if (!v12[2])
  {
LABEL_24:
    swift_bridgeObjectRelease();
    LOBYTE(v19) = 0;
    return v19;
  }
  v14 = v12[4];
  v13 = v12[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15 = HIBYTE(v13) & 0xF;
  v25 = v14;
  v26 = v13;
  if ((v13 & 0x2000000000000000) == 0)
    v15 = v14 & 0xFFFFFFFFFFFFLL;
  v27 = 0;
  v28 = v15;
  swift_bridgeObjectRetain();
  v16 = String.Iterator.next()();
  if (!v16.value._object)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    LOBYTE(v19) = 1;
    return v19;
  }
  countAndFlagsBits = v16.value._countAndFlagsBits;
  object = v16.value._object;
  while (1)
  {
    if ((Character.isPunctuation.getter() & 1) != 0)
    {
LABEL_18:
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
    if ((Character.isLetter.getter() & 1) == 0)
      goto LABEL_22;
    if ((Character._isSingleScalar.getter() & 1) != 0)
      break;
LABEL_11:
    if ((Character._isUppercased.getter() & 1) == 0)
    {
LABEL_22:
      swift_bridgeObjectRelease();
LABEL_23:
      swift_bridgeObjectRelease();
      goto LABEL_24;
    }
    if ((Character._isSingleScalar.getter() & 1) != 0)
    {
      v19 = specialized Collection.first.getter(countAndFlagsBits, (unint64_t)object);
      if ((v19 & 0x100000000) != 0)
        goto LABEL_27;
      Unicode.Scalar.properties.getter();
      v21 = Unicode.Scalar.Properties.isCased.getter();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      if ((v21 & 1) != 0)
        goto LABEL_18;
    }
    if ((Character._isUppercased.getter() & 1) == 0)
      goto LABEL_18;
    v22 = Character._isLowercased.getter();
    swift_bridgeObjectRelease();
    if ((v22 & 1) != 0)
      goto LABEL_23;
LABEL_19:
    v23 = String.Iterator.next()();
    countAndFlagsBits = v23.value._countAndFlagsBits;
    object = v23.value._object;
    if (!v23.value._object)
      goto LABEL_20;
  }
  v19 = specialized Collection.first.getter(countAndFlagsBits, (unint64_t)object);
  if ((v19 & 0x100000000) == 0)
  {
    Unicode.Scalar.properties.getter();
    v20 = Unicode.Scalar.Properties.isUppercase.getter();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    if ((v20 & 1) != 0)
      goto LABEL_18;
    goto LABEL_11;
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return v19;
}

Swift::String __swiftcall String.setCaseOfFirstLetter(caseIsUpper:)(Swift::Bool caseIsUpper)
{
  uint64_t isUniquelyReferenced_nonNull_native;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t countAndFlagsBits;
  void *object;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  Swift::String v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  Swift::String result;
  uint64_t v26;

  isUniquelyReferenced_nonNull_native = String.count.getter();
  if (isUniquelyReferenced_nonNull_native < 0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v3 = isUniquelyReferenced_nonNull_native;
  if (isUniquelyReferenced_nonNull_native)
  {
    v4 = 0;
    v5 = 0;
    v6 = isUniquelyReferenced_nonNull_native - 1;
    v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v26 = isUniquelyReferenced_nonNull_native - 1;
    do
    {
      String.index(_:offsetBy:)();
      v8 = String.subscript.getter();
      v10 = v9;
      if ((Character.isLetter.getter() & 1) == 0 || (v5 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
          v7 = (_QWORD *)isUniquelyReferenced_nonNull_native;
        }
        v14 = v7[2];
        v13 = v7[3];
        if (v14 >= v13 >> 1)
        {
          isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, v7);
          v7 = (_QWORD *)isUniquelyReferenced_nonNull_native;
        }
        v7[2] = v14 + 1;
        v15 = &v7[2 * v14];
        v15[4] = v8;
        v15[5] = v10;
        v6 = v26;
        if (v26 == v4)
          goto LABEL_22;
      }
      else
      {
        if (caseIsUpper)
        {
          countAndFlagsBits = MEMORY[0x22E2AF850](v8, v10);
        }
        else
        {
          v16 = String.lowercased()();
          object = v16._object;
          countAndFlagsBits = v16._countAndFlagsBits;
        }
        v17 = countAndFlagsBits;
        v18 = object;
        swift_bridgeObjectRelease();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
          v7 = (_QWORD *)isUniquelyReferenced_nonNull_native;
        }
        v20 = v7[2];
        v19 = v7[3];
        if (v20 >= v19 >> 1)
        {
          isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v19 > 1), v20 + 1, 1, v7);
          v7 = (_QWORD *)isUniquelyReferenced_nonNull_native;
        }
        v7[2] = v20 + 1;
        v21 = &v7[2 * v20];
        v21[4] = v17;
        v21[5] = v18;
        if (v6 == v4)
          goto LABEL_22;
        v5 = 1;
      }
      ++v4;
    }
    while (v3 != v4);
    __break(1u);
    goto LABEL_24;
  }
LABEL_22:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v22 = BidirectionalCollection<>.joined(separator:)();
  v24 = v23;
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = v22;
  v2 = v24;
LABEL_25:
  result._object = v2;
  result._countAndFlagsBits = isUniquelyReferenced_nonNull_native;
  return result;
}

Swift::Bool_optional __swiftcall String.firstLetterIsCapitalized()()
{
  char v1;

  swift_bridgeObjectRetain();
  if ((unint64_t)String.Iterator.next()().value._object)
  {
    while ((Character.isLetter.getter() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      if (!(unint64_t)String.Iterator.next()().value._object)
        goto LABEL_4;
    }
    v1 = Character.isUppercase.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (Swift::Bool_optional)(v1 & 1);
  }
  else
  {
LABEL_4:
    swift_bridgeObjectRelease();
    return (Swift::Bool_optional)2;
  }
}

Swift::Bool __swiftcall String.hasAcronym()()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  Swift::String_optional v20;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String_optional v23;
  unint64_t v24;
  uint64_t v25;
  Swift::String_optional v26;
  unint64_t v27;
  unint64_t v28;
  Swift::String_optional v29;
  uint64_t v30;
  char *v31;
  char v32;
  int v33;
  unsigned int v34;
  char v35;
  char v36;
  char v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;

  v2 = v1;
  v3 = v0;
  v4 = type metadata accessor for Unicode.Scalar.Properties();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CharacterSet();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = v3;
  v44 = v2;
  static CharacterSet.whitespacesAndNewlines.getter();
  lazy protocol witness table accessor for type String and conformance String();
  v12 = StringProtocol.components(separatedBy:)();
  LOBYTE(v13) = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v14 = *(_QWORD *)(v12 + 16);
  if (v14)
  {
    v15 = 0;
    v41 = v12;
    v42 = v12 + 32;
    v40 = v14;
    while (1)
    {
      if (v15 >= *(_QWORD *)(v12 + 16))
      {
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
        return v13;
      }
      v17 = *(_QWORD *)(v42 + 16 * v15);
      v16 = *(_QWORD *)(v42 + 16 * v15 + 8);
      v18 = 0xE000000000000000;
      v47 = 0;
      v48 = 0xE000000000000000;
      v19 = HIBYTE(v16) & 0xF;
      if ((v16 & 0x2000000000000000) == 0)
        v19 = v17 & 0xFFFFFFFFFFFFLL;
      v43 = v17;
      v44 = v16;
      v45 = 0;
      v46 = v19;
      swift_bridgeObjectRetain();
      v20 = String.Iterator.next()();
      if (v20.value._object)
      {
        countAndFlagsBits = v20.value._countAndFlagsBits;
        object = v20.value._object;
        do
        {
          if ((Character.isLetter.getter() & 1) != 0 || (Character.isPunctuation.getter() & 1) != 0)
            MEMORY[0x22E2AFA0C](countAndFlagsBits, object);
          swift_bridgeObjectRelease();
          v23 = String.Iterator.next()();
          countAndFlagsBits = v23.value._countAndFlagsBits;
          object = v23.value._object;
        }
        while (v23.value._object);
        v24 = v47;
        v18 = v48;
      }
      else
      {
        v24 = 0;
      }
      swift_bridgeObjectRelease();
      if (String.count.getter() > 1)
        break;
      LOBYTE(v13) = swift_bridgeObjectRelease();
LABEL_56:
      if (++v15 == v14)
        goto LABEL_57;
    }
    v25 = HIBYTE(v18) & 0xF;
    v43 = v24;
    v44 = v18;
    if ((v18 & 0x2000000000000000) == 0)
      v25 = v24 & 0xFFFFFFFFFFFFLL;
    v45 = 0;
    v46 = v25;
    swift_bridgeObjectRetain();
    v26 = String.Iterator.next()();
    LOBYTE(v13) = v26.value._countAndFlagsBits;
    if (v26.value._object)
    {
      v27 = v26.value._countAndFlagsBits;
      v28 = (unint64_t)v26.value._object;
      do
      {
        if ((v28 & 0x2000000000000000) != 0)
          v30 = HIBYTE(v28) & 0xF;
        else
          v30 = v27 & 0xFFFFFFFFFFFFLL;
        if (!v30)
        {
          __break(1u);
          goto LABEL_60;
        }
        if ((v28 & 0x1000000000000000) != 0)
        {
          if ((unint64_t)String.UnicodeScalarView._foreignIndex(after:)() >> 14 != 4 * v30)
            goto LABEL_45;
          _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        }
        else
        {
          if ((v28 & 0x2000000000000000) != 0)
          {
            v32 = v27;
          }
          else
          {
            if ((v27 & 0x1000000000000000) != 0)
              v31 = (char *)((v28 & 0xFFFFFFFFFFFFFFFLL) + 32);
            else
              v31 = (char *)_StringObject.sharedUTF8.getter();
            v32 = *v31;
          }
          v33 = v32;
          v34 = 4 * __clz(~v32) - 96;
          if (v33 >= 0)
            LOBYTE(v34) = 4;
          if ((v34 & 0xFC) != 4 * v30)
            goto LABEL_45;
          if ((v28 & 0x2000000000000000) != 0)
          {
            v47 = v27;
            v48 = v28 & 0xFFFFFFFFFFFFFFLL;
          }
          else if ((v27 & 0x1000000000000000) == 0)
          {
            _StringObject.sharedUTF8.getter();
          }
          _decodeScalar(_:startingAt:)();
        }
        Unicode.Scalar.properties.getter();
        v35 = Unicode.Scalar.Properties.isUppercase.getter();
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        if ((v35 & 1) != 0)
          goto LABEL_20;
LABEL_45:
        if ((Character._isUppercased.getter() & 1) == 0)
        {
          swift_bridgeObjectRelease();
LABEL_55:
          swift_bridgeObjectRelease();
          LOBYTE(v13) = swift_bridgeObjectRelease();
          v14 = v40;
          v12 = v41;
          goto LABEL_56;
        }
        if ((Character._isSingleScalar.getter() & 1) != 0)
        {
          v13 = specialized Collection.first.getter(v27, v28);
          if ((v13 & 0x100000000) != 0)
            goto LABEL_61;
          Unicode.Scalar.properties.getter();
          v36 = Unicode.Scalar.Properties.isCased.getter();
          (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
          if ((v36 & 1) != 0)
            goto LABEL_20;
        }
        if ((Character._isUppercased.getter() & 1) == 0)
        {
LABEL_20:
          swift_bridgeObjectRelease();
          goto LABEL_21;
        }
        v37 = Character._isLowercased.getter();
        swift_bridgeObjectRelease();
        if ((v37 & 1) != 0)
          goto LABEL_55;
LABEL_21:
        v29 = String.Iterator.next()();
        LOBYTE(v13) = v29.value._countAndFlagsBits;
        v27 = v29.value._countAndFlagsBits;
        v28 = (unint64_t)v29.value._object;
      }
      while (v29.value._object);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    LOBYTE(v13) = 1;
  }
  else
  {
LABEL_57:
    swift_bridgeObjectRelease();
    LOBYTE(v13) = 0;
  }
  return v13;
}

Swift::String __swiftcall String.makeAcronymsLowercase()()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  Swift::String_optional v20;
  unint64_t object;
  uint64_t countAndFlagsBits;
  Swift::String_optional v23;
  uint64_t v24;
  Swift::String_optional v25;
  unint64_t v26;
  unint64_t v27;
  Swift::String_optional v28;
  uint64_t v29;
  char *v30;
  char v31;
  int v32;
  unsigned int v33;
  char v34;
  char v35;
  char v36;
  void *v37;
  void *v38;
  Swift::String result;
  unint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  Swift::String v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;

  v2 = v1;
  v3 = v0;
  v4 = type metadata accessor for Unicode.Scalar.Properties();
  v46 = *(_QWORD *)(v4 - 8);
  v47 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CharacterSet();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = v3;
  v49 = v3;
  v50 = (unint64_t)v2;
  swift_bridgeObjectRetain();
  static CharacterSet.whitespacesAndNewlines.getter();
  v40 = lazy protocol witness table accessor for type String and conformance String();
  v11 = StringProtocol.components(separatedBy:)();
  v12 = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v45 = *(_QWORD *)(v11 + 16);
  if (v45)
  {
    v41 = v11;
    v42 = v2;
    v14 = 0;
    v44 = v11 + 32;
    while (v14 < *(_QWORD *)(v11 + 16))
    {
      v15 = (uint64_t *)(v44 + 16 * v14);
      v17 = *v15;
      v16 = v15[1];
      v18 = 0xE000000000000000;
      v53 = 0;
      v54 = 0xE000000000000000;
      v19 = HIBYTE(v16) & 0xF;
      if ((v16 & 0x2000000000000000) == 0)
        v19 = v17 & 0xFFFFFFFFFFFFLL;
      v49 = v17;
      v50 = v16;
      v51 = 0;
      v52 = v19;
      swift_bridgeObjectRetain_n();
      v20 = String.Iterator.next()();
      object = (unint64_t)v20.value._object;
      if (v20.value._object)
      {
        countAndFlagsBits = v20.value._countAndFlagsBits;
        do
        {
          if ((Character.isLetter.getter() & 1) != 0)
            MEMORY[0x22E2AFA0C](countAndFlagsBits, object);
          swift_bridgeObjectRelease();
          v23 = String.Iterator.next()();
          countAndFlagsBits = v23.value._countAndFlagsBits;
          object = (unint64_t)v23.value._object;
        }
        while (v23.value._object);
        object = v53;
        v18 = v54;
      }
      swift_bridgeObjectRelease();
      if (String.count.getter() <= 1)
      {
        swift_bridgeObjectRelease();
        v12 = swift_bridgeObjectRelease();
      }
      else
      {
        v24 = HIBYTE(v18) & 0xF;
        v49 = object;
        v50 = v18;
        if ((v18 & 0x2000000000000000) == 0)
          v24 = object & 0xFFFFFFFFFFFFLL;
        v51 = 0;
        v52 = v24;
        swift_bridgeObjectRetain();
        v25 = String.Iterator.next()();
        v13 = v25.value._object;
        v12 = v25.value._countAndFlagsBits;
        if (v25.value._object)
        {
          v26 = v25.value._countAndFlagsBits;
          v27 = (unint64_t)v25.value._object;
          do
          {
            if ((v27 & 0x2000000000000000) != 0)
              v29 = HIBYTE(v27) & 0xF;
            else
              v29 = v26 & 0xFFFFFFFFFFFFLL;
            if (!v29)
            {
              __break(1u);
              goto LABEL_59;
            }
            if ((v27 & 0x1000000000000000) != 0)
            {
              if ((unint64_t)String.UnicodeScalarView._foreignIndex(after:)() >> 14 != 4 * v29)
                goto LABEL_44;
              _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
            }
            else
            {
              if ((v27 & 0x2000000000000000) != 0)
              {
                v31 = v26;
              }
              else
              {
                if ((v26 & 0x1000000000000000) != 0)
                  v30 = (char *)((v27 & 0xFFFFFFFFFFFFFFFLL) + 32);
                else
                  v30 = (char *)_StringObject.sharedUTF8.getter();
                v31 = *v30;
              }
              v32 = v31;
              v33 = 4 * __clz(~v31) - 96;
              if (v32 >= 0)
                LOBYTE(v33) = 4;
              if ((v33 & 0xFC) != 4 * v29)
                goto LABEL_44;
              if ((v27 & 0x2000000000000000) != 0)
              {
                v53 = v26;
                v54 = v27 & 0xFFFFFFFFFFFFFFLL;
              }
              else if ((v26 & 0x1000000000000000) == 0)
              {
                _StringObject.sharedUTF8.getter();
              }
              _decodeScalar(_:startingAt:)();
            }
            Unicode.Scalar.properties.getter();
            v34 = Unicode.Scalar.Properties.isUppercase.getter();
            (*(void (**)(char *, uint64_t))(v46 + 8))(v6, v47);
            if ((v34 & 1) != 0)
              goto LABEL_19;
LABEL_44:
            if ((Character._isUppercased.getter() & 1) == 0)
            {
              swift_bridgeObjectRelease();
LABEL_54:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v12 = swift_bridgeObjectRelease();
              v11 = v41;
              goto LABEL_4;
            }
            if ((Character._isSingleScalar.getter() & 1) != 0)
            {
              v12 = specialized Collection.first.getter(v26, v27);
              if ((v12 & 0x100000000) != 0)
                goto LABEL_60;
              Unicode.Scalar.properties.getter();
              v35 = Unicode.Scalar.Properties.isCased.getter();
              (*(void (**)(char *, uint64_t))(v46 + 8))(v6, v47);
              if ((v35 & 1) != 0)
                goto LABEL_19;
            }
            if ((Character._isUppercased.getter() & 1) == 0)
            {
LABEL_19:
              swift_bridgeObjectRelease();
              goto LABEL_20;
            }
            v36 = Character._isLowercased.getter();
            swift_bridgeObjectRelease();
            if ((v36 & 1) != 0)
              goto LABEL_54;
LABEL_20:
            v28 = String.Iterator.next()();
            v13 = v28.value._object;
            v12 = v28.value._countAndFlagsBits;
            v26 = v28.value._countAndFlagsBits;
            v27 = (unint64_t)v28.value._object;
          }
          while (v28.value._object);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v49 = v43;
        v50 = (unint64_t)v42;
        v53 = v17;
        v54 = v16;
        v48 = String.lowercased()();
        v43 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        v38 = v37;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v12 = swift_bridgeObjectRelease();
        v42 = v38;
        v11 = v41;
      }
LABEL_4:
      if (++v14 == v45)
      {
        swift_bridgeObjectRelease();
        v2 = v42;
        goto LABEL_57;
      }
    }
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_57:
    v12 = v43;
    v13 = v2;
  }
  result._object = v13;
  result._countAndFlagsBits = v12;
  return result;
}

Swift::Bool __swiftcall String.containsApostrophe()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  objc_class *v4;
  void *v5;
  id v6;

  v2 = v1;
  v3 = v0;
  if (one-time initialization token for apostropheRegex != -1)
    swift_once();
  if (!apostropheRegex.value.super.isa)
    return 0;
  v4 = apostropheRegex.value.super.isa;
  v5 = (void *)MEMORY[0x22E2AF8EC](v3, v2);
  v6 = -[objc_class numberOfMatchesInString:options:range:](v4, sel_numberOfMatchesInString_options_range_, v5, 0, 0, String.count.getter());

  return (uint64_t)v6 > 0;
}

Swift::String __swiftcall String.handleTrailingPunctuation(punctuationMark:shouldHaveTrailingQuestionMark:)(Swift::String punctuationMark, Swift::Bool shouldHaveTrailingQuestionMark)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  char v21;
  Swift::String v22;
  uint64_t v23;
  void *v24;
  Swift::String result;
  uint64_t v26;
  unint64_t v27;

  v4 = v3;
  v5 = v2;
  object = punctuationMark._object;
  countAndFlagsBits = punctuationMark._countAndFlagsBits;
  v9 = type metadata accessor for CharacterSet();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  v13 = specialized BidirectionalCollection.last.getter(v5, v4);
  v15 = v14;
  swift_bridgeObjectRelease();
  if (!v15)
    goto LABEL_9;
  if (v13 != countAndFlagsBits || v15 != object)
  {
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v16 & 1) == 0 || shouldHaveTrailingQuestionMark)
      goto LABEL_9;
LABEL_8:
    v26 = v5;
    v27 = v4;
    swift_bridgeObjectRetain();
    CharacterSet.init(charactersIn:)();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type String and conformance String();
    v5 = StringProtocol.trimmingCharacters(in:)();
    v4 = v17;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    goto LABEL_17;
  }
  swift_bridgeObjectRelease();
  if (!shouldHaveTrailingQuestionMark)
    goto LABEL_8;
LABEL_9:
  swift_bridgeObjectRetain();
  v18 = specialized BidirectionalCollection.last.getter(v5, v4);
  v20 = v19;
  swift_bridgeObjectRelease();
  if (v20)
  {
    if (v18 == countAndFlagsBits && v20 == object)
    {
      swift_bridgeObjectRelease();
LABEL_16:
      swift_bridgeObjectRetain();
      goto LABEL_17;
    }
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v21 & 1) != 0)
      goto LABEL_16;
  }
  if (!shouldHaveTrailingQuestionMark)
    goto LABEL_16;
  v26 = v5;
  v27 = v4;
  swift_bridgeObjectRetain();
  v22._countAndFlagsBits = countAndFlagsBits;
  v22._object = object;
  String.append(_:)(v22);
  v5 = v26;
  v4 = v27;
LABEL_17:
  v23 = v5;
  v24 = (void *)v4;
  result._object = v24;
  result._countAndFlagsBits = v23;
  return result;
}

uint64_t _StringGuts._slowEnsureMatchingEncoding(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v3 = a1;
  v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v10 = String.UTF16View.index(_:offsetBy:)();
    v11 = v10 + (v4 << 16);
    v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v13 = v12;
    return v13 | 4;
  }
  else
  {
    v5 = MEMORY[0x22E2AFA48](15, a1 >> 16);
    v6 = v5 + (v4 << 16);
    v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v8 = v7;
    return v8 | 8;
  }
}

id specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  id result;
  unint64_t v20;
  char v21;

  v5 = (_QWORD **)v4;
  v9 = (_QWORD *)*v4;
  v11 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a3);
  v12 = v9[2];
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    v15 = v10;
    v16 = v9[3];
    if (v16 >= v14 && (a4 & 1) != 0)
    {
LABEL_7:
      v17 = *v5;
      if ((v15 & 1) != 0)
      {
LABEL_8:
        v18 = (uint64_t *)(v17[7] + 16 * v11);
        result = (id)swift_bridgeObjectRelease();
        *v18 = a1;
        v18[1] = a2;
        return result;
      }
      goto LABEL_11;
    }
    if (v16 >= v14 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a4 & 1);
    v20 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a3);
    if ((v15 & 1) == (v21 & 1))
    {
      v11 = v20;
      v17 = *v5;
      if ((v15 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v11, (uint64_t)a3, a1, a2, v17);
      return a3;
    }
  }
  type metadata accessor for NSTextCheckingKey(0);
  result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= result && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        *(_QWORD *)(v18[7] + 8 * v12) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v17 >= result && (a4 & 1) == 0)
    {
      result = (uint64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a4 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v19 & 1))
    {
      v12 = result;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t result;
  unint64_t v20;
  char v21;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
        return outlined assign with take of Result<Any?, Error>(a1, v18[7] + 40 * v12);
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v21 & 1))
    {
      v12 = v20;
      v18 = *v5;
      if ((v16 & 1) != 0)
        return outlined assign with take of Result<Any?, Error>(a1, v18[7] + 40 * v12);
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        result = swift_bridgeObjectRelease();
        *(_QWORD *)(v19 + 8 * v12) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t result;
  unint64_t v23;
  char v24;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a5 & 1) != 0)
    {
LABEL_7:
      v20 = *v6;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = (uint64_t *)(v20[7] + 16 * v14);
        result = swift_bridgeObjectRelease();
        *v21 = a1;
        v21[1] = a2;
        return result;
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a5 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
    v23 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
    if ((v18 & 1) == (v24 & 1))
    {
      v14 = v23;
      v20 = *v6;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v14, a3, a4, a1, a2, v20);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (void (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (void (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, double a6)
{
  _QWORD *v6;
  _QWORD **v7;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t result;
  unint64_t v25;
  char v26;

  v7 = (_QWORD **)v6;
  v14 = (_QWORD *)*v6;
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
  }
  else
  {
    v20 = v15;
    v21 = v14[3];
    if (v21 >= v19 && (a5 & 1) != 0)
    {
LABEL_7:
      v22 = *v7;
      if ((v20 & 1) != 0)
      {
LABEL_8:
        v23 = v22[7] + 24 * v16;
        result = swift_bridgeObjectRelease();
        *(_QWORD *)v23 = a1;
        *(_QWORD *)(v23 + 8) = a2;
        *(double *)(v23 + 16) = a6;
        return result;
      }
      goto LABEL_11;
    }
    if (v21 >= v19 && (a5 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, a5 & 1);
    v25 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
    if ((v20 & 1) == (v26 & 1))
    {
      v16 = v25;
      v22 = *v7;
      if ((v20 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v16, a3, a4, a1, a2, v22, a6);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _OWORD *v19;
  _OWORD *result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_OWORD *)(v18[7] + 32 * v12);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v19);
        return outlined init with take of Any(a1, v19);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain();
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), void (*a6)(void), void (*a7)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v7;
  uint64_t *v10;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;

  v10 = v7;
  v15 = *v7;
  v17 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v18 = *(_QWORD *)(v15 + 16);
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
  }
  else
  {
    v21 = v16;
    v22 = *(_QWORD *)(v15 + 24);
    if (v22 >= v20 && (a4 & 1) != 0)
    {
LABEL_7:
      v23 = *v10;
      if ((v21 & 1) != 0)
      {
LABEL_8:
        v24 = *(_QWORD *)(v23 + 56);

        *(_QWORD *)(v24 + 8 * v17) = a1;
        return;
      }
      goto LABEL_11;
    }
    if (v22 >= v20 && (a4 & 1) == 0)
    {
      a5();
      goto LABEL_7;
    }
    a6();
    v25 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v21 & 1) == (v26 & 1))
    {
      v17 = v25;
      v23 = *v10;
      if ((v21 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      a7(v17, a2, a3, a1, v23);
      swift_bridgeObjectRetain();
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3, double a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= result && (a3 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        *(double *)(v18[7] + 8 * v12) = a4;
        return result;
      }
      goto LABEL_11;
    }
    if (v17 >= result && (a3 & 1) == 0)
    {
      result = (uint64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if ((v16 & 1) == (v19 & 1))
    {
      v12 = result;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a1, a2, v18, a4);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t specialized Collection.first.getter(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unsigned int v5;

  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    _StringGuts.validateScalarIndex(_:)(0xFuLL, a1, a2);
    if ((a2 & 0x1000000000000000) != 0)
    {
      v5 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0)
        _StringObject.sharedUTF8.getter();
      v5 = _decodeScalar(_:startingAt:)();
    }
  }
  else
  {
    v5 = 0;
  }
  return v5 | ((unint64_t)(v2 == 0) << 32);
}

unint64_t _StringGuts.validateScalarIndex(_:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5)
    goto LABEL_9;
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 <= result >> 16)
  {
    __break(1u);
LABEL_9:
    result = _StringGuts.validateSubscalarIndex(_:)(result, a2, a3);
    if ((result & 1) == 0)
      return result & 0xC | _StringGuts.scalarAlignSlow(_:)(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
  }
  return result;
}

unint64_t _StringGuts.validateSubscalarIndex(_:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 0xC) == 4 << v5)
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a2, a3);
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 <= result >> 16)
    __break(1u);
  return result;
}

unint64_t _StringGuts.scalarAlignSlow(_:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  _QWORD v13[4];

  if ((result & 0xC000) != 0 || result < 0x10000)
  {
    result &= 0xFFFFFFFFFFFF0000;
  }
  else
  {
    v5 = result >> 16;
    if ((a3 & 0x1000000000000000) == 0)
    {
      v13[2] = v3;
      v13[3] = v4;
      if ((a3 & 0x2000000000000000) != 0)
      {
        v13[0] = a2;
        v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        if (v5 != (HIBYTE(a3) & 0xF) && (*((_BYTE *)v13 + v5) & 0xC0) == 0x80)
        {
          do
          {
            v7 = v5 - 1;
            v11 = *((_BYTE *)&v12 + v5-- + 7) & 0xC0;
          }
          while (v11 == 128);
          return v7 << 16;
        }
        goto LABEL_14;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (v5 == (a2 & 0xFFFFFFFFFFFFLL))
          goto LABEL_14;
      }
      else
      {
        v12 = result >> 16;
        v6 = _StringObject.sharedUTF8.getter();
        v5 = v12;
        if (v12 == v10)
          goto LABEL_14;
      }
      if ((*(_BYTE *)(v6 + v5) & 0xC0) == 0x80)
      {
        do
        {
          v7 = v5 - 1;
          v8 = *(_BYTE *)(v6 - 1 + v5--) & 0xC0;
        }
        while (v8 == 128);
        return v7 << 16;
      }
LABEL_14:
      v7 = v5;
      return v7 << 16;
    }
    v9 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0)
      v9 = a2 & 0xFFFFFFFFFFFFLL;
    if (v5 != v9)
      return _StringGuts.foreignScalarAlign(_:)();
  }
  return result;
}

ValueMetadata *type metadata accessor for Counter()
{
  return &type metadata for Counter;
}

uint64_t outlined assign with take of Result<Any?, Error>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<Any?, Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t DUVectorUtils.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t DUVectorUtils.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t DUVectorUtils.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t DUVectorUtils.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t specialized static DUVectorUtils.norm(vector:)(uint64_t a1)
{
  int64_t v1;
  uint64_t v3;
  float *v4;
  unint64_t v5;
  float v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v14 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v3 = v14;
    v4 = (float *)(a1 + 32);
    v5 = *(_QWORD *)(v14 + 16);
    do
    {
      v6 = *v4;
      v15 = v3;
      v7 = *(_QWORD *)(v3 + 24);
      v8 = v5 + 1;
      if (v5 >= v7 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v5 + 1, 1);
        v3 = v15;
      }
      *(_QWORD *)(v3 + 16) = v8;
      *(float *)(v3 + 4 * v5 + 32) = v6 * v6;
      ++v4;
      ++v5;
      --v1;
    }
    while (v1);
  }
  else
  {
    v3 = MEMORY[0x24BEE4AF8];
    v8 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    if (!v8)
      return swift_bridgeObjectRelease();
  }
  if (v8 >= 2)
  {
    v11 = 0;
    v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    v10 = 0.0;
    do
    {
      v10 = (float)(v10 + *(float *)(v3 + 4 * v11 + 32)) + *(float *)(v3 + 4 * v11 + 36);
      v11 += 2;
    }
    while (v9 != v11);
    goto LABEL_15;
  }
  v9 = 0;
  v10 = 0.0;
  do
  {
    v12 = *(float *)(v3 + 4 * v9++ + 32);
    v10 = v10 + v12;
LABEL_15:
    ;
  }
  while (v8 != v9);
  return swift_bridgeObjectRelease();
}

uint64_t specialized static DUVectorUtils.normalized(vector:)(uint64_t a1)
{
  float v2;
  int64_t v3;
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  float v7;
  float *v8;
  unint64_t v9;
  float v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  specialized static DUVectorUtils.norm(vector:)(a1);
  v3 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2 == 0.0)
  {
    if (v3)
    {
      v12 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
      result = v12;
      v5 = *(_QWORD *)(v12 + 16);
      do
      {
        v13 = result;
        v6 = *(_QWORD *)(result + 24);
        if (v5 >= v6 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v5 + 1, 1);
          result = v13;
        }
        *(_QWORD *)(result + 16) = v5 + 1;
        *(_DWORD *)(result + 4 * v5++ + 32) = 0;
        --v3;
      }
      while (v3);
    }
  }
  else if (v3)
  {
    v7 = v2;
    v14 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    result = v14;
    v8 = (float *)(a1 + 32);
    v9 = *(_QWORD *)(v14 + 16);
    do
    {
      v10 = *v8;
      v15 = result;
      v11 = *(_QWORD *)(result + 24);
      if (v9 >= v11 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v9 + 1, 1);
        result = v15;
      }
      *(_QWORD *)(result + 16) = v9 + 1;
      *(float *)(result + 4 * v9 + 32) = v10 / v7;
      ++v8;
      ++v9;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t specialized Data.InlineData.init(_:)(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

uint64_t specialized static DUVectorUtils.toData(vector:)(uint64_t result)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 16);
  if (v1 >> 61)
  {
    __break(1u);
  }
  else
  {
    v2 = 4 * v1;
    if (4 * v1)
    {
      if (v2 <= 14)
      {
        return specialized Data.InlineData.init(_:)((_BYTE *)(result + 32), (_BYTE *)(result + 32 + v2));
      }
      else
      {
        type metadata accessor for __DataStorage();
        swift_allocObject();
        __DataStorage.init(bytes:length:)();
        if ((unint64_t)v2 >= 0x7FFFFFFF)
        {
          type metadata accessor for Data.RangeReference();
          result = swift_allocObject();
          *(_QWORD *)(result + 16) = 0;
          *(_QWORD *)(result + 24) = v2;
        }
        else
        {
          return v1 << 34;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for DUVectorUtils()
{
  return objc_opt_self();
}

void *one-time initialization function for heuristicKeywords()
{
  uint64_t inited;
  Swift::Int v1;
  Swift::Int v2;
  Swift::Int v3;
  Swift::Int v4;
  Swift::Int v5;
  Swift::Int v6;
  Swift::Int v7;
  Swift::Int v8;
  void *result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Set<String>)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2284C2460;
  *(_QWORD *)(inited + 32) = 0x74656B636974;
  *(_QWORD *)(inited + 40) = 0xE600000000000000;
  v1 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for heuristicKeywords);
  swift_arrayDestroy();
  *(_QWORD *)(inited + 48) = v1;
  *(_QWORD *)(inited + 56) = 0x74706965636572;
  *(_QWORD *)(inited + 64) = 0xE700000000000000;
  v2 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #1 of one-time initialization function for heuristicKeywords);
  swift_arrayDestroy();
  *(_QWORD *)(inited + 72) = v2;
  *(_QWORD *)(inited + 80) = 0x6D726F46786174;
  *(_QWORD *)(inited + 88) = 0xE700000000000000;
  v3 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #2 of one-time initialization function for heuristicKeywords);
  swift_arrayDestroy();
  *(_QWORD *)(inited + 96) = v3;
  *(_QWORD *)(inited + 104) = 1836216166;
  *(_QWORD *)(inited + 112) = 0xE400000000000000;
  v4 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #3 of one-time initialization function for heuristicKeywords);
  swift_arrayDestroy();
  *(_QWORD *)(inited + 120) = v4;
  strcpy((char *)(inited + 128), "identification");
  *(_BYTE *)(inited + 143) = -18;
  v5 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #4 of one-time initialization function for heuristicKeywords);
  swift_arrayDestroy();
  *(_QWORD *)(inited + 144) = v5;
  *(_QWORD *)(inited + 152) = 1802465122;
  *(_QWORD *)(inited + 160) = 0xE400000000000000;
  v6 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #5 of one-time initialization function for heuristicKeywords);
  swift_arrayDestroy();
  *(_QWORD *)(inited + 168) = v6;
  *(_QWORD *)(inited + 176) = 0x657069636572;
  *(_QWORD *)(inited + 184) = 0xE600000000000000;
  v7 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #6 of one-time initialization function for heuristicKeywords);
  swift_arrayDestroy();
  *(_QWORD *)(inited + 192) = v7;
  *(_QWORD *)(inited + 200) = 0x6C61636964656DLL;
  *(_QWORD *)(inited + 208) = 0xE700000000000000;
  v8 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #7 of one-time initialization function for heuristicKeywords);
  swift_arrayDestroy();
  *(_QWORD *)(inited + 216) = v8;
  result = (void *)specialized Dictionary.init(dictionaryLiteral:)(inited);
  heuristicKeywords._rawValue = result;
  return result;
}

unint64_t static DUCategoryClassificationRuleBasedImplementation.implementationID.getter()
{
  return 0xD000000000000031;
}

uint64_t static DUCategoryClassificationRuleBasedImplementation.specification.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for DUCategoryClassificationSpecification();
  result = swift_allocObject();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for DUCategoryClassificationSpecification;
  *a1 = result;
  return result;
}

void *static DUCategoryClassificationRuleBasedImplementation.implementationAttributes.getter()
{
  return &outlined read-only object #0 of static DUCategoryClassificationRuleBasedImplementation.implementationAttributes.getter;
}

uint64_t DUCategoryClassificationRuleBasedImplementation.runTypedOnRequest(request:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch();
}

uint64_t DUCategoryClassificationRuleBasedImplementation.runTypedOnRequest(request:)()
{
  uint64_t v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  Swift::String v4;
  _QWORD *rawValue;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  char *v30;
  int64_t v31;
  uint64_t v32;

  v1 = (_QWORD *)(*(uint64_t (**)(void))(**(_QWORD **)(v0 + 16) + 136))();
  if (v1)
  {
    v2 = v1;
    (*(void (**)(void))((*MEMORY[0x24BEE4EA0] & *v1) + 0x88))();
    if (v3)
    {
      v28 = v2;
      v29 = v0;
      v32 = MEMORY[0x24BEE4AF8];
      v4 = String.lowercased()();
      swift_bridgeObjectRelease();
      if (one-time initialization token for heuristicKeywords == -1)
        goto LABEL_4;
      while (1)
      {
        swift_once();
LABEL_4:
        rawValue = heuristicKeywords._rawValue;
        v30 = (char *)heuristicKeywords._rawValue + 64;
        v6 = -1;
        v7 = -1 << *((_BYTE *)heuristicKeywords._rawValue + 32);
        if (-v7 < 64)
          v6 = ~(-1 << -(char)v7);
        v8 = v6 & *((_QWORD *)heuristicKeywords._rawValue + 8);
        v31 = (unint64_t)(63 - v7) >> 6;
        swift_bridgeObjectRetain();
        v9 = 0;
        while (v8)
        {
          while (1)
          {
            v10 = __clz(__rbit64(v8));
            v8 &= v8 - 1;
            v11 = v10 | (v9 << 6);
LABEL_24:
            v15 = (uint64_t *)(rawValue[6] + 16 * v11);
            v17 = *v15;
            v16 = v15[1];
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain();
            v18 = swift_bridgeObjectRetain();
            v19 = specialized Sequence.contains(where:)(v18, v4._countAndFlagsBits, (uint64_t)v4._object);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v19 & 1) != 0)
              break;
            swift_bridgeObjectRelease();
            if (!v8)
              goto LABEL_10;
          }
          v20 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUCategoryResult()), sel_init, v28);
          v21 = (_QWORD *)MEMORY[0x24BEE4EA0];
          v22 = (*(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & *v20) + 0x68))(v17, v16);
          (*(void (**)(uint64_t, double))((*v21 & *v20) + 0x80))(v22, 1.0);
          v23 = v20;
          MEMORY[0x22E2AFAFC]();
          if (*(_QWORD *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();

        }
LABEL_10:
        v12 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
        }
        else
        {
          if (v12 >= v31)
            goto LABEL_29;
          v13 = *(_QWORD *)&v30[8 * v12];
          ++v9;
          if (v13)
            goto LABEL_23;
          v9 = v12 + 1;
          if (v12 + 1 >= v31)
            goto LABEL_29;
          v13 = *(_QWORD *)&v30[8 * v9];
          if (v13)
            goto LABEL_23;
          v9 = v12 + 2;
          if (v12 + 2 >= v31)
            goto LABEL_29;
          v13 = *(_QWORD *)&v30[8 * v9];
          if (v13)
            goto LABEL_23;
          v14 = v12 + 3;
          if (v14 >= v31)
          {
LABEL_29:
            swift_bridgeObjectRelease();
            swift_release();

            return (*(uint64_t (**)(uint64_t, _QWORD))(v29 + 8))(v32, 0);
          }
          v13 = *(_QWORD *)&v30[8 * v14];
          if (v13)
          {
            v9 = v14;
LABEL_23:
            v8 = (v13 - 1) & v13;
            v11 = __clz(__rbit64(v13)) + (v9 << 6);
            goto LABEL_24;
          }
          while (1)
          {
            v9 = v14 + 1;
            if (__OFADD__(v14, 1))
              break;
            if (v9 >= v31)
              goto LABEL_29;
            v13 = *(_QWORD *)&v30[8 * v9];
            ++v14;
            if (v13)
              goto LABEL_23;
          }
        }
        __break(1u);
      }
    }
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v25 = swift_allocError();
    *(_QWORD *)v27 = 0xD000000000000017;
    *(_QWORD *)(v27 + 8) = 0x80000002284DB1B0;
    *(_BYTE *)(v27 + 16) = 0;

  }
  else
  {
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v25 = swift_allocError();
    *(_QWORD *)v26 = 0xD000000000000015;
    *(_QWORD *)(v26 + 8) = 0x80000002284DB0D0;
    *(_BYTE *)(v26 + 16) = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v25, 1);
}

uint64_t specialized Sequence.contains(where:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t result;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = a3;
  v7 = a1 + 56;
  v8 = 1 << *(_BYTE *)(a1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a1 + 56);
  v11 = (unint64_t)(v8 + 63) >> 6;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRetain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v10 &= v10 - 1;
      goto LABEL_5;
    }
    v14 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v14 >= v11)
      goto LABEL_24;
    v15 = *(_QWORD *)(v7 + 8 * v14);
    ++v13;
    if (!v15)
    {
      v13 = v14 + 1;
      if (v14 + 1 >= v11)
        goto LABEL_24;
      v15 = *(_QWORD *)(v7 + 8 * v13);
      if (!v15)
      {
        v13 = v14 + 2;
        if (v14 + 2 >= v11)
          goto LABEL_24;
        v15 = *(_QWORD *)(v7 + 8 * v13);
        if (!v15)
        {
          v13 = v14 + 3;
          if (v14 + 3 >= v11)
            goto LABEL_24;
          v15 = *(_QWORD *)(v7 + 8 * v13);
          if (!v15)
          {
            v16 = v14 + 4;
            if (v16 >= v11)
            {
LABEL_24:
              v17 = 0;
              goto LABEL_25;
            }
            v15 = *(_QWORD *)(v7 + 8 * v16);
            if (!v15)
            {
              while (1)
              {
                v13 = v16 + 1;
                if (__OFADD__(v16, 1))
                  goto LABEL_27;
                if (v13 >= v11)
                  goto LABEL_24;
                v15 = *(_QWORD *)(v7 + 8 * v13);
                ++v16;
                if (v15)
                  goto LABEL_22;
              }
            }
            v13 = v16;
          }
        }
      }
    }
LABEL_22:
    v10 = (v15 - 1) & v15;
LABEL_5:
    lazy protocol witness table accessor for type String and conformance String();
    result = StringProtocol.contains<A>(_:)();
    if ((result & 1) != 0)
    {
      v17 = 1;
LABEL_25:
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      return v17;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t DUCategoryClassificationRuleBasedImplementation.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t DUCategoryClassificationRuleBasedImplementation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t DUCategoryClassificationRuleBasedImplementation.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t DUCategoryClassificationRuleBasedImplementation.init()()
{
  uint64_t v0;

  return v0;
}

unint64_t protocol witness for static DUProcessingPhaseImplementation.implementationID.getter in conformance DUCategoryClassificationRuleBasedImplementation()
{
  return 0xD000000000000031;
}

void *protocol witness for static DUProcessingPhaseImplementation.implementationAttributes.getter in conformance DUCategoryClassificationRuleBasedImplementation()
{
  return &outlined read-only object #0 of protocol witness for static DUProcessingPhaseImplementation.implementationAttributes.getter in conformance DUCategoryClassificationRuleBasedImplementation;
}

uint64_t protocol witness for DUProcessingPhaseImplementation.runTypedOnRequest(request:) in conformance DUCategoryClassificationRuleBasedImplementation(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  *(_QWORD *)(v3 + 16) = a1;
  v7 = (uint64_t (*)(uint64_t))(**(int **)(**(_QWORD **)v2 + 80) + *(_QWORD *)(**(_QWORD **)v2 + 80));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v5;
  *v5 = v3;
  v5[1] = protocol witness for DUProcessingPhaseImplementation.runTypedOnRequest(request:) in conformance DUCategoryClassificationSmolBERToImplementation;
  return v7(a2);
}

uint64_t type metadata accessor for DUCategoryClassificationRuleBasedImplementation()
{
  return objc_opt_self();
}

uint64_t sub_22832642C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t static DUUserInterfaceUnderstandingSpecification.phaseID.getter()
{
  return 0xD000000000000022;
}

uint64_t DUUserInterfaceUnderstandingSpecification.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t DUUserInterfaceUnderstandingSpecification.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t DUUserInterfaceUnderstandingSpecification.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t DUUserInterfaceUnderstandingSpecification.init()()
{
  uint64_t v0;

  return v0;
}

unint64_t protocol witness for static DUProcessingPhaseSpecification.phaseID.getter in conformance DUUserInterfaceUnderstandingSpecification()
{
  return 0xD000000000000022;
}

uint64_t DUUserInterfaceUnderstandingSpecification.attachResultsToResponse(response:processingRequest:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  *(_QWORD *)(v2 + 80) = a1;
  v6 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:)
                                       + async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 88) = v4;
  *v4 = v2;
  v4[1] = DUUserInterfaceUnderstandingSpecification.attachResultsToResponse(response:processingRequest:);
  return v6(a2);
}

uint64_t DUUserInterfaceUnderstandingSpecification.attachResultsToResponse(response:processingRequest:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 96) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t DUUserInterfaceUnderstandingSpecification.attachResultsToResponse(response:processingRequest:)()
{
  uint64_t v0;
  unint64_t v1;
  _QWORD *v2;
  uint64_t (*v3)(void);
  id v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  void (*v13)(uint64_t, _QWORD);
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  id v19;
  _QWORD *v20;
  void *v21;
  _QWORD *v22;
  void (*v23)(uint64_t, _QWORD);
  Swift::String v24;

  v1 = *(_QWORD *)(v0 + 96);
  if (v1)
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4EA0];
    v3 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 80)) + 0xE0);
    v4 = (id)v3();
    if (!v4)
      v4 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUUserInterfaceUnderstandingResponse()), sel_init);
    v5 = (*(uint64_t (**)(id))((*v2 & **(_QWORD **)(v0 + 80)) + 0xE8))(v4);
    v6 = ((uint64_t (*)(uint64_t))v3)(v5);
    if (v6)
    {
      v7 = (_QWORD *)v6;
      v8 = (_QWORD *)v3();
      if (v8)
      {
        v9 = v8;
        v10 = (*(uint64_t (**)(void))((*v2 & *v8) + 0x60))();

      }
      else
      {
        swift_bridgeObjectRetain();
        v10 = v1;
      }
      (*(void (**)(uint64_t))((*v2 & *v7) + 0x68))(v10);

    }
    v11 = (_QWORD *)v3();
    if (v11)
    {
      v12 = v11;
      v13 = (void (*)(uint64_t, _QWORD))(*(uint64_t (**)(uint64_t))((*v2 & *v11) + 0x70))(v0 + 16);
      specialized Array.append<A>(contentsOf:)(v1);
      v13(v0 + 16, 0);

    }
    else
    {
      v14 = swift_bridgeObjectRelease();
    }
    v15 = ((uint64_t (*)(uint64_t))v3)(v14);
    if (v15)
    {
      v16 = (_QWORD *)v15;
      v17 = (_QWORD *)(*(uint64_t (**)(void))((*v2 & **(_QWORD **)(v0 + 80)) + 0x98))();
      if (!v17 || (v18 = v17, v19 = (id)(*(uint64_t (**)(void))((*v2 & *v17) + 0x98))(), v18, !v19))
        v19 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUDebugInfo()), sel_init);
      (*(void (**)(id))((*v2 & *v16) + 0x80))(v19);

    }
    v20 = (_QWORD *)v3();
    if (v20)
    {
      v21 = v20;
      v22 = (_QWORD *)(*(uint64_t (**)(void))((*v2 & *v20) + 0x78))();

      if (v22)
      {
        v23 = (void (*)(uint64_t, _QWORD))(*(uint64_t (**)(uint64_t))((*v2 & *v22) + 0x68))(v0 + 48);
        v24._object = (void *)0x80000002284DB220;
        v24._countAndFlagsBits = 0xD000000000000022;
        String.append(_:)(v24);
        v23(v0 + 48, 0);

      }
    }
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id DUUserInterfaceUnderstandingSpecification.associatedRequestTypes.getter()
{
  objc_class *v0;
  char *v1;
  objc_super v3;

  v0 = (objc_class *)type metadata accessor for DURequestContentType();
  v1 = (char *)objc_allocWithZone(v0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = 128;
  v3.receiver = v1;
  v3.super_class = v0;
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t protocol witness for TopLevelSpecificationProtocol.attachResultsToResponse(response:processingRequest:) in conformance DUUserInterfaceUnderstandingSpecification(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = partial apply for closure #2 in DUFoundInEventMultilingualBERTImplementation.loadModelHeadBundle();
  v5[10] = a1;
  v8 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:)
                                       + async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:));
  v6 = (_QWORD *)swift_task_alloc();
  v5[11] = v6;
  *v6 = v5;
  v6[1] = DUUserInterfaceUnderstandingSpecification.attachResultsToResponse(response:processingRequest:);
  return v8(a2);
}

id protocol witness for TopLevelSpecificationProtocol.associatedRequestTypes.getter in conformance DUUserInterfaceUnderstandingSpecification()
{
  objc_class *v0;
  char *v1;
  objc_super v3;

  v0 = (objc_class *)type metadata accessor for DURequestContentType();
  v1 = (char *)objc_allocWithZone(v0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = 128;
  v3.receiver = v1;
  v3.super_class = v0;
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t type metadata accessor for DUUserInterfaceUnderstandingSpecification()
{
  return objc_opt_self();
}

unint64_t static DUTopicEncodingSmolBERToSpecification.phaseID.getter()
{
  return 0xD00000000000001ELL;
}

uint64_t DUTopicEncodingSmolBERToSpecification.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t DUTopicEncodingSmolBERToSpecification.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t DUTopicEncodingSmolBERToSpecification.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t DUTopicEncodingSmolBERToSpecification.init()()
{
  uint64_t v0;

  return v0;
}

unint64_t protocol witness for static DUProcessingPhaseSpecification.phaseID.getter in conformance DUTopicEncodingSmolBERToSpecification()
{
  return 0xD00000000000001ELL;
}

uint64_t type metadata accessor for DUTopicEncodingSmolBERToSpecification()
{
  return objc_opt_self();
}

uint64_t specialized Sequence.contains(where:)()
{
  uint64_t result;
  Swift::String_optional v1;
  int v3;
  int v4;

  swift_bridgeObjectRetain();
  while (1)
  {
    v1 = String.Iterator.next()();
    result = v1.value._countAndFlagsBits;
    if (!v1.value._object)
    {
LABEL_17:
      swift_bridgeObjectRelease();
      return v1.value._object != 0;
    }
    if (!(((uint64_t)v1.value._object & 0x2000000000000000) != 0
         ? ((unint64_t)v1.value._object >> 56) & 0xF
         : v1.value._countAndFlagsBits & 0xFFFFFFFFFFFFLL))
      break;
    if (((uint64_t)v1.value._object & 0x1000000000000000) != 0)
    {
      v3 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if (((uint64_t)v1.value._object & 0x2000000000000000) == 0
        && (v1.value._countAndFlagsBits & 0x1000000000000000) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }
      v3 = _decodeScalar(_:startingAt:)();
    }
    v4 = v3;
    swift_bridgeObjectRelease();
    if ((v4 - 14) > 0xFFFFFFFB || (v4 - 8232) < 2 || v4 == 133)
      goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t one-time initialization function for structuredExtractionUIBlockList()
{
  Swift::Int v0;
  uint64_t result;

  v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for structuredExtractionUIBlockList);
  result = swift_arrayDestroy();
  structuredExtractionUIBlockList = v0;
  return result;
}

uint64_t one-time initialization function for structuredExtractionUIOffScreenIgnoreList()
{
  Swift::Int v0;
  uint64_t result;

  v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for structuredExtractionUIOffScreenIgnoreList);
  result = swift_arrayDestroy();
  structuredExtractionUIOffScreenIgnoreList = v0;
  return result;
}

unint64_t static DUStructuredExtractionDefaultImplementation.implementationID.getter()
{
  return 0xD00000000000002CLL;
}

uint64_t static DUStructuredExtractionDefaultImplementation.specification.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for DUStructuredExtractionSpecification();
  result = swift_allocObject();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for DUStructuredExtractionSpecification;
  *a1 = result;
  return result;
}

void *static DUStructuredExtractionDefaultImplementation.implementationAttributes.getter()
{
  return &outlined read-only object #0 of static DUStructuredExtractionDefaultImplementation.implementationAttributes.getter;
}

uint64_t DUStructuredExtractionDefaultImplementation.runTypedOnRequest(request:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[16] = a1;
  v2[17] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DUStructuredExtractionResult?);
  v2[18] = swift_task_alloc();
  v3 = type metadata accessor for DUStructuredExtractionResult(0);
  v2[19] = v3;
  v2[20] = *(_QWORD *)(v3 - 8);
  v2[21] = swift_task_alloc();
  v2[22] = swift_task_alloc();
  v4 = type metadata accessor for Logger();
  v2[23] = v4;
  v2[24] = *(_QWORD *)(v4 - 8);
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 240) = a1;
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t DUStructuredExtractionDefaultImplementation.runTypedOnRequest(request:)()
{
  uint64_t v0;
  _QWORD *v1;
  void *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);

  v1 = (_QWORD *)(*(uint64_t (**)(void))(**(_QWORD **)(v0 + 128) + 136))();
  *(_QWORD *)(v0 + 216) = v1;
  if (v1)
  {
    v2 = v1;
    v3 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v1) + 0xD8))();
    if (!v3
      || (v3 >> 62 ? (v4 = _CocoaArrayWrapper.endIndex.getter()) : (v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10)),
          swift_bridgeObjectRelease(),
          !v4))
    {
      type metadata accessor for DUCreateContextRequestSpecification();
      *(_QWORD *)(v0 + 224) = swift_allocObject();
      v10 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:)
                                            + async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:));
      v7 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 232) = v7;
      *v7 = v0;
      v7[1] = DUStructuredExtractionDefaultImplementation.runTypedOnRequest(request:);
      return v10(*(_QWORD *)(v0 + 128));
    }
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v5 = swift_allocError();
    *(_OWORD *)v6 = xmmword_2284C25B0;
    *(_BYTE *)(v6 + 16) = 0;

  }
  else
  {
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v5 = swift_allocError();
    *(_QWORD *)v9 = 0xD000000000000015;
    *(_QWORD *)(v9 + 8) = 0x80000002284DB0D0;
    *(_BYTE *)(v9 + 16) = 0;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v5, 1);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(void **)(v0 + 240);
  if (v1)
  {
    objc_msgSend(*(id *)(v0 + 240), sel_setType_, 10);
    objc_msgSend(v1, sel_setIncludeStructuredExtractionResults_, 1);
    objc_msgSend(v1, sel_setIncludeRequestInResponse_, 1);
    *(_QWORD *)(v0 + 56) = v0 + 120;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = DUStructuredExtractionDefaultImplementation.runTypedOnRequest(request:);
    v2 = swift_continuation_init();
    *(_QWORD *)(v0 + 80) = MEMORY[0x24BDAC760];
    v3 = (_QWORD *)(v0 + 80);
    v3[1] = 0x40000000;
    v3[2] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned CKContextResponse?) -> () with result type CKContextResponse?;
    v3[3] = &block_descriptor_1;
    v3[4] = v2;
    objc_msgSend(v1, sel_executeWithReply_, v3);
    return swift_continuation_await();
  }
  else
  {
    v5 = *(void **)(v0 + 216);
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v6 = swift_allocError();
    *(_QWORD *)v7 = 0xD00000000000002FLL;
    *(_QWORD *)(v7 + 8) = 0x80000002284DB340;
    *(_BYTE *)(v7 + 16) = 0;

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v6, 1);
  }
}

{
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  id v48;
  void *v49;
  unint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  void *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;

  v1 = *(void **)(v0 + 120);
  if (!v1)
    goto LABEL_10;
  v2 = objc_msgSend(*(id *)(v0 + 120), sel_debugRequest);
  if (!v2)
    goto LABEL_10;
  v3 = v2;
  v4 = objc_msgSend(v2, sel_uiElements);
  if (!v4)
  {

LABEL_10:
    Logger.init()();
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_2282CC000, v12, v13, "Received no UI Elements from Extraction ContextService", v14, 2u);
      MEMORY[0x22E2B117C](v14, -1, -1);
    }
    v15 = *(void **)(v0 + 240);
    v16 = *(void **)(v0 + 216);
    v18 = *(_QWORD *)(v0 + 192);
    v17 = *(_QWORD *)(v0 + 200);
    v19 = *(_QWORD *)(v0 + 184);

    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v20 = swift_allocError();
    *(_QWORD *)v21 = 0xD000000000000036;
    *(_QWORD *)(v21 + 8) = 0x80000002284DB390;
    v22 = 1;
    *(_BYTE *)(v21 + 16) = 1;

    goto LABEL_13;
  }
  v5 = v4;
  type metadata accessor for NSNumber(0, (unint64_t *)&lazy cache variable for type metadata for CKContextUIElement);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v7 = v6 >> 62;
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    v54 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v54)
    {
LABEL_6:
      v8 = objc_msgSend(v3, sel_preferredSceneIdentifiers);
      if (v8)
      {
        v9 = v8;
        v10 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

        if (!v7)
        {
LABEL_8:
          v11 = v6 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain();
LABEL_16:
          v64 = v11;
          specialized MutableCollection<>.sort(by:)((uint64_t *)&v64);
          v25 = v64;
          v26 = *(_QWORD *)(v0 + 136);
          swift_bridgeObjectRetain();
          swift_retain();
          v27 = specialized _ArrayProtocol.filter(_:)(v25, v26, v10);
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          v28 = specialized DUStructuredExtractionDefaultImplementation.groupUIElements(uiElements:)(v27);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v64 = MEMORY[0x24BEE4AF8];
          v29 = objc_msgSend(v3, sel_title);
          if (v29)
          {
            v30 = v29;
            v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v33 = v32;

          }
          else
          {
            v31 = 0;
            v33 = 0;
          }
          v34 = *(_QWORD *)(v0 + 152);
          v35 = *(_QWORD *)(v0 + 160);
          v36 = *(_QWORD *)(v0 + 144);
          DUStructuredExtractionDefaultImplementation.determineTitle(uiElements:requestTitle:)(v28, v31, v33, v36);
          swift_bridgeObjectRelease();
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v36, 1, v34) == 1)
          {
            outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(*(_QWORD *)(v0 + 144), &demangling cache variable for type metadata for DUStructuredExtractionResult?);
          }
          else
          {
            v38 = *(_QWORD *)(v0 + 168);
            v37 = *(_QWORD *)(v0 + 176);
            outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(*(_QWORD *)(v0 + 144), v37, type metadata accessor for DUStructuredExtractionResult);
            outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v37, v38, type metadata accessor for DUStructuredExtractionResult);
            v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
            v41 = *(_QWORD *)(v39 + 16);
            v40 = *(_QWORD *)(v39 + 24);
            if (v41 >= v40 >> 1)
              v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1, v41 + 1, 1, v39);
            v42 = *(_QWORD *)(v0 + 168);
            v43 = *(_QWORD *)(v0 + 176);
            v44 = *(_QWORD *)(v0 + 160);
            *(_QWORD *)(v39 + 16) = v41 + 1;
            outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v42, v39+ ((*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80))+ *(_QWORD *)(v44 + 72) * v41, type metadata accessor for DUStructuredExtractionResult);
            v64 = v39;
            outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v43, type metadata accessor for DUStructuredExtractionResult);
          }
          v45 = specialized DUStructuredExtractionDefaultImplementation.determineLiveTextResults(uiElements:)(v28);
          specialized Array.append<A>(contentsOf:)(v45);
          v46 = specialized DUStructuredExtractionDefaultImplementation.determinePersonResults(uiElements:)(v28);
          specialized Array.append<A>(contentsOf:)(v46);
          v47 = DUStructuredExtractionDefaultImplementation.determineDataDetectorResults(uiElements:)(v28);
          swift_bridgeObjectRelease();
          specialized Array.append<A>(contentsOf:)(v47);
          v48 = objc_msgSend(v3, sel_extractionItems);
          if (v48)
          {
            v49 = v48;
            type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for CKContextExtractionItem);
            v50 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            v51 = specialized DUStructuredExtractionDefaultImplementation.determineHomeAppExtractionResults(extractionItems:)(v50);
            swift_bridgeObjectRelease();
            specialized Array.append<A>(contentsOf:)(v51);
          }
          v52 = *(void **)(v0 + 240);
          v53 = *(void **)(v0 + 216);

          v22 = 0;
          v20 = v64;
          goto LABEL_13;
        }
      }
      else
      {
        v10 = 0;
        if (!v7)
          goto LABEL_8;
      }
      v24 = swift_bridgeObjectRetain();
      v11 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v24);
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
  }
  else if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  Logger.init()();
  v55 = Logger.logObject.getter();
  v56 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v55, v56))
  {
    v57 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v57 = 0;
    _os_log_impl(&dword_2282CC000, v55, v56, "Received no UI Elements from Extraction ContextService", v57, 2u);
    MEMORY[0x22E2B117C](v57, -1, -1);
  }
  v58 = *(void **)(v0 + 240);
  v59 = *(_QWORD *)(v0 + 208);
  v60 = *(void **)(v0 + 216);
  v61 = *(_QWORD *)(v0 + 184);
  v62 = *(_QWORD *)(v0 + 192);

  (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v59, v61);
  lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
  v20 = swift_allocError();
  *(_QWORD *)v63 = 0xD000000000000036;
  *(_QWORD *)(v63 + 8) = 0x80000002284DB390;
  v22 = 1;
  *(_BYTE *)(v63 + 16) = 1;

LABEL_13:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v20, v22);
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned CKContextResponse?) -> () with result type CKContextResponse?(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v6;

  v2 = *(_QWORD *)(a1 + 32);
  v6 = a2;
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 64) + 40);
  v4 = a2;
  outlined init with take of CKContextResponse?((uint64_t)&v6, v3);
  return swift_continuation_resume();
}

uint64_t DUStructuredExtractionDefaultImplementation.isRelevantUIForExtraction(uiElement:)(void *a1)
{
  id v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  double y;
  double height;
  id v9;
  void *v10;
  uint64_t v11;
  char v12;
  CGRect v13;

  v2 = objc_msgSend(a1, sel_text);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  v3 = String.count.getter();
  swift_bridgeObjectRelease();
  if (v3 < 3)
    return 0;
  v4 = objc_msgSend(a1, sel_text);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  v5 = String.count.getter();
  swift_bridgeObjectRelease();
  if (v5 > 1000)
    return 0;
  objc_msgSend(a1, sel_frameInWindow);
  y = v13.origin.y;
  height = v13.size.height;
  if (!CGRectIsEmpty(v13))
  {
    if (y >= 55.0 || height >= 100.0)
    {
      v9 = objc_msgSend(a1, sel_superviewClassNames);
      if (!v9)
        return 1;
      v10 = v9;
      v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (one-time initialization token for structuredExtractionUIBlockList != -1)
        swift_once();
      if ((specialized Set._isDisjoint<A>(with:)(v11, structuredExtractionUIBlockList) & 1) != 0)
      {
        if ((objc_msgSend(a1, sel_isOnScreen) & 1) != 0)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          if (one-time initialization token for structuredExtractionUIOffScreenIgnoreList != -1)
            swift_once();
          v12 = specialized Set._isDisjoint<A>(with:)(v11, structuredExtractionUIOffScreenIgnoreList);
          swift_bridgeObjectRelease();
          if ((v12 & 1) == 0)
            return 0;
        }
        return 1;
      }
      swift_bridgeObjectRelease();
    }
    return 0;
  }
  return 1;
}

void DUStructuredExtractionDefaultImplementation.determineTitle(uiElements:requestTitle:)(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  id v7;
  unint64_t v8;
  float v9;
  uint64_t v10;
  __objc2_ivar *v11;
  char **v12;
  float v13;
  id v14;
  id v15;
  id v16;
  char **v17;
  id v18;
  id v19;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  float v31;
  id v32;
  uint64_t v33;
  char **v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  id v43;
  id v44;
  float v45;
  void *v46;
  void *v47;
  id v48;
  id v49;
  id v50;
  id v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  void *v56;
  id v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  _OWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  const char *v99;
  id v100;
  unint64_t v101;
  id v102;

  v91 = a2;
  v97 = a4;
  v98 = type metadata accessor for DUStructuredExtractionResult(0);
  v96 = *(_QWORD *)(v98 - 8);
  MEMORY[0x24BDAC7A8](v98);
  v92 = a3;
  v93 = (char *)&v90 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62)
  {
LABEL_52:
    swift_bridgeObjectRetain();
    v7 = (id)_CocoaArrayWrapper.endIndex.getter();
    if (v7)
      goto LABEL_3;
LABEL_53:
    swift_bridgeObjectRelease();
    v47 = 0;
    goto LABEL_54;
  }
  v7 = *(id *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v7)
    goto LABEL_53;
LABEL_3:
  v8 = a1 & 0xC000000000000001;
  v9 = 17.0;
  v10 = 4;
  v11 = &stru_24F10A000;
  v12 = &selRef_setExportedObject_;
  v99 = "VKCImageTextSelectionView";
  v100 = 0;
  v95 = 0x80000002284DB460;
  v13 = 17.0;
  v101 = a1 & 0xC000000000000001;
  v102 = v7;
  while (1)
  {
    if (v8)
      v14 = (id)MEMORY[0x22E2AFF34](v10 - 4, a1);
    else
      v14 = *(id *)(a1 + 8 * v10);
    v15 = v14;
    v16 = (id)(v10 - 3);
    if (__OFADD__(v10 - 4, 1))
    {
      __break(1u);
      goto LABEL_52;
    }
    if ((objc_msgSend(v14, *(SEL *)&v11[101].align) & 1) != 0)
      break;
LABEL_5:

    ++v10;
    if (v16 == v7)
    {
      swift_bridgeObjectRelease();
      v46 = 0;
      v47 = 0;
      v48 = v100;
      if (!v100)
        goto LABEL_54;
      goto LABEL_37;
    }
  }
  v17 = v12;
  v18 = objc_msgSend(v15, v12[79]);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  LOBYTE(v18) = specialized Sequence.contains(where:)();
  swift_bridgeObjectRelease();
  if ((v18 & 1) != 0)
  {
LABEL_4:
    v12 = v17;
    v8 = v101;
    v7 = v102;
    goto LABEL_5;
  }
  v19 = objc_msgSend(v15, sel_superviewClassNames);
  if (!v19)
  {
LABEL_23:
    objc_msgSend(v15, sel_fontSize);
    if (v13 <= v31)
    {
      v32 = objc_msgSend(v15, (SEL)v17 + 3656);
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      v33 = String.count.getter();
      swift_bridgeObjectRelease();
      if (v33 >= 4)
      {
        if (v100)
        {
          v34 = v17;
          v35 = objc_msgSend(v100, (SEL)v17 + 3656);
          v94 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v37 = v36;

        }
        else
        {
          v94 = 0;
          v37 = 0;
          v34 = v17;
        }
        v38 = objc_msgSend(v15, (SEL)v34 + 3656);
        v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v41 = v40;

        if (v37)
        {
          if (v94 == v39 && v37 == v41)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {
            v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v42 & 1) == 0)
              v9 = v13;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          v9 = v13;
        }
        v12 = v17;
        v7 = v102;
        v43 = v100;
        v8 = v101;
        v44 = v15;

        objc_msgSend(v44, sel_fontSize);
        v13 = v45;
        v100 = v15;
        v11 = &stru_24F10A000;
        goto LABEL_5;
      }
    }
    goto LABEL_4;
  }
  v20 = v19;
  v21 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!v21[2])
  {
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  v23 = v21[4];
  v22 = v21[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v23 == 0xD00000000000001CLL && v22 == v95)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v24 & 1) == 0)
      goto LABEL_23;
  }
  v25 = objc_msgSend(v15, sel_className);
  if (!v25)
    goto LABEL_23;
  v26 = v25;
  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v29 = v28;

  if (v27 != 0x6C6562614C4955 || v29 != 0xE700000000000000)
  {
    v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v30 & 1) != 0)
      goto LABEL_48;
    goto LABEL_23;
  }
  swift_bridgeObjectRelease();
LABEL_48:
  swift_bridgeObjectRelease();
  v46 = v15;
  v12 = v17;
  v48 = v100;
  if (!v100)
  {
    v56 = 0;
    v47 = 0;
    v46 = v15;
    if (!v15)
      goto LABEL_54;
LABEL_45:
    v57 = v46;
    v58 = objc_msgSend(v15, v12[79]);
    v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v61 = v60;

    v62 = (uint64_t)v93;
    *((_OWORD *)v93 + 4) = 0u;
    *(_OWORD *)(v62 + 80) = 0u;
    *(_OWORD *)(v62 + 32) = 0u;
    *(_OWORD *)(v62 + 48) = 0u;
    v63 = (int *)v98;
    v64 = v62 + *(int *)(v98 + 40);
    v65 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v64, 1, 1, v65);
    *(_QWORD *)(v62 + v63[11]) = 0;
    v66 = v62 + v63[12];
    v67 = type metadata accessor for CalendarEvent(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 56))(v66, 1, 1, v67);
    v68 = (_QWORD *)(v62 + v63[13]);
    *v68 = 0;
    v68[1] = 0;
    v69 = (_QWORD *)(v62 + v63[14]);
    v70 = (_QWORD *)(v62 + v63[15]);
    v71 = v63[16];
    *(_QWORD *)v62 = v59;
    *(_QWORD *)(v62 + 8) = v61;
    objc_msgSend(v15, sel_frameInWindow);
    *v69 = v72;
    v69[1] = v73;
    v69[2] = v74;
    v69[3] = v75;
    objc_msgSend(v15, sel_absoluteOriginOnScreen);
    *v70 = v76;
    v70[1] = v77;
    *(_BYTE *)(v62 + v71) = objc_msgSend(v15, sel_isOnScreen);

    *(_QWORD *)(v62 + 16) = 0x656C746974;
    *(_QWORD *)(v62 + 24) = 0xE500000000000000;
    v78 = v97;
    outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v62, v97, type metadata accessor for DUStructuredExtractionResult);
    (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v96 + 56))(v78, 0, 1, v63);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v62, type metadata accessor for DUStructuredExtractionResult);

    return;
  }
LABEL_37:
  v49 = v48;
  v50 = v48;
  v51 = objc_msgSend(v50, v12[79]);
  v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v54 = v53;

  swift_bridgeObjectRelease();
  if (v46)
  {

    v15 = v46;
LABEL_44:
    v56 = v49;
    goto LABEL_45;
  }
  v55 = v52 & 0xFFFFFFFFFFFFLL;
  if ((v54 & 0x2000000000000000) != 0)
    v55 = HIBYTE(v54) & 0xF;
  if (v55 && (float)(v13 - v9) > 1.5)
  {
    v15 = v50;
    v46 = 0;
    goto LABEL_44;
  }

  v47 = v49;
LABEL_54:
  v102 = v47;
  v79 = v92;
  if (v92)
  {
    v80 = (uint64_t)v93;
    *((_OWORD *)v93 + 4) = 0u;
    *(_OWORD *)(v80 + 80) = 0u;
    *(_OWORD *)(v80 + 32) = 0u;
    *(_OWORD *)(v80 + 48) = 0u;
    v81 = (int *)v98;
    v82 = v80 + *(int *)(v98 + 40);
    v83 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v83 - 8) + 56))(v82, 1, 1, v83);
    *(_QWORD *)(v80 + v81[11]) = 0;
    v84 = v80 + v81[12];
    v85 = type metadata accessor for CalendarEvent(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v85 - 8) + 56))(v84, 1, 1, v85);
    v86 = (_QWORD *)(v80 + v81[13]);
    *v86 = 0;
    v86[1] = 0;
    v87 = (_OWORD *)(v80 + v81[14]);
    *v87 = 0u;
    v87[1] = 0u;
    v88 = (_QWORD *)(v80 + v81[15]);
    *v88 = 0;
    v88[1] = 0;
    *(_BYTE *)(v80 + v81[16]) = 0;
    *(_QWORD *)v80 = v91;
    *(_QWORD *)(v80 + 8) = v79;
    *(_QWORD *)(v80 + 16) = 0x656C746974;
    *(_QWORD *)(v80 + 24) = 0xE500000000000000;
    v89 = v97;
    outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v80, v97, type metadata accessor for DUStructuredExtractionResult);
    (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v96 + 56))(v89, 0, 1, v81);
    swift_bridgeObjectRetain();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v80, type metadata accessor for DUStructuredExtractionResult);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v96 + 56))(v97, 1, 1, v98);
  }

}

unint64_t DUStructuredExtractionDefaultImplementation.determineDataDetectorResults(uiElements:)(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t i;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  BOOL v20;
  unint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  void *v29;
  Swift::Int v30;
  id v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  void *v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  char *v45;
  unsigned int v46;
  _OWORD *v47;
  int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t, uint64_t, _QWORD *);
  _QWORD *v54;
  _OWORD *v55;
  _QWORD *v56;
  char *v57;
  char *v58;
  id v59;
  void *v60;
  id v61;
  void *v62;
  id v63;
  id v64;
  _QWORD *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char isUniquelyReferenced_nonNull_native;
  char v71;
  unint64_t v72;
  uint64_t v73;
  _BOOL8 v74;
  uint64_t v75;
  char v76;
  unint64_t v77;
  char v78;
  void *v79;
  _QWORD *v80;
  int v81;
  id v82;
  void *v83;
  id v84;
  void *v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  id v97;
  void *v98;
  id v99;
  void *v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  id v106;
  void *v107;
  id v108;
  void *v109;
  id v110;
  char *v111;
  uint64_t v112;
  unint64_t v113;
  char v114;
  char v115;
  char v116;
  uint64_t *v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  id v122;
  id v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  char v129;
  unint64_t v130;
  uint64_t v131;
  _BOOL8 v132;
  uint64_t v133;
  char v134;
  unint64_t v135;
  char v136;
  unint64_t v137;
  char v138;
  char v139;
  char v140;
  uint64_t *v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  id v146;
  id v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  char v153;
  unint64_t v154;
  uint64_t v155;
  _BOOL8 v156;
  uint64_t v157;
  char v158;
  unint64_t v159;
  char v160;
  unint64_t v161;
  char v162;
  char v163;
  char v164;
  uint64_t *v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  id v170;
  id v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char v176;
  char v177;
  unint64_t v178;
  uint64_t v179;
  _BOOL8 v180;
  uint64_t v181;
  char v182;
  unint64_t v183;
  char v184;
  unint64_t v185;
  char v186;
  char v187;
  char v188;
  uint64_t *v189;
  uint64_t *v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  id v194;
  id v195;
  void *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char v200;
  char v201;
  unint64_t v202;
  uint64_t v203;
  _BOOL8 v204;
  uint64_t v205;
  char v206;
  unint64_t v207;
  char v208;
  unint64_t v209;
  char v210;
  char v211;
  char v212;
  uint64_t *v213;
  uint64_t *v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  unint64_t v218;
  unint64_t v219;
  char *v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  id v225;
  unint64_t v226;
  uint64_t v227;
  unint64_t v228;
  id v229;
  unint64_t v230;
  uint64_t v231;
  char *v232;
  id v233;
  id v234;
  uint64_t v235;
  uint64_t v236;
  _OWORD *v237;
  uint64_t v238;
  void (*v239)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  _QWORD *v243;
  _QWORD *v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  unint64_t v249;
  unint64_t v250;
  void *v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  unint64_t v256;
  _QWORD *v257;
  uint64_t v258;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CalendarEvent?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v221 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (_QWORD *)type metadata accessor for CalendarEvent(0);
  v245 = *(v5 - 1);
  MEMORY[0x24BDAC7A8](v5);
  v227 = (uint64_t)&v221 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v7);
  v221 = (char *)&v221 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v238 = type metadata accessor for DUStructuredExtractionResult(0);
  v235 = *(_QWORD *)(v238 - 8);
  v9 = MEMORY[0x24BDAC7A8](v238);
  v236 = (uint64_t)&v221 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v221 - v12;
  v228 = a1;
  if (a1 >> 62)
    goto LABEL_166;
  v14 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (i = v14; i; i = _CocoaArrayWrapper.endIndex.getter())
  {
    v224 = i;
    v225 = (id)objc_opt_self();
    v16 = 0;
    v17 = v228;
    v226 = v228 & 0xC000000000000001;
    v223 = v228 & 0xFFFFFFFFFFFFFF8;
    v222 = v228 + 32;
    v237 = v13 + 32;
    v234 = (id)*MEMORY[0x24BDD12B8];
    v18 = MEMORY[0x24BEE4AF8];
    v231 = *MEMORY[0x24BE2B1E8];
    v232 = v4;
    v244 = v5;
    while (v226)
    {
      v19 = (id)MEMORY[0x22E2AFF34](v16, v17);
      v20 = __OFADD__(v16, 1);
      v21 = v16 + 1;
      if (v20)
        goto LABEL_154;
LABEL_11:
      v230 = v21;
      v229 = v19;
      v22 = objc_msgSend(v19, sel_text);
      v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v25 = v24;

      v257 = (_QWORD *)v23;
      v258 = v25;
      v255 = 10;
      v256 = 0xE100000000000000;
      v253 = 32;
      v254 = 0xE100000000000000;
      lazy protocol witness table accessor for type String and conformance String();
      v26 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      v28 = (unint64_t)v27;
      swift_bridgeObjectRelease();
      v233 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE2B378]), sel_initWithScannerType_passiveIntent_, 0, 1);
      v29 = (void *)MEMORY[0x22E2AF8EC](v26, v28);
      v243 = (_QWORD *)v28;
      if ((v28 & 0x1000000000000000) != 0)
        v30 = String.UTF16View._foreignCount()();
      else
        v30 = String.UTF16View._nativeGetOffset(for:)();
      v31 = objc_msgSend(v225, sel_scanString_range_configuration_, v29, 0, v30, v233);

      type metadata accessor for NSNumber(0, (unint64_t *)&lazy cache variable for type metadata for DDScannerResult);
      v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v32 >> 62)
      {
        swift_bridgeObjectRetain();
        v33 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        v5 = v243;
        if (v33)
        {
LABEL_15:
          v250 = v32 & 0xC000000000000001;
          v34 = 4;
          v246 = v26;
          v247 = v32;
          v241 = v33;
          do
          {
            v35 = v34 - 4;
            if (v250)
            {
              v36 = (id)MEMORY[0x22E2AFF34](v34 - 4, v32);
              v20 = __OFADD__(v35, 1);
              v37 = v34 - 3;
              if (v20)
                goto LABEL_153;
            }
            else
            {
              v36 = *(id *)(v32 + 8 * v34);
              v20 = __OFADD__(v35, 1);
              v37 = v34 - 3;
              if (v20)
              {
LABEL_153:
                __break(1u);
                goto LABEL_154;
              }
            }
            v38 = v36;
            objc_msgSend(v36, sel_urlificationRange);
            Range<>.init(_:in:)();
            if ((v39 & 1) != 0)
            {

            }
            else
            {
              v248 = v37;
              v249 = v18;
              v252 = v34;
              v40 = String.subscript.getter();
              v41 = MEMORY[0x22E2AF988](v40);
              v43 = v42;
              swift_bridgeObjectRelease();
              v44 = objc_msgSend(v38, sel_type);
              v242 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              v4 = v45;

              v251 = v38;
              v46 = objc_msgSend(v38, sel_category);
              *((_QWORD *)v13 + 2) = 0;
              *((_QWORD *)v13 + 3) = 0xE000000000000000;
              v47 = v237;
              *v237 = 0u;
              v47[1] = 0u;
              v47[2] = 0u;
              v47[3] = 0u;
              v48 = (int *)v238;
              v49 = (uint64_t)&v13[*(int *)(v238 + 40)];
              v50 = type metadata accessor for URL();
              v239 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56);
              v240 = v49;
              v239(v49, 1, 1, v50);
              *(_QWORD *)&v13[v48[11]] = 0;
              v51 = (uint64_t)&v13[v48[12]];
              v52 = (uint64_t)v13;
              v53 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(v245 + 56);
              v53(v51, 1, 1, v244);
              v54 = (_QWORD *)(v52 + v48[13]);
              *v54 = 0;
              v54[1] = 0;
              v55 = (_OWORD *)(v52 + v48[14]);
              *v55 = 0u;
              v55[1] = 0u;
              v56 = (_QWORD *)(v52 + v48[15]);
              *v56 = 0;
              v56[1] = 0;
              *(_BYTE *)(v52 + v48[16]) = 0;
              *(_QWORD *)v52 = v41;
              *(_QWORD *)(v52 + 8) = v43;
              v57 = (char *)v52;
              LODWORD(v56) = v46 - 1;
              v18 = v249;
              v34 = v252;
              switch((int)v56)
              {
                case 0:
                  *(_QWORD *)(v52 + 16) = 7107189;
                  *(_QWORD *)(v52 + 24) = 0xE300000000000000;
                  if (!v231)
                  {
                    __break(1u);
LABEL_170:
                    type metadata accessor for NSTextCheckingKey(0);
                    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                    __break(1u);
                    JUMPOUT(0x228329720);
                  }
                  v13 = (char *)v52;
                  if (v242 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v4 == v58)
                  {
                    swift_bridgeObjectRelease_n();
LABEL_44:
                    v97 = objc_allocWithZone(MEMORY[0x24BDC6CC0]);
                    v98 = v251;
                    v99 = objc_msgSend(v97, sel_initWithDDScannerResult_, v251);
                    v32 = v247;
                    if (v99)
                    {
                      v100 = v99;
                      v101 = objc_msgSend(v99, sel_emailAddress);
                      v102 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                      v104 = v103;

                      *((_QWORD *)v57 + 10) = v102;
                      *((_QWORD *)v57 + 11) = v104;
                      goto LABEL_142;
                    }

                    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v57, type metadata accessor for DUStructuredExtractionResult);
                    v5 = v243;
                    goto LABEL_66;
                  }
                  v96 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if ((v96 & 1) != 0)
                    goto LABEL_44;
                  v106 = objc_allocWithZone(MEMORY[0x24BDC6CD0]);
                  v107 = v251;
                  v108 = objc_msgSend(v106, sel_initWithDDScannerResult_, v251);
                  if (v108)
                  {
                    v109 = v108;
                    v110 = objc_msgSend(v108, sel_URL);
                    v111 = v221;
                    static URL._unconditionallyBridgeFromObjectiveC(_:)();

                    v239((uint64_t)v111, 0, 1, v50);
                    v112 = (uint64_t)v111;
                    v13 = v57;
                    outlined assign with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v112, v240, &demangling cache variable for type metadata for URL?);
                    v32 = v247;
                    goto LABEL_142;
                  }

                  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v57, type metadata accessor for DUStructuredExtractionResult);
                  v5 = v243;
                  v32 = v247;
LABEL_66:
                  v33 = v241;
                  v34 = v252;
                  goto LABEL_148;
                case 1:
                  swift_bridgeObjectRelease();
                  v13 = (char *)v52;
                  *(_QWORD *)(v52 + 16) = 0x656E6F6870;
                  *(_QWORD *)(v52 + 24) = 0xE500000000000000;
                  v82 = objc_allocWithZone(MEMORY[0x24BDC6CD8]);
                  v83 = v251;
                  v84 = objc_msgSend(v82, sel_initWithDDScannerResult_, v251);
                  v32 = v247;
                  if (!v84)
                  {

                    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v57, type metadata accessor for DUStructuredExtractionResult);
                    v5 = v243;
                    v33 = v241;
                    goto LABEL_148;
                  }
                  v85 = v84;
                  v86 = objc_msgSend(v84, sel_phoneNumber);
                  v87 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                  v89 = v88;

                  *((_QWORD *)v57 + 6) = v87;
                  *((_QWORD *)v57 + 7) = v89;
                  v90 = objc_msgSend(v85, sel_label);
                  if (v90)
                  {
                    v91 = v90;
                    v92 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                    v94 = v93;

                  }
                  else
                  {

                    v92 = 0;
                    v94 = 0;
                  }
                  *((_QWORD *)v57 + 8) = v92;
                  *((_QWORD *)v57 + 9) = v94;
                  goto LABEL_142;
                case 2:
                  swift_bridgeObjectRelease();
                  v13 = (char *)v52;
                  *(_QWORD *)(v52 + 16) = 0x73736572646461;
                  *(_QWORD *)(v52 + 24) = 0xE700000000000000;
                  v59 = objc_allocWithZone(MEMORY[0x24BDC6CE0]);
                  v60 = v251;
                  v61 = objc_msgSend(v59, sel_initWithDDScannerResult_, v251);
                  v32 = v247;
                  v33 = v241;
                  if (v61)
                  {
                    v62 = v61;
                    v63 = objc_msgSend(v61, sel_street);
                    if (v63)
                    {

                      v4 = (char *)v234;
                      v242 = (uint64_t)v62;
                      v64 = objc_msgSend(v62, sel_street);
                      v65 = (_QWORD *)MEMORY[0x24BEE4B00];
                      if (v64)
                      {
                        v66 = v64;
                        v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                        v69 = v68;

                        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                        v257 = v65;
                        v5 = v65;
                        v72 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v4);
                        v73 = v65[2];
                        v74 = (v71 & 1) == 0;
                        v75 = v73 + v74;
                        if (__OFADD__(v73, v74))
                          goto LABEL_155;
                        v76 = v71;
                        if (v65[3] >= v75)
                        {
                          v62 = (void *)v242;
                          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                            specialized _NativeDictionary.copy()();
                        }
                        else
                        {
                          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v75, isUniquelyReferenced_nonNull_native);
                          v77 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v4);
                          v62 = (void *)v242;
                          if ((v76 & 1) != (v78 & 1))
                            goto LABEL_170;
                          v72 = v77;
                        }
                        v32 = v247;
                        v5 = v257;
                        if ((v76 & 1) != 0)
                        {
                          v117 = (uint64_t *)(v257[7] + 16 * v72);
                          swift_bridgeObjectRelease();
                          *v117 = v67;
                          v117[1] = v69;
                        }
                        else
                        {
                          v257[(v72 >> 6) + 8] |= 1 << v72;
                          *(_QWORD *)(v5[6] + 8 * v72) = v4;
                          v118 = (uint64_t *)(v5[7] + 16 * v72);
                          *v118 = v67;
                          v118[1] = v69;
                          v119 = v5[2];
                          v20 = __OFADD__(v119, 1);
                          v120 = v119 + 1;
                          if (v20)
                            goto LABEL_161;
                          v5[2] = v120;
                          v121 = v4;
                        }

                        swift_bridgeObjectRelease();
                      }
                      else
                      {
                        swift_bridgeObjectRetain();
                        v113 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v4);
                        v115 = v114;
                        swift_bridgeObjectRelease();
                        if ((v115 & 1) != 0)
                        {
                          v116 = swift_isUniquelyReferenced_nonNull_native();
                          v257 = v65;
                          v5 = v65;
                          v62 = (void *)v242;
                          if ((v116 & 1) == 0)
                          {
                            specialized _NativeDictionary.copy()();
                            v5 = v257;
                          }

                          specialized _NativeDictionary._delete(at:)(v113, (uint64_t)v5);
                          swift_bridgeObjectRelease();

                          swift_bridgeObjectRelease();
                        }
                        else
                        {

                          v5 = v65;
                          v62 = (void *)v242;
                        }
                      }
                    }
                    else
                    {
                      v5 = (_QWORD *)MEMORY[0x24BEE4B00];
                    }
                    v122 = objc_msgSend(v62, sel_city);
                    if (v122)
                    {

                      v4 = (char *)v234;
                      v123 = objc_msgSend(v62, sel_city);
                      if (v123)
                      {
                        v124 = v123;
                        v125 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                        v127 = v126;

                        v128 = swift_isUniquelyReferenced_nonNull_native();
                        v257 = v5;
                        v130 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v4);
                        v131 = v5[2];
                        v132 = (v129 & 1) == 0;
                        v133 = v131 + v132;
                        if (__OFADD__(v131, v132))
                          goto LABEL_156;
                        v134 = v129;
                        if (v5[3] >= v133)
                        {
                          if ((v128 & 1) == 0)
                            specialized _NativeDictionary.copy()();
                        }
                        else
                        {
                          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v133, v128);
                          v135 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v4);
                          if ((v134 & 1) != (v136 & 1))
                            goto LABEL_170;
                          v130 = v135;
                        }
                        v32 = v247;
                        v5 = v257;
                        if ((v134 & 1) != 0)
                        {
                          v141 = (uint64_t *)(v257[7] + 16 * v130);
                          swift_bridgeObjectRelease();
                          *v141 = v125;
                          v141[1] = v127;
                        }
                        else
                        {
                          v257[(v130 >> 6) + 8] |= 1 << v130;
                          *(_QWORD *)(v5[6] + 8 * v130) = v4;
                          v142 = (uint64_t *)(v5[7] + 16 * v130);
                          *v142 = v125;
                          v142[1] = v127;
                          v143 = v5[2];
                          v20 = __OFADD__(v143, 1);
                          v144 = v143 + 1;
                          if (v20)
                            goto LABEL_162;
                          v5[2] = v144;
                          v145 = v4;
                        }

                        swift_bridgeObjectRelease();
                      }
                      else
                      {
                        swift_bridgeObjectRetain();
                        v137 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v4);
                        v139 = v138;
                        swift_bridgeObjectRelease();
                        if ((v139 & 1) != 0)
                        {
                          v140 = swift_isUniquelyReferenced_nonNull_native();
                          v257 = v5;
                          if ((v140 & 1) == 0)
                          {
                            specialized _NativeDictionary.copy()();
                            v5 = v257;
                          }

                          specialized _NativeDictionary._delete(at:)(v137, (uint64_t)v5);
                          swift_bridgeObjectRelease();

                          swift_bridgeObjectRelease();
                        }
                        else
                        {

                        }
                      }
                    }
                    v146 = objc_msgSend(v62, sel_state);
                    if (v146)
                    {

                      v4 = (char *)v234;
                      v147 = objc_msgSend(v62, sel_state);
                      if (v147)
                      {
                        v148 = v147;
                        v149 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                        v151 = v150;

                        v152 = swift_isUniquelyReferenced_nonNull_native();
                        v257 = v5;
                        v154 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v4);
                        v155 = v5[2];
                        v156 = (v153 & 1) == 0;
                        v157 = v155 + v156;
                        if (__OFADD__(v155, v156))
                          goto LABEL_157;
                        v158 = v153;
                        if (v5[3] >= v157)
                        {
                          if ((v152 & 1) == 0)
                            specialized _NativeDictionary.copy()();
                        }
                        else
                        {
                          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v157, v152);
                          v159 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v4);
                          if ((v158 & 1) != (v160 & 1))
                            goto LABEL_170;
                          v154 = v159;
                        }
                        v32 = v247;
                        v5 = v257;
                        if ((v158 & 1) != 0)
                        {
                          v165 = (uint64_t *)(v257[7] + 16 * v154);
                          swift_bridgeObjectRelease();
                          *v165 = v149;
                          v165[1] = v151;
                        }
                        else
                        {
                          v257[(v154 >> 6) + 8] |= 1 << v154;
                          *(_QWORD *)(v5[6] + 8 * v154) = v4;
                          v166 = (uint64_t *)(v5[7] + 16 * v154);
                          *v166 = v149;
                          v166[1] = v151;
                          v167 = v5[2];
                          v20 = __OFADD__(v167, 1);
                          v168 = v167 + 1;
                          if (v20)
                            goto LABEL_163;
                          v5[2] = v168;
                          v169 = v4;
                        }

                        swift_bridgeObjectRelease();
                      }
                      else
                      {
                        swift_bridgeObjectRetain();
                        v161 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v4);
                        v163 = v162;
                        swift_bridgeObjectRelease();
                        if ((v163 & 1) != 0)
                        {
                          v164 = swift_isUniquelyReferenced_nonNull_native();
                          v257 = v5;
                          if ((v164 & 1) == 0)
                          {
                            specialized _NativeDictionary.copy()();
                            v5 = v257;
                          }

                          specialized _NativeDictionary._delete(at:)(v161, (uint64_t)v5);
                          swift_bridgeObjectRelease();

                          swift_bridgeObjectRelease();
                        }
                        else
                        {

                        }
                      }
                    }
                    v170 = objc_msgSend(v62, sel_postalCode);
                    if (v170)
                    {

                      v4 = (char *)v234;
                      v171 = objc_msgSend(v62, sel_postalCode);
                      if (v171)
                      {
                        v172 = v171;
                        v173 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                        v175 = v174;

                        v176 = swift_isUniquelyReferenced_nonNull_native();
                        v257 = v5;
                        v178 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v4);
                        v179 = v5[2];
                        v180 = (v177 & 1) == 0;
                        v181 = v179 + v180;
                        if (__OFADD__(v179, v180))
                          goto LABEL_158;
                        v182 = v177;
                        if (v5[3] >= v181)
                        {
                          if ((v176 & 1) == 0)
                            specialized _NativeDictionary.copy()();
                        }
                        else
                        {
                          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v181, v176);
                          v183 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v4);
                          if ((v182 & 1) != (v184 & 1))
                            goto LABEL_170;
                          v178 = v183;
                        }
                        v32 = v247;
                        v5 = v257;
                        if ((v182 & 1) != 0)
                        {
                          v189 = (uint64_t *)(v257[7] + 16 * v178);
                          swift_bridgeObjectRelease();
                          *v189 = v173;
                          v189[1] = v175;
                        }
                        else
                        {
                          v257[(v178 >> 6) + 8] |= 1 << v178;
                          *(_QWORD *)(v5[6] + 8 * v178) = v4;
                          v190 = (uint64_t *)(v5[7] + 16 * v178);
                          *v190 = v173;
                          v190[1] = v175;
                          v191 = v5[2];
                          v20 = __OFADD__(v191, 1);
                          v192 = v191 + 1;
                          if (v20)
                            goto LABEL_164;
                          v5[2] = v192;
                          v193 = v4;
                        }

                        swift_bridgeObjectRelease();
                      }
                      else
                      {
                        swift_bridgeObjectRetain();
                        v185 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v4);
                        v187 = v186;
                        swift_bridgeObjectRelease();
                        if ((v187 & 1) != 0)
                        {
                          v188 = swift_isUniquelyReferenced_nonNull_native();
                          v257 = v5;
                          if ((v188 & 1) == 0)
                          {
                            specialized _NativeDictionary.copy()();
                            v5 = v257;
                          }

                          specialized _NativeDictionary._delete(at:)(v185, (uint64_t)v5);
                          swift_bridgeObjectRelease();

                          swift_bridgeObjectRelease();
                        }
                        else
                        {

                        }
                      }
                    }
                    v194 = objc_msgSend(v62, sel_country);
                    if (v194)
                    {

                      v4 = (char *)v234;
                      v195 = objc_msgSend(v62, sel_country);
                      if (v195)
                      {
                        v196 = v195;
                        v197 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                        v199 = v198;

                        v200 = swift_isUniquelyReferenced_nonNull_native();
                        v257 = v5;
                        v202 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v4);
                        v203 = v5[2];
                        v204 = (v201 & 1) == 0;
                        v205 = v203 + v204;
                        if (__OFADD__(v203, v204))
                          goto LABEL_159;
                        v206 = v201;
                        if (v5[3] >= v205)
                        {
                          if ((v200 & 1) == 0)
                            specialized _NativeDictionary.copy()();
                        }
                        else
                        {
                          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v205, v200);
                          v207 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v4);
                          if ((v206 & 1) != (v208 & 1))
                            goto LABEL_170;
                          v202 = v207;
                        }
                        v32 = v247;
                        v5 = v257;
                        if ((v206 & 1) != 0)
                        {
                          v213 = (uint64_t *)(v257[7] + 16 * v202);
                          swift_bridgeObjectRelease();
                          *v213 = v197;
                          v213[1] = v199;
                        }
                        else
                        {
                          v257[(v202 >> 6) + 8] |= 1 << v202;
                          *(_QWORD *)(v5[6] + 8 * v202) = v4;
                          v214 = (uint64_t *)(v5[7] + 16 * v202);
                          *v214 = v197;
                          v214[1] = v199;
                          v215 = v5[2];
                          v20 = __OFADD__(v215, 1);
                          v216 = v215 + 1;
                          if (v20)
                            goto LABEL_165;
                          v5[2] = v216;
                          v217 = v4;
                        }

                        swift_bridgeObjectRelease();
                      }
                      else
                      {
                        swift_bridgeObjectRetain();
                        v209 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v4);
                        v211 = v210;
                        swift_bridgeObjectRelease();
                        if ((v211 & 1) != 0)
                        {
                          v212 = swift_isUniquelyReferenced_nonNull_native();
                          v257 = v5;
                          if ((v212 & 1) == 0)
                          {
                            specialized _NativeDictionary.copy()();
                            v5 = v257;
                          }

                          specialized _NativeDictionary._delete(at:)(v209, (uint64_t)v5);
                          swift_bridgeObjectRelease();

                          swift_bridgeObjectRelease();
                        }
                        else
                        {

                        }
                      }
                    }
                    else
                    {

                    }
                    swift_bridgeObjectRelease();
LABEL_142:
                    outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v13, v236, type metadata accessor for DUStructuredExtractionResult);
                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                      v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v18 + 16) + 1, 1, v18);
                    v33 = v241;
                    v34 = v252;
                    v219 = *(_QWORD *)(v18 + 16);
                    v218 = *(_QWORD *)(v18 + 24);
                    if (v219 >= v218 >> 1)
                      v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v218 > 1, v219 + 1, 1, v18);
                    *(_QWORD *)(v18 + 16) = v219 + 1;
                    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v236, v18+ ((*(unsigned __int8 *)(v235 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v235 + 80))+ *(_QWORD *)(v235 + 72) * v219, type metadata accessor for DUStructuredExtractionResult);

                    v105 = (uint64_t)v13;
                  }
                  else
                  {

                    v105 = v52;
                  }
                  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v105, type metadata accessor for DUStructuredExtractionResult);
                  v5 = v243;
LABEL_148:
                  v37 = v248;
                  break;
                case 3:
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRelease();
                  strcpy((char *)(v52 + 16), "calendarEvent");
                  *(_WORD *)(v52 + 30) = -4864;
                  v4 = v232;
                  v79 = v251;
                  DUStructuredExtractionDefaultImplementation.processCalendarResult(ddScannerResult:resultString:)(v251, v41, v43, (uint64_t)v232);
                  swift_bridgeObjectRelease();
                  v80 = v244;
                  v81 = (*(uint64_t (**)(char *, uint64_t, _QWORD *))(v245 + 48))(v4, 1, v244);
                  v32 = v247;
                  if (v81 == 1)
                  {

                    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v4, &demangling cache variable for type metadata for CalendarEvent?);
                    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v52, type metadata accessor for DUStructuredExtractionResult);
                    v13 = (char *)v52;
                    v5 = v243;
                    goto LABEL_66;
                  }
                  v95 = v227;
                  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v4, v227, type metadata accessor for CalendarEvent);
                  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v51, &demangling cache variable for type metadata for CalendarEvent?);
                  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v95, v51, type metadata accessor for CalendarEvent);
                  v53(v51, 0, 1, v80);
                  v13 = (char *)v52;
                  goto LABEL_142;
                default:

                  swift_bridgeObjectRelease();
                  v13 = (char *)v52;
                  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v52, type metadata accessor for DUStructuredExtractionResult);
                  v18 = v249;
                  v5 = v243;
                  v32 = v247;
                  goto LABEL_66;
              }
            }
            ++v34;
          }
          while (v37 != v33);
        }
      }
      else
      {
        v33 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10);
        v5 = v243;
        if (v33)
          goto LABEL_15;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      v16 = v230;
      v17 = v228;
      if (v230 == v224)
      {
        swift_bridgeObjectRelease();
        return v18;
      }
    }
    if (v16 >= *(_QWORD *)(v223 + 16))
      goto LABEL_160;
    v19 = *(id *)(v222 + 8 * v16);
    v20 = __OFADD__(v16, 1);
    v21 = v16 + 1;
    if (!v20)
      goto LABEL_11;
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
LABEL_156:
    __break(1u);
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
LABEL_160:
    __break(1u);
LABEL_161:
    __break(1u);
LABEL_162:
    __break(1u);
LABEL_163:
    __break(1u);
LABEL_164:
    __break(1u);
LABEL_165:
    __break(1u);
LABEL_166:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x24BEE4AF8];
}

uint64_t DUStructuredExtractionDefaultImplementation.processCalendarResult(ddScannerResult:resultString:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  char v42;
  id v43;
  void *v44;
  id v45;
  uint64_t v46;
  void *v47;
  _BYTE *v48;
  uint64_t v49;
  void (*v50)(_BYTE *, uint64_t, uint64_t);
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v53)(uint64_t, uint64_t, uint64_t);
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t result;
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  void (*v77)(unint64_t, _QWORD, uint64_t);
  uint64_t v78;
  BOOL *v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  id v97;
  void *v98;
  void (*v99)(uint64_t, _BYTE *, uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  BOOL *v103;
  char v104;
  _BYTE *v105;
  uint64_t v106;
  id v107;
  void *v108;
  _BYTE *v109;
  uint64_t v110;
  _BYTE *v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v115;
  void *v116;
  _BYTE *v117;
  uint64_t v118;
  void (*v119)(_BYTE *, uint64_t, uint64_t);
  int v120;
  uint64_t v121;
  _BYTE *v122;
  uint64_t v123;
  _BYTE *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  id v128;
  uint64_t v129;
  void *v130;
  _BYTE *v131;
  _BYTE *v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  void (*v146)(unint64_t, _QWORD, uint64_t);
  void (*v147)(_BYTE *, uint64_t);
  char v148;
  _BYTE v149[12];
  int v150;
  uint64_t (*v151)(uint64_t, uint64_t, uint64_t);
  void (*v152)(_BYTE *, uint64_t, uint64_t);
  void (*v153)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _BYTE *v157;
  _BYTE *v158;
  _BYTE *v159;
  _BYTE *v160;
  _BYTE *v161;
  _BYTE *v162;
  uint64_t v163;
  uint64_t v164;
  _BYTE *v165;
  id v166;
  _BYTE *v167;
  BOOL *v168;
  _BYTE *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _BYTE *v173;
  _BYTE *v174;
  _BYTE *v175;
  uint64_t v176;
  uint64_t v177;
  _BYTE *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v159 = &v149[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v9);
  v165 = &v149[-v11];
  v12 = type metadata accessor for CalendarEvent(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v168 = &v149[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v170 = type metadata accessor for DateComponents();
  v177 = *(_QWORD *)(v170 - 8);
  MEMORY[0x24BDAC7A8](v170);
  v174 = &v149[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v157 = &v149[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = MEMORY[0x24BDAC7A8](v17);
  v161 = &v149[-v20];
  MEMORY[0x24BDAC7A8](v19);
  v169 = &v149[-v21];
  v22 = type metadata accessor for TimeZone();
  v171 = *(_QWORD *)(v22 - 8);
  v172 = v22;
  v23 = MEMORY[0x24BDAC7A8](v22);
  v167 = &v149[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v23);
  v158 = &v149[-v25];
  v26 = type metadata accessor for Calendar();
  v163 = *(_QWORD *)(v26 - 8);
  v164 = v26;
  MEMORY[0x24BDAC7A8](v26);
  v178 = &v149[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v29 = MEMORY[0x24BDAC7A8](v28);
  v162 = &v149[-((v30 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v29);
  v32 = &v149[-v31];
  v176 = type metadata accessor for Date();
  v179 = *(_QWORD *)(v176 - 8);
  v33 = MEMORY[0x24BDAC7A8](v176);
  v160 = &v149[-((v34 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v35 = MEMORY[0x24BDAC7A8](v33);
  v173 = &v149[-v36];
  MEMORY[0x24BDAC7A8](v35);
  v175 = &v149[-v37];
  v38 = type metadata accessor for CharacterSet();
  v39 = *(_QWORD *)(v38 - 8);
  MEMORY[0x24BDAC7A8](v38);
  v41 = &v149[-((v40 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v180 = a2;
  v181 = a3;
  static CharacterSet.decimalDigits.getter();
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.rangeOfCharacter(from:options:range:)();
  LOBYTE(a3) = v42;
  (*(void (**)(_BYTE *, uint64_t))(v39 + 8))(v41, v38);
  if ((a3 & 1) != 0)
  {
    v63 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
    v64 = a4;
LABEL_12:
    v65 = v12;
    return v63(v64, 1, 1, v65);
  }
  v156 = a4;
  v43 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDC6CB8]), sel_initWithDDScannerResult_, a1);
  if (!v43)
  {
    v63 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
    v64 = v156;
    goto LABEL_12;
  }
  v44 = v43;
  v45 = objc_msgSend(v43, sel_startDate);
  v46 = v12;
  if (!v45)
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v179 + 56))(v32, 1, 1, v176);
    goto LABEL_14;
  }
  v47 = v45;
  v48 = v173;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v49 = v179;
  v50 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v179 + 32);
  v51 = v176;
  v50(v32, (uint64_t)v48, v176);
  v52 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v49 + 56);
  v52((uint64_t)v32, 0, 1, v51);
  v53 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v49 + 48);
  if (v53((uint64_t)v32, 1, v51) == 1)
  {
LABEL_14:

    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v32, &demangling cache variable for type metadata for Date?);
    v63 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
    v64 = v156;
    v65 = v46;
    return v63(v64, 1, 1, v65);
  }
  v151 = v53;
  v153 = v52;
  v154 = v13;
  v155 = v46;
  v152 = v50;
  v50(v175, (uint64_t)v32, v51);
  v54 = objc_msgSend(a1, sel_type);
  v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v57 = v56;

  DUStructuredExtractionDefaultImplementation.getAllSubresultTypes(ddScannerResult:)(a1);
  v59 = v58;
  result = *MEMORY[0x24BE2B228];
  if (!*MEMORY[0x24BE2B228])
  {
    __break(1u);
    goto LABEL_82;
  }
  if (v55 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v57 == v61)
    goto LABEL_8;
  v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v66 & 1) == 0)
  {
    result = *MEMORY[0x24BE2B1E0];
    if (!*MEMORY[0x24BE2B1E0])
    {
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
      goto LABEL_85;
    }
    if (v55 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v57 != v134)
    {
      v135 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v135 & 1) != 0)
        goto LABEL_17;
      result = *MEMORY[0x24BE2B220];
      if (!*MEMORY[0x24BE2B220])
      {
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
        return result;
      }
      if (v55 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v57 != v136)
      {
        LODWORD(v62) = _stringCompareWithSmolCheck(_:_:expecting:)();
        goto LABEL_9;
      }
    }
LABEL_8:
    LODWORD(v62) = 1;
LABEL_9:
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
LABEL_17:
  LODWORD(v62) = 1;
LABEL_18:
  result = *MEMORY[0x24BE2B1D8];
  if (!*MEMORY[0x24BE2B1D8])
  {
LABEL_82:
    __break(1u);
    goto LABEL_83;
  }
  v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v166 = v44;
  if (v55 == v67 && v57 == v68)
    goto LABEL_21;
  v69 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v69 & 1) != 0)
    goto LABEL_23;
  result = *MEMORY[0x24BE2B1E0];
  if (!*MEMORY[0x24BE2B1E0])
    goto LABEL_84;
  if (v55 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v57 == v137)
  {
LABEL_21:
    swift_bridgeObjectRelease();
LABEL_23:
    swift_bridgeObjectRelease();
LABEL_24:
    v70 = 1;
    if ((v62 & 1) == 0)
    {
      v78 = MEMORY[0x24BEE4B08];
      v80 = v167;
      v79 = v168;
      v81 = v177;
      v82 = v171;
      goto LABEL_28;
    }
    v150 = v62;
LABEL_26:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>);
    v71 = type metadata accessor for Calendar.Component();
    v72 = *(_QWORD *)(v71 - 8);
    v73 = *(_QWORD *)(v72 + 72);
    v74 = (*(unsigned __int8 *)(v72 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80);
    v75 = swift_allocObject();
    *(_OWORD *)(v75 + 16) = xmmword_2284C25C0;
    v76 = v75 + v74;
    v77 = *(void (**)(unint64_t, _QWORD, uint64_t))(v72 + 104);
    v77(v76, *MEMORY[0x24BDCF230], v71);
    v77(v76 + v73, *MEMORY[0x24BDCF258], v71);
    v77(v76 + 2 * v73, *MEMORY[0x24BDCF260], v71);
    v78 = specialized Set.init(_nonEmptyArrayLiteral:)(v75);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    v80 = v167;
    v79 = v168;
    v81 = v177;
    v82 = v171;
    LOBYTE(v62) = v150;
LABEL_28:
    if ((specialized Sequence<>.contains(_:)(0x65626D754E796144, 0xE900000000000072, v59) & 1) != 0
      || (specialized Sequence<>.contains(_:)(0x6D754E68746E6F4DLL, 0xEB00000000726562, v59) & 1) != 0
      || (specialized Sequence<>.contains(_:)(0x626D754E72616559, 0xEA00000000007265, v59) & 1) != 0)
    {
      if ((specialized Sequence<>.contains(_:)(0x65626D754E796144, 0xE900000000000072, v59) & 1) != 0)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>);
        v83 = type metadata accessor for Calendar.Component();
        v84 = *(_QWORD *)(v83 - 8);
        v85 = (*(unsigned __int8 *)(v84 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80);
        v86 = swift_allocObject();
        *(_OWORD *)(v86 + 16) = xmmword_2284C1EE0;
        (*(void (**)(unint64_t, _QWORD, uint64_t))(v84 + 104))(v86 + v85, *MEMORY[0x24BDCF220], v83);
        v78 = specialized Set.union<A>(_:)(v86, v78);
        swift_setDeallocating();
        swift_arrayDestroy();
        swift_deallocClassInstance();
      }
      if ((specialized Sequence<>.contains(_:)(0x6D754E68746E6F4DLL, 0xEB00000000726562, v59) & 1) != 0)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>);
        v87 = type metadata accessor for Calendar.Component();
        v88 = *(_QWORD *)(v87 - 8);
        v89 = (*(unsigned __int8 *)(v88 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80);
        v90 = swift_allocObject();
        *(_OWORD *)(v90 + 16) = xmmword_2284C1EE0;
        (*(void (**)(unint64_t, _QWORD, uint64_t))(v88 + 104))(v90 + v89, *MEMORY[0x24BDCF250], v87);
        v78 = specialized Set.union<A>(_:)(v90, v78);
        swift_setDeallocating();
        swift_arrayDestroy();
        swift_deallocClassInstance();
      }
      v81 = v177;
      v91 = (uint64_t)v169;
      v82 = v171;
      v92 = specialized Sequence<>.contains(_:)(0x626D754E72616559, 0xEA00000000007265, v59);
      swift_bridgeObjectRelease();
      if ((v92 & 1) != 0)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>);
        v93 = type metadata accessor for Calendar.Component();
        v94 = *(_QWORD *)(v93 - 8);
        v95 = (*(unsigned __int8 *)(v94 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80);
        v96 = swift_allocObject();
        *(_OWORD *)(v96 + 16) = xmmword_2284C1EE0;
        (*(void (**)(unint64_t, _QWORD, uint64_t))(v94 + 104))(v96 + v95, *MEMORY[0x24BDCF240], v93);
        v78 = specialized Set.union<A>(_:)(v96, v78);
        swift_setDeallocating();
LABEL_37:
        swift_arrayDestroy();
        swift_deallocClassInstance();
        v81 = v177;
        v91 = (uint64_t)v169;
        v82 = v171;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      if (v70)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>);
        v140 = type metadata accessor for Calendar.Component();
        v141 = *(_QWORD *)(v140 - 8);
        v142 = *(_QWORD *)(v141 + 72);
        v143 = (*(unsigned __int8 *)(v141 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v141 + 80);
        v144 = swift_allocObject();
        *(_OWORD *)(v144 + 16) = xmmword_2284C25C0;
        v145 = v144 + v143;
        v79 = v168;
        v146 = *(void (**)(unint64_t, _QWORD, uint64_t))(v141 + 104);
        v146(v145, *MEMORY[0x24BDCF240], v140);
        v146(v145 + v142, *MEMORY[0x24BDCF250], v140);
        v80 = v167;
        v146(v145 + 2 * v142, *MEMORY[0x24BDCF220], v140);
        v78 = specialized Set.union<A>(_:)(v144, v78);
        swift_setDeallocating();
        goto LABEL_37;
      }
      v91 = (uint64_t)v169;
    }
    static Calendar.current.getter();
    v97 = objc_msgSend(v166, sel_startTimeZone);
    v171 = v78;
    if (v97)
    {
      v98 = v97;
      static TimeZone._unconditionallyBridgeFromObjectiveC(_:)();

      v99 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v82 + 32);
      v100 = v172;
      v99(v91, v80, v172);
      v169 = *(_BYTE **)(v82 + 56);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v169)(v91, 0, 1, v100);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v82 + 48))(v91, 1, v100) != 1)
      {
        v103 = v79;
        v104 = v62;
        v62 = v172;
        v105 = v158;
        v99((uint64_t)v158, (_BYTE *)v91, v172);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v82 + 16))(v80, v105, v62);
        Calendar.timeZone.setter();
        v106 = v62;
        LOBYTE(v62) = v104;
        v79 = v103;
        (*(void (**)(_BYTE *, uint64_t))(v82 + 8))(v105, v106);
        v101 = (uint64_t)v165;
        v102 = v170;
LABEL_44:
        Calendar.dateComponents(_:from:)();
        v107 = objc_msgSend(v166, sel_startTimeZone);
        if (v107)
        {
          v108 = v107;
          v109 = v161;
          static TimeZone._unconditionallyBridgeFromObjectiveC(_:)();

          v110 = 0;
        }
        else
        {
          v110 = 1;
          v109 = v161;
        }
        ((void (*)(_BYTE *, uint64_t, uint64_t, uint64_t))v169)(v109, v110, 1, v172);
        v111 = v174;
        DateComponents.timeZone.setter();
        v112 = v155;
        (*(void (**)(BOOL *, _BYTE *, uint64_t))(v81 + 16))(&v79[*(int *)(v155 + 20)], v111, v102);
        v113 = (uint64_t)&v79[*(int *)(v112 + 24)];
        v114 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v81 + 56);
        v114(v113, 1, 1, v102);
        *v79 = (v62 & 1) == 0;
        v114(v101, 1, 1, v102);
        v115 = objc_msgSend(v166, sel_endDate);
        if (v115)
        {
          v116 = v115;
          v117 = v173;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          v118 = (uint64_t)v162;
          v119 = v152;
          v152(v162, (uint64_t)v117, v51);
          v153(v118, 0, 1, v51);
          v120 = v151(v118, 1, v51);
          v121 = v156;
          if (v120 != 1)
          {
            v122 = v160;
            v119(v160, v118, v51);
            v123 = v51;
            v124 = v178;
            v125 = (uint64_t)v159;
            Calendar.dateComponents(_:from:)();
            swift_bridgeObjectRelease();
            v126 = v170;
            v114(v125, 0, 1, v170);
            outlined assign with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v125, v101, &demangling cache variable for type metadata for DateComponents?);
            v127 = v177;
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v177 + 48))(v101, 1, v126))
            {
              v128 = objc_msgSend(v166, sel_endTimeZone);
              v129 = v172;
              if (v128)
              {
                v130 = v128;
                v131 = v157;
                static TimeZone._unconditionallyBridgeFromObjectiveC(_:)();

                v132 = v131;
                v133 = 0;
              }
              else
              {
                v133 = 1;
                v132 = v157;
              }
              ((void (*)(_BYTE *, uint64_t, uint64_t, uint64_t))v169)(v132, v133, 1, v129);
              DateComponents.timeZone.setter();
              v124 = v178;
              v123 = v176;
              v122 = v160;
            }

            v147 = *(void (**)(_BYTE *, uint64_t))(v179 + 8);
            v147(v122, v123);
            (*(void (**)(_BYTE *, uint64_t))(v127 + 8))(v174, v126);
            (*(void (**)(_BYTE *, uint64_t))(v163 + 8))(v124, v164);
            v147(v175, v123);
            outlined assign with copy of DateComponents?(v101, v113);
            v112 = v155;
            v79 = v168;
            goto LABEL_76;
          }
        }
        else
        {
          v118 = (uint64_t)v162;
          v153((uint64_t)v162, 1, 1, v51);
          v121 = v156;
        }
        swift_bridgeObjectRelease();

        (*(void (**)(_BYTE *, uint64_t))(v177 + 8))(v174, v170);
        (*(void (**)(_BYTE *, uint64_t))(v163 + 8))(v178, v164);
        (*(void (**)(_BYTE *, uint64_t))(v179 + 8))(v175, v51);
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v118, &demangling cache variable for type metadata for Date?);
LABEL_76:
        outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v79, v121, type metadata accessor for CalendarEvent);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v154 + 56))(v121, 0, 1, v112);
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v101, &demangling cache variable for type metadata for DateComponents?);
        return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v79, type metadata accessor for CalendarEvent);
      }
    }
    else
    {
      v169 = *(_BYTE **)(v82 + 56);
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v169)(v91, 1, 1, v172);
    }
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v91, &demangling cache variable for type metadata for TimeZone?);
    v101 = (uint64_t)v165;
    v102 = v170;
    goto LABEL_44;
  }
  v138 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v138 & 1) != 0)
    goto LABEL_23;
  result = *MEMORY[0x24BE2B1D0];
  if (!*MEMORY[0x24BE2B1D0])
    goto LABEL_86;
  if (v55 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v57 == v139)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_24;
  }
  v148 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v148 & 1) != 0)
    goto LABEL_24;
  if ((v62 & 1) != 0)
  {
    v150 = v62;
    v70 = 0;
    goto LABEL_26;
  }
  (*(void (**)(_BYTE *, uint64_t))(v179 + 8))(v175, v51);
  swift_bridgeObjectRelease();

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v154 + 56))(v156, 1, 1, v155);
}

void DUStructuredExtractionDefaultImplementation.getAllSubresultTypes(ddScannerResult:)(void *a1)
{
  id v1;
  void *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;

  v17 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v1 = objc_msgSend(a1, sel_subResults);
  if (!v1)
    return;
  v2 = v1;
  type metadata accessor for NSNumber(0, (unint64_t *)&lazy cache variable for type metadata for DDScannerResult);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v3 >> 62))
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v4)
      goto LABEL_4;
LABEL_16:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  v4 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v4)
    goto LABEL_16;
LABEL_4:
  if (v4 < 1)
  {
    __break(1u);
  }
  else
  {
    v5 = 0;
    do
    {
      if ((v3 & 0xC000000000000001) != 0)
        v6 = (id)MEMORY[0x22E2AFF34](v5, v3);
      else
        v6 = *(id *)(v3 + 8 * v5 + 32);
      v7 = v6;
      v8 = objc_msgSend(v6, sel_type);
      v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v11 = v10;

      v12 = v17;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
      v14 = v12[2];
      v13 = v12[3];
      if (v14 >= v13 >> 1)
        v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, v12);
      ++v5;
      v12[2] = v14 + 1;
      v15 = &v12[2 * v14];
      v15[4] = v9;
      v15[5] = v11;
      v17 = v12;
      v16 = DUStructuredExtractionDefaultImplementation.getAllSubresultTypes(ddScannerResult:)(v7);
      specialized Array.append<A>(contentsOf:)(v16);

    }
    while (v4 != v5);
    swift_bridgeObjectRelease();
  }
}

uint64_t DUStructuredExtractionDefaultImplementation.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t DUStructuredExtractionDefaultImplementation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t DUStructuredExtractionDefaultImplementation.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t DUStructuredExtractionDefaultImplementation.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t protocol witness for static DUProcessingPhaseImplementation.specification.getter in conformance DUStructuredExtractionDefaultImplementation@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for DUStructuredExtractionSpecification();
  result = swift_allocObject();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for DUStructuredExtractionSpecification;
  *a1 = result;
  return result;
}

unint64_t protocol witness for static DUProcessingPhaseImplementation.implementationID.getter in conformance DUStructuredExtractionDefaultImplementation()
{
  return 0xD00000000000002CLL;
}

void *protocol witness for static DUProcessingPhaseImplementation.implementationAttributes.getter in conformance DUStructuredExtractionDefaultImplementation()
{
  return &outlined read-only object #0 of protocol witness for static DUProcessingPhaseImplementation.implementationAttributes.getter in conformance DUStructuredExtractionDefaultImplementation;
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v6[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  v4 = *(_QWORD *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  return specialized ContiguousArray._endMutation()();
}

char *specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  char *result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::Int v11;
  char **v12;
  unint64_t v13;
  Swift::Int v14;
  id v15;
  id *v16;
  uint64_t *v17;
  Swift::Int v18;
  Swift::Int v19;
  uint64_t *v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  char v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char **v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  void *v79;
  Swift::Int v80;
  _QWORD *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  unint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  Swift::Int v95;
  Swift::Int v96;
  id *__dst;
  uint64_t v98;
  uint64_t v99;

  v2 = v1;
  v4 = a1[1];
  result = (char *)_minimumMergeRunLength(_:)(v4);
  if ((uint64_t)result >= v4)
  {
    if (v4 < 0)
      goto LABEL_133;
    if (v4)
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, (char *)v4, (char *)1, a1);
    return result;
  }
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = v4 + 1;
  if (v4 < -1)
    goto LABEL_141;
  v7 = result;
  v91 = a1;
  if (v4 < 2)
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
    v99 = MEMORY[0x24BEE4AF8];
    __dst = (id *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v4 != 1)
    {
      v13 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_99:
      v83 = v10;
      if (v13 >= 2)
      {
        v84 = *v91;
        do
        {
          v85 = v13 - 2;
          if (v13 < 2)
            goto LABEL_128;
          if (!v84)
            goto LABEL_140;
          v86 = v83;
          v87 = *(_QWORD *)&v83[16 * v85 + 32];
          v88 = *(_QWORD *)&v83[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((id *)(v84 + 8 * v87), (id *)(v84 + 8 * *(_QWORD *)&v83[16 * v13 + 16]), v84 + 8 * v88, __dst);
          if (v2)
            break;
          if (v88 < v87)
            goto LABEL_129;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v86 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v86);
          if (v85 >= *((_QWORD *)v86 + 2))
            goto LABEL_130;
          v89 = &v86[16 * v85 + 32];
          *(_QWORD *)v89 = v87;
          *((_QWORD *)v89 + 1) = v88;
          v90 = *((_QWORD *)v86 + 2);
          if (v13 > v90)
            goto LABEL_131;
          memmove(&v86[16 * v13 + 16], &v86[16 * v13 + 32], 16 * (v90 - v13));
          v83 = v86;
          *((_QWORD *)v86 + 2) = v90 - 1;
          v13 = v90 - 1;
        }
        while (v90 > 2);
      }
LABEL_96:
      swift_bridgeObjectRelease();
      *(_QWORD *)((v99 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      return (char *)swift_bridgeObjectRelease();
    }
  }
  else
  {
    v8 = v6 >> 1;
    type metadata accessor for NSNumber(0, (unint64_t *)&lazy cache variable for type metadata for CKContextUIElement);
    v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
    __dst = (id *)((v9 & 0xFFFFFFFFFFFFFF8) + 32);
    v99 = v9;
  }
  v11 = 0;
  v93 = *a1 + 16;
  v94 = v7;
  v98 = *a1;
  v92 = *a1 - 8;
  v10 = (char *)MEMORY[0x24BEE4AF8];
  v12 = &selRef_e1946_;
  v95 = v4;
  while (1)
  {
    v14 = v11++;
    if (v11 < v4)
    {
      v15 = objc_msgSend(*(id *)(v98 + 8 * v11), v12[233], *(_QWORD *)(v98 + 8 * v14));
      v11 = v14 + 2;
      if (v14 + 2 < v4)
      {
        v16 = (id *)(v93 + 8 * v14);
        while ((v15 == (id)-1) != (objc_msgSend(*v16, v12[233], *(v16 - 1)) != (id)-1))
        {
          ++v11;
          ++v16;
          if (v4 == v11)
          {
            v11 = v4;
            break;
          }
        }
      }
      if (v15 == (id)-1)
      {
        if (v11 < v14)
          goto LABEL_136;
        if (v14 < v11)
        {
          v17 = (uint64_t *)(v92 + 8 * v11);
          v18 = v11;
          v19 = v14;
          v20 = (uint64_t *)(v98 + 8 * v14);
          do
          {
            if (v19 != --v18)
            {
              if (!v98)
                goto LABEL_139;
              v21 = *v20;
              *v20 = *v17;
              *v17 = v21;
            }
            ++v19;
            --v17;
            ++v20;
          }
          while (v19 < v18);
        }
      }
    }
    if (v11 >= v4)
      goto LABEL_39;
    if (__OFSUB__(v11, v14))
      goto LABEL_132;
    if (v11 - v14 >= (uint64_t)v94)
      goto LABEL_39;
    if (__OFADD__(v14, v94))
      goto LABEL_134;
    v22 = (uint64_t)&v94[v14] >= v4 ? v4 : (Swift::Int)&v94[v14];
    if (v22 < v14)
      break;
    if (v11 != v22)
    {
      v78 = (_QWORD *)(v92 + 8 * v11);
      v23 = v98;
      do
      {
        v79 = *(void **)(v98 + 8 * v11);
        v80 = v14;
        v81 = v78;
        do
        {
          if (objc_msgSend(v79, v12[233], *v81) != (id)-1)
            break;
          if (!v98)
            goto LABEL_137;
          v82 = *v81;
          v79 = (void *)v81[1];
          *v81 = v79;
          v81[1] = v82;
          --v81;
          ++v80;
        }
        while (v11 != v80);
        ++v11;
        ++v78;
      }
      while (v11 != v22);
      v11 = v22;
      if (v22 < v14)
        goto LABEL_127;
      goto LABEL_40;
    }
LABEL_39:
    v23 = v98;
    if (v11 < v14)
      goto LABEL_127;
LABEL_40:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
    v25 = *((_QWORD *)v10 + 2);
    v24 = *((_QWORD *)v10 + 3);
    v13 = v25 + 1;
    if (v25 >= v24 >> 1)
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v24 > 1), v25 + 1, 1, v10);
    *((_QWORD *)v10 + 2) = v13;
    v26 = v10 + 32;
    v27 = &v10[16 * v25 + 32];
    *(_QWORD *)v27 = v14;
    *((_QWORD *)v27 + 1) = v11;
    if (v25)
    {
      v96 = v11;
      while (1)
      {
        v28 = v13 - 1;
        if (v13 >= 4)
        {
          v33 = &v26[16 * v13];
          v34 = *((_QWORD *)v33 - 8);
          v35 = *((_QWORD *)v33 - 7);
          v39 = __OFSUB__(v35, v34);
          v36 = v35 - v34;
          if (v39)
            goto LABEL_116;
          v38 = *((_QWORD *)v33 - 6);
          v37 = *((_QWORD *)v33 - 5);
          v39 = __OFSUB__(v37, v38);
          v31 = v37 - v38;
          v32 = v39;
          if (v39)
            goto LABEL_117;
          v40 = v13 - 2;
          v41 = &v26[16 * v13 - 32];
          v43 = *(_QWORD *)v41;
          v42 = *((_QWORD *)v41 + 1);
          v39 = __OFSUB__(v42, v43);
          v44 = v42 - v43;
          if (v39)
            goto LABEL_119;
          v39 = __OFADD__(v31, v44);
          v45 = v31 + v44;
          if (v39)
            goto LABEL_122;
          if (v45 >= v36)
          {
            v63 = &v26[16 * v28];
            v65 = *(_QWORD *)v63;
            v64 = *((_QWORD *)v63 + 1);
            v39 = __OFSUB__(v64, v65);
            v66 = v64 - v65;
            if (v39)
              goto LABEL_126;
            v56 = v31 < v66;
            goto LABEL_77;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v57 = *((_QWORD *)v10 + 4);
            v58 = *((_QWORD *)v10 + 5);
            v39 = __OFSUB__(v58, v57);
            v50 = v58 - v57;
            v51 = v39;
            goto LABEL_71;
          }
          v30 = *((_QWORD *)v10 + 4);
          v29 = *((_QWORD *)v10 + 5);
          v39 = __OFSUB__(v29, v30);
          v31 = v29 - v30;
          v32 = v39;
        }
        if ((v32 & 1) != 0)
          goto LABEL_118;
        v40 = v13 - 2;
        v46 = &v26[16 * v13 - 32];
        v48 = *(_QWORD *)v46;
        v47 = *((_QWORD *)v46 + 1);
        v49 = __OFSUB__(v47, v48);
        v50 = v47 - v48;
        v51 = v49;
        if (v49)
          goto LABEL_121;
        v52 = &v26[16 * v28];
        v54 = *(_QWORD *)v52;
        v53 = *((_QWORD *)v52 + 1);
        v39 = __OFSUB__(v53, v54);
        v55 = v53 - v54;
        if (v39)
          goto LABEL_124;
        if (__OFADD__(v50, v55))
          goto LABEL_125;
        if (v50 + v55 >= v31)
        {
          v56 = v31 < v55;
LABEL_77:
          if (v56)
            v28 = v40;
          goto LABEL_79;
        }
LABEL_71:
        if ((v51 & 1) != 0)
          goto LABEL_120;
        v59 = &v26[16 * v28];
        v61 = *(_QWORD *)v59;
        v60 = *((_QWORD *)v59 + 1);
        v39 = __OFSUB__(v60, v61);
        v62 = v60 - v61;
        if (v39)
          goto LABEL_123;
        if (v62 < v50)
          goto LABEL_14;
LABEL_79:
        v67 = v28 - 1;
        if (v28 - 1 >= v13)
        {
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
          goto LABEL_135;
        }
        if (!v23)
          goto LABEL_138;
        v68 = v12;
        v69 = v10;
        v70 = v23;
        v71 = &v26[16 * v67];
        v72 = *(_QWORD *)v71;
        v73 = v26;
        v74 = v28;
        v75 = &v26[16 * v28];
        v76 = *((_QWORD *)v75 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((id *)(v70 + 8 * *(_QWORD *)v71), (id *)(v70 + 8 * *(_QWORD *)v75), v70 + 8 * v76, __dst);
        if (v1)
          goto LABEL_96;
        if (v76 < v72)
          goto LABEL_113;
        if (v74 > *((_QWORD *)v69 + 2))
          goto LABEL_114;
        *(_QWORD *)v71 = v72;
        *(_QWORD *)&v73[16 * v67 + 8] = v76;
        v77 = *((_QWORD *)v69 + 2);
        if (v74 >= v77)
          goto LABEL_115;
        v10 = v69;
        v13 = v77 - 1;
        memmove(v75, v75 + 16, 16 * (v77 - 1 - v74));
        v26 = v73;
        *((_QWORD *)v69 + 2) = v77 - 1;
        v23 = v98;
        v12 = v68;
        v11 = v96;
        if (v77 <= 2)
          goto LABEL_14;
      }
    }
    v13 = 1;
LABEL_14:
    v4 = v95;
    if (v11 >= v95)
    {
      v2 = v1;
      goto LABEL_99;
    }
  }
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  result = (char *)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(char *result, char *a2, char *a3, uint64_t *a4)
{
  char *v4;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 8 * (_QWORD)a3 - 8;
LABEL_5:
    result = *(char **)(v7 + 8 * (_QWORD)v4);
    v9 = v6;
    v10 = (_QWORD *)v8;
    while (1)
    {
      result = (char *)objc_msgSend(result, sel_compareByPosition_, *v10);
      if (result != (char *)-1)
      {
LABEL_4:
        ++v4;
        v8 += 8;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      v11 = *v10;
      result = (char *)v10[1];
      *v10 = result;
      v10[1] = v11;
      --v10;
      if (v4 == ++v9)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(id *__src, id *a2, unint64_t a3, id *__dst)
{
  id *v4;
  id *v6;
  id *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id *v14;
  id *v15;
  id *v16;
  id *v17;
  id *v18;
  id *v19;
  uint64_t v20;
  uint64_t result;
  id *v22;
  id *v23;
  id *v24;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0)
    v9 = (char *)a2 - (char *)__src;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 3;
  v24 = __src;
  v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[v13] <= __dst)
        memmove(__dst, a2, 8 * v13);
      v16 = &v4[v13];
      v22 = v16;
      v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        v17 = (id *)(a3 - 8);
        v18 = v6;
        while (1)
        {
          v19 = v17 + 1;
          v20 = (uint64_t)*--v18;
          if (objc_msgSend(*(v16 - 1), sel_compareByPosition_, v20) == (id)-1)
          {
            if (v19 != v6 || v17 >= v6)
              *v17 = *v18;
            v24 = v18;
            if (v18 <= v7)
              goto LABEL_42;
          }
          else
          {
            v22 = v16 - 1;
            if (v19 < v16 || v17 >= v16 || v19 != v16)
              *v17 = *(v16 - 1);
            v18 = v6;
            --v16;
            if (v6 <= v7)
              goto LABEL_42;
          }
          --v17;
          v6 = v18;
          if (v16 <= v4)
            goto LABEL_42;
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[v10] <= __dst)
      memmove(__dst, __src, 8 * v10);
    v14 = &v4[v10];
    v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (objc_msgSend(*v6, sel_compareByPosition_, *v4) == (id)-1)
        {
          v15 = v6 + 1;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
            *v7 = *v6;
        }
        else
        {
          if (v7 != v4)
            *v7 = *v4;
          v23 = ++v4;
          v15 = v6;
        }
        ++v7;
        if (v4 >= v14)
          break;
        v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      v24 = v7;
    }
LABEL_42:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v24, &v23, &v22);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Set._isDisjoint<A>(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t i;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  unint64_t j;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v22;

  if (!*(_QWORD *)(a2 + 16))
    return 1;
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return 1;
  v22 = a1 + 32;
  v4 = a2 + 56;
  swift_bridgeObjectRetain();
  for (i = 0; i != v2; ++i)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v6 = (uint64_t *)(v22 + 16 * i);
      v8 = *v6;
      v7 = v6[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      v9 = Hasher._finalize()();
      v10 = -1 << *(_BYTE *)(a2 + 32);
      v11 = v9 & ~v10;
      if (((*(_QWORD *)(v4 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
      {
        v12 = *(_QWORD *)(a2 + 48);
        v13 = (_QWORD *)(v12 + 16 * v11);
        v14 = *v13 == v8 && v13[1] == v7;
        if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
LABEL_22:
          swift_bridgeObjectRelease();
          v20 = 0;
          goto LABEL_23;
        }
        v15 = ~v10;
        for (j = v11 + 1; ; j = v17 + 1)
        {
          v17 = j & v15;
          if (((*(_QWORD *)(v4 + (((j & v15) >> 3) & 0xFFFFFFFFFFFFF8)) >> (j & v15)) & 1) == 0)
            break;
          v18 = (_QWORD *)(v12 + 16 * v17);
          v19 = *v18 == v8 && v18[1] == v7;
          if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            goto LABEL_22;
        }
      }
      swift_bridgeObjectRelease();
    }
  }
  v20 = 1;
LABEL_23:
  swift_bridgeObjectRelease();
  return v20;
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  id v13;
  unint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint8_t *v23;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v4 = v3;
  v31 = a3;
  v7 = type metadata accessor for Logger();
  v26 = *(_QWORD *)(v7 - 8);
  v27 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v28 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
    goto LABEL_22;
  v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v9)
  {
    while (1)
    {
      v25[1] = v4;
      v10 = 0;
      v11 = a1 & 0xC000000000000001;
      v12 = a1 & 0xFFFFFFFFFFFFFF8;
      v29 = a1;
      v30 = a1 & 0xFFFFFFFFFFFFFF8;
      while (v11)
      {
        v13 = (id)MEMORY[0x22E2AFF34](v10, a1);
LABEL_9:
        v4 = v13;
        v14 = v10 + 1;
        if (__OFADD__(v10, 1))
          goto LABEL_21;
        if (((*(uint64_t (**)(id))(*(_QWORD *)a2 + 104))(v13) & 1) != 0)
        {
          if (!v31)
            goto LABEL_14;
          v15 = objc_msgSend(v4, sel_sceneIdentifier);
          if (!v15)
            goto LABEL_14;
          v16 = v15;
          v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v19 = v18;

          LOBYTE(v16) = specialized Set.contains(_:)(v17, v19, v31);
          a1 = v29;
          swift_bridgeObjectRelease();
          if ((v16 & 1) == 0)
          {
            Logger.init()();
            v20 = Logger.logObject.getter();
            v21 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v20, v21))
            {
              v22 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v22 = 0;
              _os_log_impl(&dword_2282CC000, v20, v21, "Ignoring a UI element because it doesn't match the ones requested.", v22, 2u);
              v23 = v22;
              a1 = v29;
              MEMORY[0x22E2B117C](v23, -1, -1);
            }

            (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v27);
            v12 = v30;
          }
          else
          {
LABEL_14:
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            v12 = v30;
          }
        }
        else
        {

        }
        ++v10;
        if (v14 == v9)
          return v32;
      }
      if (v10 < *(_QWORD *)(v12 + 16))
        break;
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      v9 = _CocoaArrayWrapper.endIndex.getter();
      if (!v9)
        return MEMORY[0x24BEE4AF8];
    }
    v13 = *(id *)(a1 + 8 * v10 + 32);
    goto LABEL_9;
  }
  return MEMORY[0x24BEE4AF8];
}

{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  id v8;
  unint64_t v9;
  id v10;
  void *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v28;
  id v29;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  id v35;
  uint64_t v36;

  v5 = a1;
  v36 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
  {
LABEL_28:
    v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6)
      goto LABEL_3;
  }
  else
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v6)
    {
LABEL_3:
      v31 = a3;
      v7 = 0;
      v32 = v5 & 0xFFFFFFFFFFFFFF8;
      v33 = v5 & 0xC000000000000001;
      while (1)
      {
        if (v33)
        {
          v8 = (id)MEMORY[0x22E2AFF34](v7, v5);
          v9 = v7 + 1;
          if (__OFADD__(v7, 1))
          {
LABEL_25:
            __break(1u);
            return v36;
          }
        }
        else
        {
          if (v7 >= *(_QWORD *)(v32 + 16))
          {
            __break(1u);
            goto LABEL_28;
          }
          v8 = *(id *)(v5 + 8 * v7 + 32);
          v9 = v7 + 1;
          if (__OFADD__(v7, 1))
            goto LABEL_25;
        }
        v35 = v8;
        v10 = objc_msgSend(v8, sel_text);
        if (v10)
        {
          v11 = v10;
          static String._unconditionallyBridgeFromObjectiveC(_:)();

        }
        String.lowercased()();
        v12 = lazy protocol witness table accessor for type String and conformance String();
        v13 = (_QWORD *)MEMORY[0x22E2AFE50](32, 0xE100000000000000, 1, 1, MEMORY[0x24BEE0D00], v12);
        swift_bridgeObjectRelease();
        if (v13[2])
        {
          v34 = v7;
          v14 = v6;
          v16 = v13[4];
          v15 = v13[5];
          v17 = v9;
          v18 = v5;
          v19 = a2;
          v21 = v13[6];
          v20 = v13[7];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v22 = v15;
          v6 = v14;
          v23 = v21;
          a2 = v19;
          v5 = v18;
          v9 = v17;
          v7 = v34;
          v24 = MEMORY[0x22E2AF988](v16, v22, v23, v20);
          v26 = v25;
          swift_bridgeObjectRelease();
          a3 = v31;
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v24 = 0;
          v26 = 0xE000000000000000;
        }
        if (v24 == a2 && v26 == a3)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v28 & 1) == 0)
            goto LABEL_19;
        }
        v29 = objc_msgSend(v35, sel_contactIdentifier);
        if (!v29)
        {
LABEL_19:

          goto LABEL_5;
        }

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
LABEL_5:
        ++v7;
        if (v9 == v6)
          return v36;
      }
    }
  }
  return MEMORY[0x24BEE4AF8];
}

{
  uint64_t v5;
  unint64_t v6;
  id v7;
  void *v8;
  unint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v19;

  v19 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
    goto LABEL_23;
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v5)
  {
    while (1)
    {
      v6 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        v7 = (id)MEMORY[0x22E2AFF34](v6, a1);
LABEL_9:
        v8 = v7;
        v9 = v6 + 1;
        if (__OFADD__(v6, 1))
          goto LABEL_22;
        v10 = objc_msgSend(v7, sel_identifier);
        if (v10)
        {
          v11 = v10;
          v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v14 = v13;

          if (v12 == a2 && v14 == a3)
          {
            swift_bridgeObjectRelease();
LABEL_18:
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            goto LABEL_5;
          }
          v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v16 & 1) != 0)
            goto LABEL_18;
        }

LABEL_5:
        ++v6;
        if (v9 == v5)
          return v19;
      }
      if (v6 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        break;
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      v5 = _CocoaArrayWrapper.endIndex.getter();
      if (!v5)
        return MEMORY[0x24BEE4AF8];
    }
    v7 = *(id *)(a1 + 8 * v6 + 32);
    goto LABEL_9;
  }
  return MEMORY[0x24BEE4AF8];
}

uint64_t specialized DUStructuredExtractionDefaultImplementation.groupUIElements(uiElements:)(unint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  __objc2_ivar *v7;
  id v8;
  id v9;
  unsigned int v10;
  id v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  double v16;
  double v17;
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  double v22;
  CGFloat v23;
  double v24;
  CGFloat v25;
  CGFloat v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  double v36;
  double v37;
  CGFloat v38;
  CGFloat v39;
  double v40;
  double v41;
  BOOL v42;
  double v43;
  double v44;
  double v45;
  CGFloat v46;
  double v47;
  id v48;
  float v49;
  float v50;
  float v51;
  double v52;
  CGFloat v53;
  double v54;
  double v55;
  float v56;
  float v57;
  float v58;
  _BOOL4 v59;
  float v60;
  float v61;
  float v62;
  id v63;
  id v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  __int128 v93;
  _BOOL4 v94;
  double v95;
  _BOOL4 v96;
  double v97;
  _BOOL4 v98;
  double v99;
  uint64_t v100;
  CGFloat rect2;
  uint64_t v102;
  CGRect v103;
  CGRect v104;
  CGRect v105;
  CGRect v106;
  CGRect v107;
  CGRect v108;
  CGRect v109;
  CGRect v110;
  CGRect v111;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v102 = MEMORY[0x24BEE4AF8];
    if (v2 >= 1)
    {
      v4 = a1 & 0xC000000000000001;
      swift_bridgeObjectRetain();
      v5 = 0;
      v6 = 0;
      v7 = &stru_24F10A000;
      v93 = xmmword_2284C0D00;
      v100 = v2;
      while (1)
      {
        if (v4)
        {
          v8 = (id)MEMORY[0x22E2AFF34](v6, a1);
          if (!v5)
            goto LABEL_14;
        }
        else
        {
          v8 = *(id *)(a1 + 8 * v6 + 32);
          if (!v5)
            goto LABEL_14;
        }
        v9 = v5;
        objc_msgSend(v9, v7[92].type);
        if (CGRectIsEmpty(v103)
          || (objc_msgSend(v8, v7[92].type), CGRectIsEmpty(v104))
          || (v10 = objc_msgSend(v9, sel_isOnScreen), v10 != objc_msgSend(v8, sel_isOnScreen)))
        {

          goto LABEL_14;
        }
        objc_msgSend(v9, v7[92].type);
        v13 = v12;
        v15 = v14;
        v17 = v16;
        v19 = v18;
        objc_msgSend(v8, v7[92].type);
        v21 = v20;
        v23 = v22;
        v25 = v24;
        v109.size.height = v26;
        v105.origin.x = v13;
        v105.origin.y = v15;
        v105.size.width = v17;
        v105.size.height = v19;
        v109.origin.x = v21;
        v109.origin.y = v23;
        v109.size.width = v25;
        rect2 = v109.size.height;
        if (!CGRectEqualToRect(v105, v109))
          break;
        v27 = objc_msgSend(v9, sel_text);
        v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v30 = v29;

        v31 = objc_msgSend(v8, sel_text);
        v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v34 = v33;

        if (v28 == v32 && v30 == v34)
        {

          swift_bridgeObjectRelease_n();
LABEL_74:
          v4 = a1 & 0xC000000000000001;
          v2 = v100;
          v7 = &stru_24F10A000;
          goto LABEL_17;
        }
        v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v4 = a1 & 0xC000000000000001;
        v2 = v100;
        v7 = &stru_24F10A000;
        if ((v35 & 1) == 0)
          break;

LABEL_17:
        if (v2 == ++v6)
        {
          swift_bridgeObjectRelease();

          return v102;
        }
      }
      v97 = v23;
      v99 = v17;
      v36 = v25;
      v37 = v19;
      v38 = v21;
      v39 = v15;
      if (v36 >= v17)
        v40 = v21;
      else
        v40 = v13;
      if (v36 >= v17)
        v41 = v36;
      else
        v41 = v17;
      v42 = v17 < v36;
      v43 = v13;
      v44 = v17;
      v95 = v38;
      if (v17 >= v36)
        v45 = v38;
      else
        v45 = v13;
      v46 = v36;
      if (v42)
        v47 = v44;
      else
        v47 = v36;
      v48 = objc_msgSend(v8, sel_superviewClassNames, v93);
      if (v48 && (v48, v40 < v45 + 0.5) && v45 + v47 + -0.5 < v40 + v41)
      {
        objc_msgSend(v9, sel_fontSize);
        v50 = v49;
        objc_msgSend(v8, sel_fontSize);
        v52 = v39;
        v53 = v37;
        if (vabds_f32(v50, v51) < 0.5)
        {
          v54 = v95;
          v55 = v97;
          v94 = v97 - v52 - v37 < 5.0;
LABEL_44:
          if (vabdd_f64(v52, v55) >= 0.5)
          {
            v98 = 0;
          }
          else
          {
            objc_msgSend(v9, sel_fontSize);
            v57 = v56;
            objc_msgSend(v8, sel_fontSize);
            v59 = v54 - v43 - v99 < 4.0;
            if (vabds_f32(v57, v58) >= 0.5)
              v59 = 0;
            v98 = v59;
          }
          v106.origin.x = v43;
          v106.origin.y = v52;
          v106.size.width = v99;
          v106.size.height = v53;
          v110.origin.x = v54;
          v110.origin.y = v55;
          v110.size.width = v46;
          v110.size.height = rect2;
          if (CGRectIntersectsRect(v106, v110))
          {
            objc_msgSend(v9, sel_fontSize);
            v61 = v60;
            objc_msgSend(v8, sel_fontSize);
            v96 = vabds_f32(v61, v62) < 0.5;
          }
          else
          {
            v96 = 0;
          }
          v63 = objc_msgSend(v9, sel_className);
          if (v63 || (v63 = objc_msgSend(v8, sel_className)) != 0)
          {

            v64 = objc_msgSend(v9, sel_className);
            if (v64)
            {
              v65 = v64;
              v66 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              v68 = v67;

            }
            else
            {
              v66 = 0;
              v68 = 0;
            }
            v69 = objc_msgSend(v8, sel_className);
            if (v69)
            {
              v70 = v69;
              v71 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              v73 = v72;

              if (v68)
              {
                if (!v73)
                  goto LABEL_66;
                if (v66 == v71 && v68 == v73)
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                }
                else
                {
                  v74 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if ((v74 & 1) == 0)
                    goto LABEL_75;
                }
              }
              else if (v73)
              {
LABEL_66:

                swift_bridgeObjectRelease();
                goto LABEL_76;
              }
            }
            else if (v68)
            {
              goto LABEL_66;
            }
          }
          if (!v94 && !v98 && !v96)
          {
LABEL_75:

LABEL_76:
            v4 = a1 & 0xC000000000000001;
            v2 = v100;
            v7 = &stru_24F10A000;
LABEL_14:
            v11 = v8;
            MEMORY[0x22E2AFAFC]();
            if (*(_QWORD *)((v102 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v102 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();

            v5 = v11;
            goto LABEL_17;
          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
          v75 = swift_allocObject();
          *(_OWORD *)(v75 + 16) = v93;
          v76 = objc_msgSend(v9, sel_text);
          v77 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v79 = v78;

          *(_QWORD *)(v75 + 56) = MEMORY[0x24BEE0D00];
          v80 = lazy protocol witness table accessor for type String and conformance String();
          *(_QWORD *)(v75 + 64) = v80;
          *(_QWORD *)(v75 + 32) = v77;
          *(_QWORD *)(v75 + 40) = v79;
          v81 = objc_msgSend(v8, sel_text);
          v82 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v84 = v83;

          *(_QWORD *)(v75 + 96) = MEMORY[0x24BEE0D00];
          *(_QWORD *)(v75 + 104) = v80;
          *(_QWORD *)(v75 + 72) = v82;
          *(_QWORD *)(v75 + 80) = v84;
          v85 = String.init(format:_:)();
          v86 = (void *)MEMORY[0x22E2AF8EC](v85);
          swift_bridgeObjectRelease();
          objc_msgSend(v9, sel_setText_, v86);

          v107.origin.x = v43;
          v107.origin.y = v52;
          v107.size.width = v99;
          v107.size.height = v53;
          v111.origin.x = v54;
          v111.origin.y = v55;
          v111.size.width = v46;
          v111.size.height = rect2;
          v108 = CGRectUnion(v107, v111);
          objc_msgSend(v9, sel_setFrameInWindow_, v108.origin.x, v108.origin.y, v108.size.width, v108.size.height);
          objc_msgSend(v9, sel_absoluteOriginOnScreen);
          v88 = v87;
          objc_msgSend(v8, sel_absoluteOriginOnScreen);
          if (v89 < v88)
            v88 = v89;
          objc_msgSend(v9, sel_absoluteOriginOnScreen);
          v91 = v90;
          objc_msgSend(v8, sel_absoluteOriginOnScreen);
          if (v92 >= v91)
            v92 = v91;
          objc_msgSend(v9, sel_setAbsoluteOriginOnScreen_, v88, v92);

          goto LABEL_74;
        }
        v94 = 0;
      }
      else
      {
        v94 = 0;
        v52 = v39;
        v53 = v37;
      }
      v54 = v95;
      v55 = v97;
      goto LABEL_44;
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized DUStructuredExtractionDefaultImplementation.determineLiveTextResults(uiElements:)(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __objc2_ivar *v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  unint64_t v27;
  int *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  void *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v2 = type metadata accessor for DUStructuredExtractionResult(0);
  v50 = *(_QWORD *)(v2 - 8);
  v51 = (int *)v2;
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (uint64_t *)((char *)&v46 - v6);
  if (!(a1 >> 62))
  {
    v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_3;
LABEL_21:
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v8 = result;
  if (!result)
    goto LABEL_21;
LABEL_3:
  if (v8 >= 1)
  {
    v10 = 0;
    v11 = a1 & 0xC000000000000001;
    v47 = v7 + 4;
    v12 = MEMORY[0x24BEE4AF8];
    v13 = &stru_24F10A000;
    v52 = (void *)0x80000002284DB440;
    v53 = a1 & 0xC000000000000001;
    v48 = a1;
    v49 = v8;
    do
    {
      if (v11)
        v14 = (id)MEMORY[0x22E2AFF34](v10, a1);
      else
        v14 = *(id *)(a1 + 8 * v10 + 32);
      v15 = v14;
      if ((objc_msgSend(v14, *(SEL *)&v13[101].align) & 1) != 0
        && (v16 = objc_msgSend(v15, sel_className)) != 0)
      {
        v17 = v16;
        v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v20 = v19;

        v54 = v18;
        v55 = v20;
        lazy protocol witness table accessor for type String and conformance String();
        v21._countAndFlagsBits = 0xD000000000000019;
        v21._object = v52;
        LOBYTE(v17) = StringProtocol.contains(_:)(v21);
        swift_bridgeObjectRelease();
        if ((v17 & 1) != 0)
        {
          v22 = objc_msgSend(v15, sel_text);
          v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v25 = v24;

          v26 = v47;
          v47[2] = 0u;
          v26[3] = 0u;
          *v26 = 0u;
          v26[1] = 0u;
          v27 = v12;
          v28 = v51;
          v29 = (char *)v7 + v51[10];
          v30 = type metadata accessor for URL();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v29, 1, 1, v30);
          *(uint64_t *)((char *)v7 + v28[11]) = 0;
          v31 = (char *)v7 + v28[12];
          v32 = type metadata accessor for CalendarEvent(0);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v31, 1, 1, v32);
          v33 = (uint64_t *)((char *)v7 + v28[13]);
          *v33 = 0;
          v33[1] = 0;
          v34 = (uint64_t *)((char *)v7 + v28[14]);
          v35 = (uint64_t)v5;
          v36 = (uint64_t *)((char *)v7 + v28[15]);
          v37 = v28[16];
          *v7 = v23;
          v7[1] = v25;
          objc_msgSend(v15, sel_frameInWindow);
          *v34 = v38;
          v34[1] = v39;
          v34[2] = v40;
          v34[3] = v41;
          objc_msgSend(v15, sel_absoluteOriginOnScreen);
          *v36 = v42;
          v36[1] = v43;
          v5 = (char *)v35;
          v13 = &stru_24F10A000;
          *((_BYTE *)v7 + v37) = objc_msgSend(v15, sel_isOnScreen);
          v12 = v27;
          v7[2] = 0x747865546576696CLL;
          v7[3] = 0xE800000000000000;
          outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v7, v35, type metadata accessor for DUStructuredExtractionResult);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v27 + 16) + 1, 1, v27);
          v45 = *(_QWORD *)(v12 + 16);
          v44 = *(_QWORD *)(v12 + 24);
          a1 = v48;
          v8 = v49;
          if (v45 >= v44 >> 1)
            v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v44 > 1, v45 + 1, 1, v12);
          *(_QWORD *)(v12 + 16) = v45 + 1;
          outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v5, v12+ ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80))+ *(_QWORD *)(v50 + 72) * v45, type metadata accessor for DUStructuredExtractionResult);

          outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v7, type metadata accessor for DUStructuredExtractionResult);
          v11 = v53;
        }
        else
        {

          v11 = v53;
          v13 = &stru_24F10A000;
        }
      }
      else
      {

      }
      ++v10;
    }
    while (v8 != v10);
    swift_bridgeObjectRelease();
    return v12;
  }
  __break(1u);
  return result;
}

uint64_t specialized DUStructuredExtractionDefaultImplementation.determinePersonResults(uiElements:)(unint64_t a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __objc2_ivar *v11;
  id v12;
  void *v13;
  id v15;
  void *v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t result;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _OWORD *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;

  v2 = (int *)type metadata accessor for DUStructuredExtractionResult(0);
  v47 = *((_QWORD *)v2 - 1);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v50 = (uint64_t)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (uint64_t *)((char *)&v44 - v5);
  if (a1 >> 62)
  {
LABEL_39:
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    if (v7)
      goto LABEL_3;
  }
  else
  {
    v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7)
    {
LABEL_3:
      v8 = 0;
      v9 = a1 & 0xC000000000000001;
      v51 = a1 + 32;
      v52 = a1 & 0xFFFFFFFFFFFFFF8;
      v45 = v6 + 4;
      v10 = MEMORY[0x24BEE4AF8];
      v11 = &stru_24F10A000;
      v46 = (unint64_t)"ionDefaultImplementation";
      v44 = 0x80000002284DB420;
      v48 = a1;
      v49 = a1 & 0xC000000000000001;
      while (1)
      {
        if (v9)
        {
          v12 = (id)MEMORY[0x22E2AFF34](v8, a1);
        }
        else
        {
          if (v8 >= *(_QWORD *)(v52 + 16))
            goto LABEL_38;
          v12 = *(id *)(v51 + 8 * v8);
        }
        v13 = v12;
        if (__OFADD__(v8++, 1))
        {
          __break(1u);
LABEL_38:
          __break(1u);
          goto LABEL_39;
        }
        if (objc_msgSend(v12, *(SEL *)&v11[101].align)
          && (v15 = objc_msgSend(v13, sel_superviewClassNames)) != 0)
        {
          v16 = v15;
          v53 = v10;
          v17 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

          v18 = v17[2];
          if (!v18)
            goto LABEL_23;
          if (v17[4] == 0xD00000000000001CLL && v17[5] == v44
            || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
LABEL_17:
            swift_bridgeObjectRelease();
            v19 = objc_msgSend(v13, sel_text);
            v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v22 = v21;

            v23 = v45;
            v45[2] = 0u;
            v23[3] = 0u;
            *v23 = 0u;
            v23[1] = 0u;
            v24 = (char *)v6 + v2[10];
            v25 = type metadata accessor for URL();
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 1, 1, v25);
            *(uint64_t *)((char *)v6 + v2[11]) = 0;
            v26 = (char *)v6 + v2[12];
            v27 = type metadata accessor for CalendarEvent(0);
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v26, 1, 1, v27);
            v28 = (uint64_t *)((char *)v6 + v2[13]);
            *v28 = 0;
            v28[1] = 0;
            v29 = (uint64_t *)((char *)v6 + v2[14]);
            v30 = (uint64_t *)((char *)v6 + v2[15]);
            v31 = v2[16];
            *v6 = v20;
            v6[1] = v22;
            objc_msgSend(v13, sel_frameInWindow);
            *v29 = v32;
            v29[1] = v33;
            v29[2] = v34;
            v29[3] = v35;
            objc_msgSend(v13, sel_absoluteOriginOnScreen);
            *v30 = v36;
            v30[1] = v37;
            *((_BYTE *)v6 + v31) = objc_msgSend(v13, sel_isOnScreen);
            v6[2] = 0x6E6F73726570;
            v6[3] = 0xE600000000000000;
            outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v6, v50, type metadata accessor for DUStructuredExtractionResult);
            v10 = v53;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v10 + 16) + 1, 1, v10);
            a1 = v48;
            v39 = *(_QWORD *)(v10 + 16);
            v38 = *(_QWORD *)(v10 + 24);
            if (v39 >= v38 >> 1)
              v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1, v10);
            *(_QWORD *)(v10 + 16) = v39 + 1;
            outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v50, v10+ ((*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80))+ *(_QWORD *)(v47 + 72) * v39, type metadata accessor for DUStructuredExtractionResult);

            outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v6, type metadata accessor for DUStructuredExtractionResult);
            v9 = v49;
            v11 = &stru_24F10A000;
            goto LABEL_5;
          }
          a1 = v48;
          v9 = v49;
          if (v18 != 1)
          {
            if (v17[6] == 0xD00000000000001CLL && v17[7] == (v46 | 0x8000000000000000))
              goto LABEL_17;
            result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) != 0)
              goto LABEL_17;
            if (v18 != 2)
            {
              v41 = v17 + 9;
              v42 = 2;
              while (1)
              {
                v43 = v42 + 1;
                if (__OFADD__(v42, 1))
                  break;
                if (*(v41 - 1) == 0xD00000000000001CLL && *v41 == (v46 | 0x8000000000000000))
                  goto LABEL_17;
                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                if ((result & 1) != 0)
                  goto LABEL_17;
                v41 += 2;
                ++v42;
                if (v43 == v18)
                  goto LABEL_35;
              }
              __break(1u);
              return result;
            }
LABEL_35:

            swift_bridgeObjectRelease();
            a1 = v48;
            v9 = v49;
          }
          else
          {
LABEL_23:

            swift_bridgeObjectRelease();
          }
          v10 = v53;
          v11 = &stru_24F10A000;
        }
        else
        {

        }
LABEL_5:
        if (v8 == v7)
        {
          swift_bridgeObjectRelease();
          return v10;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x24BEE4AF8];
}

uint64_t specialized DUStructuredExtractionDefaultImplementation.determineHomeAppExtractionResults(extractionItems:)(unint64_t a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;

  v2 = (int *)type metadata accessor for DUStructuredExtractionResult(0);
  v40 = *((_QWORD *)v2 - 1);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v37 - v6;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v8 = result;
    if (result)
      goto LABEL_3;
LABEL_26:
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain();
  if (!v8)
    goto LABEL_26;
LABEL_3:
  if (v8 >= 1)
  {
    v10 = 0;
    v41 = a1 & 0xC000000000000001;
    v11 = MEMORY[0x24BEE4AF8];
    v37 = a1;
    v38 = v8;
    v39 = v5;
    while (1)
    {
      v12 = v41 ? (id)MEMORY[0x22E2AFF34](v10, a1) : *(id *)(a1 + 8 * v10 + 32);
      v13 = v12;
      v14 = objc_msgSend(v12, sel_type, v37);
      if (v14 == (id)2)
        break;
      if (v14 == (id)1)
      {
        v42 = 0xEB0000000079726FLL;
        v15 = 0x7373656363416D68;
        goto LABEL_16;
      }
      if (!v14)
      {
        v42 = 0xE600000000000000;
        v15 = 0x6D6F6F526D68;
LABEL_16:
        v16 = objc_msgSend(v13, sel_title);
        v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v19 = v18;

        *((_OWORD *)v7 + 4) = 0u;
        *((_OWORD *)v7 + 5) = 0u;
        *((_OWORD *)v7 + 2) = 0u;
        *((_OWORD *)v7 + 3) = 0u;
        v20 = &v7[v2[10]];
        v21 = type metadata accessor for URL();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
        *(_QWORD *)&v7[v2[11]] = 0;
        v22 = &v7[v2[12]];
        v23 = type metadata accessor for CalendarEvent(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v22, 1, 1, v23);
        v24 = &v7[v2[14]];
        *(_OWORD *)v24 = 0u;
        *((_OWORD *)v24 + 1) = 0u;
        v25 = &v7[v2[15]];
        *(_QWORD *)v25 = 0;
        *((_QWORD *)v25 + 1) = 0;
        *(_QWORD *)v7 = v17;
        *((_QWORD *)v7 + 1) = v19;
        v26 = objc_msgSend(v13, sel_identifier);
        if (v26)
        {
          v27 = v26;
          v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v30 = v29;

        }
        else
        {
          v28 = 0;
          v30 = 0;
        }
        v31 = (uint64_t *)&v7[v2[13]];
        v32 = v2[16];
        *v31 = v28;
        v31[1] = v30;
        v7[v32] = objc_msgSend(v13, sel_isOnScreen);
        v33 = v42;
        *((_QWORD *)v7 + 2) = v15;
        *((_QWORD *)v7 + 3) = v33;
        v34 = (uint64_t)v39;
        outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v7, (uint64_t)v39, type metadata accessor for DUStructuredExtractionResult);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v11 + 16) + 1, 1, v11);
        a1 = v37;
        v36 = *(_QWORD *)(v11 + 16);
        v35 = *(_QWORD *)(v11 + 24);
        if (v36 >= v35 >> 1)
          v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1, v11);
        *(_QWORD *)(v11 + 16) = v36 + 1;
        outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v34, v11+ ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80))+ *(_QWORD *)(v40 + 72) * v36, type metadata accessor for DUStructuredExtractionResult);

        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v7, type metadata accessor for DUStructuredExtractionResult);
        v8 = v38;
        goto LABEL_6;
      }

LABEL_6:
      if (v8 == ++v10)
      {
        swift_bridgeObjectRelease();
        return v11;
      }
    }
    v42 = 0xE600000000000000;
    v15 = 0x656D6F486D68;
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

_UNKNOWN **associated type witness table accessor for DUProcessingPhaseImplementation.SpecificationType : DUProcessingPhaseSpecification in DUStructuredExtractionDefaultImplementation()
{
  return &protocol witness table for DUStructuredExtractionSpecification;
}

uint64_t type metadata accessor for DUStructuredExtractionDefaultImplementation()
{
  return objc_opt_self();
}

uint64_t outlined assign with copy of DateComponents?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of CKContextResponse?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CKContextResponse?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t static RetrievalDatabaseQueries.insertRecord(db:record:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  void (*v7)(unint64_t, unint64_t, void (*)(void *), uint64_t, _QWORD, _QWORD);

  v4 = specialized static DUVectorUtils.normalized(vector:)(*(_QWORD *)(a2 + 16));
  v5 = swift_allocObject();
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 32) = v6;
  *(_QWORD *)(v5 + 48) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(v5 + 56) = v4;
  v7 = *(void (**)(unint64_t, unint64_t, void (*)(void *), uint64_t, _QWORD, _QWORD))((*MEMORY[0x24BEE4EA0] & *a1) + 0x108);
  outlined retain of VectorRecord(a2);
  v7(0xD00000000000007ELL, 0x80000002284DB490, partial apply for closure #1 in static RetrievalDatabaseQueries.insertRecord(db:record:), v5, 0, 0);
  return swift_release();
}

void closure #1 in static RetrievalDatabaseQueries.insertRecord(db:record:)(void *a1, _QWORD *a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  Class isa;
  Class v11;
  _BYTE v12[16];
  _QWORD v13[2];

  v6 = (void *)MEMORY[0x22E2AF8EC](*a2, a2[1]);
  objc_msgSend(a1, sel_bindNamedParam_toNSString_, ":record_id", v6);

  v7 = specialized static DUVectorUtils.toData(vector:)(a3);
  v9 = v8;
  isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v7, v9);
  objc_msgSend(a1, sel_bindNamedParam_toNSData_, ":vector", isa);

  outlined init with take of Data?((uint64_t)(a2 + 3), (uint64_t)v12);
  outlined init with take of Data?((uint64_t)v12, (uint64_t)v13);
  if (v13[1] >> 60 == 15)
    v11 = 0;
  else
    v11 = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a1, sel_bindNamedParam_toNSData_, ":associated_data", v11);

}

uint64_t static RetrievalDatabaseQueries.clearAllRecords(db:)(_QWORD *a1)
{
  return (*(uint64_t (**)(unint64_t, unint64_t, _QWORD, _QWORD, _QWORD, _QWORD))((*MEMORY[0x24BEE4EA0] & *a1) + 0x108))(0xD000000000000017, 0x80000002284DB510, 0, 0, 0, 0);
}

uint64_t static RetrievalDatabaseQueries.fetchNeighborsForVector(db:vector:distanceLimit:countLimit:)(_QWORD *a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(unint64_t, unint64_t, id (*)(void *), uint64_t, uint64_t (*)(void *), uint64_t);
  uint64_t v12;

  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = MEMORY[0x24BEE4AF8];
  v9 = specialized static DUVectorUtils.normalized(vector:)(a2);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v9;
  *(float *)(v10 + 24) = a4;
  *(_QWORD *)(v10 + 32) = a3;
  v11 = *(void (**)(unint64_t, unint64_t, id (*)(void *), uint64_t, uint64_t (*)(void *), uint64_t))((*MEMORY[0x24BEE4EA0] & *a1) + 0x108);
  swift_retain();
  v11(0xD000000000000158, 0x80000002284DB530, partial apply for closure #1 in static RetrievalDatabaseQueries.fetchNeighborsForVector(db:vector:distanceLimit:countLimit:), v10, partial apply for closure #2 in static RetrievalDatabaseQueries.fetchNeighborsForVector(db:vector:distanceLimit:countLimit:), v8);
  swift_release();
  swift_release();
  swift_beginAccess();
  v12 = *(_QWORD *)(v8 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  return v12;
}

id closure #1 in static RetrievalDatabaseQueries.fetchNeighborsForVector(db:vector:distanceLimit:countLimit:)(void *a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  Class isa;

  v7 = specialized static DUVectorUtils.toData(vector:)(a2);
  v9 = v8;
  isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v7, v9);
  objc_msgSend(a1, sel_bindNamedParam_toNSData_, ":target_vector", isa);

  objc_msgSend(a1, sel_bindNamedParam_toDouble_, ":distance_limit", a4);
  return objc_msgSend(a1, sel_bindNamedParam_toInteger_, ":count_limit", a3);
}

uint64_t closure #2 in static RetrievalDatabaseQueries.fetchNeighborsForVector(db:vector:distanceLimit:countLimit:)(void *a1, uint64_t a2)
{
  id v4;
  void *v5;
  _QWORD **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  id v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char isUniquelyReferenced_nonNull_native;
  float v20;
  unint64_t v21;
  unint64_t v22;
  float *v23;

  v4 = objc_msgSend(a1, sel_getNSStringForColumn_, 0);
  if (!v4)
    return *MEMORY[0x24BE7A6A8];
  v5 = v4;
  v6 = (_QWORD **)(a2 + 16);
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = v8;

  objc_msgSend(a1, sel_getDoubleForColumn_, 1);
  v11 = v10;
  v12 = objc_msgSend(a1, sel_getNSDataForColumn_, 2);
  if (v12)
  {
    v13 = v12;
    v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v16 = v15;

  }
  else
  {
    v14 = 0;
    v16 = 0xF000000000000000;
  }
  swift_beginAccess();
  v18 = *v6;
  outlined copy of Data?(v14, v16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v6 = v18;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
    *v6 = v18;
  }
  v20 = v11;
  v22 = v18[2];
  v21 = v18[3];
  if (v22 >= v21 >> 1)
  {
    v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v22 + 1, 1, v18);
    *v6 = v18;
  }
  v18[2] = v22 + 1;
  v23 = (float *)&v18[5 * v22];
  *((_QWORD *)v23 + 4) = v7;
  *((_QWORD *)v23 + 5) = v9;
  *((_QWORD *)v23 + 6) = v14;
  *((_QWORD *)v23 + 7) = v16;
  v23[16] = v20;
  swift_endAccess();
  v17 = *MEMORY[0x24BE7A6A8];
  outlined consume of Data?(v14, v16);
  return v17;
}

uint64_t sub_22832D500()
{
  uint64_t v0;
  unint64_t v1;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = *(_QWORD *)(v0 + 48);
  if (v1 >> 60 != 15)
    outlined consume of Data._Representation(*(_QWORD *)(v0 + 40), v1);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #1 in static RetrievalDatabaseQueries.insertRecord(db:record:)(void *a1)
{
  uint64_t v1;

  closure #1 in static RetrievalDatabaseQueries.insertRecord(db:record:)(a1, (_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 56));
}

uint64_t outlined retain of VectorRecord(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data?(v2, v3);
  return a1;
}

uint64_t sub_22832D5A4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_22832D5C8()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

id partial apply for closure #1 in static RetrievalDatabaseQueries.fetchNeighborsForVector(db:vector:distanceLimit:countLimit:)(void *a1)
{
  uint64_t v1;

  return closure #1 in static RetrievalDatabaseQueries.fetchNeighborsForVector(db:vector:distanceLimit:countLimit:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 32), *(float *)(v1 + 24));
}

uint64_t partial apply for closure #2 in static RetrievalDatabaseQueries.fetchNeighborsForVector(db:vector:distanceLimit:countLimit:)(void *a1)
{
  uint64_t v1;

  return closure #2 in static RetrievalDatabaseQueries.fetchNeighborsForVector(db:vector:distanceLimit:countLimit:)(a1, v1);
}

ValueMetadata *type metadata accessor for RetrievalDatabaseQueries()
{
  return &type metadata for RetrievalDatabaseQueries;
}

uint64_t outlined init with take of Data?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t static DUTopicEncodingSmolBERToImplementation.specification.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for DUTopicEncodingSmolBERToSpecification();
  result = swift_allocObject();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for DUTopicEncodingSmolBERToSpecification;
  *a1 = result;
  return result;
}

unint64_t static DUTopicEncodingSmolBERToImplementation.implementationID.getter()
{
  return 0xD00000000000001DLL;
}

void *static DUTopicEncodingSmolBERToImplementation.implementationAttributes.getter()
{
  return &outlined read-only object #0 of static DUTopicEncodingSmolBERToImplementation.implementationAttributes.getter;
}

uint64_t DUTopicEncodingSmolBERToImplementation.runTypedOnRequest(request:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  type metadata accessor for DUBackboneEncodingSmolBERToSpecification();
  *(_QWORD *)(v1 + 40) = swift_allocObject();
  v5 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:)
                                       + async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:));
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 48) = v3;
  *v3 = v1;
  v3[1] = DUTopicEncodingSmolBERToImplementation.runTypedOnRequest(request:);
  return v5(a1);
}

{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 56) = a1;
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  void *v4;

  v3 = *v2;
  *(_QWORD *)(v3 + 96) = a1;
  *(_QWORD *)(v3 + 104) = v1;
  swift_task_dealloc();
  if (!v1)
  {
    v4 = *(void **)(v3 + 56);

  }
  return swift_task_switch();
}

uint64_t DUTopicEncodingSmolBERToImplementation.runTypedOnRequest(request:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  id v5;
  id v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(void **)(v0 + 56);
  if (v1)
  {
    type metadata accessor for DUTrialAssetLoader();
    swift_allocObject();
    v2 = DUTrialAssetLoader.init()();
    *(_QWORD *)(v0 + 64) = v2;
    v3 = (*(uint64_t (**)(unint64_t, unint64_t, unint64_t, unint64_t))(*(_QWORD *)v2 + 136))(0xD00000000000002DLL, 0x80000002284DB740, 0xD000000000000011, 0x80000002284DB770);
    v4 = (*(uint64_t (**)(unint64_t, unint64_t, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v2 + 152))(0xD00000000000002DLL, 0x80000002284DB740, 0xD000000000000012, 0x80000002284DB790, v3 & 1);
    *(_QWORD *)(v0 + 72) = v4;
    if (v4)
    {
      v5 = objc_allocWithZone(MEMORY[0x24BDC0018]);
      v6 = v1;
      *(_QWORD *)(v0 + 80) = objc_msgSend(v5, sel_init);
      v7 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 88) = v7;
      *v7 = v0;
      v7[1] = DUTopicEncodingSmolBERToImplementation.runTypedOnRequest(request:);
      return MLModel.prediction(from:options:)();
    }
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v9 = swift_allocError();
    *(_QWORD *)v11 = 0xD000000000000027;
    *(_QWORD *)(v11 + 8) = 0x80000002284DB7B0;
    *(_BYTE *)(v11 + 16) = 0;
    swift_release();

  }
  else
  {
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v9 = swift_allocError();
    *(_QWORD *)v10 = 0xD00000000000002BLL;
    *(_QWORD *)(v10 + 8) = 0x80000002284DB710;
    *(_BYTE *)(v10 + 16) = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v9, 1);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(void **)(v0 + 96);
  v2 = (void *)MEMORY[0x22E2AF8EC](0x6E655F6369706F74, 0xEE00676E69646F63);
  v3 = objc_msgSend(v1, sel_featureValueForName_, v2);

  if (!v3)
  {
    v9 = *(void **)(v0 + 72);
    v7 = *(void **)(v0 + 56);
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v5 = swift_allocError();
    *(_QWORD *)v10 = 0xD000000000000028;
    *(_QWORD *)(v10 + 8) = 0x80000002284DB810;
    *(_BYTE *)(v10 + 16) = 0;
    swift_unknownObjectRelease();

LABEL_6:
    swift_release();

    v8 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v5, v8);
  }
  objc_allocWithZone((Class)type metadata accessor for DUEncodingModelOutput());
  v4 = v3;
  v5 = (uint64_t)DUEncodingModelOutput.init(modelName:hiddenLayerSize:nHiddenLayers:pooledFeatureValue:)(0x747265626C6F6D73, 0xEF6369706F542D6FLL, 256, 6, v4);
  v6 = *(void **)(v0 + 72);
  v7 = *(void **)(v0 + 56);
  if (!v5)
  {
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v5 = swift_allocError();
    *(_QWORD *)v11 = 0xD000000000000046;
    *(_QWORD *)(v11 + 8) = 0x80000002284DB840;
    *(_BYTE *)(v11 + 16) = 0;

    swift_unknownObjectRelease();
    goto LABEL_6;
  }

  swift_unknownObjectRelease();
  swift_release();

  v8 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v5, v8);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(void **)(v0 + 104);
  v2 = *(void **)(v0 + 72);
  v3 = *(void **)(v0 + 56);

  _StringGuts.grow(_:)(46);
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0xE000000000000000;
  v4._object = (void *)0x80000002284DB7E0;
  v4._countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v4);
  *(_QWORD *)(v0 + 32) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  _print_unlocked<A, B>(_:_:)();
  v5 = *(_QWORD *)(v0 + 16);
  v6 = *(_QWORD *)(v0 + 24);
  lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
  v7 = swift_allocError();
  *(_QWORD *)v8 = v5;
  *(_QWORD *)(v8 + 8) = v6;
  *(_BYTE *)(v8 + 16) = 0;

  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v7, 1);
}

uint64_t DUTopicEncodingSmolBERToImplementation.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t DUTopicEncodingSmolBERToImplementation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t DUTopicEncodingSmolBERToImplementation.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t DUTopicEncodingSmolBERToImplementation.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t protocol witness for static DUProcessingPhaseImplementation.specification.getter in conformance DUTopicEncodingSmolBERToImplementation@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for DUTopicEncodingSmolBERToSpecification();
  result = swift_allocObject();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for DUTopicEncodingSmolBERToSpecification;
  *a1 = result;
  return result;
}

unint64_t protocol witness for static DUProcessingPhaseImplementation.implementationID.getter in conformance DUTopicEncodingSmolBERToImplementation()
{
  return 0xD00000000000001DLL;
}

void *protocol witness for static DUProcessingPhaseImplementation.implementationAttributes.getter in conformance DUTopicEncodingSmolBERToImplementation()
{
  return &outlined read-only object #0 of protocol witness for static DUProcessingPhaseImplementation.implementationAttributes.getter in conformance DUTopicEncodingSmolBERToImplementation;
}

_UNKNOWN **associated type witness table accessor for DUProcessingPhaseImplementation.SpecificationType : DUProcessingPhaseSpecification in DUTopicEncodingSmolBERToImplementation()
{
  return &protocol witness table for DUTopicEncodingSmolBERToSpecification;
}

uint64_t type metadata accessor for DUTopicEncodingSmolBERToImplementation()
{
  return objc_opt_self();
}

BOOL DUGlobalTopicSetName.init(rawValue:)(uint64_t a1)
{
  return a1 && a1 == 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance DUGlobalTopicSetName()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance DUGlobalTopicSetName()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DUGlobalTopicSetName()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance DUGlobalTopicSetName@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2;

  v2 = *result != 1 && *result != 0;
  *(_QWORD *)a2 = *result == 1;
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

uint64_t DUGlobalTopicSetIdentifier.topicSetName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC21DocumentUnderstanding26DUGlobalTopicSetIdentifier_topicSetName;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t DUGlobalTopicSetIdentifier.topicSetName.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding26DUGlobalTopicSetIdentifier_topicSetName);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*DUGlobalTopicSetIdentifier.topicSetName.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUGlobalTopicSetIdentifier.topicSetVersion.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC21DocumentUnderstanding26DUGlobalTopicSetIdentifier_topicSetVersion;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t DUGlobalTopicSetIdentifier.topicSetVersion.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding26DUGlobalTopicSetIdentifier_topicSetVersion);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*DUGlobalTopicSetIdentifier.topicSetVersion.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

char *specialized DUGlobalTopicSetIdentifier.__allocating_init<A>(proto:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  char *v5;
  _BOOL8 v6;
  _BOOL8 *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _BYTE v12[24];

  v2 = type metadata accessor for DocumentUnderstanding_TopicSetIdentifier();
  MEMORY[0x24BDAC7A8](v2);
  v4 = &v12[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUGlobalTopicSetIdentifier()), sel_init);
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(a1, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_TopicSetIdentifier);
  if (v4[8])
    v6 = *(_QWORD *)v4 != 0;
  else
    v6 = *(_QWORD *)v4 == 1;
  v7 = (_BOOL8 *)&v5[OBJC_IVAR____TtC21DocumentUnderstanding26DUGlobalTopicSetIdentifier_topicSetName];
  swift_beginAccess();
  *v7 = v6;
  v8 = *((_QWORD *)v4 + 2);
  v9 = v5;
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(a1, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_TopicSetIdentifier);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_TopicSetIdentifier);
  v10 = &v9[OBJC_IVAR____TtC21DocumentUnderstanding26DUGlobalTopicSetIdentifier_topicSetVersion];
  swift_beginAccess();
  *(_QWORD *)v10 = v8;

  return v9;
}

char *DUGlobalTopicSetIdentifier.__allocating_init<A>(proto:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  objc_class *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  id v17;
  char *v18;
  char v19;
  void (*v20)(_BYTE *, uint64_t, uint64_t, uint64_t);
  _BOOL8 v21;
  _BOOL8 *v22;
  uint64_t v23;
  char *v24;
  _BYTE v26[24];

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_TopicSetIdentifier?);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = &v26[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v12 = &v26[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for DocumentUnderstanding_TopicSetIdentifier();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = &v26[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = objc_msgSend(objc_allocWithZone(v3), sel_init);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a2);
  v18 = (char *)v17;
  v19 = swift_dynamicCast();
  v20 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v14 + 56);
  if ((v19 & 1) != 0)
  {
    v20(v9, 0, 1, v13);
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v9, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_TopicSetIdentifier);
    if (v16[8])
      v21 = *(_QWORD *)v16 != 0;
    else
      v21 = *(_QWORD *)v16 == 1;
    v22 = (_BOOL8 *)&v18[OBJC_IVAR____TtC21DocumentUnderstanding26DUGlobalTopicSetIdentifier_topicSetName];
    swift_beginAccess();
    *v22 = v21;
    v23 = *((_QWORD *)v16 + 2);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, a2);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_TopicSetIdentifier);
    v24 = &v18[OBJC_IVAR____TtC21DocumentUnderstanding26DUGlobalTopicSetIdentifier_topicSetVersion];
    swift_beginAccess();
    *(_QWORD *)v24 = v23;

  }
  else
  {
    v20(v9, 1, 1, v13);

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, a2);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v9, &demangling cache variable for type metadata for DocumentUnderstanding_TopicSetIdentifier?);
    return 0;
  }
  return v18;
}

uint64_t DUGlobalTopicSetIdentifier.protoRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t result;

  type metadata accessor for DocumentUnderstanding_TopicSetIdentifier();
  v3 = UnknownStorage.init()();
  v4 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v5 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0x60))(v3);
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v5 < 2;
  result = (*(uint64_t (**)(void))((*v4 & *v1) + 0x78))();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t DUGlobalTopicSetIdentifier.copy(with:)@<X0>(char **a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t result;
  uint64_t v9;

  v3 = type metadata accessor for DocumentUnderstanding_TopicSetIdentifier();
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0x98))(v4);
  v7 = specialized DUGlobalTopicSetIdentifier.__allocating_init<A>(proto:)((uint64_t)v6);
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DUGlobalTopicSetIdentifier?);
  a1[3] = (char *)result;
  *a1 = v7;
  return result;
}

Swift::Void __swiftcall DUGlobalTopicSetIdentifier.encode(with:)(NSCoder with)
{
  DUGlobalTopicSetIdentifier.encode(with:)(with.super.isa, (void (*)(void))type metadata accessor for DUGlobalTopicSetIdentifier, &lazy protocol witness table cache variable for type DUGlobalTopicSetIdentifier and conformance DUGlobalTopicSetIdentifier, (uint64_t)&protocol conformance descriptor for DUGlobalTopicSetIdentifier);
}

uint64_t type metadata accessor for DUGlobalTopicSetIdentifier()
{
  return objc_opt_self();
}

uint64_t DUGlobalTopicSetIdentifier.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return DUGlobalTopicSetIdentifier.init(coder:)(a1);
}

uint64_t DUGlobalTopicSetIdentifier.init(coder:)(void *a1)
{
  return DUGlobalTopicSetIdentifier.init(coder:)(a1, &lazy protocol witness table cache variable for type DUGlobalTopicSetIdentifier and conformance DUGlobalTopicSetIdentifier, (uint64_t (*)(uint64_t))type metadata accessor for DUGlobalTopicSetIdentifier, (uint64_t)&protocol conformance descriptor for DUGlobalTopicSetIdentifier);
}

id DUGlobalTopicSetIdentifier.init()()
{
  char *v0;
  objc_super v2;

  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding26DUGlobalTopicSetIdentifier_topicSetName] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding26DUGlobalTopicSetIdentifier_topicSetVersion] = 0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DUGlobalTopicSetIdentifier();
  return objc_msgSendSuper2(&v2, sel_init);
}

id DUGlobalTopicSetIdentifier.__deallocating_deinit()
{
  return DUGlobalTopicSetIdentifier.__deallocating_deinit(type metadata accessor for DUGlobalTopicSetIdentifier);
}

uint64_t protocol witness for DUProtobufEncodableProtocol.init(proto:) in conformance DUGlobalTopicSetIdentifier@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 144);
  v6 = type metadata accessor for DocumentUnderstanding_TopicSetIdentifier();
  v7 = lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DocumentUnderstanding_TopicSetIdentifier and conformance DocumentUnderstanding_TopicSetIdentifier, 255, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_TopicSetIdentifier, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_TopicSetIdentifier);
  result = v5(a1, v6, v7);
  *a2 = result;
  return result;
}

id DUTopicResult.topicSet.getter()
{
  uint64_t v0;
  id *v1;

  v1 = (id *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding13DUTopicResult_topicSet);
  swift_beginAccess();
  return *v1;
}

void DUTopicResult.topicSet.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;

  v3 = (void **)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding13DUTopicResult_topicSet);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*DUTopicResult.topicSet.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUTopicResult.topicIdentifier.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding13DUTopicResult_topicIdentifier);
  swift_beginAccess();
  v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t DUTopicResult.topicIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC21DocumentUnderstanding13DUTopicResult_topicIdentifier);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*DUTopicResult.topicIdentifier.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

double DUTopicResult.topicConfidence.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC21DocumentUnderstanding13DUTopicResult_topicConfidence;
  swift_beginAccess();
  return *(double *)v1;
}

uint64_t DUTopicResult.topicConfidence.setter(double a1)
{
  uint64_t v1;
  double *v3;
  uint64_t result;

  v3 = (double *)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding13DUTopicResult_topicConfidence);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*DUTopicResult.topicConfidence.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUTopicResult.topicNames.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t DUTopicResult.topicNames.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding13DUTopicResult_topicNames);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*DUTopicResult.topicNames.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryConfidence.modify;
}

char *specialized DUTopicResult.__allocating_init<A>(proto:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  int *v9;
  uint64_t v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  void **v16;
  void *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  double *v22;
  double v23;
  double *v24;
  uint64_t v25;
  char *v26;
  _BYTE v28[24];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_TopicSetIdentifier?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = &v28[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for DocumentUnderstanding_TopicSetIdentifier();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v28[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = (int *)type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (uint64_t *)&v28[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUTopicResult()), sel_init);
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(a1, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult);
  outlined init with copy of DocumentUnderstanding_TopicSetIdentifier?((uint64_t)v11 + v9[6], (uint64_t)v4);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    *(_QWORD *)v8 = 0;
    v8[8] = 1;
    *((_QWORD *)v8 + 2) = 0;
    v13 = v12;
    UnknownStorage.init()();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v4, &demangling cache variable for type metadata for DocumentUnderstanding_TopicSetIdentifier?);
  }
  else
  {
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v4, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_TopicSetIdentifier);
    v14 = v12;
  }
  v15 = specialized DUGlobalTopicSetIdentifier.__allocating_init<A>(proto:)((uint64_t)v8);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(a1, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult);
  if (v15)
  {
    v16 = (void **)&v12[OBJC_IVAR____TtC21DocumentUnderstanding13DUTopicResult_topicSet];
    swift_beginAccess();
    v17 = *v16;
    *v16 = v15;

    v18 = (uint64_t *)((char *)v11 + v9[7]);
    if (v18[1])
    {
      v19 = *v18;
      v20 = v18[1];
    }
    else
    {
      v19 = 0;
      v20 = 0xE000000000000000;
    }
    v21 = &v12[OBJC_IVAR____TtC21DocumentUnderstanding13DUTopicResult_topicIdentifier];
    swift_beginAccess();
    *(_QWORD *)v21 = v19;
    *((_QWORD *)v21 + 1) = v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v22 = (double *)((char *)v11 + v9[8]);
    if (*((_BYTE *)v22 + 8))
      v23 = 0.0;
    else
      v23 = *v22;
    v24 = (double *)&v12[OBJC_IVAR____TtC21DocumentUnderstanding13DUTopicResult_topicConfidence];
    swift_beginAccess();
    *v24 = v23;
    v25 = *v11;
    swift_bridgeObjectRetain();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult);
    v26 = &v12[OBJC_IVAR____TtC21DocumentUnderstanding13DUTopicResult_topicNames];
    swift_beginAccess();
    *(_QWORD *)v26 = v25;

    swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult);

    return 0;
  }
  return v12;
}

char *DUTopicResult.__allocating_init<A>(proto:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  id v19;
  char *v20;
  char v21;
  void (*v22)(char *, uint64_t, uint64_t, int *);
  uint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  char *v26;
  void **v27;
  void *v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  double *v33;
  double v34;
  double *v35;
  uint64_t v36;
  char *v37;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_TopicSetIdentifier?);
  MEMORY[0x24BDAC7A8](v5);
  v41 = (uint64_t)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = type metadata accessor for DocumentUnderstanding_TopicSetIdentifier();
  v39 = *(_QWORD *)(v42 - 8);
  MEMORY[0x24BDAC7A8](v42);
  v40 = (uint64_t *)((char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicResult?);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (int *)type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult();
  v16 = *((_QWORD *)v15 - 1);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = objc_msgSend(objc_allocWithZone(v2), sel_init);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, a2);
  v20 = (char *)v19;
  v21 = swift_dynamicCast();
  v22 = *(void (**)(char *, uint64_t, uint64_t, int *))(v16 + 56);
  if ((v21 & 1) != 0)
  {
    v22(v11, 0, 1, v15);
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v11, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult);
    v23 = v41;
    outlined init with copy of DocumentUnderstanding_TopicSetIdentifier?((uint64_t)&v18[v15[6]], v41);
    v24 = (uint64_t *)v18;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v23, 1, v42) == 1)
    {
      v25 = v40;
      *v40 = 0;
      *((_BYTE *)v25 + 8) = 1;
      v25[2] = 0;
      UnknownStorage.init()();
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v23, &demangling cache variable for type metadata for DocumentUnderstanding_TopicSetIdentifier?);
    }
    else
    {
      v25 = v40;
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v23, (uint64_t)v40, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_TopicSetIdentifier);
    }
    v26 = specialized DUGlobalTopicSetIdentifier.__allocating_init<A>(proto:)((uint64_t)v25);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, a2);
    if (v26)
    {
      v27 = (void **)&v20[OBJC_IVAR____TtC21DocumentUnderstanding13DUTopicResult_topicSet];
      swift_beginAccess();
      v28 = *v27;
      *v27 = v26;

      v29 = (uint64_t *)((char *)v24 + v15[7]);
      if (v29[1])
      {
        v30 = *v29;
        v31 = v29[1];
      }
      else
      {
        v30 = 0;
        v31 = 0xE000000000000000;
      }
      v32 = &v20[OBJC_IVAR____TtC21DocumentUnderstanding13DUTopicResult_topicIdentifier];
      swift_beginAccess();
      *(_QWORD *)v32 = v30;
      *((_QWORD *)v32 + 1) = v31;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v33 = (double *)((char *)v24 + v15[8]);
      if (*((_BYTE *)v33 + 8))
        v34 = 0.0;
      else
        v34 = *v33;
      v35 = (double *)&v20[OBJC_IVAR____TtC21DocumentUnderstanding13DUTopicResult_topicConfidence];
      swift_beginAccess();
      *v35 = v34;
      v36 = *v24;
      swift_bridgeObjectRetain();
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult);
      v37 = &v20[OBJC_IVAR____TtC21DocumentUnderstanding13DUTopicResult_topicNames];
      swift_beginAccess();
      *(_QWORD *)v37 = v36;

      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult);

      return 0;
    }
  }
  else
  {
    v22(v11, 1, 1, v15);

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, a2);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v11, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicResult?);
    return 0;
  }
  return v20;
}

uint64_t outlined init with copy of DocumentUnderstanding_TopicSetIdentifier?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_TopicSetIdentifier?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t DUTopicResult.protoRepresentation.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t, uint64_t);

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_TopicSetIdentifier?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DocumentUnderstanding_TopicSetIdentifier();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v33 = (uint64_t)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  MEMORY[0x24BDAC7A8](v11);
  v32 = (uint64_t)&v31 - v12;
  *a1 = MEMORY[0x24BEE4AF8];
  v13 = (int *)type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult();
  UnknownStorage.init()();
  v14 = (uint64_t)a1 + v13[6];
  v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
  v15 = v34(v14, 1, 1, v7);
  v16 = (uint64_t *)((char *)a1 + v13[7]);
  *v16 = 0;
  v16[1] = 0;
  v17 = (char *)a1 + v13[8];
  *(_QWORD *)v17 = 0;
  v17[8] = 1;
  v18 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v19 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v2) + 0x70))(v15);
  (*(void (**)(void))((*v18 & *v19) + 0x98))();

  if ((swift_dynamicCast() & 1) != 0)
  {
    v20 = v34;
    v34((uint64_t)v6, 0, 1, v7);
    v21 = v32;
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v6, v32, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_TopicSetIdentifier);
    v22 = v33;
    outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v21, v33, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_TopicSetIdentifier);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v14, &demangling cache variable for type metadata for DocumentUnderstanding_TopicSetIdentifier?);
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v22, v14, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_TopicSetIdentifier);
    v20(v14, 0, 1, v7);
    v23 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v21, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_TopicSetIdentifier);
  }
  else
  {
    v34((uint64_t)v6, 1, 1, v7);
    v23 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v6, &demangling cache variable for type metadata for DocumentUnderstanding_TopicSetIdentifier?);
  }
  v24 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v25 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v2) + 0x88))(v23);
  v27 = v26;
  v28 = swift_bridgeObjectRelease();
  *v16 = v25;
  v16[1] = v27;
  *(double *)v17 = (*(double (**)(uint64_t))((*v24 & *v2) + 0xA0))(v28);
  v17[8] = 0;
  v29 = (*(uint64_t (**)(void))((*v24 & *v2) + 0xB8))();
  result = swift_bridgeObjectRelease();
  *a1 = v29;
  return result;
}

uint64_t DUTopicResult.copy(with:)@<X0>(char **a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t result;
  uint64_t v9;

  v3 = type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult();
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0xD8))(v4);
  v7 = specialized DUTopicResult.__allocating_init<A>(proto:)((uint64_t)v6);
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DUTopicResult?);
  a1[3] = (char *)result;
  *a1 = v7;
  return result;
}

Swift::Void __swiftcall DUTopicResult.encode(with:)(NSCoder with)
{
  DUGlobalTopicSetIdentifier.encode(with:)(with.super.isa, (void (*)(void))type metadata accessor for DUTopicResult, &lazy protocol witness table cache variable for type DUTopicResult and conformance DUTopicResult, (uint64_t)&protocol conformance descriptor for DUTopicResult);
}

void DUGlobalTopicSetIdentifier.encode(with:)(void *a1, void (*a2)(void), unint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;

  a2();
  lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(a3, v8, (uint64_t (*)(uint64_t))a2, a4);
  v9 = (void *)DUProtobufEncodableProtocol.serializedData()();
  if (v9)
  {
    v10 = v9;
    v11 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000016, 0x80000002284DABA0);
    objc_msgSend(a1, sel_encodeObject_forKey_, v10, v11);

  }
}

uint64_t type metadata accessor for DUTopicResult()
{
  return objc_opt_self();
}

void @objc DUGlobalTopicSetIdentifier.encode(with:)(void *a1, uint64_t a2, void *a3, void (*a4)(void), unint64_t *a5, uint64_t a6)
{
  uint64_t v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;

  a4();
  lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(a5, v11, (uint64_t (*)(uint64_t))a4, a6);
  v12 = a3;
  v13 = a1;
  v14 = (void *)DUProtobufEncodableProtocol.serializedData()();
  if (v14)
  {
    v15 = v14;
    v16 = MEMORY[0x22E2AF8EC](0xD000000000000016, 0x80000002284DABA0);
    objc_msgSend(v12, sel_encodeObject_forKey_, v15, v16);

    v12 = v15;
    v13 = (id)v16;
  }

}

uint64_t DUTopicResult.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return DUTopicResult.init(coder:)(a1);
}

uint64_t DUTopicResult.init(coder:)(void *a1)
{
  return DUGlobalTopicSetIdentifier.init(coder:)(a1, &lazy protocol witness table cache variable for type DUTopicResult and conformance DUTopicResult, (uint64_t (*)(uint64_t))type metadata accessor for DUTopicResult, (uint64_t)&protocol conformance descriptor for DUTopicResult);
}

uint64_t DUGlobalTopicSetIdentifier.init(coder:)(void *a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  void *v4;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  swift_getObjectType();
  type metadata accessor for NSData();
  v9 = v4;
  if (!NSCoder.decodeObject<A>(of:forKey:)())
  {

    goto LABEL_5;
  }
  swift_getObjectType();

  lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(a2, v10, a3, a4);
  DUProtobufEncodableProtocol.init(serializedData:)();

  v11 = v13;
  if (!v13)
  {
LABEL_5:
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v11;
}

id DUTopicResult.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id DUTopicResult.init()()
{
  char *v0;
  uint64_t v1;
  id v2;
  char *v3;
  char *v4;
  objc_super v6;

  v1 = OBJC_IVAR____TtC21DocumentUnderstanding13DUTopicResult_topicSet;
  v2 = objc_allocWithZone((Class)type metadata accessor for DUGlobalTopicSetIdentifier());
  v3 = v0;
  *(_QWORD *)&v0[v1] = objc_msgSend(v2, sel_init);
  v4 = &v3[OBJC_IVAR____TtC21DocumentUnderstanding13DUTopicResult_topicIdentifier];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0xE000000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC21DocumentUnderstanding13DUTopicResult_topicConfidence] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC21DocumentUnderstanding13DUTopicResult_topicNames] = MEMORY[0x24BEE4AF8];

  v6.receiver = v3;
  v6.super_class = (Class)type metadata accessor for DUTopicResult();
  return objc_msgSendSuper2(&v6, sel_init);
}

id DUTopicResult.__deallocating_deinit()
{
  return DUGlobalTopicSetIdentifier.__deallocating_deinit(type metadata accessor for DUTopicResult);
}

id DUGlobalTopicSetIdentifier.__deallocating_deinit(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

unint64_t lazy protocol witness table accessor for type DUGlobalTopicSetName and conformance DUGlobalTopicSetName()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DUGlobalTopicSetName and conformance DUGlobalTopicSetName;
  if (!lazy protocol witness table cache variable for type DUGlobalTopicSetName and conformance DUGlobalTopicSetName)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for DUGlobalTopicSetName, &type metadata for DUGlobalTopicSetName);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DUGlobalTopicSetName and conformance DUGlobalTopicSetName);
  }
  return result;
}

uint64_t associated type witness table accessor for DUProtobufEncodableProtocol.ProtobufType : Message in DUGlobalTopicSetIdentifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for DUProtobufEncodableProtocol.ProtobufType : Message in DUTopicResult()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for DUProtobufEncodableProtocol.protoRepresentation.getter in conformance DUTopicResult()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **v0) + 0xD8))();
}

uint64_t protocol witness for DUProtobufEncodableProtocol.init(proto:) in conformance DUTopicResult@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 208);
  v6 = type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult();
  v7 = lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_TopicResult and conformance DocumentUnderstanding_ClientInterface_TopicResult, 255, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_TopicResult);
  result = v5(a1, v6, v7);
  *a2 = result;
  return result;
}

ValueMetadata *type metadata accessor for DUGlobalTopicSetName()
{
  return &type metadata for DUGlobalTopicSetName;
}

uint64_t sub_228330158()
{
  return lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DocumentUnderstanding_TopicSetIdentifier and conformance DocumentUnderstanding_TopicSetIdentifier, 255, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_TopicSetIdentifier, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_TopicSetIdentifier);
}

uint64_t sub_228330188()
{
  return lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_TopicResult and conformance DocumentUnderstanding_ClientInterface_TopicResult, 255, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_TopicResult);
}

id static DURequestContentType.poem.getter()
{
  objc_class *v0;
  char *v1;
  objc_super v3;

  v1 = (char *)objc_allocWithZone(v0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = 512;
  v3.receiver = v1;
  v3.super_class = v0;
  return objc_msgSendSuper2(&v3, sel_init);
}

id DURequest.__allocating_init(client:contentType:strategies:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  char *v7;
  objc_super v9;

  v7 = (char *)objc_allocWithZone(v3);
  *(_QWORD *)&v7[OBJC_IVAR____TtC21DocumentUnderstanding9DURequest_client] = a1;
  *(_QWORD *)&v7[OBJC_IVAR____TtC21DocumentUnderstanding9DURequest_contentType] = a2;
  *(_QWORD *)&v7[OBJC_IVAR____TtC21DocumentUnderstanding9DURequest_strategies] = a3;
  v9.receiver = v7;
  v9.super_class = v3;
  return objc_msgSendSuper2(&v9, sel_init);
}

id static DURequestContentType.userInterfaceUnderstanding.getter()
{
  objc_class *v0;
  char *v1;
  objc_super v3;

  v1 = (char *)objc_allocWithZone(v0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = 128;
  v3.receiver = v1;
  v3.super_class = v0;
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t DUClient.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding8DUClient_identifier);
  swift_bridgeObjectRetain();
  return v1;
}

id DUClient.__allocating_init(identifier:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return DUClient.init(identifier:)(a1, a2);
}

id DUClient.init(identifier:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  char *v5;
  void *rawValue;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  objc_super v13;

  v3 = &v2[OBJC_IVAR____TtC21DocumentUnderstanding8DUClient_identifier];
  *(_QWORD *)v3 = a1;
  *((_QWORD *)v3 + 1) = a2;
  v4 = one-time initialization token for allSpecifications;
  v5 = v2;
  if (v4 != -1)
    swift_once();
  rawValue = allSpecifications._rawValue;
  v7 = one-time initialization token for allImplementations;
  swift_bridgeObjectRetain();
  if (v7 != -1)
    swift_once();
  v8 = allImplementations._rawValue;
  type metadata accessor for DUProcessingScheduler();
  v9 = swift_allocObject();
  swift_bridgeObjectRetain();
  v10 = specialized static DUProcessingScheduler.constructSpecificationDictionary(specifications:)((uint64_t)rawValue);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v9 + 16) = v10;
  v11 = specialized static DUProcessingScheduler.constructImplementationDictionary(implementations:)((uint64_t)v8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v9 + 24) = v11;
  *(_QWORD *)&v5[OBJC_IVAR____TtC21DocumentUnderstanding8DUClient_scheduler] = v9;
  if (one-time initialization token for allTopLevelSpecifications != -1)
    swift_once();
  *(Swift::OpaquePointer *)&v5[OBJC_IVAR____TtC21DocumentUnderstanding8DUClient_topLevelSpecifications] = allTopLevelSpecifications;
  swift_bridgeObjectRetain();

  v13.receiver = v5;
  v13.super_class = (Class)type metadata accessor for DUClient();
  return objc_msgSendSuper2(&v13, sel_init);
}

void DUClient.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id DUClient.__deallocating_deinit()
{
  return DUGlobalTopicSetIdentifier.__deallocating_deinit(type metadata accessor for DUClient);
}

id DURequest.client.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding9DURequest_client);
}

id DURequest.contentType.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding9DURequest_contentType);
}

uint64_t DURequest.strategies.getter()
{
  return swift_bridgeObjectRetain();
}

id DURequest.init(client:contentType:strategies:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  objc_super v5;

  *(_QWORD *)&v3[OBJC_IVAR____TtC21DocumentUnderstanding9DURequest_client] = a1;
  *(_QWORD *)&v3[OBJC_IVAR____TtC21DocumentUnderstanding9DURequest_contentType] = a2;
  *(_QWORD *)&v3[OBJC_IVAR____TtC21DocumentUnderstanding9DURequest_strategies] = a3;
  v5.receiver = v3;
  v5.super_class = (Class)type metadata accessor for DURequest();
  return objc_msgSendSuper2(&v5, sel_init);
}

uint64_t DURequest.executeWithResult(document:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[32] = a1;
  v2[33] = v1;
  v3 = type metadata accessor for Logger();
  v2[34] = v3;
  v2[35] = *(_QWORD *)(v3 - 8);
  v2[36] = swift_task_alloc();
  v2[37] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t DURequest.executeWithResult(document:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  BOOL v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  id v54;
  uint64_t v55;
  uint64_t (*v56)(_QWORD, _QWORD, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 264);
  *(_QWORD *)(v0 + 304) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUResponse()), sel_init);
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding9DURequest_contentType), sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  *(_QWORD *)(v0 + 312) = type metadata accessor for DURequestContentType();
  result = swift_dynamicCast();
  if (!(_DWORD)result)
  {
    Logger.init()();
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_2282CC000, v14, v15, "Failed to populate content type", v16, 2u);
      MEMORY[0x22E2B117C](v16, -1, -1);
    }
    v18 = *(_QWORD *)(v0 + 280);
    v17 = *(_QWORD *)(v0 + 288);
    v19 = *(_QWORD *)(v0 + 272);

    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
LABEL_28:
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 304));
  }
  v3 = *(_QWORD *)(v0 + 264);
  v4 = *(void **)(v0 + 240);
  *(_QWORD *)(v0 + 320) = v4;
  v5 = *(_QWORD *)(v3 + OBJC_IVAR____TtC21DocumentUnderstanding9DURequest_strategies);
  if (!v5)
    goto LABEL_13;
  if (!(v5 >> 62))
  {
    if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_5;
LABEL_13:
    v21 = *(void **)(v0 + 256);
    v6 = *(_QWORD *)(v3 + OBJC_IVAR____TtC21DocumentUnderstanding9DURequest_client);
    v22 = *(_QWORD *)(v6 + OBJC_IVAR____TtC21DocumentUnderstanding8DUClient_scheduler);
    type metadata accessor for DUProcessingRequest();
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 24) = 0;
    *(_BYTE *)(v12 + 40) = 2;
    v23 = v21;
    swift_retain();
    *(_QWORD *)(v12 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    swift_beginAccess();
    v24 = *(void **)(v12 + 24);
    *(_QWORD *)(v12 + 24) = v21;

    *(_QWORD *)(v12 + 32) = v22;
LABEL_14:
    *(_QWORD *)(v0 + 328) = v12;
    v25 = *(_QWORD *)(v6 + OBJC_IVAR____TtC21DocumentUnderstanding8DUClient_topLevelSpecifications);
    *(_QWORD *)(v0 + 336) = v25;
    v26 = *(_QWORD *)(v25 + 16);
    *(_QWORD *)(v0 + 344) = v26;
    if (v26)
    {
      *(_QWORD *)(v0 + 352) = OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue;
      swift_bridgeObjectRetain();
      swift_beginAccess();
      *(_QWORD *)(v0 + 360) = 0;
      v27 = *(_QWORD *)(v0 + 352);
      v28 = *(_QWORD *)(v0 + 320);
      outlined init with copy of TopLevelSpecificationProtocol(*(_QWORD *)(v0 + 336) + 32, v0 + 16);
      if (*(_QWORD *)(v28 + v27))
      {
        while (1)
        {
          v29 = *(_QWORD *)(v0 + 40);
          v30 = *(_QWORD *)(v0 + 48);
          __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v29);
          v31 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v30 + 24))(v29, v30);
          objc_msgSend(v31, sel_copy);

          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
          if (swift_dynamicCast())
          {
            v32 = *(_QWORD *)(v0 + 352);
            v33 = *(_QWORD *)(v0 + 320);
            v34 = *(char **)(v0 + 248);
            v35 = OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue;
            *(_QWORD *)(v0 + 368) = v34;
            *(_QWORD *)(v0 + 376) = v35;
            v36 = &v34[v35];
            swift_beginAccess();
            v37 = (*(_QWORD *)(v33 + v32) & *(_QWORD *)v36) == 0;
            *(_QWORD *)v36 &= *(_QWORD *)(v33 + v32);
            if (!v37)
            {
              v51 = *(_QWORD *)(v0 + 40);
              v52 = *(_QWORD *)(v0 + 48);
              __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v51);
              v56 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v52 + 16)
                                                                             + *(_QWORD *)(v52 + 16));
              v53 = (_QWORD *)swift_task_alloc();
              *(_QWORD *)(v0 + 384) = v53;
              *v53 = v0;
              v53[1] = DURequest.executeWithResult(document:);
              return v56(*(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 328), v51, v52);
            }

          }
          else
          {
            Logger.init()();
            v38 = Logger.logObject.getter();
            v39 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v38, v39))
            {
              v40 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v40 = 0;
              _os_log_impl(&dword_2282CC000, v38, v39, "Specification did not have an associated request type", v40, 2u);
              MEMORY[0x22E2B117C](v40, -1, -1);
            }
            v41 = *(_QWORD *)(v0 + 296);
            v42 = *(_QWORD *)(v0 + 272);
            v43 = *(_QWORD *)(v0 + 280);

            (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v41, v42);
          }
          v44 = *(_QWORD *)(v0 + 344);
          v45 = *(_QWORD *)(v0 + 360) + 1;
          __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
          if (v45 == v44)
            break;
          v46 = *(_QWORD *)(v0 + 352);
          v47 = *(_QWORD *)(v0 + 360) + 1;
          *(_QWORD *)(v0 + 360) = v47;
          v48 = *(_QWORD *)(v0 + 320);
          outlined init with copy of TopLevelSpecificationProtocol(*(_QWORD *)(v0 + 336) + 40 * v47 + 32, v0 + 16);
          if (!*(_QWORD *)(v48 + v46))
            goto LABEL_25;
        }
        v50 = *(void **)(v0 + 320);
        swift_bridgeObjectRelease();
        swift_release();

      }
      else
      {
LABEL_25:
        v49 = *(void **)(v0 + 320);
        swift_bridgeObjectRelease();
        swift_release();

        __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
      }
    }
    else
    {
      swift_release();

    }
    goto LABEL_28;
  }
  swift_bridgeObjectRetain();
  v20 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(v0 + 264);
  if (!v20)
    goto LABEL_13;
LABEL_5:
  v6 = *(_QWORD *)(v3 + OBJC_IVAR____TtC21DocumentUnderstanding9DURequest_client);
  v55 = *(_QWORD *)(v6 + OBJC_IVAR____TtC21DocumentUnderstanding8DUClient_scheduler);
  if ((v5 & 0xC000000000000001) != 0)
  {
    v54 = *(id *)(v0 + 256);
    swift_retain();
    v10 = (_QWORD *)MEMORY[0x22E2AFF34](0, v5);
    v7 = *(void **)(v0 + 256);
    goto LABEL_8;
  }
  if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    v7 = *(void **)(v0 + 256);
    v8 = *(void **)(v5 + 32);
    v9 = v7;
    swift_retain();
    v10 = v8;
LABEL_8:
    v11 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v10) + 0x98))();

    type metadata accessor for DUProcessingRequest();
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 24) = 0;
    *(_BYTE *)(v12 + 40) = 2;
    *(_QWORD *)(v12 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    swift_beginAccess();
    v13 = *(void **)(v12 + 24);
    *(_QWORD *)(v12 + 24) = v7;

    *(_QWORD *)(v12 + 32) = v55;
    swift_beginAccess();
    *(_BYTE *)(v12 + 40) = v11 & 1;
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  BOOL v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t (*v30)(_QWORD, _QWORD, uint64_t, uint64_t);

  v1 = *(char **)(v0 + 368);
  *(_QWORD *)(*(_QWORD *)(v0 + 320) + *(_QWORD *)(v0 + 352)) ^= *(_QWORD *)&v1[*(_QWORD *)(v0 + 376)];

  v2 = *(_QWORD *)(v0 + 344);
  v3 = *(_QWORD *)(v0 + 360) + 1;
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  if (v3 == v2)
  {
LABEL_2:
    v4 = *(void **)(v0 + 320);
    swift_bridgeObjectRelease();
    swift_release();

  }
  else
  {
    while (1)
    {
      v10 = *(_QWORD *)(v0 + 352);
      v11 = *(_QWORD *)(v0 + 360) + 1;
      *(_QWORD *)(v0 + 360) = v11;
      v12 = *(_QWORD *)(v0 + 320);
      outlined init with copy of TopLevelSpecificationProtocol(*(_QWORD *)(v0 + 336) + 40 * v11 + 32, v0 + 16);
      if (!*(_QWORD *)(v12 + v10))
        break;
      v13 = *(_QWORD *)(v0 + 40);
      v14 = *(_QWORD *)(v0 + 48);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v13);
      v15 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v14 + 24))(v13, v14);
      objc_msgSend(v15, sel_copy);

      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      if (swift_dynamicCast())
      {
        v16 = *(_QWORD *)(v0 + 352);
        v17 = *(_QWORD *)(v0 + 320);
        v18 = *(char **)(v0 + 248);
        v19 = OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue;
        *(_QWORD *)(v0 + 368) = v18;
        *(_QWORD *)(v0 + 376) = v19;
        v20 = &v18[v19];
        swift_beginAccess();
        v21 = (*(_QWORD *)(v17 + v16) & *(_QWORD *)v20) == 0;
        *(_QWORD *)v20 &= *(_QWORD *)(v17 + v16);
        if (!v21)
        {
          v26 = *(_QWORD *)(v0 + 40);
          v27 = *(_QWORD *)(v0 + 48);
          __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v26);
          v30 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v27 + 16) + *(_QWORD *)(v27 + 16));
          v28 = (_QWORD *)swift_task_alloc();
          *(_QWORD *)(v0 + 384) = v28;
          *v28 = v0;
          v28[1] = DURequest.executeWithResult(document:);
          return v30(*(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 328), v26, v27);
        }

      }
      else
      {
        Logger.init()();
        v22 = Logger.logObject.getter();
        v23 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v22, v23))
        {
          v24 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v24 = 0;
          _os_log_impl(&dword_2282CC000, v22, v23, "Specification did not have an associated request type", v24, 2u);
          MEMORY[0x22E2B117C](v24, -1, -1);
        }
        v5 = *(_QWORD *)(v0 + 296);
        v6 = *(_QWORD *)(v0 + 272);
        v7 = *(_QWORD *)(v0 + 280);

        (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
      }
      v8 = *(_QWORD *)(v0 + 344);
      v9 = *(_QWORD *)(v0 + 360) + 1;
      __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
      if (v9 == v8)
        goto LABEL_2;
    }
    v25 = *(void **)(v0 + 320);
    swift_bridgeObjectRelease();
    swift_release();

    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 304));
}

BOOL DURequestContentType.isEmpty.getter()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue);
  swift_beginAccess();
  return *v1 == 0;
}

uint64_t DURequestContentType.formIntersection(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue);
  swift_beginAccess();
  v4 = *v3;
  v5 = (_QWORD *)(a1 + OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue);
  result = swift_beginAccess();
  *v3 = *v5 & v4;
  return result;
}

uint64_t DURequestContentType.formSymmetricDifference(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue);
  swift_beginAccess();
  v4 = *v3;
  v5 = (_QWORD *)(a1 + OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue);
  result = swift_beginAccess();
  *v3 = *v5 ^ v4;
  return result;
}

uint64_t @objc closure #1 in DURequest.executeWithResult(document:)(void *a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  id v6;
  _QWORD *v7;

  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  v6 = a1;
  a3;
  v7 = (_QWORD *)swift_task_alloc();
  v3[5] = v7;
  *v7 = v3;
  v7[1] = @objc closure #1 in DURequest.executeWithResult(document:);
  return DURequest.executeWithResult(document:)((uint64_t)a1);
}

uint64_t @objc closure #1 in DURequest.executeWithResult(document:)(void *a1)
{
  void *v1;
  uint64_t *v2;
  void *v3;
  void *v5;
  void *v6;
  uint64_t v7;
  void (**v8)(_QWORD, _QWORD, _QWORD);
  void *v9;

  v3 = v1;
  v6 = *(void **)(*v2 + 16);
  v5 = *(void **)(*v2 + 24);
  v7 = *v2;
  swift_task_dealloc();

  v8 = *(void (***)(_QWORD, _QWORD, _QWORD))(v7 + 32);
  if (v3)
  {
    v9 = (void *)_convertErrorToNSError(_:)();

    ((void (**)(_QWORD, _QWORD, void *))v8)[2](v8, 0, v9);
    _Block_release(v8);
  }
  else
  {
    ((void (**)(_QWORD, void *, _QWORD))v8)[2](v8, a1, 0);
    _Block_release(v8);

  }
  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t DURequest.execute(document:completion:)(void *a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  id v13;
  uint64_t v15;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = 0;
  v11[3] = 0;
  v11[4] = v3;
  v11[5] = a1;
  v11[6] = a2;
  v11[7] = a3;
  v12 = a1;
  swift_retain();
  v13 = v3;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v9, (uint64_t)&async function pointer to partial apply for closure #1 in DURequest.execute(document:completion:), (uint64_t)v11);
  return swift_release();
}

uint64_t closure #1 in DURequest.execute(document:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  int *v9;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t);

  v7[2] = a6;
  v7[3] = a7;
  v9 = *(int **)((*MEMORY[0x24BEE4EA0] & *a4) + 0x70);
  v12 = (uint64_t (*)(uint64_t))((char *)v9 + *v9);
  v10 = (_QWORD *)swift_task_alloc();
  v7[4] = v10;
  *v10 = v7;
  v10[1] = closure #1 in DURequest.execute(document:completion:);
  return v12(a5);
}

uint64_t closure #1 in DURequest.execute(document:completion:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 40) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 48) = a1;
  return swift_task_switch();
}

uint64_t closure #1 in DURequest.execute(document:completion:)()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 48);
  (*(void (**)(void *, _QWORD))(v0 + 16))(v1, 0);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  void (*v2)(id, void *);
  id v3;
  id v4;

  v1 = *(void **)(v0 + 40);
  v2 = *(void (**)(id, void *))(v0 + 16);
  v3 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUResponse()), sel_init);
  v4 = v1;
  v2(v3, v1);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for TaskPriority();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

void thunk for @escaping @callee_unowned @convention(block) (@unowned DUResponse, @unowned NSError?) -> ()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  id v6;

  if (a2)
    v5 = _convertErrorToNSError(_:)();
  else
    v5 = 0;
  v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);

}

void DURequest.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id DURequest.__deallocating_deinit()
{
  return DUGlobalTopicSetIdentifier.__deallocating_deinit(type metadata accessor for DURequest);
}

id DURequestStrategy.contentType.getter()
{
  uint64_t v0;
  id *v1;

  v1 = (id *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding17DURequestStrategy_contentType);
  swift_beginAccess();
  return *v1;
}

void DURequestStrategy.contentType.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;

  v3 = (void **)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding17DURequestStrategy_contentType);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*DURequestStrategy.contentType.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DURequestStrategy.modelIdentifier.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding17DURequestStrategy_modelIdentifier);
  swift_beginAccess();
  v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t DURequestStrategy.modelIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC21DocumentUnderstanding17DURequestStrategy_modelIdentifier);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*DURequestStrategy.modelIdentifier.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DURequestStrategy.preprocess.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding17DURequestStrategy_preprocess);
  swift_beginAccess();
  return *v1;
}

uint64_t DURequestStrategy.preprocess.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding17DURequestStrategy_preprocess);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*DURequestStrategy.preprocess.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryConfidence.modify;
}

id DURequestStrategy.__allocating_init(contentType:preferredModelIdentifier:preprocess:)(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  objc_class *v4;
  objc_class *v5;
  _BYTE *v10;
  _BYTE *v11;
  _QWORD *v12;
  objc_class *v13;
  char *v14;
  id v15;
  _BYTE *v16;
  id v17;
  id v18;
  objc_super v20;
  objc_super v21;

  v5 = v4;
  v10 = objc_allocWithZone(v5);
  v11 = &v10[OBJC_IVAR____TtC21DocumentUnderstanding17DURequestStrategy_preprocess];
  v10[OBJC_IVAR____TtC21DocumentUnderstanding17DURequestStrategy_preprocess] = 0;
  *(_QWORD *)&v10[OBJC_IVAR____TtC21DocumentUnderstanding17DURequestStrategy_contentType] = a1;
  v12 = &v10[OBJC_IVAR____TtC21DocumentUnderstanding17DURequestStrategy_modelIdentifier];
  *v12 = a2;
  v12[1] = a3;
  type metadata accessor for NSObject();
  v13 = (objc_class *)type metadata accessor for DURequestContentType();
  v14 = (char *)objc_allocWithZone(v13);
  *(_QWORD *)&v14[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = 2048;
  v21.receiver = v14;
  v21.super_class = v13;
  v15 = a1;
  v16 = v10;
  v17 = objc_msgSendSuper2(&v21, sel_init);
  LOBYTE(a3) = static NSObject.== infix(_:_:)();

  if ((a3 & 1) != 0)
  {
    swift_beginAccess();
    *v11 = a4 & 1;
  }

  v20.receiver = v16;
  v20.super_class = v5;
  v18 = objc_msgSendSuper2(&v20, sel_init);

  return v18;
}

id DURequestStrategy.init(contentType:preferredModelIdentifier:preprocess:)(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  id v5;

  v5 = specialized DURequestStrategy.init(contentType:preferredModelIdentifier:preprocess:)(a1, a2, a3, a4);

  return v5;
}

id static DURequestContentType.foundInEvent.getter()
{
  objc_class *v0;
  char *v1;
  objc_super v3;

  v1 = (char *)objc_allocWithZone(v0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = 2048;
  v3.receiver = v1;
  v3.super_class = v0;
  return objc_msgSendSuper2(&v3, sel_init);
}

id DURequestStrategy.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void DURequestStrategy.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id DURequestStrategy.__deallocating_deinit()
{
  return DUGlobalTopicSetIdentifier.__deallocating_deinit(type metadata accessor for DURequestStrategy);
}

id static DURequestContentType.languageTag.getter()
{
  objc_class *v0;
  char *v1;
  objc_super v3;

  v1 = (char *)objc_allocWithZone(v0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = 1;
  v3.receiver = v1;
  v3.super_class = v0;
  return objc_msgSendSuper2(&v3, sel_init);
}

id DURequestContentType.__allocating_init(rawValue:)(uint64_t a1)
{
  objc_class *v1;
  char *v3;
  objc_super v5;

  v3 = (char *)objc_allocWithZone(v1);
  *(_QWORD *)&v3[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, sel_init);
}

id static DURequestContentType.wikiDataTopic.getter()
{
  objc_class *v0;
  char *v1;
  objc_super v3;

  v1 = (char *)objc_allocWithZone(v0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = 2;
  v3.receiver = v1;
  v3.super_class = v0;
  return objc_msgSendSuper2(&v3, sel_init);
}

id static DURequestContentType.date.getter()
{
  objc_class *v0;
  char *v1;
  objc_super v3;

  v1 = (char *)objc_allocWithZone(v0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = 4;
  v3.receiver = v1;
  v3.super_class = v0;
  return objc_msgSendSuper2(&v3, sel_init);
}

id static DURequestContentType.address.getter()
{
  objc_class *v0;
  char *v1;
  objc_super v3;

  v1 = (char *)objc_allocWithZone(v0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = 8;
  v3.receiver = v1;
  v3.super_class = v0;
  return objc_msgSendSuper2(&v3, sel_init);
}

id static DURequestContentType.link.getter()
{
  objc_class *v0;
  char *v1;
  objc_super v3;

  v1 = (char *)objc_allocWithZone(v0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = 16;
  v3.receiver = v1;
  v3.super_class = v0;
  return objc_msgSendSuper2(&v3, sel_init);
}

id static DURequestContentType.phoneNumber.getter()
{
  objc_class *v0;
  char *v1;
  objc_super v3;

  v1 = (char *)objc_allocWithZone(v0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = 32;
  v3.receiver = v1;
  v3.super_class = v0;
  return objc_msgSendSuper2(&v3, sel_init);
}

id static DURequestContentType.navigationTitle.getter()
{
  objc_class *v0;
  char *v1;
  objc_super v3;

  v1 = (char *)objc_allocWithZone(v0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = 64;
  v3.receiver = v1;
  v3.super_class = v0;
  return objc_msgSendSuper2(&v3, sel_init);
}

id static DURequestContentType.category.getter()
{
  objc_class *v0;
  char *v1;
  objc_super v3;

  v1 = (char *)objc_allocWithZone(v0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = 256;
  v3.receiver = v1;
  v3.super_class = v0;
  return objc_msgSendSuper2(&v3, sel_init);
}

id static DURequestContentType.posTags.getter()
{
  objc_class *v0;
  char *v1;
  objc_super v3;

  v1 = (char *)objc_allocWithZone(v0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = 1024;
  v3.receiver = v1;
  v3.super_class = v0;
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t DURequestContentType.rawValue.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*DURequestContentType.rawValue.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

id DURequestContentType.init()()
{
  void *v0;

  return objc_msgSend(v0, sel_initWithRawValue_, 0);
}

id DURequestContentType.init(rawValue:)(uint64_t a1)
{
  char *v1;
  objc_class *ObjectType;
  objc_super v5;

  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = a1;
  v5.receiver = v1;
  v5.super_class = ObjectType;
  return objc_msgSendSuper2(&v5, sel_init);
}

char *DURequestContentType.__allocating_init(abilitiesToUnion:)(unint64_t a1)
{
  objc_class *v1;
  char *result;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  objc_super v20;

  objc_allocWithZone(v1);
  result = (char *)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromObject()), sel_init);
  v19 = result;
  if (!(a1 >> 62))
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v4)
      goto LABEL_3;
LABEL_13:
    swift_bridgeObjectRelease();
LABEL_14:
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return v19;
  }
  swift_bridgeObjectRetain();
  v4 = _CocoaArrayWrapper.endIndex.getter();
  result = (char *)swift_bridgeObjectRelease();
  if (!v4)
    goto LABEL_13;
LABEL_3:
  if (v4 >= 1)
  {
    v5 = &v19[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue];
    v16 = a1 & 0xC000000000000001;
    swift_beginAccess();
    v6 = 0;
    v17 = v4;
    v18 = a1;
    do
    {
      if (v16)
        v7 = (char *)MEMORY[0x22E2AFF34](v6, a1);
      else
        v7 = (char *)*(id *)(a1 + 8 * v6 + 32);
      v8 = v7;
      v9 = *(_QWORD *)v5;
      v10 = (char *)objc_allocWithZone(v1);
      *(_QWORD *)&v10[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = v9;
      v20.receiver = v10;
      v20.super_class = v1;
      v11 = v19;
      v12 = (char *)objc_msgSendSuper2(&v20, sel_init);
      v13 = &v12[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue];
      swift_beginAccess();
      v14 = *(_QWORD *)v13;
      v15 = &v8[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue];
      swift_beginAccess();
      *(_QWORD *)v13 = *(_QWORD *)v15 & v14;

      LOBYTE(v13) = static NSObject.== infix(_:_:)();
      if ((v13 & 1) == 0)
        *(_QWORD *)v5 |= *(_QWORD *)v15;

      ++v6;
      a1 = v18;
    }
    while (v17 != v6);
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

char *DURequestContentType.init(abilitiesToUnion:)(unint64_t a1)
{
  objc_class *ObjectType;
  char *result;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  objc_super v20;

  ObjectType = (objc_class *)swift_getObjectType();
  result = (char *)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromObject()), sel_init);
  v19 = result;
  if (!(a1 >> 62))
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v4)
      goto LABEL_3;
LABEL_13:
    swift_bridgeObjectRelease();
LABEL_14:
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return v19;
  }
  swift_bridgeObjectRetain();
  v4 = _CocoaArrayWrapper.endIndex.getter();
  result = (char *)swift_bridgeObjectRelease();
  if (!v4)
    goto LABEL_13;
LABEL_3:
  if (v4 >= 1)
  {
    v5 = &v19[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue];
    v16 = a1 & 0xC000000000000001;
    swift_beginAccess();
    v6 = 0;
    v17 = v4;
    v18 = a1;
    do
    {
      if (v16)
        v7 = (char *)MEMORY[0x22E2AFF34](v6, a1);
      else
        v7 = (char *)*(id *)(a1 + 8 * v6 + 32);
      v8 = v7;
      v9 = *(_QWORD *)v5;
      v10 = (char *)objc_allocWithZone(ObjectType);
      *(_QWORD *)&v10[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = v9;
      v20.receiver = v10;
      v20.super_class = ObjectType;
      v11 = v19;
      v12 = (char *)objc_msgSendSuper2(&v20, sel_init);
      v13 = &v12[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue];
      swift_beginAccess();
      v14 = *(_QWORD *)v13;
      v15 = &v8[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue];
      swift_beginAccess();
      *(_QWORD *)v13 = *(_QWORD *)v15 & v14;

      LOBYTE(v13) = static NSObject.== infix(_:_:)();
      if ((v13 & 1) == 0)
        *(_QWORD *)v5 |= *(_QWORD *)v15;

      ++v6;
      a1 = v18;
    }
    while (v17 != v6);
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

uint64_t DURequestContentType.hash.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

BOOL DURequestContentType.isEqual(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v8;
  _BYTE v9[24];
  uint64_t v10;

  swift_getObjectType();
  outlined init with copy of Any?(a1, (uint64_t)v9);
  if (v10)
  {
    if ((swift_dynamicCast() & 1) != 0)
    {
      v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue);
      swift_beginAccess();
      v4 = *v3;
      v5 = &v8[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue];
      swift_beginAccess();
      v6 = *(_QWORD *)v5;

      return v4 == v6;
    }
  }
  else
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v9, &demangling cache variable for type metadata for Any?);
  }
  return 0;
}

id DURequestContentType.copy(with:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  objc_class *ObjectType;
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  id result;
  objc_super v8;

  ObjectType = (objc_class *)swift_getObjectType();
  v4 = (uint64_t *)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue);
  swift_beginAccess();
  v5 = *v4;
  v6 = (char *)objc_allocWithZone(ObjectType);
  *(_QWORD *)&v6[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = v5;
  v8.receiver = v6;
  v8.super_class = ObjectType;
  result = objc_msgSendSuper2(&v8, sel_init);
  a1[3] = ObjectType;
  *a1 = result;
  return result;
}

uint64_t DURequestContentType.formUnion(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue);
  swift_beginAccess();
  v4 = *v3;
  v5 = (_QWORD *)(a1 + OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue);
  result = swift_beginAccess();
  *v3 = *v5 | v4;
  return result;
}

id DURequestContentType.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id protocol witness for OptionSet.init(rawValue:) in conformance DURequestContentType@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  objc_class *v2;
  uint64_t v4;
  char *v5;
  id result;
  objc_super v7;

  v4 = *a1;
  v5 = (char *)objc_allocWithZone(v2);
  *(_QWORD *)&v5[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = v4;
  v7.receiver = v5;
  v7.super_class = v2;
  result = objc_msgSendSuper2(&v7, sel_init);
  *a2 = result;
  return result;
}

id protocol witness for SetAlgebra.init() in conformance DURequestContentType@<X0>(_QWORD *a1@<X8>)
{
  objc_class *v1;
  id result;

  result = objc_msgSend(objc_allocWithZone(v1), sel_init);
  *a1 = result;
  return result;
}

void protocol witness for SetAlgebra.union(_:) in conformance DURequestContentType(uint64_t *a1@<X0>, char **a2@<X8>)
{
  void **v2;
  void *v4;
  void *v5;
  char *v6;

  v4 = (void *)*a1;
  v5 = *v2;
  v6 = specialized OptionSet.union(_:)(*a1);

  *a2 = v6;
}

char *specialized OptionSet.union(_:)(uint64_t a1)
{
  uint64_t v1;
  objc_class *ObjectType;
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  objc_super v12;

  ObjectType = (objc_class *)swift_getObjectType();
  v4 = (uint64_t *)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue);
  swift_beginAccess();
  v5 = *v4;
  v6 = (char *)objc_allocWithZone(ObjectType);
  *(_QWORD *)&v6[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = v5;
  v12.receiver = v6;
  v12.super_class = ObjectType;
  v7 = (char *)objc_msgSendSuper2(&v12, sel_init);
  v8 = &v7[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue];
  swift_beginAccess();
  v9 = *(_QWORD *)v8;
  v10 = (_QWORD *)(a1 + OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue);
  swift_beginAccess();
  *(_QWORD *)v8 = *v10 | v9;
  return v7;
}

void protocol witness for SetAlgebra.intersection(_:) in conformance DURequestContentType(uint64_t *a1@<X0>, char **a2@<X8>)
{
  void **v2;
  void *v4;
  char *v5;

  v4 = *v2;
  v5 = specialized OptionSet.intersection(_:)(*a1);

  *a2 = v5;
}

char *specialized OptionSet.intersection(_:)(uint64_t a1)
{
  uint64_t v1;
  objc_class *ObjectType;
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  objc_super v12;

  ObjectType = (objc_class *)swift_getObjectType();
  v4 = (uint64_t *)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue);
  swift_beginAccess();
  v5 = *v4;
  v6 = (char *)objc_allocWithZone(ObjectType);
  *(_QWORD *)&v6[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = v5;
  v12.receiver = v6;
  v12.super_class = ObjectType;
  v7 = (char *)objc_msgSendSuper2(&v12, sel_init);
  v8 = &v7[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue];
  swift_beginAccess();
  v9 = *(_QWORD *)v8;
  v10 = (_QWORD *)(a1 + OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue);
  swift_beginAccess();
  *(_QWORD *)v8 = *v10 & v9;
  return v7;
}

void protocol witness for SetAlgebra.symmetricDifference(_:) in conformance DURequestContentType(uint64_t *a1@<X0>, char **a2@<X8>)
{
  void **v2;
  void *v4;
  void *v5;
  char *v6;

  v4 = (void *)*a1;
  v5 = *v2;
  v6 = specialized OptionSet.symmetricDifference(_:)(*a1);

  *a2 = v6;
}

char *specialized OptionSet.symmetricDifference(_:)(uint64_t a1)
{
  uint64_t v1;
  objc_class *ObjectType;
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  objc_super v12;

  ObjectType = (objc_class *)swift_getObjectType();
  v4 = (uint64_t *)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue);
  swift_beginAccess();
  v5 = *v4;
  v6 = (char *)objc_allocWithZone(ObjectType);
  *(_QWORD *)&v6[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = v5;
  v12.receiver = v6;
  v12.super_class = ObjectType;
  v7 = (char *)objc_msgSendSuper2(&v12, sel_init);
  v8 = &v7[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue];
  swift_beginAccess();
  v9 = *(_QWORD *)v8;
  v10 = (_QWORD *)(a1 + OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue);
  swift_beginAccess();
  *(_QWORD *)v8 = *v10 ^ v9;
  return v7;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance DURequestContentType(char **a1, char **a2)
{
  char *v2;
  BOOL v3;

  v2 = *a2;
  v3 = specialized OptionSet<>.insert(_:)(a1, *a2);

  return v3;
}

BOOL specialized OptionSet<>.insert(_:)(char **a1, char *a2)
{
  void **v2;
  void *v5;
  uint64_t *v6;
  uint64_t v7;
  objc_class *v8;
  char *v9;
  id v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char v15;
  objc_super v17;

  v5 = *v2;
  v6 = (uint64_t *)((char *)*v2 + OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue);
  swift_beginAccess();
  v7 = *v6;
  v8 = (objc_class *)type metadata accessor for DURequestContentType();
  v9 = (char *)objc_allocWithZone(v8);
  *(_QWORD *)&v9[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = v7;
  v17.receiver = v9;
  v17.super_class = v8;
  v10 = v5;
  v11 = (char *)objc_msgSendSuper2(&v17, sel_init);
  v12 = &v11[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue];
  swift_beginAccess();
  v13 = *(_QWORD *)v12;
  v14 = &a2[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue];
  swift_beginAccess();
  *(_QWORD *)v12 = *(_QWORD *)v14 & v13;

  v15 = static NSObject.== infix(_:_:)();
  if ((v15 & 1) == 0)
  {

    *v6 |= *(_QWORD *)v14;
    v11 = a2;
  }
  *a1 = v11;
  return (v15 & 1) == 0;
}

char *protocol witness for SetAlgebra.remove(_:) in conformance DURequestContentType@<X0>(char **a1@<X0>, char **a2@<X8>)
{
  char *result;

  result = specialized OptionSet<>.remove(_:)(*a1);
  *a2 = result;
  return result;
}

char *specialized OptionSet<>.remove(_:)(char *a1)
{
  void **v1;
  void *v3;
  uint64_t *v4;
  uint64_t v5;
  objc_class *v6;
  char *v7;
  id v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  id v15;
  char *v16;
  char *v17;
  char *v18;
  objc_super v20;
  objc_super v21;

  v3 = *v1;
  v4 = (uint64_t *)((char *)*v1 + OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue);
  swift_beginAccess();
  v5 = *v4;
  v6 = (objc_class *)type metadata accessor for DURequestContentType();
  v7 = (char *)objc_allocWithZone(v6);
  *(_QWORD *)&v7[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = v5;
  v21.receiver = v7;
  v21.super_class = v6;
  v8 = v3;
  v9 = (char *)objc_msgSendSuper2(&v21, sel_init);
  v10 = &v9[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue];
  swift_beginAccess();
  v11 = *(_QWORD *)v10;
  v12 = &a1[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue];
  swift_beginAccess();
  *(_QWORD *)v10 = *(_QWORD *)v12 & v11;

  if (*(_QWORD *)v10)
  {
    v13 = *v4;
    v14 = (char *)objc_allocWithZone(v6);
    *(_QWORD *)&v14[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = v13;
    v20.receiver = v14;
    v20.super_class = v6;
    v15 = v8;
    v16 = a1;
    v17 = (char *)objc_msgSendSuper2(&v20, sel_init);
    v18 = &v17[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue];
    swift_beginAccess();
    *(_QWORD *)v18 ^= *(_QWORD *)v12;

    *v4 &= *(_QWORD *)v18;
  }
  else
  {

    return 0;
  }
  return v9;
}

void protocol witness for SetAlgebra.update(with:) in conformance DURequestContentType(uint64_t *a1@<X0>, char **a2@<X8>)
{
  void *v3;
  char *v4;

  v3 = (void *)*a1;
  v4 = specialized OptionSet<>.update(with:)(*a1);

  *a2 = v4;
}

char *specialized OptionSet<>.update(with:)(uint64_t a1)
{
  void **v1;
  void *v3;
  uint64_t *v4;
  uint64_t v5;
  objc_class *v6;
  char *v7;
  id v8;
  char *v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  objc_super v14;

  v3 = *v1;
  v4 = (uint64_t *)((char *)*v1 + OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue);
  swift_beginAccess();
  v5 = *v4;
  v6 = (objc_class *)type metadata accessor for DURequestContentType();
  v7 = (char *)objc_allocWithZone(v6);
  *(_QWORD *)&v7[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = v5;
  v14.receiver = v7;
  v14.super_class = v6;
  v8 = v3;
  v9 = (char *)objc_msgSendSuper2(&v14, sel_init);
  v10 = &v9[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue];
  swift_beginAccess();
  v11 = *(_QWORD *)v10;
  v12 = (_QWORD *)(a1 + OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue);
  swift_beginAccess();
  *(_QWORD *)v10 = *v12 & v11;

  *v4 |= *v12;
  if (!*(_QWORD *)v10)
  {

    return 0;
  }
  return v9;
}

void protocol witness for SetAlgebra.formUnion(_:) in conformance DURequestContentType(void **a1)
{
  _QWORD *v1;
  char *v2;
  uint64_t *v3;
  uint64_t v4;
  char *v5;

  v2 = (char *)*a1;
  v3 = (uint64_t *)(*v1 + OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue);
  swift_beginAccess();
  v4 = *v3;
  v5 = &v2[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue];
  swift_beginAccess();
  *v3 = *(_QWORD *)v5 | v4;

}

uint64_t protocol witness for SetAlgebra.formIntersection(_:) in conformance DURequestContentType(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;

  v2 = *a1;
  v3 = (uint64_t *)(*v1 + OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue);
  swift_beginAccess();
  v4 = *v3;
  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue);
  result = swift_beginAccess();
  *v3 = *v5 & v4;
  return result;
}

void protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance DURequestContentType(void **a1)
{
  _QWORD *v1;
  char *v2;
  uint64_t *v3;
  uint64_t v4;
  char *v5;

  v2 = (char *)*a1;
  v3 = (uint64_t *)(*v1 + OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue);
  swift_beginAccess();
  v4 = *v3;
  v5 = &v2[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue];
  swift_beginAccess();
  *v3 = *(_QWORD *)v5 ^ v4;

}

void protocol witness for SetAlgebra.subtracting(_:) in conformance DURequestContentType(void **a1@<X0>, char **a2@<X8>)
{
  void **v2;
  void *v4;
  char *v5;

  v4 = *v2;
  v5 = specialized SetAlgebra.subtracting(_:)(*a1);

  *a2 = v5;
}

char *specialized SetAlgebra.subtracting(_:)(void *a1)
{
  char *v1;
  char *v2;
  objc_class *ObjectType;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  objc_super v19;
  objc_super v20;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  v5 = &v2[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue];
  swift_beginAccess();
  v6 = *(_QWORD *)v5;
  v7 = (char *)objc_allocWithZone(ObjectType);
  *(_QWORD *)&v7[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = v6;
  v20.receiver = v7;
  v20.super_class = ObjectType;
  v8 = v2;
  v9 = a1;
  v10 = (char *)objc_msgSendSuper2(&v20, sel_init);
  v11 = &v10[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue];
  swift_beginAccess();
  v12 = *(_QWORD *)v11;
  v13 = &v9[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue];
  swift_beginAccess();
  *(_QWORD *)v11 = *(_QWORD *)v13 ^ v12;

  v14 = *(_QWORD *)v5;
  v15 = (char *)objc_allocWithZone(ObjectType);
  *(_QWORD *)&v15[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = v14;
  v19.receiver = v15;
  v19.super_class = ObjectType;
  v16 = (char *)objc_msgSendSuper2(&v19, sel_init);
  v17 = &v16[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue];
  swift_beginAccess();
  *(_QWORD *)v17 &= *(_QWORD *)v11;

  return v16;
}

uint64_t protocol witness for SetAlgebra.isSubset(of:) in conformance DURequestContentType(uint64_t *a1)
{
  return specialized SetAlgebra.isSubset(of:)(*a1) & 1;
}

uint64_t specialized SetAlgebra.isSubset(of:)(uint64_t a1)
{
  char *v1;
  char *v2;
  objc_class *ObjectType;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  objc_super v14;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  v5 = &v2[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue];
  swift_beginAccess();
  v6 = *(_QWORD *)v5;
  v7 = (char *)objc_allocWithZone(ObjectType);
  *(_QWORD *)&v7[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = v6;
  v14.receiver = v7;
  v14.super_class = ObjectType;
  v8 = v2;
  v9 = (char *)objc_msgSendSuper2(&v14, sel_init);
  v10 = &v9[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue];
  swift_beginAccess();
  v11 = *(_QWORD *)v10;
  v12 = (_QWORD *)(a1 + OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue);
  swift_beginAccess();
  *(_QWORD *)v10 = *v12 & v11;

  LOBYTE(v8) = static NSObject.== infix(_:_:)();
  return v8 & 1;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance DURequestContentType(uint64_t *a1)
{
  return specialized SetAlgebra.isDisjoint(with:)(*a1);
}

BOOL specialized SetAlgebra.isDisjoint(with:)(uint64_t a1)
{
  char *v1;
  objc_class *ObjectType;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  objc_super v14;

  ObjectType = (objc_class *)swift_getObjectType();
  v4 = &v1[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue];
  swift_beginAccess();
  v5 = *(_QWORD *)v4;
  v6 = (char *)objc_allocWithZone(ObjectType);
  *(_QWORD *)&v6[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = v5;
  v14.receiver = v6;
  v14.super_class = ObjectType;
  v7 = v1;
  v8 = (char *)objc_msgSendSuper2(&v14, sel_init);
  v9 = &v8[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue];
  swift_beginAccess();
  v10 = *(_QWORD *)v9;
  v11 = (_QWORD *)(a1 + OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue);
  swift_beginAccess();
  *(_QWORD *)v9 = *v11 & v10;

  v12 = *(_QWORD *)v9;
  return v12 == 0;
}

uint64_t protocol witness for SetAlgebra.isSuperset(of:) in conformance DURequestContentType(char **a1)
{
  return specialized OptionSet<>.contains(_:)(*a1) & 1;
}

uint64_t specialized OptionSet<>.contains(_:)(char *a1)
{
  uint64_t v1;
  uint64_t v2;
  objc_class *ObjectType;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  objc_super v14;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  v5 = &a1[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue];
  swift_beginAccess();
  v6 = *(_QWORD *)v5;
  v7 = (char *)objc_allocWithZone(ObjectType);
  *(_QWORD *)&v7[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = v6;
  v14.receiver = v7;
  v14.super_class = ObjectType;
  v8 = a1;
  v9 = (char *)objc_msgSendSuper2(&v14, sel_init);
  v10 = &v9[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue];
  swift_beginAccess();
  v11 = *(_QWORD *)v10;
  v12 = (_QWORD *)(v2 + OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue);
  swift_beginAccess();
  *(_QWORD *)v10 = *v12 & v11;

  LOBYTE(v12) = static NSObject.== infix(_:_:)();
  return v12 & 1;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance DURequestContentType()
{
  _QWORD *v0;
  _QWORD *v1;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue);
  swift_beginAccess();
  return *v1 == 0;
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance DURequestContentType()
{
  return SetAlgebra.init<A>(_:)();
}

void protocol witness for SetAlgebra.subtract(_:) in conformance DURequestContentType(void **a1)
{
  specialized SetAlgebra.subtract(_:)(*a1);
}

void specialized SetAlgebra.subtract(_:)(void *a1)
{
  void **v1;
  void *v3;
  uint64_t *v4;
  uint64_t v5;
  objc_class *v6;
  char *v7;
  id v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  objc_super v14;

  v3 = *v1;
  v4 = (uint64_t *)((char *)*v1 + OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue);
  swift_beginAccess();
  v5 = *v4;
  v6 = (objc_class *)type metadata accessor for DURequestContentType();
  v7 = (char *)objc_allocWithZone(v6);
  *(_QWORD *)&v7[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = v5;
  v14.receiver = v7;
  v14.super_class = v6;
  v8 = v3;
  v9 = a1;
  v10 = (char *)objc_msgSendSuper2(&v14, sel_init);
  v11 = &v10[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue];
  swift_beginAccess();
  v12 = *(_QWORD *)v11;
  v13 = &v9[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue];
  swift_beginAccess();
  *(_QWORD *)v11 = *(_QWORD *)v13 ^ v12;

  *v4 &= *(_QWORD *)v11;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance DURequestContentType@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(*v1 + OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue);
  result = swift_beginAccess();
  *a1 = *v3;
  return result;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance DURequestContentType@<X0>(unint64_t a1@<X0>, char **a2@<X8>)
{
  char *v3;
  uint64_t result;

  v3 = specialized SetAlgebra<>.init(arrayLiteral:)(a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  const char *v4;
  uint64_t result;
  unint64_t v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;

  if (a2 >> 62)
  {
    v2 = _CocoaArrayWrapper.subscript.getter();
    type metadata accessor for DURequestContentType();
    if (swift_dynamicCastClass())
      return v2;
LABEL_10:
    _StringGuts.grow(_:)(85);
    v3 = 0xD000000000000046;
    v4 = "NSArray element failed to match the Swift Array Element type\nExpected ";
    goto LABEL_11;
  }
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a1)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v2 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 8 * a1 + 0x20);
  type metadata accessor for DURequestContentType();
  swift_unknownObjectRetain();
  if (swift_dynamicCastClass())
    return v2;
  _StringGuts.grow(_:)(82);
  v3 = 0xD000000000000043;
  v4 = "Down-casted Array element failed to match the target type\nExpected ";
LABEL_11:
  v6 = (unint64_t)(v4 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&v3);
  v7._object = (void *)0x80000002284C29C0;
  v7._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v7);
  v8._countAndFlagsBits = 0x756F662074756220;
  v8._object = (void *)0xEB0000000020646ELL;
  String.append(_:)(v8);
  swift_getObjectType();
  swift_unknownObjectRelease();
  v9._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  result = _assertionFailure(_:_:flags:)();
  __break(1u);
  return result;
}

uint64_t _sIeghH_IeAgH_TR(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v4;
  *v4 = v3;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  return v6();
}

uint64_t _sIeAgH_ytIeAgHr_TR(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  return v7();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgmq5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for TaskPriority();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

char *specialized SetAlgebra<>.init(arrayLiteral:)(unint64_t a1)
{
  objc_class *v1;
  char *result;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  objc_super v20;

  result = (char *)objc_msgSend(objc_allocWithZone(v1), sel_init);
  v19 = result;
  if (!(a1 >> 62))
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v4)
      goto LABEL_3;
    return v19;
  }
  swift_bridgeObjectRetain();
  v4 = _CocoaArrayWrapper.endIndex.getter();
  result = (char *)swift_bridgeObjectRelease();
  if (!v4)
    return v19;
LABEL_3:
  if (v4 >= 1)
  {
    v16 = a1 & 0xC000000000000001;
    v5 = &v19[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue];
    swift_beginAccess();
    v6 = 0;
    v17 = v4;
    v18 = a1;
    do
    {
      if (v16)
        v7 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, a1);
      else
        v7 = (char *)*(id *)(a1 + 8 * v6 + 32);
      v8 = v7;
      v9 = *(_QWORD *)v5;
      v10 = (char *)objc_allocWithZone(v1);
      *(_QWORD *)&v10[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = v9;
      v20.receiver = v10;
      v20.super_class = v1;
      v11 = v19;
      v12 = (char *)objc_msgSendSuper2(&v20, sel_init);
      v13 = &v12[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue];
      swift_beginAccess();
      v14 = *(_QWORD *)v13;
      v15 = &v8[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue];
      swift_beginAccess();
      *(_QWORD *)v13 = *(_QWORD *)v15 & v14;

      LOBYTE(v13) = static NSObject.== infix(_:_:)();
      if ((v13 & 1) == 0)
        *(_QWORD *)v5 |= *(_QWORD *)v15;

      ++v6;
      a1 = v18;
    }
    while (v17 != v6);
    return v19;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for DUClient()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for DURequest()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for DURequestContentType()
{
  return objc_opt_self();
}

uint64_t outlined init with copy of TopLevelSpecificationProtocol(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t partial apply for closure #1 in DURequest.execute(document:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t);

  v2 = *(_QWORD **)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = swift_task_alloc();
  v5 = *(_OWORD *)(v0 + 48);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  *(_OWORD *)(v4 + 16) = v5;
  v6 = *(int **)((*MEMORY[0x24BEE4EA0] & *v2) + 0x70);
  v9 = (uint64_t (*)(uint64_t))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 32) = v7;
  *v7 = v4;
  v7[1] = closure #1 in DURequest.execute(document:completion:);
  return v9(v3);
}

unint64_t type metadata accessor for NSObject()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSObject;
  if (!lazy cache variable for type metadata for NSObject)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  }
  return result;
}

id specialized DURequestStrategy.init(contentType:preferredModelIdentifier:preprocess:)(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;
  _BYTE *v7;
  _QWORD *v8;
  objc_class *v9;
  char *v10;
  id v11;
  _BYTE *v12;
  id v13;
  char v14;
  objc_super v16;
  objc_super v17;

  v7 = &v4[OBJC_IVAR____TtC21DocumentUnderstanding17DURequestStrategy_preprocess];
  v4[OBJC_IVAR____TtC21DocumentUnderstanding17DURequestStrategy_preprocess] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC21DocumentUnderstanding17DURequestStrategy_contentType] = a1;
  v8 = &v4[OBJC_IVAR____TtC21DocumentUnderstanding17DURequestStrategy_modelIdentifier];
  *v8 = a2;
  v8[1] = a3;
  type metadata accessor for NSObject();
  v9 = (objc_class *)type metadata accessor for DURequestContentType();
  v10 = (char *)objc_allocWithZone(v9);
  *(_QWORD *)&v10[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = 2048;
  v17.receiver = v10;
  v17.super_class = v9;
  v11 = a1;
  v12 = v4;
  v13 = objc_msgSendSuper2(&v17, sel_init);
  v14 = static NSObject.== infix(_:_:)();

  if ((v14 & 1) != 0)
  {
    swift_beginAccess();
    *v7 = a4 & 1;
  }

  v16.receiver = v12;
  v16.super_class = (Class)type metadata accessor for DURequestStrategy();
  return objc_msgSendSuper2(&v16, sel_init);
}

uint64_t type metadata accessor for DURequestStrategy()
{
  return objc_opt_self();
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t base witness table accessor for RawRepresentable in DURequestContentType()
{
  return lazy protocol witness table accessor for type DURequestContentType and conformance DURequestContentType(&lazy protocol witness table cache variable for type DURequestContentType and conformance DURequestContentType, (uint64_t)&protocol conformance descriptor for DURequestContentType);
}

uint64_t base witness table accessor for SetAlgebra in DURequestContentType()
{
  return lazy protocol witness table accessor for type DURequestContentType and conformance DURequestContentType(&lazy protocol witness table cache variable for type DURequestContentType and conformance DURequestContentType, (uint64_t)&protocol conformance descriptor for DURequestContentType);
}

uint64_t base witness table accessor for Equatable in DURequestContentType()
{
  return lazy protocol witness table accessor for type DURequestContentType and conformance DURequestContentType(&lazy protocol witness table cache variable for type DURequestContentType and conformance NSObject, MEMORY[0x24BEE5BE0]);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in DURequestContentType()
{
  return lazy protocol witness table accessor for type DURequestContentType and conformance DURequestContentType(&lazy protocol witness table cache variable for type DURequestContentType and conformance DURequestContentType, (uint64_t)&protocol conformance descriptor for DURequestContentType);
}

uint64_t lazy protocol witness table accessor for type DURequestContentType and conformance DURequestContentType(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for DURequestContentType();
    result = MEMORY[0x22E2B10E0](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_228334FBC()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned DUResponse, @unowned NSError?) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  thunk for @escaping @callee_unowned @convention(block) (@unowned DUResponse, @unowned NSError?) -> ()(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t objectdestroyTm()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_228335028()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in DURequest.executeWithResult(document:)()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = (void *)v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = partial apply for closure #2 in DUFoundInEventMultilingualBERTImplementation.loadModelHeadBundle();
  return ((uint64_t (*)(void *, void *, void *))((char *)&async function pointer to @objc closure #1 in DURequest.executeWithResult(document:)
                                                         + async function pointer to @objc closure #1 in DURequest.executeWithResult(document:)))(v2, v3, v4);
}

uint64_t _sIeghH_IeAgH_TRTA()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (int *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&_sIeghH_IeAgH_TRTu + _sIeghH_IeAgH_TRTu))(v2, v3, v4);
}

uint64_t objectdestroy_17Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t _sIeAgH_ytIeAgHr_TRTA(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&_sIeAgH_ytIeAgHr_TRTu
                                                                   + _sIeAgH_ytIeAgHr_TRTu))(a1, v4, v5, v6);
}

uint64_t sub_2283351F8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5Tu))(a1, v4);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = partial apply for closure #2 in DUFoundInEventMultilingualBERTImplementation.loadModelHeadBundle();
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu))(a1, v4);
}

unint64_t static DUFoundInEventDefaultImplementation.implementationID.getter()
{
  return 0xD000000000000025;
}

uint64_t static DUFoundInEventDefaultImplementation.specification.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for DUFoundInEventSpecification();
  result = swift_allocObject();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for DUFoundInEventSpecification;
  *a1 = result;
  return result;
}

void *static DUFoundInEventDefaultImplementation.implementationAttributes.getter()
{
  return &outlined read-only object #0 of static DUFoundInEventDefaultImplementation.implementationAttributes.getter;
}

uint64_t DUFoundInEventDefaultImplementation.runTypedOnRequest(request:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 112) = a1;
  return swift_task_switch();
}

{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 136) = a1;
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 160) = a1;
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t DUFoundInEventDefaultImplementation.runTypedOnRequest(request:)()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);

  v1 = (void *)(*(uint64_t (**)(void))(**(_QWORD **)(v0 + 112) + 136))();

  if (v1)
  {
    type metadata accessor for DUFoundInEventHTMLPreprocessingSpecification();
    *(_QWORD *)(v0 + 120) = swift_allocObject();
    v6 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:)
                                         + async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:));
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 128) = v2;
    *v2 = v0;
    v2[1] = DUFoundInEventDefaultImplementation.runTypedOnRequest(request:);
    return v6(*(_QWORD *)(v0 + 112));
  }
  else
  {
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v4 = swift_allocError();
    *(_QWORD *)v5 = 0xD000000000000015;
    *(_QWORD *)(v5 + 8) = 0x80000002284DB0D0;
    *(_BYTE *)(v5 + 16) = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v4, 1);
  }
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD);

  v1 = *(_QWORD **)(v0 + 136);
  if (v1)
  {
    (*(void (**)(void))((*MEMORY[0x24BEE4EA0] & *v1) + 0x88))();
    v3 = v2;
    swift_bridgeObjectRelease();
    if (v3)
    {
      type metadata accessor for DUFoundInEventDDSpecification();
      *(_QWORD *)(v0 + 144) = swift_allocObject();
      v9 = (uint64_t (*)(_QWORD))((char *)&async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:)
                                          + async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:));
      v4 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 152) = v4;
      *v4 = v0;
      v4[1] = DUFoundInEventDefaultImplementation.runTypedOnRequest(request:);
      return v9(*(_QWORD *)(v0 + 112));
    }
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v6 = swift_allocError();
    *(_QWORD *)v8 = 0xD000000000000020;
    *(_QWORD *)(v8 + 8) = 0x80000002284DBFE0;
    *(_BYTE *)(v8 + 16) = 0;

  }
  else
  {
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v6 = swift_allocError();
    *(_QWORD *)v7 = 0xD000000000000017;
    *(_QWORD *)(v7 + 8) = 0x80000002284DBFC0;
    *(_BYTE *)(v7 + 16) = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v6, 1);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  v1 = *(_QWORD *)(v0 + 160);
  swift_bridgeObjectRelease();
  if (v1)
  {
    type metadata accessor for DUWordPieceTokenizerSpecification();
    *(_QWORD *)(v0 + 168) = swift_allocObject();
    v7 = (char *)&async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:)
       + async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:);
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 176) = v2;
    *v2 = v0;
    v2[1] = DUFoundInEventDefaultImplementation.runTypedOnRequest(request:);
    return ((uint64_t (*)(uint64_t, _QWORD))v7)(v0 + 64, *(_QWORD *)(v0 + 112));
  }
  else
  {
    v4 = *(void **)(v0 + 136);
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v5 = swift_allocError();
    *(_QWORD *)v6 = 0xD00000000000001BLL;
    *(_QWORD *)(v6 + 8) = 0x80000002284DC010;
    *(_BYTE *)(v6 + 16) = 0;

    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v5, 1);
  }
}

{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;

  outlined release of TokenizerOutput?((uint64_t *)(v0 + 64));
  outlined init with take of TokenizerOutput?(v0 + 64, v0 + 16);
  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(void **)(v0 + 136);
  if (v1)
  {
    v3 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUFoundInEventResult()), sel_init);
  }
  else
  {
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v3 = (id)swift_allocError();
    *(_QWORD *)v4 = 0xD000000000000018;
    *(_QWORD *)(v4 + 8) = 0x80000002284DC030;
    *(_BYTE *)(v4 + 16) = 0;
  }

  return (*(uint64_t (**)(id, BOOL))(v0 + 8))(v3, v1 == 0);
}

uint64_t DUFoundInEventDefaultImplementation.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t DUFoundInEventDefaultImplementation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t DUFoundInEventDefaultImplementation.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t DUFoundInEventDefaultImplementation.init()()
{
  uint64_t v0;

  return v0;
}

unint64_t protocol witness for static DUProcessingPhaseImplementation.implementationID.getter in conformance DUFoundInEventDefaultImplementation()
{
  return 0xD000000000000025;
}

void *protocol witness for static DUProcessingPhaseImplementation.implementationAttributes.getter in conformance DUFoundInEventDefaultImplementation()
{
  return &outlined read-only object #0 of protocol witness for static DUProcessingPhaseImplementation.implementationAttributes.getter in conformance DUFoundInEventDefaultImplementation;
}

uint64_t *outlined release of TokenizerOutput?(uint64_t *a1)
{
  outlined consume of TokenizerOutput?(*a1);
  return a1;
}

uint64_t outlined consume of TokenizerOutput?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined init with take of TokenizerOutput?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenizerOutput?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for DUFoundInEventDefaultImplementation()
{
  return objc_opt_self();
}

uint64_t DocumentUnderstanding_HiddenLayerOutput.values.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DocumentUnderstanding_HiddenLayerOutput.values.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*DocumentUnderstanding_HiddenLayerOutput.values.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DocumentUnderstanding_HiddenLayerOutput.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DocumentUnderstanding_HiddenLayerOutput(0) + 20);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for DocumentUnderstanding_HiddenLayerOutput(uint64_t a1)
{
  return type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(a1, (uint64_t *)&type metadata singleton initialization cache for DocumentUnderstanding_HiddenLayerOutput);
}

uint64_t DocumentUnderstanding_HiddenLayerOutput.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DocumentUnderstanding_HiddenLayerOutput(0) + 20);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*DocumentUnderstanding_HiddenLayerOutput.unknownFields.modify())(_QWORD)
{
  type metadata accessor for DocumentUnderstanding_HiddenLayerOutput(0);
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DocumentUnderstanding_HiddenLayerOutput.init()@<X0>(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x24BEE4AF8];
  type metadata accessor for DocumentUnderstanding_HiddenLayerOutput(0);
  return UnknownStorage.init()();
}

uint64_t DocumentUnderstanding_EncodingModelOutput.modelName.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DocumentUnderstanding_EncodingModelOutput.modelName.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*DocumentUnderstanding_EncodingModelOutput.modelName.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DocumentUnderstanding_EncodingModelOutput.hiddenLayerSize.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t DocumentUnderstanding_EncodingModelOutput.hiddenLayerSize.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*DocumentUnderstanding_EncodingModelOutput.hiddenLayerSize.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DocumentUnderstanding_EncodingModelOutput.nHiddenLayers.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t DocumentUnderstanding_EncodingModelOutput.nHiddenLayers.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*DocumentUnderstanding_EncodingModelOutput.nHiddenLayers.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DocumentUnderstanding_EncodingModelOutput.sequenceSize.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t DocumentUnderstanding_EncodingModelOutput.sequenceSize.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = result;
  return result;
}

uint64_t (*DocumentUnderstanding_EncodingModelOutput.sequenceSize.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DocumentUnderstanding_EncodingModelOutput.pooledHiddenLayerValues.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DocumentUnderstanding_EncodingModelOutput.pooledHiddenLayerValues.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 40) = a1;
  return result;
}

uint64_t (*DocumentUnderstanding_EncodingModelOutput.pooledHiddenLayerValues.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DocumentUnderstanding_EncodingModelOutput.hiddenLayerValues.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DocumentUnderstanding_EncodingModelOutput.hiddenLayerValues.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 48) = a1;
  return result;
}

uint64_t (*DocumentUnderstanding_EncodingModelOutput.hiddenLayerValues.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DocumentUnderstanding_EncodingModelOutput.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DocumentUnderstanding_EncodingModelOutput(0) + 40);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for DocumentUnderstanding_EncodingModelOutput(uint64_t a1)
{
  return type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(a1, (uint64_t *)&type metadata singleton initialization cache for DocumentUnderstanding_EncodingModelOutput);
}

uint64_t DocumentUnderstanding_EncodingModelOutput.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DocumentUnderstanding_EncodingModelOutput(0) + 40);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*DocumentUnderstanding_EncodingModelOutput.unknownFields.modify())(_QWORD)
{
  type metadata accessor for DocumentUnderstanding_EncodingModelOutput(0);
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DocumentUnderstanding_EncodingModelOutput.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  v2 = MEMORY[0x24BEE4AF8];
  a1[5] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  a1[6] = specialized Dictionary.init(dictionaryLiteral:)(v2);
  type metadata accessor for DocumentUnderstanding_EncodingModelOutput(0);
  return UnknownStorage.init()();
}

void *DocumentUnderstanding_HiddenLayerOutput.protoMessageName.unsafeMutableAddressor()
{
  return &static DocumentUnderstanding_HiddenLayerOutput.protoMessageName;
}

unint64_t static DocumentUnderstanding_HiddenLayerOutput.protoMessageName.getter()
{
  return 0xD000000000000028;
}

uint64_t DocumentUnderstanding_HiddenLayerOutput._protobuf_nameMap.unsafeMutableAddressor()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)&apostropheRegex.value._pattern);
}

uint64_t static DocumentUnderstanding_HiddenLayerOutput._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static DocumentUnderstanding_ClientInterface_StructuredEntity._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)&apostropheRegex.value._pattern, a1);
}

uint64_t DocumentUnderstanding_HiddenLayerOutput.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 1)
      dispatch thunk of Decoder.decodeRepeatedFloatField(value:)();
  }
  return result;
}

uint64_t DocumentUnderstanding_HiddenLayerOutput.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)v0 + 16)
    || (result = dispatch thunk of Visitor.visitPackedFloatField(value:fieldNumber:)(), !v1))
  {
    type metadata accessor for DocumentUnderstanding_HiddenLayerOutput(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int DocumentUnderstanding_HiddenLayerOutput.hashValue.getter()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.hashValue.getter(type metadata accessor for DocumentUnderstanding_HiddenLayerOutput, &lazy protocol witness table cache variable for type DocumentUnderstanding_HiddenLayerOutput and conformance DocumentUnderstanding_HiddenLayerOutput, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_HiddenLayerOutput);
}

uint64_t protocol witness for Message.init() in conformance DocumentUnderstanding_HiddenLayerOutput@<X0>(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x24BEE4AF8];
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance DocumentUnderstanding_HiddenLayerOutput()
{
  return 0xD000000000000028;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance DocumentUnderstanding_HiddenLayerOutput()
{
  return DocumentUnderstanding_HiddenLayerOutput.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance DocumentUnderstanding_HiddenLayerOutput()
{
  return DocumentUnderstanding_HiddenLayerOutput.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance DocumentUnderstanding_HiddenLayerOutput()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_HiddenLayerOutput and conformance DocumentUnderstanding_HiddenLayerOutput, type metadata accessor for DocumentUnderstanding_HiddenLayerOutput, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_HiddenLayerOutput);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DocumentUnderstanding_HiddenLayerOutput@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&one-time initialization token for _protobuf_nameMap, (uint64_t)&apostropheRegex.value._pattern, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DocumentUnderstanding_HiddenLayerOutput()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_HiddenLayerOutput and conformance DocumentUnderstanding_HiddenLayerOutput, type metadata accessor for DocumentUnderstanding_HiddenLayerOutput, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_HiddenLayerOutput);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DocumentUnderstanding_HiddenLayerOutput()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_HiddenLayerOutput and conformance DocumentUnderstanding_HiddenLayerOutput, type metadata accessor for DocumentUnderstanding_HiddenLayerOutput, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_HiddenLayerOutput);
  return Message.hash(into:)();
}

void *DocumentUnderstanding_EncodingModelOutput.protoMessageName.unsafeMutableAddressor()
{
  return &static DocumentUnderstanding_EncodingModelOutput.protoMessageName;
}

unint64_t static DocumentUnderstanding_EncodingModelOutput.protoMessageName.getter()
{
  return 0xD00000000000002ALL;
}

uint64_t DocumentUnderstanding_EncodingModelOutput._protobuf_nameMap.unsafeMutableAddressor()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)&apostropheRegex.value._checkout);
}

uint64_t static DocumentUnderstanding_EncodingModelOutput._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static DocumentUnderstanding_ClientInterface_StructuredEntity._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)&apostropheRegex.value._checkout, a1);
}

uint64_t DocumentUnderstanding_EncodingModelOutput.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 2:
        case 3:
        case 4:
          dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
          break;
        case 5:
          closure #5 in DocumentUnderstanding_EncodingModelOutput.decodeMessage<A>(decoder:)();
          break;
        case 6:
          closure #6 in DocumentUnderstanding_EncodingModelOutput.decodeMessage<A>(decoder:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #5 in DocumentUnderstanding_EncodingModelOutput.decodeMessage<A>(decoder:)()
{
  type metadata accessor for ProtobufInt64();
  type metadata accessor for DocumentUnderstanding_HiddenLayerOutput(0);
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_HiddenLayerOutput and conformance DocumentUnderstanding_HiddenLayerOutput, type metadata accessor for DocumentUnderstanding_HiddenLayerOutput, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_HiddenLayerOutput);
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_HiddenLayerOutput and conformance DocumentUnderstanding_HiddenLayerOutput, type metadata accessor for DocumentUnderstanding_HiddenLayerOutput, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_HiddenLayerOutput);
  return dispatch thunk of Decoder.decodeMapField<A, B>(fieldType:value:)();
}

uint64_t closure #6 in DocumentUnderstanding_EncodingModelOutput.decodeMessage<A>(decoder:)()
{
  type metadata accessor for ProtobufInt64();
  type metadata accessor for DocumentUnderstanding_HiddenLayerOutput(0);
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_HiddenLayerOutput and conformance DocumentUnderstanding_HiddenLayerOutput, type metadata accessor for DocumentUnderstanding_HiddenLayerOutput, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_HiddenLayerOutput);
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_HiddenLayerOutput and conformance DocumentUnderstanding_HiddenLayerOutput, type metadata accessor for DocumentUnderstanding_HiddenLayerOutput, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_HiddenLayerOutput);
  return dispatch thunk of Decoder.decodeMapField<A, B>(fieldType:value:)();
}

uint64_t DocumentUnderstanding_EncodingModelOutput.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = v0[1];
  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = *v0 & 0xFFFFFFFFFFFFLL;
  if (!v3 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    if (!v0[2] || (result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(), !v1))
    {
      if (!v0[3] || (result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(), !v1))
      {
        if (!v0[4] || (result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(), !v1))
        {
          if (!*(_QWORD *)(v0[5] + 16)
            || (type metadata accessor for ProtobufInt64(),
                type metadata accessor for DocumentUnderstanding_HiddenLayerOutput(0),
                lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_HiddenLayerOutput and conformance DocumentUnderstanding_HiddenLayerOutput, type metadata accessor for DocumentUnderstanding_HiddenLayerOutput, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_HiddenLayerOutput), lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_HiddenLayerOutput and conformance DocumentUnderstanding_HiddenLayerOutput, type metadata accessor for DocumentUnderstanding_HiddenLayerOutput, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_HiddenLayerOutput), result = dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)(), !v1))
          {
            if (!*(_QWORD *)(v0[6] + 16)
              || (type metadata accessor for ProtobufInt64(),
                  type metadata accessor for DocumentUnderstanding_HiddenLayerOutput(0),
                  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_HiddenLayerOutput and conformance DocumentUnderstanding_HiddenLayerOutput, type metadata accessor for DocumentUnderstanding_HiddenLayerOutput, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_HiddenLayerOutput), lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_HiddenLayerOutput and conformance DocumentUnderstanding_HiddenLayerOutput, type metadata accessor for DocumentUnderstanding_HiddenLayerOutput, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_HiddenLayerOutput), result = dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)(), !v1))
            {
              type metadata accessor for DocumentUnderstanding_EncodingModelOutput(0);
              return UnknownStorage.traverse<A>(visitor:)();
            }
          }
        }
      }
    }
  }
  return result;
}

Swift::Int DocumentUnderstanding_EncodingModelOutput.hashValue.getter()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.hashValue.getter(type metadata accessor for DocumentUnderstanding_EncodingModelOutput, &lazy protocol witness table cache variable for type DocumentUnderstanding_EncodingModelOutput and conformance DocumentUnderstanding_EncodingModelOutput, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_EncodingModelOutput);
}

uint64_t protocol witness for Message.init() in conformance DocumentUnderstanding_EncodingModelOutput@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  v2 = MEMORY[0x24BEE4AF8];
  a1[5] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  a1[6] = specialized Dictionary.init(dictionaryLiteral:)(v2);
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance DocumentUnderstanding_EncodingModelOutput()
{
  return 0xD00000000000002ALL;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance DocumentUnderstanding_EncodingModelOutput@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 40);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance DocumentUnderstanding_EncodingModelOutput(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 40);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance DocumentUnderstanding_EncodingModelOutput())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance DocumentUnderstanding_EncodingModelOutput()
{
  return DocumentUnderstanding_EncodingModelOutput.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance DocumentUnderstanding_EncodingModelOutput()
{
  return DocumentUnderstanding_EncodingModelOutput.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance DocumentUnderstanding_EncodingModelOutput()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_EncodingModelOutput and conformance DocumentUnderstanding_EncodingModelOutput, type metadata accessor for DocumentUnderstanding_EncodingModelOutput, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_EncodingModelOutput);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DocumentUnderstanding_EncodingModelOutput@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&one-time initialization token for _protobuf_nameMap, (uint64_t)&apostropheRegex.value._checkout, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DocumentUnderstanding_EncodingModelOutput()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_EncodingModelOutput and conformance DocumentUnderstanding_EncodingModelOutput, type metadata accessor for DocumentUnderstanding_EncodingModelOutput, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_EncodingModelOutput);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DocumentUnderstanding_EncodingModelOutput()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_EncodingModelOutput and conformance DocumentUnderstanding_EncodingModelOutput, type metadata accessor for DocumentUnderstanding_EncodingModelOutput, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_EncodingModelOutput);
  return Message.hash(into:)();
}

uint64_t specialized static DocumentUnderstanding_EncodingModelOutput.== infix(_:_:)(_QWORD *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  BOOL v11;
  char v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v18 - v9;
  v11 = *a1 == *(_QWORD *)a2 && a1[1] == *((_QWORD *)a2 + 1);
  if (v11 || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (a1[2] == *((_QWORD *)a2 + 2)
      && a1[3] == *((_QWORD *)a2 + 3)
      && a1[4] == *((_QWORD *)a2 + 4)
      && (specialized static Dictionary<>.== infix(_:_:)(a1[5], *((_QWORD *)a2 + 5)) & 1) != 0
      && (specialized static Dictionary<>.== infix(_:_:)(a1[6], *((_QWORD *)a2 + 6)) & 1) != 0)
    {
      v13 = type metadata accessor for DocumentUnderstanding_EncodingModelOutput(0);
      v14 = (char *)a1 + *(int *)(v13 + 40);
      v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v15(v10, v14, v4);
      v15(v8, &a2[*(int *)(v13 + 40)], v4);
      lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      v16 = *(void (**)(char *, uint64_t))(v5 + 8);
      v16(v8, v4);
      v16(v10, v4);
    }
    else
    {
      v12 = 0;
    }
  }
  return v12 & 1;
}

uint64_t specialized static DocumentUnderstanding_HiddenLayerOutput.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, char *, uint64_t);
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v17 - v9;
  if (specialized static Array<A>.== infix(_:_:)(*a1, *a2))
  {
    v11 = type metadata accessor for DocumentUnderstanding_HiddenLayerOutput(0);
    v12 = (char *)a1 + *(int *)(v11 + 20);
    v13 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v13(v10, v12, v4);
    v13(v8, (char *)a2 + *(int *)(v11 + 20), v4);
    lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v14 = dispatch thunk of static Equatable.== infix(_:_:)();
    v15 = *(void (**)(char *, uint64_t))(v5 + 8);
    v15(v8, v4);
    v15(v10, v4);
  }
  else
  {
    v14 = 0;
  }
  return v14 & 1;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in DocumentUnderstanding_HiddenLayerOutput()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_HiddenLayerOutput and conformance DocumentUnderstanding_HiddenLayerOutput, type metadata accessor for DocumentUnderstanding_HiddenLayerOutput, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_HiddenLayerOutput);
}

uint64_t base witness table accessor for Message in DocumentUnderstanding_HiddenLayerOutput()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_HiddenLayerOutput and conformance DocumentUnderstanding_HiddenLayerOutput, type metadata accessor for DocumentUnderstanding_HiddenLayerOutput, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_HiddenLayerOutput);
}

uint64_t base witness table accessor for Hashable in DocumentUnderstanding_HiddenLayerOutput()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_HiddenLayerOutput and conformance DocumentUnderstanding_HiddenLayerOutput, type metadata accessor for DocumentUnderstanding_HiddenLayerOutput, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_HiddenLayerOutput);
}

uint64_t base witness table accessor for Equatable in DocumentUnderstanding_HiddenLayerOutput()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_HiddenLayerOutput and conformance DocumentUnderstanding_HiddenLayerOutput, type metadata accessor for DocumentUnderstanding_HiddenLayerOutput, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_HiddenLayerOutput);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in DocumentUnderstanding_EncodingModelOutput()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_EncodingModelOutput and conformance DocumentUnderstanding_EncodingModelOutput, type metadata accessor for DocumentUnderstanding_EncodingModelOutput, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_EncodingModelOutput);
}

uint64_t base witness table accessor for Message in DocumentUnderstanding_EncodingModelOutput()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_EncodingModelOutput and conformance DocumentUnderstanding_EncodingModelOutput, type metadata accessor for DocumentUnderstanding_EncodingModelOutput, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_EncodingModelOutput);
}

uint64_t base witness table accessor for Hashable in DocumentUnderstanding_EncodingModelOutput()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_EncodingModelOutput and conformance DocumentUnderstanding_EncodingModelOutput, type metadata accessor for DocumentUnderstanding_EncodingModelOutput, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_EncodingModelOutput);
}

uint64_t base witness table accessor for Equatable in DocumentUnderstanding_EncodingModelOutput()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_EncodingModelOutput and conformance DocumentUnderstanding_EncodingModelOutput, type metadata accessor for DocumentUnderstanding_EncodingModelOutput, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_EncodingModelOutput);
}

uint64_t *initializeBufferWithCopyOfBuffer for DocumentUnderstanding_HiddenLayerOutput(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for DocumentUnderstanding_HiddenLayerOutput(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for DocumentUnderstanding_HiddenLayerOutput(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

_QWORD *assignWithCopy for DocumentUnderstanding_HiddenLayerOutput(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_QWORD *initializeWithTake for DocumentUnderstanding_HiddenLayerOutput(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for DocumentUnderstanding_HiddenLayerOutput(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for DocumentUnderstanding_HiddenLayerOutput()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_228337290(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for DocumentUnderstanding_HiddenLayerOutput()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_228337318(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for DocumentUnderstanding_HiddenLayerOutput()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for DocumentUnderstanding_EncodingModelOutput(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    v6 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v6;
    v7 = *(int *)(a3 + 40);
    v8 = a1 + v7;
    v9 = (uint64_t)a2 + v7;
    *(_QWORD *)(a1 + 48) = a2[6];
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
  }
  return v3;
}

uint64_t destroy for DocumentUnderstanding_EncodingModelOutput(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 40);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for DocumentUnderstanding_EncodingModelOutput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(int *)(a3 + 40);
  v7 = a1 + v6;
  v8 = a2 + v6;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  return a1;
}

_QWORD *assignWithCopy for DocumentUnderstanding_EncodingModelOutput(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 40);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for DocumentUnderstanding_EncodingModelOutput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v5 = *(int *)(a3 + 40);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for DocumentUnderstanding_EncodingModelOutput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  v8 = *(int *)(a3 + 40);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for DocumentUnderstanding_EncodingModelOutput()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_228337798(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 40), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for DocumentUnderstanding_EncodingModelOutput()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_228337820(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 40), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for DocumentUnderstanding_EncodingModelOutput()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _BYTE v9[40];

  if (*(unsigned __int8 *)(a1 + 32) == 255)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(a1, &demangling cache variable for type metadata for Result<Any?, Error>?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, (uint64_t)v9);
    swift_bridgeObjectRelease();
    return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v9, &demangling cache variable for type metadata for Result<Any?, Error>?);
  }
  else
  {
    outlined init with take of Result<Any?, Error>(a1, (uint64_t)v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v8 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v9, a2, a3, isUniquelyReferenced_nonNull_native);
    *v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t DUProcessingRequest.__allocating_init(document:scheduler:preprocess:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  void *v7;

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 24) = 0;
  *(_BYTE *)(v6 + 40) = 2;
  *(_QWORD *)(v6 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  swift_beginAccess();
  v7 = *(void **)(v6 + 24);
  *(_QWORD *)(v6 + 24) = a1;

  *(_QWORD *)(v6 + 32) = a2;
  swift_beginAccess();
  *(_BYTE *)(v6 + 40) = a3;
  return v6;
}

uint64_t DUProcessingRequest.__allocating_init(document:scheduler:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 24) = 0;
  *(_BYTE *)(v4 + 40) = 2;
  *(_QWORD *)(v4 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  swift_beginAccess();
  v5 = *(void **)(v4 + 24);
  *(_QWORD *)(v4 + 24) = a1;

  *(_QWORD *)(v4 + 32) = a2;
  return v4;
}

uint64_t DUProcessingRequest.processingPhaseResults.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t DUProcessingRequest.processingPhaseResults.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*DUProcessingRequest.processingPhaseResults.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

void *DUProcessingRequest.inputDocument.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  swift_beginAccess();
  v1 = *(void **)(v0 + 24);
  v2 = v1;
  return v1;
}

void DUProcessingRequest.inputDocument.setter(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  swift_beginAccess();
  v3 = *(void **)(v1 + 24);
  *(_QWORD *)(v1 + 24) = a1;

}

uint64_t (*DUProcessingRequest.inputDocument.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryConfidence.modify;
}

uint64_t DUProcessingRequest.scheduler.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t DUProcessingRequest.scheduler.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 32) = a1;
  return swift_release();
}

uint64_t (*DUProcessingRequest.scheduler.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUProcessingRequest.preprocess.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t DUProcessingRequest.preprocess.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 40) = a1;
  return result;
}

uint64_t (*DUProcessingRequest.preprocess.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUProcessingRequest.init(document:scheduler:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  *(_QWORD *)(v2 + 24) = 0;
  *(_BYTE *)(v2 + 40) = 2;
  *(_QWORD *)(v2 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  swift_beginAccess();
  v5 = *(void **)(v2 + 24);
  *(_QWORD *)(v2 + 24) = a1;

  *(_QWORD *)(v2 + 32) = a2;
  return v2;
}

uint64_t DUProcessingRequest.init(document:scheduler:preprocess:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  void *v7;

  *(_QWORD *)(v3 + 24) = 0;
  *(_BYTE *)(v3 + 40) = 2;
  *(_QWORD *)(v3 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  swift_beginAccess();
  v7 = *(void **)(v3 + 24);
  *(_QWORD *)(v3 + 24) = a1;

  *(_QWORD *)(v3 + 32) = a2;
  swift_beginAccess();
  *(_BYTE *)(v3 + 40) = a3;
  return v3;
}

uint64_t DUProcessingRequest.executeImplementation(phaseImplementation:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t DUProcessingRequest.executeImplementation(phaseImplementation:)()
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = (_QWORD *)v0[3];
  v3 = v1[3];
  v2 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  v4 = (_QWORD *)swift_task_alloc();
  v0[5] = (uint64_t)v4;
  *v4 = v0;
  v4[1] = DUProcessingRequest.executeImplementation(phaseImplementation:);
  return DUProcessingPhaseImplementation.runOnRequest(request:)(v0[2], v0[4], v3, v2);
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t DUProcessingRequest.executeSpecification(specification:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[46] = a2;
  v3[47] = v2;
  v3[45] = a1;
  return swift_task_switch();
}

uint64_t DUProcessingRequest.executeSpecification(specification:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  _QWORD *v19;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  Swift::String v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, _QWORD);
  uint64_t (*v31)(uint64_t, uint64_t);

  v1 = *(_QWORD **)(v0 + 368);
  v2 = *(_QWORD *)(v0 + 376);
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  swift_getDynamicType();
  v3 = (*(uint64_t (**)(void))(v1[4] + 16))();
  v5 = v4;
  v6 = (*(uint64_t (**)(void))(*(_QWORD *)v2 + 112))();
  if (*(_QWORD *)(v6 + 16) && (v7 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v5), (v8 & 1) != 0))
  {
    outlined init with copy of Result<Any?, Error>(*(_QWORD *)(v6 + 56) + 40 * v7, v0 + 56);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(unsigned __int8 *)(v0 + 88) != 255)
    {
      v9 = *(_QWORD *)(v0 + 360);
      v10 = v0 + 56;
      goto LABEL_9;
    }
  }
  else
  {
    *(_OWORD *)(v0 + 56) = 0u;
    *(_OWORD *)(v0 + 72) = 0u;
    *(_BYTE *)(v0 + 88) = -1;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v12 = *(_QWORD *)(v0 + 368);
  v11 = *(_QWORD *)(v0 + 376);
  v13 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 56, &demangling cache variable for type metadata for Result<Any?, Error>?);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 160))(v13);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 160))(v12, v11);
  *(_QWORD *)(v0 + 384) = v15;
  swift_release();
  v16 = *(_QWORD *)(v15 + 16);
  *(_QWORD *)(v0 + 392) = v16;
  if (v16)
  {
    v17 = *(_QWORD *)(v0 + 384);
    v18 = *(int **)(**(_QWORD **)(v0 + 376) + 224);
    *(_QWORD *)(v0 + 400) = v18;
    *(_QWORD *)(v0 + 408) = 0;
    outlined init with copy of TopLevelSpecificationProtocol(v17 + 32, v0 + 16);
    v31 = (uint64_t (*)(uint64_t, uint64_t))((char *)v18 + *v18);
    v19 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 416) = v19;
    *v19 = v0;
    v19[1] = DUProcessingRequest.executeSpecification(specification:);
    return v31(v0 + 96, v0 + 16);
  }
  swift_bridgeObjectRelease();
  v22 = *(_QWORD **)(v0 + 368);
  v21 = *(_QWORD *)(v0 + 376);
  v23 = *(_QWORD *)(v0 + 360);
  __swift_project_boxed_opaque_existential_1(v22, v22[3]);
  swift_getDynamicType();
  v24._countAndFlagsBits = (*(uint64_t (**)(void))(v22[4] + 16))();
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type DUProcessingRequestError and conformance DUProcessingRequestError();
  v25 = swift_allocError();
  *v26 = 0xD000000000000020;
  v26[1] = 0x80000002284DC170;
  *(_QWORD *)(v0 + 176) = v25;
  *(_BYTE *)(v0 + 208) = 1;
  __swift_project_boxed_opaque_existential_1(v22, v22[3]);
  swift_getDynamicType();
  v27 = (*(uint64_t (**)(void))(v22[4] + 16))();
  v29 = v28;
  outlined init with copy of Result<Any?, Error>(v0 + 176, v0 + 216);
  v30 = (void (*)(uint64_t, _QWORD))(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 128))(v0 + 296);
  specialized Dictionary.subscript.setter(v0 + 216, v27, v29);
  v30(v0 + 296, 0);
  v10 = v0 + 176;
  v9 = v23;
LABEL_9:
  outlined init with take of Result<Any?, Error>(v10, v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  Swift::String v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, _QWORD);
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, _QWORD);
  int *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);

  outlined init with copy of Result<Any?, Error>(v0 + 96, v0 + 136);
  if ((*(_BYTE *)(v0 + 168) & 1) == 0)
  {
    v13 = *(_QWORD *)(v0 + 376);
    v14 = *(_QWORD **)(v0 + 368);
    v22 = *(_QWORD *)(v0 + 360);
    swift_bridgeObjectRelease();
    __swift_project_boxed_opaque_existential_1(v14, v14[3]);
    swift_getDynamicType();
    v15 = (*(uint64_t (**)(void))(v14[4] + 16))();
    v17 = v16;
    outlined init with copy of Result<Any?, Error>(v0 + 96, v0 + 256);
    v18 = (void (*)(uint64_t, _QWORD))(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 128))(v0 + 328);
    specialized Dictionary.subscript.setter(v0 + 256, v15, v17);
    v18(v0 + 328, 0);
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
    outlined init with take of Result<Any?, Error>(v0 + 96, v22);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 136, &demangling cache variable for type metadata for Result<Any?, Error>);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v1 = *(_QWORD *)(v0 + 392);
  v2 = *(_QWORD *)(v0 + 408) + 1;
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 96, &demangling cache variable for type metadata for Result<Any?, Error>);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);

  if (v2 == v1)
  {
    swift_bridgeObjectRelease();
    v4 = *(_QWORD **)(v0 + 368);
    v3 = *(_QWORD *)(v0 + 376);
    v5 = *(_QWORD *)(v0 + 360);
    __swift_project_boxed_opaque_existential_1(v4, v4[3]);
    swift_getDynamicType();
    v6._countAndFlagsBits = (*(uint64_t (**)(void))(v4[4] + 16))();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type DUProcessingRequestError and conformance DUProcessingRequestError();
    v7 = swift_allocError();
    *v8 = 0xD000000000000020;
    v8[1] = 0x80000002284DC170;
    *(_QWORD *)(v0 + 176) = v7;
    *(_BYTE *)(v0 + 208) = 1;
    __swift_project_boxed_opaque_existential_1(v4, v4[3]);
    swift_getDynamicType();
    v9 = (*(uint64_t (**)(void))(v4[4] + 16))();
    v11 = v10;
    outlined init with copy of Result<Any?, Error>(v0 + 176, v0 + 216);
    v12 = (void (*)(uint64_t, _QWORD))(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 128))(v0 + 296);
    specialized Dictionary.subscript.setter(v0 + 216, v9, v11);
    v12(v0 + 296, 0);
    outlined init with take of Result<Any?, Error>(v0 + 176, v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  *(_QWORD *)(v0 + 408) = v2;
  v20 = *(int **)(v0 + 400);
  outlined init with copy of TopLevelSpecificationProtocol(*(_QWORD *)(v0 + 384) + 40 * v2 + 32, v0 + 16);
  v23 = (uint64_t (*)(uint64_t, uint64_t))((char *)v20 + *v20);
  v21 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 416) = v21;
  *v21 = v0;
  v21[1] = DUProcessingRequest.executeSpecification(specification:);
  return v23(v0 + 96, v0 + 16);
}

uint64_t DUProcessingRequest.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  swift_release();
  return v0;
}

uint64_t DUProcessingRequest.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  swift_release();
  return swift_deallocClassInstance();
}

uint64_t outlined init with copy of Result<Any?, Error>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<Any?, Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type DUProcessingRequestError and conformance DUProcessingRequestError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DUProcessingRequestError and conformance DUProcessingRequestError;
  if (!lazy protocol witness table cache variable for type DUProcessingRequestError and conformance DUProcessingRequestError)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for DUProcessingRequestError, &type metadata for DUProcessingRequestError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DUProcessingRequestError and conformance DUProcessingRequestError);
  }
  return result;
}

uint64_t outlined init with take of Result<Any?, Error>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<Any?, Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_2283387B8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 112))();
  *a2 = result;
  return result;
}

uint64_t sub_2283387E8(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 120);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_228338818@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 136))();
  *a2 = result;
  return result;
}

uint64_t sub_228338848(id *a1, uint64_t a2)
{
  id v2;
  uint64_t (*v3)(id);
  id v4;

  v2 = *a1;
  v3 = *(uint64_t (**)(id))(**(_QWORD **)a2 + 144);
  v4 = *a1;
  return v3(v2);
}

uint64_t sub_228338884@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 160))();
  *a2 = result;
  return result;
}

uint64_t sub_2283388B4(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 168);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_2283388E4@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 184))();
  *a2 = result;
  return result;
}

uint64_t sub_228338914(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 192))(*a1);
}

_QWORD *initializeBufferWithCopyOfBuffer for DUProcessingRequestError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for DUProcessingRequestError()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for DUProcessingRequestError(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for DUProcessingRequestError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DUProcessingRequestError(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DUProcessingRequestError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DUProcessingRequestError()
{
  return &type metadata for DUProcessingRequestError;
}

uint64_t type metadata accessor for DUProcessingRequest()
{
  return objc_opt_self();
}

uint64_t DocumentUnderstanding_ClientInterface_TopicResult.topicSet.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_TopicSetIdentifier?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult();
  outlined init with copy of DocumentUnderstanding_TopicSetIdentifier?(v1 + *(int *)(v6 + 24), (uint64_t)v5);
  v7 = type metadata accessor for DocumentUnderstanding_TopicSetIdentifier();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of DocumentUnderstanding_TopicSetIdentifier((uint64_t)v5, a1);
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  UnknownStorage.init()();
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_TopicSetIdentifier?);
}

uint64_t type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult()
{
  uint64_t result;

  result = type metadata singleton initialization cache for DocumentUnderstanding_ClientInterface_TopicResult;
  if (!type metadata singleton initialization cache for DocumentUnderstanding_ClientInterface_TopicResult)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t outlined init with take of DocumentUnderstanding_TopicSetIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DocumentUnderstanding_TopicSetIdentifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t DocumentUnderstanding_ClientInterface_TopicResult.topicIdentifier.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult() + 28));
  if (v1[1])
    v2 = *v1;
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

double DocumentUnderstanding_ClientInterface_TopicResult.topicConfidence.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = v0 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult() + 32);
  result = *(double *)v1;
  if (*(_BYTE *)(v1 + 8))
    return 0.0;
  return result;
}

uint64_t DocumentUnderstanding_ClientInterface_TopicResult.init()@<X0>(_QWORD *a1@<X8>)
{
  int *v2;
  char *v3;
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;
  char *v7;

  *a1 = MEMORY[0x24BEE4AF8];
  v2 = (int *)type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult();
  UnknownStorage.init()();
  v3 = (char *)a1 + v2[6];
  v4 = type metadata accessor for DocumentUnderstanding_TopicSetIdentifier();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v6 = (_QWORD *)((char *)a1 + v2[7]);
  *v6 = 0;
  v6[1] = 0;
  v7 = (char *)a1 + v2[8];
  *(_QWORD *)v7 = 0;
  v7[8] = 1;
  return result;
}

uint64_t DocumentUnderstanding_ClientInterface_TopicResult.topicSet.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult() + 24);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v3, &demangling cache variable for type metadata for DocumentUnderstanding_TopicSetIdentifier?);
  outlined init with take of DocumentUnderstanding_TopicSetIdentifier(a1, v3);
  v4 = type metadata accessor for DocumentUnderstanding_TopicSetIdentifier();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

uint64_t DocumentUnderstanding_ClientInterface_TopicResult.topicIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult() + 28));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t DocumentUnderstanding_ClientInterface_TopicResult.topicConfidence.setter(double a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult();
  v4 = v1 + *(int *)(result + 32);
  *(double *)v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_TopicResult.topicSet : DocumentUnderstanding_ClientInterface_TopicResult@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_TopicSetIdentifier?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult();
  outlined init with copy of DocumentUnderstanding_TopicSetIdentifier?(a1 + *(int *)(v7 + 24), (uint64_t)v6);
  v8 = type metadata accessor for DocumentUnderstanding_TopicSetIdentifier();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of DocumentUnderstanding_TopicSetIdentifier((uint64_t)v6, a2);
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  *(_QWORD *)(a2 + 16) = 0;
  UnknownStorage.init()();
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v6, &demangling cache variable for type metadata for DocumentUnderstanding_TopicSetIdentifier?);
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_TopicResult.topicSet : DocumentUnderstanding_ClientInterface_TopicResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for DocumentUnderstanding_TopicSetIdentifier();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of DocumentUnderstanding_TopicSetIdentifier(a1, (uint64_t)v7);
  v8 = a2 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult() + 24);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v8, &demangling cache variable for type metadata for DocumentUnderstanding_TopicSetIdentifier?);
  outlined init with take of DocumentUnderstanding_TopicSetIdentifier((uint64_t)v7, v8);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

void (*DocumentUnderstanding_ClientInterface_TopicResult.topicSet.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_TopicSetIdentifier?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for DocumentUnderstanding_TopicSetIdentifier();
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult() + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of DocumentUnderstanding_TopicSetIdentifier?(v1 + v10, (uint64_t)v5);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *(_QWORD *)v9 = 0;
    v9[8] = 1;
    *((_QWORD *)v9 + 2) = 0;
    UnknownStorage.init()();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_TopicSetIdentifier?);
  }
  else
  {
    outlined init with take of DocumentUnderstanding_TopicSetIdentifier((uint64_t)v5, (uint64_t)v9);
  }
  return DocumentUnderstanding_ClientInterface_TopicResult.topicSet.modify;
}

void DocumentUnderstanding_ClientInterface_TopicResult.topicSet.modify(uint64_t a1, char a2)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  v2 = *(void **)a1;
  v3 = *(int *)(*(_QWORD *)a1 + 48);
  v4 = *(void **)(*(_QWORD *)a1 + 32);
  v5 = *(void **)(*(_QWORD *)a1 + 40);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v8 = *(void **)(*(_QWORD *)a1 + 8);
  v9 = **(_QWORD **)a1 + v3;
  if ((a2 & 1) != 0)
  {
    outlined init with copy of DocumentUnderstanding_TopicSetIdentifier(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)v4);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v9, &demangling cache variable for type metadata for DocumentUnderstanding_TopicSetIdentifier?);
    outlined init with take of DocumentUnderstanding_TopicSetIdentifier((uint64_t)v4, v9);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
    outlined destroy of DocumentUnderstanding_TopicSetIdentifier((uint64_t)v5);
  }
  else
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(**(_QWORD **)a1 + v3, &demangling cache variable for type metadata for DocumentUnderstanding_TopicSetIdentifier?);
    outlined init with take of DocumentUnderstanding_TopicSetIdentifier((uint64_t)v5, v9);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
  }
  free(v5);
  free(v4);
  free(v8);
  free(v2);
}

uint64_t outlined init with copy of DocumentUnderstanding_TopicSetIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DocumentUnderstanding_TopicSetIdentifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of DocumentUnderstanding_TopicSetIdentifier(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DocumentUnderstanding_TopicSetIdentifier();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

BOOL DocumentUnderstanding_ClientInterface_TopicResult.hasTopicSet.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_TopicSetIdentifier?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult();
  outlined init with copy of DocumentUnderstanding_TopicSetIdentifier?(v0 + *(int *)(v4 + 24), (uint64_t)v3);
  v5 = type metadata accessor for DocumentUnderstanding_TopicSetIdentifier();
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v3, &demangling cache variable for type metadata for DocumentUnderstanding_TopicSetIdentifier?);
  return v6;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_TopicResult.clearTopicSet()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult() + 24);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v1, &demangling cache variable for type metadata for DocumentUnderstanding_TopicSetIdentifier?);
  v2 = type metadata accessor for DocumentUnderstanding_TopicSetIdentifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_TopicResult.topicIdentifier : DocumentUnderstanding_ClientInterface_TopicResult@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult() + 28));
  v4 = v3[1];
  if (v4)
  {
    v5 = *v3;
    v6 = v4;
  }
  else
  {
    v5 = 0;
    v6 = 0xE000000000000000;
  }
  *a2 = v5;
  a2[1] = v6;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_TopicResult.topicIdentifier : DocumentUnderstanding_ClientInterface_TopicResult(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;

  v3 = *a1;
  v2 = a1[1];
  v4 = (_QWORD *)(a2 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult() + 28));
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *v4 = v3;
  v4[1] = v2;
  return result;
}

uint64_t (*DocumentUnderstanding_ClientInterface_TopicResult.topicIdentifier.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult() + 28);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_ClientInterface_StructuredEntityLabel.labelName.modify;
}

BOOL DocumentUnderstanding_ClientInterface_TopicResult.hasTopicIdentifier.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0
                   + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult() + 28)
                   + 8) != 0;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_TopicResult.clearTopicIdentifier()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(v0 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult() + 28));
  swift_bridgeObjectRelease();
  *v1 = 0;
  v1[1] = 0;
}

uint64_t (*DocumentUnderstanding_ClientInterface_TopicResult.topicConfidence.modify(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult() + 32);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return DocumentUnderstanding_ClientInterface_StructuredEntityLabel.confidenceScore.modify;
}

BOOL DocumentUnderstanding_ClientInterface_TopicResult.hasTopicConfidence.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0
                   + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult() + 32)
                   + 8) & 1) == 0;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_TopicResult.clearTopicConfidence()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult() + 32);
  *(_QWORD *)v1 = 0;
  *(_BYTE *)(v1 + 8) = 1;
}

uint64_t DocumentUnderstanding_ClientInterface_TopicResult.topicNames.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DocumentUnderstanding_ClientInterface_TopicResult.topicNames.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*DocumentUnderstanding_ClientInterface_TopicResult.topicNames.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DocumentUnderstanding_ClientInterface_TopicResult.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult() + 20);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t DocumentUnderstanding_ClientInterface_TopicResult.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult() + 20);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*DocumentUnderstanding_ClientInterface_TopicResult.unknownFields.modify())(_QWORD)
{
  type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult();
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

void *DocumentUnderstanding_ClientInterface_TopicResult.protoMessageName.unsafeMutableAddressor()
{
  return &static DocumentUnderstanding_ClientInterface_TopicResult.protoMessageName;
}

unint64_t static DocumentUnderstanding_ClientInterface_TopicResult.protoMessageName.getter()
{
  return 0xD000000000000033;
}

uint64_t DocumentUnderstanding_ClientInterface_TopicResult._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static DocumentUnderstanding_ClientInterface_TopicResult._protobuf_nameMap);
}

uint64_t static DocumentUnderstanding_ClientInterface_TopicResult._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v2 = type metadata accessor for _NameMap();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static DocumentUnderstanding_ClientInterface_TopicResult._protobuf_nameMap);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t DocumentUnderstanding_ClientInterface_TopicResult.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v4 = v3;
          closure #1 in DocumentUnderstanding_ClientInterface_TopicResult.decodeMessage<A>(decoder:)();
          goto LABEL_5;
        case 2:
          type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult();
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 3:
          type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult();
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          goto LABEL_5;
        case 4:
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedStringField(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in DocumentUnderstanding_ClientInterface_TopicResult.decodeMessage<A>(decoder:)()
{
  type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult();
  type metadata accessor for DocumentUnderstanding_TopicSetIdentifier();
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_TopicSetIdentifier and conformance DocumentUnderstanding_TopicSetIdentifier, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_TopicSetIdentifier, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_TopicSetIdentifier);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t DocumentUnderstanding_ClientInterface_TopicResult.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  result = closure #1 in DocumentUnderstanding_ClientInterface_TopicResult.traverse<A>(visitor:)(v0);
  if (!v1)
  {
    closure #2 in DocumentUnderstanding_ClientInterface_TopicResult.traverse<A>(visitor:)(v0);
    closure #3 in DocumentUnderstanding_ClientInterface_TopicResult.traverse<A>(visitor:)(v0);
    if (*(_QWORD *)(*(_QWORD *)v0 + 16))
      dispatch thunk of Visitor.visitRepeatedStringField(value:fieldNumber:)();
    type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult();
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in DocumentUnderstanding_ClientInterface_TopicResult.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD v11[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_TopicSetIdentifier?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DocumentUnderstanding_TopicSetIdentifier();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult();
  outlined init with copy of DocumentUnderstanding_TopicSetIdentifier?(a1 + *(int *)(v9 + 24), (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v4, &demangling cache variable for type metadata for DocumentUnderstanding_TopicSetIdentifier?);
  outlined init with take of DocumentUnderstanding_TopicSetIdentifier((uint64_t)v4, (uint64_t)v8);
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_TopicSetIdentifier and conformance DocumentUnderstanding_TopicSetIdentifier, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_TopicSetIdentifier, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_TopicSetIdentifier);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of DocumentUnderstanding_TopicSetIdentifier((uint64_t)v8);
}

uint64_t closure #2 in DocumentUnderstanding_ClientInterface_TopicResult.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult();
  if (*(_QWORD *)(a1 + *(int *)(result + 28) + 8))
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  return result;
}

uint64_t closure #3 in DocumentUnderstanding_ClientInterface_TopicResult.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult();
  if ((*(_BYTE *)(a1 + *(int *)(result + 32) + 8) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  return result;
}

Swift::Int DocumentUnderstanding_ClientInterface_TopicResult.hashValue.getter()
{
  Hasher.init(_seed:)();
  type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult();
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_TopicResult and conformance DocumentUnderstanding_ClientInterface_TopicResult, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_TopicResult);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Message.init() in conformance DocumentUnderstanding_ClientInterface_TopicResult@<X0>(int *a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _QWORD *v8;
  char *v9;

  *a2 = MEMORY[0x24BEE4AF8];
  UnknownStorage.init()();
  v4 = (char *)a2 + a1[6];
  v5 = type metadata accessor for DocumentUnderstanding_TopicSetIdentifier();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v7 = a1[8];
  v8 = (_QWORD *)((char *)a2 + a1[7]);
  *v8 = 0;
  v8[1] = 0;
  v9 = (char *)a2 + v7;
  *(_QWORD *)v9 = 0;
  v9[8] = 1;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance DocumentUnderstanding_ClientInterface_TopicResult()
{
  return 0xD000000000000033;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance DocumentUnderstanding_ClientInterface_TopicResult()
{
  return DocumentUnderstanding_ClientInterface_TopicResult.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance DocumentUnderstanding_ClientInterface_TopicResult()
{
  return DocumentUnderstanding_ClientInterface_TopicResult.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance DocumentUnderstanding_ClientInterface_TopicResult()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_TopicResult and conformance DocumentUnderstanding_ClientInterface_TopicResult, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_TopicResult);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DocumentUnderstanding_ClientInterface_TopicResult@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v2 = type metadata accessor for _NameMap();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static DocumentUnderstanding_ClientInterface_TopicResult._protobuf_nameMap);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DocumentUnderstanding_ClientInterface_TopicResult()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_TopicResult and conformance DocumentUnderstanding_ClientInterface_TopicResult, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_TopicResult);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DocumentUnderstanding_ClientInterface_TopicResult()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_TopicResult and conformance DocumentUnderstanding_ClientInterface_TopicResult, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_TopicResult);
  return Message.hash(into:)();
}

uint64_t specialized static DocumentUnderstanding_ClientInterface_TopicResult.== infix(_:_:)(_QWORD **a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(uint64_t, uint64_t, uint64_t);
  char v31;
  uint64_t v32;
  char *v33;
  _QWORD **v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  double *v41;
  char v42;
  double *v43;
  int v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  char *v49;
  char *v50;
  void (*v51)(char *, uint64_t);
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD **v57;
  char *v58;

  v4 = type metadata accessor for UnknownStorage();
  v55 = *(_QWORD *)(v4 - 8);
  v56 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v54 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v53 = (char *)&v53 - v7;
  v8 = type metadata accessor for DocumentUnderstanding_TopicSetIdentifier();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DocumentUnderstanding_TopicSetIdentifier?, DocumentUnderstanding_TopicSetIdentifier?));
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_TopicSetIdentifier?);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v16);
  v21 = (char *)&v53 - v20;
  MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v53 - v22;
  v24 = type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult();
  v25 = *(int *)(v24 + 24);
  v57 = a1;
  v26 = (uint64_t)a1 + v25;
  v27 = (int *)v24;
  outlined init with copy of DocumentUnderstanding_TopicSetIdentifier?(v26, (uint64_t)v23);
  v28 = v27[6];
  v58 = a2;
  outlined init with copy of DocumentUnderstanding_TopicSetIdentifier?((uint64_t)&a2[v28], (uint64_t)v21);
  v29 = (uint64_t)&v14[*(int *)(v12 + 48)];
  outlined init with copy of DocumentUnderstanding_TopicSetIdentifier?((uint64_t)v23, (uint64_t)v14);
  outlined init with copy of DocumentUnderstanding_TopicSetIdentifier?((uint64_t)v21, v29);
  v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v30((uint64_t)v14, 1, v8) == 1)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v21, &demangling cache variable for type metadata for DocumentUnderstanding_TopicSetIdentifier?);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v23, &demangling cache variable for type metadata for DocumentUnderstanding_TopicSetIdentifier?);
    if (v30(v29, 1, v8) == 1)
    {
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v14, &demangling cache variable for type metadata for DocumentUnderstanding_TopicSetIdentifier?);
      goto LABEL_8;
    }
LABEL_6:
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v14, &demangling cache variable for type metadata for (DocumentUnderstanding_TopicSetIdentifier?, DocumentUnderstanding_TopicSetIdentifier?));
    goto LABEL_23;
  }
  outlined init with copy of DocumentUnderstanding_TopicSetIdentifier?((uint64_t)v14, (uint64_t)v18);
  if (v30(v29, 1, v8) == 1)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v21, &demangling cache variable for type metadata for DocumentUnderstanding_TopicSetIdentifier?);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v23, &demangling cache variable for type metadata for DocumentUnderstanding_TopicSetIdentifier?);
    outlined destroy of DocumentUnderstanding_TopicSetIdentifier((uint64_t)v18);
    goto LABEL_6;
  }
  outlined init with take of DocumentUnderstanding_TopicSetIdentifier(v29, (uint64_t)v11);
  v31 = static DocumentUnderstanding_TopicSetIdentifier.== infix(_:_:)(v18, v11);
  outlined destroy of DocumentUnderstanding_TopicSetIdentifier((uint64_t)v11);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v21, &demangling cache variable for type metadata for DocumentUnderstanding_TopicSetIdentifier?);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v23, &demangling cache variable for type metadata for DocumentUnderstanding_TopicSetIdentifier?);
  outlined destroy of DocumentUnderstanding_TopicSetIdentifier((uint64_t)v18);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v14, &demangling cache variable for type metadata for DocumentUnderstanding_TopicSetIdentifier?);
  if ((v31 & 1) == 0)
    goto LABEL_23;
LABEL_8:
  v32 = v27[7];
  v34 = v57;
  v33 = v58;
  v35 = (_QWORD **)((char *)v57 + v32);
  v36 = *(uint64_t *)((char *)v57 + v32 + 8);
  v37 = &v58[v32];
  v38 = *((_QWORD *)v37 + 1);
  if (!v36)
  {
    if (v38)
      goto LABEL_23;
LABEL_15:
    v40 = v27[8];
    v41 = (double *)((char *)v34 + v40);
    v42 = *((_BYTE *)v34 + v40 + 8);
    v43 = (double *)&v33[v40];
    v44 = v33[v40 + 8];
    if ((v42 & 1) != 0)
    {
      if (!v44)
        goto LABEL_23;
    }
    else
    {
      if (*v41 != *v43)
        LOBYTE(v44) = 1;
      if ((v44 & 1) != 0)
        goto LABEL_23;
    }
    if ((specialized static Array<A>.== infix(_:_:)(*v34, *(_QWORD **)v33) & 1) != 0)
    {
      v45 = (char *)v34 + v27[5];
      v47 = v55;
      v46 = v56;
      v48 = *(void (**)(char *, char *, uint64_t))(v55 + 16);
      v49 = v53;
      v48(v53, v45, v56);
      v50 = v54;
      v48(v54, &v33[v27[5]], v46);
      lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v39 = dispatch thunk of static Equatable.== infix(_:_:)();
      v51 = *(void (**)(char *, uint64_t))(v47 + 8);
      v51(v50, v46);
      v51(v49, v46);
      return v39 & 1;
    }
LABEL_23:
    v39 = 0;
    return v39 & 1;
  }
  if (!v38)
    goto LABEL_23;
  if (*v35 == *(_QWORD *)v37 && v36 == v38)
    goto LABEL_15;
  v39 = 0;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    goto LABEL_15;
  return v39 & 1;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in DocumentUnderstanding_ClientInterface_TopicResult()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_TopicResult and conformance DocumentUnderstanding_ClientInterface_TopicResult, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_TopicResult);
}

uint64_t base witness table accessor for Message in DocumentUnderstanding_ClientInterface_TopicResult()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_TopicResult and conformance DocumentUnderstanding_ClientInterface_TopicResult, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_TopicResult);
}

uint64_t base witness table accessor for Hashable in DocumentUnderstanding_ClientInterface_TopicResult()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_TopicResult and conformance DocumentUnderstanding_ClientInterface_TopicResult, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_TopicResult);
}

uint64_t base witness table accessor for Equatable in DocumentUnderstanding_ClientInterface_TopicResult()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_TopicResult and conformance DocumentUnderstanding_ClientInterface_TopicResult, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_TopicResult);
}

uint64_t sub_22833A52C@<X0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  double v6;

  result = type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult();
  v5 = a1 + *(int *)(result + 32);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *a2 = v6;
  return result;
}

uint64_t sub_22833A574(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a1;
  result = type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult();
  v5 = a2 + *(int *)(result + 32);
  *(_QWORD *)v5 = v3;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DocumentUnderstanding_ClientInterface_TopicResult(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = (uint64_t *)((char *)v7 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    v16 = type metadata accessor for DocumentUnderstanding_TopicSetIdentifier();
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_TopicSetIdentifier?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      *v14 = *v15;
      *((_BYTE *)v14 + 8) = *((_BYTE *)v15 + 8);
      v14[2] = v15[2];
      v12((char *)v14 + *(int *)(v16 + 24), (char *)v15 + *(int *)(v16 + 24), v11);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    v19 = a3[7];
    v20 = a3[8];
    v21 = (uint64_t *)((char *)v7 + v19);
    v22 = (uint64_t *)((char *)a2 + v19);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    v24 = (char *)v7 + v20;
    v25 = (char *)a2 + v20;
    v24[8] = v25[8];
    *(_QWORD *)v24 = *(_QWORD *)v25;
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t destroy for DocumentUnderstanding_ClientInterface_TopicResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v7 = a1 + *(int *)(a2 + 24);
  v8 = type metadata accessor for DocumentUnderstanding_TopicSetIdentifier();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8))
    v6(v7 + *(int *)(v8 + 24), v5);
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for DocumentUnderstanding_ClientInterface_TopicResult(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  char *v23;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  v14 = type metadata accessor for DocumentUnderstanding_TopicSetIdentifier();
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_TopicSetIdentifier?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    *((_BYTE *)v12 + 8) = *((_BYTE *)v13 + 8);
    v12[2] = v13[2];
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v17 = a3[7];
  v18 = a3[8];
  v19 = (_QWORD *)((char *)a1 + v17);
  v20 = (_QWORD *)((char *)a2 + v17);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  v22 = (char *)a1 + v18;
  v23 = (char *)a2 + v18;
  v22[8] = v23[8];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for DocumentUnderstanding_ClientInterface_TopicResult(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v30 = *(_QWORD *)(v9 - 8);
  v10 = *(void (**)(char *, char *, uint64_t))(v30 + 24);
  v10(v7, v8, v9);
  v31 = a3;
  v11 = *(int *)(a3 + 24);
  v12 = (uint64_t)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for DocumentUnderstanding_TopicSetIdentifier();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16((uint64_t)v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      v29 = *(_QWORD *)v13;
      *(_BYTE *)(v12 + 8) = v13[8];
      *(_QWORD *)v12 = v29;
      *(_QWORD *)(v12 + 16) = *((_QWORD *)v13 + 2);
      v10((char *)(v12 + *(int *)(v14 + 24)), &v13[*(int *)(v14 + 24)], v9);
      goto LABEL_7;
    }
    outlined destroy of DocumentUnderstanding_TopicSetIdentifier(v12);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_TopicSetIdentifier?);
    memcpy((void *)v12, v13, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  v19 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = v13[8];
  *(_QWORD *)v12 = v19;
  *(_QWORD *)(v12 + 16) = *((_QWORD *)v13 + 2);
  (*(void (**)(uint64_t, char *, uint64_t))(v30 + 16))(v12 + *(int *)(v14 + 24), &v13[*(int *)(v14 + 24)], v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
LABEL_7:
  v21 = *(int *)(v31 + 28);
  v22 = (_QWORD *)((char *)a1 + v21);
  v23 = (_QWORD *)((char *)a2 + v21);
  *v22 = *v23;
  v22[1] = v23[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v24 = *(int *)(v31 + 32);
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  v27 = *(_QWORD *)v26;
  v25[8] = v26[8];
  *(_QWORD *)v25 = v27;
  return a1;
}

_QWORD *initializeWithTake for DocumentUnderstanding_ClientInterface_TopicResult(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  v14 = type metadata accessor for DocumentUnderstanding_TopicSetIdentifier();
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_TopicSetIdentifier?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    *((_BYTE *)v12 + 8) = *((_BYTE *)v13 + 8);
    v12[2] = v13[2];
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v17 = a3[8];
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v18[8] = v19[8];
  return a1;
}

_QWORD *assignWithTake for DocumentUnderstanding_ClientInterface_TopicResult(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v29;
  uint64_t v30;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v29 = *(_QWORD *)(v9 - 8);
  v10 = *(void (**)(char *, char *, uint64_t))(v29 + 40);
  v10(v7, v8, v9);
  v30 = a3;
  v11 = *(int *)(a3 + 24);
  v12 = (uint64_t)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for DocumentUnderstanding_TopicSetIdentifier();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16((uint64_t)v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      *(_QWORD *)v12 = *(_QWORD *)v13;
      *(_BYTE *)(v12 + 8) = v13[8];
      *(_QWORD *)(v12 + 16) = *((_QWORD *)v13 + 2);
      v10((char *)(v12 + *(int *)(v14 + 24)), &v13[*(int *)(v14 + 24)], v9);
      goto LABEL_7;
    }
    outlined destroy of DocumentUnderstanding_TopicSetIdentifier(v12);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_TopicSetIdentifier?);
    memcpy((void *)v12, v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = v13[8];
  *(_QWORD *)(v12 + 16) = *((_QWORD *)v13 + 2);
  (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))(v12 + *(int *)(v14 + 24), &v13[*(int *)(v14 + 24)], v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
LABEL_7:
  v20 = *(int *)(v30 + 28);
  v21 = (_QWORD *)((char *)a1 + v20);
  v22 = (_QWORD *)((char *)a2 + v20);
  v24 = *v22;
  v23 = v22[1];
  *v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  v25 = *(int *)(v30 + 32);
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  *(_QWORD *)v26 = *(_QWORD *)v27;
  v26[8] = v27[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for DocumentUnderstanding_ClientInterface_TopicResult()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_22833AE24(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_TopicSetIdentifier?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for DocumentUnderstanding_ClientInterface_TopicResult()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_22833AED4(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_TopicSetIdentifier?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void type metadata completion function for DocumentUnderstanding_ClientInterface_TopicResult()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for DocumentUnderstanding_TopicSetIdentifier?();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void type metadata accessor for DocumentUnderstanding_TopicSetIdentifier?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for DocumentUnderstanding_TopicSetIdentifier?)
  {
    type metadata accessor for DocumentUnderstanding_TopicSetIdentifier();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DocumentUnderstanding_TopicSetIdentifier?);
  }
}

uint64_t static PoemStatsDatabaseQueries.insertRecord(db:record:)(_QWORD *a1, void *a2)
{
  uint64_t v4;
  void (*v5)(unint64_t, unint64_t, void (*)(void *), uint64_t, _QWORD, _QWORD);
  id v6;

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a2;
  v5 = *(void (**)(unint64_t, unint64_t, void (*)(void *), uint64_t, _QWORD, _QWORD))((*MEMORY[0x24BEE4EA0] & *a1) + 0x108);
  v6 = a2;
  v5(0xD00000000000009FLL, 0x80000002284DC260, partial apply for closure #1 in static PoemStatsDatabaseQueries.insertRecord(db:record:), v4, 0, 0);
  return swift_release();
}

void closure #1 in static PoemStatsDatabaseQueries.insertRecord(db:record:)(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  Class isa;
  Class v9;

  v4 = (void *)MEMORY[0x22E2AF8EC](*(_QWORD *)(a2 + OBJC_IVAR____TtC21DocumentUnderstanding15PoemStatsRecord_cooccurrenceId), *(_QWORD *)(a2 + OBJC_IVAR____TtC21DocumentUnderstanding15PoemStatsRecord_cooccurrenceId + 8));
  objc_msgSend(a1, sel_bindNamedParam_toNSString_, ":cooccurrence_id", v4);

  v5 = (void *)MEMORY[0x22E2AF8EC](*(_QWORD *)(a2 + OBJC_IVAR____TtC21DocumentUnderstanding15PoemStatsRecord_entityName), *(_QWORD *)(a2 + OBJC_IVAR____TtC21DocumentUnderstanding15PoemStatsRecord_entityName + 8));
  objc_msgSend(a1, sel_bindNamedParam_toNSString_, ":name", v5);

  v6 = (void *)MEMORY[0x22E2AF8EC](*(_QWORD *)(a2 + OBJC_IVAR____TtC21DocumentUnderstanding15PoemStatsRecord_entityId), *(_QWORD *)(a2 + OBJC_IVAR____TtC21DocumentUnderstanding15PoemStatsRecord_entityId + 8));
  objc_msgSend(a1, sel_bindNamedParam_toNSString_, ":eid", v6);

  v7 = (void *)MEMORY[0x22E2AF8EC](*(_QWORD *)(a2 + OBJC_IVAR____TtC21DocumentUnderstanding15PoemStatsRecord_photoId), *(_QWORD *)(a2 + OBJC_IVAR____TtC21DocumentUnderstanding15PoemStatsRecord_photoId + 8));
  objc_msgSend(a1, sel_bindNamedParam_toNSString_, ":pid", v7);

  if (*(_QWORD *)(a2 + OBJC_IVAR____TtC21DocumentUnderstanding15PoemStatsRecord_associatedFeatureData + 8) >> 60 == 15)
    isa = 0;
  else
    isa = Data._bridgeToObjectiveC()().super.isa;
  v9 = isa;
  objc_msgSend(a1, sel_bindNamedParam_toNSData_, ":associated_data");

}

uint64_t sub_22833B26C()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in static PoemStatsDatabaseQueries.insertRecord(db:record:)(void *a1)
{
  uint64_t v1;

  closure #1 in static PoemStatsDatabaseQueries.insertRecord(db:record:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t static PoemStatsDatabaseQueries.clearAllRecords(db:)(_QWORD *a1)
{
  return (*(uint64_t (**)(unint64_t, unint64_t, _QWORD, _QWORD, _QWORD, _QWORD))((*MEMORY[0x24BEE4EA0] & *a1) + 0x108))(0xD00000000000001ALL, 0x80000002284DC300, 0, 0, 0, 0);
}

uint64_t static PoemStatsDatabaseQueries.fetchAllRecords(db:)(_QWORD *a1)
{
  uint64_t v2;
  void (*v3)(unint64_t, unint64_t, _QWORD, _QWORD, uint64_t (*)(void *), uint64_t);
  uint64_t v4;

  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = MEMORY[0x24BEE4AF8];
  v3 = *(void (**)(unint64_t, unint64_t, _QWORD, _QWORD, uint64_t (*)(void *), uint64_t))((*MEMORY[0x24BEE4EA0] & *a1) + 0x108);
  swift_retain();
  v3(0xD000000000000038, 0x80000002284DC320, 0, 0, partial apply for closure #1 in static PoemStatsDatabaseQueries.fetchAllRecords(db:), v2);
  swift_release();
  swift_beginAccess();
  v4 = *(_QWORD *)(v2 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  return v4;
}

uint64_t sub_22833B3CC()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t closure #1 in static PoemStatsDatabaseQueries.fetchAllRecords(db:)(void *a1, uint64_t a2)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  _QWORD **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;

  v4 = objc_msgSend(a1, sel_getNSStringForColumn_, 0);
  if (v4)
  {
    v5 = v4;
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v7;

    v9 = objc_msgSend(a1, sel_getNSStringForColumn_, 1);
    if (v9)
    {
      v10 = v9;
      v11 = (_QWORD **)(a2 + 16);
      v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v14 = v13;

      swift_beginAccess();
      v15 = *v11;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v11 = v15;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
        *v11 = v15;
      }
      v18 = v15[2];
      v17 = v15[3];
      if (v18 >= v17 >> 1)
      {
        v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, v15);
        *v11 = v15;
      }
      v15[2] = v18 + 1;
      v19 = &v15[4 * v18];
      v19[4] = v6;
      v19[5] = v8;
      v19[6] = v12;
      v19[7] = v14;
      swift_endAccess();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  return *MEMORY[0x24BE7A6A8];
}

uint64_t partial apply for closure #1 in static PoemStatsDatabaseQueries.fetchAllRecords(db:)(void *a1)
{
  uint64_t v1;

  return closure #1 in static PoemStatsDatabaseQueries.fetchAllRecords(db:)(a1, v1);
}

uint64_t static PoemStatsDatabaseQueries.countAllRecords(db:)(_QWORD *a1)
{
  uint64_t v2;
  void (*v3)(unint64_t, unint64_t, _QWORD, _QWORD, uint64_t (*)(void *), uint64_t);
  uint64_t v4;

  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = 0;
  v3 = *(void (**)(unint64_t, unint64_t, _QWORD, _QWORD, uint64_t (*)(void *), uint64_t))((*MEMORY[0x24BEE4EA0] & *a1) + 0x108);
  swift_retain();
  v3(0xD000000000000023, 0x80000002284DC360, 0, 0, partial apply for closure #1 in static PoemStatsDatabaseQueries.countAllRecords(db:), v2);
  swift_release();
  swift_beginAccess();
  v4 = *(_QWORD *)(v2 + 16);
  swift_release();
  return v4;
}

uint64_t sub_22833B610()
{
  return swift_deallocObject();
}

uint64_t closure #1 in static PoemStatsDatabaseQueries.countAllRecords(db:)(void *a1, uint64_t a2)
{
  id v3;

  v3 = objc_msgSend(a1, sel_getIntegerForColumn_, 0);
  swift_beginAccess();
  *(_QWORD *)(a2 + 16) = v3;
  return *MEMORY[0x24BE7A6B0];
}

uint64_t partial apply for closure #1 in static PoemStatsDatabaseQueries.countAllRecords(db:)(void *a1)
{
  uint64_t v1;
  id v2;

  v2 = objc_msgSend(a1, sel_getIntegerForColumn_, 0);
  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = v2;
  return *MEMORY[0x24BE7A6B0];
}

uint64_t static PoemStatsDatabaseQueries.fetchRecordForCooccurrenceId(db:queryCooccurrenceId:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  void (*v10)(unint64_t, unint64_t, void (*)(void *), uint64_t, uint64_t (*)(void *), uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;

  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a2;
  *(_QWORD *)(v9 + 24) = a3;
  v10 = *(void (**)(unint64_t, unint64_t, void (*)(void *), uint64_t, uint64_t (*)(void *), uint64_t))((*MEMORY[0x24BEE4EA0] & *a1) + 0x108);
  swift_bridgeObjectRetain();
  swift_retain();
  v10(0xD000000000000109, 0x80000002284DC390, partial apply for closure #1 in static PoemStatsDatabaseQueries.fetchRecordForCooccurrenceId(db:queryCooccurrenceId:), v9, partial apply for closure #2 in static PoemStatsDatabaseQueries.fetchRecordForCooccurrenceId(db:queryCooccurrenceId:), v8);
  swift_release();
  swift_release();
  swift_beginAccess();
  v11 = *(_QWORD *)(v8 + 16);
  v12 = *(_QWORD *)(v8 + 24);
  v13 = *(_QWORD *)(v8 + 32);
  v14 = *(_QWORD *)(v8 + 40);
  v15 = *(_QWORD *)(v8 + 48);
  v16 = *(_QWORD *)(v8 + 56);
  v17 = *(_QWORD *)(v8 + 64);
  v18 = *(_QWORD *)(v8 + 72);
  outlined copy of (cooccurrenceId: String, entityId: String, entityName: String, associatedFeatureData: Data?)?(v11, v12, v13, v14, v15, v16, v17, v18);
  result = swift_release();
  *a4 = v11;
  a4[1] = v12;
  a4[2] = v13;
  a4[3] = v14;
  a4[4] = v15;
  a4[5] = v16;
  a4[6] = v17;
  a4[7] = v18;
  return result;
}

void closure #1 in static PoemStatsDatabaseQueries.fetchRecordForCooccurrenceId(db:queryCooccurrenceId:)(void *a1, uint64_t a2, uint64_t a3)
{
  closure #1 in static PoemStatsDatabaseQueries.fetchRecordForCooccurrenceId(db:queryCooccurrenceId:)(a1, a2, a3, (uint64_t)":query_id");
}

uint64_t sub_22833B868()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #1 in static PoemStatsDatabaseQueries.fetchRecordForCooccurrenceId(db:queryCooccurrenceId:)(void *a1)
{
  partial apply for closure #1 in static PoemStatsDatabaseQueries.fetchRecordForCooccurrenceId(db:queryCooccurrenceId:)(a1, (uint64_t)":query_id");
}

uint64_t partial apply for closure #2 in static PoemStatsDatabaseQueries.fetchRecordForCooccurrenceId(db:queryCooccurrenceId:)(void *a1)
{
  _QWORD *v1;

  return closure #2 in static PoemStatsDatabaseQueries.fetchRecordForCooccurrenceId(db:queryCooccurrenceId:)(a1, v1) & 1;
}

uint64_t static PoemStatsDatabaseQueries.fetchRecordForEntityName(db:queryEntityName:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  void (*v10)(unint64_t, unint64_t, void (*)(void *), uint64_t, uint64_t (*)(void *), uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;

  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a2;
  *(_QWORD *)(v9 + 24) = a3;
  v10 = *(void (**)(unint64_t, unint64_t, void (*)(void *), uint64_t, uint64_t (*)(void *), uint64_t))((*MEMORY[0x24BEE4EA0] & *a1) + 0x108);
  swift_bridgeObjectRetain();
  swift_retain();
  v10(0xD000000000000100, 0x80000002284DC4A0, partial apply for closure #1 in static PoemStatsDatabaseQueries.fetchRecordForEntityName(db:queryEntityName:), v9, partial apply for closure #2 in static PoemStatsDatabaseQueries.fetchRecordForCooccurrenceId(db:queryCooccurrenceId:), v8);
  swift_release();
  swift_release();
  swift_beginAccess();
  v11 = *(_QWORD *)(v8 + 16);
  v12 = *(_QWORD *)(v8 + 24);
  v13 = *(_QWORD *)(v8 + 32);
  v14 = *(_QWORD *)(v8 + 40);
  v15 = *(_QWORD *)(v8 + 48);
  v16 = *(_QWORD *)(v8 + 56);
  v17 = *(_QWORD *)(v8 + 64);
  v18 = *(_QWORD *)(v8 + 72);
  outlined copy of (cooccurrenceId: String, entityId: String, entityName: String, associatedFeatureData: Data?)?(v11, v12, v13, v14, v15, v16, v17, v18);
  result = swift_release();
  *a4 = v11;
  a4[1] = v12;
  a4[2] = v13;
  a4[3] = v14;
  a4[4] = v15;
  a4[5] = v16;
  a4[6] = v17;
  a4[7] = v18;
  return result;
}

void closure #1 in static PoemStatsDatabaseQueries.fetchRecordForEntityName(db:queryEntityName:)(void *a1, uint64_t a2, uint64_t a3)
{
  closure #1 in static PoemStatsDatabaseQueries.fetchRecordForCooccurrenceId(db:queryCooccurrenceId:)(a1, a2, a3, (uint64_t)":query_name");
}

void partial apply for closure #1 in static PoemStatsDatabaseQueries.fetchRecordForEntityName(db:queryEntityName:)(void *a1)
{
  partial apply for closure #1 in static PoemStatsDatabaseQueries.fetchRecordForCooccurrenceId(db:queryCooccurrenceId:)(a1, (uint64_t)":query_name");
}

uint64_t closure #2 in static PoemStatsDatabaseQueries.fetchRecordForCooccurrenceId(db:queryCooccurrenceId:)(void *a1, _QWORD *a2)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v4 = objc_msgSend(a1, sel_getNSStringForColumn_, 0);
  if (!v4)
    return *MEMORY[0x24BE7A6A8];
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v8 = v7;

  v9 = objc_msgSend(a1, sel_getNSStringForColumn_, 1);
  if (!v9)
  {
LABEL_7:
    swift_bridgeObjectRelease();
    return *MEMORY[0x24BE7A6A8];
  }
  v10 = v9;
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v13 = v12;

  v14 = objc_msgSend(a1, sel_getNSStringForColumn_, 2);
  if (!v14)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  v15 = v14;
  v37 = v6;
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v33 = v17;
  v34 = v16;

  v18 = objc_msgSend(a1, sel_getNSDataForColumn_, 3);
  v38 = v8;
  v35 = v11;
  v36 = v13;
  if (v18)
  {
    v19 = v18;
    v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v22 = v21;

  }
  else
  {
    v20 = 0;
    v22 = 0xF000000000000000;
  }
  swift_beginAccess();
  v24 = a2[2];
  v25 = a2[3];
  v26 = a2[4];
  v27 = a2[5];
  v28 = a2[6];
  v29 = a2[7];
  v30 = a2[8];
  v32 = a2[9];
  a2[2] = v37;
  a2[3] = v38;
  a2[4] = v35;
  a2[5] = v36;
  a2[6] = v34;
  a2[7] = v33;
  a2[8] = v20;
  a2[9] = v22;
  outlined copy of Data?(v20, v22);
  outlined consume of (cooccurrenceId: String, entityName: String, photoId: String, associatedFeatureData: Data?)?(v24, v25, v26, v27, v28, v29, v30, v32);
  v23 = *MEMORY[0x24BE7A6B0];
  outlined consume of Data?(v20, v22);
  return v23;
}

uint64_t static PoemStatsDatabaseQueries.fetchRecordForPhotoId(db:queryPhotoId:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  void (*v10)(unint64_t, unint64_t, void (*)(void *), uint64_t, uint64_t (*)(void *), uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t result;

  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a2;
  *(_QWORD *)(v9 + 24) = a3;
  v10 = *(void (**)(unint64_t, unint64_t, void (*)(void *), uint64_t, uint64_t (*)(void *), uint64_t))((*MEMORY[0x24BEE4EA0] & *a1) + 0x108);
  swift_bridgeObjectRetain();
  swift_retain();
  v10(0xD0000000000000E4, 0x80000002284DC5B0, partial apply for closure #1 in static PoemStatsDatabaseQueries.fetchRecordForPhotoId(db:queryPhotoId:), v9, partial apply for closure #2 in static PoemStatsDatabaseQueries.fetchRecordForPhotoId(db:queryPhotoId:), v8);
  swift_release();
  swift_release();
  swift_beginAccess();
  v11 = *(_QWORD *)(v8 + 16);
  v12 = *(_QWORD *)(v8 + 24);
  v13 = *(_QWORD *)(v8 + 32);
  v14 = *(_QWORD *)(v8 + 40);
  v15 = *(_QWORD *)(v8 + 48);
  v16 = *(_QWORD *)(v8 + 56);
  outlined copy of (cooccurrenceId: String, photoId: String, associatedFeatureData: Data?)?(v11, v12, v13, v14, v15, v16);
  result = swift_release();
  *a4 = v11;
  a4[1] = v12;
  a4[2] = v13;
  a4[3] = v14;
  a4[4] = v15;
  a4[5] = v16;
  return result;
}

uint64_t sub_22833BD6C()
{
  _QWORD *v0;
  unint64_t v1;

  if (v0[3])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v1 = v0[7];
    if (v1 >> 60 != 15)
      outlined consume of Data._Representation(v0[6], v1);
  }
  return swift_deallocObject();
}

void closure #1 in static PoemStatsDatabaseQueries.fetchRecordForPhotoId(db:queryPhotoId:)(void *a1, uint64_t a2, uint64_t a3)
{
  closure #1 in static PoemStatsDatabaseQueries.fetchRecordForCooccurrenceId(db:queryCooccurrenceId:)(a1, a2, a3, (uint64_t)":query_pid");
}

void closure #1 in static PoemStatsDatabaseQueries.fetchRecordForCooccurrenceId(db:queryCooccurrenceId:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6;

  v6 = (id)MEMORY[0x22E2AF8EC](a2, a3);
  objc_msgSend(a1, sel_bindNamedParam_toNSString_, a4, v6);

}

void partial apply for closure #1 in static PoemStatsDatabaseQueries.fetchRecordForPhotoId(db:queryPhotoId:)(void *a1)
{
  partial apply for closure #1 in static PoemStatsDatabaseQueries.fetchRecordForCooccurrenceId(db:queryCooccurrenceId:)(a1, (uint64_t)":query_pid");
}

void partial apply for closure #1 in static PoemStatsDatabaseQueries.fetchRecordForCooccurrenceId(db:queryCooccurrenceId:)(void *a1, uint64_t a2)
{
  uint64_t v2;
  id v5;

  v5 = (id)MEMORY[0x22E2AF8EC](*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
  objc_msgSend(a1, sel_bindNamedParam_toNSString_, a2, v5);

}

uint64_t closure #2 in static PoemStatsDatabaseQueries.fetchRecordForPhotoId(db:queryPhotoId:)(void *a1, _QWORD *a2)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = objc_msgSend(a1, sel_getNSStringForColumn_, 0);
  if (!v4)
    return *MEMORY[0x24BE7A6A8];
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v8 = v7;

  v9 = objc_msgSend(a1, sel_getNSStringForColumn_, 1);
  if (!v9)
  {
    swift_bridgeObjectRelease();
    return *MEMORY[0x24BE7A6A8];
  }
  v10 = v9;
  v29 = v8;
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v27 = v12;
  v28 = v11;

  v13 = objc_msgSend(a1, sel_getNSDataForColumn_, 2);
  if (v13)
  {
    v14 = v13;
    v15 = v6;
    v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v18 = v17;

  }
  else
  {
    v15 = v6;
    v16 = 0;
    v18 = 0xF000000000000000;
  }
  swift_beginAccess();
  v20 = a2[2];
  v21 = a2[3];
  v23 = a2[4];
  v22 = a2[5];
  v24 = a2[6];
  v25 = a2[7];
  a2[2] = v15;
  a2[3] = v29;
  a2[4] = v28;
  a2[5] = v27;
  a2[6] = v16;
  a2[7] = v18;
  outlined copy of Data?(v16, v18);
  outlined consume of (cooccurrenceId: String, photoId: String, associatedFeatureData: Data?)?(v20, v21, v23, v22, v24, v25);
  v19 = *MEMORY[0x24BE7A6B0];
  outlined consume of Data?(v16, v18);
  return v19;
}

uint64_t partial apply for closure #2 in static PoemStatsDatabaseQueries.fetchRecordForPhotoId(db:queryPhotoId:)(void *a1)
{
  _QWORD *v1;

  return closure #2 in static PoemStatsDatabaseQueries.fetchRecordForPhotoId(db:queryPhotoId:)(a1, v1);
}

uint64_t outlined copy of (cooccurrenceId: String, photoId: String, associatedFeatureData: Data?)?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return outlined copy of Data?(a5, a6);
  }
  return result;
}

uint64_t static PoemStatsDatabaseQueries.fetchRecordForEntityNameAndPhotoId(db:queryEntityName:queryPhotoId:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  _QWORD *v13;
  void (*v14)(unint64_t, unint64_t, void (*)(void *), _QWORD *, uint64_t (*)(void *), uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t result;

  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 32) = 0u;
  *(_OWORD *)(v12 + 48) = 0u;
  *(_OWORD *)(v12 + 64) = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = a4;
  v13[3] = a5;
  v13[4] = a2;
  v13[5] = a3;
  v14 = *(void (**)(unint64_t, unint64_t, void (*)(void *), _QWORD *, uint64_t (*)(void *), uint64_t))((*MEMORY[0x24BEE4EA0] & *a1) + 0x108);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  v14(0xD000000000000116, 0x80000002284DC6A0, partial apply for closure #1 in static PoemStatsDatabaseQueries.fetchRecordForEntityNameAndPhotoId(db:queryEntityName:queryPhotoId:), v13, partial apply for closure #2 in static PoemStatsDatabaseQueries.fetchRecordForEntityNameAndPhotoId(db:queryEntityName:queryPhotoId:), v12);
  swift_release();
  swift_release();
  swift_beginAccess();
  v15 = *(_QWORD *)(v12 + 16);
  v16 = *(_QWORD *)(v12 + 24);
  v17 = *(_QWORD *)(v12 + 32);
  v18 = *(_QWORD *)(v12 + 40);
  v19 = *(_QWORD *)(v12 + 48);
  v20 = *(_QWORD *)(v12 + 56);
  v21 = *(_QWORD *)(v12 + 64);
  v22 = *(_QWORD *)(v12 + 72);
  outlined copy of (cooccurrenceId: String, entityId: String, entityName: String, associatedFeatureData: Data?)?(v15, v16, v17, v18, v19, v20, v21, v22);
  result = swift_release();
  *a6 = v15;
  a6[1] = v16;
  a6[2] = v17;
  a6[3] = v18;
  a6[4] = v19;
  a6[5] = v20;
  a6[6] = v21;
  a6[7] = v22;
  return result;
}

uint64_t objectdestroy_8Tm()
{
  _QWORD *v0;
  unint64_t v1;

  if (v0[3])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v1 = v0[9];
    if (v1 >> 60 != 15)
      outlined consume of Data._Representation(v0[8], v1);
  }
  return swift_deallocObject();
}

void closure #1 in static PoemStatsDatabaseQueries.fetchRecordForEntityNameAndPhotoId(db:queryEntityName:queryPhotoId:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v8;
  id v9;

  v8 = (void *)MEMORY[0x22E2AF8EC](a2, a3);
  objc_msgSend(a1, sel_bindNamedParam_toNSString_, ":query_pid", v8);

  v9 = (id)MEMORY[0x22E2AF8EC](a4, a5);
  objc_msgSend(a1, sel_bindNamedParam_toNSString_, ":query_name", v9);

}

uint64_t sub_22833C2BC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #1 in static PoemStatsDatabaseQueries.fetchRecordForEntityNameAndPhotoId(db:queryEntityName:queryPhotoId:)(void *a1)
{
  uint64_t *v1;

  closure #1 in static PoemStatsDatabaseQueries.fetchRecordForEntityNameAndPhotoId(db:queryEntityName:queryPhotoId:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t closure #2 in static PoemStatsDatabaseQueries.fetchRecordForEntityNameAndPhotoId(db:queryEntityName:queryPhotoId:)(void *a1, _QWORD *a2)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v4 = objc_msgSend(a1, sel_getNSStringForColumn_, 0);
  if (!v4)
    return *MEMORY[0x24BE7A6A8];
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v8 = v7;

  v9 = objc_msgSend(a1, sel_getNSStringForColumn_, 1);
  if (!v9)
  {
LABEL_7:
    swift_bridgeObjectRelease();
    return *MEMORY[0x24BE7A6A8];
  }
  v10 = v9;
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v13 = v12;

  v14 = objc_msgSend(a1, sel_getNSStringForColumn_, 2);
  if (!v14)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  v15 = v14;
  v37 = v6;
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v33 = v17;
  v34 = v16;

  v18 = objc_msgSend(a1, sel_getNSDataForColumn_, 3);
  v38 = v8;
  v35 = v11;
  v36 = v13;
  if (v18)
  {
    v19 = v18;
    v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v22 = v21;

  }
  else
  {
    v20 = 0;
    v22 = 0xF000000000000000;
  }
  swift_beginAccess();
  v24 = a2[2];
  v25 = a2[3];
  v26 = a2[4];
  v27 = a2[5];
  v28 = a2[6];
  v29 = a2[7];
  v30 = a2[8];
  v32 = a2[9];
  a2[2] = v37;
  a2[3] = v38;
  a2[4] = v34;
  a2[5] = v33;
  a2[6] = v35;
  a2[7] = v36;
  a2[8] = v20;
  a2[9] = v22;
  outlined copy of Data?(v20, v22);
  outlined consume of (cooccurrenceId: String, entityName: String, photoId: String, associatedFeatureData: Data?)?(v24, v25, v26, v27, v28, v29, v30, v32);
  v23 = *MEMORY[0x24BE7A6B0];
  outlined consume of Data?(v20, v22);
  return v23;
}

uint64_t partial apply for closure #2 in static PoemStatsDatabaseQueries.fetchRecordForEntityNameAndPhotoId(db:queryEntityName:queryPhotoId:)(void *a1)
{
  _QWORD *v1;

  return closure #2 in static PoemStatsDatabaseQueries.fetchRecordForEntityNameAndPhotoId(db:queryEntityName:queryPhotoId:)(a1, v1);
}

uint64_t outlined copy of (cooccurrenceId: String, entityId: String, entityName: String, associatedFeatureData: Data?)?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return outlined copy of Data?(a7, a8);
  }
  return result;
}

ValueMetadata *type metadata accessor for PoemStatsDatabaseQueries()
{
  return &type metadata for PoemStatsDatabaseQueries;
}

uint64_t outlined consume of (cooccurrenceId: String, photoId: String, associatedFeatureData: Data?)?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return outlined consume of Data?(a5, a6);
  }
  return result;
}

uint64_t outlined consume of (cooccurrenceId: String, entityName: String, photoId: String, associatedFeatureData: Data?)?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return outlined consume of Data?(a7, a8);
  }
  return result;
}

uint64_t DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute.attributeNamespace.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute()
                          + 20));
  if (v1[1])
    v2 = *v1;
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute()
{
  uint64_t result;

  result = type metadata singleton initialization cache for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute;
  if (!type metadata singleton initialization cache for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t key path getter for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute.attributeNamespace : DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = (uint64_t *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute()
                          + 20));
  v4 = v3[1];
  if (v4)
  {
    v5 = *v3;
    v6 = v4;
  }
  else
  {
    v5 = 0;
    v6 = 0xE000000000000000;
  }
  *a2 = v5;
  a2[1] = v6;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute.attributeNamespace : DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;

  v3 = *a1;
  v2 = a1[1];
  v4 = (_QWORD *)(a2
                + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute()
                         + 20));
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *v4 = v3;
  v4[1] = v2;
  return result;
}

uint64_t DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute.attributeNamespace.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2
                + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute()
                         + 20));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute.attributeNamespace.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute()
              + 20);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_ClientInterface_StructuredEntityLabel.labelName.modify;
}

BOOL DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute.hasAttributeNamespace.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0
                   + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute()
                            + 20)
                   + 8) != 0;
}

Swift::Void __swiftcall DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute.clearAttributeNamespace()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(v0
                + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute()
                         + 20));
  swift_bridgeObjectRelease();
  *v1 = 0;
  v1[1] = 0;
}

uint64_t DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute.attributeType.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute()
                          + 24));
  if (v1[1])
    v2 = *v1;
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute.attributeType : DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = (uint64_t *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute()
                          + 24));
  v4 = v3[1];
  if (v4)
  {
    v5 = *v3;
    v6 = v4;
  }
  else
  {
    v5 = 0;
    v6 = 0xE000000000000000;
  }
  *a2 = v5;
  a2[1] = v6;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute.attributeType : DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;

  v3 = *a1;
  v2 = a1[1];
  v4 = (_QWORD *)(a2
                + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute()
                         + 24));
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *v4 = v3;
  v4[1] = v2;
  return result;
}

uint64_t DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute.attributeType.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2
                + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute()
                         + 24));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute.attributeType.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute()
              + 24);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_ClientInterface_StructuredEntityLabel.labelName.modify;
}

BOOL DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute.hasAttributeType.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0
                   + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute()
                            + 24)
                   + 8) != 0;
}

Swift::Void __swiftcall DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute.clearAttributeType()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(v0
                + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute()
                         + 24));
  swift_bridgeObjectRelease();
  *v1 = 0;
  v1[1] = 0;
}

uint64_t DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute.attributeID.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute()
                          + 28));
  if (v1[1])
    v2 = *v1;
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute.attributeID : DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = (uint64_t *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute()
                          + 28));
  v4 = v3[1];
  if (v4)
  {
    v5 = *v3;
    v6 = v4;
  }
  else
  {
    v5 = 0;
    v6 = 0xE000000000000000;
  }
  *a2 = v5;
  a2[1] = v6;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute.attributeID : DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;

  v3 = *a1;
  v2 = a1[1];
  v4 = (_QWORD *)(a2
                + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute()
                         + 28));
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *v4 = v3;
  v4[1] = v2;
  return result;
}

uint64_t DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute.attributeID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2
                + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute()
                         + 28));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute.attributeID.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute()
              + 28);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_ClientInterface_StructuredEntityLabel.labelName.modify;
}

BOOL DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute.hasAttributeID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0
                   + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute()
                            + 28)
                   + 8) != 0;
}

Swift::Void __swiftcall DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute.clearAttributeID()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(v0
                + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute()
                         + 28));
  swift_bridgeObjectRelease();
  *v1 = 0;
  v1[1] = 0;
}

uint64_t DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute.displayName.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute()
                          + 32));
  if (v1[1])
    v2 = *v1;
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute.displayName : DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = (uint64_t *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute()
                          + 32));
  v4 = v3[1];
  if (v4)
  {
    v5 = *v3;
    v6 = v4;
  }
  else
  {
    v5 = 0;
    v6 = 0xE000000000000000;
  }
  *a2 = v5;
  a2[1] = v6;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute.displayName : DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;

  v3 = *a1;
  v2 = a1[1];
  v4 = (_QWORD *)(a2
                + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute()
                         + 32));
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *v4 = v3;
  v4[1] = v2;
  return result;
}

uint64_t DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute.displayName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2
                + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute()
                         + 32));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute.displayName.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute()
              + 32);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_ClientInterface_StructuredEntityLabel.labelName.modify;
}

BOOL DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute.hasDisplayName.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0
                   + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute()
                            + 32)
                   + 8) != 0;
}

Swift::Void __swiftcall DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute.clearDisplayName()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(v0
                + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute()
                         + 32));
  swift_bridgeObjectRelease();
  *v1 = 0;
  v1[1] = 0;
}

uint64_t DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute.unknownFields.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

int *DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute.init()@<X0>(uint64_t a1@<X8>)
{
  int *result;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute();
  v3 = (_QWORD *)(a1 + result[5]);
  *v3 = 0;
  v3[1] = 0;
  v4 = (_QWORD *)(a1 + result[6]);
  *v4 = 0;
  v4[1] = 0;
  v5 = (_QWORD *)(a1 + result[7]);
  *v5 = 0;
  v5[1] = 0;
  v6 = (_QWORD *)(a1 + result[8]);
  *v6 = 0;
  v6[1] = 0;
  return result;
}

void *DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute.protoMessageName.unsafeMutableAddressor()
{
  return &static DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute.protoMessageName;
}

unint64_t static DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute.protoMessageName.getter()
{
  return 0xD00000000000004ELL;
}

uint64_t DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute._protobuf_nameMap);
}

uint64_t static DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v2 = type metadata accessor for _NameMap();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute._protobuf_nameMap);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
        case 4:
          type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute();
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  result = closure #1 in DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute.traverse<A>(visitor:)(v0);
  if (!v1)
  {
    closure #2 in DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute.traverse<A>(visitor:)(v0);
    closure #3 in DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute.traverse<A>(visitor:)(v0);
    closure #4 in DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute.traverse<A>(visitor:)(v0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute();
  if (*(_QWORD *)(a1 + *(int *)(result + 20) + 8))
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  return result;
}

uint64_t closure #2 in DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute();
  if (*(_QWORD *)(a1 + *(int *)(result + 24) + 8))
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  return result;
}

uint64_t closure #3 in DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute();
  if (*(_QWORD *)(a1 + *(int *)(result + 28) + 8))
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  return result;
}

uint64_t closure #4 in DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute();
  if (*(_QWORD *)(a1 + *(int *)(result + 32) + 8))
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  return result;
}

Swift::Int DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute.hashValue.getter()
{
  Hasher.init(_seed:)();
  type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute();
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute and conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Message.init() in conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  result = UnknownStorage.init()();
  v5 = a1[6];
  v6 = (_QWORD *)(a2 + a1[5]);
  *v6 = 0;
  v6[1] = 0;
  v7 = (_QWORD *)(a2 + v5);
  *v7 = 0;
  v7[1] = 0;
  v8 = a1[8];
  v9 = (_QWORD *)(a2 + a1[7]);
  *v9 = 0;
  v9[1] = 0;
  v10 = (_QWORD *)(a2 + v8);
  *v10 = 0;
  v10[1] = 0;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute()
{
  return 0xD00000000000004ELL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute()
{
  return DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute()
{
  return DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute and conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v2 = type metadata accessor for _NameMap();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute._protobuf_nameMap);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute and conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute and conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute);
  return Message.hash(into:)();
}

uint64_t specialized static DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  void (*v38)(char *, uint64_t, uint64_t);
  void (*v39)(char *, uint64_t);
  uint64_t v40;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v40 - v9;
  v11 = (int *)type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute();
  v12 = v11[5];
  v13 = (_QWORD *)(a1 + v12);
  v14 = *(_QWORD *)(a1 + v12 + 8);
  v15 = (_QWORD *)(a2 + v12);
  v16 = v15[1];
  if (!v14)
  {
    if (v16)
      goto LABEL_37;
    goto LABEL_10;
  }
  if (!v16)
    goto LABEL_37;
  v17 = *v13 == *v15 && v14 == v16;
  if (v17 || (v18 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
LABEL_10:
    v19 = v11[6];
    v20 = (_QWORD *)(a1 + v19);
    v21 = *(_QWORD *)(a1 + v19 + 8);
    v22 = (_QWORD *)(a2 + v19);
    v23 = v22[1];
    if (v21)
    {
      if (!v23)
        goto LABEL_37;
      if (*v20 != *v22 || v21 != v23)
      {
        v18 = 0;
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          return v18 & 1;
      }
    }
    else if (v23)
    {
      goto LABEL_37;
    }
    v25 = v11[7];
    v26 = (_QWORD *)(a1 + v25);
    v27 = *(_QWORD *)(a1 + v25 + 8);
    v28 = (_QWORD *)(a2 + v25);
    v29 = v28[1];
    if (v27)
    {
      if (!v29)
        goto LABEL_37;
      if (*v26 != *v28 || v27 != v29)
      {
        v18 = 0;
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          return v18 & 1;
      }
    }
    else if (v29)
    {
      goto LABEL_37;
    }
    v31 = v11[8];
    v32 = (_QWORD *)(a1 + v31);
    v33 = *(_QWORD *)(a1 + v31 + 8);
    v34 = (_QWORD *)(a2 + v31);
    v35 = v34[1];
    if (v33)
    {
      if (v35)
      {
        if (*v32 != *v34 || v33 != v35)
        {
          v18 = 0;
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            return v18 & 1;
        }
LABEL_39:
        v38 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
        v38(v10, a1, v4);
        v38(v8, a2, v4);
        lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        v18 = dispatch thunk of static Equatable.== infix(_:_:)();
        v39 = *(void (**)(char *, uint64_t))(v5 + 8);
        v39(v8, v4);
        v39(v10, v4);
        return v18 & 1;
      }
    }
    else if (!v35)
    {
      goto LABEL_39;
    }
LABEL_37:
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute and conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute);
}

uint64_t base witness table accessor for Message in DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute and conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute);
}

uint64_t base witness table accessor for Hashable in DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute and conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute);
}

uint64_t base witness table accessor for Equatable in DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute and conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute);
}

uint64_t *initializeBufferWithCopyOfBuffer for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (uint64_t *)((char *)a1 + v9);
    v14 = (uint64_t *)((char *)a2 + v9);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = a3[7];
    v17 = a3[8];
    v18 = (uint64_t *)((char *)a1 + v16);
    v19 = (uint64_t *)((char *)a2 + v16);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    v21 = (uint64_t *)((char *)a1 + v17);
    v22 = (uint64_t *)((char *)a2 + v17);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (_QWORD *)(a1 + v8);
  v13 = (_QWORD *)(a2 + v8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = a3[7];
  v16 = a3[8];
  v17 = (_QWORD *)(a1 + v15);
  v18 = (_QWORD *)(a2 + v15);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  v20 = (_QWORD *)(a1 + v16);
  v21 = (_QWORD *)(a2 + v16);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = a3[6];
  v11 = (_QWORD *)(a1 + v10);
  v12 = (_QWORD *)(a2 + v10);
  *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = a3[7];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  *v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v16 = a3[8];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (_QWORD *)(a2 + v16);
  *v17 = *v18;
  v17[1] = v18[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  return a1;
}

uint64_t assignWithTake for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  v12 = a3[6];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (uint64_t *)(a2 + v12);
  v16 = *v14;
  v15 = v14[1];
  *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  v17 = a3[7];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (uint64_t *)(a2 + v17);
  v21 = *v19;
  v20 = v19[1];
  *v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  v22 = a3[8];
  v23 = (_QWORD *)(a1 + v22);
  v24 = (uint64_t *)(a2 + v22);
  v26 = *v24;
  v25 = v24[1];
  *v23 = v26;
  v23[1] = v25;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_22833DEA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_22833DF3C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  return result;
}

uint64_t type metadata completion function for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t specialized Sequence.max(by:)(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = a1 + 64;
  v3 = *(_BYTE *)(a1 + 32);
  v4 = 1 << v3;
  v5 = -1;
  if (1 << v3 < 64)
    v5 = ~(-1 << (1 << v3));
  v6 = v5 & *(_QWORD *)(a1 + 64);
  if (v6)
  {
    v7 = 0;
    v8 = __clz(__rbit64(v6));
    v9 = (v6 - 1) & v6;
    v10 = (unint64_t)(v4 + 63) >> 6;
    while (2)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v8);
      v12 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v9)
      {
LABEL_6:
        v14 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v15 = v14 | (v7 << 6);
        goto LABEL_7;
      }
      while (1)
      {
        v17 = v7 + 1;
        if (__OFADD__(v7, 1))
          break;
        if (v17 >= v10)
          goto LABEL_27;
        v18 = *(_QWORD *)(v2 + 8 * v17);
        ++v7;
        if (!v18)
        {
          v7 = v17 + 1;
          if (v17 + 1 >= v10)
            goto LABEL_27;
          v18 = *(_QWORD *)(v2 + 8 * v7);
          if (!v18)
          {
            v7 = v17 + 2;
            if (v17 + 2 >= v10)
              goto LABEL_27;
            v18 = *(_QWORD *)(v2 + 8 * v7);
            if (!v18)
            {
              v7 = v17 + 3;
              if (v17 + 3 >= v10)
                goto LABEL_27;
              v18 = *(_QWORD *)(v2 + 8 * v7);
              if (!v18)
              {
                v19 = v17 + 4;
                if (v19 >= v10)
                {
LABEL_27:
                  swift_release();
                  return v11;
                }
                v18 = *(_QWORD *)(v2 + 8 * v19);
                if (!v18)
                {
                  while (1)
                  {
                    v7 = v19 + 1;
                    if (__OFADD__(v19, 1))
                      break;
                    if (v7 >= v10)
                      goto LABEL_27;
                    v18 = *(_QWORD *)(v2 + 8 * v7);
                    ++v19;
                    if (v18)
                      goto LABEL_24;
                  }
                  __break(1u);
LABEL_44:
                  v21 = 0;
                  v22 = 6;
                  if (v10 > 6)
                    v22 = v10;
                  v23 = v22 - 6;
                  while (v23 != v21)
                  {
                    v20 = *(_QWORD *)(a1 + 112 + 8 * v21++);
                    if (v20)
                    {
                      v7 = v21 + 5;
                      goto LABEL_31;
                    }
                  }
                  return 0;
                }
                v7 = v19;
              }
            }
          }
        }
LABEL_24:
        v13 = v18 - 1;
        v9 = (v18 - 1) & v18;
        v15 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_7:
        v16 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v15);
        if (v12 < v16)
        {
          v11 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v15);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v12 = v16;
          if (v9)
            goto LABEL_6;
        }
        else if (v9)
        {
          goto LABEL_6;
        }
      }
      __break(1u);
LABEL_38:
      if (v13 >= 9)
      {
        v20 = *(_QWORD *)(a1 + 96);
        if (v20)
        {
          v7 = 4;
        }
        else
        {
          v20 = *(_QWORD *)(a1 + 104);
          if (!v20)
            goto LABEL_44;
          v7 = 5;
        }
LABEL_31:
        v9 = (v20 - 1) & v20;
        v8 = __clz(__rbit64(v20)) + (v7 << 6);
        continue;
      }
      break;
    }
  }
  else
  {
    v13 = v3 & 0x3F;
    if (v13 > 6)
    {
      v10 = (unint64_t)(v4 + 63) >> 6;
      v20 = *(_QWORD *)(a1 + 72);
      if (v20)
      {
        v7 = 1;
        goto LABEL_31;
      }
      if (v13 >= 8)
      {
        v20 = *(_QWORD *)(a1 + 80);
        if (v20)
        {
          v7 = 2;
        }
        else
        {
          v20 = *(_QWORD *)(a1 + 88);
          if (!v20)
            goto LABEL_38;
          v7 = 3;
        }
        goto LABEL_31;
      }
    }
  }
  return 0;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVySS21DocumentUnderstanding17PoemMessageThreadC_G_Sis5NeverOTg504_s21e15Understanding17g41ConversationsC13countMessagesSiyFSiAA0C13hI6CXEfU_Tf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (!v1)
    return v2;
  v3 = a1;
  v29 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  v2 = v29;
  result = specialized Dictionary.Values.startIndex.getter(v3);
  v6 = result;
  v7 = 0;
  v8 = v3 + 64;
  v9 = *(_BYTE *)(v3 + 32);
  v24 = v3 + 80;
  v25 = v1;
  v27 = v3 + 64;
  v28 = v3;
  v26 = v5;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << v9)
  {
    v12 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_26;
    if (*(_DWORD *)(v3 + 36) != v5)
      goto LABEL_27;
    v13 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(v3 + 56) + 8 * v6) + 136);
    v14 = swift_retain();
    v15 = v13(v14);
    if (v15 >> 62)
      v16 = _CocoaArrayWrapper.endIndex.getter();
    else
      v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_release();
    result = swift_bridgeObjectRelease();
    v18 = *(_QWORD *)(v29 + 16);
    v17 = *(_QWORD *)(v29 + 24);
    if (v18 >= v17 >> 1)
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
    *(_QWORD *)(v29 + 16) = v18 + 1;
    *(_QWORD *)(v29 + 8 * v18 + 32) = v16;
    v3 = v28;
    v9 = *(_BYTE *)(v28 + 32);
    v10 = 1 << v9;
    if (v6 >= 1 << v9)
      goto LABEL_28;
    v8 = v27;
    v19 = *(_QWORD *)(v27 + 8 * v12);
    if ((v19 & (1 << v6)) == 0)
      goto LABEL_29;
    v5 = v26;
    if (*(_DWORD *)(v28 + 36) != v26)
      goto LABEL_30;
    v20 = v19 & (-2 << (v6 & 0x3F));
    if (v20)
    {
      v10 = __clz(__rbit64(v20)) | v6 & 0xFFFFFFFFFFFFFFC0;
      v11 = v25;
    }
    else
    {
      v21 = v12 + 1;
      v22 = (v10 + 63) >> 6;
      v11 = v25;
      if (v12 + 1 < v22)
      {
        v23 = *(_QWORD *)(v27 + 8 * v21);
        if (v23)
        {
LABEL_22:
          v10 = __clz(__rbit64(v23)) + (v21 << 6);
        }
        else
        {
          while (v22 - 2 != v12)
          {
            v23 = *(_QWORD *)(v24 + 8 * v12++);
            if (v23)
            {
              v21 = v12 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    ++v7;
    v6 = v10;
    if (v7 == v11)
      return v2;
  }
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, void (*a2)(uint64_t *__return_ptr, uint64_t *))
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  int64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;

  v20 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v21 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v9 = 0;
  v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    if (v7)
    {
      v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v12 = v11 | (v9 << 6);
      goto LABEL_17;
    }
    if (__OFADD__(v9++, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v9 >= v21)
      goto LABEL_31;
    v14 = *(_QWORD *)(v20 + 8 * v9);
    if (!v14)
      break;
LABEL_16:
    v7 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v9 << 6);
LABEL_17:
    v23 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v12);
    swift_retain();
    a2(&v22, &v23);
    if (v2)
    {
      swift_bridgeObjectRelease();
      swift_release();
LABEL_31:
      swift_release();
      return (uint64_t)v10;
    }
    result = swift_release();
    v16 = v22;
    if (v22)
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
        v10 = (_QWORD *)result;
      }
      v18 = v10[2];
      v17 = v10[3];
      if (v18 >= v17 >> 1)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, v10);
        v10 = (_QWORD *)result;
      }
      v10[2] = v18 + 1;
      v10[v18 + 4] = v16;
    }
  }
  v15 = v9 + 1;
  if (v9 + 1 >= v21)
    goto LABEL_31;
  v14 = *(_QWORD *)(v20 + 8 * v15);
  if (v14)
    goto LABEL_15;
  v15 = v9 + 2;
  if (v9 + 2 >= v21)
    goto LABEL_31;
  v14 = *(_QWORD *)(v20 + 8 * v15);
  if (v14)
    goto LABEL_15;
  v15 = v9 + 3;
  if (v9 + 3 >= v21)
    goto LABEL_31;
  v14 = *(_QWORD *)(v20 + 8 * v15);
  if (v14)
  {
LABEL_15:
    v9 = v15;
    goto LABEL_16;
  }
  v19 = v9 + 4;
  if (v9 + 4 >= v21)
    goto LABEL_31;
  v14 = *(_QWORD *)(v20 + 8 * v19);
  v9 += 4;
  if (v14)
    goto LABEL_16;
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v21)
      goto LABEL_31;
    v14 = *(_QWORD *)(v20 + 8 * v9);
    ++v19;
    if (v14)
      goto LABEL_16;
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  BOOL v17;

  if (*(_QWORD *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    v6 = Hasher._finalize()();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        return 1;
      v14 = ~v7;
      v15 = (v8 + 1) & v14;
      if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
      {
        while (1)
        {
          v16 = (_QWORD *)(v10 + 16 * v15);
          v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            break;
          result = 0;
          v15 = (v15 + 1) & v14;
          if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2)
{
  Swift::Int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;

  if (*(_QWORD *)(a2 + 16))
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    v3 = Hasher._finalize()();
    swift_bridgeObjectRelease();
    v4 = -1 << *(_BYTE *)(a2 + 32);
    v5 = v3 & ~v4;
    v6 = a2 + 56;
    if (((*(_QWORD *)(a2 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
    {
      v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v9 = v8;
      if (v7 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v9 == v10)
      {
LABEL_17:
        swift_bridgeObjectRelease_n();
        goto LABEL_18;
      }
      v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v12 & 1) != 0)
      {
LABEL_18:
        v20 = 1;
        return v20 & 1;
      }
      v13 = ~v4;
      v14 = (v5 + 1) & v13;
      if (((*(_QWORD *)(v6 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
      {
        while (1)
        {
          v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v17 = v16;
          if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v17 == v18)
            break;
          v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v20 & 1) == 0)
          {
            v14 = (v14 + 1) & v13;
            if (((*(_QWORD *)(v6 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
              continue;
          }
          return v20 & 1;
        }
        goto LABEL_17;
      }
    }
  }
  v20 = 0;
  return v20 & 1;
}

uint64_t (*PoemMessageThread.chatId.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t (*PoemMessageThread.messages.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t (*PoemMessageThread.entityIdMentions.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t (*PoemMessageThread.photoIdMentions.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

_QWORD *PoemMessageThread.__allocating_init(chatId:messages:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;

  v6 = (_QWORD *)swift_allocObject();
  v6[2] = 0;
  v6[3] = 0xE000000000000000;
  v6[4] = MEMORY[0x24BEE4AF8];
  v7 = MEMORY[0x24BEE4B08];
  v6[5] = MEMORY[0x24BEE4B08];
  v6[6] = v7;
  swift_beginAccess();
  v6[2] = a1;
  v6[3] = a2;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v6[4] = a3;
  swift_bridgeObjectRelease();
  return v6;
}

_QWORD *PoemMessageThread.init(chatId:messages:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;

  v3[2] = 0;
  v3[3] = 0xE000000000000000;
  v3[4] = MEMORY[0x24BEE4AF8];
  v7 = MEMORY[0x24BEE4B08];
  v3[5] = MEMORY[0x24BEE4B08];
  v3[6] = v7;
  swift_beginAccess();
  v3[2] = a1;
  v3[3] = a2;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v3[4] = a3;
  swift_bridgeObjectRelease();
  return v3;
}

Swift::Bool __swiftcall PoemMessageThread.containsEntityId(entityId:)(Swift::String entityId)
{
  uint64_t v1;
  uint64_t object;
  uint64_t countAndFlagsBits;
  uint64_t v4;

  object = (uint64_t)entityId._object;
  countAndFlagsBits = entityId._countAndFlagsBits;
  v4 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 160))();
  LOBYTE(object) = specialized Set.contains(_:)(countAndFlagsBits, object, v4);
  swift_bridgeObjectRelease();
  return object & 1;
}

Swift::Bool __swiftcall PoemMessageThread.containsPhotoId(photoId:)(Swift::String photoId)
{
  uint64_t v1;
  uint64_t object;
  uint64_t countAndFlagsBits;
  uint64_t v4;

  object = (uint64_t)photoId._object;
  countAndFlagsBits = photoId._countAndFlagsBits;
  v4 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 184))();
  LOBYTE(object) = specialized Set.contains(_:)(countAndFlagsBits, object, v4);
  swift_bridgeObjectRelease();
  return object & 1;
}

Swift::Void __swiftcall PoemMessageThread.updateEntityIdMention(extractions:)(Swift::OpaquePointer extractions)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t i;
  id v6;
  void *v7;
  id v8;
  void *v9;
  Swift::Int v10;
  Swift::Int v11;
  Swift::Int v12;
  void (*v13)(_BYTE *, _QWORD);
  _BYTE v14[32];
  Swift::Int v15;

  v2 = v1;
  if (!((unint64_t)extractions._rawValue >> 62))
  {
    v4 = *(_QWORD *)(((unint64_t)extractions._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
      goto LABEL_3;
LABEL_14:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  v4 = _CocoaArrayWrapper.endIndex.getter();
  if (!v4)
    goto LABEL_14;
LABEL_3:
  if (v4 < 1)
  {
    __break(1u);
  }
  else
  {
    for (i = 0; i != v4; ++i)
    {
      if (((unint64_t)extractions._rawValue & 0xC000000000000001) != 0)
        v6 = (id)MEMORY[0x22E2AFF34](i, extractions._rawValue);
      else
        v6 = *((id *)extractions._rawValue + i + 4);
      v7 = v6;
      v8 = objc_msgSend(v6, sel_identifier);
      if (v8)
      {
        v9 = v8;
        v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v12 = v11;

        v13 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v2 + 176))(v14);
        specialized Set._Variant.insert(_:)(&v15, v10, v12);
        v13(v14, 0);

        swift_bridgeObjectRelease();
      }
      else
      {

      }
    }
    swift_bridgeObjectRelease();
  }
}

Swift::Void __swiftcall PoemMessageThread.updatePhotoIdMention(extractions:)(Swift::OpaquePointer extractions)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t i;
  id v6;
  void *v7;
  id v8;
  void *v9;
  Swift::Int v10;
  Swift::Int v11;
  Swift::Int v12;
  void (*v13)(_BYTE *, _QWORD);
  _BYTE v14[32];
  Swift::Int v15;

  v2 = v1;
  if (!((unint64_t)extractions._rawValue >> 62))
  {
    v4 = *(_QWORD *)(((unint64_t)extractions._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
      goto LABEL_3;
LABEL_14:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  v4 = _CocoaArrayWrapper.endIndex.getter();
  if (!v4)
    goto LABEL_14;
LABEL_3:
  if (v4 < 1)
  {
    __break(1u);
  }
  else
  {
    for (i = 0; i != v4; ++i)
    {
      if (((unint64_t)extractions._rawValue & 0xC000000000000001) != 0)
        v6 = (id)MEMORY[0x22E2AFF34](i, extractions._rawValue);
      else
        v6 = *((id *)extractions._rawValue + i + 4);
      v7 = v6;
      v8 = objc_msgSend(v6, sel_identifier);
      if (v8)
      {
        v9 = v8;
        v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v12 = v11;

        v13 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v2 + 200))(v14);
        specialized Set._Variant.insert(_:)(&v15, v10, v12);
        v13(v14, 0);

        swift_bridgeObjectRelease();
      }
      else
      {

      }
    }
    swift_bridgeObjectRelease();
  }
}

uint64_t PoemMessageThread.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PoemMessageThread.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t PoemConversations.threads.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t PoemConversations.threads.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*PoemConversations.threads.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t PoemConversations.nameToId.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t PoemConversations.nameToId.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 24) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*PoemConversations.nameToId.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t PoemMessageThread.messages.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t PoemMessageThread.messages.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 32) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*PoemConversations.idToName.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t PoemMessageThread.entityIdMentions.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t PoemMessageThread.entityIdMentions.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 40) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*PoemConversations.megadomeIdMap.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t PoemMessageThread.photoIdMentions.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t PoemMessageThread.photoIdMentions.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 48) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*PoemConversations.distinctEntitiesWithCounts.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t PoemConversations.entityImageCooccurrenceCounts.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t PoemConversations.entityImageCooccurrenceCounts.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 56) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*PoemConversations.entityImageCooccurrenceCounts.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t PoemConversations.distinctImagesWithCounts.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t PoemConversations.distinctImagesWithCounts.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 64) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*PoemConversations.distinctImagesWithCounts.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

Swift::Void __swiftcall PoemConversations.updateEntityCount(extractions:)(Swift::OpaquePointer extractions)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;

  if (!((unint64_t)extractions._rawValue >> 62))
  {
    v3 = *(_QWORD *)(((unint64_t)extractions._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v3)
      goto LABEL_3;
LABEL_10:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  v3 = _CocoaArrayWrapper.endIndex.getter();
  if (!v3)
    goto LABEL_10;
LABEL_3:
  if (v3 >= 1)
  {
    v4 = 0;
    do
    {
      if (((unint64_t)extractions._rawValue & 0xC000000000000001) != 0)
        v5 = (id)MEMORY[0x22E2AFF34](v4, extractions._rawValue);
      else
        v5 = *((id *)extractions._rawValue + v4 + 4);
      v6 = v5;
      ++v4;
      v7 = v5;
      closure #1 in PoemConversations.updateEntityCount(extractions:)(&v7, v1);

    }
    while (v3 != v4);
    goto LABEL_10;
  }
  __break(1u);
}

id closure #1 in PoemConversations.updateEntityCount(extractions:)(id *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  id result;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(_QWORD *, _QWORD);
  _QWORD *v18;
  _QWORD *v19;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  NSObject *v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  NSObject *v33;
  _QWORD *v34;
  uint8_t *v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint8_t *v43;
  _QWORD *v44;
  uint8_t *v45;
  uint64_t v46;
  _QWORD v47[4];
  _QWORD *v48;

  v5 = type metadata accessor for Logger();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a1;
  result = objc_msgSend(*a1, sel_identifier);
  if (result)
  {
    v11 = result;
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v14 = v13;

    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 344))(v12, v14);
    v16 = v15;
    swift_bridgeObjectRelease();
    if (v16)
    {
      v17 = (uint64_t (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *))(*(_QWORD *)a2 + 248))(v47);
      v19 = v18;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v48 = (_QWORD *)*v19;
      v21 = v48;
      *v19 = 0x8000000000000000;
      v23 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v14);
      v24 = v21[2];
      v25 = (v22 & 1) == 0;
      v26 = v24 + v25;
      if (__OFADD__(v24, v25))
      {
        __break(1u);
        goto LABEL_19;
      }
      LOBYTE(v16) = v22;
      if (v21[3] >= v26)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          goto LABEL_20;
        while (1)
        {
LABEL_10:
          *v19 = v48;
          swift_bridgeObjectRelease();
          v36 = (_QWORD *)*v19;
          if ((v16 & 1) == 0)
          {
            v36[(v23 >> 6) + 8] |= 1 << v23;
            v37 = (uint64_t *)(v36[6] + 16 * v23);
            *v37 = v12;
            v37[1] = v14;
            *(_QWORD *)(v36[7] + 8 * v23) = 0;
            v38 = v36[2];
            swift_bridgeObjectRetain();
            if (__OFADD__(v38, 1))
            {
              __break(1u);
              goto LABEL_22;
            }
            v36[2] = v38 + 1;
          }
          swift_bridgeObjectRetain();
          v39 = v36[7];
          swift_bridgeObjectRelease();
          v40 = *(_QWORD *)(v39 + 8 * v23);
          v41 = __OFADD__(v40, 1);
          v42 = v40 + 1;
          if (!v41)
          {
            *(_QWORD *)(v39 + 8 * v23) = v42;
            swift_bridgeObjectRelease();
            return (id)v17(v47, 0);
          }
LABEL_19:
          __break(1u);
LABEL_20:
          specialized _NativeDictionary.copy()();
        }
      }
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v26, isUniquelyReferenced_nonNull_native);
      v27 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v14);
      if ((v16 & 1) == (v28 & 1))
      {
        v23 = v27;
        goto LABEL_10;
      }
LABEL_22:
      result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRelease();
      Logger.init()();
      v29 = v9;
      v30 = Logger.logObject.getter();
      v31 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v30, v31))
      {
        v32 = (uint8_t *)swift_slowAlloc();
        v44 = (_QWORD *)swift_slowAlloc();
        v45 = v32;
        v46 = v2;
        *(_DWORD *)v32 = 138412290;
        v43 = v32 + 4;
        v47[0] = v29;
        v33 = v29;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v34 = v44;
        *v44 = v29;

        v35 = v45;
        _os_log_impl(&dword_2282CC000, v30, v31, "Trying to update counts for an entity id with no name: %@", v45, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x22E2B117C](v34, -1, -1);
        MEMORY[0x22E2B117C](v35, -1, -1);
      }
      else
      {

        v30 = v29;
      }

      return (id)(*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
  }
  return result;
}

Swift::Void __swiftcall PoemConversations.updateImageCount(extractions:)(Swift::OpaquePointer extractions)
{
  unint64_t rawValue;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  char isUniquelyReferenced_nonNull_native;
  char v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  _BOOL8 v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  char v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  void (*v51)(_BYTE *, _QWORD);
  uint64_t v52;
  unint64_t v53;
  _BYTE v54[32];

  rawValue = (unint64_t)extractions._rawValue;
  if ((unint64_t)extractions._rawValue >> 62)
  {
LABEL_41:
    swift_bridgeObjectRetain();
    v52 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    if (v2)
      goto LABEL_3;
LABEL_42:
    swift_bridgeObjectRelease();
    return;
  }
  v2 = *(_QWORD *)(((unint64_t)extractions._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v52 = v2;
  if (!v2)
    goto LABEL_42;
LABEL_3:
  v50 = rawValue & 0xC000000000000001;
  v3 = 4;
  v47 = v2;
  v48 = (_QWORD *)rawValue;
  while (1)
  {
    if (v50)
      v9 = (id)MEMORY[0x22E2AFF34](v3 - 4, rawValue);
    else
      v9 = *(id *)(rawValue + 8 * v3);
    v10 = v9;
    v11 = v3 - 3;
    if (__OFADD__(v3 - 4, 1))
    {
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    v12 = objc_msgSend(v9, sel_identifier);
    if (v12)
      break;
LABEL_7:

    ++v3;
    if (v11 == v2)
      goto LABEL_42;
  }
  v13 = v12;
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v16 = v15;

  v51 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v49 + 296))(v54);
  v18 = v17;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  rawValue = *v18;
  v53 = *v18;
  *v18 = 0x8000000000000000;
  v21 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v16);
  v22 = *(_QWORD *)(rawValue + 16);
  v23 = (v20 & 1) == 0;
  v24 = v22 + v23;
  if (__OFADD__(v22, v23))
    goto LABEL_36;
  v25 = v20;
  if (*(_QWORD *)(rawValue + 24) >= v24)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, [Int : Int]>);
    goto LABEL_19;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v24, isUniquelyReferenced_nonNull_native, &demangling cache variable for type metadata for _DictionaryStorage<String, [Int : Int]>);
  v26 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v16);
  if ((v25 & 1) == (v27 & 1))
  {
    v21 = v26;
LABEL_19:
    *v18 = v53;
    swift_bridgeObjectRelease();
    rawValue = *v18;
    swift_bridgeObjectRetain();
    if ((v25 & 1) == 0)
    {
      v28 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
      *(_QWORD *)(rawValue + 8 * (v21 >> 6) + 64) |= 1 << v21;
      v29 = (uint64_t *)(*(_QWORD *)(rawValue + 48) + 16 * v21);
      *v29 = v14;
      v29[1] = v16;
      *(_QWORD *)(*(_QWORD *)(rawValue + 56) + 8 * v21) = v28;
      v30 = *(_QWORD *)(rawValue + 16);
      v7 = __OFADD__(v30, 1);
      v31 = v30 + 1;
      if (v7)
        goto LABEL_39;
      *(_QWORD *)(rawValue + 16) = v31;
      swift_bridgeObjectRetain();
    }
    v32 = *(_QWORD *)(rawValue + 56);
    swift_bridgeObjectRelease();
    v33 = 8 * v21;
    v34 = swift_isUniquelyReferenced_nonNull_native();
    rawValue = *(_QWORD *)(v32 + v33);
    *(_QWORD *)(v32 + v33) = 0x8000000000000000;
    v36 = specialized __RawDictionaryStorage.find<A>(_:)(v52);
    v37 = *(_QWORD *)(rawValue + 16);
    v38 = (v35 & 1) == 0;
    v39 = v37 + v38;
    if (__OFADD__(v37, v38))
      goto LABEL_37;
    v40 = v35;
    if (*(_QWORD *)(rawValue + 24) >= v39)
    {
      if ((v34 & 1) == 0)
        specialized _NativeDictionary.copy()();
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v39, v34);
      v41 = specialized __RawDictionaryStorage.find<A>(_:)(v52);
      if ((v40 & 1) != (v42 & 1))
        goto LABEL_44;
      v36 = v41;
    }
    *(_QWORD *)(v32 + v33) = rawValue;
    swift_bridgeObjectRelease();
    v43 = *(_QWORD **)(v32 + v33);
    if ((v40 & 1) != 0)
    {
      v4 = swift_bridgeObjectRetain();
    }
    else
    {
      v43[(v36 >> 6) + 8] |= 1 << v36;
      v44 = 8 * v36;
      *(_QWORD *)(v43[6] + v44) = v52;
      *(_QWORD *)(v43[7] + v44) = 0;
      v45 = v43[2];
      v46 = v45 + 1;
      rawValue = __OFADD__(v45, 1);
      v4 = swift_bridgeObjectRetain();
      if ((rawValue & 1) != 0)
        goto LABEL_40;
      *(_QWORD *)(v4 + 16) = v46;
    }
    v5 = *(_QWORD *)(v4 + 56);
    swift_bridgeObjectRelease();
    v6 = *(_QWORD *)(v5 + 8 * v36);
    v7 = __OFADD__(v6, 1);
    v8 = v6 + 1;
    if (v7)
      goto LABEL_38;
    *(_QWORD *)(v5 + 8 * v36) = v8;
    swift_bridgeObjectRelease();
    v51(v54, 0);
    v2 = v47;
    rawValue = (unint64_t)v48;
    goto LABEL_7;
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_44:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

Swift::Void __swiftcall PoemConversations.updateCooccurrenceCount(pid:entityCounts:faces:)(Swift::String pid, Swift::OpaquePointer entityCounts, Swift::Int faces)
{
  specialized Sequence.forEach(_:)((uint64_t)entityCounts._rawValue, (void (*)(uint64_t, uint64_t, _OWORD *))partial apply for closure #1 in PoemConversations.updateCooccurrenceCount(pid:entityCounts:faces:));
}

uint64_t closure #1 in PoemConversations.updateCooccurrenceCount(pid:entityCounts:faces:)(uint64_t a1, unint64_t a2, uint64_t *a3, uint64_t a4, _QWORD *a5, void (*a6)(_QWORD *, _QWORD), uint64_t a7)
{
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v11;
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;
  unint64_t v15;
  void (*v16)(_QWORD *@<X8>);
  _QWORD *v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  Swift::String v51;
  Swift::String v52;
  _QWORD *v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BOOL8 v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  _BOOL8 v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  Swift::String v83;
  Swift::String v84;
  _QWORD *v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _BOOL8 v90;
  uint64_t v91;
  unint64_t v92;
  char v93;
  _QWORD *v94;
  uint64_t v95;
  unint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  _BOOL8 v104;
  uint64_t v105;
  unint64_t v106;
  char v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  Swift::String v115;
  Swift::String v116;
  _QWORD *v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _BOOL8 v122;
  uint64_t v123;
  unint64_t v124;
  char v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  unint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  _BOOL8 v137;
  uint64_t v138;
  unint64_t v139;
  char v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  Swift::String v148;
  Swift::String v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _BOOL8 v154;
  uint64_t v155;
  unint64_t v156;
  char v157;
  _QWORD *(*v158)(_QWORD *__return_ptr, _QWORD);
  void (*v159)(_QWORD *@<X8>);
  _QWORD *v160;
  uint64_t v161;
  unint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  _BOOL8 v170;
  uint64_t v171;
  unint64_t v172;
  char v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t result;
  void (*v182)(_OWORD *, _QWORD);
  _QWORD *(*v183)(_QWORD *__return_ptr, _QWORD);
  void (*v184)(_QWORD *@<X8>);
  _QWORD *(*v185)(_QWORD *__return_ptr, _QWORD);
  void (*v186)(_QWORD *@<X8>);
  _QWORD *(*v187)(_QWORD *__return_ptr, _QWORD);
  void (*v188)(_QWORD *@<X8>);
  uint64_t *v189;
  uint64_t v190;
  void (*v192)(_QWORD *, _QWORD);
  uint64_t v194;
  _QWORD v195[4];
  _OWORD v196[5];
  uint64_t v197;
  _OWORD v198[5];
  uint64_t v199;
  _OWORD v200[5];
  uint64_t v201;
  _OWORD v202[5];
  uint64_t v203;
  _OWORD v204[5];
  uint64_t v205;

  v192 = a6;
  v8 = (unint64_t)a6;
  v9 = a5;
  v11 = a2;
  v12 = a3[3];
  v190 = a1;
  v189 = a3;
  if (v12 < 1)
  {
    v187 = 0;
    v188 = 0;
    goto LABEL_22;
  }
  *(_QWORD *)&v204[0] = a1;
  *((_QWORD *)&v204[0] + 1) = a2;
  swift_bridgeObjectRetain();
  v13._countAndFlagsBits = 4074812;
  v13._object = (void *)0xE300000000000000;
  String.append(_:)(v13);
  swift_bridgeObjectRetain();
  v14._countAndFlagsBits = (uint64_t)v9;
  v14._object = (void *)v8;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v16 = (void (*)(_QWORD *@<X8>))*((_QWORD *)&v204[0] + 1);
  v15 = *(_QWORD *)&v204[0];
  v188 = (void (*)(_QWORD *@<X8>))(*(uint64_t (**)(_OWORD *))(*(_QWORD *)a4 + 272))(v202);
  v9 = v17;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v204[0] = *v9;
  v19 = *(_QWORD *)&v204[0];
  *v9 = 0x8000000000000000;
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(v15, (uint64_t)v16);
  v21 = *(_QWORD *)(v19 + 16);
  v22 = (v20 & 1) == 0;
  v23 = v21 + v22;
  if (__OFADD__(v21, v22))
  {
    __break(1u);
    goto LABEL_108;
  }
  v7 = v20;
  if (*(_QWORD *)(v19 + 24) >= v23)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      goto LABEL_122;
    while (1)
    {
LABEL_8:
      *v9 = *(_QWORD *)&v204[0];
      swift_bridgeObjectRelease();
      v26 = (_QWORD *)*v9;
      if ((v7 & 1) == 0)
      {
        v27 = swift_bridgeObjectRetain();
        specialized thunk for @callee_guaranteed () -> (@owned PoemCooccurrenceCounts)(v204, v27);
        v26[(v8 >> 6) + 8] |= 1 << v8;
        v28 = (unint64_t *)(v26[6] + 16 * v8);
        *v28 = v15;
        v28[1] = (unint64_t)v16;
        v29 = v26[7] + 88 * v8;
        v30 = v204[1];
        *(_OWORD *)v29 = v204[0];
        *(_OWORD *)(v29 + 16) = v30;
        *(_QWORD *)(v29 + 80) = v205;
        v31 = v204[4];
        v32 = v204[2];
        *(_OWORD *)(v29 + 48) = v204[3];
        *(_OWORD *)(v29 + 64) = v31;
        *(_OWORD *)(v29 + 32) = v32;
        v33 = v26[2];
        v34 = __OFADD__(v33, 1);
        v35 = v33 + 1;
        if (v34)
        {
          __break(1u);
LABEL_124:
          specialized _NativeDictionary.copy()();
          v37 = *(_QWORD *)&v200[0];
          goto LABEL_16;
        }
        v26[2] = v35;
      }
      swift_bridgeObjectRetain();
      v36 = v26[7];
      swift_bridgeObjectRelease();
      v9 = (_QWORD *)(v36 + 88 * v8 + 24);
      v7 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v200[0] = *v9;
      v37 = *(_QWORD *)&v200[0];
      *v9 = 0x8000000000000000;
      v15 = specialized __RawDictionaryStorage.find<A>(_:)(a7);
      v39 = *(_QWORD *)(v37 + 16);
      v40 = (v38 & 1) == 0;
      v41 = v39 + v40;
      if (__OFADD__(v39, v40))
      {
LABEL_108:
        __break(1u);
LABEL_109:
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
LABEL_112:
        __break(1u);
LABEL_113:
        __break(1u);
LABEL_114:
        __break(1u);
LABEL_115:
        __break(1u);
LABEL_116:
        __break(1u);
LABEL_117:
        __break(1u);
LABEL_118:
        __break(1u);
LABEL_119:
        __break(1u);
LABEL_120:
        __break(1u);
        goto LABEL_121;
      }
      v8 = v38;
      if (*(_QWORD *)(v37 + 24) >= v41)
      {
        if ((v7 & 1) != 0)
          goto LABEL_16;
        goto LABEL_124;
      }
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v41, v7);
      v37 = *(_QWORD *)&v200[0];
      v42 = specialized __RawDictionaryStorage.find<A>(_:)(a7);
      if ((v8 & 1) != (v43 & 1))
        goto LABEL_143;
      v15 = v42;
LABEL_16:
      *v9 = v37;
      swift_bridgeObjectRelease();
      v44 = (_QWORD *)*v9;
      if ((v8 & 1) != 0)
      {
        v45 = swift_bridgeObjectRetain();
      }
      else
      {
        v44[(v15 >> 6) + 8] |= 1 << v15;
        v46 = 8 * v15;
        *(_QWORD *)(v44[6] + v46) = a7;
        *(_QWORD *)(v44[7] + v46) = 0;
        v47 = v44[2];
        v45 = swift_bridgeObjectRetain();
        if (__OFADD__(v47, 1))
        {
          __break(1u);
LABEL_126:
          specialized _NativeDictionary.copy()();
          goto LABEL_29;
        }
        *(_QWORD *)(v45 + 16) = v47 + 1;
      }
      v48 = *(_QWORD *)(v45 + 56);
      swift_bridgeObjectRelease();
      v49 = *(_QWORD *)(v48 + 8 * v15);
      v34 = __OFADD__(v49, v12);
      v50 = v49 + v12;
      v9 = a5;
      v8 = (unint64_t)v192;
      if (v34)
        goto LABEL_110;
      *(_QWORD *)(v48 + 8 * v15) = v50;
      swift_bridgeObjectRelease();
      ((void (*)(_OWORD *, _QWORD))v188)(v202, 0);
      v187 = specialized thunk for @callee_guaranteed () -> (@owned PoemCooccurrenceCounts);
      v188 = protocol witness for SetAlgebra.init() in conformance NSPropertyListMutabilityOptions;
      a3 = v189;
      a1 = v190;
LABEL_22:
      v12 = a3[4];
      if (v12 < 1)
      {
        v185 = 0;
        v186 = 0;
        goto LABEL_43;
      }
      *(_QWORD *)&v202[0] = a1;
      *((_QWORD *)&v202[0] + 1) = v11;
      swift_bridgeObjectRetain();
      v51._countAndFlagsBits = 4074812;
      v51._object = (void *)0xE300000000000000;
      String.append(_:)(v51);
      swift_bridgeObjectRetain();
      v52._countAndFlagsBits = (uint64_t)v9;
      v52._object = (void *)v8;
      String.append(_:)(v52);
      swift_bridgeObjectRelease();
      v16 = (void (*)(_QWORD *@<X8>))*((_QWORD *)&v202[0] + 1);
      v15 = *(_QWORD *)&v202[0];
      v186 = (void (*)(_QWORD *@<X8>))(*(uint64_t (**)(_OWORD *))(*(_QWORD *)a4 + 272))(v200);
      v9 = v53;
      v54 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v202[0] = *v9;
      v55 = *(_QWORD *)&v202[0];
      *v9 = 0x8000000000000000;
      v8 = specialized __RawDictionaryStorage.find<A>(_:)(v15, (uint64_t)v16);
      v57 = *(_QWORD *)(v55 + 16);
      v58 = (v56 & 1) == 0;
      v59 = v57 + v58;
      if (__OFADD__(v57, v58))
        goto LABEL_109;
      v7 = v56;
      if (*(_QWORD *)(v55 + 24) >= v59)
      {
        if ((v54 & 1) != 0)
          goto LABEL_29;
        goto LABEL_126;
      }
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v59, v54);
      v60 = specialized __RawDictionaryStorage.find<A>(_:)(v15, (uint64_t)v16);
      if ((v7 & 1) != (v61 & 1))
        goto LABEL_142;
      v8 = v60;
LABEL_29:
      *v9 = *(_QWORD *)&v202[0];
      swift_bridgeObjectRelease();
      v62 = (_QWORD *)*v9;
      if ((v7 & 1) == 0)
      {
        v63 = swift_bridgeObjectRetain();
        specialized thunk for @callee_guaranteed () -> (@owned PoemCooccurrenceCounts)(v202, v63);
        v62[(v8 >> 6) + 8] |= 1 << v8;
        v64 = (unint64_t *)(v62[6] + 16 * v8);
        *v64 = v15;
        v64[1] = (unint64_t)v16;
        v65 = v62[7] + 88 * v8;
        *(_OWORD *)v65 = v202[0];
        *(_OWORD *)(v65 + 16) = v202[1];
        *(_QWORD *)(v65 + 80) = v203;
        *(_OWORD *)(v65 + 64) = v202[4];
        *(_OWORD *)(v65 + 48) = v202[3];
        *(_OWORD *)(v65 + 32) = v202[2];
        v66 = v62[2];
        v34 = __OFADD__(v66, 1);
        v67 = v66 + 1;
        if (v34)
        {
          __break(1u);
LABEL_128:
          specialized _NativeDictionary.copy()();
          v69 = *(_QWORD *)&v198[0];
          goto LABEL_37;
        }
        v62[2] = v67;
      }
      swift_bridgeObjectRetain();
      v68 = v62[7];
      swift_bridgeObjectRelease();
      v9 = (_QWORD *)(v68 + 88 * v8 + 32);
      v7 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v198[0] = *v9;
      v69 = *(_QWORD *)&v198[0];
      *v9 = 0x8000000000000000;
      v15 = specialized __RawDictionaryStorage.find<A>(_:)(a7);
      v71 = *(_QWORD *)(v69 + 16);
      v72 = (v70 & 1) == 0;
      v73 = v71 + v72;
      if (__OFADD__(v71, v72))
        goto LABEL_111;
      v8 = v70;
      if (*(_QWORD *)(v69 + 24) < v73)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v73, v7);
        v69 = *(_QWORD *)&v198[0];
        v74 = specialized __RawDictionaryStorage.find<A>(_:)(a7);
        if ((v8 & 1) != (v75 & 1))
          goto LABEL_143;
        v15 = v74;
        goto LABEL_37;
      }
      if ((v7 & 1) == 0)
        goto LABEL_128;
LABEL_37:
      *v9 = v69;
      swift_bridgeObjectRelease();
      v76 = (_QWORD *)*v9;
      if ((v8 & 1) != 0)
      {
        v77 = swift_bridgeObjectRetain();
      }
      else
      {
        v76[(v15 >> 6) + 8] |= 1 << v15;
        v78 = 8 * v15;
        *(_QWORD *)(v76[6] + v78) = a7;
        *(_QWORD *)(v76[7] + v78) = 0;
        v79 = v76[2];
        v77 = swift_bridgeObjectRetain();
        if (__OFADD__(v79, 1))
        {
          __break(1u);
LABEL_130:
          specialized _NativeDictionary.copy()();
          goto LABEL_50;
        }
        *(_QWORD *)(v77 + 16) = v79 + 1;
      }
      v80 = *(_QWORD *)(v77 + 56);
      swift_bridgeObjectRelease();
      v81 = *(_QWORD *)(v80 + 8 * v15);
      v34 = __OFADD__(v81, v12);
      v82 = v81 + v12;
      v9 = a5;
      v8 = (unint64_t)v192;
      if (v34)
        goto LABEL_113;
      *(_QWORD *)(v80 + 8 * v15) = v82;
      swift_bridgeObjectRelease();
      ((void (*)(_OWORD *, _QWORD))v186)(v200, 0);
      v185 = specialized thunk for @callee_guaranteed () -> (@owned PoemCooccurrenceCounts);
      v186 = protocol witness for SetAlgebra.init() in conformance NSPropertyListMutabilityOptions;
      a3 = v189;
      a1 = v190;
LABEL_43:
      v12 = *a3;
      if (*a3 < 1)
      {
        v183 = 0;
        v184 = 0;
        goto LABEL_64;
      }
      *(_QWORD *)&v200[0] = a1;
      *((_QWORD *)&v200[0] + 1) = v11;
      swift_bridgeObjectRetain();
      v83._countAndFlagsBits = 4074812;
      v83._object = (void *)0xE300000000000000;
      String.append(_:)(v83);
      swift_bridgeObjectRetain();
      v84._countAndFlagsBits = (uint64_t)v9;
      v84._object = (void *)v8;
      String.append(_:)(v84);
      swift_bridgeObjectRelease();
      v16 = (void (*)(_QWORD *@<X8>))*((_QWORD *)&v200[0] + 1);
      v15 = *(_QWORD *)&v200[0];
      v184 = (void (*)(_QWORD *@<X8>))(*(uint64_t (**)(_OWORD *))(*(_QWORD *)a4 + 272))(v198);
      v9 = v85;
      v86 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v200[0] = *v9;
      v87 = *(_QWORD *)&v200[0];
      *v9 = 0x8000000000000000;
      v8 = specialized __RawDictionaryStorage.find<A>(_:)(v15, (uint64_t)v16);
      v89 = *(_QWORD *)(v87 + 16);
      v90 = (v88 & 1) == 0;
      v91 = v89 + v90;
      if (__OFADD__(v89, v90))
        goto LABEL_112;
      v7 = v88;
      if (*(_QWORD *)(v87 + 24) >= v91)
      {
        if ((v86 & 1) != 0)
          goto LABEL_50;
        goto LABEL_130;
      }
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v91, v86);
      v92 = specialized __RawDictionaryStorage.find<A>(_:)(v15, (uint64_t)v16);
      if ((v7 & 1) != (v93 & 1))
        goto LABEL_142;
      v8 = v92;
LABEL_50:
      *v9 = *(_QWORD *)&v200[0];
      swift_bridgeObjectRelease();
      v94 = (_QWORD *)*v9;
      if ((v7 & 1) == 0)
      {
        v95 = swift_bridgeObjectRetain();
        specialized thunk for @callee_guaranteed () -> (@owned PoemCooccurrenceCounts)(v200, v95);
        v94[(v8 >> 6) + 8] |= 1 << v8;
        v96 = (unint64_t *)(v94[6] + 16 * v8);
        *v96 = v15;
        v96[1] = (unint64_t)v16;
        v97 = v94[7] + 88 * v8;
        *(_OWORD *)v97 = v200[0];
        *(_OWORD *)(v97 + 16) = v200[1];
        *(_QWORD *)(v97 + 80) = v201;
        *(_OWORD *)(v97 + 64) = v200[4];
        *(_OWORD *)(v97 + 48) = v200[3];
        *(_OWORD *)(v97 + 32) = v200[2];
        v98 = v94[2];
        v34 = __OFADD__(v98, 1);
        v99 = v98 + 1;
        if (v34)
        {
          __break(1u);
LABEL_132:
          specialized _NativeDictionary.copy()();
          v101 = *(_QWORD *)&v196[0];
          goto LABEL_58;
        }
        v94[2] = v99;
      }
      swift_bridgeObjectRetain();
      v100 = v94[7];
      swift_bridgeObjectRelease();
      v9 = (_QWORD *)(v100 + 88 * v8);
      v7 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v196[0] = *v9;
      v101 = *(_QWORD *)&v196[0];
      *v9 = 0x8000000000000000;
      v15 = specialized __RawDictionaryStorage.find<A>(_:)(a7);
      v103 = *(_QWORD *)(v101 + 16);
      v104 = (v102 & 1) == 0;
      v105 = v103 + v104;
      if (__OFADD__(v103, v104))
        goto LABEL_114;
      v8 = v102;
      if (*(_QWORD *)(v101 + 24) < v105)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v105, v7);
        v101 = *(_QWORD *)&v196[0];
        v106 = specialized __RawDictionaryStorage.find<A>(_:)(a7);
        if ((v8 & 1) != (v107 & 1))
          goto LABEL_143;
        v15 = v106;
        goto LABEL_58;
      }
      if ((v7 & 1) == 0)
        goto LABEL_132;
LABEL_58:
      *v9 = v101;
      swift_bridgeObjectRelease();
      v108 = (_QWORD *)*v9;
      if ((v8 & 1) != 0)
      {
        v109 = swift_bridgeObjectRetain();
      }
      else
      {
        v108[(v15 >> 6) + 8] |= 1 << v15;
        v110 = 8 * v15;
        *(_QWORD *)(v108[6] + v110) = a7;
        *(_QWORD *)(v108[7] + v110) = 0;
        v111 = v108[2];
        v109 = swift_bridgeObjectRetain();
        if (__OFADD__(v111, 1))
        {
          __break(1u);
LABEL_134:
          specialized _NativeDictionary.copy()();
          goto LABEL_71;
        }
        *(_QWORD *)(v109 + 16) = v111 + 1;
      }
      v112 = *(_QWORD *)(v109 + 56);
      swift_bridgeObjectRelease();
      v113 = *(_QWORD *)(v112 + 8 * v15);
      v34 = __OFADD__(v113, v12);
      v114 = v113 + v12;
      v9 = a5;
      v8 = (unint64_t)v192;
      if (v34)
        goto LABEL_116;
      *(_QWORD *)(v112 + 8 * v15) = v114;
      swift_bridgeObjectRelease();
      ((void (*)(_OWORD *, _QWORD))v184)(v198, 0);
      v183 = specialized thunk for @callee_guaranteed () -> (@owned PoemCooccurrenceCounts);
      v184 = protocol witness for SetAlgebra.init() in conformance NSPropertyListMutabilityOptions;
      a3 = v189;
      a1 = v190;
LABEL_64:
      v12 = a3[1];
      if (v12 < 1)
      {
        v7 = 0;
        v16 = 0;
        goto LABEL_85;
      }
      *(_QWORD *)&v198[0] = a1;
      *((_QWORD *)&v198[0] + 1) = v11;
      swift_bridgeObjectRetain();
      v115._countAndFlagsBits = 4074812;
      v115._object = (void *)0xE300000000000000;
      String.append(_:)(v115);
      swift_bridgeObjectRetain();
      v116._countAndFlagsBits = (uint64_t)v9;
      v116._object = (void *)v8;
      String.append(_:)(v116);
      swift_bridgeObjectRelease();
      v16 = (void (*)(_QWORD *@<X8>))*((_QWORD *)&v198[0] + 1);
      v15 = *(_QWORD *)&v198[0];
      v182 = (void (*)(_OWORD *, _QWORD))(*(uint64_t (**)(_OWORD *))(*(_QWORD *)a4 + 272))(v196);
      v9 = v117;
      v118 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v198[0] = *v9;
      v119 = *(_QWORD *)&v198[0];
      *v9 = 0x8000000000000000;
      v8 = specialized __RawDictionaryStorage.find<A>(_:)(v15, (uint64_t)v16);
      v121 = *(_QWORD *)(v119 + 16);
      v122 = (v120 & 1) == 0;
      v123 = v121 + v122;
      if (__OFADD__(v121, v122))
        goto LABEL_115;
      v7 = v120;
      if (*(_QWORD *)(v119 + 24) >= v123)
      {
        if ((v118 & 1) != 0)
          goto LABEL_71;
        goto LABEL_134;
      }
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v123, v118);
      v124 = specialized __RawDictionaryStorage.find<A>(_:)(v15, (uint64_t)v16);
      if ((v7 & 1) != (v125 & 1))
        goto LABEL_142;
      v8 = v124;
LABEL_71:
      v126 = a7;
      *v9 = *(_QWORD *)&v198[0];
      swift_bridgeObjectRelease();
      v127 = (_QWORD *)*v9;
      if ((v7 & 1) == 0)
      {
        v128 = swift_bridgeObjectRetain();
        specialized thunk for @callee_guaranteed () -> (@owned PoemCooccurrenceCounts)(v198, v128);
        v127[(v8 >> 6) + 8] |= 1 << v8;
        v129 = (unint64_t *)(v127[6] + 16 * v8);
        *v129 = v15;
        v129[1] = (unint64_t)v16;
        v130 = v127[7] + 88 * v8;
        *(_OWORD *)v130 = v198[0];
        *(_OWORD *)(v130 + 16) = v198[1];
        *(_QWORD *)(v130 + 80) = v199;
        *(_OWORD *)(v130 + 64) = v198[4];
        *(_OWORD *)(v130 + 48) = v198[3];
        *(_OWORD *)(v130 + 32) = v198[2];
        v131 = v127[2];
        v34 = __OFADD__(v131, 1);
        v132 = v131 + 1;
        if (v34)
        {
          __break(1u);
LABEL_136:
          specialized _NativeDictionary.copy()();
          v134 = v195[0];
          goto LABEL_79;
        }
        v127[2] = v132;
      }
      swift_bridgeObjectRetain();
      v133 = v127[7];
      swift_bridgeObjectRelease();
      v9 = (_QWORD *)(v133 + 88 * v8 + 8);
      v7 = swift_isUniquelyReferenced_nonNull_native();
      v195[0] = *v9;
      v134 = v195[0];
      *v9 = 0x8000000000000000;
      v15 = specialized __RawDictionaryStorage.find<A>(_:)(a7);
      v136 = *(_QWORD *)(v134 + 16);
      v137 = (v135 & 1) == 0;
      v138 = v136 + v137;
      if (__OFADD__(v136, v137))
        goto LABEL_117;
      v8 = v135;
      if (*(_QWORD *)(v134 + 24) < v138)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v138, v7);
        v134 = v195[0];
        v139 = specialized __RawDictionaryStorage.find<A>(_:)(a7);
        if ((v8 & 1) != (v140 & 1))
          goto LABEL_143;
        v15 = v139;
        goto LABEL_79;
      }
      if ((v7 & 1) == 0)
        goto LABEL_136;
LABEL_79:
      *v9 = v134;
      swift_bridgeObjectRelease();
      v141 = (_QWORD *)*v9;
      if ((v8 & 1) != 0)
      {
        v142 = swift_bridgeObjectRetain();
      }
      else
      {
        v141[(v15 >> 6) + 8] |= 1 << v15;
        v143 = 8 * v15;
        *(_QWORD *)(v141[6] + v143) = a7;
        *(_QWORD *)(v141[7] + v143) = 0;
        v144 = v141[2];
        v142 = swift_bridgeObjectRetain();
        if (__OFADD__(v144, 1))
        {
          __break(1u);
LABEL_138:
          specialized _NativeDictionary.copy()();
          goto LABEL_92;
        }
        *(_QWORD *)(v142 + 16) = v144 + 1;
      }
      v145 = *(_QWORD *)(v142 + 56);
      swift_bridgeObjectRelease();
      v146 = *(_QWORD *)(v145 + 8 * v15);
      v34 = __OFADD__(v146, v12);
      v147 = v146 + v12;
      v9 = a5;
      v8 = (unint64_t)v192;
      if (v34)
        goto LABEL_119;
      *(_QWORD *)(v145 + 8 * v15) = v147;
      swift_bridgeObjectRelease();
      v182(v196, 0);
      v16 = protocol witness for SetAlgebra.init() in conformance NSPropertyListMutabilityOptions;
      v7 = (uint64_t)specialized thunk for @callee_guaranteed () -> (@owned PoemCooccurrenceCounts);
      a3 = v189;
      a1 = v190;
LABEL_85:
      v12 = a3[2];
      if (v12 < 1)
      {
        v158 = 0;
        v159 = 0;
LABEL_106:
        outlined consume of (@escaping @callee_guaranteed (@guaranteed _PASSqliteStatement) -> (@unowned _PASDBIterAction_))?((uint64_t)v187);
        outlined consume of (@escaping @callee_guaranteed (@guaranteed _PASSqliteStatement) -> (@unowned _PASDBIterAction_))?((uint64_t)v188);
        outlined consume of (@escaping @callee_guaranteed (@guaranteed _PASSqliteStatement) -> (@unowned _PASDBIterAction_))?((uint64_t)v185);
        outlined consume of (@escaping @callee_guaranteed (@guaranteed _PASSqliteStatement) -> (@unowned _PASDBIterAction_))?((uint64_t)v186);
        outlined consume of (@escaping @callee_guaranteed (@guaranteed _PASSqliteStatement) -> (@unowned _PASDBIterAction_))?((uint64_t)v183);
        outlined consume of (@escaping @callee_guaranteed (@guaranteed _PASSqliteStatement) -> (@unowned _PASDBIterAction_))?((uint64_t)v184);
        outlined consume of (@escaping @callee_guaranteed (@guaranteed _PASSqliteStatement) -> (@unowned _PASDBIterAction_))?(v7);
        outlined consume of (@escaping @callee_guaranteed (@guaranteed _PASSqliteStatement) -> (@unowned _PASDBIterAction_))?((uint64_t)v16);
        outlined consume of (@escaping @callee_guaranteed (@guaranteed _PASSqliteStatement) -> (@unowned _PASDBIterAction_))?((uint64_t)v158);
        return outlined consume of (@escaping @callee_guaranteed (@guaranteed _PASSqliteStatement) -> (@unowned _PASDBIterAction_))?((uint64_t)v159);
      }
      *(_QWORD *)&v196[0] = a1;
      *((_QWORD *)&v196[0] + 1) = v11;
      swift_bridgeObjectRetain();
      v148._countAndFlagsBits = 4074812;
      v148._object = (void *)0xE300000000000000;
      String.append(_:)(v148);
      swift_bridgeObjectRetain();
      v149._countAndFlagsBits = (uint64_t)v9;
      v149._object = (void *)v8;
      String.append(_:)(v149);
      swift_bridgeObjectRelease();
      v15 = *((_QWORD *)&v196[0] + 1);
      v8 = *(_QWORD *)&v196[0];
      v192 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *))(*(_QWORD *)a4 + 272))(v195);
      v9 = v150;
      a4 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v196[0] = *v9;
      v151 = *(_QWORD *)&v196[0];
      *v9 = 0x8000000000000000;
      v11 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v15);
      v153 = *(_QWORD *)(v151 + 16);
      v154 = (v152 & 1) == 0;
      v155 = v153 + v154;
      if (__OFADD__(v153, v154))
        goto LABEL_118;
      v126 = v152;
      if (*(_QWORD *)(v151 + 24) >= v155)
      {
        if ((a4 & 1) != 0)
          goto LABEL_92;
        goto LABEL_138;
      }
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v155, a4);
      v156 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v15);
      if ((v126 & 1) != (v157 & 1))
        goto LABEL_142;
      v11 = v156;
LABEL_92:
      *v9 = *(_QWORD *)&v196[0];
      swift_bridgeObjectRelease();
      v160 = (_QWORD *)*v9;
      if ((v126 & 1) == 0)
      {
        v161 = swift_bridgeObjectRetain();
        specialized thunk for @callee_guaranteed () -> (@owned PoemCooccurrenceCounts)(v196, v161);
        v160[(v11 >> 6) + 8] |= 1 << v11;
        v162 = (unint64_t *)(v160[6] + 16 * v11);
        *v162 = v8;
        v162[1] = v15;
        v163 = v160[7] + 88 * v11;
        *(_OWORD *)v163 = v196[0];
        *(_OWORD *)(v163 + 16) = v196[1];
        *(_QWORD *)(v163 + 80) = v197;
        *(_OWORD *)(v163 + 64) = v196[4];
        *(_OWORD *)(v163 + 48) = v196[3];
        *(_OWORD *)(v163 + 32) = v196[2];
        v164 = v160[2];
        v34 = __OFADD__(v164, 1);
        v165 = v164 + 1;
        if (v34)
        {
          __break(1u);
LABEL_140:
          specialized _NativeDictionary.copy()();
          v167 = v194;
          goto LABEL_100;
        }
        v160[2] = v165;
      }
      swift_bridgeObjectRetain();
      v166 = v160[7];
      swift_bridgeObjectRelease();
      v9 = (_QWORD *)(v166 + 88 * v11 + 16);
      a4 = swift_isUniquelyReferenced_nonNull_native();
      v167 = *v9;
      v194 = *v9;
      *v9 = 0x8000000000000000;
      v126 = a7;
      v8 = specialized __RawDictionaryStorage.find<A>(_:)(a7);
      v169 = *(_QWORD *)(v167 + 16);
      v170 = (v168 & 1) == 0;
      v171 = v169 + v170;
      if (__OFADD__(v169, v170))
        goto LABEL_120;
      v11 = v168;
      if (*(_QWORD *)(v167 + 24) < v171)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v171, a4);
        v167 = v194;
        v172 = specialized __RawDictionaryStorage.find<A>(_:)(a7);
        if ((v11 & 1) != (v173 & 1))
          goto LABEL_143;
        v8 = v172;
        goto LABEL_100;
      }
      if ((a4 & 1) == 0)
        goto LABEL_140;
LABEL_100:
      *v9 = v167;
      swift_bridgeObjectRelease();
      v174 = (_QWORD *)*v9;
      if ((v11 & 1) != 0)
      {
        v175 = swift_bridgeObjectRetain();
      }
      else
      {
        v174[(v8 >> 6) + 8] |= 1 << v8;
        v176 = 8 * v8;
        *(_QWORD *)(v174[6] + v176) = v126;
        *(_QWORD *)(v174[7] + v176) = 0;
        v177 = v174[2];
        v175 = swift_bridgeObjectRetain();
        if (__OFADD__(v177, 1))
        {
          __break(1u);
          goto LABEL_142;
        }
        *(_QWORD *)(v175 + 16) = v177 + 1;
      }
      v178 = *(_QWORD *)(v175 + 56);
      swift_bridgeObjectRelease();
      v179 = *(_QWORD *)(v178 + 8 * v8);
      v34 = __OFADD__(v179, v12);
      v180 = v179 + v12;
      if (!v34)
      {
        *(_QWORD *)(v178 + 8 * v8) = v180;
        swift_bridgeObjectRelease();
        v192(v195, 0);
        v159 = protocol witness for SetAlgebra.init() in conformance NSPropertyListMutabilityOptions;
        v158 = specialized thunk for @callee_guaranteed () -> (@owned PoemCooccurrenceCounts);
        goto LABEL_106;
      }
LABEL_121:
      __break(1u);
LABEL_122:
      specialized _NativeDictionary.copy()();
    }
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v23, isUniquelyReferenced_nonNull_native);
  v24 = specialized __RawDictionaryStorage.find<A>(_:)(v15, (uint64_t)v16);
  if ((v7 & 1) == (v25 & 1))
  {
    v8 = v24;
    goto LABEL_8;
  }
LABEL_142:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_143:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void __swiftcall PoemCooccurrenceCounts.init()(DocumentUnderstanding::PoemCooccurrenceCounts *__return_ptr retstr)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = (void *)MEMORY[0x24BEE4AF8];
  v3 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v4 = (void *)specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v2);
  v5 = (void *)specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v2);
  v6 = (void *)specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v2);
  v7 = (void *)specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v2);
  retstr->tagger._rawValue = v3;
  retstr->ecr._rawValue = v4;
  retstr->pronoun._rawValue = v5;
  retstr->sender._rawValue = v6;
  retstr->receiver._rawValue = v7;
  retstr->taggerDistances._rawValue = v2;
  retstr->taggerLengths._rawValue = v2;
  retstr->taggerConfidences._rawValue = v2;
  retstr->ecrDistances._rawValue = v2;
  retstr->ecrLengths._rawValue = v2;
  retstr->ecrConfidences._rawValue = v2;
}

unint64_t specialized thunk for @callee_guaranteed () -> (@owned PoemCooccurrenceCounts)@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t result;

  v2 = MEMORY[0x24BEE4AF8];
  v3 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v4 = specialized Dictionary.init(dictionaryLiteral:)(v2);
  v5 = specialized Dictionary.init(dictionaryLiteral:)(v2);
  v6 = specialized Dictionary.init(dictionaryLiteral:)(v2);
  result = specialized Dictionary.init(dictionaryLiteral:)(v2);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = result;
  a1[5] = v2;
  a1[6] = v2;
  a1[7] = v2;
  a1[8] = v2;
  a1[9] = v2;
  a1[10] = v2;
  return result;
}

Swift::Void __swiftcall PoemConversations.updateCooccurrenceFeatureCounts(photoId:context:)(Swift::String photoId, Swift::OpaquePointer context)
{
  uint64_t v2;
  char *v3;
  uint64_t (*v4)(void);
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t *, _QWORD);
  _QWORD *v20;
  _QWORD *v21;
  char v22;
  _QWORD *v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  char v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  char v46;
  unint64_t v47;
  unint64_t v48;
  Swift::String v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t *, _QWORD);
  _QWORD *v55;
  _QWORD *v56;
  char v57;
  _QWORD *v58;
  char v59;
  unint64_t v60;
  uint64_t v61;
  _BOOL8 v62;
  uint64_t v63;
  char v64;
  unint64_t v65;
  char v66;
  _QWORD *v67;
  uint64_t *v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  char v80;
  unint64_t v81;
  unint64_t v82;
  Swift::String v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(uint64_t *, _QWORD);
  _QWORD *v89;
  _QWORD *v90;
  char v91;
  _QWORD *v92;
  char v93;
  unint64_t v94;
  uint64_t v95;
  _BOOL8 v96;
  uint64_t v97;
  char v98;
  unint64_t v99;
  char v100;
  _QWORD *v101;
  uint64_t *v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  _QWORD *v113;
  char v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t i;
  id v122;
  void *v123;
  id v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  Swift::String v129;
  uint64_t v130;
  uint64_t v131;
  void (*v132)(uint64_t *, _QWORD);
  _QWORD *v133;
  _QWORD *v134;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v136;
  char v137;
  unint64_t v138;
  uint64_t v139;
  _BOOL8 v140;
  uint64_t v141;
  char v142;
  unint64_t v143;
  char v144;
  _QWORD *v145;
  uint64_t *v146;
  uint64_t v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  _QWORD *v156;
  _QWORD *v157;
  char v158;
  unint64_t v159;
  unint64_t v160;
  Swift::String v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void (*v166)(uint64_t *, _QWORD);
  _QWORD *v167;
  _QWORD *v168;
  char v169;
  _QWORD *v170;
  char v171;
  unint64_t v172;
  uint64_t v173;
  _BOOL8 v174;
  uint64_t v175;
  char v176;
  unint64_t v177;
  char v178;
  _QWORD *v179;
  uint64_t *v180;
  uint64_t v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD *v189;
  _QWORD *v190;
  _QWORD *v191;
  char v192;
  unint64_t v193;
  unint64_t v194;
  Swift::String v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  void (*v200)(uint64_t *, _QWORD);
  _QWORD *v201;
  _QWORD *v202;
  char v203;
  _QWORD *v204;
  char v205;
  unint64_t v206;
  uint64_t v207;
  _BOOL8 v208;
  uint64_t v209;
  char v210;
  unint64_t v211;
  char v212;
  _QWORD *v213;
  uint64_t *v214;
  uint64_t v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  _QWORD *v223;
  _QWORD *v224;
  _QWORD *v225;
  char v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  void *v244;
  void *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t (*v249)(uint64_t *);
  uint64_t (*v250)(uint64_t *);
  uint64_t v252;
  _QWORD *v253;
  _QWORD *v254;
  _QWORD *v255;
  _QWORD *v256;
  _QWORD *v257;
  _QWORD *v258;
  uint64_t v259;
  uint64_t v260;
  _OWORD v261[5];
  uint64_t v262;
  _OWORD v263[5];
  uint64_t v264;
  _OWORD v265[5];
  uint64_t v266;
  _OWORD v267[5];
  uint64_t v268;
  _OWORD v269[5];
  uint64_t v270;
  _OWORD v271[5];
  uint64_t v272;

  v230 = *((_QWORD *)context._rawValue + 2);
  if (!v230)
    return;
  v231 = (char *)context._rawValue + 32;
  swift_bridgeObjectRetain();
  v2 = 0;
  while (1)
  {
    v3 = &v231[16 * v2];
    v232 = v2;
    v233 = *((_QWORD *)v3 + 1);
    v4 = *(uint64_t (**)(void))(**(_QWORD **)v3 + 504);
    v246 = swift_retain_n();
    v5 = v4();
    v6 = v5;
    if (v5 >> 62)
      break;
    v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7)
      goto LABEL_6;
LABEL_56:
    v117 = swift_bridgeObjectRelease_n();
    v118 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v246 + 528))(v117);
    v119 = v118;
    if (v118 >> 62)
    {
      swift_bridgeObjectRetain_n();
      v229 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      v239 = v229;
      if (v229)
      {
LABEL_58:
        v235 = v119;
        v237 = v119 & 0xC000000000000001;
        for (i = 4; ; ++i)
        {
          v122 = v237 ? (id)MEMORY[0x22E2AFF34](i - 4, v119) : *(id *)(v119 + 8 * i);
          v123 = v122;
          if (__OFADD__(i - 4, 1))
            break;
          v124 = objc_msgSend(v122, sel_identifier);
          if (v124)
          {
            v125 = v124;
            v243 = i - 3;
            v245 = v123;
            v241 = i;
            v126 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v128 = v127;

            v248 = v126;
            v259 = v126;
            v260 = v128;
            swift_bridgeObjectRetain();
            v129._countAndFlagsBits = 4074812;
            v129._object = (void *)0xE300000000000000;
            String.append(_:)(v129);
            swift_bridgeObjectRetain();
            String.append(_:)(photoId);
            swift_bridgeObjectRelease();
            v130 = v259;
            v131 = v260;
            v250 = *(uint64_t (**)(uint64_t *))(*(_QWORD *)v252 + 272);
            v132 = (void (*)(uint64_t *, _QWORD))v250(&v259);
            v134 = v133;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v136 = (_QWORD *)*v134;
            v256 = (_QWORD *)*v134;
            *v134 = 0x8000000000000000;
            v138 = specialized __RawDictionaryStorage.find<A>(_:)(v130, v131);
            v139 = v136[2];
            v140 = (v137 & 1) == 0;
            v141 = v139 + v140;
            if (__OFADD__(v139, v140))
              goto LABEL_116;
            v142 = v137;
            if (v136[3] >= v141)
            {
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                specialized _NativeDictionary.copy()();
            }
            else
            {
              specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v141, isUniquelyReferenced_nonNull_native);
              v143 = specialized __RawDictionaryStorage.find<A>(_:)(v130, v131);
              if ((v142 & 1) != (v144 & 1))
                goto LABEL_125;
              v138 = v143;
            }
            *v134 = v256;
            swift_bridgeObjectRelease();
            v145 = (_QWORD *)*v134;
            swift_bridgeObjectRetain();
            if ((v142 & 1) == 0)
            {
              specialized thunk for @callee_guaranteed () -> (@owned PoemCooccurrenceCounts)((unint64_t *)v265);
              v145[(v138 >> 6) + 8] |= 1 << v138;
              v146 = (uint64_t *)(v145[6] + 16 * v138);
              *v146 = v130;
              v146[1] = v131;
              v147 = v145[7] + 88 * v138;
              v148 = v265[1];
              *(_OWORD *)v147 = v265[0];
              *(_OWORD *)(v147 + 16) = v148;
              *(_QWORD *)(v147 + 80) = v266;
              v149 = v265[4];
              v150 = v265[2];
              *(_OWORD *)(v147 + 48) = v265[3];
              *(_OWORD *)(v147 + 64) = v149;
              *(_OWORD *)(v147 + 32) = v150;
              v151 = v145[2];
              v39 = __OFADD__(v151, 1);
              v152 = v151 + 1;
              if (v39)
                goto LABEL_122;
              v145[2] = v152;
              swift_bridgeObjectRetain();
            }
            v153 = v145[7];
            swift_bridgeObjectRelease();
            v154 = v153 + 88 * v138;
            v157 = *(_QWORD **)(v154 + 64);
            v156 = (_QWORD *)(v154 + 64);
            v155 = v157;
            v158 = swift_isUniquelyReferenced_nonNull_native();
            *v156 = v157;
            if ((v158 & 1) == 0)
            {
              v155 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v155[2] + 1, 1, v155);
              *v156 = v155;
            }
            v160 = v155[2];
            v159 = v155[3];
            if (v160 >= v159 >> 1)
            {
              v155 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v159 > 1), v160 + 1, 1, v155);
              *v156 = v155;
            }
            v155[2] = v160 + 1;
            *(double *)&v155[v160 + 4] = (double)v233;
            swift_bridgeObjectRelease();
            v132(&v259, 0);
            v259 = v248;
            v260 = v128;
            swift_bridgeObjectRetain();
            v161._countAndFlagsBits = 4074812;
            v161._object = (void *)0xE300000000000000;
            String.append(_:)(v161);
            swift_bridgeObjectRetain();
            String.append(_:)(photoId);
            v162 = swift_bridgeObjectRelease();
            v163 = v259;
            v164 = v260;
            (*(void (**)(uint64_t))(*(_QWORD *)v246 + 264))(v162);
            v165 = String.count.getter();
            swift_bridgeObjectRelease();
            v166 = (void (*)(uint64_t *, _QWORD))v250(&v259);
            v168 = v167;
            v169 = swift_isUniquelyReferenced_nonNull_native();
            v170 = (_QWORD *)*v168;
            v257 = (_QWORD *)*v168;
            *v168 = 0x8000000000000000;
            v172 = specialized __RawDictionaryStorage.find<A>(_:)(v163, v164);
            v173 = v170[2];
            v174 = (v171 & 1) == 0;
            v175 = v173 + v174;
            if (__OFADD__(v173, v174))
              goto LABEL_117;
            v176 = v171;
            if (v170[3] >= v175)
            {
              if ((v169 & 1) == 0)
                specialized _NativeDictionary.copy()();
            }
            else
            {
              specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v175, v169);
              v177 = specialized __RawDictionaryStorage.find<A>(_:)(v163, v164);
              if ((v176 & 1) != (v178 & 1))
                goto LABEL_125;
              v172 = v177;
            }
            *v168 = v257;
            swift_bridgeObjectRelease();
            v179 = (_QWORD *)*v168;
            swift_bridgeObjectRetain();
            if ((v176 & 1) == 0)
            {
              specialized thunk for @callee_guaranteed () -> (@owned PoemCooccurrenceCounts)((unint64_t *)v263);
              v179[(v172 >> 6) + 8] |= 1 << v172;
              v180 = (uint64_t *)(v179[6] + 16 * v172);
              *v180 = v163;
              v180[1] = v164;
              v181 = v179[7] + 88 * v172;
              v182 = v263[1];
              *(_OWORD *)v181 = v263[0];
              *(_OWORD *)(v181 + 16) = v182;
              *(_QWORD *)(v181 + 80) = v264;
              v183 = v263[4];
              v184 = v263[2];
              *(_OWORD *)(v181 + 48) = v263[3];
              *(_OWORD *)(v181 + 64) = v183;
              *(_OWORD *)(v181 + 32) = v184;
              v185 = v179[2];
              v39 = __OFADD__(v185, 1);
              v186 = v185 + 1;
              if (v39)
                goto LABEL_123;
              v179[2] = v186;
              swift_bridgeObjectRetain();
            }
            v187 = v179[7];
            swift_bridgeObjectRelease();
            v188 = v187 + 88 * v172;
            v191 = *(_QWORD **)(v188 + 72);
            v190 = (_QWORD *)(v188 + 72);
            v189 = v191;
            v192 = swift_isUniquelyReferenced_nonNull_native();
            *v190 = v191;
            if ((v192 & 1) == 0)
            {
              v189 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v189[2] + 1, 1, v189);
              *v190 = v189;
            }
            v194 = v189[2];
            v193 = v189[3];
            if (v194 >= v193 >> 1)
            {
              v189 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v193 > 1), v194 + 1, 1, v189);
              *v190 = v189;
            }
            v189[2] = v194 + 1;
            *(double *)&v189[v194 + 4] = (double)v165;
            swift_bridgeObjectRelease();
            v166(&v259, 0);
            v259 = v248;
            v260 = v128;
            swift_bridgeObjectRetain();
            v195._countAndFlagsBits = 4074812;
            v195._object = (void *)0xE300000000000000;
            String.append(_:)(v195);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            String.append(_:)(photoId);
            swift_bridgeObjectRelease();
            v197 = v259;
            v196 = v260;
            objc_msgSend(v245, sel_confidenceScore);
            v199 = v198;
            v200 = (void (*)(uint64_t *, _QWORD))v250(&v259);
            v202 = v201;
            v203 = swift_isUniquelyReferenced_nonNull_native();
            v204 = (_QWORD *)*v202;
            v258 = (_QWORD *)*v202;
            *v202 = 0x8000000000000000;
            v206 = specialized __RawDictionaryStorage.find<A>(_:)(v197, v196);
            v207 = v204[2];
            v208 = (v205 & 1) == 0;
            v209 = v207 + v208;
            if (__OFADD__(v207, v208))
              goto LABEL_118;
            v210 = v205;
            if (v204[3] >= v209)
            {
              if ((v203 & 1) == 0)
                specialized _NativeDictionary.copy()();
            }
            else
            {
              specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v209, v203);
              v211 = specialized __RawDictionaryStorage.find<A>(_:)(v197, v196);
              if ((v210 & 1) != (v212 & 1))
                goto LABEL_125;
              v206 = v211;
            }
            *v202 = v258;
            swift_bridgeObjectRelease();
            v213 = (_QWORD *)*v202;
            swift_bridgeObjectRetain();
            if ((v210 & 1) == 0)
            {
              specialized thunk for @callee_guaranteed () -> (@owned PoemCooccurrenceCounts)((unint64_t *)v261);
              v213[(v206 >> 6) + 8] |= 1 << v206;
              v214 = (uint64_t *)(v213[6] + 16 * v206);
              *v214 = v197;
              v214[1] = v196;
              v215 = v213[7] + 88 * v206;
              v216 = v261[1];
              *(_OWORD *)v215 = v261[0];
              *(_OWORD *)(v215 + 16) = v216;
              *(_QWORD *)(v215 + 80) = v262;
              v217 = v261[4];
              v218 = v261[2];
              *(_OWORD *)(v215 + 48) = v261[3];
              *(_OWORD *)(v215 + 64) = v217;
              *(_OWORD *)(v215 + 32) = v218;
              v219 = v213[2];
              v39 = __OFADD__(v219, 1);
              v220 = v219 + 1;
              if (v39)
                goto LABEL_124;
              v213[2] = v220;
              swift_bridgeObjectRetain();
            }
            v221 = v213[7];
            swift_bridgeObjectRelease();
            v222 = v221 + 88 * v206;
            v225 = *(_QWORD **)(v222 + 80);
            v224 = (_QWORD *)(v222 + 80);
            v223 = v225;
            v226 = swift_isUniquelyReferenced_nonNull_native();
            *v224 = v225;
            if ((v226 & 1) == 0)
            {
              v223 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v223[2] + 1, 1, v223);
              *v224 = v223;
            }
            i = v241;
            v228 = v223[2];
            v227 = v223[3];
            if (v228 >= v227 >> 1)
            {
              v223 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v227 > 1), v228 + 1, 1, v223);
              *v224 = v223;
            }
            v119 = v235;
            v223[2] = v228 + 1;
            v223[v228 + 4] = v199;
            swift_bridgeObjectRelease();
            v200(&v259, 0);

            if (v243 == v239)
              goto LABEL_3;
          }
          else
          {

            if (i - 3 == v239)
              goto LABEL_3;
          }
        }
        goto LABEL_112;
      }
    }
    else
    {
      v120 = *(_QWORD *)((v118 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      v239 = v120;
      if (v120)
        goto LABEL_58;
    }
LABEL_3:
    v2 = v232 + 1;
    swift_bridgeObjectRelease_n();
    swift_release_n();
    if (v232 + 1 == v230)
    {
      swift_bridgeObjectRelease();
      return;
    }
  }
  swift_bridgeObjectRetain_n();
  v7 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v7)
    goto LABEL_56;
LABEL_6:
  v236 = v6;
  v238 = v6 & 0xC000000000000001;
  v8 = 4;
  v234 = v7;
  while (1)
  {
    v9 = v238 ? (id)MEMORY[0x22E2AFF34](v8 - 4, v6) : *(id *)(v6 + 8 * v8);
    v10 = v9;
    if (__OFADD__(v8 - 4, 1))
      break;
    v11 = objc_msgSend(v9, sel_identifier);
    if (v11)
    {
      v12 = v11;
      v240 = v8 - 3;
      v242 = v8;
      v244 = v10;
      v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v15 = v14;

      v247 = v13;
      v259 = v13;
      v260 = v15;
      swift_bridgeObjectRetain();
      v16._countAndFlagsBits = 4074812;
      v16._object = (void *)0xE300000000000000;
      String.append(_:)(v16);
      swift_bridgeObjectRetain();
      String.append(_:)(photoId);
      swift_bridgeObjectRelease();
      v17 = v259;
      v18 = v260;
      v249 = *(uint64_t (**)(uint64_t *))(*(_QWORD *)v252 + 272);
      v19 = (void (*)(uint64_t *, _QWORD))v249(&v259);
      v21 = v20;
      v22 = swift_isUniquelyReferenced_nonNull_native();
      v23 = (_QWORD *)*v21;
      v253 = (_QWORD *)*v21;
      *v21 = 0x8000000000000000;
      v25 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v18);
      v26 = v23[2];
      v27 = (v24 & 1) == 0;
      v28 = v26 + v27;
      if (__OFADD__(v26, v27))
        goto LABEL_113;
      v29 = v24;
      if (v23[3] >= v28)
      {
        if ((v22 & 1) == 0)
          specialized _NativeDictionary.copy()();
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v28, v22);
        v30 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v18);
        if ((v29 & 1) != (v31 & 1))
          goto LABEL_125;
        v25 = v30;
      }
      *v21 = v253;
      swift_bridgeObjectRelease();
      v32 = (_QWORD *)*v21;
      swift_bridgeObjectRetain();
      if ((v29 & 1) == 0)
      {
        specialized thunk for @callee_guaranteed () -> (@owned PoemCooccurrenceCounts)((unint64_t *)v271);
        v32[(v25 >> 6) + 8] |= 1 << v25;
        v33 = (uint64_t *)(v32[6] + 16 * v25);
        *v33 = v17;
        v33[1] = v18;
        v34 = v32[7] + 88 * v25;
        v35 = v271[1];
        *(_OWORD *)v34 = v271[0];
        *(_OWORD *)(v34 + 16) = v35;
        *(_QWORD *)(v34 + 80) = v272;
        v36 = v271[4];
        v37 = v271[2];
        *(_OWORD *)(v34 + 48) = v271[3];
        *(_OWORD *)(v34 + 64) = v36;
        *(_OWORD *)(v34 + 32) = v37;
        v38 = v32[2];
        v39 = __OFADD__(v38, 1);
        v40 = v38 + 1;
        if (v39)
          goto LABEL_119;
        v32[2] = v40;
        swift_bridgeObjectRetain();
      }
      v41 = v32[7];
      swift_bridgeObjectRelease();
      v42 = v41 + 88 * v25;
      v45 = *(_QWORD **)(v42 + 40);
      v44 = (_QWORD *)(v42 + 40);
      v43 = v45;
      v46 = swift_isUniquelyReferenced_nonNull_native();
      *v44 = v45;
      if ((v46 & 1) == 0)
      {
        v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v43[2] + 1, 1, v43);
        *v44 = v43;
      }
      v48 = v43[2];
      v47 = v43[3];
      if (v48 >= v47 >> 1)
      {
        v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v47 > 1), v48 + 1, 1, v43);
        *v44 = v43;
      }
      v43[2] = v48 + 1;
      *(double *)&v43[v48 + 4] = (double)v233;
      swift_bridgeObjectRelease();
      v19(&v259, 0);
      v259 = v247;
      v260 = v15;
      swift_bridgeObjectRetain();
      v49._countAndFlagsBits = 4074812;
      v49._object = (void *)0xE300000000000000;
      String.append(_:)(v49);
      swift_bridgeObjectRetain();
      String.append(_:)(photoId);
      v50 = swift_bridgeObjectRelease();
      v51 = v259;
      v52 = v260;
      (*(void (**)(uint64_t))(*(_QWORD *)v246 + 264))(v50);
      v53 = String.count.getter();
      swift_bridgeObjectRelease();
      v54 = (void (*)(uint64_t *, _QWORD))v249(&v259);
      v56 = v55;
      v57 = swift_isUniquelyReferenced_nonNull_native();
      v58 = (_QWORD *)*v56;
      v254 = (_QWORD *)*v56;
      *v56 = 0x8000000000000000;
      v60 = specialized __RawDictionaryStorage.find<A>(_:)(v51, v52);
      v61 = v58[2];
      v62 = (v59 & 1) == 0;
      v63 = v61 + v62;
      if (__OFADD__(v61, v62))
        goto LABEL_114;
      v64 = v59;
      if (v58[3] >= v63)
      {
        if ((v57 & 1) == 0)
          specialized _NativeDictionary.copy()();
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v63, v57);
        v65 = specialized __RawDictionaryStorage.find<A>(_:)(v51, v52);
        if ((v64 & 1) != (v66 & 1))
          goto LABEL_125;
        v60 = v65;
      }
      *v56 = v254;
      swift_bridgeObjectRelease();
      v67 = (_QWORD *)*v56;
      swift_bridgeObjectRetain();
      if ((v64 & 1) == 0)
      {
        specialized thunk for @callee_guaranteed () -> (@owned PoemCooccurrenceCounts)((unint64_t *)v269);
        v67[(v60 >> 6) + 8] |= 1 << v60;
        v68 = (uint64_t *)(v67[6] + 16 * v60);
        *v68 = v51;
        v68[1] = v52;
        v69 = v67[7] + 88 * v60;
        v70 = v269[1];
        *(_OWORD *)v69 = v269[0];
        *(_OWORD *)(v69 + 16) = v70;
        *(_QWORD *)(v69 + 80) = v270;
        v71 = v269[4];
        v72 = v269[2];
        *(_OWORD *)(v69 + 48) = v269[3];
        *(_OWORD *)(v69 + 64) = v71;
        *(_OWORD *)(v69 + 32) = v72;
        v73 = v67[2];
        v39 = __OFADD__(v73, 1);
        v74 = v73 + 1;
        if (v39)
          goto LABEL_120;
        v67[2] = v74;
        swift_bridgeObjectRetain();
      }
      v75 = v67[7];
      swift_bridgeObjectRelease();
      v76 = v75 + 88 * v60;
      v79 = *(_QWORD **)(v76 + 48);
      v78 = (_QWORD *)(v76 + 48);
      v77 = v79;
      v80 = swift_isUniquelyReferenced_nonNull_native();
      *v78 = v79;
      if ((v80 & 1) == 0)
      {
        v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v77[2] + 1, 1, v77);
        *v78 = v77;
      }
      v82 = v77[2];
      v81 = v77[3];
      if (v82 >= v81 >> 1)
      {
        v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v81 > 1), v82 + 1, 1, v77);
        *v78 = v77;
      }
      v77[2] = v82 + 1;
      *(double *)&v77[v82 + 4] = (double)v53;
      swift_bridgeObjectRelease();
      v54(&v259, 0);
      v259 = v247;
      v260 = v15;
      swift_bridgeObjectRetain();
      v83._countAndFlagsBits = 4074812;
      v83._object = (void *)0xE300000000000000;
      String.append(_:)(v83);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.append(_:)(photoId);
      swift_bridgeObjectRelease();
      v85 = v259;
      v84 = v260;
      objc_msgSend(v244, sel_confidenceScore);
      v87 = v86;
      v88 = (void (*)(uint64_t *, _QWORD))v249(&v259);
      v90 = v89;
      v91 = swift_isUniquelyReferenced_nonNull_native();
      v92 = (_QWORD *)*v90;
      v255 = (_QWORD *)*v90;
      *v90 = 0x8000000000000000;
      v94 = specialized __RawDictionaryStorage.find<A>(_:)(v85, v84);
      v95 = v92[2];
      v96 = (v93 & 1) == 0;
      v97 = v95 + v96;
      if (__OFADD__(v95, v96))
        goto LABEL_115;
      v98 = v93;
      if (v92[3] >= v97)
      {
        if ((v91 & 1) == 0)
          specialized _NativeDictionary.copy()();
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v97, v91);
        v99 = specialized __RawDictionaryStorage.find<A>(_:)(v85, v84);
        if ((v98 & 1) != (v100 & 1))
          goto LABEL_125;
        v94 = v99;
      }
      *v90 = v255;
      swift_bridgeObjectRelease();
      v101 = (_QWORD *)*v90;
      swift_bridgeObjectRetain();
      if ((v98 & 1) == 0)
      {
        specialized thunk for @callee_guaranteed () -> (@owned PoemCooccurrenceCounts)((unint64_t *)v267);
        v101[(v94 >> 6) + 8] |= 1 << v94;
        v102 = (uint64_t *)(v101[6] + 16 * v94);
        *v102 = v85;
        v102[1] = v84;
        v103 = v101[7] + 88 * v94;
        v104 = v267[1];
        *(_OWORD *)v103 = v267[0];
        *(_OWORD *)(v103 + 16) = v104;
        *(_QWORD *)(v103 + 80) = v268;
        v105 = v267[4];
        v106 = v267[2];
        *(_OWORD *)(v103 + 48) = v267[3];
        *(_OWORD *)(v103 + 64) = v105;
        *(_OWORD *)(v103 + 32) = v106;
        v107 = v101[2];
        v39 = __OFADD__(v107, 1);
        v108 = v107 + 1;
        if (v39)
          goto LABEL_121;
        v101[2] = v108;
        swift_bridgeObjectRetain();
      }
      v109 = v101[7];
      swift_bridgeObjectRelease();
      v110 = v109 + 88 * v94;
      v113 = *(_QWORD **)(v110 + 56);
      v112 = (_QWORD *)(v110 + 56);
      v111 = v113;
      v114 = swift_isUniquelyReferenced_nonNull_native();
      *v112 = v113;
      if ((v114 & 1) == 0)
      {
        v111 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v111[2] + 1, 1, v111);
        *v112 = v111;
      }
      v7 = v234;
      v116 = v111[2];
      v115 = v111[3];
      if (v116 >= v115 >> 1)
      {
        v111 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v115 > 1), v116 + 1, 1, v111);
        *v112 = v111;
      }
      v6 = v236;
      v111[2] = v116 + 1;
      v111[v116 + 4] = v87;
      swift_bridgeObjectRelease();
      v88(&v259, 0);

      v8 = v242;
      if (v240 == v234)
        goto LABEL_56;
    }
    else
    {

      if (v8 - 3 == v7)
        goto LABEL_56;
    }
    ++v8;
  }
  __break(1u);
LABEL_112:
  __break(1u);
LABEL_113:
  __break(1u);
LABEL_114:
  __break(1u);
LABEL_115:
  __break(1u);
LABEL_116:
  __break(1u);
LABEL_117:
  __break(1u);
LABEL_118:
  __break(1u);
LABEL_119:
  __break(1u);
LABEL_120:
  __break(1u);
LABEL_121:
  __break(1u);
LABEL_122:
  __break(1u);
LABEL_123:
  __break(1u);
LABEL_124:
  __break(1u);
LABEL_125:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

Swift::String_optional __swiftcall PoemConversations.getId(name:)(Swift::String name)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(_QWORD *, _QWORD);
  uint64_t *v16;
  uint64_t *v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  Swift::String_optional result;
  uint64_t v28;
  _QWORD v29[4];

  v2 = v1;
  v3 = specialized static PoemStreamUtilities.normalizedName(name:)();
  v5 = v4;
  v6 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 160);
  v7 = swift_bridgeObjectRetain();
  if (*(_QWORD *)(v6(v7) + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(v3, v5), (v8 & 1) != 0))
  {
    swift_bridgeObjectRelease();
    v9 = swift_bridgeObjectRelease();
  }
  else
  {
    v10 = swift_bridgeObjectRelease();
    v11 = *(_QWORD *)(v6(v10) + 16);
    swift_bridgeObjectRelease();
    v29[0] = v11;
    v12 = dispatch thunk of CustomStringConvertible.description.getter();
    v14 = v13;
    v15 = (uint64_t (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *))(*(_QWORD *)v2 + 176))(v29);
    v17 = v16;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v28 = *v17;
    *v17 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v12, v14, v3, v5, isUniquelyReferenced_nonNull_native);
    *v17 = v28;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v9 = v15(v29, 0);
  }
  v19 = v6(v9);
  if (*(_QWORD *)(v19 + 16) && (v20 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v5), (v21 & 1) != 0))
  {
    v22 = (uint64_t *)(*(_QWORD *)(v19 + 56) + 16 * v20);
    v23 = *v22;
    v24 = (void *)v22[1];
    swift_bridgeObjectRetain();
  }
  else
  {
    v23 = 0;
    v24 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v25 = v23;
  v26 = v24;
  result.value._object = v26;
  result.value._countAndFlagsBits = v25;
  return result;
}

Swift::String_optional __swiftcall PoemConversations.getName(id:)(Swift::String id)
{
  uint64_t v1;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t (*v4)(void);
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  Swift::String_optional result;

  object = id._object;
  countAndFlagsBits = id._countAndFlagsBits;
  v4 = *(uint64_t (**)(void))(*(_QWORD *)v1 + 160);
  v5 = *(_QWORD *)(v4() + 16);
  v6 = swift_bridgeObjectRelease();
  v7 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 184);
  v8 = *(_QWORD *)(v7(v6) + 16);
  v9 = swift_bridgeObjectRelease();
  if (v5 != v8)
  {
    v10 = ((uint64_t (*)(uint64_t))v4)(v9);
    specialized Sequence.forEach(_:)(v10, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))partial apply for closure #1 in PoemConversations.getName(id:));
    swift_bridgeObjectRelease();
  }
  v11 = swift_bridgeObjectRetain();
  v12 = v7(v11);
  if (*(_QWORD *)(v12 + 16)
    && (v13 = specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, (uint64_t)object), (v14 & 1) != 0))
  {
    v15 = (uint64_t *)(*(_QWORD *)(v12 + 56) + 16 * v13);
    v16 = *v15;
    v17 = (void *)v15[1];
    swift_bridgeObjectRetain();
  }
  else
  {
    v16 = 0;
    v17 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v18 = v16;
  v19 = v17;
  result.value._object = v19;
  result.value._countAndFlagsBits = v18;
  return result;
}

uint64_t closure #1 in PoemConversations.getName(id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v9)(_BYTE *);
  uint64_t (*v10)(_BYTE *, _QWORD);
  uint64_t *v11;
  uint64_t *v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  _BYTE v16[32];

  v9 = *(uint64_t (**)(_BYTE *))(*(_QWORD *)a5 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10 = (uint64_t (*)(_BYTE *, _QWORD))v9(v16);
  v12 = v11;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v15 = *v12;
  *v12 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, isUniquelyReferenced_nonNull_native);
  *v12 = v15;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10(v16, 0);
}

Swift::tuple_eid_String_pid_String __swiftcall PoemConversations.getEntityAndImageId(cooccurrenceKey:)(Swift::String cooccurrenceKey)
{
  unint64_t v1;
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  Swift::tuple_eid_String_pid_String result;

  v1 = lazy protocol witness table accessor for type String and conformance String();
  v2 = (_QWORD *)MEMORY[0x22E2AFE50](4074812, 0xE300000000000000, 1, 1, MEMORY[0x24BEE0D00], v1);
  if (!v2[2])
  {
    __break(1u);
    goto LABEL_5;
  }
  v6 = v2;
  v7 = v2[4];
  v8 = v2[5];
  v9 = v2[6];
  v10 = v2[7];
  swift_bridgeObjectRetain();
  v11 = MEMORY[0x22E2AF988](v7, v8, v9, v10);
  v13 = v12;
  v2 = (_QWORD *)swift_bridgeObjectRelease();
  if (v6[2] < 2uLL)
  {
LABEL_5:
    __break(1u);
    goto LABEL_6;
  }
  v14 = v6[8];
  v15 = v6[9];
  v16 = v6[10];
  v17 = v6[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18 = MEMORY[0x22E2AF988](v14, v15, v16, v17);
  v20 = v19;
  swift_bridgeObjectRelease();
  v2 = (_QWORD *)v11;
  v3 = v13;
  v4 = v18;
  v5 = v20;
LABEL_6:
  result.pid._object = v5;
  result.pid._countAndFlagsBits = v4;
  result.eid._object = v3;
  result.eid._countAndFlagsBits = (uint64_t)v2;
  return result;
}

Swift::Int __swiftcall PoemConversations.getImagesCountFor(pid:)(Swift::String pid)
{
  uint64_t v1;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  Swift::Int result;
  int64_t v11;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  object = pid._object;
  countAndFlagsBits = pid._countAndFlagsBits;
  v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 280);
  v5 = swift_bridgeObjectRetain();
  v6 = v4(v5);
  if (*(_QWORD *)(v6 + 16)
    && (v7 = specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, (uint64_t)object), (v8 & 1) != 0))
  {
    v9 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v7);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v11 = 0;
    v12 = 0;
    v13 = v9 + 64;
    v14 = 1 << *(_BYTE *)(v9 + 32);
    v15 = -1;
    if (v14 < 64)
      v15 = ~(-1 << v14);
    v16 = v15 & *(_QWORD *)(v9 + 64);
    v17 = (unint64_t)(v14 + 63) >> 6;
    do
    {
      if (v16)
      {
        v18 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        v19 = v18 | (v11 << 6);
      }
      else
      {
        v22 = v11 + 1;
        if (__OFADD__(v11, 1))
          goto LABEL_31;
        if (v22 >= v17)
        {
LABEL_28:
          swift_release();
          return v12;
        }
        v23 = *(_QWORD *)(v13 + 8 * v22);
        ++v11;
        if (!v23)
        {
          v11 = v22 + 1;
          if (v22 + 1 >= v17)
            goto LABEL_28;
          v23 = *(_QWORD *)(v13 + 8 * v11);
          if (!v23)
          {
            v11 = v22 + 2;
            if (v22 + 2 >= v17)
              goto LABEL_28;
            v23 = *(_QWORD *)(v13 + 8 * v11);
            if (!v23)
            {
              v11 = v22 + 3;
              if (v22 + 3 >= v17)
                goto LABEL_28;
              v23 = *(_QWORD *)(v13 + 8 * v11);
              if (!v23)
              {
                v11 = v22 + 4;
                if (v22 + 4 >= v17)
                  goto LABEL_28;
                v23 = *(_QWORD *)(v13 + 8 * v11);
                if (!v23)
                {
                  v24 = v22 + 5;
                  if (v24 >= v17)
                    goto LABEL_28;
                  v23 = *(_QWORD *)(v13 + 8 * v24);
                  if (!v23)
                  {
                    while (1)
                    {
                      v11 = v24 + 1;
                      if (__OFADD__(v24, 1))
                        goto LABEL_32;
                      if (v11 >= v17)
                        goto LABEL_28;
                      v23 = *(_QWORD *)(v13 + 8 * v11);
                      ++v24;
                      if (v23)
                        goto LABEL_26;
                    }
                  }
                  v11 = v24;
                }
              }
            }
          }
        }
LABEL_26:
        v16 = (v23 - 1) & v23;
        v19 = __clz(__rbit64(v23)) + (v11 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v19);
      v21 = __OFADD__(v12, v20);
      v12 += v20;
    }
    while (!v21);
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  return result;
}

Swift::String_optional __swiftcall PoemConversations.inferredDeviceOwner()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  Swift::String_optional result;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
  v2 = specialized Sequence.max(by:)(v1);
  v4 = v3;
  swift_bridgeObjectRelease();
  if (v4)
    v5 = v2;
  else
    v5 = 0;
  v6 = v4;
  result.value._object = v6;
  result.value._countAndFlagsBits = v5;
  return result;
}

uint64_t PoemConversations.getContactInfoFromSender(name:)(uint64_t a1, uint64_t a2)
{
  return PoemConversations.getContactInfoFromSender(name:)(a1, a2, PoemConversations.getSenderExtractions());
}

uint64_t PoemConversations.getContactInfoFromReceiver(name:)(uint64_t a1, uint64_t a2)
{
  return PoemConversations.getContactInfoFromSender(name:)(a1, a2, PoemConversations.getReceiverExtractions());
}

uint64_t PoemConversations.getContactInfoFromSender(name:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  id v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  id v13;
  void *v14;

  v5 = a3();
  swift_bridgeObjectRetain();
  v6 = specialized _ArrayProtocol.filter(_:)(v5, a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!(v6 >> 62))
  {
    result = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (result)
      goto LABEL_3;
LABEL_14:
    swift_bridgeObjectRelease();
    return 0;
  }
  result = _CocoaArrayWrapper.endIndex.getter();
  if (!result)
    goto LABEL_14;
LABEL_3:
  if ((v6 & 0xC000000000000001) != 0)
  {
    v8 = (id)MEMORY[0x22E2AFF34](0, v6);
    goto LABEL_6;
  }
  if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v8 = *(id *)(v6 + 32);
LABEL_6:
    v9 = v8;
    swift_bridgeObjectRelease();
    v10 = objc_msgSend(v9, sel_contactIdentifier);
    if (v10)
    {
      v11 = v10;
      v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    }
    else
    {
      v12 = 0;
    }
    v13 = objc_msgSend(v9, sel_text);
    if (v13)
    {
      v14 = v13;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

    }
    return v12;
  }
  __break(1u);
  return result;
}

Swift::tuple_handle_String_optional_name_String_optional __swiftcall PoemConversations.getContactInfo(name:)(Swift::String name)
{
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::tuple_handle_String_optional_name_String_optional result;

  object = name._object;
  countAndFlagsBits = name._countAndFlagsBits;
  v3 = PoemConversations.getContactInfoFromSender(name:)(name._countAndFlagsBits, (uint64_t)name._object);
  if (v4)
  {
    v7 = v3;
  }
  else
  {
    swift_bridgeObjectRelease();
    v7 = PoemConversations.getContactInfoFromReceiver(name:)(countAndFlagsBits, (uint64_t)object);
    if (!v4)
    {
      swift_bridgeObjectRelease();
      v4 = 0;
      v6 = 0;
      v5 = v7;
    }
  }
  v8 = v7;
  result.name.value._object = v6;
  result.name.value._countAndFlagsBits = v5;
  result.handle.value._object = v4;
  result.handle.value._countAndFlagsBits = v8;
  return result;
}

Swift::tuple_megadomeId_String_optional_name_String_optional __swiftcall PoemConversations.getPhotoInfo(pid:)(Swift::String pid)
{
  void *object;
  uint64_t countAndFlagsBits;
  unint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  Swift::tuple_megadomeId_String_optional_name_String_optional result;

  object = pid._object;
  countAndFlagsBits = pid._countAndFlagsBits;
  v3 = PoemConversations.getMadExtractions()();
  swift_bridgeObjectRetain();
  v4 = specialized _ArrayProtocol.filter(_:)(v3, countAndFlagsBits, (uint64_t)object);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!(v4 >> 62))
  {
    v8 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v8)
      goto LABEL_3;
LABEL_13:
    swift_bridgeObjectRelease();
    v13 = 0;
    v15 = 0;
    goto LABEL_14;
  }
  v8 = _CocoaArrayWrapper.endIndex.getter();
  if (!v8)
    goto LABEL_13;
LABEL_3:
  if ((v4 & 0xC000000000000001) != 0)
  {
    v9 = (id)MEMORY[0x22E2AFF34](0, v4);
  }
  else
  {
    if (!*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_18;
    }
    v9 = *(id *)(v4 + 32);
  }
  v10 = v9;
  swift_bridgeObjectRelease();
  v11 = objc_msgSend(v10, sel_contactIdentifier);
  if (v11)
  {
    v12 = v11;
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v15 = v14;

  }
  else
  {
    v13 = 0;
    v15 = 0;
  }
  v16 = objc_msgSend(v10, sel_text);
  if (!v16)
  {

LABEL_14:
    v18 = 0;
    v20 = 0;
    goto LABEL_15;
  }
  v17 = v16;
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v20 = v19;

LABEL_15:
  v8 = v13;
  v5 = v15;
  v6 = v18;
  v7 = v20;
LABEL_18:
  result.name.value._object = v7;
  result.name.value._countAndFlagsBits = v6;
  result.megadomeId.value._object = v5;
  result.megadomeId.value._countAndFlagsBits = v8;
  return result;
}

uint64_t PoemConversations.photoIdToName()()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char **v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  char v28;
  unint64_t v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  char v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t result;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;

  v0 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v1 = PoemConversations.getMadExtractions()();
  v2 = v1;
  if (v1 >> 62)
    goto LABEL_36;
  v3 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v3)
  {
LABEL_37:
    swift_bridgeObjectRelease_n();
    return (uint64_t)v0;
  }
LABEL_3:
  if (v3 >= 1)
  {
    v4 = 0;
    v5 = v2 & 0xC000000000000001;
    v6 = &selRef_setExportedObject_;
    v43 = v2;
    v44 = v2 & 0xC000000000000001;
    v45 = v3;
    while (1)
    {
      if (v5)
        v7 = (id)MEMORY[0x22E2AFF34](v4, v2);
      else
        v7 = *(id *)(v2 + 8 * v4 + 32);
      v8 = v7;
      v9 = objc_msgSend(v7, v6[79], v43);
      if (!v9)
      {

        goto LABEL_6;
      }
      v10 = v9;
      v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v13 = v12;

      v14 = HIBYTE(v13) & 0xF;
      if ((v13 & 0x2000000000000000) == 0)
        v14 = v11 & 0xFFFFFFFFFFFFLL;
      if (v14 && (v15 = objc_msgSend(v8, sel_identifier)) != 0)
      {
        v16 = v15;
        v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v18 = v17;

        if (v0[2])
        {
          swift_bridgeObjectRetain();
          specialized __RawDictionaryStorage.find<A>(_:)(v48, v18);
          if ((v19 & 1) != 0)
          {

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            v6 = &selRef_setExportedObject_;
            goto LABEL_6;
          }
          swift_bridgeObjectRelease();
        }
        String.lowercased()();
        v20 = lazy protocol witness table accessor for type String and conformance String();
        v21 = (_QWORD *)MEMORY[0x22E2AFE50](32, 0xE100000000000000, 1, 1, MEMORY[0x24BEE0D00], v20);
        swift_bridgeObjectRelease();
        if (v21[2])
        {
          v22 = v21[4];
          v23 = v21[5];
          v24 = v21[6];
          v25 = v21[7];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v46 = MEMORY[0x22E2AF988](v22, v23, v24, v25);
          v47 = v26;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v46 = 0;
          v47 = 0xE000000000000000;
        }
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v2 = v48;
        v29 = specialized __RawDictionaryStorage.find<A>(_:)(v48, v18);
        v30 = v0[2];
        v31 = (v28 & 1) == 0;
        v32 = v30 + v31;
        if (__OFADD__(v30, v31))
        {
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          swift_bridgeObjectRetain();
          v3 = _CocoaArrayWrapper.endIndex.getter();
          if (!v3)
            goto LABEL_37;
          goto LABEL_3;
        }
        v33 = v28;
        if (v0[3] >= v32)
        {
          v5 = v44;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            specialized _NativeDictionary.copy()();
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v32, isUniquelyReferenced_nonNull_native);
          v34 = specialized __RawDictionaryStorage.find<A>(_:)(v48, v18);
          v5 = v44;
          if ((v33 & 1) != (v35 & 1))
            goto LABEL_39;
          v29 = v34;
        }
        v3 = v45;
        if ((v33 & 1) != 0)
        {
          v36 = (uint64_t *)(v0[7] + 16 * v29);
          swift_bridgeObjectRelease();
          *v36 = v46;
          v36[1] = v47;
        }
        else
        {
          v0[(v29 >> 6) + 8] |= 1 << v29;
          v37 = (uint64_t *)(v0[6] + 16 * v29);
          *v37 = v48;
          v37[1] = v18;
          v38 = (uint64_t *)(v0[7] + 16 * v29);
          *v38 = v46;
          v38[1] = v47;
          v39 = v0[2];
          v40 = __OFADD__(v39, 1);
          v41 = v39 + 1;
          if (v40)
            goto LABEL_35;
          v0[2] = v41;
          swift_bridgeObjectRetain();
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v2 = v43;
        v6 = &selRef_setExportedObject_;
      }
      else
      {

        swift_bridgeObjectRelease();
      }
LABEL_6:
      if (v3 == ++v4)
        goto LABEL_37;
    }
  }
  __break(1u);
LABEL_39:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int __swiftcall PoemConversations.countMessages()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::Int result;
  uint64_t v4;
  Swift::Int v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
  v2 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVySS21DocumentUnderstanding17PoemMessageThreadC_G_Sis5NeverOTg504_s21e15Understanding17g41ConversationsC13countMessagesSiyFSiAA0C13hI6CXEfU_Tf1cn_n(v1);
  result = swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(v2 + 16);
  if (v4)
  {
    v5 = 0;
    v6 = (uint64_t *)(v2 + 32);
    while (1)
    {
      v7 = *v6++;
      v8 = __OFADD__(v5, v7);
      v5 += v7;
      if (v8)
        break;
      if (!--v4)
        goto LABEL_7;
    }
    __break(1u);
  }
  else
  {
    v5 = 0;
LABEL_7:
    swift_bridgeObjectRelease();
    return v5;
  }
  return result;
}

uint64_t PoemConversations.getSenderExtractions()()
{
  return PoemConversations.getSenderExtractions()((void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in PoemConversations.getSenderExtractions());
}

uint64_t closure #1 in PoemConversations.getSenderExtractions()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  _QWORD *v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t j;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  v3 = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 136))();
  v4 = v3;
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v5 = result;
  }
  else
  {
    v5 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
  }
  v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v17 = a2;
  if (v5)
  {
    if (v5 < 1)
    {
      __break(1u);
      return result;
    }
    for (i = 0; i != v5; ++i)
    {
      if ((v4 & 0xC000000000000001) != 0)
      {
        v9 = MEMORY[0x22E2AFF34](i, v4);
      }
      else
      {
        v9 = *(_QWORD *)(v4 + 8 * i + 32);
        swift_retain();
      }
      v10 = (*(uint64_t (**)(void))(*(_QWORD *)v9 + 552))();
      swift_release();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
      v12 = v7[2];
      v11 = v7[3];
      if (v12 >= v11 >> 1)
        v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v7);
      v7[2] = v12 + 1;
      v7[v12 + 4] = v10;
    }
  }
  swift_bridgeObjectRelease_n();
  v18 = MEMORY[0x24BEE4AF8];
  v13 = v7[2];
  if (v13)
  {
    swift_bridgeObjectRetain();
    for (j = 0; j != v13; ++j)
    {
      v15 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v15);
    }
    result = swift_bridgeObjectRelease_n();
    v16 = v18;
  }
  else
  {
    result = swift_bridgeObjectRelease();
    v16 = MEMORY[0x24BEE4AF8];
  }
  *v17 = v16;
  return result;
}

uint64_t PoemConversations.getReceiverExtractions()()
{
  return PoemConversations.getSenderExtractions()((void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in PoemConversations.getReceiverExtractions());
}

uint64_t PoemConversations.getSenderExtractions()(void (*a1)(uint64_t *__return_ptr, uint64_t *))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  unint64_t v7;
  uint64_t v9;

  v3 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 136))();
  v4 = specialized Sequence.compactMap<A>(_:)(v3, a1);
  swift_bridgeObjectRelease();
  v9 = MEMORY[0x24BEE4AF8];
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v5; ++i)
    {
      v7 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v7);
    }
    swift_bridgeObjectRelease_n();
    return v9;
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
}

uint64_t closure #1 in PoemConversations.getReceiverExtractions()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  _QWORD *v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t j;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  v3 = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 136))();
  v4 = v3;
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v5 = result;
  }
  else
  {
    v5 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
  }
  v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v17 = a2;
  if (v5)
  {
    if (v5 < 1)
    {
      __break(1u);
      return result;
    }
    for (i = 0; i != v5; ++i)
    {
      if ((v4 & 0xC000000000000001) != 0)
      {
        v9 = MEMORY[0x22E2AFF34](i, v4);
      }
      else
      {
        v9 = *(_QWORD *)(v4 + 8 * i + 32);
        swift_retain();
      }
      v10 = (*(uint64_t (**)(void))(*(_QWORD *)v9 + 576))();
      swift_release();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
      v12 = v7[2];
      v11 = v7[3];
      if (v12 >= v11 >> 1)
        v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v7);
      v7[2] = v12 + 1;
      v7[v12 + 4] = v10;
    }
  }
  swift_bridgeObjectRelease_n();
  v18 = MEMORY[0x24BEE4AF8];
  v13 = v7[2];
  if (v13)
  {
    swift_bridgeObjectRetain();
    for (j = 0; j != v13; ++j)
    {
      v15 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v15);
    }
    result = swift_bridgeObjectRelease_n();
    v16 = v18;
  }
  else
  {
    result = swift_bridgeObjectRelease();
    v16 = MEMORY[0x24BEE4AF8];
  }
  *v17 = v16;
  return result;
}

uint64_t PoemConversations.getMadExtractions()()
{
  return PoemConversations.getSenderExtractions()((void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in PoemConversations.getMadExtractions());
}

uint64_t closure #1 in PoemConversations.getMadExtractions()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  _QWORD *v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t j;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  v3 = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 136))();
  v4 = v3;
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v5 = result;
  }
  else
  {
    v5 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
  }
  v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v17 = a2;
  if (v5)
  {
    if (v5 < 1)
    {
      __break(1u);
      return result;
    }
    for (i = 0; i != v5; ++i)
    {
      if ((v4 & 0xC000000000000001) != 0)
      {
        v9 = MEMORY[0x22E2AFF34](i, v4);
      }
      else
      {
        v9 = *(_QWORD *)(v4 + 8 * i + 32);
        swift_retain();
      }
      v10 = (*(uint64_t (**)(void))(*(_QWORD *)v9 + 480))();
      swift_release();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
      v12 = v7[2];
      v11 = v7[3];
      if (v12 >= v11 >> 1)
        v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v7);
      v7[2] = v12 + 1;
      v7[v12 + 4] = v10;
    }
  }
  swift_bridgeObjectRelease_n();
  v18 = MEMORY[0x24BEE4AF8];
  v13 = v7[2];
  if (v13)
  {
    swift_bridgeObjectRetain();
    for (j = 0; j != v13; ++j)
    {
      v15 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v15);
    }
    result = swift_bridgeObjectRelease_n();
    v16 = v18;
  }
  else
  {
    result = swift_bridgeObjectRelease();
    v16 = MEMORY[0x24BEE4AF8];
  }
  *v17 = v16;
  return result;
}

uint64_t PoemConversations.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PoemConversations.__deallocating_deinit()
{
  PoemConversations.deinit();
  return swift_deallocClassInstance();
}

uint64_t PoemConversations.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  PoemConversations.init()();
  return v0;
}

_QWORD *PoemConversations.init()()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = MEMORY[0x24BEE4AF8];
  v0[2] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v0[3] = specialized Dictionary.init(dictionaryLiteral:)(v1);
  v0[4] = specialized Dictionary.init(dictionaryLiteral:)(v1);
  v0[5] = specialized Dictionary.init(dictionaryLiteral:)(v1);
  v0[6] = specialized Dictionary.init(dictionaryLiteral:)(v1);
  v0[7] = specialized Dictionary.init(dictionaryLiteral:)(v1);
  v0[8] = specialized Dictionary.init(dictionaryLiteral:)(v1);
  return v0;
}

uint64_t PoemMessageThread.chatId.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PoemMessageThread.chatId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*PoemMessage.chatId.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t PoemMessage.id.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PoemMessage.id.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*PoemMessage.id.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t PoemMessage.text.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PoemMessage.text.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*PoemMessage.text.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t PoemMessage.img.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PoemMessage.img.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 64) = a1;
  *(_QWORD *)(v2 + 72) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*PoemMessage.img.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t key path setter for PoemMessage.time : PoemMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for Date();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))(**(_QWORD **)a2 + 320))(v6);
}

uint64_t PoemMessage.time.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC21DocumentUnderstanding11PoemMessage_time;
  swift_beginAccess();
  v4 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PoemMessage.time.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC21DocumentUnderstanding11PoemMessage_time;
  swift_beginAccess();
  v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t (*PoemMessage.time.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t PoemMessage.path.getter()
{
  return PoemMessage.path.getter(&OBJC_IVAR____TtC21DocumentUnderstanding11PoemMessage_path);
}

uint64_t PoemMessage.path.setter(uint64_t a1, uint64_t a2)
{
  return PoemMessage.path.setter(a1, a2, &OBJC_IVAR____TtC21DocumentUnderstanding11PoemMessage_path);
}

uint64_t (*PoemMessage.path.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t PoemMessage.type.getter()
{
  return PoemMessage.path.getter(&OBJC_IVAR____TtC21DocumentUnderstanding11PoemMessage_type);
}

uint64_t PoemMessage.path.getter(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *a1);
  swift_beginAccess();
  v3 = *v2;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t PoemMessage.type.setter(uint64_t a1, uint64_t a2)
{
  return PoemMessage.path.setter(a1, a2, &OBJC_IVAR____TtC21DocumentUnderstanding11PoemMessage_type);
}

uint64_t PoemMessage.path.setter(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)(v3 + *a3);
  swift_beginAccess();
  *v6 = a1;
  v6[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*PoemMessage.type.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t PoemMessage.sender.getter()
{
  return PoemMessage.sender.getter();
}

{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t PoemMessage.sender.setter(uint64_t a1)
{
  return PoemMessage.sender.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding11PoemMessage_sender);
}

uint64_t (*PoemMessage.sender.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t PoemMessage.receiver.getter()
{
  return PoemMessage.sender.getter();
}

uint64_t PoemMessage.receiver.setter(uint64_t a1)
{
  return PoemMessage.sender.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding11PoemMessage_receiver);
}

uint64_t (*PoemMessage.receiver.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t PoemMessage.senderAddresses.getter()
{
  return PoemMessage.sender.getter();
}

uint64_t PoemMessage.senderAddresses.setter(uint64_t a1)
{
  return PoemMessage.sender.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding11PoemMessage_senderAddresses);
}

uint64_t (*PoemMessage.senderAddresses.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t PoemMessage.receiverAddresses.getter()
{
  return PoemMessage.sender.getter();
}

uint64_t PoemMessage.receiverAddresses.setter(uint64_t a1)
{
  return PoemMessage.sender.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding11PoemMessage_receiverAddresses);
}

uint64_t (*PoemMessage.receiverAddresses.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t PoemMessage.madExtractions.getter()
{
  return PoemMessage.sender.getter();
}

uint64_t PoemMessage.madExtractions.setter(uint64_t a1)
{
  return PoemMessage.sender.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding11PoemMessage_madExtractions);
}

uint64_t (*PoemMessage.madExtractions.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t PoemMessage.taggerExtractions.getter()
{
  return PoemMessage.sender.getter();
}

uint64_t PoemMessage.taggerExtractions.setter(uint64_t a1)
{
  return PoemMessage.sender.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding11PoemMessage_taggerExtractions);
}

uint64_t (*PoemMessage.taggerExtractions.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t PoemMessage.ecrExtractions.getter()
{
  return PoemMessage.sender.getter();
}

uint64_t PoemMessage.ecrExtractions.setter(uint64_t a1)
{
  return PoemMessage.sender.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding11PoemMessage_ecrExtractions);
}

uint64_t (*PoemMessage.ecrExtractions.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryConfidence.modify;
}

uint64_t PoemMessage.senderExtractions.getter()
{
  return PoemMessage.sender.getter();
}

uint64_t PoemMessage.senderExtractions.setter(uint64_t a1)
{
  return PoemMessage.sender.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding11PoemMessage_senderExtractions);
}

uint64_t (*PoemMessage.senderExtractions.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t PoemMessage.receiverExtractions.getter()
{
  return PoemMessage.sender.getter();
}

uint64_t PoemMessage.receiverExtractions.setter(uint64_t a1)
{
  return PoemMessage.sender.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding11PoemMessage_receiverExtractions);
}

uint64_t (*PoemMessage.receiverExtractions.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t PoemMessage.pronounExtractions.getter()
{
  return PoemMessage.sender.getter();
}

uint64_t PoemMessage.pronounExtractions.setter(uint64_t a1)
{
  return PoemMessage.sender.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding11PoemMessage_pronounExtractions);
}

uint64_t PoemMessage.sender.setter(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)(v2 + *a2);
  swift_beginAccess();
  *v4 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*PoemMessage.pronounExtractions.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t PoemMessage.__allocating_init(fromSearchableItem:withConversationIdAttribute:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  PoemMessage.init(fromSearchableItem:withConversationIdAttribute:)(a1, a2, a3);
  return v6;
}

_QWORD *PoemMessage.init(fromSearchableItem:withConversationIdAttribute:)(void *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  char *v40;
  void *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  id v62;
  id v63;
  uint64_t v64;
  uint64_t *v65;
  id v66;
  id v67;
  uint64_t v68;
  uint64_t *v69;
  id v70;
  id v71;
  uint64_t v72;
  uint64_t *v73;
  id v74;
  id v75;
  uint64_t v76;
  uint64_t *v77;
  id v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  id v84;
  id v85;
  uint64_t v86;
  unint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v92;
  char *v93;
  char *v94;
  _QWORD *v95;
  uint64_t *v96;
  char *v97;
  char *v98;
  _QWORD *v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _BYTE v114[40];
  __int128 v115;
  __int128 v116;

  v4 = v3;
  v110 = a2;
  v111 = a3;
  v6 = type metadata accessor for URL();
  v108 = *(_QWORD *)(v6 - 8);
  v109 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v97 = (char *)&v92 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v106 = (char *)&v92 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v107 = (uint64_t)&v92 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v92 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Date();
  v105 = *(_QWORD *)(v15 - 8);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v98 = (char *)&v92 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v94 = (char *)&v92 - v18;
  v3[2] = 0;
  v95 = v3 + 2;
  v3[3] = 0xE000000000000000;
  v3[4] = 0;
  v3[5] = 0xE000000000000000;
  v3[6] = 0;
  v3[7] = 0xE000000000000000;
  v3[8] = 0;
  v99 = v3 + 8;
  v3[9] = 0xE000000000000000;
  v93 = (char *)v3 + OBJC_IVAR____TtC21DocumentUnderstanding11PoemMessage_time;
  Date.init()();
  v19 = (_QWORD *)((char *)v3 + OBJC_IVAR____TtC21DocumentUnderstanding11PoemMessage_path);
  *v19 = 0;
  v19[1] = 0xE000000000000000;
  v96 = v19;
  v20 = (_QWORD *)((char *)v3 + OBJC_IVAR____TtC21DocumentUnderstanding11PoemMessage_type);
  *v20 = 0;
  v20[1] = 0xE000000000000000;
  v104 = v20;
  v21 = MEMORY[0x24BEE4AF8];
  v100 = (_QWORD *)((char *)v3 + OBJC_IVAR____TtC21DocumentUnderstanding11PoemMessage_sender);
  *v100 = MEMORY[0x24BEE4AF8];
  v101 = (_QWORD *)((char *)v3 + OBJC_IVAR____TtC21DocumentUnderstanding11PoemMessage_receiver);
  *v101 = v21;
  v102 = (_QWORD *)((char *)v3 + OBJC_IVAR____TtC21DocumentUnderstanding11PoemMessage_senderAddresses);
  *v102 = v21;
  v103 = (_QWORD *)((char *)v3 + OBJC_IVAR____TtC21DocumentUnderstanding11PoemMessage_receiverAddresses);
  *v103 = v21;
  *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC21DocumentUnderstanding11PoemMessage_madExtractions) = v21;
  *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC21DocumentUnderstanding11PoemMessage_taggerExtractions) = v21;
  *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC21DocumentUnderstanding11PoemMessage_ecrExtractions) = v21;
  *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC21DocumentUnderstanding11PoemMessage_senderExtractions) = v21;
  *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC21DocumentUnderstanding11PoemMessage_receiverExtractions) = v21;
  *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC21DocumentUnderstanding11PoemMessage_pronounExtractions) = v21;
  v22 = a1;
  v23 = objc_msgSend(a1, sel_attributeSet);
  v24 = objc_msgSend(v23, sel_contentSnippet);

  if (v24)
  {
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v27 = v26;

    swift_beginAccess();
    v3[6] = v25;
    v3[7] = v27;
    swift_bridgeObjectRelease();
  }
  v28 = v22;
  v29 = objc_msgSend(v22, sel_attributeSet);
  v30 = objc_msgSend(v29, sel_uniqueIdentifier);

  if (v30)
  {
    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v33 = v32;

    swift_beginAccess();
    v3[4] = v31;
    v3[5] = v33;
    swift_bridgeObjectRelease();
  }
  v34 = objc_msgSend(v22, sel_attributeSet);
  v35 = objc_msgSend(v34, sel_contentCreationDate);

  v36 = v109;
  if (v35)
  {
    v37 = v98;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v38 = v105;
    v39 = *(void (**)(char *, char *, uint64_t))(v105 + 32);
    v39(v14, v37, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v14, 0, 1, v15);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v14, 1, v15) != 1)
    {
      v40 = v14;
      v41 = v28;
      v42 = v36;
      v43 = v94;
      v39(v94, v40, v15);
      v44 = v43;
      v36 = v42;
      v28 = v41;
      v39(v37, v44, v15);
      v45 = v93;
      swift_beginAccess();
      (*(void (**)(char *, char *, uint64_t))(v38 + 40))(v45, v37, v15);
      swift_endAccess();
      goto LABEL_10;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v105 + 56))(v14, 1, 1, v15);
  }
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v14, &demangling cache variable for type metadata for Date?);
LABEL_10:
  v46 = objc_msgSend(v28, sel_attributeSet);
  v47 = objc_msgSend(v46, sel_filename);

  if (v47)
  {
    v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v50 = v49;

    swift_beginAccess();
    v4[8] = v48;
    v4[9] = v50;
    swift_bridgeObjectRelease();
  }
  v51 = objc_msgSend(v28, sel_attributeSet);
  v52 = objc_msgSend(v51, sel_contentURL);

  if (v52)
  {
    v53 = (uint64_t)v106;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v54 = 0;
    v55 = v108;
  }
  else
  {
    v54 = 1;
    v55 = v108;
    v53 = (uint64_t)v106;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v55 + 56))(v53, v54, 1, v36);
  v56 = v107;
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v53, v107, &demangling cache variable for type metadata for URL?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v56, 1, v36))
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v56, &demangling cache variable for type metadata for URL?);
  }
  else
  {
    v57 = v97;
    (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v97, v56, v36);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v56, &demangling cache variable for type metadata for URL?);
    v58 = URL.absoluteString.getter();
    v60 = v59;
    (*(void (**)(char *, uint64_t))(v55 + 8))(v57, v36);
    v61 = v96;
    swift_beginAccess();
    *v61 = v58;
    v61[1] = v60;
    swift_bridgeObjectRelease();
  }
  v62 = objc_msgSend(v28, sel_attributeSet);
  v63 = objc_msgSend(v62, sel_authorNames);

  if (v63)
  {
    v64 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v65 = v100;
    swift_beginAccess();
    *v65 = v64;
    swift_bridgeObjectRelease();
  }
  v66 = objc_msgSend(v28, sel_attributeSet);
  v67 = objc_msgSend(v66, sel_recipientNames);

  if (v67)
  {
    v68 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v69 = v101;
    swift_beginAccess();
    *v69 = v68;
    swift_bridgeObjectRelease();
  }
  v70 = objc_msgSend(v28, sel_attributeSet);
  v71 = objc_msgSend(v70, sel_authorAddresses);

  if (v71)
  {
    v72 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v73 = v102;
    swift_beginAccess();
    *v73 = v72;
    swift_bridgeObjectRelease();
  }
  v74 = objc_msgSend(v28, sel_attributeSet);
  v75 = objc_msgSend(v74, sel_recipientAddresses);

  if (v75)
  {
    v76 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v77 = v103;
    swift_beginAccess();
    *v77 = v76;
    swift_bridgeObjectRelease();
  }
  v78 = objc_msgSend(v28, sel_attributeSet);
  v79 = objc_msgSend(v78, sel_contentType);

  if (v79)
  {
    v80 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v82 = v81;

    v83 = v104;
    swift_beginAccess();
    *v83 = v80;
    v83[1] = v82;
    swift_bridgeObjectRelease();
  }
  v84 = objc_msgSend(v28, sel_attributeSet);
  v85 = objc_msgSend(v84, sel_attributeDictionary);

  v86 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  v112 = v110;
  v113 = v111;
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(v86 + 16) && (v87 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v114), (v88 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v86 + 56) + 32 * v87, (uint64_t)&v115);
  }
  else
  {
    v115 = 0u;
    v116 = 0u;
  }

  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)v114);
  if (*((_QWORD *)&v116 + 1))
  {
    if ((swift_dynamicCast() & 1) != 0)
    {
      v89 = v112;
      v90 = v113;
      swift_beginAccess();
      v4[2] = v89;
      v4[3] = v90;
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)&v115, &demangling cache variable for type metadata for Any?);
  }
  return v4;
}

uint64_t PoemMessage.__allocating_init(chatId:id:time:type:text:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v17;

  v17 = swift_allocObject();
  PoemMessage.init(chatId:id:time:type:text:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return v17;
}

_QWORD *PoemMessage.init(chatId:id:time:type:text:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v9[2] = 0;
  v9[3] = 0xE000000000000000;
  v9[4] = 0;
  v9[5] = 0xE000000000000000;
  v9[6] = 0;
  v9[7] = 0xE000000000000000;
  v9[8] = 0;
  v9[9] = 0xE000000000000000;
  v13 = (char *)v9 + OBJC_IVAR____TtC21DocumentUnderstanding11PoemMessage_time;
  Date.init()();
  v14 = (_QWORD *)((char *)v9 + OBJC_IVAR____TtC21DocumentUnderstanding11PoemMessage_path);
  *v14 = 0;
  v14[1] = 0xE000000000000000;
  v15 = (_QWORD *)((char *)v9 + OBJC_IVAR____TtC21DocumentUnderstanding11PoemMessage_type);
  *v15 = 0;
  v15[1] = 0xE000000000000000;
  v16 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)((char *)v9 + OBJC_IVAR____TtC21DocumentUnderstanding11PoemMessage_sender) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)((char *)v9 + OBJC_IVAR____TtC21DocumentUnderstanding11PoemMessage_receiver) = v16;
  *(_QWORD *)((char *)v9 + OBJC_IVAR____TtC21DocumentUnderstanding11PoemMessage_senderAddresses) = v16;
  *(_QWORD *)((char *)v9 + OBJC_IVAR____TtC21DocumentUnderstanding11PoemMessage_receiverAddresses) = v16;
  *(_QWORD *)((char *)v9 + OBJC_IVAR____TtC21DocumentUnderstanding11PoemMessage_madExtractions) = v16;
  *(_QWORD *)((char *)v9 + OBJC_IVAR____TtC21DocumentUnderstanding11PoemMessage_taggerExtractions) = v16;
  *(_QWORD *)((char *)v9 + OBJC_IVAR____TtC21DocumentUnderstanding11PoemMessage_ecrExtractions) = v16;
  *(_QWORD *)((char *)v9 + OBJC_IVAR____TtC21DocumentUnderstanding11PoemMessage_senderExtractions) = v16;
  *(_QWORD *)((char *)v9 + OBJC_IVAR____TtC21DocumentUnderstanding11PoemMessage_receiverExtractions) = v16;
  *(_QWORD *)((char *)v9 + OBJC_IVAR____TtC21DocumentUnderstanding11PoemMessage_pronounExtractions) = v16;
  swift_beginAccess();
  v9[2] = a1;
  v9[3] = a2;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v9[4] = a3;
  v9[5] = a4;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v17 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 40))(v13, a5, v17);
  swift_endAccess();
  swift_beginAccess();
  *v15 = a6;
  v15[1] = a7;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v9[6] = a8;
  v9[7] = a9;
  swift_bridgeObjectRelease();
  return v9;
}

Swift::Bool __swiftcall PoemMessage.isMessageRelevantForPoem(delta:)(Swift::Double delta)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, uint64_t);
  char v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v31;

  v2 = v1;
  v4 = type metadata accessor for Logger();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v31 - v14;
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v31 - v17;
  if (delta != 0.0)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 312))(v16);
    Date.init()();
    Date.addingTimeInterval(_:)();
    v19 = *(void (**)(char *, uint64_t))(v9 + 8);
    v19(v12, v8);
    v20 = static Date.> infix(_:_:)();
    v19(v15, v8);
    v16 = ((uint64_t (*)(char *, uint64_t))v19)(v18, v8);
    if ((v20 & 1) == 0)
    {
      Logger.init()();
      v27 = Logger.logObject.getter();
      v28 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v27, v28))
      {
        v29 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v29 = 0;
        _os_log_impl(&dword_2282CC000, v27, v28, "Ignoring message for Poem", v29, 2u);
        MEMORY[0x22E2B117C](v29, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      goto LABEL_12;
    }
  }
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 216))(v16);
  v23 = v22;
  v24 = swift_bridgeObjectRelease();
  v25 = HIBYTE(v23) & 0xF;
  if ((v23 & 0x2000000000000000) == 0)
    v25 = v21 & 0xFFFFFFFFFFFFLL;
  if (!v25)
  {
LABEL_12:
    v26 = 0;
    return v26 & 1;
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 656))(v24) & 1) != 0)
    v26 = 1;
  else
    v26 = (*(uint64_t (**)(void))(*(_QWORD *)v2 + 648))();
  return v26 & 1;
}

Swift::Bool __swiftcall PoemMessage.isValidImage()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  Swift::Bool v13;
  char v14;
  uint64_t (*v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UTType?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UTType();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v22 - v11;
  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 360))(v10);
  UTType.init(_:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v4, &demangling cache variable for type metadata for UTType?);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v12, v4, v5);
    static UTType.image.getter();
    v14 = UTType.conforms(to:)();
    v15 = *(uint64_t (**)(char *, uint64_t))(v6 + 8);
    v16 = v15(v9, v5);
    if ((v14 & 1) != 0)
    {
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 288))(v16);
      v19 = v18;
      swift_bridgeObjectRelease();
      v20 = HIBYTE(v19) & 0xF;
      if ((v19 & 0x2000000000000000) == 0)
        v20 = v17 & 0xFFFFFFFFFFFFLL;
      v13 = v20 != 0;
    }
    else
    {
      v13 = 0;
    }
    v15(v12, v5);
  }
  return v13;
}

Swift::Bool __swiftcall PoemMessage.isValidText()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  Swift::Bool v13;
  char v14;
  uint64_t (*v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UTType?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UTType();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v22 - v11;
  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 360))(v10);
  UTType.init(_:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v4, &demangling cache variable for type metadata for UTType?);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v12, v4, v5);
    static UTType.message.getter();
    v14 = UTType.conforms(to:)();
    v15 = *(uint64_t (**)(char *, uint64_t))(v6 + 8);
    v16 = v15(v9, v5);
    if ((v14 & 1) != 0)
    {
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 264))(v16);
      v19 = v18;
      swift_bridgeObjectRelease();
      v20 = HIBYTE(v19) & 0xF;
      if ((v19 & 0x2000000000000000) == 0)
        v20 = v17 & 0xFFFFFFFFFFFFLL;
      v13 = v20 != 0;
    }
    else
    {
      v13 = 0;
    }
    v15(v12, v5);
  }
  return v13;
}

Swift::Void __swiftcall PoemMessage.populateExtractionsFromBufferExtractions(bufferExtractions:)(Swift::OpaquePointer bufferExtractions)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t i;
  id v6;
  void *v7;
  unint64_t v8;
  void (*v9)(_QWORD *, _QWORD);
  unint64_t v10;
  uint64_t j;
  id v12;
  void *v13;
  unint64_t v14;
  void (*v15)(_QWORD *, _QWORD);
  uint64_t k;
  id v17;
  void *v18;
  unint64_t v19;
  void (*v20)(_QWORD *, _QWORD);
  uint64_t m;
  id v22;
  void *v23;
  unint64_t v24;
  unint64_t v25;
  void (*v26)(_QWORD *, _QWORD);
  uint64_t n;
  id v28;
  void *v29;
  unint64_t v30;
  void (*v31)(_QWORD *, _QWORD);
  uint64_t ii;
  id v33;
  void *v34;
  void (*v35)(_QWORD *, _QWORD);
  _QWORD v36[4];

  v2 = v1;
  v36[0] = MEMORY[0x24BEE4AF8];
  if ((unint64_t)bufferExtractions._rawValue >> 62)
  {
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    v4 = *(_QWORD *)(((unint64_t)bufferExtractions._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  if (v4)
  {
    if (v4 < 1)
    {
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      return;
    }
    for (i = 0; i != v4; ++i)
    {
      if (((unint64_t)bufferExtractions._rawValue & 0xC000000000000001) != 0)
        v6 = (id)MEMORY[0x22E2AFF34](i, bufferExtractions._rawValue);
      else
        v6 = *((id *)bufferExtractions._rawValue + i + 4);
      v7 = v6;
      if (objc_msgSend(v6, sel_role) == 3 && objc_msgSend(v7, sel_type) == 1)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {

      }
    }
    swift_bridgeObjectRelease();
    v8 = v36[0];
  }
  else
  {
    swift_bridgeObjectRelease();
    v8 = MEMORY[0x24BEE4AF8];
  }
  v9 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *))(*(_QWORD *)v1 + 520))(v36);
  specialized Array.append<A>(contentsOf:)(v8);
  v9(v36, 0);
  v10 = MEMORY[0x24BEE4AF8];
  v36[0] = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    swift_bridgeObjectRetain();
    for (j = 0; j != v4; ++j)
    {
      if (((unint64_t)bufferExtractions._rawValue & 0xC000000000000001) != 0)
        v12 = (id)MEMORY[0x22E2AFF34](j, bufferExtractions._rawValue);
      else
        v12 = *((id *)bufferExtractions._rawValue + j + 4);
      v13 = v12;
      if (objc_msgSend(v12, sel_role) != 3 || objc_msgSend(v13, sel_type))
      {

      }
      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    v14 = v36[0];
    v10 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v14 = MEMORY[0x24BEE4AF8];
  }
  v15 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *))(*(_QWORD *)v1 + 544))(v36);
  specialized Array.append<A>(contentsOf:)(v14);
  v15(v36, 0);
  v36[0] = v10;
  if (v4)
  {
    swift_bridgeObjectRetain();
    for (k = 0; k != v4; ++k)
    {
      if (((unint64_t)bufferExtractions._rawValue & 0xC000000000000001) != 0)
        v17 = (id)MEMORY[0x22E2AFF34](k, bufferExtractions._rawValue);
      else
        v17 = *((id *)bufferExtractions._rawValue + k + 4);
      v18 = v17;
      if (objc_msgSend(v17, sel_role) != 1 || (objc_msgSend(v18, sel_isCoref) & 1) != 0)
      {

      }
      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    v19 = v36[0];
    v10 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v19 = v10;
  }
  v20 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *))(*(_QWORD *)v1 + 568))(v36);
  specialized Array.append<A>(contentsOf:)(v19);
  v20(v36, 0);
  v36[0] = v10;
  if (v4)
  {
    swift_bridgeObjectRetain();
    for (m = 0; m != v4; ++m)
    {
      if (((unint64_t)bufferExtractions._rawValue & 0xC000000000000001) != 0)
        v22 = (id)MEMORY[0x22E2AFF34](m, bufferExtractions._rawValue);
      else
        v22 = *((id *)bufferExtractions._rawValue + m + 4);
      v23 = v22;
      if (objc_msgSend(v22, sel_role) != 2 || (objc_msgSend(v23, sel_isCoref) & 1) != 0)
      {

      }
      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    v2 = v1;
    v24 = v36[0];
    v25 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v24 = v10;
    v25 = v10;
  }
  v26 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *))(*(_QWORD *)v2 + 592))(v36);
  specialized Array.append<A>(contentsOf:)(v24);
  v26(v36, 0);
  v36[0] = v25;
  if (v4)
  {
    swift_bridgeObjectRetain();
    for (n = 0; n != v4; ++n)
    {
      if (((unint64_t)bufferExtractions._rawValue & 0xC000000000000001) != 0)
        v28 = (id)MEMORY[0x22E2AFF34](n, bufferExtractions._rawValue);
      else
        v28 = *((id *)bufferExtractions._rawValue + n + 4);
      v29 = v28;
      if (objc_msgSend(v28, sel_type) == 2)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {

      }
    }
    swift_bridgeObjectRelease();
    v2 = v1;
    v30 = v36[0];
  }
  else
  {
    v30 = v25;
  }
  v31 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *))(*(_QWORD *)v2 + 496))(v36);
  specialized Array.append<A>(contentsOf:)(v30);
  v31(v36, 0);
  v36[0] = v25;
  if (v4)
  {
    swift_bridgeObjectRetain();
    for (ii = 0; ii != v4; ++ii)
    {
      if (((unint64_t)bufferExtractions._rawValue & 0xC000000000000001) != 0)
        v33 = (id)MEMORY[0x22E2AFF34](ii, bufferExtractions._rawValue);
      else
        v33 = *((id *)bufferExtractions._rawValue + ii + 4);
      v34 = v33;
      if (objc_msgSend(v33, sel_isCoref))
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {

      }
    }
    swift_bridgeObjectRelease();
    v2 = v1;
    v25 = v36[0];
  }
  v35 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *))(*(_QWORD *)v2 + 616))(v36);
  specialized Array.append<A>(contentsOf:)(v25);
  v35(v36, 0);
}

Swift::Bool __swiftcall PoemMessage.containsExtractions()()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  Swift::Bool result;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 504))();
  if (v1 >> 62)
    v2 = _CocoaArrayWrapper.endIndex.getter();
  else
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  v3 = swift_bridgeObjectRelease();
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 552))(v3);
  if (v4 >> 62)
    v5 = _CocoaArrayWrapper.endIndex.getter();
  else
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  v6 = swift_bridgeObjectRelease();
  v7 = __OFADD__(v2, v5);
  v8 = v2 + v5;
  if (v7)
  {
    __break(1u);
  }
  else
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 576))(v6);
    if (!(v9 >> 62))
    {
      v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_8;
    }
  }
  v10 = _CocoaArrayWrapper.endIndex.getter();
LABEL_8:
  v11 = swift_bridgeObjectRelease();
  v7 = __OFADD__(v8, v10);
  v12 = v8 + v10;
  if (v7)
  {
    __break(1u);
  }
  else
  {
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 600))(v11);
    if (!(v13 >> 62))
    {
      v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_11;
    }
  }
  v14 = _CocoaArrayWrapper.endIndex.getter();
LABEL_11:
  v15 = swift_bridgeObjectRelease();
  v7 = __OFADD__(v12, v14);
  v16 = v12 + v14;
  if (v7)
  {
    __break(1u);
  }
  else
  {
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 528))(v15);
    if (!(v17 >> 62))
    {
      v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_14;
    }
  }
  v18 = _CocoaArrayWrapper.endIndex.getter();
LABEL_14:
  result = swift_bridgeObjectRelease();
  if (!__OFADD__(v16, v18))
    return v16 + v18 > 0;
  __break(1u);
  return result;
}

uint64_t PoemMessage.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC21DocumentUnderstanding11PoemMessage_time;
  v2 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PoemMessage.__deallocating_deinit()
{
  PoemMessage.deinit();
  return swift_deallocClassInstance();
}

uint64_t PoemEntityCounts.tagger.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t PoemEntityCounts.tagger.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*PoemEntityCounts.tagger.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t PoemEntityCounts.ecr.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t PoemEntityCounts.ecr.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*PoemEntityCounts.ecr.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t PoemEntityCounts.pronoun.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t PoemEntityCounts.pronoun.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*PoemEntityCounts.pronoun.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t PoemEntityCounts.sender.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t PoemEntityCounts.sender.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*PoemEntityCounts.sender.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t PoemEntityCounts.receiver.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t PoemEntityCounts.receiver.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = result;
  return result;
}

uint64_t (*PoemEntityCounts.receiver.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

void __swiftcall PoemEntityCounts.init()(DocumentUnderstanding::PoemEntityCounts *__return_ptr retstr)
{
  retstr->receiver = 0;
  *(_OWORD *)&retstr->tagger = 0u;
  *(_OWORD *)&retstr->pronoun = 0u;
}

uint64_t default argument 0 of PoemEntityCounts.init(tagger:ecr:pronoun:sender:receiver:)()
{
  return 0;
}

uint64_t default argument 1 of PoemEntityCounts.init(tagger:ecr:pronoun:sender:receiver:)()
{
  return 0;
}

uint64_t default argument 2 of PoemEntityCounts.init(tagger:ecr:pronoun:sender:receiver:)()
{
  return 0;
}

uint64_t default argument 3 of PoemEntityCounts.init(tagger:ecr:pronoun:sender:receiver:)()
{
  return 0;
}

uint64_t default argument 4 of PoemEntityCounts.init(tagger:ecr:pronoun:sender:receiver:)()
{
  return 0;
}

void __swiftcall PoemEntityCounts.init(tagger:ecr:pronoun:sender:receiver:)(DocumentUnderstanding::PoemEntityCounts *__return_ptr retstr, Swift::Int tagger, Swift::Int ecr, Swift::Int pronoun, Swift::Int sender, Swift::Int receiver)
{
  retstr->tagger = tagger;
  retstr->ecr = ecr;
  retstr->pronoun = pronoun;
  retstr->sender = sender;
  retstr->receiver = receiver;
}

uint64_t PoemCooccurrenceCounts.tagger.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PoemCooccurrenceCounts.tagger.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*PoemCooccurrenceCounts.tagger.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t PoemCooccurrenceCounts.ecr.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PoemCooccurrenceCounts.ecr.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*PoemCooccurrenceCounts.ecr.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t PoemCooccurrenceCounts.pronoun.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PoemCooccurrenceCounts.pronoun.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*PoemCooccurrenceCounts.pronoun.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t PoemCooccurrenceCounts.sender.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PoemCooccurrenceCounts.sender.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

uint64_t (*PoemCooccurrenceCounts.sender.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t PoemCooccurrenceCounts.receiver.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PoemCooccurrenceCounts.receiver.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 32) = a1;
  return result;
}

uint64_t (*PoemCooccurrenceCounts.receiver.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t PoemCooccurrenceCounts.taggerDistances.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PoemCooccurrenceCounts.taggerDistances.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 40) = a1;
  return result;
}

uint64_t (*PoemCooccurrenceCounts.taggerDistances.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t PoemCooccurrenceCounts.taggerLengths.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PoemCooccurrenceCounts.taggerLengths.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 48) = a1;
  return result;
}

uint64_t (*PoemCooccurrenceCounts.taggerLengths.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t PoemCooccurrenceCounts.taggerConfidences.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PoemCooccurrenceCounts.taggerConfidences.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 56) = a1;
  return result;
}

uint64_t (*PoemCooccurrenceCounts.taggerConfidences.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t PoemCooccurrenceCounts.ecrDistances.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PoemCooccurrenceCounts.ecrDistances.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 64) = a1;
  return result;
}

uint64_t (*PoemCooccurrenceCounts.ecrDistances.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t PoemCooccurrenceCounts.ecrLengths.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PoemCooccurrenceCounts.ecrLengths.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 72) = a1;
  return result;
}

uint64_t (*PoemCooccurrenceCounts.ecrLengths.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t PoemCooccurrenceCounts.ecrConfidences.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PoemCooccurrenceCounts.ecrConfidences.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 80) = a1;
  return result;
}

uint64_t (*PoemCooccurrenceCounts.ecrConfidences.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

Swift::Int __swiftcall PoemCooccurrenceCounts.counts()()
{
  _QWORD *v0;
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int64_t v43;
  unint64_t v44;
  int64_t v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  int64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int64_t v58;
  unint64_t v59;
  int64_t v60;
  uint64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  int64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  int64_t v73;
  unint64_t v74;
  int64_t v75;
  Swift::Int result;

  v1 = 0;
  v2 = 0;
  v3 = v0[3];
  v4 = 1 << *(_BYTE *)(v3 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v3 + 64;
  v7 = v5 & *(_QWORD *)(v3 + 64);
  v8 = (unint64_t)(v4 + 63) >> 6;
  while (v7)
  {
    v9 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v10 = v9 | (v1 << 6);
LABEL_5:
    v11 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v10);
    v12 = __OFADD__(v2, v11);
    v2 += v11;
    if (v12)
    {
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
      goto LABEL_136;
    }
  }
  v13 = v1 + 1;
  if (__OFADD__(v1, 1))
    goto LABEL_131;
  if (v13 < v8)
  {
    v14 = *(_QWORD *)(v6 + 8 * v13);
    ++v1;
    if (!v14)
    {
      v1 = v13 + 1;
      if (v13 + 1 >= v8)
        goto LABEL_25;
      v14 = *(_QWORD *)(v6 + 8 * v1);
      if (!v14)
      {
        v1 = v13 + 2;
        if (v13 + 2 >= v8)
          goto LABEL_25;
        v14 = *(_QWORD *)(v6 + 8 * v1);
        if (!v14)
        {
          v1 = v13 + 3;
          if (v13 + 3 >= v8)
            goto LABEL_25;
          v14 = *(_QWORD *)(v6 + 8 * v1);
          if (!v14)
          {
            v1 = v13 + 4;
            if (v13 + 4 >= v8)
              goto LABEL_25;
            v14 = *(_QWORD *)(v6 + 8 * v1);
            if (!v14)
            {
              v15 = v13 + 5;
              if (v15 >= v8)
                goto LABEL_25;
              v14 = *(_QWORD *)(v6 + 8 * v15);
              if (!v14)
              {
                while (1)
                {
                  v1 = v15 + 1;
                  if (__OFADD__(v15, 1))
                    break;
                  if (v1 >= v8)
                    goto LABEL_25;
                  v14 = *(_QWORD *)(v6 + 8 * v1);
                  ++v15;
                  if (v14)
                    goto LABEL_24;
                }
LABEL_140:
                __break(1u);
                goto LABEL_141;
              }
              v1 = v15;
            }
          }
        }
      }
    }
LABEL_24:
    v7 = (v14 - 1) & v14;
    v10 = __clz(__rbit64(v14)) + (v1 << 6);
    goto LABEL_5;
  }
LABEL_25:
  v16 = 0;
  v17 = 0;
  v18 = v0[4];
  v19 = 1 << *(_BYTE *)(v18 + 32);
  v20 = -1;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  v21 = v18 + 64;
  v22 = v20 & *(_QWORD *)(v18 + 64);
  v23 = (unint64_t)(v19 + 63) >> 6;
  while (1)
  {
    if (v22)
    {
      v24 = __clz(__rbit64(v22));
      v22 &= v22 - 1;
      v25 = v24 | (v16 << 6);
      goto LABEL_29;
    }
    v27 = v16 + 1;
    if (__OFADD__(v16, 1))
      goto LABEL_132;
    if (v27 >= v23)
      break;
    v28 = *(_QWORD *)(v21 + 8 * v27);
    ++v16;
    if (!v28)
    {
      v16 = v27 + 1;
      if (v27 + 1 >= v23)
        break;
      v28 = *(_QWORD *)(v21 + 8 * v16);
      if (!v28)
      {
        v16 = v27 + 2;
        if (v27 + 2 >= v23)
          break;
        v28 = *(_QWORD *)(v21 + 8 * v16);
        if (!v28)
        {
          v16 = v27 + 3;
          if (v27 + 3 >= v23)
            break;
          v28 = *(_QWORD *)(v21 + 8 * v16);
          if (!v28)
          {
            v16 = v27 + 4;
            if (v27 + 4 >= v23)
              break;
            v28 = *(_QWORD *)(v21 + 8 * v16);
            if (!v28)
            {
              v29 = v27 + 5;
              if (v29 >= v23)
                break;
              v28 = *(_QWORD *)(v21 + 8 * v29);
              if (!v28)
              {
                while (1)
                {
                  v16 = v29 + 1;
                  if (__OFADD__(v29, 1))
                    break;
                  if (v16 >= v23)
                    goto LABEL_49;
                  v28 = *(_QWORD *)(v21 + 8 * v16);
                  ++v29;
                  if (v28)
                    goto LABEL_48;
                }
LABEL_141:
                __break(1u);
                goto LABEL_142;
              }
              v16 = v29;
            }
          }
        }
      }
    }
LABEL_48:
    v22 = (v28 - 1) & v28;
    v25 = __clz(__rbit64(v28)) + (v16 << 6);
LABEL_29:
    v26 = *(_QWORD *)(*(_QWORD *)(v18 + 56) + 8 * v25);
    v12 = __OFADD__(v17, v26);
    v17 += v26;
    if (v12)
      goto LABEL_127;
  }
LABEL_49:
  v12 = __OFADD__(v2, v17);
  v30 = v2 + v17;
  if (v12)
  {
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
    goto LABEL_140;
  }
  v31 = 0;
  v32 = 0;
  v33 = *v0;
  v34 = 1 << *(_BYTE *)(*v0 + 32);
  v35 = -1;
  if (v34 < 64)
    v35 = ~(-1 << v34);
  v37 = *(_QWORD *)(v33 + 64);
  v36 = v33 + 64;
  v38 = v35 & v37;
  v39 = (unint64_t)(v34 + 63) >> 6;
  while (2)
  {
    if (v38)
    {
      v40 = __clz(__rbit64(v38));
      v38 &= v38 - 1;
      v41 = v40 | (v31 << 6);
LABEL_54:
      v42 = *(_QWORD *)(*(_QWORD *)(*v0 + 56) + 8 * v41);
      v12 = __OFADD__(v32, v42);
      v32 += v42;
      if (v12)
        goto LABEL_128;
      continue;
    }
    break;
  }
  v43 = v31 + 1;
  if (__OFADD__(v31, 1))
    goto LABEL_133;
  if (v43 < v39)
  {
    v44 = *(_QWORD *)(v36 + 8 * v43);
    ++v31;
    if (!v44)
    {
      v31 = v43 + 1;
      if (v43 + 1 >= v39)
        goto LABEL_74;
      v44 = *(_QWORD *)(v36 + 8 * v31);
      if (!v44)
      {
        v31 = v43 + 2;
        if (v43 + 2 >= v39)
          goto LABEL_74;
        v44 = *(_QWORD *)(v36 + 8 * v31);
        if (!v44)
        {
          v31 = v43 + 3;
          if (v43 + 3 >= v39)
            goto LABEL_74;
          v44 = *(_QWORD *)(v36 + 8 * v31);
          if (!v44)
          {
            v31 = v43 + 4;
            if (v43 + 4 >= v39)
              goto LABEL_74;
            v44 = *(_QWORD *)(v36 + 8 * v31);
            if (!v44)
            {
              v45 = v43 + 5;
              if (v45 >= v39)
                goto LABEL_74;
              v44 = *(_QWORD *)(v36 + 8 * v45);
              if (!v44)
              {
                while (1)
                {
                  v31 = v45 + 1;
                  if (__OFADD__(v45, 1))
                    break;
                  if (v31 >= v39)
                    goto LABEL_74;
                  v44 = *(_QWORD *)(v36 + 8 * v31);
                  ++v45;
                  if (v44)
                    goto LABEL_73;
                }
LABEL_142:
                __break(1u);
                goto LABEL_143;
              }
              v31 = v45;
            }
          }
        }
      }
    }
LABEL_73:
    v38 = (v44 - 1) & v44;
    v41 = __clz(__rbit64(v44)) + (v31 << 6);
    goto LABEL_54;
  }
LABEL_74:
  v12 = __OFADD__(v30, v32);
  v46 = v30 + v32;
  if (v12)
    goto LABEL_137;
  v47 = 0;
  v48 = 0;
  v49 = v0[1];
  v50 = 1 << *(_BYTE *)(v49 + 32);
  v51 = -1;
  if (v50 < 64)
    v51 = ~(-1 << v50);
  v52 = v49 + 64;
  v53 = v51 & *(_QWORD *)(v49 + 64);
  v54 = (unint64_t)(v50 + 63) >> 6;
  while (2)
  {
    if (v53)
    {
      v55 = __clz(__rbit64(v53));
      v53 &= v53 - 1;
      v56 = v55 | (v47 << 6);
      goto LABEL_79;
    }
    v58 = v47 + 1;
    if (__OFADD__(v47, 1))
      goto LABEL_134;
    if (v58 >= v54)
    {
LABEL_99:
      v12 = __OFADD__(v46, v48);
      v61 = v46 + v48;
      if (!v12)
      {
        v62 = 0;
        v63 = 0;
        v64 = v0[2];
        v65 = 1 << *(_BYTE *)(v64 + 32);
        v66 = -1;
        if (v65 < 64)
          v66 = ~(-1 << v65);
        v67 = v64 + 64;
        v68 = v66 & *(_QWORD *)(v64 + 64);
        v69 = (unint64_t)(v65 + 63) >> 6;
        while (1)
        {
          if (v68)
          {
            v70 = __clz(__rbit64(v68));
            v68 &= v68 - 1;
            v71 = v70 | (v62 << 6);
          }
          else
          {
            v73 = v62 + 1;
            if (__OFADD__(v62, 1))
              goto LABEL_135;
            if (v73 >= v69)
            {
LABEL_124:
              result = v61 + v63;
              if (__OFADD__(v61, v63))
                goto LABEL_139;
              return result;
            }
            v74 = *(_QWORD *)(v67 + 8 * v73);
            ++v62;
            if (!v74)
            {
              v62 = v73 + 1;
              if (v73 + 1 >= v69)
                goto LABEL_124;
              v74 = *(_QWORD *)(v67 + 8 * v62);
              if (!v74)
              {
                v62 = v73 + 2;
                if (v73 + 2 >= v69)
                  goto LABEL_124;
                v74 = *(_QWORD *)(v67 + 8 * v62);
                if (!v74)
                {
                  v62 = v73 + 3;
                  if (v73 + 3 >= v69)
                    goto LABEL_124;
                  v74 = *(_QWORD *)(v67 + 8 * v62);
                  if (!v74)
                  {
                    v62 = v73 + 4;
                    if (v73 + 4 >= v69)
                      goto LABEL_124;
                    v74 = *(_QWORD *)(v67 + 8 * v62);
                    if (!v74)
                    {
                      v75 = v73 + 5;
                      if (v75 >= v69)
                        goto LABEL_124;
                      v74 = *(_QWORD *)(v67 + 8 * v75);
                      if (!v74)
                      {
                        while (1)
                        {
                          v62 = v75 + 1;
                          if (__OFADD__(v75, 1))
                            goto LABEL_144;
                          if (v62 >= v69)
                            goto LABEL_124;
                          v74 = *(_QWORD *)(v67 + 8 * v62);
                          ++v75;
                          if (v74)
                            goto LABEL_123;
                        }
                      }
                      v62 = v75;
                    }
                  }
                }
              }
            }
LABEL_123:
            v68 = (v74 - 1) & v74;
            v71 = __clz(__rbit64(v74)) + (v62 << 6);
          }
          v72 = *(_QWORD *)(*(_QWORD *)(v64 + 56) + 8 * v71);
          v12 = __OFADD__(v63, v72);
          v63 += v72;
          if (v12)
            goto LABEL_130;
        }
      }
      goto LABEL_138;
    }
    v59 = *(_QWORD *)(v52 + 8 * v58);
    ++v47;
    if (v59)
      goto LABEL_98;
    v47 = v58 + 1;
    if (v58 + 1 >= v54)
      goto LABEL_99;
    v59 = *(_QWORD *)(v52 + 8 * v47);
    if (v59)
      goto LABEL_98;
    v47 = v58 + 2;
    if (v58 + 2 >= v54)
      goto LABEL_99;
    v59 = *(_QWORD *)(v52 + 8 * v47);
    if (v59)
      goto LABEL_98;
    v47 = v58 + 3;
    if (v58 + 3 >= v54)
      goto LABEL_99;
    v59 = *(_QWORD *)(v52 + 8 * v47);
    if (v59)
      goto LABEL_98;
    v47 = v58 + 4;
    if (v58 + 4 >= v54)
      goto LABEL_99;
    v59 = *(_QWORD *)(v52 + 8 * v47);
    if (v59)
    {
LABEL_98:
      v53 = (v59 - 1) & v59;
      v56 = __clz(__rbit64(v59)) + (v47 << 6);
LABEL_79:
      v57 = *(_QWORD *)(*(_QWORD *)(v49 + 56) + 8 * v56);
      v12 = __OFADD__(v48, v57);
      v48 += v57;
      if (v12)
        goto LABEL_129;
      continue;
    }
    break;
  }
  v60 = v58 + 5;
  if (v60 >= v54)
    goto LABEL_99;
  v59 = *(_QWORD *)(v52 + 8 * v60);
  if (v59)
  {
    v47 = v60;
    goto LABEL_98;
  }
  while (1)
  {
    v47 = v60 + 1;
    if (__OFADD__(v60, 1))
      break;
    if (v47 >= v54)
      goto LABEL_99;
    v59 = *(_QWORD *)(v52 + 8 * v47);
    ++v60;
    if (v59)
      goto LABEL_98;
  }
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
  return result;
}

unint64_t default argument 0 of PoemCooccurrenceCounts.init(tagger:ecr:pronoun:sender:receiver:taggerDistances:taggerLengths:taggerConfidences:ecrDistances:ecrLengths:ecrConfidences:)()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
}

unint64_t default argument 1 of PoemCooccurrenceCounts.init(tagger:ecr:pronoun:sender:receiver:taggerDistances:taggerLengths:taggerConfidences:ecrDistances:ecrLengths:ecrConfidences:)()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
}

unint64_t default argument 2 of PoemCooccurrenceCounts.init(tagger:ecr:pronoun:sender:receiver:taggerDistances:taggerLengths:taggerConfidences:ecrDistances:ecrLengths:ecrConfidences:)()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
}

unint64_t default argument 3 of PoemCooccurrenceCounts.init(tagger:ecr:pronoun:sender:receiver:taggerDistances:taggerLengths:taggerConfidences:ecrDistances:ecrLengths:ecrConfidences:)()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
}

unint64_t default argument 4 of PoemCooccurrenceCounts.init(tagger:ecr:pronoun:sender:receiver:taggerDistances:taggerLengths:taggerConfidences:ecrDistances:ecrLengths:ecrConfidences:)()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
}

uint64_t default argument 5 of PoemCooccurrenceCounts.init(tagger:ecr:pronoun:sender:receiver:taggerDistances:taggerLengths:taggerConfidences:ecrDistances:ecrLengths:ecrConfidences:)()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t default argument 6 of PoemCooccurrenceCounts.init(tagger:ecr:pronoun:sender:receiver:taggerDistances:taggerLengths:taggerConfidences:ecrDistances:ecrLengths:ecrConfidences:)()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t default argument 7 of PoemCooccurrenceCounts.init(tagger:ecr:pronoun:sender:receiver:taggerDistances:taggerLengths:taggerConfidences:ecrDistances:ecrLengths:ecrConfidences:)()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t default argument 8 of PoemCooccurrenceCounts.init(tagger:ecr:pronoun:sender:receiver:taggerDistances:taggerLengths:taggerConfidences:ecrDistances:ecrLengths:ecrConfidences:)()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t default argument 9 of PoemCooccurrenceCounts.init(tagger:ecr:pronoun:sender:receiver:taggerDistances:taggerLengths:taggerConfidences:ecrDistances:ecrLengths:ecrConfidences:)()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t default argument 10 of PoemCooccurrenceCounts.init(tagger:ecr:pronoun:sender:receiver:taggerDistances:taggerLengths:taggerConfidences:ecrDistances:ecrLengths:ecrConfidences:)()
{
  return MEMORY[0x24BEE4AF8];
}

void __swiftcall PoemCooccurrenceCounts.init(tagger:ecr:pronoun:sender:receiver:taggerDistances:taggerLengths:taggerConfidences:ecrDistances:ecrLengths:ecrConfidences:)(DocumentUnderstanding::PoemCooccurrenceCounts *__return_ptr retstr, Swift::OpaquePointer tagger, Swift::OpaquePointer ecr, Swift::OpaquePointer pronoun, Swift::OpaquePointer sender, Swift::OpaquePointer receiver, Swift::OpaquePointer taggerDistances, Swift::OpaquePointer taggerLengths, Swift::OpaquePointer taggerConfidences, Swift::OpaquePointer ecrDistances, Swift::OpaquePointer ecrLengths, Swift::OpaquePointer ecrConfidences)
{
  retstr->tagger = tagger;
  retstr->ecr = ecr;
  retstr->pronoun = pronoun;
  retstr->sender = sender;
  retstr->receiver = receiver;
  retstr->taggerDistances = taggerDistances;
  retstr->taggerLengths = taggerLengths;
  retstr->taggerConfidences = taggerConfidences;
  *(_OWORD *)&retstr->ecrDistances._rawValue = *(_OWORD *)&ecrDistances._rawValue;
  retstr->ecrConfidences = ecrConfidences;
}

void *specialized _NativeDictionary.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  id v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSTextCheckingKey, String>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      v9 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_26;
      v25 = *(_QWORD *)(v6 + 8 * v9);
      if (!v25)
        break;
    }
LABEL_25:
    v12 = (v25 - 1) & v25;
    v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v18);
    v20 = *v19;
    v21 = v19[1];
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v18);
    *v22 = v20;
    v22[1] = v21;
    v23 = v17;
    result = (void *)swift_bridgeObjectRetain();
  }
  v26 = v24 + 2;
  if (v26 >= v13)
    goto LABEL_26;
  v25 = *(_QWORD *)(v6 + 8 * v26);
  if (v25)
  {
    v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v9);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Int>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = v19;
    v22[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  __int128 v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data?>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v24 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v16);
    v20 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v20 = v19;
    v20[1] = v18;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v16) = v24;
    swift_bridgeObjectRetain();
    result = (void *)outlined copy of Data?(v24, *((unint64_t *)&v24 + 1));
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _BYTE v26[40];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Result<Any?, Error>>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = *v17;
    v19 = v17[1];
    v20 = 40 * v15;
    outlined init with copy of Result<Any?, Error>(*(_QWORD *)(v2 + 56) + 40 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v18;
    v21[1] = v19;
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v26, *(_QWORD *)(v4 + 56) + v20, &demangling cache variable for type metadata for Result<Any?, Error>);
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  __int128 v26[2];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, DUProcessingPhaseSpecification>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 40 * v15;
    outlined init with copy of TopLevelSpecificationProtocol(*(_QWORD *)(v2 + 56) + 40 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    outlined init with take of DUProcessingPhaseSpecification(v26, *(_QWORD *)(v4 + 56) + v20);
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, [DUProcessingPhaseImplementation]>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, Int>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v21 = __clz(__rbit64(v19));
    v12 = (v19 - 1) & v19;
    v15 = v21 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  __int128 v31;
  __int128 v32;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PoemCooccurrenceCounts>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v28 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v13)
      goto LABEL_26;
    v29 = *(_QWORD *)(v6 + 8 * v28);
    ++v9;
    if (!v29)
    {
      v9 = v28 + 1;
      if (v28 + 1 >= v13)
        goto LABEL_26;
      v29 = *(_QWORD *)(v6 + 8 * v9);
      if (!v29)
        break;
    }
LABEL_25:
    v12 = (v29 - 1) & v29;
    v15 = __clz(__rbit64(v29)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 88 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v22 = *(_QWORD *)(v21 + 80);
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v24 = *(_OWORD *)v21;
    v31 = *(_OWORD *)(v21 + 16);
    v25 = *(_OWORD *)(v21 + 32);
    v32 = *(_OWORD *)(v21 + 48);
    v26 = *(_OWORD *)(v21 + 64);
    *v23 = v19;
    v23[1] = v18;
    v27 = *(_QWORD *)(v4 + 56) + v20;
    *(_OWORD *)v27 = v24;
    *(_OWORD *)(v27 + 16) = v31;
    *(_OWORD *)(v27 + 32) = v25;
    *(_OWORD *)(v27 + 48) = v32;
    *(_OWORD *)(v27 + 64) = v26;
    *(_QWORD *)(v27 + 80) = v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v30 = v28 + 2;
  if (v30 >= v13)
    goto LABEL_26;
  v29 = *(_QWORD *)(v6 + 8 * v30);
  if (v29)
  {
    v9 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v29 = *(_QWORD *)(v6 + 8 * v9);
    ++v30;
    if (v29)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PoemMessageThread>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = (void *)swift_retain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (eid: String, confidence: Double)>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      v9 = v27 + 1;
      if (v27 + 1 >= v13)
        goto LABEL_26;
      v28 = *(_QWORD *)(v6 + 8 * v9);
      if (!v28)
        break;
    }
LABEL_25:
    v12 = (v28 - 1) & v28;
    v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 24 * v15;
    v21 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = *v21;
    v23 = v21[1];
    v24 = v21[2];
    v25 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v25 = v19;
    v25[1] = v18;
    v26 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v20);
    *v26 = v22;
    v26[1] = v23;
    v26[2] = v24;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v29 = v27 + 2;
  if (v29 >= v13)
    goto LABEL_26;
  v28 = *(_QWORD *)(v6 + 8 * v29);
  if (v28)
  {
    v9 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v9);
    ++v29;
    if (v28)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    outlined init with copy of Any(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    outlined init with take of Any(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PoemEntityCounts>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      v9 = v27 + 1;
      if (v27 + 1 >= v13)
        goto LABEL_26;
      v28 = *(_QWORD *)(v6 + 8 * v9);
      if (!v28)
        break;
    }
LABEL_25:
    v12 = (v28 - 1) & v28;
    v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 40 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v22 = *(_QWORD *)(v21 + 32);
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v24 = *(_OWORD *)v21;
    v25 = *(_OWORD *)(v21 + 16);
    *v23 = v19;
    v23[1] = v18;
    v26 = *(_QWORD *)(v4 + 56) + v20;
    *(_OWORD *)v26 = v24;
    *(_OWORD *)(v26 + 16) = v25;
    *(_QWORD *)(v26 + 32) = v22;
    result = (void *)swift_bridgeObjectRetain();
  }
  v29 = v27 + 2;
  if (v29 >= v13)
    goto LABEL_26;
  v28 = *(_QWORD *)(v6 + 8 * v29);
  if (v28)
  {
    v9 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v9);
    ++v29;
    if (v28)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (Float, [String : Bool])>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_QWORD *)(v2 + 56);
    v18 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v20 = *v18;
    v19 = v18[1];
    v21 = *(_DWORD *)(v17 + v16);
    v22 = *(_QWORD *)(v17 + v16 + 8);
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v20;
    v23[1] = v19;
    v24 = *(_QWORD *)(v4 + 56) + v16;
    *(_DWORD *)v24 = v21;
    *(_QWORD *)(v24 + 8) = v22;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, DUTermOfAddressType>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, UInt8>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Double>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, [Double]>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, [Float]>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    result = (void *)swift_bridgeObjectRetain();
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  uint64_t v9;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;

  v1 = v0;
  v2 = type metadata accessor for DocumentUnderstanding_HiddenLayerOutput(0);
  v26 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int64, DocumentUnderstanding_HiddenLayerOutput>);
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v7;
    return result;
  }
  v25 = v1;
  result = (void *)(v6 + 64);
  v9 = v5 + 64;
  v10 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v5 + 64), 8 * v10);
  v12 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v13 = 1 << *(_BYTE *)(v5 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v5 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v22 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v16)
      goto LABEL_26;
    v23 = *(_QWORD *)(v9 + 8 * v22);
    ++v12;
    if (!v23)
    {
      v12 = v22 + 1;
      if (v22 + 1 >= v16)
        goto LABEL_26;
      v23 = *(_QWORD *)(v9 + 8 * v12);
      if (!v23)
        break;
    }
LABEL_25:
    v15 = (v23 - 1) & v23;
    v18 = __clz(__rbit64(v23)) + (v12 << 6);
LABEL_12:
    v19 = 8 * v18;
    v20 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v18);
    v21 = *(_QWORD *)(v26 + 72) * v18;
    outlined init with copy of DocumentUnderstanding_HiddenLayerOutput(*(_QWORD *)(v5 + 56) + v21, (uint64_t)v4);
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v19) = v20;
    result = (void *)outlined init with take of DocumentUnderstanding_HiddenLayerOutput((uint64_t)v4, *(_QWORD *)(v7 + 56) + v21);
  }
  v24 = v22 + 2;
  if (v24 >= v16)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v9 + 8 * v24);
  if (v23)
  {
    v12 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v12 >= v16)
      goto LABEL_26;
    v23 = *(_QWORD *)(v9 + 8 * v12);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

id specialized _NativeDictionary.copy()()
{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, BMTextUnderstandingPoemBufferExtraction>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, BMTextUnderstandingPoem>);
}

id specialized _NativeDictionary.copy()(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v2 = v5;
    return result;
  }
  result = (id)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(void **)(*(_QWORD *)(v3 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    result = v21;
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.copy()(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v21 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v14)
      goto LABEL_26;
    v22 = *(_QWORD *)(v7 + 8 * v21);
    ++v10;
    if (!v22)
    {
      v10 = v21 + 1;
      if (v21 + 1 >= v14)
        goto LABEL_26;
      v22 = *(_QWORD *)(v7 + 8 * v10);
      if (!v22)
        break;
    }
LABEL_25:
    v13 = (v22 - 1) & v22;
    v16 = __clz(__rbit64(v22)) + (v10 << 6);
LABEL_12:
    v17 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v19 = *v17;
    v18 = v17[1];
    LOBYTE(v17) = *(_BYTE *)(*(_QWORD *)(v3 + 56) + v16);
    v20 = (_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v16);
    *v20 = v19;
    v20[1] = v18;
    *(_BYTE *)(*(_QWORD *)(v5 + 56) + v16) = (_BYTE)v17;
    result = (void *)swift_bridgeObjectRetain();
  }
  v23 = v21 + 2;
  if (v23 >= v14)
    goto LABEL_26;
  v22 = *(_QWORD *)(v7 + 8 * v23);
  if (v22)
  {
    v10 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v22 = *(_QWORD *)(v7 + 8 * v10);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  void *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  _QWORD *v37;
  uint64_t i;
  char v39;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSTextCheckingKey, String>);
  v39 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v35 = v2;
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v37 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v36 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    for (i = v5; ; v5 = i)
    {
      if (v10)
      {
        v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v21 = v20 | (v13 << 6);
      }
      else
      {
        v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v36)
          goto LABEL_33;
        v23 = v37[v22];
        ++v13;
        if (!v23)
        {
          v13 = v22 + 1;
          if (v22 + 1 >= v36)
            goto LABEL_33;
          v23 = v37[v13];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v36)
            {
LABEL_33:
              swift_release();
              v3 = v35;
              if ((v39 & 1) != 0)
              {
                v34 = 1 << *(_BYTE *)(v5 + 32);
                if (v34 >= 64)
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v37 = -1 << v34;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v23 = v37[v24];
            if (!v23)
            {
              while (1)
              {
                v13 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_40;
                if (v13 >= v36)
                  goto LABEL_33;
                v23 = v37[v13];
                ++v24;
                if (v23)
                  goto LABEL_30;
              }
            }
            v13 = v24;
          }
        }
LABEL_30:
        v10 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      v29 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v21);
      v30 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v21);
      v31 = *v30;
      v32 = v30[1];
      if ((v39 & 1) == 0)
      {
        v33 = v29;
        swift_bridgeObjectRetain();
      }
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      Hasher.init(_seed:)();
      String.hash(into:)();
      v14 = Hasher._finalize()();
      result = swift_bridgeObjectRelease();
      v15 = -1 << *(_BYTE *)(v7 + 32);
      v16 = v14 & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v11 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v11 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v17 == v26;
          if (v17 == v26)
            v17 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v11 + 8 * v17);
        }
        while (v28 == -1);
        v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(_QWORD *)(v11 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v18) = v29;
      v19 = (_QWORD *)(*(_QWORD *)(v7 + 56) + 16 * v18);
      *v19 = v31;
      v19[1] = v32;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Int>);
  v37 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = v2;
  v35 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v35)
        goto LABEL_33;
      v23 = *(_QWORD *)(v36 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          v3 = v34;
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v35)
              goto LABEL_33;
            v23 = *(_QWORD *)(v36 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v37 & 1) == 0)
      swift_bridgeObjectRetain();
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v34;
  v22 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  v42 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v41 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v39 = v2;
  v40 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      v13 = v23 + 1;
      if (v23 + 1 >= v40)
        goto LABEL_33;
      v25 = *(_QWORD *)(v41 + 8 * v13);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          v3 = v39;
          if ((v42 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v25 = *(_QWORD *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v13 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_42;
            if (v13 >= v40)
              goto LABEL_33;
            v25 = *(_QWORD *)(v41 + 8 * v13);
            ++v26;
            if (v25)
              goto LABEL_30;
          }
        }
        v13 = v26;
      }
    }
LABEL_30:
    v10 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    v31 = 16 * v22;
    v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
    v34 = *v32;
    v33 = v32[1];
    v35 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v31);
    v36 = *v35;
    v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v16 == v28;
        if (v16 == v28)
          v16 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = 16 * v17;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v18);
    *v19 = v34;
    v19[1] = v33;
    v20 = (_QWORD *)(*(_QWORD *)(v7 + 56) + v18);
    *v20 = v36;
    v20[1] = v37;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v39;
  v24 = (_QWORD *)(v5 + 64);
  if ((v42 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v38 = 1 << *(_BYTE *)(v5 + 32);
  if (v38 >= 64)
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v38;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  _QWORD *v36;
  __int128 v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data?>);
  v6 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v22 = v21 | (v14 << 6);
      }
      else
      {
        v23 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v23 >= v35)
          goto LABEL_33;
        v24 = v36[v23];
        ++v14;
        if (!v24)
        {
          v14 = v23 + 1;
          if (v23 + 1 >= v35)
            goto LABEL_33;
          v24 = v36[v14];
          if (!v24)
          {
            v25 = v23 + 2;
            if (v25 >= v35)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v6 & 1) != 0)
              {
                v34 = 1 << *(_BYTE *)(v5 + 32);
                if (v34 >= 64)
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v34;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v24 = v36[v25];
            if (!v24)
            {
              while (1)
              {
                v14 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_40;
                if (v14 >= v35)
                  goto LABEL_33;
                v24 = v36[v14];
                ++v25;
                if (v24)
                  goto LABEL_30;
              }
            }
            v14 = v25;
          }
        }
LABEL_30:
        v11 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v14 << 6);
      }
      v30 = 16 * v22;
      v31 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v30);
      v33 = *v31;
      v32 = v31[1];
      v37 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + v30);
      if ((v6 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        outlined copy of Data?(v37, *((unint64_t *)&v37 + 1));
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v28 = v17 == v27;
          if (v17 == v27)
            v17 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v12 + 8 * v17);
        }
        while (v29 == -1);
        v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }
      *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = 16 * v18;
      v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v19);
      *v20 = v33;
      v20[1] = v32;
      *(_OWORD *)(*(_QWORD *)(v8 + 56) + v19) = v37;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
  *v3 = v8;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;
  _BYTE v37[40];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Result<Any?, Error>>);
  v36 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v34)
      break;
    v19 = (_QWORD *)(v5 + 64);
    v20 = *(_QWORD *)(v35 + 8 * v18);
    ++v13;
    if (!v20)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v34)
        goto LABEL_34;
      v20 = *(_QWORD *)(v35 + 8 * v13);
      if (!v20)
      {
        v21 = v18 + 2;
        if (v21 >= v34)
        {
LABEL_34:
          swift_release();
          if ((v36 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v20 = *(_QWORD *)(v35 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            v13 = v21 + 1;
            if (__OFADD__(v21, 1))
              goto LABEL_43;
            if (v13 >= v34)
              goto LABEL_34;
            v20 = *(_QWORD *)(v35 + 8 * v13);
            ++v21;
            if (v20)
              goto LABEL_21;
          }
        }
        v13 = v21;
      }
    }
LABEL_21:
    v10 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    v22 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
    v24 = *v22;
    v23 = v22[1];
    v25 = *(_QWORD *)(v5 + 56) + 40 * v17;
    if ((v36 & 1) != 0)
    {
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v25, (uint64_t)v37, &demangling cache variable for type metadata for Result<Any?, Error>);
    }
    else
    {
      outlined init with copy of Result<Any?, Error>(v25, (uint64_t)v37);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v26 = -1 << *(_BYTE *)(v7 + 32);
    v27 = result & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v11 + 8 * (v27 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v31 = v28 == v30;
        if (v28 == v30)
          v28 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v11 + 8 * v28);
      }
      while (v32 == -1);
      v14 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14);
    *v15 = v24;
    v15[1] = v23;
    result = outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v37, *(_QWORD *)(v7 + 56) + 40 * v14, &demangling cache variable for type metadata for Result<Any?, Error>);
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v19 = (_QWORD *)(v5 + 64);
  if ((v36 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v19, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v19 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  __int128 v38[2];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, DUProcessingPhaseSpecification>);
  v37 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = v2;
  v35 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v35)
      break;
    v19 = (_QWORD *)(v5 + 64);
    v20 = *(_QWORD *)(v36 + 8 * v18);
    ++v13;
    if (!v20)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v35)
        goto LABEL_34;
      v20 = *(_QWORD *)(v36 + 8 * v13);
      if (!v20)
      {
        v21 = v18 + 2;
        if (v21 >= v35)
        {
LABEL_34:
          swift_release();
          v3 = v34;
          if ((v37 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v20 = *(_QWORD *)(v36 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            v13 = v21 + 1;
            if (__OFADD__(v21, 1))
              goto LABEL_43;
            if (v13 >= v35)
              goto LABEL_34;
            v20 = *(_QWORD *)(v36 + 8 * v13);
            ++v21;
            if (v20)
              goto LABEL_21;
          }
        }
        v13 = v21;
      }
    }
LABEL_21:
    v10 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    v22 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
    v24 = *v22;
    v23 = v22[1];
    v25 = (__int128 *)(*(_QWORD *)(v5 + 56) + 40 * v17);
    if ((v37 & 1) != 0)
    {
      outlined init with take of DUProcessingPhaseSpecification(v25, (uint64_t)v38);
    }
    else
    {
      outlined init with copy of TopLevelSpecificationProtocol((uint64_t)v25, (uint64_t)v38);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v26 = -1 << *(_BYTE *)(v7 + 32);
    v27 = result & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v11 + 8 * (v27 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v31 = v28 == v30;
        if (v28 == v30)
          v28 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v11 + 8 * v28);
      }
      while (v32 == -1);
      v14 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14);
    *v15 = v24;
    v15[1] = v23;
    result = outlined init with take of DUProcessingPhaseSpecification(v38, *(_QWORD *)(v7 + 56) + 40 * v14);
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v34;
  v19 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v19, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v19 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, [DUProcessingPhaseImplementation]>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, Int>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v35 = a2;
    v34 = v3;
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v32 = -1 << v10;
    v33 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13)
          goto LABEL_31;
        v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          v8 = v19 + 1;
          if (v19 + 1 >= v13)
            goto LABEL_31;
          v20 = v9[v8];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                result = swift_release();
                v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64)
                bzero((void *)(v5 + 64), 8 * v13);
              else
                *v9 = v32;
              v3 = v34;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                v8 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_40;
                if (v8 >= v13)
                  goto LABEL_31;
                v20 = v9[v8];
                ++v21;
                if (v20)
                  goto LABEL_21;
              }
            }
            v8 = v21;
          }
        }
LABEL_21:
        v12 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v22 = 8 * v18;
      v23 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v22);
      v24 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v22);
      result = static Hasher._hash(seed:_:)();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = 8 * v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v16) = v23;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v16) = v24;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  _QWORD *v36;
  char v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PoemCooccurrenceCounts>);
  v37 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v21 = v20 | (v13 << 6);
      }
      else
      {
        v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v35)
          goto LABEL_33;
        v23 = v36[v22];
        ++v13;
        if (!v23)
        {
          v13 = v22 + 1;
          if (v22 + 1 >= v35)
            goto LABEL_33;
          v23 = v36[v13];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v35)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v37 & 1) != 0)
              {
                v34 = 1 << *(_BYTE *)(v5 + 32);
                if (v34 >= 64)
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v34;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v23 = v36[v24];
            if (!v23)
            {
              while (1)
              {
                v13 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_40;
                if (v13 >= v35)
                  goto LABEL_33;
                v23 = v36[v13];
                ++v24;
                if (v23)
                  goto LABEL_30;
              }
            }
            v13 = v24;
          }
        }
LABEL_30:
        v10 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
      v31 = *v29;
      v30 = v29[1];
      v32 = *(_QWORD *)(v5 + 56) + 88 * v21;
      v41 = *(_OWORD *)(v32 + 32);
      v42 = *(_OWORD *)(v32 + 16);
      v40 = *(_OWORD *)(v32 + 48);
      v38 = *(_OWORD *)v32;
      v39 = *(_OWORD *)(v32 + 64);
      v33 = *(_QWORD *)(v32 + 80);
      if ((v37 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v16 == v26;
          if (v16 == v26)
            v16 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
      *v18 = v31;
      v18[1] = v30;
      v19 = *(_QWORD *)(v7 + 56) + 88 * v17;
      *(_OWORD *)v19 = v38;
      *(_OWORD *)(v19 + 16) = v42;
      *(_OWORD *)(v19 + 32) = v41;
      *(_OWORD *)(v19 + 48) = v40;
      *(_OWORD *)(v19 + 64) = v39;
      *(_QWORD *)(v19 + 80) = v33;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PoemMessageThread>);
  v36 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v34)
        goto LABEL_33;
      v23 = *(_QWORD *)(v35 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v34)
              goto LABEL_33;
            v23 = *(_QWORD *)(v35 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((v36 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, BMTextUnderstandingPoemBufferExtraction>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  _QWORD *v38;
  char v39;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (eid: String, confidence: Double)>);
  v39 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v38 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v21 = v20 | (v13 << 6);
      }
      else
      {
        v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v37)
          goto LABEL_33;
        v23 = v38[v22];
        ++v13;
        if (!v23)
        {
          v13 = v22 + 1;
          if (v22 + 1 >= v37)
            goto LABEL_33;
          v23 = v38[v13];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v37)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v39 & 1) != 0)
              {
                v36 = 1 << *(_BYTE *)(v5 + 32);
                if (v36 >= 64)
                  bzero(v38, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v38 = -1 << v36;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v23 = v38[v24];
            if (!v23)
            {
              while (1)
              {
                v13 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_40;
                if (v13 >= v37)
                  goto LABEL_33;
                v23 = v38[v13];
                ++v24;
                if (v23)
                  goto LABEL_30;
              }
            }
            v13 = v24;
          }
        }
LABEL_30:
        v10 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
      v31 = *v29;
      v30 = v29[1];
      v32 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 24 * v21);
      v34 = *v32;
      v33 = v32[1];
      v35 = v32[2];
      if ((v39 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v16 == v26;
          if (v16 == v26)
            v16 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
      *v18 = v31;
      v18[1] = v30;
      v19 = (_QWORD *)(*(_QWORD *)(v7 + 56) + 24 * v17);
      *v19 = v34;
      v19[1] = v33;
      v19[2] = v35;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  _QWORD *v34;
  _OWORD v35[2];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v34 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33)
          goto LABEL_34;
        v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v33)
            goto LABEL_34;
          v19 = v34[v13];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              v3 = v2;
              if ((a2 & 1) != 0)
              {
                v32 = 1 << *(_BYTE *)(v5 + 32);
                if (v32 >= 64)
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v34 = -1 << v32;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                v13 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_41;
                if (v13 >= v33)
                  goto LABEL_34;
                v19 = v34[v13];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v13 = v20;
          }
        }
LABEL_21:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
      v23 = *v21;
      v22 = v21[1];
      v24 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v17);
      if ((a2 & 1) != 0)
      {
        outlined init with take of Any(v24, v35);
      }
      else
      {
        outlined init with copy of Any((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14);
      *v15 = v23;
      v15[1] = v22;
      result = (uint64_t)outlined init with take of Any(v35, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v14));
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, BMTextUnderstandingPoem>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  _QWORD *v36;
  char v37;
  __int128 v38;
  __int128 v39;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PoemEntityCounts>);
  v37 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v21 = v20 | (v13 << 6);
      }
      else
      {
        v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v35)
          goto LABEL_33;
        v23 = v36[v22];
        ++v13;
        if (!v23)
        {
          v13 = v22 + 1;
          if (v22 + 1 >= v35)
            goto LABEL_33;
          v23 = v36[v13];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v35)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v37 & 1) != 0)
              {
                v34 = 1 << *(_BYTE *)(v5 + 32);
                if (v34 >= 64)
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v34;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v23 = v36[v24];
            if (!v23)
            {
              while (1)
              {
                v13 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_40;
                if (v13 >= v35)
                  goto LABEL_33;
                v23 = v36[v13];
                ++v24;
                if (v23)
                  goto LABEL_30;
              }
            }
            v13 = v24;
          }
        }
LABEL_30:
        v10 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
      v31 = *v29;
      v30 = v29[1];
      v32 = *(_QWORD *)(v5 + 56) + 40 * v21;
      v38 = *(_OWORD *)v32;
      v39 = *(_OWORD *)(v32 + 16);
      v33 = *(_QWORD *)(v32 + 32);
      if ((v37 & 1) == 0)
        swift_bridgeObjectRetain();
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v16 == v26;
          if (v16 == v26)
            v16 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
      *v18 = v31;
      v18[1] = v30;
      v19 = *(_QWORD *)(v7 + 56) + 40 * v17;
      *(_OWORD *)v19 = v38;
      *(_OWORD *)(v19 + 16) = v39;
      *(_QWORD *)(v19 + 32) = v33;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  char v41;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (Float, [String : Bool])>);
  v41 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v40 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v39 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v39)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v40 + 8 * v23);
    ++v13;
    if (!v25)
    {
      v13 = v23 + 1;
      if (v23 + 1 >= v39)
        goto LABEL_33;
      v25 = *(_QWORD *)(v40 + 8 * v13);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v39)
        {
LABEL_33:
          swift_release();
          if ((v41 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v25 = *(_QWORD *)(v40 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v13 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_42;
            if (v13 >= v39)
              goto LABEL_33;
            v25 = *(_QWORD *)(v40 + 8 * v13);
            ++v26;
            if (v25)
              goto LABEL_30;
          }
        }
        v13 = v26;
      }
    }
LABEL_30:
    v10 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    v31 = 16 * v22;
    v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
    v34 = *v32;
    v33 = v32[1];
    v35 = *(_QWORD *)(v5 + 56) + v31;
    v36 = *(_DWORD *)v35;
    v37 = *(_QWORD *)(v35 + 8);
    if ((v41 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v16 == v28;
        if (v16 == v28)
          v16 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = 16 * v17;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v18);
    *v19 = v34;
    v19[1] = v33;
    v20 = *(_QWORD *)(v7 + 56) + v18;
    *(_DWORD *)v20 = v36;
    *(_QWORD *)(v20 + 8) = v37;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v24 = (_QWORD *)(v5 + 64);
  if ((v41 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v38 = 1 << *(_BYTE *)(v5 + 32);
  if (v38 >= 64)
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v38;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, DUTermOfAddressType>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, UInt8>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Double>);
  v37 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v2;
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v11)
        goto LABEL_33;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          v3 = v35;
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
      swift_bridgeObjectRetain();
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, [Double]>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, [Float]>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v31 = -1 << v10;
    v32 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v8 << 6);
      }
      else
      {
        v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v33)
          goto LABEL_33;
        v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          v8 = v21 + 1;
          if (v21 + 1 >= v33)
            goto LABEL_33;
          v22 = v9[v8];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v33)
            {
LABEL_33:
              if ((a2 & 1) != 0)
              {
                if (v32 >= 64)
                  bzero((void *)(v5 + 64), 8 * v33);
                else
                  *v9 = v31;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                v8 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_41;
                if (v8 >= v33)
                  goto LABEL_33;
                v22 = v9[v8];
                ++v23;
                if (v22)
                  goto LABEL_30;
              }
            }
            v8 = v23;
          }
        }
LABEL_30:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      v28 = 8 * v20;
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v28);
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v28);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain();
      result = static Hasher._hash(seed:_:)();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v26 = v16 == v25;
          if (v16 == v25)
            v16 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = 8 * v17;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v18) = v29;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v30;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  _QWORD *v36;
  uint64_t v37;

  v3 = v2;
  v5 = type metadata accessor for DocumentUnderstanding_HiddenLayerOutput(0);
  v37 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int64, DocumentUnderstanding_HiddenLayerOutput>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v10 = result;
  if (*(_QWORD *)(v8 + 16))
  {
    v11 = 0;
    v12 = *(_QWORD *)(v8 + 64);
    v36 = (_QWORD *)(v8 + 64);
    v13 = 1 << *(_BYTE *)(v8 + 32);
    if (v13 < 64)
      v14 = ~(-1 << v13);
    else
      v14 = -1;
    v15 = v14 & v12;
    v34 = v3;
    v35 = (unint64_t)(v13 + 63) >> 6;
    v16 = result + 64;
    while (1)
    {
      if (v15)
      {
        v18 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        v19 = v18 | (v11 << 6);
      }
      else
      {
        v20 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        result = (uint64_t)v36;
        if (v20 >= v35)
          goto LABEL_34;
        v21 = v36[v20];
        ++v11;
        if (!v21)
        {
          v11 = v20 + 1;
          if (v20 + 1 >= v35)
            goto LABEL_34;
          v21 = v36[v11];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v35)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v34;
                goto LABEL_41;
              }
              v33 = 1 << *(_BYTE *)(v8 + 32);
              if (v33 >= 64)
                bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v36 = -1 << v33;
              v3 = v34;
              *(_QWORD *)(v8 + 16) = 0;
              break;
            }
            v21 = v36[v22];
            if (!v21)
            {
              while (1)
              {
                v11 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_43;
                if (v11 >= v35)
                  goto LABEL_34;
                v21 = v36[v11];
                ++v22;
                if (v21)
                  goto LABEL_21;
              }
            }
            v11 = v22;
          }
        }
LABEL_21:
        v15 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v11 << 6);
      }
      v23 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v19);
      v24 = *(_QWORD *)(v37 + 72);
      v25 = *(_QWORD *)(v8 + 56) + v24 * v19;
      if ((a2 & 1) != 0)
        outlined init with take of DocumentUnderstanding_HiddenLayerOutput(v25, (uint64_t)v7);
      else
        outlined init with copy of DocumentUnderstanding_HiddenLayerOutput(v25, (uint64_t)v7);
      result = static Hasher._hash(seed:_:)();
      v26 = -1 << *(_BYTE *)(v10 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v16 + 8 * (v27 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v16 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v16 + 8 * v28);
        }
        while (v32 == -1);
        v17 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v16 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v17) = v23;
      result = outlined init with take of DocumentUnderstanding_HiddenLayerOutput((uint64_t)v7, *(_QWORD *)(v10 + 56) + v24 * v17);
      ++*(_QWORD *)(v10 + 16);
    }
  }
  result = swift_release();
LABEL_41:
  *v3 = v10;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_40;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v38 = v6 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v6 + 64);
  v36 = v3;
  v37 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v37)
      break;
    v23 = (_QWORD *)(v6 + 64);
    v24 = *(_QWORD *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v37)
        goto LABEL_33;
      v24 = *(_QWORD *)(v38 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_33:
          swift_release();
          v4 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v37)
              goto LABEL_33;
            v24 = *(_QWORD *)(v38 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(void **)(*(_QWORD *)(v6 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      v34 = v33;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v4 = v36;
  v23 = (_QWORD *)(v6 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v35 = 1 << *(_BYTE *)(v6 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_40;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v37 = v6 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v6 + 64);
  v35 = v3;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v36)
      break;
    v23 = (_QWORD *)(v6 + 64);
    v24 = *(_QWORD *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v36)
        goto LABEL_33;
      v24 = *(_QWORD *)(v37 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v36)
        {
LABEL_33:
          swift_release();
          v4 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v36)
              goto LABEL_33;
            v24 = *(_QWORD *)(v37 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_BYTE *)(*(_QWORD *)(v6 + 56) + v21);
    if ((v38 & 1) == 0)
      swift_bridgeObjectRetain();
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_BYTE *)(*(_QWORD *)(v8 + 56) + v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v4 = v35;
  v23 = (_QWORD *)(v6 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v6 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_40;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v36 = v6 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v6 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v6 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_33;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v35)
              goto LABEL_33;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v23 = (_QWORD *)(v6 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v6 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v4 = v8;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a5[6] + 8 * result) = a2;
  v5 = (_QWORD *)(a5[7] + 16 * result);
  *v5 = a3;
  v5[1] = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a6[(result >> 6) + 8] |= 1 << result;
  v6 = (_QWORD *)(a6[6] + 16 * result);
  *v6 = a2;
  v6[1] = a3;
  v7 = (_QWORD *)(a6[7] + 16 * result);
  *v7 = a4;
  v7[1] = a5;
  v8 = a6[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a6[2] = v10;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(a4, a5[7] + 40 * a1, &demangling cache variable for type metadata for Result<Any?, Error>);
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, double a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  a6[(result >> 6) + 8] |= 1 << result;
  v7 = (_QWORD *)(a6[6] + 16 * result);
  *v7 = a2;
  v7[1] = a3;
  v8 = a6[7] + 24 * result;
  *(_QWORD *)v8 = a4;
  *(_QWORD *)(v8 + 8) = a5;
  *(double *)(v8 + 16) = a7;
  v9 = a6[2];
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
    __break(1u);
  else
    a6[2] = v11;
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = outlined init with take of Any(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4, double a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a4[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(double *)(a4[7] + 8 * result) = a5;
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, char *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, _QWORD, _QWORD);
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  char v21;
  void (*v22)(char *, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  char *v24;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;

  v3 = v2;
  v6 = type metadata accessor for Calendar.Component();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component(&lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component, MEMORY[0x24BDCF2A8]);
  swift_bridgeObjectRetain();
  v30 = a2;
  v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v12 = -1 << *(_BYTE *)(v10 + 32);
  v13 = v11 & ~v12;
  v14 = v10;
  v15 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v26 = v2;
    v27 = a1;
    v28 = ~v12;
    v16 = v7;
    v17 = *(_QWORD *)(v7 + 72);
    v29 = v16;
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v16 + 16);
    while (1)
    {
      v19 = v14;
      v20 = v18;
      v18(v9, *(_QWORD *)(v14 + 48) + v17 * v13, v6);
      lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component(&lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component, MEMORY[0x24BDCF2C0]);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      v22 = *(void (**)(char *, uint64_t))(v29 + 8);
      v22(v9, v6);
      if ((v21 & 1) != 0)
        break;
      v13 = (v13 + 1) & v28;
      v14 = v19;
      v18 = v20;
      if (((*(_QWORD *)(v15 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v26;
        a1 = v27;
        v7 = v29;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v30, v6);
    v20(v27, *(_QWORD *)(*v26 + 48) + v17 * v13, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v24 = v30;
    v18(v9, v30, v6);
    v31 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *v3 = v31;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  Swift::Int *v14;
  Swift::Int v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (Swift::Int *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  v3 = v2;
  v6 = *v2;
  v7 = static Hasher._hash(seed:_:)();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v9, isUniquelyReferenced_nonNull_native);
    *v3 = v14;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(v6 + 48);
  if (*(_QWORD *)(v10 + 8 * v9) != a2)
  {
    v11 = ~v8;
    do
    {
      v9 = (v9 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v10 + 8 * v9) != a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void (*v24)(char *, unint64_t, uint64_t);
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v34;
  _QWORD *v35;
  uint64_t v36;

  v1 = v0;
  v2 = type metadata accessor for Calendar.Component();
  v36 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
  v6 = static _SetStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v9 = *(_QWORD *)(v5 + 56);
    v35 = (_QWORD *)(v5 + 56);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & v9;
    v33 = v0;
    v34 = (unint64_t)(v8 + 63) >> 6;
    v12 = v6 + 56;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v14 << 6);
      }
      else
      {
        v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v34)
          goto LABEL_33;
        v19 = v35[v18];
        ++v14;
        if (!v19)
        {
          v14 = v18 + 1;
          if (v18 + 1 >= v34)
            goto LABEL_33;
          v19 = v35[v14];
          if (!v19)
          {
            v14 = v18 + 2;
            if (v18 + 2 >= v34)
              goto LABEL_33;
            v19 = v35[v14];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v34)
              {
LABEL_33:
                swift_release();
                v1 = v33;
                v32 = 1 << *(_BYTE *)(v5 + 32);
                if (v32 > 63)
                  bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v35 = -1 << v32;
                *(_QWORD *)(v5 + 16) = 0;
                break;
              }
              v19 = v35[v20];
              if (!v19)
              {
                while (1)
                {
                  v14 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_39;
                  if (v14 >= v34)
                    goto LABEL_33;
                  v19 = v35[v14];
                  ++v20;
                  if (v19)
                    goto LABEL_23;
                }
              }
              v14 = v20;
            }
          }
        }
LABEL_23:
        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      v21 = v5;
      v22 = *(_QWORD *)(v36 + 72);
      v23 = *(_QWORD *)(v5 + 48) + v22 * v17;
      v24 = *(void (**)(char *, unint64_t, uint64_t))(v36 + 32);
      v24(v4, v23, v2);
      lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component(&lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component, MEMORY[0x24BDCF2A8]);
      result = dispatch thunk of Hashable._rawHashValue(seed:)();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v12 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      result = ((uint64_t (*)(unint64_t, char *, uint64_t))v24)(*(_QWORD *)(v7 + 48) + v15 * v22, v4, v2);
      ++*(_QWORD *)(v7 + 16);
      v5 = v21;
    }
  }
  result = swift_release();
  *v1 = v7;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8)
          goto LABEL_33;
        v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v8)
            goto LABEL_33;
          v17 = v30[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v8)
              goto LABEL_33;
            v17 = v30[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v17 = v30[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_23:
        v7 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      v20 = *v19;
      v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      *v13 = v20;
      v13[1] = v21;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int>);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v6 = (uint64_t *)(v2 + 56);
    v7 = 1 << *(_BYTE *)(v2 + 32);
    v26 = -1 << v7;
    v27 = v1;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v2 + 56);
    v28 = 1 << *(_BYTE *)(v2 + 32);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v5 << 6);
      }
      else
      {
        v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10)
          goto LABEL_33;
        v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          v5 = v15 + 1;
          if (v15 + 1 >= v10)
            goto LABEL_33;
          v16 = v6[v5];
          if (!v16)
          {
            v5 = v15 + 2;
            if (v15 + 2 >= v10)
              goto LABEL_33;
            v16 = v6[v5];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64)
                  bzero((void *)(v2 + 56), 8 * v10);
                else
                  *v6 = v26;
                v1 = v27;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  v5 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v5 >= v10)
                    goto LABEL_33;
                  v16 = v6[v5];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v5 = v17;
            }
          }
        }
LABEL_23:
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
      result = static Hasher._hash(seed:_:)();
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;

  v26 = a1;
  v6 = type metadata accessor for Calendar.Component();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v25 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v11 > v10)
    {
      specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v12 = *v3;
  lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component(&lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component, MEMORY[0x24BDCF2A8]);
  v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a2 = v13 & ~v14;
  if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v15 = ~v14;
    v16 = *(_QWORD *)(v7 + 72);
    v17 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v17(v9, *(_QWORD *)(v12 + 48) + v16 * a2, v6);
      lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component(&lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component, MEMORY[0x24BDCF2C0]);
      v18 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v18 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v15;
    }
    while (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v19 = v26;
  v20 = *v25;
  *(_QWORD *)(*v25 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v20 + 48) + *(_QWORD *)(v7 + 72) * a2, v19, v6);
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (!v23)
  {
    *(_QWORD *)(v20 + 16) = v24;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  Swift::Int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  Swift::Int *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  result = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (Swift::Int *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v8 = *v3;
  result = static Hasher._hash(seed:_:)();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = *(_QWORD *)(v8 + 48);
    if (*(_QWORD *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v10 + 8 * a2) == v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * a2) = v5;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    *(_QWORD *)(v12 + 16) = v15;
  return result;
}

void *specialized _NativeSet.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;

  v1 = v0;
  v2 = type metadata accessor for Calendar.Component();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
  v6 = *v0;
  v7 = static _SetStorage.copy(original:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release();
LABEL_30:
    *v1 = v8;
    return result;
  }
  v25 = v1;
  result = (void *)(v7 + 56);
  v10 = v6 + 56;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v11)
    result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v6 + 56);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v21 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v17)
        goto LABEL_28;
      v22 = *(_QWORD *)(v10 + 8 * v13);
      if (!v22)
      {
        v13 = v21 + 2;
        if (v21 + 2 >= v17)
          goto LABEL_28;
        v22 = *(_QWORD *)(v10 + 8 * v13);
        if (!v22)
          break;
      }
    }
LABEL_27:
    v16 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v3 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v20, v2);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v20, v5, v2);
  }
  v23 = v21 + 3;
  if (v23 >= v17)
  {
LABEL_28:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_30;
  }
  v22 = *(_QWORD *)(v10 + 8 * v23);
  if (v22)
  {
    v13 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int64_t v33;

  v1 = v0;
  v2 = type metadata accessor for Calendar.Component();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
  v7 = static _SetStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v8;
    return result;
  }
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v10 = *(_QWORD *)(v6 + 56);
  v31 = v0;
  v32 = v6 + 56;
  if (v9 < 64)
    v11 = ~(-1 << v9);
  else
    v11 = -1;
  v12 = v11 & v10;
  v33 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 56;
  result = swift_retain();
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v17 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v18 = v17 | (v15 << 6);
      goto LABEL_24;
    }
    v19 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v19 >= v33)
      goto LABEL_33;
    v20 = *(_QWORD *)(v32 + 8 * v19);
    ++v15;
    if (!v20)
    {
      v15 = v19 + 1;
      if (v19 + 1 >= v33)
        goto LABEL_33;
      v20 = *(_QWORD *)(v32 + 8 * v15);
      if (!v20)
      {
        v15 = v19 + 2;
        if (v19 + 2 >= v33)
          goto LABEL_33;
        v20 = *(_QWORD *)(v32 + 8 * v15);
        if (!v20)
          break;
      }
    }
LABEL_23:
    v12 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_24:
    v22 = *(_QWORD *)(v3 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v22 * v18, v2);
    lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component(&lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component, MEMORY[0x24BDCF2A8]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v23 = -1 << *(_BYTE *)(v8 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v13 + 8 * v25);
      }
      while (v29 == -1);
      v16 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v16 * v22, v5, v2);
    ++*(_QWORD *)(v8 + 16);
  }
  v21 = v19 + 3;
  if (v21 >= v33)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v31;
    goto LABEL_35;
  }
  v20 = *(_QWORD *)(v32 + 8 * v21);
  if (v20)
  {
    v15 = v21;
    goto LABEL_23;
  }
  while (1)
  {
    v15 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v15 >= v33)
      goto LABEL_33;
    v20 = *(_QWORD *)(v32 + 8 * v15);
    ++v21;
    if (v20)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    result = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int>);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v26 = v1;
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v10)
        goto LABEL_33;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v10)
          goto LABEL_33;
        v16 = *(_QWORD *)(v6 + 8 * v5);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
    result = static Hasher._hash(seed:_:)();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    result = swift_release();
    v1 = v26;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in PoemConversations.updateCooccurrenceCount(pid:entityCounts:faces:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  return closure #1 in PoemConversations.updateCooccurrenceCount(pid:entityCounts:faces:)(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD **)(v3 + 24), *(void (**)(_QWORD *, _QWORD))(v3 + 32), *(_QWORD *)(v3 + 40));
}

uint64_t specialized Dictionary.Values.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;

  v22 = a1 + 64;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v7)
      return swift_release();
    v20 = *(_QWORD *)(v22 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v7)
        return swift_release();
      v20 = *(_QWORD *)(v22 + 8 * v9);
      if (!v20)
      {
        v9 = v19 + 2;
        if (v19 + 2 >= v7)
          return swift_release();
        v20 = *(_QWORD *)(v22 + 8 * v9);
        if (!v20)
        {
          v9 = v19 + 3;
          if (v19 + 3 >= v7)
            return swift_release();
          v20 = *(_QWORD *)(v22 + 8 * v9);
          if (!v20)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v20 - 1) & v20;
    v11 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_5:
    v12 = 16 * v11;
    v13 = (uint64_t *)(*(_QWORD *)(a1 + 48) + v12);
    v14 = *v13;
    v15 = v13[1];
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 56) + v12);
    v17 = *v16;
    v18 = v16[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a2(v14, v15, v17, v18);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
  }
  v21 = v19 + 4;
  if (v21 >= v7)
    return swift_release();
  v20 = *(_QWORD *)(v22 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v7)
      return swift_release();
    v20 = *(_QWORD *)(v22 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, void (*a2)(uint64_t, uint64_t, _OWORD *))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  _OWORD v21[2];
  uint64_t v22;

  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v12 = v11 | (v10 << 6);
      goto LABEL_5;
    }
    v18 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v18 >= v8)
      return swift_release();
    v19 = *(_QWORD *)(v4 + 8 * v18);
    ++v10;
    if (!v19)
    {
      v10 = v18 + 1;
      if (v18 + 1 >= v8)
        return swift_release();
      v19 = *(_QWORD *)(v4 + 8 * v10);
      if (!v19)
      {
        v10 = v18 + 2;
        if (v18 + 2 >= v8)
          return swift_release();
        v19 = *(_QWORD *)(v4 + 8 * v10);
        if (!v19)
        {
          v10 = v18 + 3;
          if (v18 + 3 >= v8)
            return swift_release();
          v19 = *(_QWORD *)(v4 + 8 * v10);
          if (!v19)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v19 - 1) & v19;
    v12 = __clz(__rbit64(v19)) + (v10 << 6);
LABEL_5:
    v13 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v12);
    v14 = *v13;
    v15 = v13[1];
    v16 = *(_QWORD *)(a1 + 56) + 40 * v12;
    v17 = *(_OWORD *)(v16 + 16);
    v21[0] = *(_OWORD *)v16;
    v21[1] = v17;
    v22 = *(_QWORD *)(v16 + 32);
    swift_bridgeObjectRetain();
    a2(v14, v15, v21);
    result = swift_bridgeObjectRelease();
  }
  v20 = v18 + 4;
  if (v20 >= v8)
    return swift_release();
  v19 = *(_QWORD *)(v4 + 8 * v20);
  if (v19)
  {
    v10 = v20;
    goto LABEL_22;
  }
  while (1)
  {
    v10 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v10 >= v8)
      return swift_release();
    v19 = *(_QWORD *)(v4 + 8 * v10);
    ++v20;
    if (v19)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  int64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v24;
  _OWORD v25[5];
  uint64_t v26;
  int64_t v27;

  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v21 = (unint64_t)(v2 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v6 = 0;
  while (1)
  {
    if (v4)
    {
      v24 = (v4 - 1) & v4;
      v27 = v6;
      v7 = __clz(__rbit64(v4)) | (v6 << 6);
      goto LABEL_5;
    }
    v16 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v16 >= v21)
      return swift_release();
    v17 = *(_QWORD *)(v20 + 8 * v16);
    v18 = v6 + 1;
    if (!v17)
    {
      v18 = v6 + 2;
      if (v6 + 2 >= v21)
        return swift_release();
      v17 = *(_QWORD *)(v20 + 8 * v18);
      if (!v17)
      {
        v18 = v6 + 3;
        if (v6 + 3 >= v21)
          return swift_release();
        v17 = *(_QWORD *)(v20 + 8 * v18);
        if (!v17)
        {
          v18 = v6 + 4;
          if (v6 + 4 >= v21)
            return swift_release();
          v17 = *(_QWORD *)(v20 + 8 * v18);
          if (!v17)
            break;
        }
      }
    }
LABEL_22:
    v24 = (v17 - 1) & v17;
    v27 = v18;
    v7 = __clz(__rbit64(v17)) + (v18 << 6);
LABEL_5:
    v8 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v7);
    v10 = *v8;
    v9 = v8[1];
    v11 = *(_QWORD *)(a1 + 56) + 88 * v7;
    v12 = *(_OWORD *)(v11 + 16);
    v25[0] = *(_OWORD *)v11;
    v25[1] = v12;
    v14 = *(_OWORD *)(v11 + 48);
    v13 = *(_OWORD *)(v11 + 64);
    v15 = *(_OWORD *)(v11 + 32);
    v26 = *(_QWORD *)(v11 + 80);
    v25[3] = v14;
    v25[4] = v13;
    v25[2] = v15;
    swift_bridgeObjectRetain();
    outlined retain of PoemCooccurrenceCounts((uint64_t)v25);
    a2(v10, v9, v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v6 = v27;
    v4 = v24;
  }
  v19 = v6 + 5;
  if (v6 + 5 >= v21)
    return swift_release();
  v17 = *(_QWORD *)(v20 + 8 * v19);
  if (v17)
  {
    v18 = v6 + 5;
    goto LABEL_22;
  }
  while (1)
  {
    v18 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v18 >= v21)
      return swift_release();
    v17 = *(_QWORD *)(v20 + 8 * v18);
    ++v19;
    if (v17)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in PoemConversations.getName(id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in PoemConversations.getName(id:)(a1, a2, a3, a4, v4);
}

uint64_t sub_22834EFFC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 112))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_22834F02C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 120);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_22834F070@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 136))();
  *a2 = result;
  return result;
}

uint64_t sub_22834F0A4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 160))();
  *a2 = result;
  return result;
}

uint64_t keypath_set_2Tm(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 144);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t keypath_set_4Tm(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 168);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_22834F144@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 184))();
  *a2 = result;
  return result;
}

uint64_t keypath_set_6Tm(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 192);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_22834F1A8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 208))();
  *a2 = result;
  return result;
}

uint64_t sub_22834F1D8(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 216);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_22834F208@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 232))();
  *a2 = result;
  return result;
}

uint64_t sub_22834F238(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 240);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_22834F268@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 256))();
  *a2 = result;
  return result;
}

uint64_t sub_22834F298(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 264);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_22834F2C8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 280))();
  *a2 = result;
  return result;
}

uint64_t sub_22834F2F8(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 288);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_22834F328@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 216))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_22834F358(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 224);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_22834F39C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 240))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_22834F3CC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 248);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_22834F410@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 264))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_22834F440(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 272);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_22834F484@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 288))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_22834F4B4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 296);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_22834F4F8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 312))();
}

uint64_t sub_22834F524@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 336))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_22834F554(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 344);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_22834F598@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 360))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_22834F5C8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 368);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_22834F60C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 384))();
  *a2 = result;
  return result;
}

uint64_t sub_22834F63C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 392);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_22834F66C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 408))();
  *a2 = result;
  return result;
}

uint64_t sub_22834F69C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 416);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_22834F6CC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 432))();
  *a2 = result;
  return result;
}

uint64_t sub_22834F6FC(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 440);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_22834F72C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 456))();
  *a2 = result;
  return result;
}

uint64_t sub_22834F75C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 464);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_22834F78C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 480))();
  *a2 = result;
  return result;
}

uint64_t sub_22834F7BC(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 488);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_22834F7EC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 504))();
  *a2 = result;
  return result;
}

uint64_t sub_22834F81C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 512);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_22834F84C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 528))();
  *a2 = result;
  return result;
}

uint64_t sub_22834F87C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 536);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_22834F8AC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 552))();
  *a2 = result;
  return result;
}

uint64_t sub_22834F8DC(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 560);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_22834F90C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 576))();
  *a2 = result;
  return result;
}

uint64_t sub_22834F93C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 584);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_22834F96C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 600))();
  *a2 = result;
  return result;
}

uint64_t sub_22834F99C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 608);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t type metadata accessor for PoemMessageThread()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for PoemConversations()
{
  return objc_opt_self();
}

uint64_t ObjC metadata update function for PoemMessage()
{
  return type metadata accessor for PoemMessage();
}

uint64_t type metadata accessor for PoemMessage()
{
  uint64_t result;

  result = type metadata singleton initialization cache for PoemMessage;
  if (!type metadata singleton initialization cache for PoemMessage)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for PoemMessage()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Date();
  if (v1 <= 0x3F)
    return swift_updateClassMetadata2();
  return result;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for PoemEntityCounts(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PoemEntityCounts(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 40) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PoemEntityCounts()
{
  return &type metadata for PoemEntityCounts;
}

uint64_t destroy for PoemCooccurrenceCounts()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for PoemCooccurrenceCounts(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for PoemCooccurrenceCounts(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy88_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for PoemCooccurrenceCounts(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PoemCooccurrenceCounts(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PoemCooccurrenceCounts(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PoemCooccurrenceCounts()
{
  return &type metadata for PoemCooccurrenceCounts;
}

uint64_t lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for Calendar.Component();
    result = MEMORY[0x22E2B10E0](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of DocumentUnderstanding_HiddenLayerOutput(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DocumentUnderstanding_HiddenLayerOutput(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of DUProcessingPhaseSpecification(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.text.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement()
                          + 20));
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement()
{
  uint64_t result;

  result = type metadata singleton initialization cache for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement;
  if (!type metadata singleton initialization cache for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t key path getter for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.text : DocumentUnderstanding_DocumentRepresentation_DocumentUIElement@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement()
                          + 20));
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 24);
  *a2 = *(_QWORD *)(v3 + 16);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.text : DocumentUnderstanding_DocumentRepresentation_DocumentUIElement(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(a2 + v5) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 16) = v4;
  *(_QWORD *)(v7 + 24) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.text.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(v2 + v5) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass()
{
  return objc_opt_self();
}

void (*DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.text.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 24);
  v3[9] = *(_QWORD *)(v5 + 16);
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.text.modify;
}

void DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.text.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
      swift_allocObject();
      v7 = swift_retain();
      *(_QWORD *)(v6 + v5) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v7);
      swift_release();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v8 + 16) = v3;
    *(_QWORD *)(v8 + 24) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = *(int *)(v2 + 96);
      v10 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
      swift_allocObject();
      v11 = swift_retain();
      *(_QWORD *)(v10 + v9) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v11);
      swift_release();
    }
    v12 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v12 + 16) = v3;
    *(_QWORD *)(v12 + 24) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.version.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement()
                          + 20));
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 32);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.version : DocumentUnderstanding_DocumentRepresentation_DocumentUIElement@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement()
                          + 20));
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 40);
  *a2 = *(_QWORD *)(v3 + 32);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.version : DocumentUnderstanding_DocumentRepresentation_DocumentUIElement(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(a2 + v5) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 32) = v4;
  *(_QWORD *)(v7 + 40) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.version.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(v2 + v5) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 32) = a1;
  *(_QWORD *)(v7 + 40) = a2;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.version.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 40);
  v3[9] = *(_QWORD *)(v5 + 32);
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.version.modify;
}

void DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.version.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
      swift_allocObject();
      v7 = swift_retain();
      *(_QWORD *)(v6 + v5) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v7);
      swift_release();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v8 + 32) = v3;
    *(_QWORD *)(v8 + 40) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = *(int *)(v2 + 96);
      v10 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
      swift_allocObject();
      v11 = swift_retain();
      *(_QWORD *)(v10 + v9) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v11);
      swift_release();
    }
    v12 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v12 + 32) = v3;
    *(_QWORD *)(v12 + 40) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.classDescriptor.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement()
                          + 20));
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 48);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.classDescriptor : DocumentUnderstanding_DocumentRepresentation_DocumentUIElement@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement()
                          + 20));
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 56);
  *a2 = *(_QWORD *)(v3 + 48);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.classDescriptor : DocumentUnderstanding_DocumentRepresentation_DocumentUIElement(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(a2 + v5) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 48) = v4;
  *(_QWORD *)(v7 + 56) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.classDescriptor.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(v2 + v5) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 48) = a1;
  *(_QWORD *)(v7 + 56) = a2;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.classDescriptor.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 56);
  v3[9] = *(_QWORD *)(v5 + 48);
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.classDescriptor.modify;
}

void DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.classDescriptor.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
      swift_allocObject();
      v7 = swift_retain();
      *(_QWORD *)(v6 + v5) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v7);
      swift_release();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v8 + 48) = v3;
    *(_QWORD *)(v8 + 56) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = *(int *)(v2 + 96);
      v10 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
      swift_allocObject();
      v11 = swift_retain();
      *(_QWORD *)(v10 + v9) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v11);
      swift_release();
    }
    v12 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v12 + 48) = v3;
    *(_QWORD *)(v12 + 56) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

double DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.fontSize.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement()
                          + 20));
  swift_beginAccess();
  return *(double *)(v1 + 64);
}

uint64_t key path setter for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.fontSize : DocumentUnderstanding_DocumentRepresentation_DocumentUIElement(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(a2 + v4) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  result = swift_beginAccess();
  *(_QWORD *)(v6 + 64) = v3;
  return result;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.fontSize.setter(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(double *)(v5 + 64) = a1;
  return result;
}

void (*DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.fontSize.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v3[9] = *(_QWORD *)(v5 + 64);
  return DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.fontSize.modify;
}

void DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.fontSize.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v8 = swift_retain();
    *(_QWORD *)(v7 + v6) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v8);
    swift_release();
  }
LABEL_4:
  v9 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88)) + 64);
  swift_beginAccess();
  *v9 = v4;
  free((void *)v3);
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.superviewClassNames.getter()
{
  type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement();
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t key path getter for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.superviewClassNames : DocumentUnderstanding_DocumentRepresentation_DocumentUIElement@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement()
                          + 20));
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 72);
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.superviewClassNames : DocumentUnderstanding_DocumentRepresentation_DocumentUIElement(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(a2 + v4) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  swift_beginAccess();
  *(_QWORD *)(v6 + 72) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.superviewClassNames.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  swift_beginAccess();
  *(_QWORD *)(v5 + 72) = a1;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.superviewClassNames.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v3[9] = *(_QWORD *)(v5 + 72);
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.superviewClassNames.modify;
}

void DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.superviewClassNames.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v4 = *(int *)(v2 + 88);
      v5 = *(_QWORD *)(v2 + 80);
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
      swift_allocObject();
      v6 = swift_retain();
      *(_QWORD *)(v5 + v4) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v6);
      swift_release();
    }
    v7 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess();
    *(_QWORD *)(v7 + 72) = v3;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v8 = *(int *)(v2 + 88);
      v9 = *(_QWORD *)(v2 + 80);
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
      swift_allocObject();
      v10 = swift_retain();
      *(_QWORD *)(v9 + v8) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v10);
      swift_release();
    }
    v11 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess();
    *(_QWORD *)(v11 + 72) = v3;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.frameInWindow.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement()
                          + 20));
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 80);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v1 + 88));
  return v2;
}

uint64_t key path getter for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.frameInWindow : DocumentUnderstanding_DocumentRepresentation_DocumentUIElement@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement()
                          + 20));
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 88);
  *a2 = v4;
  a2[1] = v5;
  return outlined copy of Data._Representation(v4, v5);
}

uint64_t key path setter for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.frameInWindow : DocumentUnderstanding_DocumentRepresentation_DocumentUIElement(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v3 = *a1;
  v4 = a1[1];
  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  outlined copy of Data._Representation(v3, v4);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(a2 + v5) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  v8 = *(_QWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 88);
  *(_QWORD *)(v7 + 80) = v3;
  *(_QWORD *)(v7 + 88) = v4;
  return outlined consume of Data._Representation(v8, v9);
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.frameInWindow.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(v2 + v5) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  swift_beginAccess();
  v8 = *(_QWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 88);
  *(_QWORD *)(v7 + 80) = a1;
  *(_QWORD *)(v7 + 88) = a2;
  return outlined consume of Data._Representation(v8, v9);
}

void (*DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.frameInWindow.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 88);
  v3[9] = v6;
  v3[10] = v7;
  outlined copy of Data._Representation(v6, v7);
  return DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.frameInWindow.modify;
}

void DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.frameInWindow.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    outlined copy of Data._Representation(*(_QWORD *)(*a1 + 72), v4);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
      swift_allocObject();
      v7 = swift_retain();
      *(_QWORD *)(v6 + v5) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v7);
      swift_release();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    v9 = *(_QWORD *)(v8 + 80);
    v10 = *(_QWORD *)(v8 + 88);
    *(_QWORD *)(v8 + 80) = v3;
    *(_QWORD *)(v8 + 88) = v4;
    outlined consume of Data._Representation(v9, v10);
    v11 = *(_QWORD *)(v2 + 72);
    v12 = *(_QWORD *)(v2 + 80);
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v13 = *(int *)(v2 + 96);
      v14 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
      swift_allocObject();
      v15 = swift_retain();
      *(_QWORD *)(v14 + v13) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v15);
      swift_release();
    }
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    v11 = *(_QWORD *)(v16 + 80);
    v12 = *(_QWORD *)(v16 + 88);
    *(_QWORD *)(v16 + 80) = v3;
    *(_QWORD *)(v16 + 88) = v4;
  }
  outlined consume of Data._Representation(v11, v12);
  free((void *)v2);
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.absoluteOriginOnScreen.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement()
                          + 20));
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 96);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v1 + 104));
  return v2;
}

uint64_t key path getter for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.absoluteOriginOnScreen : DocumentUnderstanding_DocumentRepresentation_DocumentUIElement@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement()
                          + 20));
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 96);
  v5 = *(_QWORD *)(v3 + 104);
  *a2 = v4;
  a2[1] = v5;
  return outlined copy of Data._Representation(v4, v5);
}

uint64_t key path setter for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.absoluteOriginOnScreen : DocumentUnderstanding_DocumentRepresentation_DocumentUIElement(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v3 = *a1;
  v4 = a1[1];
  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  outlined copy of Data._Representation(v3, v4);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(a2 + v5) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  v8 = *(_QWORD *)(v7 + 96);
  v9 = *(_QWORD *)(v7 + 104);
  *(_QWORD *)(v7 + 96) = v3;
  *(_QWORD *)(v7 + 104) = v4;
  return outlined consume of Data._Representation(v8, v9);
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.absoluteOriginOnScreen.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(v2 + v5) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  swift_beginAccess();
  v8 = *(_QWORD *)(v7 + 96);
  v9 = *(_QWORD *)(v7 + 104);
  *(_QWORD *)(v7 + 96) = a1;
  *(_QWORD *)(v7 + 104) = a2;
  return outlined consume of Data._Representation(v8, v9);
}

void (*DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.absoluteOriginOnScreen.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 96);
  v7 = *(_QWORD *)(v5 + 104);
  v3[9] = v6;
  v3[10] = v7;
  outlined copy of Data._Representation(v6, v7);
  return DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.absoluteOriginOnScreen.modify;
}

void DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.absoluteOriginOnScreen.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    outlined copy of Data._Representation(*(_QWORD *)(*a1 + 72), v4);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
      swift_allocObject();
      v7 = swift_retain();
      *(_QWORD *)(v6 + v5) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v7);
      swift_release();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    v9 = *(_QWORD *)(v8 + 96);
    v10 = *(_QWORD *)(v8 + 104);
    *(_QWORD *)(v8 + 96) = v3;
    *(_QWORD *)(v8 + 104) = v4;
    outlined consume of Data._Representation(v9, v10);
    v11 = *(_QWORD *)(v2 + 72);
    v12 = *(_QWORD *)(v2 + 80);
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v13 = *(int *)(v2 + 96);
      v14 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
      swift_allocObject();
      v15 = swift_retain();
      *(_QWORD *)(v14 + v13) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v15);
      swift_release();
    }
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    v11 = *(_QWORD *)(v16 + 96);
    v12 = *(_QWORD *)(v16 + 104);
    *(_QWORD *)(v16 + 96) = v3;
    *(_QWORD *)(v16 + 104) = v4;
  }
  outlined consume of Data._Representation(v11, v12);
  free((void *)v2);
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.isOnScreen.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement()
                          + 20));
  swift_beginAccess();
  return *(unsigned __int8 *)(v1 + 112);
}

uint64_t key path setter for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.isOnScreen : DocumentUnderstanding_DocumentRepresentation_DocumentUIElement(char *a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(a2 + v4) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  result = swift_beginAccess();
  *(_BYTE *)(v6 + 112) = v3;
  return result;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.isOnScreen.setter(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(_BYTE *)(v5 + 112) = a1 & 1;
  return result;
}

void (*DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.isOnScreen.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  *((_BYTE *)v3 + 84) = *(_BYTE *)(v5 + 112);
  return DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.isOnScreen.modify;
}

void DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.isOnScreen.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 80);
    v7 = *(_QWORD *)(v3 + 72);
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v8 = swift_retain();
    *(_QWORD *)(v7 + v6) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v8);
    swift_release();
  }
LABEL_4:
  v9 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80)) + 112);
  swift_beginAccess();
  *v9 = v4;
  free((void *)v3);
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.isValidForContentExtraction.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement()
                          + 20));
  swift_beginAccess();
  return *(unsigned __int8 *)(v1 + 113);
}

uint64_t key path setter for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.isValidForContentExtraction : DocumentUnderstanding_DocumentRepresentation_DocumentUIElement(char *a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(a2 + v4) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  result = swift_beginAccess();
  *(_BYTE *)(v6 + 113) = v3;
  return result;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.isValidForContentExtraction.setter(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(_BYTE *)(v5 + 113) = a1 & 1;
  return result;
}

void (*DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.isValidForContentExtraction.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  *((_BYTE *)v3 + 84) = *(_BYTE *)(v5 + 113);
  return DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.isValidForContentExtraction.modify;
}

void DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.isValidForContentExtraction.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 80);
    v7 = *(_QWORD *)(v3 + 72);
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v8 = swift_retain();
    *(_QWORD *)(v7 + v6) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v8);
    swift_release();
  }
LABEL_4:
  v9 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80)) + 113);
  swift_beginAccess();
  *v9 = v4;
  free((void *)v3);
}

double DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.frameInWindowDebugX.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement()
                          + 20));
  swift_beginAccess();
  return *(double *)(v1 + 120);
}

uint64_t key path setter for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.frameInWindowDebugX : DocumentUnderstanding_DocumentRepresentation_DocumentUIElement(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(a2 + v4) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  result = swift_beginAccess();
  *(_QWORD *)(v6 + 120) = v3;
  return result;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.frameInWindowDebugX.setter(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(double *)(v5 + 120) = a1;
  return result;
}

void (*DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.frameInWindowDebugX.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v3[9] = *(_QWORD *)(v5 + 120);
  return DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.frameInWindowDebugX.modify;
}

void DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.frameInWindowDebugX.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v8 = swift_retain();
    *(_QWORD *)(v7 + v6) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v8);
    swift_release();
  }
LABEL_4:
  v9 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88)) + 120);
  swift_beginAccess();
  *v9 = v4;
  free((void *)v3);
}

double DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.frameInWindowDebugY.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement()
                          + 20));
  swift_beginAccess();
  return *(double *)(v1 + 128);
}

uint64_t key path setter for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.frameInWindowDebugY : DocumentUnderstanding_DocumentRepresentation_DocumentUIElement(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(a2 + v4) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  result = swift_beginAccess();
  *(_QWORD *)(v6 + 128) = v3;
  return result;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.frameInWindowDebugY.setter(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(double *)(v5 + 128) = a1;
  return result;
}

void (*DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.frameInWindowDebugY.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v3[9] = *(_QWORD *)(v5 + 128);
  return DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.frameInWindowDebugY.modify;
}

void DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.frameInWindowDebugY.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v8 = swift_retain();
    *(_QWORD *)(v7 + v6) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v8);
    swift_release();
  }
LABEL_4:
  v9 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88)) + 128);
  swift_beginAccess();
  *v9 = v4;
  free((void *)v3);
}

double DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.frameInWindowDebugWidth.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement()
                          + 20));
  swift_beginAccess();
  return *(double *)(v1 + 136);
}

uint64_t key path setter for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.frameInWindowDebugWidth : DocumentUnderstanding_DocumentRepresentation_DocumentUIElement(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(a2 + v4) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  result = swift_beginAccess();
  *(_QWORD *)(v6 + 136) = v3;
  return result;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.frameInWindowDebugWidth.setter(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(double *)(v5 + 136) = a1;
  return result;
}

void (*DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.frameInWindowDebugWidth.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v3[9] = *(_QWORD *)(v5 + 136);
  return DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.frameInWindowDebugWidth.modify;
}

void DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.frameInWindowDebugWidth.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v8 = swift_retain();
    *(_QWORD *)(v7 + v6) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v8);
    swift_release();
  }
LABEL_4:
  v9 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88)) + 136);
  swift_beginAccess();
  *v9 = v4;
  free((void *)v3);
}

double DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.frameInWindowDebugHeight.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement()
                          + 20));
  swift_beginAccess();
  return *(double *)(v1 + 144);
}

uint64_t key path setter for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.frameInWindowDebugHeight : DocumentUnderstanding_DocumentRepresentation_DocumentUIElement(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(a2 + v4) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  result = swift_beginAccess();
  *(_QWORD *)(v6 + 144) = v3;
  return result;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.frameInWindowDebugHeight.setter(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(double *)(v5 + 144) = a1;
  return result;
}

void (*DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.frameInWindowDebugHeight.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v3[9] = *(_QWORD *)(v5 + 144);
  return DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.frameInWindowDebugHeight.modify;
}

void DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.frameInWindowDebugHeight.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v8 = swift_retain();
    *(_QWORD *)(v7 + v6) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v8);
    swift_release();
  }
LABEL_4:
  v9 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88)) + 144);
  swift_beginAccess();
  *v9 = v4;
  free((void *)v3);
}

double DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.absoluteOriginOnScreenDebugX.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement()
                          + 20));
  swift_beginAccess();
  return *(double *)(v1 + 152);
}

uint64_t key path setter for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.absoluteOriginOnScreenDebugX : DocumentUnderstanding_DocumentRepresentation_DocumentUIElement(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(a2 + v4) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  result = swift_beginAccess();
  *(_QWORD *)(v6 + 152) = v3;
  return result;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.absoluteOriginOnScreenDebugX.setter(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(double *)(v5 + 152) = a1;
  return result;
}

void (*DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.absoluteOriginOnScreenDebugX.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v3[9] = *(_QWORD *)(v5 + 152);
  return DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.absoluteOriginOnScreenDebugX.modify;
}

void DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.absoluteOriginOnScreenDebugX.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v8 = swift_retain();
    *(_QWORD *)(v7 + v6) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v8);
    swift_release();
  }
LABEL_4:
  v9 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88)) + 152);
  swift_beginAccess();
  *v9 = v4;
  free((void *)v3);
}

double DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.absoluteOriginOnScreenDebugY.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement()
                          + 20));
  swift_beginAccess();
  return *(double *)(v1 + 160);
}

uint64_t key path setter for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.absoluteOriginOnScreenDebugY : DocumentUnderstanding_DocumentRepresentation_DocumentUIElement(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(a2 + v4) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  result = swift_beginAccess();
  *(_QWORD *)(v6 + 160) = v3;
  return result;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.absoluteOriginOnScreenDebugY.setter(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(double *)(v5 + 160) = a1;
  return result;
}

void (*DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.absoluteOriginOnScreenDebugY.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v3[9] = *(_QWORD *)(v5 + 160);
  return DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.absoluteOriginOnScreenDebugY.modify;
}

void DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.absoluteOriginOnScreenDebugY.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v8 = swift_retain();
    *(_QWORD *)(v7 + v6) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v8);
    swift_release();
  }
LABEL_4:
  v9 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88)) + 160);
  swift_beginAccess();
  *v9 = v4;
  free((void *)v3);
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.superviewClassIndices.getter()
{
  type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement();
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t key path getter for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.superviewClassIndices : DocumentUnderstanding_DocumentRepresentation_DocumentUIElement@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement()
                          + 20));
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 168);
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.superviewClassIndices : DocumentUnderstanding_DocumentRepresentation_DocumentUIElement(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(a2 + v4) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  swift_beginAccess();
  *(_QWORD *)(v6 + 168) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.superviewClassIndices.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  swift_beginAccess();
  *(_QWORD *)(v5 + 168) = a1;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.superviewClassIndices.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v3[9] = *(_QWORD *)(v5 + 168);
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.superviewClassIndices.modify;
}

void DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.superviewClassIndices.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v4 = *(int *)(v2 + 88);
      v5 = *(_QWORD *)(v2 + 80);
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
      swift_allocObject();
      v6 = swift_retain();
      *(_QWORD *)(v5 + v4) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v6);
      swift_release();
    }
    v7 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess();
    *(_QWORD *)(v7 + 168) = v3;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v8 = *(int *)(v2 + 88);
      v9 = *(_QWORD *)(v2 + 80);
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
      swift_allocObject();
      v10 = swift_retain();
      *(_QWORD *)(v9 + v8) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v10);
      swift_release();
    }
    v11 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess();
    *(_QWORD *)(v11 + 168) = v3;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.range.getter()
{
  type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement();
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t key path getter for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.range : DocumentUnderstanding_DocumentRepresentation_DocumentUIElement@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement()
                          + 20));
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 176);
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.range : DocumentUnderstanding_DocumentRepresentation_DocumentUIElement(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(a2 + v4) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  swift_beginAccess();
  *(_QWORD *)(v6 + 176) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.range.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  swift_beginAccess();
  *(_QWORD *)(v5 + 176) = a1;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.range.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v3[9] = *(_QWORD *)(v5 + 176);
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.range.modify;
}

void DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.range.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v4 = *(int *)(v2 + 88);
      v5 = *(_QWORD *)(v2 + 80);
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
      swift_allocObject();
      v6 = swift_retain();
      *(_QWORD *)(v5 + v4) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v6);
      swift_release();
    }
    v7 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess();
    *(_QWORD *)(v7 + 176) = v3;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v8 = *(int *)(v2 + 88);
      v9 = *(_QWORD *)(v2 + 80);
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
      swift_allocObject();
      v10 = swift_retain();
      *(_QWORD *)(v9 + v8) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v10);
      swift_release();
    }
    v11 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess();
    *(_QWORD *)(v11 + 176) = v3;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.styleProperties.getter()
{
  type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement();
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t key path getter for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.styleProperties : DocumentUnderstanding_DocumentRepresentation_DocumentUIElement@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement()
                          + 20));
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 184);
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.styleProperties : DocumentUnderstanding_DocumentRepresentation_DocumentUIElement(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(a2 + v4) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  swift_beginAccess();
  *(_QWORD *)(v6 + 184) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.styleProperties.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  swift_beginAccess();
  *(_QWORD *)(v5 + 184) = a1;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.styleProperties.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v3[9] = *(_QWORD *)(v5 + 184);
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.styleProperties.modify;
}

void DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.styleProperties.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v4 = *(int *)(v2 + 88);
      v5 = *(_QWORD *)(v2 + 80);
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
      swift_allocObject();
      v6 = swift_retain();
      *(_QWORD *)(v5 + v4) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v6);
      swift_release();
    }
    v7 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess();
    *(_QWORD *)(v7 + 184) = v3;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v8 = *(int *)(v2 + 88);
      v9 = *(_QWORD *)(v2 + 80);
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
      swift_allocObject();
      v10 = swift_retain();
      *(_QWORD *)(v9 + v8) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v10);
      swift_release();
    }
    v11 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess();
    *(_QWORD *)(v11 + 184) = v3;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.unknownFields.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  UnknownStorage.init()();
  v2 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a1 + v2) = static DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.defaultInstance;
  return swift_retain();
}

void *DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.protoMessageName.unsafeMutableAddressor()
{
  return &static DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.protoMessageName;
}

unint64_t static DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.protoMessageName.getter()
{
  return 0xD000000000000040;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._protobuf_nameMap);
}

uint64_t static DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v2 = type metadata accessor for _NameMap();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._protobuf_nameMap);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

double one-time initialization function for defaultInstance()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0xE000000000000000;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 40) = 0xE000000000000000;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 56) = 0xE000000000000000;
  v1 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 72) = v1;
  *(_OWORD *)(v0 + 80) = xmmword_2284C0CE0;
  *(_OWORD *)(v0 + 96) = xmmword_2284C0CE0;
  *(_WORD *)(v0 + 112) = 0;
  result = 0.0;
  *(_OWORD *)(v0 + 120) = 0u;
  *(_OWORD *)(v0 + 136) = 0u;
  *(_OWORD *)(v0 + 152) = 0u;
  *(_QWORD *)(v0 + 168) = v1;
  *(_QWORD *)(v0 + 176) = v1;
  *(_QWORD *)(v0 + 184) = v1;
  static DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.defaultInstance = v0;
  return result;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0xE000000000000000;
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 40) = 0xE000000000000000;
  v3 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 72) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 56) = 0xE000000000000000;
  *(_OWORD *)(v1 + 80) = xmmword_2284C0CE0;
  *(_OWORD *)(v1 + 96) = xmmword_2284C0CE0;
  *(_WORD *)(v1 + 112) = 0;
  *(_OWORD *)(v1 + 152) = 0u;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_QWORD *)(v1 + 168) = v3;
  *(_QWORD *)(v1 + 176) = v3;
  *(_QWORD *)(v1 + 184) = v3;
  swift_beginAccess();
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)(v1 + 24) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  swift_beginAccess();
  *(_QWORD *)(v1 + 32) = v6;
  *(_QWORD *)(v1 + 40) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 56);
  swift_beginAccess();
  *(_QWORD *)(v1 + 48) = v8;
  *(_QWORD *)(v1 + 56) = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v10 = *(_QWORD *)(a1 + 64);
  swift_beginAccess();
  *(_QWORD *)(v1 + 64) = v10;
  swift_beginAccess();
  v11 = *(_QWORD *)(a1 + 72);
  swift_beginAccess();
  *(_QWORD *)(v1 + 72) = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v12 = *(_QWORD *)(a1 + 80);
  v13 = *(_QWORD *)(a1 + 88);
  swift_beginAccess();
  v14 = *(_QWORD *)(v1 + 80);
  v15 = *(_QWORD *)(v1 + 88);
  *(_QWORD *)(v1 + 80) = v12;
  *(_QWORD *)(v1 + 88) = v13;
  outlined copy of Data._Representation(v12, v13);
  outlined consume of Data._Representation(v14, v15);
  swift_beginAccess();
  v16 = *(_QWORD *)(a1 + 96);
  v17 = *(_QWORD *)(a1 + 104);
  swift_beginAccess();
  v18 = *(_QWORD *)(v1 + 96);
  v19 = *(_QWORD *)(v1 + 104);
  *(_QWORD *)(v1 + 96) = v16;
  *(_QWORD *)(v1 + 104) = v17;
  outlined copy of Data._Representation(v16, v17);
  outlined consume of Data._Representation(v18, v19);
  swift_beginAccess();
  LOBYTE(v16) = *(_BYTE *)(a1 + 112);
  swift_beginAccess();
  *(_BYTE *)(v1 + 112) = v16;
  swift_beginAccess();
  LOBYTE(v16) = *(_BYTE *)(a1 + 113);
  swift_beginAccess();
  *(_BYTE *)(v1 + 113) = v16;
  swift_beginAccess();
  v20 = *(_QWORD *)(a1 + 120);
  swift_beginAccess();
  *(_QWORD *)(v1 + 120) = v20;
  swift_beginAccess();
  v21 = *(_QWORD *)(a1 + 128);
  swift_beginAccess();
  *(_QWORD *)(v1 + 128) = v21;
  swift_beginAccess();
  v22 = *(_QWORD *)(a1 + 136);
  swift_beginAccess();
  *(_QWORD *)(v1 + 136) = v22;
  swift_beginAccess();
  v23 = *(_QWORD *)(a1 + 144);
  swift_beginAccess();
  *(_QWORD *)(v1 + 144) = v23;
  swift_beginAccess();
  v24 = *(_QWORD *)(a1 + 152);
  swift_beginAccess();
  *(_QWORD *)(v1 + 152) = v24;
  swift_beginAccess();
  v25 = *(_QWORD *)(a1 + 160);
  swift_beginAccess();
  *(_QWORD *)(v1 + 160) = v25;
  swift_beginAccess();
  v26 = *(_QWORD *)(a1 + 168);
  swift_beginAccess();
  *(_QWORD *)(v1 + 168) = v26;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v27 = *(_QWORD *)(a1 + 176);
  swift_beginAccess();
  *(_QWORD *)(v1 + 176) = v27;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v28 = *(_QWORD *)(a1 + 184);
  swift_bridgeObjectRetain();
  swift_release();
  swift_beginAccess();
  *(_QWORD *)(v1 + 184) = v28;
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.__deallocating_deinit()
{
  DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.deinit();
  return swift_deallocClassInstance();
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v2);
    swift_release();
  }
  swift_retain();
  closure #1 in DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.decodeMessage<A>(decoder:)();
  return swift_release();
}

uint64_t closure #1 in DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          closure #1 in closure #1 in DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.decodeMessage<A>(decoder:)();
          break;
        case 2:
          closure #2 in closure #1 in DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.decodeMessage<A>(decoder:)();
          break;
        case 3:
          closure #3 in closure #1 in DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.decodeMessage<A>(decoder:)();
          break;
        case 4:
          closure #4 in closure #1 in DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.decodeMessage<A>(decoder:)();
          break;
        case 5:
          closure #5 in closure #1 in DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.decodeMessage<A>(decoder:)();
          break;
        case 6:
          closure #6 in closure #1 in DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.decodeMessage<A>(decoder:)();
          break;
        case 7:
          closure #7 in closure #1 in DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.decodeMessage<A>(decoder:)();
          break;
        case 8:
          closure #8 in closure #1 in DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.decodeMessage<A>(decoder:)();
          break;
        case 9:
          closure #9 in closure #1 in DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.decodeMessage<A>(decoder:)();
          break;
        case 10:
          closure #10 in closure #1 in DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.decodeMessage<A>(decoder:)();
          break;
        case 11:
          closure #11 in closure #1 in DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.decodeMessage<A>(decoder:)();
          break;
        case 12:
          closure #12 in closure #1 in DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.decodeMessage<A>(decoder:)();
          break;
        case 13:
          closure #13 in closure #1 in DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.decodeMessage<A>(decoder:)();
          break;
        case 14:
          closure #14 in closure #1 in DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.decodeMessage<A>(decoder:)();
          break;
        case 15:
          closure #15 in closure #1 in DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.decodeMessage<A>(decoder:)();
          break;
        case 16:
          closure #16 in closure #1 in DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.decodeMessage<A>(decoder:)();
          break;
        case 17:
          closure #17 in closure #1 in DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.decodeMessage<A>(decoder:)();
          break;
        case 18:
          closure #18 in closure #1 in DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.decodeMessage<A>(decoder:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in closure #1 in DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #2 in closure #1 in DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #3 in closure #1 in DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #4 in closure #1 in DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
  return swift_endAccess();
}

uint64_t closure #5 in closure #1 in DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeRepeatedStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #6 in closure #1 in DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBytesField(value:)();
  return swift_endAccess();
}

uint64_t closure #7 in closure #1 in DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBytesField(value:)();
  return swift_endAccess();
}

uint64_t closure #8 in closure #1 in DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBoolField(value:)();
  return swift_endAccess();
}

uint64_t closure #9 in closure #1 in DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBoolField(value:)();
  return swift_endAccess();
}

uint64_t closure #10 in closure #1 in DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
  return swift_endAccess();
}

uint64_t closure #11 in closure #1 in DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
  return swift_endAccess();
}

uint64_t closure #12 in closure #1 in DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
  return swift_endAccess();
}

uint64_t closure #13 in closure #1 in DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
  return swift_endAccess();
}

uint64_t closure #14 in closure #1 in DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
  return swift_endAccess();
}

uint64_t closure #15 in closure #1 in DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
  return swift_endAccess();
}

uint64_t closure #16 in closure #1 in DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeRepeatedInt64Field(value:)();
  return swift_endAccess();
}

uint64_t closure #17 in closure #1 in DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeRepeatedInt64Field(value:)();
  return swift_endAccess();
}

uint64_t closure #18 in closure #1 in DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeRepeatedStringField(value:)();
  return swift_endAccess();
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement();
  v1 = swift_retain();
  closure #1 in DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.traverse<A>(visitor:)(v1);
  result = swift_release();
  if (!v0)
    return UnknownStorage.traverse<A>(visitor:)();
  return result;
}

uint64_t closure #1 in DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;

  swift_beginAccess();
  v3 = *(_QWORD *)(a1 + 24);
  v4 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0)
    v4 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v1)
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  v5 = *(_QWORD *)(a1 + 40);
  v6 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0)
    v6 = *(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFLL;
  if (v6)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v1)
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  v7 = *(_QWORD *)(a1 + 56);
  v8 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0)
    v8 = *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFLL;
  if (v8)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (!v1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
    return swift_bridgeObjectRelease();
  }
LABEL_16:
  swift_beginAccess();
  if (*(double *)(a1 + 64) == 0.0
    || (result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(), !v1))
  {
    swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)(a1 + 72) + 16))
    {
      swift_bridgeObjectRetain();
      dispatch thunk of Visitor.visitRepeatedStringField(value:fieldNumber:)();
      if (v1)
        return swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_beginAccess();
    __asm { BR              X10 }
  }
  return result;
}

uint64_t sub_228355970()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if ((v3 & 0xFF000000000000) != 0)
  {
    outlined copy of Data._Representation(v2, v3);
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    if (v1)
    {
      outlined consume of Data._Representation(v2, v3);
      JUMPOUT(0x2283558F4);
    }
    outlined consume of Data._Representation(v2, v3);
  }
  v4 = swift_beginAccess();
  return ((uint64_t (*)(uint64_t))((char *)sub_228355A14 + 4 * byte_2284C3466[*(_QWORD *)(v0 + 104) >> 62]))(v4);
}

void sub_228355A14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  if ((v3 & 0xFF000000000000) == 0
    || (outlined copy of Data._Representation(v2, v3),
        dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(),
        outlined consume of Data._Representation(v2, v3),
        !v1))
  {
    swift_beginAccess();
    if (*(_BYTE *)(v0 + 112) != 1 || (dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
    {
      swift_beginAccess();
      if (*(_BYTE *)(v0 + 113) != 1 || (dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
      {
        swift_beginAccess();
        if (*(double *)(v0 + 120) == 0.0
          || (dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(), !v1))
        {
          swift_beginAccess();
          if (*(double *)(v0 + 128) == 0.0
            || (dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(), !v1))
          {
            swift_beginAccess();
            if (*(double *)(v0 + 136) == 0.0
              || (dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(), !v1))
            {
              swift_beginAccess();
              if (*(double *)(v0 + 144) == 0.0
                || (dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(), !v1))
              {
                swift_beginAccess();
                if (*(double *)(v0 + 152) == 0.0
                  || (dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(), !v1))
                {
                  swift_beginAccess();
                  if (*(double *)(v0 + 160) == 0.0
                    || (dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(), !v1))
                  {
                    swift_beginAccess();
                    if (!*(_QWORD *)(*(_QWORD *)(v0 + 168) + 16)
                      || (swift_bridgeObjectRetain(),
                          dispatch thunk of Visitor.visitPackedInt64Field(value:fieldNumber:)(),
                          swift_bridgeObjectRelease(),
                          !v1))
                    {
                      swift_beginAccess();
                      if (!*(_QWORD *)(*(_QWORD *)(v0 + 176) + 16)
                        || (swift_bridgeObjectRetain(),
                            dispatch thunk of Visitor.visitPackedInt64Field(value:fieldNumber:)(),
                            swift_bridgeObjectRelease(),
                            !v1))
                      {
                        swift_beginAccess();
                        if (*(_QWORD *)(*(_QWORD *)(v0 + 184) + 16))
                        {
                          swift_bridgeObjectRetain();
                          dispatch thunk of Visitor.visitRepeatedStringField(value:fieldNumber:)();
                          JUMPOUT(0x2283558F0);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  JUMPOUT(0x2283558F4);
}

uint64_t closure #1 in static DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  int v26;
  int v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;

  swift_beginAccess();
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  swift_beginAccess();
  v6 = v4 == *(_QWORD *)(a2 + 16) && v5 == *(_QWORD *)(a2 + 24);
  if (v6 || (v7 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if ((swift_beginAccess(),
          v8 = *(_QWORD *)(a1 + 32),
          v9 = *(_QWORD *)(a1 + 40),
          swift_beginAccess(),
          v8 == *(_QWORD *)(a2 + 32))
      && v9 == *(_QWORD *)(a2 + 40)
      || (v7 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      if ((swift_beginAccess(),
            v10 = *(_QWORD *)(a1 + 48),
            v11 = *(_QWORD *)(a1 + 56),
            swift_beginAccess(),
            v10 == *(_QWORD *)(a2 + 48))
        && v11 == *(_QWORD *)(a2 + 56)
        || (v7 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        swift_beginAccess();
        v12 = *(double *)(a1 + 64);
        swift_beginAccess();
        if (v12 == *(double *)(a2 + 64)
          && (swift_beginAccess(),
              v13 = *(_QWORD **)(a1 + 72),
              swift_beginAccess(),
              (specialized static Array<A>.== infix(_:_:)(v13, *(_QWORD **)(a2 + 72)) & 1) != 0))
        {
          swift_beginAccess();
          v14 = *(_QWORD *)(a1 + 80);
          v15 = *(_QWORD *)(a1 + 88);
          swift_beginAccess();
          v16 = *(_QWORD *)(a2 + 80);
          v17 = *(_QWORD *)(a2 + 88);
          swift_retain();
          swift_retain();
          outlined copy of Data._Representation(v14, v15);
          outlined copy of Data._Representation(v16, v17);
          specialized static Data.== infix(_:_:)(v14, v15);
          v19 = v18;
          outlined consume of Data._Representation(v16, v17);
          outlined consume of Data._Representation(v14, v15);
          if ((v19 & 1) == 0)
            goto LABEL_28;
          swift_beginAccess();
          v20 = *(_QWORD *)(a1 + 96);
          v21 = *(_QWORD *)(a1 + 104);
          swift_beginAccess();
          v22 = *(_QWORD *)(a2 + 96);
          v23 = *(_QWORD *)(a2 + 104);
          outlined copy of Data._Representation(v20, v21);
          outlined copy of Data._Representation(v22, v23);
          specialized static Data.== infix(_:_:)(v20, v21);
          v25 = v24;
          outlined consume of Data._Representation(v22, v23);
          outlined consume of Data._Representation(v20, v21);
          if ((v25 & 1) == 0)
            goto LABEL_28;
          swift_beginAccess();
          v26 = *(unsigned __int8 *)(a1 + 112);
          swift_beginAccess();
          if (v26 != *(unsigned __int8 *)(a2 + 112))
            goto LABEL_28;
          swift_beginAccess();
          v27 = *(unsigned __int8 *)(a1 + 113);
          swift_beginAccess();
          if (v27 != *(unsigned __int8 *)(a2 + 113))
            goto LABEL_28;
          swift_beginAccess();
          v28 = *(double *)(a1 + 120);
          swift_beginAccess();
          if (v28 != *(double *)(a2 + 120))
            goto LABEL_28;
          swift_beginAccess();
          v29 = *(double *)(a1 + 128);
          swift_beginAccess();
          if (v29 != *(double *)(a2 + 128))
            goto LABEL_28;
          swift_beginAccess();
          v30 = *(double *)(a1 + 136);
          swift_beginAccess();
          if (v30 != *(double *)(a2 + 136))
            goto LABEL_28;
          swift_beginAccess();
          v31 = *(double *)(a1 + 144);
          swift_beginAccess();
          if (v31 != *(double *)(a2 + 144))
            goto LABEL_28;
          swift_beginAccess();
          v32 = *(double *)(a1 + 152);
          swift_beginAccess();
          if (v32 != *(double *)(a2 + 152))
            goto LABEL_28;
          swift_beginAccess();
          v33 = *(double *)(a1 + 160);
          swift_beginAccess();
          if (v33 != *(double *)(a2 + 160))
            goto LABEL_28;
          swift_beginAccess();
          v34 = *(_QWORD **)(a1 + 168);
          swift_beginAccess();
          if (specialized static Array<A>.== infix(_:_:)(v34, *(_QWORD **)(a2 + 168))
            && (swift_beginAccess(),
                v35 = *(_QWORD **)(a1 + 176),
                swift_beginAccess(),
                specialized static Array<A>.== infix(_:_:)(v35, *(_QWORD **)(a2 + 176))))
          {
            swift_beginAccess();
            v36 = *(_QWORD **)(a1 + 184);
            swift_beginAccess();
            v7 = specialized static Array<A>.== infix(_:_:)(v36, *(_QWORD **)(a2 + 184));
          }
          else
          {
LABEL_28:
            v7 = 0;
          }
          swift_release();
          swift_release();
        }
        else
        {
          v7 = 0;
        }
      }
    }
  }
  return v7 & 1;
}

Swift::Int DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.hashValue.getter()
{
  Hasher.init(_seed:)();
  type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement();
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_DocumentUIElement and conformance DocumentUnderstanding_DocumentRepresentation_DocumentUIElement, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Message.init() in conformance DocumentUnderstanding_DocumentRepresentation_DocumentUIElement@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  UnknownStorage.init()();
  v4 = *(int *)(a1 + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a2 + v4) = static DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.defaultInstance;
  return swift_retain();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance DocumentUnderstanding_DocumentRepresentation_DocumentUIElement()
{
  return 0xD000000000000040;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance DocumentUnderstanding_DocumentRepresentation_DocumentUIElement()
{
  return DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance DocumentUnderstanding_DocumentRepresentation_DocumentUIElement()
{
  return DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance DocumentUnderstanding_DocumentRepresentation_DocumentUIElement()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_DocumentUIElement and conformance DocumentUnderstanding_DocumentRepresentation_DocumentUIElement, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DocumentUnderstanding_DocumentRepresentation_DocumentUIElement@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v2 = type metadata accessor for _NameMap();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._protobuf_nameMap);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DocumentUnderstanding_DocumentRepresentation_DocumentUIElement()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity((unint64_t *)&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_DocumentUIElement and conformance DocumentUnderstanding_DocumentRepresentation_DocumentUIElement, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DocumentUnderstanding_DocumentRepresentation_DocumentUIElement()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity((unint64_t *)&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_DocumentUIElement and conformance DocumentUnderstanding_DocumentRepresentation_DocumentUIElement, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement);
  return Message.hash(into:)();
}

void closure #1 in static Data.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_228356578(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x22835675CLL);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

uint64_t specialized Data.InlineData.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v8 = a1;
  v9 = a2;
  v10 = BYTE2(a2);
  v11 = BYTE3(a2);
  v12 = BYTE4(a2);
  v13 = BYTE5(a2);
  closure #1 in static Data.== infix(_:_:)((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4)
    v5 = v7;
  return v5 & 1;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = __DataStorage._bytes.getter();
  v11 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = __DataStorage._length.getter();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  closure #1 in static Data.== infix(_:_:)(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

void specialized static Data.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_228356954()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_228356988 + *((int *)qword_228356B60 + (v0 >> 62))))();
}

uint64_t sub_228356998@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1)
      __asm { BR              X10 }
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

uint64_t specialized static DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  void (*v15)(char *, uint64_t, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v19 - v9;
  v11 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  v12 = *(_QWORD *)(a1 + v11);
  v13 = *(_QWORD *)(a2 + v11);
  if (v12 == v13
    || (swift_retain(),
        swift_retain(),
        v14 = closure #1 in static DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.== infix(_:_:)(v12, v13), swift_release(), swift_release(), (v14 & 1) != 0))
  {
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15(v10, a1, v4);
    v15(v8, a2, v4);
    lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v10, v4);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in DocumentUnderstanding_DocumentRepresentation_DocumentUIElement()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_DocumentUIElement and conformance DocumentUnderstanding_DocumentRepresentation_DocumentUIElement, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement);
}

uint64_t base witness table accessor for Message in DocumentUnderstanding_DocumentRepresentation_DocumentUIElement()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity((unint64_t *)&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_DocumentUIElement and conformance DocumentUnderstanding_DocumentRepresentation_DocumentUIElement, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement);
}

uint64_t base witness table accessor for Hashable in DocumentUnderstanding_DocumentRepresentation_DocumentUIElement()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_DocumentUIElement and conformance DocumentUnderstanding_DocumentRepresentation_DocumentUIElement, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement);
}

uint64_t base witness table accessor for Equatable in DocumentUnderstanding_DocumentRepresentation_DocumentUIElement()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_DocumentUIElement and conformance DocumentUnderstanding_DocumentRepresentation_DocumentUIElement, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement);
}

double sub_228356DB0@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  double result;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement()
                          + 20));
  swift_beginAccess();
  result = *(double *)(v3 + 64);
  *a2 = result;
  return result;
}

uint64_t sub_228356E20@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement()
                          + 20));
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 112);
  return result;
}

uint64_t sub_228356E78@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement()
                          + 20));
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 113);
  return result;
}

double sub_228356ED0@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  double result;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement()
                          + 20));
  swift_beginAccess();
  result = *(double *)(v3 + 120);
  *a2 = result;
  return result;
}

double sub_228356F28@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  double result;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement()
                          + 20));
  swift_beginAccess();
  result = *(double *)(v3 + 128);
  *a2 = result;
  return result;
}

double sub_228356F80@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  double result;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement()
                          + 20));
  swift_beginAccess();
  result = *(double *)(v3 + 136);
  *a2 = result;
  return result;
}

double sub_228356FD8@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  double result;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement()
                          + 20));
  swift_beginAccess();
  result = *(double *)(v3 + 144);
  *a2 = result;
  return result;
}

double sub_228357030@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  double result;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement()
                          + 20));
  swift_beginAccess();
  result = *(double *)(v3 + 152);
  *a2 = result;
  return result;
}

double sub_228357088@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  double result;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement()
                          + 20));
  swift_beginAccess();
  result = *(double *)(v3 + 160);
  *a2 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_228357104(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_22835718C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t DUBulkUpdater.documentNamespace.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding13DUBulkUpdater_documentNamespace);
  swift_beginAccess();
  v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t DUBulkUpdater.documentNamespace.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC21DocumentUnderstanding13DUBulkUpdater_documentNamespace);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*DUBulkUpdater.documentNamespace.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryConfidence.modify;
}

id DUBulkUpdater.client.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding13DUBulkUpdater_client);
}

void *DUBulkUpdater.poemOnBoardHandler.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding13DUBulkUpdater_poemOnBoardHandler);
  v2 = v1;
  swift_retain();
  return v1;
}

id DUBulkUpdater.__allocating_init(client:)(void *a1)
{
  objc_class *v1;
  id v3;
  id v4;

  v3 = objc_allocWithZone(v1);
  v4 = specialized DUBulkUpdater.init(client:)(a1);

  return v4;
}

id DUBulkUpdater.init(client:)(void *a1)
{
  id v2;

  v2 = specialized DUBulkUpdater.init(client:)(a1);

  return v2;
}

uint64_t DUBulkUpdater.triggerPoemOnBoarding()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[2] = v0;
  v2 = type metadata accessor for Logger();
  v1[3] = v2;
  v1[4] = *(_QWORD *)(v2 - 8);
  v1[5] = swift_task_alloc();
  v1[6] = swift_task_alloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  Logger.init()();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_2282CC000, v1, v2, "DocumentUnderstanding: Beginning handlePoemOnBoarding", v3, 2u);
    MEMORY[0x22E2B117C](v3, -1, -1);
  }
  v4 = v0[6];
  v5 = v0[3];
  v6 = v0[4];
  v7 = v0[2];

  v8 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[7] = v8;
  v8(v4, v5);
  v10 = *(_QWORD *)(v7 + OBJC_IVAR____TtC21DocumentUnderstanding13DUBulkUpdater_poemOnBoardHandler);
  v9 = *(_QWORD *)(v7 + OBJC_IVAR____TtC21DocumentUnderstanding13DUBulkUpdater_poemOnBoardHandler + 8);
  v11 = (_QWORD *)swift_task_alloc();
  v0[8] = v11;
  *v11 = v0;
  v11[1] = DUBulkUpdater.triggerPoemOnBoarding();
  return PoemOnBoardHandler.onBoard()(v10, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (!v0)
    return swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;

  Logger.init()();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_2282CC000, v1, v2, "DocumentUnderstanding: Ending handlePoemOnBoarding", v3, 2u);
    MEMORY[0x22E2B117C](v3, -1, -1);
  }
  v4 = *(void (**)(uint64_t, uint64_t))(v0 + 56);
  v5 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 24);

  v4(v5, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Void __swiftcall DUBulkUpdater.triggerIncrementalPoemUpdate()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  void (*v10)(char *, uint64_t);
  uint64_t v11;
  unint64_t v12;
  double v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  _QWORD v18[7];
  _BYTE v19[32];
  double v20;
  char v21;

  v0 = type metadata accessor for Logger();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x24BDAC7A8](v0);
  v4 = (char *)v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)v18 - v5;
  Logger.init()();
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_2282CC000, v7, v8, "DocumentUnderstanding: Beginning handle incremental PoemUpdate", v9, 2u);
    MEMORY[0x22E2B117C](v9, -1, -1);
  }

  v10 = *(void (**)(char *, uint64_t))(v1 + 8);
  v10(v6, v0);
  type metadata accessor for PoemAggregationModelHandler();
  swift_allocObject();
  v11 = PoemAggregationModelHandler.init()();
  v12 = specialized static PoemStreamUtilities.fetchBufferEvents()();
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v11 + 200))(v18);
  outlined init with take of PoemModelingParameters?((uint64_t)v18, (uint64_t)v19);
  v13 = v20;
  if (v21)
    v13 = 0.45;
  v14 = static PoemStreamUtilities.convertBufferEventsToConversations(bufferEvents:threshold:)(v12, v13);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 336))(v14, 1);
  swift_release();
  swift_release();
  Logger.init()();
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v17 = 0;
    _os_log_impl(&dword_2282CC000, v15, v16, "DocumentUnderstanding: Ending handle incremental PoemUpdate", v17, 2u);
    MEMORY[0x22E2B117C](v17, -1, -1);
  }

  v10(v4, v0);
}

id DUBulkUpdater.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void DUBulkUpdater.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id DUBulkUpdater.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DUBulkUpdater();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id specialized DUBulkUpdater.init(client:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  char *v5;
  id v6;
  id v7;
  char *v8;
  id v9;
  id v10;
  uint64_t v11;
  char *v12;
  objc_super v14;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC21DocumentUnderstanding13DUBulkUpdater_documentNamespace];
  *(_QWORD *)v4 = 0xD000000000000028;
  *((_QWORD *)v4 + 1) = 0x80000002284DCDC0;
  if (a1)
  {
    v5 = v1;
    v6 = a1;
  }
  else
  {
    v7 = objc_allocWithZone((Class)type metadata accessor for DUClient());
    v8 = v1;
    v6 = DUClient.init(identifier:)(0x6470755F6B6C7562, 0xEC00000072657461);
  }
  *(_QWORD *)&v2[OBJC_IVAR____TtC21DocumentUnderstanding13DUBulkUpdater_client] = v6;
  type metadata accessor for PoemAggregationModelHandler();
  swift_allocObject();
  v9 = a1;
  v10 = v6;
  v11 = PoemAggregationModelHandler.init()();
  v12 = &v2[OBJC_IVAR____TtC21DocumentUnderstanding13DUBulkUpdater_poemOnBoardHandler];
  *(_QWORD *)v12 = v10;
  *((_QWORD *)v12 + 1) = v11;

  v14.receiver = v2;
  v14.super_class = (Class)type metadata accessor for DUBulkUpdater();
  return objc_msgSendSuper2(&v14, sel_init);
}

uint64_t outlined init with take of PoemModelingParameters?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PoemModelingParameters?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for DUBulkUpdater()
{
  return objc_opt_self();
}

uint64_t sub_228357B08@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x68))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_228357B48(uint64_t *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & **a2) + 0x70);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t PoemStatsRecord.cooccurrenceId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding15PoemStatsRecord_cooccurrenceId);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PoemStatsRecord.entityId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding15PoemStatsRecord_entityId);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PoemStatsRecord.photoId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding15PoemStatsRecord_photoId);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PoemStatsRecord.entityName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding15PoemStatsRecord_entityName);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PoemStatsRecord.associatedFeatureData.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding15PoemStatsRecord_associatedFeatureData);
  outlined copy of Data?(v1, *(_QWORD *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding15PoemStatsRecord_associatedFeatureData + 8));
  return v1;
}

id PoemStatsRecord.__allocating_init(cooccurrenceId:entityName:entityId:photoId:associatedFeatureData:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  objc_class *v10;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  objc_super v26;

  v18 = (char *)objc_allocWithZone(v10);
  v19 = &v18[OBJC_IVAR____TtC21DocumentUnderstanding15PoemStatsRecord_cooccurrenceId];
  *(_QWORD *)v19 = a1;
  *((_QWORD *)v19 + 1) = a2;
  v20 = &v18[OBJC_IVAR____TtC21DocumentUnderstanding15PoemStatsRecord_entityName];
  *(_QWORD *)v20 = a3;
  *((_QWORD *)v20 + 1) = a4;
  v21 = &v18[OBJC_IVAR____TtC21DocumentUnderstanding15PoemStatsRecord_entityId];
  *(_QWORD *)v21 = a5;
  *((_QWORD *)v21 + 1) = a6;
  v22 = &v18[OBJC_IVAR____TtC21DocumentUnderstanding15PoemStatsRecord_photoId];
  *(_QWORD *)v22 = a7;
  *((_QWORD *)v22 + 1) = a8;
  v23 = &v18[OBJC_IVAR____TtC21DocumentUnderstanding15PoemStatsRecord_associatedFeatureData];
  *(_QWORD *)v23 = a9;
  *((_QWORD *)v23 + 1) = a10;
  v26.receiver = v18;
  v26.super_class = v10;
  return objc_msgSendSuper2(&v26, sel_init);
}

id PoemStatsRecord.init(cooccurrenceId:entityName:entityId:photoId:associatedFeatureData:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  objc_super v17;

  v11 = &v10[OBJC_IVAR____TtC21DocumentUnderstanding15PoemStatsRecord_cooccurrenceId];
  *(_QWORD *)v11 = a1;
  *((_QWORD *)v11 + 1) = a2;
  v12 = &v10[OBJC_IVAR____TtC21DocumentUnderstanding15PoemStatsRecord_entityName];
  *(_QWORD *)v12 = a3;
  *((_QWORD *)v12 + 1) = a4;
  v13 = &v10[OBJC_IVAR____TtC21DocumentUnderstanding15PoemStatsRecord_entityId];
  *(_QWORD *)v13 = a5;
  *((_QWORD *)v13 + 1) = a6;
  v14 = &v10[OBJC_IVAR____TtC21DocumentUnderstanding15PoemStatsRecord_photoId];
  *(_QWORD *)v14 = a7;
  *((_QWORD *)v14 + 1) = a8;
  v15 = &v10[OBJC_IVAR____TtC21DocumentUnderstanding15PoemStatsRecord_associatedFeatureData];
  *(_QWORD *)v15 = a9;
  *((_QWORD *)v15 + 1) = a10;
  v17.receiver = v10;
  v17.super_class = (Class)type metadata accessor for PoemStatsRecord();
  return objc_msgSendSuper2(&v17, sel_init);
}

uint64_t type metadata accessor for PoemStatsRecord()
{
  return objc_opt_self();
}

id PoemStatsRecord.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void PoemStatsRecord.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id PoemStatsRecord.__deallocating_deinit()
{
  return DUGlobalTopicSetIdentifier.__deallocating_deinit(type metadata accessor for PoemStatsRecord);
}

id PoemStatsDatabase.database.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding17PoemStatsDatabase_database);
}

uint64_t PoemStatsDatabase.isFrozen.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding17PoemStatsDatabase_isFrozen);
}

id PoemStatsDatabase.__allocating_init(dbURL:isFrozen:)(char *a1, int a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return PoemStatsDatabase.init(dbURL:isFrozen:)(a1, a2);
}

id PoemStatsDatabase.init(dbURL:isFrozen:)(char *a1, int a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, char *, uint64_t);
  NSObject *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void (*v21)(char *, uint64_t);
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  char v28;
  id v29;
  _BYTE *v30;
  objc_class *v31;
  id v32;
  _QWORD v34[3];
  uint64_t v35;
  uint64_t v36;
  char *v37;
  int v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  objc_super v42;
  uint64_t v43;

  v38 = a2;
  v5 = type metadata accessor for URL();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Logger();
  v35 = *(_QWORD *)(v9 - 8);
  v36 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = v2;
  Logger.init()();
  v12 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v39 = a1;
  v12(v8, a1, v5);
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.info.getter();
  v15 = os_log_type_enabled(v13, v14);
  v40 = v5;
  if (v15)
  {
    v16 = (uint8_t *)swift_slowAlloc();
    v17 = swift_slowAlloc();
    v34[2] = v3;
    v18 = v17;
    v43 = v17;
    *(_DWORD *)v16 = 136315138;
    v34[1] = v16 + 4;
    v19 = URL.absoluteString.getter();
    v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v21 = *(void (**)(char *, uint64_t))(v6 + 8);
    v21(v8, v40);
    _os_log_impl(&dword_2282CC000, v13, v14, "PoemStatsDatabase: Initializing db at %s", v16, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22E2B117C](v18, -1, -1);
    MEMORY[0x22E2B117C](v16, -1, -1);
  }
  else
  {
    v21 = *(void (**)(char *, uint64_t))(v6 + 8);
    v21(v8, v5);
  }

  (*(void (**)(char *, uint64_t))(v35 + 8))(v11, v36);
  v22 = v39;
  v23 = URL.absoluteString.getter();
  v25 = v24;
  if (one-time initialization token for migrations != -1)
    swift_once();
  v26 = static PoemStatsDatabaseMigration.migrations;
  v27 = objc_allocWithZone((Class)type metadata accessor for SQLiteDatabase());
  swift_bridgeObjectRetain();
  v28 = v38 & 1;
  v29 = SQLiteDatabase.init(dbPath:migrationsList:isFrozen:)(v23, v25, v26, v38 & 1);
  v30 = v37;
  *(_QWORD *)&v37[OBJC_IVAR____TtC21DocumentUnderstanding17PoemStatsDatabase_database] = v29;
  v30[OBJC_IVAR____TtC21DocumentUnderstanding17PoemStatsDatabase_isFrozen] = v28;

  v31 = (objc_class *)type metadata accessor for PoemStatsDatabase();
  v42.receiver = v30;
  v42.super_class = v31;
  v32 = objc_msgSendSuper2(&v42, sel_init);
  v21(v22, v40);
  return v32;
}

uint64_t type metadata accessor for PoemStatsDatabase()
{
  return objc_opt_self();
}

Swift::Void __swiftcall PoemStatsDatabase.clearAllRecords()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;

  v1 = v0;
  v2 = type metadata accessor for Logger();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding17PoemStatsDatabase_isFrozen) & 1) == 0)
  {
    Logger.init()();
    v6 = Logger.logObject.getter();
    v7 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_2282CC000, v6, v7, "PoemStatsDatabase: Clearing all the records", v8, 2u);
      MEMORY[0x22E2B117C](v8, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    (*(void (**)(unint64_t, unint64_t, _QWORD, _QWORD, _QWORD, _QWORD))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding17PoemStatsDatabase_database))
                                                                                               + 0x108))(0xD00000000000001ALL, 0x80000002284DC300, 0, 0, 0, 0);
  }
}

uint64_t PoemStatsDatabase.retrieveAllRecords()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  void (*v3)(unint64_t, unint64_t, _QWORD, _QWORD, uint64_t (*)(void *), uint64_t);
  uint64_t v4;

  v1 = *(_QWORD **)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding17PoemStatsDatabase_database);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = MEMORY[0x24BEE4AF8];
  v3 = *(void (**)(unint64_t, unint64_t, _QWORD, _QWORD, uint64_t (*)(void *), uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0x108);
  swift_retain();
  v3(0xD000000000000038, 0x80000002284DC320, 0, 0, partial apply for closure #1 in static PoemStatsDatabaseQueries.fetchAllRecords(db:), v2);
  swift_release();
  swift_beginAccess();
  v4 = *(_QWORD *)(v2 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  return v4;
}

Swift::Int __swiftcall PoemStatsDatabase.countRecords()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  void (*v3)(unint64_t, unint64_t, _QWORD, _QWORD, uint64_t (*)(void *), uint64_t);
  Swift::Int v4;

  v1 = *(_QWORD **)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding17PoemStatsDatabase_database);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = 0;
  v3 = *(void (**)(unint64_t, unint64_t, _QWORD, _QWORD, uint64_t (*)(void *), uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0x108);
  swift_retain();
  v3(0xD000000000000023, 0x80000002284DC360, 0, 0, _s21DocumentUnderstanding24PoemStatsDatabaseQueriesV15countAllRecords2dbSiAA06SQLiteE0C_tFZSo17_PASDBIterAction_VSo19_PASSqliteStatementCcfU_TA_0, v2);
  swift_release();
  swift_beginAccess();
  v4 = *(_QWORD *)(v2 + 16);
  swift_release();
  return v4;
}

void __swiftcall PoemStatsDatabase.retrieveFeatureMapForCooccurrenceId(cooccurrenceId:)(Swift::tuple_cooccurrenceId_String_entityId_String_entityName_String_associatedModelInputFeatureMap_OpaquePointer_optional_optional *__return_ptr retstr, Swift::String cooccurrenceId)
{
  uint64_t v2;
  void *object;
  uint64_t countAndFlagsBits;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(unint64_t, unint64_t, void (*)(void *), uint64_t, uint64_t (*)(uint64_t), uint64_t);
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;

  object = cooccurrenceId._object;
  countAndFlagsBits = cooccurrenceId._countAndFlagsBits;
  v6 = *(_QWORD **)(v2 + OBJC_IVAR____TtC21DocumentUnderstanding17PoemStatsDatabase_database);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = countAndFlagsBits;
  *(_QWORD *)(v8 + 24) = object;
  v9 = *(void (**)(unint64_t, unint64_t, void (*)(void *), uint64_t, uint64_t (*)(uint64_t), uint64_t))((*MEMORY[0x24BEE4EA0] & *v6) + 0x108);
  swift_bridgeObjectRetain();
  swift_retain();
  v9(0xD000000000000109, 0x80000002284DC390, _s21DocumentUnderstanding24PoemStatsDatabaseQueriesV28fetchRecordForCooccurrenceId2db05queryjK0SS012cooccurrenceK0_SS06entityK0SS0O4Name10Foundation4DataVSg017associatedFeatureR0tSgAA06SQLiteE0C_SStFZySo19_PASSqliteStatementCcfU_TA_0, v8, _s21DocumentUnderstanding24PoemStatsDatabaseQueriesV28fetchRecordForCooccurrenceId2db05queryjK0SS012cooccurrenceK0_SS06entityK0SS0O4Name10Foundation4DataVSg017associatedFeatureR0tSgAA06SQLiteE0C_SStFZSo17_PASDBIterAction_VSo19_PASSqliteStatementCcfU0_TA_0, v7);
  swift_release();
  swift_release();
  swift_beginAccess();
  v10 = *(_QWORD *)(v7 + 16);
  v11 = *(void **)(v7 + 24);
  v12 = *(_QWORD *)(v7 + 32);
  v13 = *(void **)(v7 + 40);
  v14 = *(_QWORD *)(v7 + 48);
  v15 = *(void **)(v7 + 56);
  v16 = *(_QWORD *)(v7 + 64);
  v17 = *(_QWORD *)(v7 + 72);
  outlined copy of (cooccurrenceId: String, entityId: String, entityName: String, associatedFeatureData: Data?)?(v10, (uint64_t)v11, v12, (uint64_t)v13, v14, (uint64_t)v15, v16, v17);
  swift_release();
  if (v11)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data?(v16, v17);
    outlined consume of Data?(v16, v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data?(v16, v17);
    outlined consume of Data?(v16, v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data?(v16, v17);
    outlined consume of Data?(v16, v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v19 = specialized PoemStatsDatabase.convertAssociatedDataToFeatures(data:)(v16, v17);
    outlined consume of (cooccurrenceId: String, entityName: String, photoId: String, associatedFeatureData: Data?)?(v10, (uint64_t)v11, v12, (uint64_t)v13, v14, (uint64_t)v15, v16, v17);
    swift_bridgeObjectRelease();
    v18 = (void *)v19;
  }
  else
  {
    v10 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v18 = 0;
  }
  retstr->value.cooccurrenceId._countAndFlagsBits = v10;
  retstr->value.cooccurrenceId._object = v11;
  retstr->value.entityId._countAndFlagsBits = v12;
  retstr->value.entityId._object = v13;
  retstr->value.entityName._countAndFlagsBits = v14;
  retstr->value.entityName._object = v15;
  retstr->value.associatedModelInputFeatureMap.value._rawValue = v18;
}

void __swiftcall PoemStatsDatabase.retrieveFeatureMapForEntityName(entityName:)(Swift::tuple_cooccurrenceId_String_entityId_String_entityName_String_associatedModelInputFeatureMap_OpaquePointer_optional_optional *__return_ptr retstr, Swift::String entityName)
{
  uint64_t v2;
  void *object;
  uint64_t countAndFlagsBits;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(unint64_t, unint64_t, void (*)(void *), uint64_t, uint64_t (*)(uint64_t), uint64_t);
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;

  object = entityName._object;
  countAndFlagsBits = entityName._countAndFlagsBits;
  v6 = *(_QWORD **)(v2 + OBJC_IVAR____TtC21DocumentUnderstanding17PoemStatsDatabase_database);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = countAndFlagsBits;
  *(_QWORD *)(v8 + 24) = object;
  v9 = *(void (**)(unint64_t, unint64_t, void (*)(void *), uint64_t, uint64_t (*)(uint64_t), uint64_t))((*MEMORY[0x24BEE4EA0] & *v6) + 0x108);
  swift_bridgeObjectRetain();
  swift_retain();
  v9(0xD000000000000100, 0x80000002284DC4A0, _s21DocumentUnderstanding24PoemStatsDatabaseQueriesV24fetchRecordForEntityName2db05queryjK0SS14cooccurrenceId_SS06entityO0SS0pK010Foundation4DataVSg017associatedFeatureR0tSgAA06SQLiteE0C_SStFZySo19_PASSqliteStatementCcfU_TA_0, v8, _s21DocumentUnderstanding24PoemStatsDatabaseQueriesV28fetchRecordForCooccurrenceId2db05queryjK0SS012cooccurrenceK0_SS06entityK0SS0O4Name10Foundation4DataVSg017associatedFeatureR0tSgAA06SQLiteE0C_SStFZSo17_PASDBIterAction_VSo19_PASSqliteStatementCcfU0_TA_0, v7);
  swift_release();
  swift_release();
  swift_beginAccess();
  v10 = *(_QWORD *)(v7 + 16);
  v11 = *(void **)(v7 + 24);
  v12 = *(_QWORD *)(v7 + 32);
  v13 = *(void **)(v7 + 40);
  v14 = *(_QWORD *)(v7 + 48);
  v15 = *(void **)(v7 + 56);
  v16 = *(_QWORD *)(v7 + 64);
  v17 = *(_QWORD *)(v7 + 72);
  outlined copy of (cooccurrenceId: String, entityId: String, entityName: String, associatedFeatureData: Data?)?(v10, (uint64_t)v11, v12, (uint64_t)v13, v14, (uint64_t)v15, v16, v17);
  swift_release();
  if (v11)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data?(v16, v17);
    outlined consume of Data?(v16, v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data?(v16, v17);
    outlined consume of Data?(v16, v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data?(v16, v17);
    outlined consume of Data?(v16, v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v19 = specialized PoemStatsDatabase.convertAssociatedDataToFeatures(data:)(v16, v17);
    outlined consume of (cooccurrenceId: String, entityName: String, photoId: String, associatedFeatureData: Data?)?(v10, (uint64_t)v11, v12, (uint64_t)v13, v14, (uint64_t)v15, v16, v17);
    swift_bridgeObjectRelease();
    v18 = (void *)v19;
  }
  else
  {
    v10 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v18 = 0;
  }
  retstr->value.cooccurrenceId._countAndFlagsBits = v10;
  retstr->value.cooccurrenceId._object = v11;
  retstr->value.entityId._countAndFlagsBits = v12;
  retstr->value.entityId._object = v13;
  retstr->value.entityName._countAndFlagsBits = v14;
  retstr->value.entityName._object = v15;
  retstr->value.associatedModelInputFeatureMap.value._rawValue = v18;
}

void __swiftcall PoemStatsDatabase.retrieveFeatureMapForPhotoId(photoId:)(Swift::tuple_cooccurrenceId_String_photoId_String_associatedModelInputFeatureMap_OpaquePointer_optional_optional *__return_ptr retstr, Swift::String photoId)
{
  uint64_t v2;
  void *object;
  uint64_t countAndFlagsBits;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(unint64_t, unint64_t, void (*)(void *), uint64_t, uint64_t (*)(void *), uint64_t);
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;

  object = photoId._object;
  countAndFlagsBits = photoId._countAndFlagsBits;
  v6 = *(_QWORD **)(v2 + OBJC_IVAR____TtC21DocumentUnderstanding17PoemStatsDatabase_database);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = countAndFlagsBits;
  *(_QWORD *)(v8 + 24) = object;
  v9 = *(void (**)(unint64_t, unint64_t, void (*)(void *), uint64_t, uint64_t (*)(void *), uint64_t))((*MEMORY[0x24BEE4EA0] & *v6) + 0x108);
  swift_bridgeObjectRetain();
  swift_retain();
  v9(0xD0000000000000E4, 0x80000002284DC5B0, _s21DocumentUnderstanding24PoemStatsDatabaseQueriesV21fetchRecordForPhotoId2db05queryjK0SS012cooccurrenceK0_SS05photoK010Foundation4DataVSg017associatedFeatureQ0tSgAA06SQLiteE0C_SStFZySo19_PASSqliteStatementCcfU_TA_0, v8, partial apply for closure #2 in static PoemStatsDatabaseQueries.fetchRecordForPhotoId(db:queryPhotoId:), v7);
  swift_release();
  swift_release();
  swift_beginAccess();
  v10 = *(_QWORD *)(v7 + 16);
  v11 = *(void **)(v7 + 24);
  v12 = *(_QWORD *)(v7 + 32);
  v13 = *(void **)(v7 + 40);
  v14 = *(_QWORD *)(v7 + 48);
  v15 = *(_QWORD *)(v7 + 56);
  outlined copy of (cooccurrenceId: String, photoId: String, associatedFeatureData: Data?)?(v10, (uint64_t)v11, v12, (uint64_t)v13, v14, v15);
  swift_release();
  if (v11)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data?(v14, v15);
    outlined consume of Data?(v14, v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data?(v14, v15);
    outlined consume of Data?(v14, v15);
    swift_bridgeObjectRelease();
    v16 = (void *)specialized PoemStatsDatabase.convertAssociatedDataToFeatures(data:)(v14, v15);
    outlined consume of (cooccurrenceId: String, photoId: String, associatedFeatureData: Data?)?(v10, (uint64_t)v11, v12, (uint64_t)v13, v14, v15);
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = 0;
    v12 = 0;
    v13 = 0;
    v16 = 0;
  }
  retstr->value.cooccurrenceId._countAndFlagsBits = v10;
  retstr->value.cooccurrenceId._object = v11;
  retstr->value.photoId._countAndFlagsBits = v12;
  retstr->value.photoId._object = v13;
  retstr->value.associatedModelInputFeatureMap.value._rawValue = v16;
}

void __swiftcall PoemStatsDatabase.retrieveFeatureMapForEntityNameAndPhotoId(entityName:photoId:)(Swift::tuple_cooccurrenceId_String_entityName_String_photoId_String_associatedModelInputFeatureMap_OpaquePointer_optional_associatedListFeatures_OpaquePointer_optional_optional *__return_ptr retstr, Swift::String entityName, Swift::String photoId)
{
  uint64_t v3;
  void *object;
  uint64_t countAndFlagsBits;
  void *v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  void (*v12)(unint64_t, unint64_t, void (*)(void *), _QWORD *, uint64_t (*)(void *), uint64_t);
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;

  object = photoId._object;
  countAndFlagsBits = photoId._countAndFlagsBits;
  v6 = entityName._object;
  v7 = entityName._countAndFlagsBits;
  v9 = *(_QWORD **)(v3 + OBJC_IVAR____TtC21DocumentUnderstanding17PoemStatsDatabase_database);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = countAndFlagsBits;
  v11[3] = object;
  v11[4] = v7;
  v11[5] = v6;
  v12 = *(void (**)(unint64_t, unint64_t, void (*)(void *), _QWORD *, uint64_t (*)(void *), uint64_t))((*MEMORY[0x24BEE4EA0] & *v9) + 0x108);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  v12(0xD000000000000116, 0x80000002284DC6A0, partial apply for closure #1 in static PoemStatsDatabaseQueries.fetchRecordForEntityNameAndPhotoId(db:queryEntityName:queryPhotoId:), v11, partial apply for closure #2 in static PoemStatsDatabaseQueries.fetchRecordForEntityNameAndPhotoId(db:queryEntityName:queryPhotoId:), v10);
  swift_release();
  swift_release();
  swift_beginAccess();
  v13 = *(_QWORD *)(v10 + 16);
  v14 = *(void **)(v10 + 24);
  v15 = *(_QWORD *)(v10 + 32);
  v16 = *(void **)(v10 + 40);
  v17 = *(_QWORD *)(v10 + 48);
  v18 = *(void **)(v10 + 56);
  v19 = *(_QWORD *)(v10 + 64);
  v20 = *(_QWORD *)(v10 + 72);
  outlined copy of (cooccurrenceId: String, entityId: String, entityName: String, associatedFeatureData: Data?)?(v13, (uint64_t)v14, v15, (uint64_t)v16, v17, (uint64_t)v18, v19, v20);
  swift_release();
  if (v14)
  {
    v24 = specialized PoemStatsDatabase.convertAssociatedDataToFeatures(data:)(v19, v20);
    v22 = v21;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data?(v19, v20);
    outlined consume of Data?(v19, v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data?(v19, v20);
    outlined consume of Data?(v19, v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Data?(v19, v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v23 = (void *)v24;
  }
  else
  {
    v13 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v23 = 0;
    v22 = 0;
  }
  retstr->value.cooccurrenceId._countAndFlagsBits = v13;
  retstr->value.cooccurrenceId._object = v14;
  retstr->value.entityName._countAndFlagsBits = v15;
  retstr->value.entityName._object = v16;
  retstr->value.photoId._countAndFlagsBits = v17;
  retstr->value.photoId._object = v18;
  retstr->value.associatedModelInputFeatureMap.value._rawValue = v23;
  *(_QWORD *)&retstr->value.associatedModelInputFeatureMap.is_nil = v22;
}

Swift::Void __swiftcall PoemStatsDatabase.insertFeatureMap(cooccurrenceId:entityName:entityId:photoId:associatedFeatures:)(Swift::String cooccurrenceId, Swift::String entityName, Swift::String entityId, Swift::String photoId, Swift::tuple_doubleFeatures_OpaquePointer_listFeatures_OpaquePointer associatedFeatures)
{
  uint64_t v5;
  uint64_t v6;
  void *object;
  uint64_t countAndFlagsBits;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  _QWORD *v22;
  objc_class *v23;
  char *v24;
  char *v25;
  void *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  void (*v35)(unint64_t, unint64_t, void (*)(void *), uint64_t, _QWORD, _QWORD);
  id v36;
  char *v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  objc_super v53;

  v6 = v5;
  object = photoId._object;
  countAndFlagsBits = photoId._countAndFlagsBits;
  v9 = entityId._object;
  v10 = entityId._countAndFlagsBits;
  v11 = entityName._object;
  v12 = entityName._countAndFlagsBits;
  v48 = cooccurrenceId._object;
  v45 = cooccurrenceId._countAndFlagsBits;
  v13 = type metadata accessor for Logger();
  v49 = *(_QWORD *)(v13 - 8);
  v50 = v13;
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v44 = (char *)&v43 - v17;
  v46 = specialized PoemStatsDatabase.serializeAssociatedFeatures(features:)((uint64_t)associatedFeatures.doubleFeatures._rawValue, (uint64_t)associatedFeatures.listFeatures._rawValue);
  v47 = v18;
  if (v18 >> 60 == 15)
  {
    Logger.init()();
    v19 = Logger.logObject.getter();
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v21 = 0;
      _os_log_impl(&dword_2282CC000, v19, v20, "PoemStatsDatabase: Error while serializing features", v21, 2u);
      MEMORY[0x22E2B117C](v21, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v49 + 8))(v16, v50);
  }
  else
  {
    v22 = *(_QWORD **)(v6 + OBJC_IVAR____TtC21DocumentUnderstanding17PoemStatsDatabase_database);
    v23 = (objc_class *)type metadata accessor for PoemStatsRecord();
    v24 = (char *)objc_allocWithZone(v23);
    v25 = &v24[OBJC_IVAR____TtC21DocumentUnderstanding15PoemStatsRecord_cooccurrenceId];
    v26 = v48;
    *(_QWORD *)v25 = v45;
    *((_QWORD *)v25 + 1) = v26;
    v27 = (uint64_t *)&v24[OBJC_IVAR____TtC21DocumentUnderstanding15PoemStatsRecord_entityName];
    *v27 = v12;
    v27[1] = (uint64_t)v11;
    v28 = (uint64_t *)&v24[OBJC_IVAR____TtC21DocumentUnderstanding15PoemStatsRecord_entityId];
    *v28 = v10;
    v28[1] = (uint64_t)v9;
    v29 = (uint64_t *)&v24[OBJC_IVAR____TtC21DocumentUnderstanding15PoemStatsRecord_photoId];
    *v29 = countAndFlagsBits;
    v29[1] = (uint64_t)object;
    v30 = &v24[OBJC_IVAR____TtC21DocumentUnderstanding15PoemStatsRecord_associatedFeatureData];
    v32 = v46;
    v31 = v47;
    *(_QWORD *)v30 = v46;
    *((_QWORD *)v30 + 1) = v31;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data?(v32, v31);
    v53.receiver = v24;
    v53.super_class = v23;
    v33 = objc_msgSendSuper2(&v53, sel_init);
    v34 = swift_allocObject();
    *(_QWORD *)(v34 + 16) = v33;
    v35 = *(void (**)(unint64_t, unint64_t, void (*)(void *), uint64_t, _QWORD, _QWORD))((*MEMORY[0x24BEE4EA0] & *v22) + 0x108);
    v36 = v33;
    v35(0xD00000000000009FLL, 0x80000002284DC260, partial apply for closure #1 in static PoemStatsDatabaseQueries.insertRecord(db:record:), v34, 0, 0);

    swift_release();
    v37 = v44;
    Logger.init()();
    swift_bridgeObjectRetain_n();
    v38 = Logger.logObject.getter();
    v39 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc();
      v41 = swift_slowAlloc();
      v52 = v41;
      *(_DWORD *)v40 = 136315138;
      v42 = (unint64_t)v48;
      swift_bridgeObjectRetain();
      v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v42, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_2282CC000, v38, v39, "PoemStatsDatabase: Added a record with key: %s", v40, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22E2B117C](v41, -1, -1);
      MEMORY[0x22E2B117C](v40, -1, -1);

      outlined consume of Data?(v46, v47);
    }
    else
    {
      outlined consume of Data?(v46, v47);

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v49 + 8))(v37, v50);
  }
}

void PoemStatsDatabase.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id PoemStatsDatabase.__deallocating_deinit()
{
  return DUGlobalTopicSetIdentifier.__deallocating_deinit(type metadata accessor for PoemStatsDatabase);
}

uint64_t sub_228359390()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2283593B4()
{
  return swift_deallocObject();
}

uint64_t _s21DocumentUnderstanding24PoemStatsDatabaseQueriesV15countAllRecords2dbSiAA06SQLiteE0C_tFZSo17_PASDBIterAction_VSo19_PASSqliteStatementCcfU_TA_0(void *a1)
{
  uint64_t v1;

  return closure #1 in static PoemStatsDatabaseQueries.countAllRecords(db:)(a1, v1);
}

void _s21DocumentUnderstanding24PoemStatsDatabaseQueriesV28fetchRecordForCooccurrenceId2db05queryjK0SS012cooccurrenceK0_SS06entityK0SS0O4Name10Foundation4DataVSg017associatedFeatureR0tSgAA06SQLiteE0C_SStFZySo19_PASSqliteStatementCcfU_TA_0(void *a1)
{
  uint64_t v1;

  closure #1 in static PoemStatsDatabaseQueries.fetchRecordForCooccurrenceId(db:queryCooccurrenceId:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t _s21DocumentUnderstanding24PoemStatsDatabaseQueriesV28fetchRecordForCooccurrenceId2db05queryjK0SS012cooccurrenceK0_SS06entityK0SS0O4Name10Foundation4DataVSg017associatedFeatureR0tSgAA06SQLiteE0C_SStFZSo17_PASDBIterAction_VSo19_PASSqliteStatementCcfU0_TA_0(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in static PoemStatsDatabaseQueries.fetchRecordForCooccurrenceId(db:queryCooccurrenceId:)(a1, v1);
}

uint64_t specialized PoemStatsDatabase.serializeAssociatedFeatures(features:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  char v14;
  void *v15;
  Class isa;
  id v17;
  id v18;
  uint64_t v19;
  void *v20;
  void *v21;
  NSObject *v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v26;
  unint64_t v27;
  _OWORD v28[2];
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v4 = type metadata accessor for Logger();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v9 = specialized _dictionaryUpCast<A, B, C, D>(_:)(a1);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  v30 = v10;
  *(_QWORD *)&v29 = v9;
  outlined init with take of Any(&v29, v28);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v27 = v8;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v28, 0x6546656C62756F64, 0xEE00736572757461, isUniquelyReferenced_nonNull_native);
  v12 = v27;
  swift_bridgeObjectRelease();
  v13 = specialized _dictionaryUpCast<A, B, C, D>(_:)(a2);
  v30 = v10;
  *(_QWORD *)&v29 = v13;
  outlined init with take of Any(&v29, v28);
  v14 = swift_isUniquelyReferenced_nonNull_native();
  v27 = v12;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v28, 0x746165467473696CLL, 0xEC00000073657275, v14);
  swift_bridgeObjectRelease();
  v15 = (void *)objc_opt_self();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  *(_QWORD *)&v29 = 0;
  v17 = objc_msgSend(v15, sel_dataWithJSONObject_options_error_, isa, 0, &v29);

  v18 = (id)v29;
  if (v17)
  {
    v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  }
  else
  {
    v20 = v18;
    v21 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    Logger.init()();
    v22 = Logger.logObject.getter();
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, (os_log_type_t)v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v24 = 0;
      _os_log_impl(&dword_2282CC000, v22, (os_log_type_t)v23, "PoemStatsDatabase: Error while serializing features", v24, 2u);
      MEMORY[0x22E2B117C](v24, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return 0;
  }
  return v19;
}

uint64_t specialized PoemStatsDatabase.convertAssociatedDataToFeatures(data:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  Class isa;
  id v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  id v16;
  void *v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  unint64_t v21;
  char v22;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v4 = type metadata accessor for Logger();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = 0;
  if (a2 >> 60 != 15)
  {
    v9 = (void *)objc_opt_self();
    outlined copy of Data._Representation(a1, a2);
    isa = Data._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)&v25 = 0;
    v11 = objc_msgSend(v9, sel_JSONObjectWithData_options_error_, isa, 0, &v25);

    if (v11)
    {
      v12 = (id)v25;
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      if (!swift_dynamicCast() || (v13 = v24) == 0)
      {
        outlined consume of Data?(a1, a2);
        v8 = 0;
        v25 = 0u;
        v26 = 0u;
        goto LABEL_22;
      }
      if (*(_QWORD *)(v24 + 16)
        && (v14 = specialized __RawDictionaryStorage.find<A>(_:)(0x6546656C62756F64, 0xEE00736572757461),
            (v15 & 1) != 0))
      {
        outlined init with copy of Any(*(_QWORD *)(v13 + 56) + 32 * v14, (uint64_t)&v25);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Double]);
        if (swift_dynamicCast())
          v8 = v24;
        else
          v8 = 0;
        if (!*(_QWORD *)(v13 + 16))
          goto LABEL_19;
      }
      else
      {
        v8 = 0;
        if (!*(_QWORD *)(v13 + 16))
          goto LABEL_19;
      }
      v21 = specialized __RawDictionaryStorage.find<A>(_:)(0x746165467473696CLL, 0xEC00000073657275);
      if ((v22 & 1) != 0)
      {
        outlined init with copy of Any(*(_QWORD *)(v13 + 56) + 32 * v21, (uint64_t)&v25);
        goto LABEL_20;
      }
LABEL_19:
      v25 = 0u;
      v26 = 0u;
LABEL_20:
      outlined consume of Data?(a1, a2);
      if (*((_QWORD *)&v26 + 1))
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : [Double]]);
        swift_dynamicCast();
LABEL_23:
        swift_bridgeObjectRelease();
        return v8;
      }
LABEL_22:
      outlined destroy of Any?((uint64_t)&v25);
      goto LABEL_23;
    }
    v16 = (id)v25;
    v17 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    Logger.init()();
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v20 = 0;
      _os_log_impl(&dword_2282CC000, v18, v19, "PoemStatsDatabase: Error while de-serializing features", v20, 2u);
      MEMORY[0x22E2B117C](v20, -1, -1);
    }
    outlined consume of Data?(a1, a2);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return 0;
  }
  return v8;
}

uint64_t sub_228359A3C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void _s21DocumentUnderstanding24PoemStatsDatabaseQueriesV24fetchRecordForEntityName2db05queryjK0SS14cooccurrenceId_SS06entityO0SS0pK010Foundation4DataVSg017associatedFeatureR0tSgAA06SQLiteE0C_SStFZySo19_PASSqliteStatementCcfU_TA_0(void *a1)
{
  uint64_t v1;

  closure #1 in static PoemStatsDatabaseQueries.fetchRecordForEntityName(db:queryEntityName:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_228359A68()
{
  _QWORD *v0;
  unint64_t v1;

  if (v0[3])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v1 = v0[7];
    if (v1 >> 60 != 15)
      outlined consume of Data._Representation(v0[6], v1);
  }
  return swift_deallocObject();
}

void _s21DocumentUnderstanding24PoemStatsDatabaseQueriesV21fetchRecordForPhotoId2db05queryjK0SS012cooccurrenceK0_SS05photoK010Foundation4DataVSg017associatedFeatureQ0tSgAA06SQLiteE0C_SStFZySo19_PASSqliteStatementCcfU_TA_0(void *a1)
{
  uint64_t v1;

  closure #1 in static PoemStatsDatabaseQueries.fetchRecordForPhotoId(db:queryPhotoId:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_228359ABC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_228359AE8()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t BasicTokenizer.neverSplit.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t BasicTokenizer.tokenize(text:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _BYTE v23[16];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = v2;
  v6 = type metadata accessor for CharacterSet();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = &v23[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = &v23[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v26 = a1;
  v27 = a2;
  v13 = type metadata accessor for Locale();
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  lazy protocol witness table accessor for type String and conformance String();
  v14 = StringProtocol.folding(options:locale:)();
  v16 = v15;
  outlined destroy of Locale?((uint64_t)v12);
  v26 = v14;
  v27 = v16;
  v17 = objc_msgSend((id)objc_opt_self(), sel_whitespaceCharacterSet);
  static CharacterSet._unconditionallyBridgeFromObjectiveC(_:)();

  v18 = StringProtocol.components(separatedBy:)();
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
  swift_bridgeObjectRelease();
  v25 = MEMORY[0x24BEE4AF8];
  v19 = *(_QWORD *)(v18 + 16);
  if (v19)
  {
    swift_bridgeObjectRetain();
    v20 = (uint64_t *)(v18 + 40);
    do
    {
      v21 = *v20;
      v26 = *(v20 - 1);
      v27 = v21;
      swift_bridgeObjectRetain();
      closure #1 in BasicTokenizer.tokenize(text:)((uint64_t)&v26, v3, &v24);
      v20 += 2;
      swift_bridgeObjectRelease();
      specialized Array.append<A>(contentsOf:)(v24);
      --v19;
    }
    while (v19);
    swift_bridgeObjectRelease_n();
    return v25;
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
}

uint64_t outlined destroy of Locale?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *closure #1 in BasicTokenizer.tokenize(text:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  _QWORD *result;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  Swift::String_optional v15;
  uint64_t countAndFlagsBits;
  void *object;
  _QWORD *v18;
  Swift::String v19;
  Swift::String_optional v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;

  v5 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD **)(a2 + 16);
  v7 = v6[2];
  if (!v7)
    goto LABEL_17;
  v8 = (_QWORD *)v6[4] == v5 && v6[5] == v4;
  if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
LABEL_7:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_2284C1EE0;
    *(_QWORD *)(v9 + 32) = v5;
    *(_QWORD *)(v9 + 40) = v4;
    *a3 = v9;
    return (_QWORD *)swift_bridgeObjectRetain();
  }
  if (v7 == 1)
  {
LABEL_17:
    String.lowercased()();
    v15 = String.Iterator.next()();
    if (v15.value._object)
    {
      countAndFlagsBits = v15.value._countAndFlagsBits;
      object = v15.value._object;
      v18 = (_QWORD *)MEMORY[0x24BEE4AF8];
      do
      {
        if ((Character.isLetter.getter() & 1) != 0
          || (Character.isNumber.getter() & 1) != 0
          || countAndFlagsBits == 45250 && object == (void *)0xA200000000000000
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          v19._countAndFlagsBits = countAndFlagsBits;
          v19._object = object;
          String.append(_:)(v19);
          swift_bridgeObjectRelease();
        }
        else
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
          v22 = v18[2];
          v21 = v18[3];
          v23 = v22 + 1;
          if (v22 >= v21 >> 1)
          {
            v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v22 + 1, 1, v18);
            v23 = v22 + 1;
            v18 = v25;
          }
          v18[2] = v23;
          v24 = &v18[2 * v22];
          v24[4] = countAndFlagsBits;
          v24[5] = object;
        }
        v20 = String.Iterator.next()();
        countAndFlagsBits = v20.value._countAndFlagsBits;
        object = v20.value._object;
      }
      while (v20.value._object);
    }
    else
    {
      v18 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    swift_bridgeObjectRelease();
    result = (_QWORD *)swift_bridgeObjectRelease();
  }
  else
  {
    v11 = v6 + 7;
    v12 = 1;
    while (1)
    {
      v13 = v12 + 1;
      if (__OFADD__(v12, 1))
        break;
      v14 = (_QWORD *)*(v11 - 1) == v5 && *v11 == v4;
      if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        goto LABEL_7;
      v11 += 2;
      ++v12;
      if (v13 == v7)
        goto LABEL_17;
    }
    __break(1u);
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    v18 = result;
    v27 = result[2];
    v26 = result[3];
    if (v27 >= v26 >> 1)
    {
      result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v26 > 1), v27 + 1, 1, result);
      v18 = result;
    }
    v18[2] = v27 + 1;
    v28 = &v18[2 * v27];
    v28[4] = v11;
    v28[5] = v4;
  }
  *a3 = (uint64_t)v18;
  return result;
}

uint64_t BasicTokenizer.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t BasicTokenizer.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t BasicTokenizer.__allocating_init()()
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = &outlined read-only object #0 of BasicTokenizer.init();
  return result;
}

uint64_t BasicTokenizer.init()()
{
  uint64_t v0;
  uint64_t result;

  result = v0;
  *(_QWORD *)(v0 + 16) = &outlined read-only object #0 of BasicTokenizer.init();
  return result;
}

uint64_t type metadata accessor for BasicTokenizer()
{
  return objc_opt_self();
}

uint64_t DUFoundInEventDDSpecification.__allocating_init()()
{
  return swift_allocObject();
}

unint64_t static DUFoundInEventDDSpecification.phaseID.getter()
{
  return 0xD00000000000001DLL;
}

uint64_t DUFoundInEventDDSpecification.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t DUFoundInEventDDSpecification.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t DUFoundInEventDDSpecification.init()()
{
  uint64_t v0;

  return v0;
}

unint64_t protocol witness for static DUProcessingPhaseSpecification.phaseID.getter in conformance DUFoundInEventDDSpecification()
{
  return 0xD00000000000001DLL;
}

uint64_t type metadata accessor for DUFoundInEventDDSpecification()
{
  return objc_opt_self();
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = MEMORY[0x24BEE4AF8];
  v11 = MEMORY[0x24BEE4AF8];
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v7 = *(_QWORD *)(type metadata accessor for DUStructuredExtractionResult(0) - 8);
    v8 = (uint64_t *)(a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)));
    v9 = *(_QWORD *)(v7 + 72);
    swift_bridgeObjectRetain();
    do
    {
      closure #1 in DUStructuredExtractionSpecification.attachResultsToResponse(response:processingRequest:)(v8, a2, &v10);
      if (v2)
      {
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      if (v10)
      {
        MEMORY[0x22E2AFAFC]();
        if (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v8 = (uint64_t *)((char *)v8 + v9);
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
    return v11;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  __int128 *v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char v16;
  uint64_t v17;

  result = MEMORY[0x24BEE4AF8];
  v17 = MEMORY[0x24BEE4AF8];
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    v7 = (__int128 *)(a1 + 56);
    do
    {
      v8 = *((_BYTE *)v7 + 32);
      v12 = *((_QWORD *)v7 - 3);
      v9 = *v7;
      v13 = *(v7 - 1);
      v14 = v9;
      v15 = v7[1];
      v16 = v8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      closure #1 in DUWikipediaTopicDetectionSpecification.attachResultsToResponse(response:processingRequest:)((double *)&v12, a2, &v11);
      if (v2)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v10 = swift_bridgeObjectRelease();
      if (v11)
      {
        MEMORY[0x22E2AFAFC](v10);
        if (*(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v7 += 4;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
    return v17;
  }
  return result;
}

uint64_t DUStructuredExtractionSpecification.__allocating_init()()
{
  return swift_allocObject();
}

unint64_t static DUStructuredExtractionSpecification.phaseID.getter()
{
  return 0xD00000000000001BLL;
}

uint64_t DUStructuredExtractionSpecification.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t DUStructuredExtractionSpecification.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t DUStructuredExtractionSpecification.init()()
{
  uint64_t v0;

  return v0;
}

unint64_t protocol witness for static DUProcessingPhaseSpecification.phaseID.getter in conformance DUStructuredExtractionSpecification()
{
  return 0xD00000000000001BLL;
}

uint64_t DUStructuredExtractionSpecification.attachResultsToResponse(response:processingRequest:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  *(_QWORD *)(v2 + 80) = a1;
  v6 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:)
                                       + async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 88) = v4;
  *v4 = v2;
  v4[1] = DUStructuredExtractionSpecification.attachResultsToResponse(response:processingRequest:);
  return v6(a2);
}

uint64_t DUStructuredExtractionSpecification.attachResultsToResponse(response:processingRequest:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 96) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t DUStructuredExtractionSpecification.attachResultsToResponse(response:processingRequest:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v6)(void);
  id v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  void (*v16)(uint64_t, _QWORD);
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  id v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t);
  void (*v30)(uint64_t, _QWORD);
  Swift::String v31;
  uint64_t v33;
  unint64_t v34;

  v1 = *(_QWORD *)(v0 + 96);
  if (v1)
  {
    v2 = *(_QWORD **)(v0 + 80);
    v33 = 0xD00000000000001BLL;
    v34 = 0x80000002284DCFC0;
    v3 = specialized Sequence.compactMap<A>(_:)(v1, &v33);
    v4 = swift_bridgeObjectRelease();
    v5 = (_QWORD *)MEMORY[0x24BEE4EA0];
    v6 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v2) + 0xB0);
    v7 = (id)((uint64_t (*)(uint64_t))v6)(v4);
    if (!v7)
      v7 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUStructuredEntityResponse()), sel_init);
    v8 = (*(uint64_t (**)(id))((*v5 & **(_QWORD **)(v0 + 80)) + 0xB8))(v7);
    v9 = ((uint64_t (*)(uint64_t))v6)(v8);
    if (v9)
    {
      v10 = (_QWORD *)v9;
      v11 = (_QWORD *)v6();
      if (!v11 || (v12 = v11, v13 = (*(uint64_t (**)(void))((*v5 & *v11) + 0x60))(), v12, !v13))
      {
        swift_bridgeObjectRelease();
        v13 = MEMORY[0x24BEE4AF8];
      }
      (*(void (**)(uint64_t))((*v5 & *v10) + 0x68))(v13);

    }
    v14 = (_QWORD *)v6();
    if (v14)
    {
      v15 = v14;
      v16 = (void (*)(uint64_t, _QWORD))(*(uint64_t (**)(uint64_t))((*v5 & *v14) + 0x70))(v0 + 16);
      if (*v17)
        specialized Array.append<A>(contentsOf:)(v3);
      else
        swift_bridgeObjectRelease();
      v16(v0 + 16, 0);

    }
    else
    {
      v18 = swift_bridgeObjectRelease();
    }
    v19 = ((uint64_t (*)(uint64_t))v6)(v18);
    if (v19)
    {
      v20 = (_QWORD *)v19;
      v21 = (_QWORD *)v6();
      if (!v21 || (v22 = v21, v23 = (id)(*(uint64_t (**)(void))((*v5 & *v21) + 0x78))(), v22, !v23))
        v23 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUDebugInfo()), sel_init);
      (*(void (**)(id))((*v5 & *v20) + 0x80))(v23);

    }
    v24 = (_QWORD *)v6();
    if (v24)
    {
      v25 = v24;
      v26 = (_QWORD *)(*(uint64_t (**)(void))((*v5 & *v24) + 0x78))();

      v27 = (void *)v34;
      if (v26)
      {
        v28 = v33;
        v29 = *(uint64_t (**)(uint64_t))((*v5 & *v26) + 0x68);
        swift_bridgeObjectRetain();
        v30 = (void (*)(uint64_t, _QWORD))v29(v0 + 48);
        v31._countAndFlagsBits = v28;
        v31._object = v27;
        String.append(_:)(v31);
        swift_bridgeObjectRelease();
        v30(v0 + 48, 0);

      }
    }
    swift_bridgeObjectRelease();
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void closure #1 in DUStructuredExtractionSpecification.attachResultsToResponse(response:processingRequest:)(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  int *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  void (*v38)(uint64_t);
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  _QWORD *v42;
  unsigned __int8 *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(_QWORD *);
  _QWORD *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t);
  _QWORD *v54;
  void (*v55)(_QWORD *);
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t *v69;
  unsigned __int8 *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;

  v4 = v3;
  v69 = a2;
  v73 = a3;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  MEMORY[0x24BDAC7A8](v6);
  v68 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CalendarEvent?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = type metadata accessor for CalendarEvent(0);
  v72 = *(_QWORD *)(v74 - 8);
  MEMORY[0x24BDAC7A8](v74);
  v70 = (unsigned __int8 *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUStructuredEntity()), sel_init);
  v17 = *a1;
  v16 = a1[1];
  v18 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v19 = *(void (**)(uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & *v15) + 0xB0);
  swift_bridgeObjectRetain();
  v19(v17, v16);
  v21 = a1[2];
  v20 = a1[3];
  v22 = *(void (**)(uint64_t, uint64_t))((*v18 & *v15) + 0xC8);
  swift_bridgeObjectRetain();
  v22(v21, v20);
  v24 = a1[6];
  v23 = a1[7];
  v25 = *(void (**)(uint64_t, uint64_t))((*v18 & *v15) + 0xF8);
  swift_bridgeObjectRetain();
  v25(v24, v23);
  v27 = a1[10];
  v26 = a1[11];
  v28 = *(void (**)(uint64_t, uint64_t))((*v18 & *v15) + 0x110);
  swift_bridgeObjectRetain();
  v28(v27, v26);
  v29 = (int *)type metadata accessor for DUStructuredExtractionResult(0);
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)a1 + v29[10], (uint64_t)v14, &demangling cache variable for type metadata for URL?);
  v30 = type metadata accessor for URL();
  v31 = *(_QWORD *)(v30 - 8);
  v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48))(v14, 1, v30);
  v71 = v4;
  if (v32 == 1)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v14, &demangling cache variable for type metadata for URL?);
    v33 = 0;
    v34 = 0;
  }
  else
  {
    v33 = URL.absoluteString.getter();
    v34 = v35;
    (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v30);
  }
  v36 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v37 = v74;
  (*(void (**)(uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & *v15) + 0x128))(v33, v34);
  v38 = *(void (**)(uint64_t))((*v36 & *v15) + 0x140);
  v39 = swift_bridgeObjectRetain();
  v38(v39);
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)a1 + v29[12], (uint64_t)v10, &demangling cache variable for type metadata for CalendarEvent?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48))(v10, 1, v37) == 1)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v10, &demangling cache variable for type metadata for CalendarEvent?);
  }
  else
  {
    v40 = (uint64_t)v10;
    v41 = v70;
    outlined init with take of CalendarEvent(v40, (uint64_t)v70);
    v42 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUCalendarEvent()), sel_init);
    (*(void (**)(_QWORD))((*v36 & *v42) + 0x80))(*v41);
    v43 = &v41[*(int *)(v37 + 20)];
    v44 = type metadata accessor for DateComponents();
    v45 = *(_QWORD *)(v44 - 8);
    v46 = (uint64_t)v68;
    (*(void (**)(char *, unsigned __int8 *, uint64_t))(v45 + 16))(v68, v43, v44);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v45 + 56))(v46, 0, 1, v44);
    (*(void (**)(uint64_t))((*v36 & *v42) + 0x98))(v46);
    v47 = (uint64_t)v70;
    outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)&v70[*(int *)(v74 + 24)], v46, &demangling cache variable for type metadata for DateComponents?);
    (*(void (**)(uint64_t))((*v36 & *v42) + 0xC8))(v46);
    v48 = *(void (**)(_QWORD *))((*v36 & *v15) + 0x158);
    v49 = v42;
    v48(v42);

    outlined destroy of CalendarEvent(v47);
  }
  v50 = (uint64_t *)((char *)a1 + v29[13]);
  v52 = *v50;
  v51 = v50[1];
  v53 = *(void (**)(uint64_t, uint64_t))((*v36 & *v15) + 0x170);
  swift_bridgeObjectRetain();
  v53(v52, v51);
  v54 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUDisplayInfo()), sel_init);
  (*(void (**)(double, double, double, double))((*v36 & *v54) + 0x70))(*(double *)((char *)a1 + v29[14]), *(double *)((char *)a1 + v29[14] + 8), *(double *)((char *)a1 + v29[14] + 16), *(double *)((char *)a1 + v29[14] + 24));
  (*(void (**)(double, double))((*v36 & *v54) + 0x88))(*(double *)((char *)a1 + v29[15]), *(double *)((char *)a1 + v29[15] + 8));
  (*(void (**)(_QWORD))((*v36 & *v54) + 0xA0))(*((unsigned __int8 *)a1 + v29[16]));
  v55 = *(void (**)(_QWORD *))((*v36 & *v15) + 0x188);
  v56 = v54;
  v55(v54);
  v57 = a1[5];
  if (v57)
  {
    v74 = a1[4];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v58 = swift_allocObject();
    *(_OWORD *)(v58 + 16) = xmmword_2284C0D00;
    v59 = v69;
    v61 = *v69;
    v60 = v69[1];
    v62 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v58 + 56) = MEMORY[0x24BEE0D00];
    v63 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v58 + 32) = v61;
    *(_QWORD *)(v58 + 40) = v60;
    *(_QWORD *)(v58 + 96) = v62;
    *(_QWORD *)(v58 + 104) = v63;
    v64 = v74;
    *(_QWORD *)(v58 + 64) = v63;
    *(_QWORD *)(v58 + 72) = v64;
    *(_QWORD *)(v58 + 80) = v57;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v65 = String.init(format:_:)();
    v67 = v66;

    *v59 = v65;
    v59[1] = v67;
    swift_bridgeObjectRelease();
  }
  else
  {

  }
  *v73 = v15;
}

uint64_t protocol witness for TopLevelSpecificationProtocol.attachResultsToResponse(response:processingRequest:) in conformance DUStructuredExtractionSpecification(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = partial apply for closure #2 in DUFoundInEventMultilingualBERTImplementation.loadModelHeadBundle();
  v5[10] = a1;
  v8 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:)
                                       + async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:));
  v6 = (_QWORD *)swift_task_alloc();
  v5[11] = v6;
  *v6 = v5;
  v6[1] = DUStructuredExtractionSpecification.attachResultsToResponse(response:processingRequest:);
  return v8(a2);
}

char *specialized DUStructuredExtractionSpecification.associatedRequestTypes.getter()
{
  objc_class *v0;
  char *v1;
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  objc_super v17;
  objc_super v18;
  objc_super v19;
  objc_super v20;

  v0 = (objc_class *)type metadata accessor for DURequestContentType();
  v1 = (char *)objc_allocWithZone(v0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = 4;
  v20.receiver = v1;
  v20.super_class = v0;
  v2 = (char *)objc_msgSendSuper2(&v20, sel_init);
  v3 = (char *)objc_allocWithZone(v0);
  *(_QWORD *)&v3[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = 8;
  v19.receiver = v3;
  v19.super_class = v0;
  v4 = (char *)objc_msgSendSuper2(&v19, sel_init);
  v5 = &v2[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue];
  swift_beginAccess();
  v6 = *(_QWORD *)v5;
  v7 = &v4[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue];
  swift_beginAccess();
  *(_QWORD *)v5 = *(_QWORD *)v7 | v6;

  v8 = (char *)objc_allocWithZone(v0);
  *(_QWORD *)&v8[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = 16;
  v18.receiver = v8;
  v18.super_class = v0;
  v9 = (char *)objc_msgSendSuper2(&v18, sel_init);
  v10 = *(_QWORD *)v5;
  v11 = &v9[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue];
  swift_beginAccess();
  *(_QWORD *)v5 = *(_QWORD *)v11 | v10;

  v12 = (char *)objc_allocWithZone(v0);
  *(_QWORD *)&v12[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = 32;
  v17.receiver = v12;
  v17.super_class = v0;
  v13 = (char *)objc_msgSendSuper2(&v17, sel_init);
  v14 = *(_QWORD *)v5;
  v15 = &v13[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue];
  swift_beginAccess();
  *(_QWORD *)v5 = *(_QWORD *)v15 | v14;

  return v2;
}

uint64_t type metadata accessor for DUStructuredExtractionSpecification()
{
  return objc_opt_self();
}

uint64_t outlined init with take of CalendarEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CalendarEvent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of CalendarEvent(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CalendarEvent(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id DUResponse.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void *DUResponse.topics.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding10DUResponse_topics);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void DUResponse.topics.setter(void *a1)
{
  DUResponse.topics.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding10DUResponse_topics);
}

uint64_t (*DUResponse.topics.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

void *DUResponse.structuredEntities.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding10DUResponse_structuredEntities);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void DUResponse.structuredEntities.setter(void *a1)
{
  DUResponse.topics.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding10DUResponse_structuredEntities);
}

uint64_t (*DUResponse.structuredEntities.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

void *DUResponse.languageTags.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding10DUResponse_languageTags);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void DUResponse.languageTags.setter(void *a1)
{
  DUResponse.topics.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding10DUResponse_languageTags);
}

uint64_t (*DUResponse.languageTags.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

void *DUResponse.userInterfaceUnderstandingResults.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding10DUResponse_userInterfaceUnderstandingResults);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void DUResponse.userInterfaceUnderstandingResults.setter(void *a1)
{
  DUResponse.topics.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding10DUResponse_userInterfaceUnderstandingResults);
}

uint64_t (*DUResponse.userInterfaceUnderstandingResults.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryConfidence.modify;
}

void *DUResponse.documentCategories.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding10DUResponse_documentCategories);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void DUResponse.documentCategories.setter(void *a1)
{
  DUResponse.topics.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding10DUResponse_documentCategories);
}

uint64_t (*DUResponse.documentCategories.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

void *DUResponse.foundInEventResult.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding10DUResponse_foundInEventResult);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void DUResponse.foundInEventResult.setter(void *a1)
{
  DUResponse.topics.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding10DUResponse_foundInEventResult);
}

uint64_t (*DUResponse.foundInEventResult.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUResponse.poem.getter()
{
  return PoemMessage.sender.getter();
}

uint64_t DUResponse.poem.setter(uint64_t a1)
{
  return PoemMessage.sender.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding10DUResponse_poem);
}

uint64_t (*DUResponse.poem.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUResponse.posTags.getter()
{
  return PoemMessage.sender.getter();
}

uint64_t DUResponse.posTags.setter(uint64_t a1)
{
  return PoemMessage.sender.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding10DUResponse_posTags);
}

uint64_t (*DUResponse.posTags.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

id @objc DUResponse.topics.getter(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  id *v3;

  v3 = (id *)(a1 + *a3);
  swift_beginAccess();
  return *v3;
}

void *DUResponse.responseDebugInfo.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding10DUResponse_responseDebugInfo);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void @objc DUResponse.topics.setter(uint64_t a1, uint64_t a2, void *a3, _QWORD *a4)
{
  void **v5;
  void *v6;
  id v7;

  v5 = (void **)(a1 + *a4);
  swift_beginAccess();
  v6 = *v5;
  *v5 = a3;
  v7 = a3;

}

void DUResponse.responseDebugInfo.setter(void *a1)
{
  DUResponse.topics.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding10DUResponse_responseDebugInfo);
}

void DUResponse.topics.setter(void *a1, _QWORD *a2)
{
  uint64_t v2;
  void **v4;
  void *v5;

  v4 = (void **)(v2 + *a2);
  swift_beginAccess();
  v5 = *v4;
  *v4 = a1;

}

uint64_t (*DUResponse.responseDebugInfo.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

char *specialized DUResponse.__allocating_init<A>(proto:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(char *, uint64_t, uint64_t);
  char *v51;
  uint64_t v52;
  char *v53;
  void **v54;
  void *v55;
  uint64_t v56;
  uint64_t (*v57)(char *, uint64_t, uint64_t);
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  void **v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t (*v71)(uint64_t, uint64_t, uint64_t);
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  id v78;
  uint64_t *v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  void **v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t (*v91)(uint64_t, uint64_t, uint64_t);
  int v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  void **v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t (*v105)(uint64_t, uint64_t, uint64_t);
  int v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  void **v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t (*v115)(uint64_t, uint64_t, uint64_t);
  int v116;
  uint64_t v117;
  char *v118;
  char *v119;
  void **v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t (*v124)(uint64_t, uint64_t, uint64_t);
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  void **v130;
  void *v131;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  int *v165;

  v162 = a1;
  v159 = type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0);
  v158 = *(_QWORD *)(v159 - 8);
  MEMORY[0x24BDAC7A8](v159);
  v145 = (uint64_t)&v133 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v144 = (uint64_t)&v133 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v157 = (uint64_t)&v133 - v5;
  v156 = type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse();
  v155 = *(_QWORD *)(v156 - 8);
  MEMORY[0x24BDAC7A8](v156);
  v143 = (char *)&v133 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v142 = (uint64_t)&v133 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v154 = (uint64_t)&v133 - v10;
  v161 = type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse();
  v153 = *(_QWORD *)(v161 - 8);
  MEMORY[0x24BDAC7A8](v161);
  v141 = (char *)&v133 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v140 = (uint64_t)&v133 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v152 = (uint64_t)&v133 - v15;
  v151 = type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse();
  v150 = *(_QWORD *)(v151 - 8);
  MEMORY[0x24BDAC7A8](v151);
  v139 = (char *)&v133 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v138 = (uint64_t)&v133 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v149 = (uint64_t)&v133 - v20;
  v160 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v163 = *(_QWORD *)(v160 - 8);
  v21 = MEMORY[0x24BDAC7A8](v160);
  v137 = (char *)&v133 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v136 = (uint64_t)&v133 - v23;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  v25 = MEMORY[0x24BDAC7A8](v24);
  v135 = (uint64_t)&v133 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v25);
  v148 = (uint64_t)&v133 - v27;
  v147 = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse();
  v146 = *(_QWORD *)(v147 - 8);
  MEMORY[0x24BDAC7A8](v147);
  v134 = (char *)&v133 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?);
  v30 = MEMORY[0x24BDAC7A8](v29);
  v133 = (uint64_t)&v133 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v30);
  v33 = (char *)&v133 - v32;
  v34 = type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse();
  v35 = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34);
  v37 = (char *)&v133 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?);
  v39 = MEMORY[0x24BDAC7A8](v38);
  v41 = (char *)&v133 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v39);
  v43 = (char *)&v133 - v42;
  v44 = type metadata accessor for DocumentUnderstanding_ClientInterface_Response();
  MEMORY[0x24BDAC7A8](v44);
  v46 = (char *)&v133 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUResponse()), sel_init);
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v162, (uint64_t)v46, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_Response);
  v165 = (int *)v44;
  v48 = *(int *)(v44 + 20);
  v164 = v46;
  v49 = (uint64_t)&v46[v48];
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)&v46[v48], (uint64_t)v43, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?);
  v50 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48);
  LODWORD(v35) = v50(v43, 1, v34);
  v51 = (char *)v47;
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v43, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?);
  if ((_DWORD)v35 != 1)
  {
    outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v49, (uint64_t)v41, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?);
    if (v50(v41, 1, v34) == 1)
    {
      v52 = MEMORY[0x24BEE4AF8];
      *(_QWORD *)v37 = MEMORY[0x24BEE4AF8];
      *((_QWORD *)v37 + 1) = v52;
      UnknownStorage.init()();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v163 + 56))(&v37[*(int *)(v34 + 28)], 1, 1, v160);
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v41, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?);
    }
    else
    {
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v41, (uint64_t)v37, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse);
    }
    v53 = specialized DUTopicDetectionResponse.__allocating_init<A>(proto:)((uint64_t)v37);
    v54 = (void **)&v51[OBJC_IVAR____TtC21DocumentUnderstanding10DUResponse_topics];
    swift_beginAccess();
    v55 = *v54;
    *v54 = v53;

  }
  v56 = (uint64_t)&v164[v165[6]];
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v56, (uint64_t)v33, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?);
  v57 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v146 + 48);
  v58 = v147;
  v59 = v57(v33, 1, v147);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v33, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?);
  v60 = v156;
  v61 = v160;
  v62 = v161;
  v63 = v151;
  if (v59 != 1)
  {
    v64 = v133;
    outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v56, v133, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?);
    if (v57((char *)v64, 1, v58) == 1)
    {
      v65 = v134;
      *(_QWORD *)v134 = MEMORY[0x24BEE4AF8];
      UnknownStorage.init()();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v163 + 56))(&v65[*(int *)(v58 + 24)], 1, 1, v61);
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v64, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?);
    }
    else
    {
      v65 = v134;
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v64, (uint64_t)v134, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse);
    }
    v66 = specialized DUStructuredEntityResponse.__allocating_init<A>(proto:)((uint64_t)v65);
    v67 = (void **)&v51[OBJC_IVAR____TtC21DocumentUnderstanding10DUResponse_structuredEntities];
    swift_beginAccess();
    v68 = *v67;
    *v67 = v66;

  }
  v69 = (uint64_t)&v164[v165[11]];
  v70 = v148;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v69, v148, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  v71 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v163 + 48);
  v72 = v71(v70, 1, v61);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v70, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  if (v72 != 1)
  {
    v73 = v69;
    v74 = v135;
    outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v73, v135, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    if (v71(v74, 1, v61) == 1)
    {
      v75 = v136;
      UnknownStorage.init()();
      v76 = (_QWORD *)(v75 + *(int *)(v61 + 20));
      *v76 = 0;
      v76[1] = 0;
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v74, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    }
    else
    {
      v75 = v136;
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v74, v136, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
    }
    v77 = (uint64_t)v137;
    v78 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUDebugInfo()), sel_init);
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v75, v77, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
    v79 = (uint64_t *)(v77 + *(int *)(v61 + 20));
    if (v79[1])
    {
      v80 = *v79;
      v81 = v79[1];
    }
    else
    {
      v80 = 0;
      v81 = 0xE000000000000000;
    }
    v82 = (char *)v78;
    swift_bridgeObjectRetain();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v77, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
    v83 = &v82[OBJC_IVAR____TtC21DocumentUnderstanding11DUDebugInfo_debugString];
    swift_beginAccess();
    *(_QWORD *)v83 = v80;
    *((_QWORD *)v83 + 1) = v81;

    swift_bridgeObjectRelease();
    v84 = (void **)&v51[OBJC_IVAR____TtC21DocumentUnderstanding10DUResponse_responseDebugInfo];
    swift_beginAccess();
    v85 = *v84;
    *v84 = v82;

    v62 = v161;
  }
  v86 = (uint64_t)&v164[v165[7]];
  v87 = v61;
  v88 = v51;
  v89 = v60;
  v90 = v149;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v86, v149, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?);
  v91 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v150 + 48);
  v92 = v91(v90, 1, v63);
  v93 = v90;
  v94 = v89;
  v95 = v88;
  v96 = v87;
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v93, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?);
  if (v92 != 1)
  {
    v97 = v138;
    outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v86, v138, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?);
    if (v91(v97, 1, v63) == 1)
    {
      v98 = v139;
      *(_QWORD *)v139 = MEMORY[0x24BEE4AF8];
      UnknownStorage.init()();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v163 + 56))(&v98[*(int *)(v63 + 24)], 1, 1, v87);
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v97, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?);
    }
    else
    {
      v98 = v139;
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v97, (uint64_t)v139, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse);
    }
    v99 = specialized DULanguageTaggingResponse.__allocating_init<A>(proto:)((uint64_t)v98);
    v100 = (void **)&v95[OBJC_IVAR____TtC21DocumentUnderstanding10DUResponse_languageTags];
    swift_beginAccess();
    v101 = *v100;
    *v100 = v99;

  }
  v102 = (uint64_t)v164;
  v103 = (uint64_t)&v164[v165[8]];
  v104 = v152;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v103, v152, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?);
  v105 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v153 + 48);
  v106 = v105(v104, 1, v62);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v104, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?);
  v107 = v159;
  if (v106 != 1)
  {
    v108 = v140;
    outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v103, v140, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?);
    if (v105(v108, 1, v62) == 1)
    {
      v109 = v141;
      *(_QWORD *)v141 = MEMORY[0x24BEE4AF8];
      UnknownStorage.init()();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v163 + 56))(&v109[*(int *)(v62 + 24)], 1, 1, v96);
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v108, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?);
    }
    else
    {
      v109 = v141;
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v108, (uint64_t)v141, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse);
    }
    v110 = specialized DUUserInterfaceUnderstandingResponse.__allocating_init<A>(proto:)((uint64_t)v109);
    v111 = (void **)&v95[OBJC_IVAR____TtC21DocumentUnderstanding10DUResponse_userInterfaceUnderstandingResults];
    swift_beginAccess();
    v112 = *v111;
    *v111 = v110;

  }
  v113 = v102 + v165[9];
  v114 = v154;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v113, v154, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?);
  v115 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v155 + 48);
  v116 = v115(v114, 1, v94);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v114, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?);
  if (v116 != 1)
  {
    v117 = v142;
    outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v113, v142, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?);
    if (v115(v117, 1, v94) == 1)
    {
      v118 = v143;
      *(_QWORD *)v143 = MEMORY[0x24BEE4AF8];
      UnknownStorage.init()();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v163 + 56))(&v118[*(int *)(v94 + 24)], 1, 1, v96);
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v117, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?);
    }
    else
    {
      v118 = v143;
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v117, (uint64_t)v143, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse);
    }
    v119 = specialized DUCategoryClassificationResponse.__allocating_init<A>(proto:)((uint64_t)v118);
    v120 = (void **)&v95[OBJC_IVAR____TtC21DocumentUnderstanding10DUResponse_documentCategories];
    swift_beginAccess();
    v121 = *v120;
    *v120 = v119;

  }
  v122 = v102 + v165[10];
  v123 = v157;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v122, v157, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
  v124 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v158 + 48);
  v125 = v124(v123, 1, v107);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v123, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
  if (v125 == 1)
  {

    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v162, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_Response);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v102, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_Response);
  }
  else
  {
    v126 = v144;
    outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v122, v144, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
    if (v124(v126, 1, v107) == 1)
    {
      v127 = v145;
      UnknownStorage.init()();
      v128 = *(int *)(v107 + 20);
      if (one-time initialization token for defaultInstance != -1)
        swift_once();
      *(_QWORD *)(v127 + v128) = static DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.defaultInstance;
      swift_retain();
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v126, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
    }
    else
    {
      v127 = v145;
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v126, v145, type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult);
    }
    type metadata accessor for DUFoundInEventResult();
    v129 = specialized DUFoundInEventResult.__allocating_init<A>(proto:)(v127);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v162, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_Response);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v102, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_Response);
    v130 = (void **)&v95[OBJC_IVAR____TtC21DocumentUnderstanding10DUResponse_foundInEventResult];
    swift_beginAccess();
    v131 = *v130;
    *v130 = v129;

  }
  return v95;
}

