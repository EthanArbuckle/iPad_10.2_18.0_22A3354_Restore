uint64_t DUEncodingModelOutput.init<A>(proto:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  void (*v29)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t (*v40)(uint64_t);
  uint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  unint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t (*v58)(uint64_t);
  uint64_t v59;
  unint64_t *v60;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v62;
  char v63;
  unint64_t v64;
  uint64_t v65;
  _BOOL8 v66;
  uint64_t v67;
  char v68;
  unint64_t v69;
  char v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  uint64_t *v84;
  _QWORD *v85;
  uint64_t v86;
  objc_class *v87;
  uint64_t result;
  uint64_t v89;
  int64_t v90;
  _QWORD *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  int64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t *v103;
  unint64_t *v104;
  _QWORD *v105;
  objc_super v106;
  uint64_t v107[3];

  v96 = a1;
  v4 = type metadata accessor for DocumentUnderstanding_HiddenLayerOutput(0);
  v100 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v103 = (uint64_t *)((char *)&v89 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Int64, value: DocumentUnderstanding_HiddenLayerOutput)?);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (uint64_t *)((char *)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v7);
  v101 = (uint64_t *)((char *)&v89 - v10);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_EncodingModelOutput?);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v102 = (uint64_t)&v89 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v89 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DocumentUnderstanding_EncodingModelOutput(0);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (uint64_t *)((char *)&v89 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = &v2[OBJC_IVAR____TtC21DocumentUnderstanding21DUEncodingModelOutput_sequenceSize];
  *(_QWORD *)v21 = 0;
  v21[8] = 1;
  v22 = (unint64_t *)&v2[OBJC_IVAR____TtC21DocumentUnderstanding21DUEncodingModelOutput_pooledHiddenLayerValues];
  v23 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v104 = v22;
  *v22 = v23;
  v24 = &v2[OBJC_IVAR____TtC21DocumentUnderstanding21DUEncodingModelOutput_hiddenLayerValues];
  *(_QWORD *)&v2[OBJC_IVAR____TtC21DocumentUnderstanding21DUEncodingModelOutput_hiddenLayerValues] = 0;
  v94 = v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v96, a2);
  v25 = v2;
  v26 = a2;
  v27 = v102;
  v95 = v25;
  v28 = swift_dynamicCast();
  v29 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56);
  if ((v28 & 1) != 0)
  {
    v92 = v24;
    v93 = v26;
    v29(v27, 0, 1, v17);
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v27, (uint64_t)v20, type metadata accessor for DocumentUnderstanding_EncodingModelOutput);
    v30 = v20[1];
    v31 = v95;
    v32 = &v95[OBJC_IVAR____TtC21DocumentUnderstanding21DUEncodingModelOutput_modelName];
    *(_QWORD *)v32 = *v20;
    *((_QWORD *)v32 + 1) = v30;
    *(_QWORD *)&v31[OBJC_IVAR____TtC21DocumentUnderstanding21DUEncodingModelOutput_hiddenLayerSize] = v20[2];
    *(_QWORD *)&v31[OBJC_IVAR____TtC21DocumentUnderstanding21DUEncodingModelOutput_nHiddenLayers] = v20[3];
    v33 = v20[4];
    swift_beginAccess();
    *(_QWORD *)v21 = v33;
    v21[8] = 0;
    v91 = v20;
    v34 = v20[5];
    v35 = *(_QWORD *)(v34 + 64);
    v97 = v34 + 64;
    v36 = 1 << *(_BYTE *)(v34 + 32);
    v37 = -1;
    if (v36 < 64)
      v37 = ~(-1 << v36);
    v38 = v37 & v35;
    v98 = (unint64_t)(v36 + 63) >> 6;
    v90 = v98 - 1;
    swift_bridgeObjectRetain();
    v99 = v34;
    swift_bridgeObjectRetain();
    v102 = 0;
    v39 = &demangling cache variable for type metadata for (key: Int64, value: DocumentUnderstanding_HiddenLayerOutput);
    v40 = type metadata accessor for DocumentUnderstanding_HiddenLayerOutput;
    while (1)
    {
      v42 = v101;
      if (v38)
        break;
      v48 = v102 + 1;
      if (__OFADD__(v102, 1))
        goto LABEL_46;
      if (v48 < v98)
      {
        v49 = *(_QWORD *)(v97 + 8 * v48);
        if (v49)
          goto LABEL_13;
        v50 = v102 + 2;
        ++v102;
        if (v48 + 1 < v98)
        {
          v49 = *(_QWORD *)(v97 + 8 * v50);
          if (v49)
            goto LABEL_16;
          v102 = v48 + 1;
          if (v48 + 2 < v98)
          {
            v49 = *(_QWORD *)(v97 + 8 * (v48 + 2));
            if (v49)
            {
              v48 += 2;
              goto LABEL_13;
            }
            v50 = v48 + 3;
            v102 = v48 + 2;
            if (v48 + 3 < v98)
            {
              v49 = *(_QWORD *)(v97 + 8 * v50);
              if (!v49)
              {
                while (1)
                {
                  v48 = v50 + 1;
                  if (__OFADD__(v50, 1))
                    goto LABEL_47;
                  if (v48 >= v98)
                  {
                    v102 = v90;
                    goto LABEL_27;
                  }
                  v49 = *(_QWORD *)(v97 + 8 * v48);
                  ++v50;
                  if (v49)
                    goto LABEL_13;
                }
              }
LABEL_16:
              v48 = v50;
LABEL_13:
              v38 = (v49 - 1) & v49;
              v44 = __clz(__rbit64(v49)) + (v48 << 6);
              v102 = v48;
LABEL_9:
              v45 = *(_QWORD *)(v99 + 56);
              *v9 = *(_QWORD *)(*(_QWORD *)(v99 + 48) + 8 * v44);
              v46 = v45 + *(_QWORD *)(v100 + 72) * v44;
              v47 = __swift_instantiateConcreteTypeFromMangledName(v39);
              outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v46, (uint64_t)v9 + *(int *)(v47 + 48), v40);
              (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v9, 0, 1, v47);
              goto LABEL_28;
            }
          }
        }
      }
LABEL_27:
      v51 = __swift_instantiateConcreteTypeFromMangledName(v39);
      (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v9, 1, 1, v51);
      v38 = 0;
LABEL_28:
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v9, (uint64_t)v42, &demangling cache variable for type metadata for (key: Int64, value: DocumentUnderstanding_HiddenLayerOutput)?);
      v52 = __swift_instantiateConcreteTypeFromMangledName(v39);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 48))(v42, 1, v52) == 1)
      {
        swift_release();
        v77 = (uint64_t)v91;
        v78 = swift_bridgeObjectRetain();
        v79 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDys5Int64V21DocumentUnderstanding0eF18_HiddenLayerOutputVG_Si_SaySfGts5NeverOTg504_ss5d3V21e19Understanding0bC18_ghi40VSiSaySfGIgyndo_AB3key_AE5valuetSi_AFts5j105OIegnrzr_TR04_s21b30Understanding21DUEncodingModelf64C5protoACSgx_tc21InternalSwiftProtobuf7MessageRzlufcu1_pQ39Gts5a10V_AA0ab12_dE9E0VtXEfU_Tf3nnnpf_nTf1cn_n(v78);
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(v79 + 16))
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, [Float]>);
          v80 = static _DictionaryStorage.allocate(capacity:)();
        }
        else
        {
          v80 = MEMORY[0x24BEE4B00];
        }
        v82 = v95;
        v81 = v96;
        v83 = v94;
        v84 = (uint64_t *)v92;
        v107[0] = v80;
        v85 = (_QWORD *)swift_bridgeObjectRetain();
        specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v85, 1, v107);
        swift_bridgeObjectRelease();
        v86 = v107[0];
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v77, type metadata accessor for DocumentUnderstanding_EncodingModelOutput);
        swift_beginAccess();
        *v84 = v86;

        swift_bridgeObjectRelease();
        v87 = (objc_class *)type metadata accessor for DUEncodingModelOutput();
        v106.receiver = v82;
        v106.super_class = v87;
        v76 = objc_msgSendSuper2(&v106, sel_init);
        (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v81, v93);
        return (uint64_t)v76;
      }
      v53 = v9;
      v54 = v39;
      v55 = *v42;
      v56 = (uint64_t)v42 + *(int *)(v52 + 48);
      v57 = v103;
      v58 = v40;
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v56, (uint64_t)v103, v40);
      v59 = *v57;
      v60 = v104;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v105 = (_QWORD *)*v60;
      v62 = v105;
      *v60 = 0x8000000000000000;
      v64 = specialized __RawDictionaryStorage.find<A>(_:)(v55);
      v65 = v62[2];
      v66 = (v63 & 1) == 0;
      v67 = v65 + v66;
      if (__OFADD__(v65, v66))
      {
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        result = swift_unexpectedError();
        __break(1u);
        return result;
      }
      v68 = v63;
      if (v62[3] >= v67)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          specialized _NativeDictionary.copy()();
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v67, isUniquelyReferenced_nonNull_native);
        v69 = specialized __RawDictionaryStorage.find<A>(_:)(v55);
        if ((v68 & 1) != (v70 & 1))
          goto LABEL_48;
        v64 = v69;
      }
      v71 = v105;
      v72 = 8 * v64;
      if ((v68 & 1) != 0)
      {
        v41 = v105[7];
        swift_bridgeObjectRelease();
        *(_QWORD *)(v41 + v72) = v59;
      }
      else
      {
        v105[(v64 >> 6) + 8] |= 1 << v64;
        *(_QWORD *)(v71[6] + 8 * v64) = v55;
        *(_QWORD *)(v71[7] + 8 * v64) = v59;
        v73 = v71[2];
        v74 = __OFADD__(v73, 1);
        v75 = v73 + 1;
        if (v74)
          goto LABEL_45;
        v71[2] = v75;
      }
      *v104 = (unint64_t)v71;
      swift_bridgeObjectRelease();
      swift_endAccess();
      v40 = v58;
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v103, v58);
      v39 = v54;
      v9 = v53;
    }
    v43 = __clz(__rbit64(v38));
    v38 &= v38 - 1;
    v44 = v43 | (v102 << 6);
    goto LABEL_9;
  }
  v29(v27, 1, 1, v17);
  (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v96, v26);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v27, &demangling cache variable for type metadata for DocumentUnderstanding_EncodingModelOutput?);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  type metadata accessor for DUEncodingModelOutput();
  swift_deallocPartialClassInstance();
  return 0;
}

uint64_t DUEncodingModelOutput.protoRepresentation.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t (*v20)(uint64_t);
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t (*i)(uint64_t);
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t);
  _QWORD *v41;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  _BOOL8 v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t result;
  uint64_t v59;
  int64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  unint64_t v67;
  int64_t v68;
  unint64_t v69;
  int64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  char v75;
  _QWORD *v76;
  char v77;
  unint64_t v78;
  uint64_t v79;
  _BOOL8 v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  char v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  int64_t v90;
  int64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;

  v3 = type metadata accessor for DocumentUnderstanding_HiddenLayerOutput(0);
  v94 = *(_QWORD *)(v3 - 8);
  v95 = v3;
  v4 = MEMORY[0x24BDAC7A8](v3);
  v93 = (uint64_t)&v88 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v92 = (_QWORD **)((char *)&v88 - v7);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v88 - v9;
  MEMORY[0x24BDAC7A8](v8);
  v12 = (_QWORD **)((char *)&v88 - v11);
  a1[4] = 0;
  v13 = MEMORY[0x24BEE4AF8];
  a1[5] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  a1[6] = specialized Dictionary.init(dictionaryLiteral:)(v13);
  type metadata accessor for DocumentUnderstanding_EncodingModelOutput(0);
  v14 = UnknownStorage.init()();
  v15 = (_QWORD *)MEMORY[0x24BEE4EA0];
  *a1 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0x80))(v14);
  a1[1] = v16;
  a1[2] = (*(uint64_t (**)(void))((*v15 & *v1) + 0xB0))();
  v17 = (*(uint64_t (**)(void))((*v15 & *v1) + 0x98))();
  v96 = a1;
  a1[3] = v17;
  v18 = (*(uint64_t (**)(void))((*v15 & *v1) + 0xC8))();
  if ((v19 & 1) == 0)
    v96[4] = v18;
  v20 = *(uint64_t (**)(uint64_t))((*v15 & *v1) + 0xE0);
  v88 = v1;
  v21 = v20(v18);
  v22 = 0;
  v23 = *(_QWORD *)(v21 + 64);
  v89 = v21 + 64;
  v24 = 1 << *(_BYTE *)(v21 + 32);
  v25 = -1;
  if (v24 < 64)
    v25 = ~(-1 << v24);
  v26 = v25 & v23;
  v90 = (unint64_t)(v24 + 63) >> 6;
  v91 = v21;
  for (i = type metadata accessor for DocumentUnderstanding_HiddenLayerOutput;
        ;
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v37, i))
  {
    if (v26)
    {
      v29 = __clz(__rbit64(v26));
      v26 &= v26 - 1;
      v30 = v29 | (v22 << 6);
      goto LABEL_24;
    }
    v31 = v22 + 1;
    if (__OFADD__(v22, 1))
      goto LABEL_71;
    if (v31 >= v90)
      break;
    v32 = *(_QWORD *)(v89 + 8 * v31);
    ++v22;
    if (!v32)
    {
      v22 = v31 + 1;
      if (v31 + 1 >= v90)
        break;
      v32 = *(_QWORD *)(v89 + 8 * v22);
      if (!v32)
      {
        v22 = v31 + 2;
        if (v31 + 2 >= v90)
          break;
        v32 = *(_QWORD *)(v89 + 8 * v22);
        if (!v32)
        {
          v33 = v31 + 3;
          if (v33 >= v90)
            break;
          v32 = *(_QWORD *)(v89 + 8 * v33);
          if (!v32)
          {
            while (1)
            {
              v22 = v33 + 1;
              if (__OFADD__(v33, 1))
                goto LABEL_74;
              if (v22 >= v90)
                goto LABEL_33;
              v32 = *(_QWORD *)(v89 + 8 * v22);
              ++v33;
              if (v32)
                goto LABEL_23;
            }
          }
          v22 = v33;
        }
      }
    }
LABEL_23:
    v26 = (v32 - 1) & v32;
    v30 = __clz(__rbit64(v32)) + (v22 << 6);
LABEL_24:
    v34 = 8 * v30;
    v35 = *(_QWORD *)(*(_QWORD *)(v91 + 48) + v34);
    v36 = *(_QWORD *)(*(_QWORD *)(v91 + 56) + v34);
    swift_bridgeObjectRetain();
    UnknownStorage.init()();
    *v12 = v36;
    v37 = (uint64_t)v12;
    v38 = (uint64_t)v12;
    v39 = (uint64_t)v10;
    v40 = i;
    outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v38, (uint64_t)v10, i);
    v41 = v96;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v97 = (_QWORD *)v41[5];
    v43 = v97;
    v41[5] = 0x8000000000000000;
    v45 = specialized __RawDictionaryStorage.find<A>(_:)(v35);
    v46 = v43[2];
    v47 = (v44 & 1) == 0;
    v48 = v46 + v47;
    if (__OFADD__(v46, v47))
    {
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
      goto LABEL_75;
    }
    v49 = v44;
    if (v43[3] >= v48)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        specialized _NativeDictionary.copy()();
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v48, isUniquelyReferenced_nonNull_native);
      v50 = specialized __RawDictionaryStorage.find<A>(_:)(v35);
      if ((v49 & 1) != (v51 & 1))
        goto LABEL_76;
      v45 = v50;
    }
    i = v40;
    v52 = v97;
    if ((v49 & 1) != 0)
    {
      v28 = v97[7] + *(_QWORD *)(v94 + 72) * v45;
      v10 = (char *)v39;
      outlined assign with take of DocumentUnderstanding_HiddenLayerOutput(v39, v28);
    }
    else
    {
      v97[(v45 >> 6) + 8] |= 1 << v45;
      *(_QWORD *)(v52[6] + 8 * v45) = v35;
      v53 = v52[7] + *(_QWORD *)(v94 + 72) * v45;
      v10 = (char *)v39;
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v39, v53, v40);
      v54 = v52[2];
      v55 = __OFADD__(v54, 1);
      v56 = v54 + 1;
      if (v55)
        goto LABEL_70;
      v52[2] = v56;
    }
    v96[5] = v52;
    swift_bridgeObjectRelease();
    v12 = (_QWORD *)v37;
  }
LABEL_33:
  v57 = swift_release();
  result = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v88) + 0xF8))(v57);
  if (!result)
    return result;
  v59 = result;
  v60 = 0;
  v61 = *(_QWORD *)(result + 64);
  v90 = result + 64;
  v62 = 1 << *(_BYTE *)(result + 32);
  v63 = -1;
  if (v62 < 64)
    v63 = ~(-1 << v62);
  v64 = v63 & v61;
  v91 = (unint64_t)(v62 + 63) >> 6;
  v65 = v96;
  while (2)
  {
    if (v64)
    {
      v66 = __clz(__rbit64(v64));
      v64 &= v64 - 1;
      v67 = v66 | (v60 << 6);
      goto LABEL_55;
    }
    v68 = v60 + 1;
    if (__OFADD__(v60, 1))
      goto LABEL_73;
    if (v68 >= v91)
      return swift_release();
    v69 = *(_QWORD *)(v90 + 8 * v68);
    ++v60;
    if (v69)
      goto LABEL_54;
    v60 = v68 + 1;
    if (v68 + 1 >= v91)
      return swift_release();
    v69 = *(_QWORD *)(v90 + 8 * v60);
    if (v69)
      goto LABEL_54;
    v60 = v68 + 2;
    if (v68 + 2 >= v91)
      return swift_release();
    v69 = *(_QWORD *)(v90 + 8 * v60);
    if (v69)
    {
LABEL_54:
      v64 = (v69 - 1) & v69;
      v67 = __clz(__rbit64(v69)) + (v60 << 6);
LABEL_55:
      v71 = 8 * v67;
      v72 = *(_QWORD *)(*(_QWORD *)(v59 + 48) + v71);
      v73 = *(_QWORD *)(*(_QWORD *)(v59 + 56) + v71);
      v74 = v92;
      swift_bridgeObjectRetain();
      UnknownStorage.init()();
      *v74 = v73;
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v74, v93, type metadata accessor for DocumentUnderstanding_HiddenLayerOutput);
      v75 = swift_isUniquelyReferenced_nonNull_native();
      v97 = (_QWORD *)v65[6];
      v76 = v97;
      v65[6] = 0x8000000000000000;
      v78 = specialized __RawDictionaryStorage.find<A>(_:)(v72);
      v79 = v76[2];
      v80 = (v77 & 1) == 0;
      v81 = v79 + v80;
      if (__OFADD__(v79, v80))
        goto LABEL_69;
      v82 = v77;
      if (v76[3] < v81)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v81, v75);
        v83 = specialized __RawDictionaryStorage.find<A>(_:)(v72);
        if ((v82 & 1) != (v84 & 1))
          goto LABEL_76;
        v78 = v83;
        v85 = v97;
        if ((v82 & 1) == 0)
          goto LABEL_62;
LABEL_37:
        outlined assign with take of DocumentUnderstanding_HiddenLayerOutput(v93, v85[7] + *(_QWORD *)(v94 + 72) * v78);
LABEL_38:
        v96[6] = v85;
        swift_bridgeObjectRelease();
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v92, type metadata accessor for DocumentUnderstanding_HiddenLayerOutput);
        continue;
      }
      if ((v75 & 1) != 0)
      {
        v85 = v97;
        if ((v77 & 1) != 0)
          goto LABEL_37;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        v85 = v97;
        if ((v82 & 1) != 0)
          goto LABEL_37;
      }
LABEL_62:
      v85[(v78 >> 6) + 8] |= 1 << v78;
      *(_QWORD *)(v85[6] + 8 * v78) = v72;
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v93, v85[7] + *(_QWORD *)(v94 + 72) * v78, type metadata accessor for DocumentUnderstanding_HiddenLayerOutput);
      v86 = v85[2];
      v55 = __OFADD__(v86, 1);
      v87 = v86 + 1;
      if (v55)
        goto LABEL_72;
      v85[2] = v87;
      goto LABEL_38;
    }
    break;
  }
  v70 = v68 + 3;
  if (v70 >= v91)
    return swift_release();
  v69 = *(_QWORD *)(v90 + 8 * v70);
  if (v69)
  {
    v60 = v70;
    goto LABEL_54;
  }
  while (1)
  {
    v60 = v70 + 1;
    if (__OFADD__(v70, 1))
      break;
    if (v60 >= v91)
      return swift_release();
    v69 = *(_QWORD *)(v90 + 8 * v60);
    ++v70;
    if (v69)
      goto LABEL_54;
  }
LABEL_75:
  __break(1u);
LABEL_76:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t DUEncodingModelOutput.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v3 = type metadata accessor for DocumentUnderstanding_EncodingModelOutput(0);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0x140))(v4);
  v7 = objc_allocWithZone((Class)type metadata accessor for DUEncodingModelOutput());
  v8 = specialized DUEncodingModelOutput.init<A>(proto:)((uint64_t)v6);
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DUEncodingModelOutput?);
  a1[3] = result;
  *a1 = v8;
  return result;
}

uint64_t DUEncodingModelOutput.isEqual(_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  _QWORD *v27;
  _BYTE v28[24];
  uint64_t v29;

  outlined init with copy of Any?(a1, (uint64_t)v28);
  if (!v29)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v28, &demangling cache variable for type metadata for Any?);
    goto LABEL_23;
  }
  type metadata accessor for DUEncodingModelOutput();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_23:
    v25 = 0;
    return v25 & 1;
  }
  v2 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v3 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v1) + 0x80))();
  v5 = v4;
  if (v3 == (*(uint64_t (**)(void))((*v2 & *v27) + 0x80))() && v5 == v6)
  {
    v9 = swift_bridgeObjectRelease_n();
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v9 = swift_bridgeObjectRelease();
    if ((v8 & 1) == 0)
      goto LABEL_22;
  }
  v10 = (*(uint64_t (**)(uint64_t))((*v2 & *v1) + 0x98))(v9);
  if (v10 != (*(uint64_t (**)(void))((*v2 & *v27) + 0x98))())
    goto LABEL_22;
  v11 = (*(uint64_t (**)(void))((*v2 & *v1) + 0xB0))();
  if (v11 != (*(uint64_t (**)(void))((*v2 & *v27) + 0xB0))())
    goto LABEL_22;
  v12 = (*(uint64_t (**)(void))((*v2 & *v1) + 0xC8))();
  v14 = v13;
  v15 = (*(uint64_t (**)(void))((*v2 & *v27) + 0xC8))();
  if ((v14 & 1) != 0)
  {
    if ((v16 & 1) == 0)
    {
LABEL_22:

      goto LABEL_23;
    }
  }
  else if ((v16 & 1) != 0 || v12 != v15)
  {
    goto LABEL_22;
  }
  v17 = (*(uint64_t (**)(uint64_t))((*v2 & *v1) + 0xE0))(v15);
  v18 = (*(uint64_t (**)(void))((*v2 & *v27) + 0xE0))();
  v19 = specialized static Dictionary<>.== infix(_:_:)(v17, v18);
  swift_bridgeObjectRelease();
  v20 = swift_bridgeObjectRelease();
  if ((v19 & 1) == 0)
    goto LABEL_22;
  v21 = (*(uint64_t (**)(uint64_t))((*v2 & *v1) + 0xF8))(v20);
  v22 = (*(uint64_t (**)(void))((*v2 & *v27) + 0xF8))();
  v23 = v22;
  if (!v21)
  {

    if (!v23)
    {
      v25 = 1;
      return v25 & 1;
    }
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  if (!v22)
  {

    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  v24 = swift_bridgeObjectRetain();
  v25 = specialized static Dictionary<>.== infix(_:_:)(v24, v23);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();

  return v25 & 1;
}

uint64_t specialized static Dictionary<>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  float *v36;
  float *v37;
  uint64_t v38;
  float *v39;
  float *v40;
  uint64_t v41;
  float v42;
  float v43;
  float v44;
  int64_t v45;
  uint64_t v46;
  int64_t v47;
  char *v48;
  int64_t v49;
  uint64_t v50;
  _BOOL4 v51;
  uint64_t v52;

  v50 = type metadata accessor for DocumentUnderstanding_HiddenLayerOutput(0);
  v4 = *(_QWORD *)(v50 - 8);
  v5 = MEMORY[0x24BDAC7A8](v50);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v45 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Int64, value: DocumentUnderstanding_HiddenLayerOutput)?);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (int64_t *)((char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  result = MEMORY[0x24BDAC7A8](v11);
  v16 = (int64_t *)((char *)&v45 - v15);
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v48 = (char *)&v45 - v15;
  v49 = 0;
  v17 = *(_QWORD *)(a1 + 64);
  v46 = a1 + 64;
  v18 = 1 << *(_BYTE *)(a1 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & v17;
  v47 = (unint64_t)(v18 + 63) >> 6;
  v45 = v47 - 1;
  while (1)
  {
    if (v20)
    {
      v52 = (v20 - 1) & v20;
      v22 = __clz(__rbit64(v20)) | (v49 << 6);
LABEL_9:
      v23 = *(_QWORD *)(a1 + 56);
      *v13 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v22);
      v24 = v23 + *(_QWORD *)(v4 + 72) * v22;
      v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Int64, value: DocumentUnderstanding_HiddenLayerOutput));
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v24, (uint64_t)v13 + *(int *)(v25 + 48), type metadata accessor for DocumentUnderstanding_HiddenLayerOutput);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v13, 0, 1, v25);
      goto LABEL_31;
    }
    v26 = v49 + 1;
    if (__OFADD__(v49, 1))
    {
      __break(1u);
      goto LABEL_48;
    }
    if (v26 < v47)
    {
      v27 = *(_QWORD *)(v46 + 8 * v26);
      if (v27)
        goto LABEL_13;
      v28 = v49 + 2;
      ++v49;
      if (v26 + 1 < v47)
      {
        v27 = *(_QWORD *)(v46 + 8 * v28);
        if (v27)
          goto LABEL_16;
        v49 = v26 + 1;
        if (v26 + 2 < v47)
        {
          v27 = *(_QWORD *)(v46 + 8 * (v26 + 2));
          if (v27)
          {
            v26 += 2;
            goto LABEL_13;
          }
          v49 = v26 + 2;
          if (v26 + 3 < v47)
          {
            v27 = *(_QWORD *)(v46 + 8 * (v26 + 3));
            if (v27)
            {
              v26 += 3;
              goto LABEL_13;
            }
            v28 = v26 + 4;
            v49 = v26 + 3;
            if (v26 + 4 < v47)
              break;
          }
        }
      }
    }
LABEL_30:
    v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Int64, value: DocumentUnderstanding_HiddenLayerOutput));
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v13, 1, 1, v29);
    v52 = 0;
LABEL_31:
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v13, (uint64_t)v16, &demangling cache variable for type metadata for (key: Int64, value: DocumentUnderstanding_HiddenLayerOutput)?);
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Int64, value: DocumentUnderstanding_HiddenLayerOutput));
    v31 = (*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 48))(v16, 1, v30) == 1;
    result = v31;
    if (v31)
      return result;
    v51 = v31;
    v32 = (uint64_t)v16 + *(int *)(v30 + 48);
    v33 = *v16;
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v32, (uint64_t)v9, type metadata accessor for DocumentUnderstanding_HiddenLayerOutput);
    v34 = specialized __RawDictionaryStorage.find<A>(_:)(v33);
    if ((v35 & 1) == 0)
      goto LABEL_43;
    outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(*(_QWORD *)(a2 + 56) + *(_QWORD *)(v4 + 72) * v34, (uint64_t)v7, type metadata accessor for DocumentUnderstanding_HiddenLayerOutput);
    v36 = *(float **)v7;
    v37 = *(float **)v9;
    v38 = *(_QWORD *)(*(_QWORD *)v7 + 16);
    if (v38 != *(_QWORD *)(*(_QWORD *)v9 + 16))
      goto LABEL_42;
    if (v38 && v36 != v37)
    {
      if (v36[8] != v37[8])
        goto LABEL_42;
      if (v38 != 1)
      {
        if (v36[9] != v37[9])
        {
LABEL_42:
          outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v7, type metadata accessor for DocumentUnderstanding_HiddenLayerOutput);
LABEL_43:
          outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v9, type metadata accessor for DocumentUnderstanding_HiddenLayerOutput);
          return 0;
        }
        v39 = v36 + 10;
        v40 = v37 + 10;
        v41 = v38 - 2;
        while (v41)
        {
          v42 = *v39++;
          v43 = v42;
          v44 = *v40++;
          --v41;
          if (v43 != v44)
            goto LABEL_42;
        }
      }
    }
    type metadata accessor for UnknownStorage();
    lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v16 = (uint64_t *)v48;
    v21 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v7, type metadata accessor for DocumentUnderstanding_HiddenLayerOutput);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v9, type metadata accessor for DocumentUnderstanding_HiddenLayerOutput);
    v20 = v52;
    result = v51;
    if ((v21 & 1) == 0)
      return result;
  }
  v27 = *(_QWORD *)(v46 + 8 * v28);
  if (v27)
  {
LABEL_16:
    v26 = v28;
LABEL_13:
    v52 = (v27 - 1) & v27;
    v22 = __clz(__rbit64(v27)) + (v26 << 6);
    v49 = v26;
    goto LABEL_9;
  }
  while (1)
  {
    v26 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v26 >= v47)
    {
      v49 = v45;
      goto LABEL_30;
    }
    v27 = *(_QWORD *)(v46 + 8 * v26);
    ++v28;
    if (v27)
      goto LABEL_13;
  }
LABEL_48:
  __break(1u);
  return result;
}

uint64_t specialized static Dictionary<>.== infix(_:_:)(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  _QWORD *v24;
  char v26;
  int64_t v27;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v27 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v10 = v9 | (v4 << 6);
      goto LABEL_25;
    }
    v11 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v11 >= v27)
      return 1;
    v12 = *(_QWORD *)(v5 + 8 * v11);
    ++v4;
    if (!v12)
    {
      v4 = v11 + 1;
      if (v11 + 1 >= v27)
        return 1;
      v12 = *(_QWORD *)(v5 + 8 * v4);
      if (!v12)
      {
        v4 = v11 + 2;
        if (v11 + 2 >= v27)
          return 1;
        v12 = *(_QWORD *)(v5 + 8 * v4);
        if (!v12)
        {
          v4 = v11 + 3;
          if (v11 + 3 >= v27)
            return 1;
          v12 = *(_QWORD *)(v5 + 8 * v4);
          if (!v12)
            break;
        }
      }
    }
LABEL_24:
    v8 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v4 << 6);
LABEL_25:
    v14 = 16 * v10;
    v15 = (uint64_t *)(*(_QWORD *)(v3 + 48) + v14);
    v16 = *v15;
    v17 = v15[1];
    v18 = (uint64_t *)(*(_QWORD *)(v3 + 56) + v14);
    v20 = *v18;
    v19 = v18[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17);
    v23 = v22;
    swift_bridgeObjectRelease();
    if ((v23 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    v24 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 16 * v21);
    if (*v24 == v20 && v24[1] == v19)
    {
      result = swift_bridgeObjectRelease();
    }
    else
    {
      v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
      result = swift_bridgeObjectRelease();
      if ((v26 & 1) == 0)
        return 0;
    }
  }
  v13 = v11 + 4;
  if (v13 >= v27)
    return 1;
  v12 = *(_QWORD *)(v5 + 8 * v13);
  if (v12)
  {
    v4 = v13;
    goto LABEL_24;
  }
  while (1)
  {
    v4 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v4 >= v27)
      return 1;
    v12 = *(_QWORD *)(v5 + 8 * v4);
    ++v13;
    if (v12)
      goto LABEL_24;
  }
LABEL_36:
  __break(1u);
  return result;
}

unint64_t specialized static Dictionary<>.== infix(_:_:)(unint64_t result, uint64_t a2)
{
  unint64_t v3;
  int64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  float *v21;
  float *v22;
  uint64_t i;
  float v24;
  float v25;
  float v26;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    v10 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v11 = v10 | (v4 << 6);
LABEL_24:
    v15 = 8 * v11;
    v16 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v15);
    result = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(*(_QWORD *)(v3 + 48) + v15));
    if ((v17 & 1) == 0)
      return 0;
    v18 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * result);
    v19 = *(_QWORD *)(v18 + 16);
    if (v19 != *(_QWORD *)(v16 + 16))
      return 0;
    if (v19)
      v20 = v18 == v16;
    else
      v20 = 1;
    if (!v20)
    {
      if (*(float *)(v18 + 32) != *(float *)(v16 + 32))
        return 0;
      if (v19 != 1)
      {
        if (*(float *)(v18 + 36) != *(float *)(v16 + 36))
          return 0;
        v21 = (float *)(v18 + 40);
        v22 = (float *)(v16 + 40);
        for (i = v19 - 2; i; --i)
        {
          v24 = *v21++;
          v25 = v24;
          v26 = *v22++;
          if (v25 != v26)
            return 0;
        }
      }
    }
  }
  v12 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_39;
  }
  if (v12 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v12);
  ++v4;
  if (v13)
    goto LABEL_23;
  v4 = v12 + 1;
  if (v12 + 1 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v4);
  if (v13)
    goto LABEL_23;
  v4 = v12 + 2;
  if (v12 + 2 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v4);
  if (v13)
    goto LABEL_23;
  v4 = v12 + 3;
  if (v12 + 3 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v4);
  if (v13)
  {
LABEL_23:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
    goto LABEL_24;
  }
  v14 = v12 + 4;
  if (v14 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_23;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_23;
  }
LABEL_39:
  __break(1u);
  return result;
}

Swift::Void __swiftcall DUEncodingModelOutput.encode(with:)(NSCoder with)
{
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;

  type metadata accessor for DUEncodingModelOutput();
  lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DUEncodingModelOutput and conformance DUEncodingModelOutput, v2, (uint64_t (*)(uint64_t))type metadata accessor for DUEncodingModelOutput, (uint64_t)&protocol conformance descriptor for DUEncodingModelOutput);
  v3 = (void *)DUProtobufEncodableProtocol.serializedData()();
  if (v3)
  {
    v4 = v3;
    v5 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000016, 0x80000002284DABA0);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v4, v5);

  }
}

uint64_t DUEncodingModelOutput.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return DUEncodingModelOutput.init(coder:)(a1);
}

uint64_t DUEncodingModelOutput.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  swift_getObjectType();
  type metadata accessor for NSData();
  v3 = v1;
  if (!NSCoder.decodeObject<A>(of:forKey:)())
  {

    goto LABEL_5;
  }
  swift_getObjectType();

  lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DUEncodingModelOutput and conformance DUEncodingModelOutput, v4, (uint64_t (*)(uint64_t))type metadata accessor for DUEncodingModelOutput, (uint64_t)&protocol conformance descriptor for DUEncodingModelOutput);
  DUProtobufEncodableProtocol.init(serializedData:)();

  v5 = v7;
  if (!v7)
  {
LABEL_5:
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v5;
}

id DUEncodingModelOutput.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void DUEncodingModelOutput.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id DUEncodingModelOutput.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DUEncodingModelOutput();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for DUProtobufEncodableProtocol.init(proto:) in conformance DUEncodingModelOutput@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 312);
  v6 = type metadata accessor for DocumentUnderstanding_EncodingModelOutput(0);
  v7 = lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DocumentUnderstanding_EncodingModelOutput and conformance DocumentUnderstanding_EncodingModelOutput, 255, type metadata accessor for DocumentUnderstanding_EncodingModelOutput, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_EncodingModelOutput);
  result = v5(a1, v6, v7);
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for DUEncodingModelOutput()
{
  return objc_opt_self();
}

uint64_t specialized Sequence.forEach(_:)(uint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  BOOL v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v41;

  v7 = result <= a2;
  if (a3 > 0)
    v7 = result >= a2;
  if (!v7)
  {
    v8 = a7;
    v11 = result;
    v36 = a6 + 32;
    v12 = *a5;
    v37 = a3;
    while (1)
    {
      v13 = __OFADD__(v11, a3) ? ((v11 + a3) >> 63) ^ 0x8000000000000000 : v11 + a3;
      v14 = v11 + v8;
      if (__OFADD__(v11, v8))
        break;
      if (v14 < v11)
        goto LABEL_37;
      if (v11 < 0)
        goto LABEL_38;
      v15 = *(_QWORD *)(a6 + 16);
      if (v15 < v11 || (uint64_t)v15 < v14)
        goto LABEL_39;
      type metadata accessor for __ContiguousArrayStorageBase();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain_n();
      v17 = swift_dynamicCastClass();
      if (!v17)
      {
        swift_bridgeObjectRelease();
        v17 = MEMORY[0x24BEE4AF8];
      }
      v18 = *(_QWORD *)(v17 + 16);
      swift_release();
      if (v18 == v8)
      {
        v19 = swift_dynamicCastClass();
        if (!v19)
        {
          swift_bridgeObjectRelease();
          v19 = MEMORY[0x24BEE4AF8];
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        v19 = specialized _copyCollectionToContiguousArray<A>(_:)(a6, v36, v11, (2 * v14) | 1);
      }
      swift_bridgeObjectRelease();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v21 = (_QWORD *)*a4;
      v41 = (_QWORD *)*a4;
      *a4 = 0x8000000000000000;
      v23 = specialized __RawDictionaryStorage.find<A>(_:)(v12);
      v24 = v21[2];
      v25 = (v22 & 1) == 0;
      v26 = v24 + v25;
      if (__OFADD__(v24, v25))
        goto LABEL_40;
      v27 = v22;
      if (v21[3] >= v26)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          specialized _NativeDictionary.copy()();
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v26, isUniquelyReferenced_nonNull_native);
        v28 = specialized __RawDictionaryStorage.find<A>(_:)(v12);
        if ((v27 & 1) != (v29 & 1))
          goto LABEL_43;
        v23 = v28;
      }
      v30 = 8 * v23;
      if ((v27 & 1) != 0)
      {
        v31 = v41[7];
        swift_bridgeObjectRelease();
        *(_QWORD *)(v31 + v30) = v19;
      }
      else
      {
        v41[(v23 >> 6) + 8] |= 1 << v23;
        *(_QWORD *)(v41[6] + 8 * v23) = v12;
        *(_QWORD *)(v41[7] + 8 * v23) = v19;
        v32 = v41[2];
        v33 = __OFADD__(v32, 1);
        v34 = v32 + 1;
        if (v33)
          goto LABEL_42;
        v41[2] = v34;
      }
      *a4 = v41;
      result = swift_bridgeObjectRelease();
      v8 = a7;
      v12 = *a5 + 1;
      if (__OFADD__(*a5, 1))
        goto LABEL_41;
      *a5 = v12;
      v35 = v13 <= a2;
      a3 = v37;
      if (v37 > 0)
        v35 = v13 >= a2;
      v11 = v13;
      if (v35)
        return result;
    }
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  return result;
}

unint64_t specialized static DUEncodingModelOutput.processCoreMLOutput(hiddenLayerSize:nHiddenLayers:pooledFeatureValue:)(uint64_t a1, int64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (uint64_t)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MLFeatureValue.shapedArrayValue<A>(of:)();
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v6, &demangling cache variable for type metadata for MLShapedArray<Float>?);
    if (one-time initialization token for standard != -1)
      swift_once();
    v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.standard);
    v10 = Logger.logObject.getter();
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_2282CC000, v10, v11, "Unable to convert model output to scalar array", v12, 2u);
      MEMORY[0x22E2B117C](v12, -1, -1);
    }

    return 0;
  }
  lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>(&lazy protocol witness table cache variable for type MLShapedArray<Float> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float>, MEMORY[0x24BDBFCD0]);
  v14 = MLShapedArrayProtocol.scalars.getter();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  if ((unsigned __int128)(a1 * (__int128)a2) >> 64 != (a1 * a2) >> 63)
  {
    __break(1u);
    goto LABEL_17;
  }
  v6 = *(_QWORD *)(v14 + 16);
  if (v6 != a1 * a2)
  {
    if (one-time initialization token for standard == -1)
      goto LABEL_13;
    goto LABEL_18;
  }
  v15 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v21 = 0;
  v22 = v15;
  if (!a1)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    swift_once();
LABEL_13:
    v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.standard);
    swift_bridgeObjectRetain();
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = swift_slowAlloc();
      *(_DWORD *)v19 = 134218496;
      swift_bridgeObjectRelease();
      v22 = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 12) = 2048;
      v22 = a2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 22) = 2048;
      v22 = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_2282CC000, v17, v18, "Model output of length: %ld does not conform to expected size [%ld, %ld]", (uint8_t *)v19, 0x20u);
      MEMORY[0x22E2B117C](v19, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return 0;
  }
  specialized Sequence.forEach(_:)(0, v6, a1, &v22, &v21, v14, a1);
  swift_bridgeObjectRelease();
  return v22;
}

uint64_t specialized static DUEncodingModelOutput.processCoreMLOutput(hiddenLayerSize:nHiddenLayers:sequenceSize:featureValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  _QWORD *v22;
  uint64_t inited;
  BOOL v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char isUniquelyReferenced_nonNull_native;
  char v33;
  unint64_t v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  uint64_t result;
  uint64_t v59;
  int v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArraySlice<Float>);
  v63 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>?);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v62 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v59 - v16;
  MLFeatureValue.shapedArrayValue<A>(of:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v11, &demangling cache variable for type metadata for MLShapedArray<Float>?);
    if (one-time initialization token for standard != -1)
LABEL_36:
      swift_once();
    v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.standard);
    v19 = Logger.logObject.getter();
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v21 = 0;
      _os_log_impl(&dword_2282CC000, v19, v20, "Unable to convert model output to MLShapedArray", v21, 2u);
      MEMORY[0x22E2B117C](v21, -1, -1);
    }

    return 0;
  }
  v61 = v13;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v17, v11, v12);
  v64 = v17;
  v65 = v12;
  v22 = (_QWORD *)MLShapedArray.shape.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2284C25C0;
  *(_QWORD *)(inited + 32) = a2;
  *(_QWORD *)(inited + 40) = a3;
  *(_QWORD *)(inited + 48) = a1;
  v24 = specialized static Array<A>.== infix(_:_:)(v22, (_QWORD *)inited);
  swift_setDeallocating();
  swift_bridgeObjectRelease();
  if (!v24)
  {
    if (one-time initialization token for standard == -1)
    {
LABEL_25:
      v45 = type metadata accessor for Logger();
      __swift_project_value_buffer(v45, (uint64_t)static Logger.standard);
      v47 = v61;
      v46 = v62;
      v48 = v65;
      (*(void (**)(char *, char *, uint64_t))(v61 + 16))(v62, v64, v65);
      v49 = Logger.logObject.getter();
      v50 = static os_log_type_t.error.getter();
      v51 = v50;
      if (os_log_type_enabled(v49, v50))
      {
        v52 = swift_slowAlloc();
        v63 = swift_slowAlloc();
        v67 = (_QWORD *)v63;
        *(_DWORD *)v52 = 136315906;
        v59 = v52 + 4;
        MLShapedArray.shape.getter();
        v53 = MEMORY[0x22E2AFB2C]();
        v60 = v51;
        v55 = v54;
        swift_bridgeObjectRelease();
        v66 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v55, (uint64_t *)&v67);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v56 = *(void (**)(char *, uint64_t))(v47 + 8);
        v56(v46, v65);
        *(_WORD *)(v52 + 12) = 2048;
        v66 = a2;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v52 + 22) = 2048;
        v66 = a3;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v52 + 32) = 2048;
        v48 = v65;
        v66 = a1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_2282CC000, v49, (os_log_type_t)v60, "Model output of shape: %s does not conform to expected size [%ld, %ld, %ld]", (uint8_t *)v52, 0x2Au);
        v57 = v63;
        swift_arrayDestroy();
        MEMORY[0x22E2B117C](v57, -1, -1);
        MEMORY[0x22E2B117C](v52, -1, -1);
      }
      else
      {
        v56 = *(void (**)(char *, uint64_t))(v47 + 8);
        v56(v46, v48);
      }

      v56(v64, v48);
      return 0;
    }
LABEL_38:
    swift_once();
    goto LABEL_25;
  }
  v25 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  if (a2 < 0)
  {
    __break(1u);
    goto LABEL_38;
  }
  v26 = (_QWORD *)v25;
  if (!a2)
  {
    v30 = v64;
    v29 = v65;
LABEL_31:
    (*(void (**)(char *, uint64_t))(v61 + 8))(v30, v29);
    return (uint64_t)v26;
  }
  v27 = 0;
  while (1)
  {
    if (a2 == v27)
    {
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    MLShapedArray.subscript.getter();
    lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>(&lazy protocol witness table cache variable for type MLShapedArraySlice<Float> and conformance MLShapedArraySlice<A>, &demangling cache variable for type metadata for MLShapedArraySlice<Float>, MEMORY[0x24BDBFD50]);
    v31 = MLShapedArrayProtocol.scalars.getter();
    (*(void (**)(char *, uint64_t))(v63 + 8))(v8, v6);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v67 = v26;
    v34 = specialized __RawDictionaryStorage.find<A>(_:)(v27);
    v35 = v26[2];
    v36 = (v33 & 1) == 0;
    v37 = v35 + v36;
    if (__OFADD__(v35, v36))
      goto LABEL_34;
    v38 = v33;
    if (v26[3] < v37)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v26 = v67;
      if ((v33 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      v26 = v67;
      if ((v38 & 1) != 0)
      {
LABEL_10:
        v28 = v26[7];
        swift_bridgeObjectRelease();
        *(_QWORD *)(v28 + 8 * v34) = v31;
        goto LABEL_11;
      }
    }
LABEL_20:
    v26[(v34 >> 6) + 8] |= 1 << v34;
    v41 = 8 * v34;
    *(_QWORD *)(v26[6] + v41) = v27;
    *(_QWORD *)(v26[7] + v41) = v31;
    v42 = v26[2];
    v43 = __OFADD__(v42, 1);
    v44 = v42 + 1;
    if (v43)
      goto LABEL_35;
    v26[2] = v44;
LABEL_11:
    ++v27;
    swift_bridgeObjectRelease();
    v30 = v64;
    v29 = v65;
    if (a2 == v27)
      goto LABEL_31;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v37, isUniquelyReferenced_nonNull_native);
  v39 = specialized __RawDictionaryStorage.find<A>(_:)(v27);
  if ((v38 & 1) == (v40 & 1))
  {
    v34 = v39;
    v26 = v67;
    if ((v38 & 1) != 0)
      goto LABEL_10;
    goto LABEL_20;
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t outlined assign with take of DocumentUnderstanding_HiddenLayerOutput(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DocumentUnderstanding_HiddenLayerOutput(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t associated type witness table accessor for DUProtobufEncodableProtocol.ProtobufType : Message in DUEncodingModelOutput()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_2283E4500@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x80))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_2283E4540(uint64_t *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & **a2) + 0x88);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_2283E4594@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x98))();
  *a2 = result;
  return result;
}

uint64_t sub_2283E45D4(_QWORD *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & **a2) + 0xA0))(*a1);
}

uint64_t sub_2283E4610@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0xB0))();
  *a2 = result;
  return result;
}

uint64_t sub_2283E4650(_QWORD *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & **a2) + 0xB8))(*a1);
}

uint64_t sub_2283E468C@<X0>(_QWORD **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0xC8))();
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_2283E46D4(uint64_t a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))((*MEMORY[0x24BEE4EA0] & **a2) + 0xD0))(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_2283E471C@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0xE0))();
  *a2 = result;
  return result;
}

uint64_t sub_2283E475C(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & **a2) + 0xE8);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_2283E479C@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0xF8))();
  *a2 = result;
  return result;
}

uint64_t sub_2283E47DC(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & **a2) + 0x100);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_2283E481C()
{
  return lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DocumentUnderstanding_EncodingModelOutput and conformance DocumentUnderstanding_EncodingModelOutput, 255, type metadata accessor for DocumentUnderstanding_EncodingModelOutput, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_EncodingModelOutput);
}

uint64_t DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.documentID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v14;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v1 + *(int *)(v6 + 24), (uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?);
  v7 = (int *)type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier();
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v5, a1, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier);
  UnknownStorage.init()();
  v8 = (_QWORD *)(a1 + v7[5]);
  *v8 = 0;
  v8[1] = 0;
  v9 = (_QWORD *)(a1 + v7[6]);
  *v9 = 0;
  v9[1] = 0;
  v10 = (_QWORD *)(a1 + v7[7]);
  *v10 = 0;
  v10[1] = 0;
  v11 = (_QWORD *)(a1 + v7[8]);
  *v11 = 0;
  v11[1] = 0;
  v12 = (_QWORD *)(a1 + v7[9]);
  *v12 = 0;
  v12[1] = 0;
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?);
}

BOOL DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.hasDocument.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + *(int *)(v4 + 32), (uint64_t)v3, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
  v5 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0);
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v3, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
  return v6;
}

uint64_t DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.document.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v1 + *(int *)(v6 + 32), (uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
  v7 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v5, a1, type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document);
  UnknownStorage.init()();
  v8 = *(int *)(v7 + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a1 + v8) = static DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.defaultInstance;
  swift_retain();
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
}

BOOL DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.hasAssociatedFileURL.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0
                   + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate()
                            + 36)
                   + 8) != 0;
}

uint64_t DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.associatedFileURL.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate()
                          + 36));
  if (v1[1])
    v2 = *v1;
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

BOOL DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.hasDocumentBody.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0
                   + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate()
                            + 28)
                   + 8) != 0;
}

uint64_t DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.documentBody.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate()
                          + 28));
  if (v1[1])
    v2 = *v1;
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.documentType.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate()
                          + 40));
  if (v1[1])
    v2 = *v1;
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

BOOL DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.hasUpdateTimestamp.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0
                   + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate()
                            + 44)
                   + 8) & 1) == 0;
}

double DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.updateTimestamp.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = v0
     + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate() + 44);
  result = *(double *)v1;
  if (*(_BYTE *)(v1 + 8))
    return 0.0;
  return result;
}

uint64_t DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.init()@<X0>(_QWORD *a1@<X8>)
{
  int *v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  _QWORD *v9;
  _QWORD *v10;
  char *v11;

  *a1 = MEMORY[0x24BEE4AF8];
  v2 = (int *)type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate();
  UnknownStorage.init()();
  v3 = (char *)a1 + v2[6];
  v4 = type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = (_QWORD *)((char *)a1 + v2[7]);
  *v5 = 0;
  v5[1] = 0;
  v6 = (char *)a1 + v2[8];
  v7 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v9 = (_QWORD *)((char *)a1 + v2[9]);
  *v9 = 0;
  v9[1] = 0;
  v10 = (_QWORD *)((char *)a1 + v2[10]);
  *v10 = 0;
  v10[1] = 0;
  v11 = (char *)a1 + v2[11];
  *(_QWORD *)v11 = 0;
  v11[8] = 1;
  return result;
}

uint64_t DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.documentID.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1
     + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate() + 24);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v3, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(a1, v3, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier);
  v4 = type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

uint64_t DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.documentBody.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2
                + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate()
                         + 28));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.document.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1
     + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate() + 32);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v3, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(a1, v3, type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document);
  v4 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

uint64_t DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.associatedFileURL.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2
                + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate()
                         + 36));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.documentType.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2
                + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate()
                         + 40));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.updateTimestamp.setter(double a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate();
  v4 = v1 + *(int *)(result + 44);
  *(double *)v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate()
{
  uint64_t result;

  result = type metadata singleton initialization cache for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate;
  if (!type metadata singleton initialization cache for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t key path getter for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.documentID : DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v15;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(a1 + *(int *)(v7 + 24), (uint64_t)v6, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?);
  v8 = (int *)type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier();
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v8 - 1) + 48))(v6, 1, v8) != 1)
    return outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v6, a2, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier);
  UnknownStorage.init()();
  v9 = (_QWORD *)(a2 + v8[5]);
  *v9 = 0;
  v9[1] = 0;
  v10 = (_QWORD *)(a2 + v8[6]);
  *v10 = 0;
  v10[1] = 0;
  v11 = (_QWORD *)(a2 + v8[7]);
  *v11 = 0;
  v11[1] = 0;
  v12 = (_QWORD *)(a2 + v8[8]);
  *v12 = 0;
  v12[1] = 0;
  v13 = (_QWORD *)(a2 + v8[9]);
  *v13 = 0;
  v13[1] = 0;
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v6, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?);
}

uint64_t key path setter for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.documentID : DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(a1, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier);
  v8 = a2
     + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate() + 24);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v8, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v7, v8, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

void (*DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.documentID.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier();
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate()
               + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    *((_QWORD *)v11 + 1) = 0;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    *((_QWORD *)v12 + 1) = 0;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    *((_QWORD *)v13 + 1) = 0;
    v14 = &v9[v6[8]];
    *(_QWORD *)v14 = 0;
    *((_QWORD *)v14 + 1) = 0;
    v15 = &v9[v6[9]];
    *(_QWORD *)v15 = 0;
    *((_QWORD *)v15 + 1) = 0;
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?);
  }
  else
  {
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v5, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier);
  }
  return DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.documentID.modify;
}

void DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.documentID.modify(uint64_t a1, char a2)
{
  DocumentUnderstanding_ClientInterface_Response.topics.modify(a1, a2, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier);
}

BOOL DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.hasDocumentID.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + *(int *)(v4 + 24), (uint64_t)v3, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?);
  v5 = type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier();
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v3, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?);
  return v6;
}

Swift::Void __swiftcall DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.clearDocumentID()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0
     + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate() + 24);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v1, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?);
  v2 = type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t key path getter for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.documentBody : DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = (uint64_t *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate()
                          + 28));
  v4 = v3[1];
  if (v4)
  {
    v5 = *v3;
    v6 = v4;
  }
  else
  {
    v5 = 0;
    v6 = 0xE000000000000000;
  }
  *a2 = v5;
  a2[1] = v6;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.documentBody : DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;

  v3 = *a1;
  v2 = a1[1];
  v4 = (_QWORD *)(a2
                + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate()
                         + 28));
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *v4 = v3;
  v4[1] = v2;
  return result;
}

uint64_t (*DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.documentBody.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate() + 28);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_ClientInterface_StructuredEntityLabel.labelName.modify;
}

Swift::Void __swiftcall DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.clearDocumentBody()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(v0
                + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate()
                         + 28));
  swift_bridgeObjectRelease();
  *v1 = 0;
  v1[1] = 0;
}

uint64_t key path getter for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.document : DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(a1 + *(int *)(v7 + 32), (uint64_t)v6, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
  v8 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v6, a2, type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document);
  UnknownStorage.init()();
  v9 = *(int *)(v8 + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a2 + v9) = static DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.defaultInstance;
  swift_retain();
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v6, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
}

uint64_t key path setter for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.document : DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(a1, (uint64_t)v7, type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document);
  v8 = a2
     + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate() + 32);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v8, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v7, v8, type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

void (*DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.document.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate()
               + 32);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = *(int *)(v6 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)&v9[v11] = static DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
  }
  else
  {
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v5, (uint64_t)v9, type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document);
  }
  return DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.document.modify;
}

void DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.document.modify(uint64_t a1, char a2)
{
  DocumentUnderstanding_ClientInterface_Response.topics.modify(a1, a2, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?, type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document);
}

Swift::Void __swiftcall DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.clearDocument()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0
     + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate() + 32);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v1, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
  v2 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t key path getter for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.associatedFileURL : DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = (uint64_t *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate()
                          + 36));
  v4 = v3[1];
  if (v4)
  {
    v5 = *v3;
    v6 = v4;
  }
  else
  {
    v5 = 0;
    v6 = 0xE000000000000000;
  }
  *a2 = v5;
  a2[1] = v6;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.associatedFileURL : DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;

  v3 = *a1;
  v2 = a1[1];
  v4 = (_QWORD *)(a2
                + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate()
                         + 36));
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *v4 = v3;
  v4[1] = v2;
  return result;
}

uint64_t (*DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.associatedFileURL.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate() + 36);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_ClientInterface_StructuredEntityLabel.labelName.modify;
}

Swift::Void __swiftcall DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.clearAssociatedFileURL()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(v0
                + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate()
                         + 36));
  swift_bridgeObjectRelease();
  *v1 = 0;
  v1[1] = 0;
}

uint64_t key path getter for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.documentType : DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = (uint64_t *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate()
                          + 40));
  v4 = v3[1];
  if (v4)
  {
    v5 = *v3;
    v6 = v4;
  }
  else
  {
    v5 = 0;
    v6 = 0xE000000000000000;
  }
  *a2 = v5;
  a2[1] = v6;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.documentType : DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;

  v3 = *a1;
  v2 = a1[1];
  v4 = (_QWORD *)(a2
                + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate()
                         + 40));
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *v4 = v3;
  v4[1] = v2;
  return result;
}

uint64_t (*DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.documentType.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate() + 40);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_ClientInterface_StructuredEntityLabel.labelName.modify;
}

BOOL DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.hasDocumentType.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0
                   + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate()
                            + 40)
                   + 8) != 0;
}

Swift::Void __swiftcall DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.clearDocumentType()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(v0
                + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate()
                         + 40));
  swift_bridgeObjectRelease();
  *v1 = 0;
  v1[1] = 0;
}

uint64_t DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.documentAttributes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.documentAttributes.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.documentAttributes.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t (*DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.updateTimestamp.modify(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate() + 44);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return DocumentUnderstanding_ClientInterface_StructuredEntityLabel.confidenceScore.modify;
}

Swift::Void __swiftcall DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.clearUpdateTimestamp()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0
     + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate() + 44);
  *(_QWORD *)v1 = 0;
  *(_BYTE *)(v1 + 8) = 1;
}

uint64_t DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1
     + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate() + 20);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1
     + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate() + 20);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.unknownFields.modify())(_QWORD)
{
  type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate();
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

void *DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.protoMessageName.unsafeMutableAddressor()
{
  return &static DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.protoMessageName;
}

unint64_t static DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.protoMessageName.getter()
{
  return 0xD00000000000004BLL;
}

uint64_t DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate._protobuf_nameMap);
}

uint64_t static DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v2 = type metadata accessor for _NameMap();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate._protobuf_nameMap);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          closure #1 in DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.decodeMessage<A>(decoder:)();
          break;
        case 2:
        case 3:
        case 6:
          type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate();
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 4:
          type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute();
          lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute and conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 5:
          type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate();
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          break;
        case 7:
          closure #7 in DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.decodeMessage<A>(decoder:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.decodeMessage<A>(decoder:)()
{
  type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate();
  type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier();
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity((unint64_t *)&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier and conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #7 in DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.decodeMessage<A>(decoder:)()
{
  type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate();
  type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0);
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity((unint64_t *)&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_Document and conformance DocumentUnderstanding_DocumentRepresentation_Document, type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_Document);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.traverse<A>(visitor:)(v3, a1, a2, a3);
  if (!v4)
  {
    closure #2 in DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.traverse<A>(visitor:)(v3);
    closure #3 in DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.traverse<A>(visitor:)(v3);
    if (*(_QWORD *)(*(_QWORD *)v3 + 16))
    {
      type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute();
      lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute and conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    closure #4 in DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.traverse<A>(visitor:)(v3);
    closure #5 in DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.traverse<A>(visitor:)(v3);
    closure #6 in DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.traverse<A>(visitor:)(v3, a1, a2, a3);
    type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate();
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v7, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v7, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier);
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity((unint64_t *)&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier and conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier);
}

uint64_t closure #2 in DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate();
  if (*(_QWORD *)(a1 + *(int *)(result + 28) + 8))
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  return result;
}

uint64_t closure #3 in DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate();
  if (*(_QWORD *)(a1 + *(int *)(result + 40) + 8))
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  return result;
}

uint64_t closure #4 in DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate();
  if ((*(_BYTE *)(a1 + *(int *)(result + 44) + 8) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  return result;
}

uint64_t closure #5 in DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate();
  if (*(_QWORD *)(a1 + *(int *)(result + 36) + 8))
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  return result;
}

uint64_t closure #6 in DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(a1 + *(int *)(v12 + 32), (uint64_t)v7, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v7, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v7, (uint64_t)v11, type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document);
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity((unint64_t *)&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_Document and conformance DocumentUnderstanding_DocumentRepresentation_Document, type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_Document);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v11, type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document);
}

Swift::Int DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.hashValue.getter()
{
  Hasher.init(_seed:)();
  type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate();
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate and conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Message.init() in conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate@<X0>(int *a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  char *v14;

  *a2 = MEMORY[0x24BEE4AF8];
  UnknownStorage.init()();
  v4 = (char *)a2 + a1[6];
  v5 = type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = a1[8];
  v7 = (_QWORD *)((char *)a2 + a1[7]);
  *v7 = 0;
  v7[1] = 0;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v11 = a1[10];
  v12 = (_QWORD *)((char *)a2 + a1[9]);
  *v12 = 0;
  v12[1] = 0;
  v13 = (_QWORD *)((char *)a2 + v11);
  *v13 = 0;
  v13[1] = 0;
  v14 = (char *)a2 + a1[11];
  *(_QWORD *)v14 = 0;
  v14[8] = 1;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate()
{
  return 0xD00000000000004BLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate()
{
  return DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate and conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v2 = type metadata accessor for _NameMap();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate._protobuf_nameMap);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate and conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate and conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate);
  return Message.hash(into:)();
}

uint64_t specialized static DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t *v34;
  uint64_t v35;
  char v36;
  char v38;
  uint64_t *v39;
  int *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int (*v53)(uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  char v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  double *v67;
  char v68;
  double *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(char *, char *, uint64_t);
  char *v74;
  char *v75;
  char *v76;
  void (*v77)(char *, uint64_t);
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  int *v91;
  uint64_t *v92;
  uint64_t *v93;

  v92 = a1;
  v93 = a2;
  v2 = type metadata accessor for UnknownStorage();
  v81 = *(_QWORD *)(v2 - 8);
  v82 = v2;
  v3 = MEMORY[0x24BDAC7A8](v2);
  v80 = (char *)&v78 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v79 = (char *)&v78 - v5;
  v6 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0);
  v85 = *(_QWORD *)(v6 - 8);
  v86 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v83 = (uint64_t)&v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DocumentUnderstanding_DocumentRepresentation_Document?, DocumentUnderstanding_DocumentRepresentation_Document?));
  MEMORY[0x24BDAC7A8](v84);
  v90 = (char *)&v78 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v89 = (char *)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v87 = (char *)&v78 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v88 = (char *)&v78 - v14;
  v15 = type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v78 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?, DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?));
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v78 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?);
  v23 = MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v78 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x24BDAC7A8](v23);
  v28 = (char *)&v78 - v27;
  MEMORY[0x24BDAC7A8](v26);
  v30 = (char *)&v78 - v29;
  v31 = type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v92 + *(int *)(v31 + 24), (uint64_t)v30, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?);
  v91 = (int *)v31;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v93 + *(int *)(v31 + 24), (uint64_t)v28, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?);
  v32 = (uint64_t)&v21[*(int *)(v19 + 48)];
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v30, (uint64_t)v21, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?);
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v28, v32, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?);
  v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  if (v33((uint64_t)v21, 1, v15) == 1)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v28, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v30, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?);
    if (v33(v32, 1, v15) == 1)
    {
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v21, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?);
      goto LABEL_11;
    }
LABEL_6:
    v34 = &demangling cache variable for type metadata for (DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?, DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?);
    v35 = (uint64_t)v21;
LABEL_7:
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v35, v34);
    goto LABEL_8;
  }
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v21, (uint64_t)v25, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?);
  if (v33(v32, 1, v15) == 1)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v28, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v30, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier);
    goto LABEL_6;
  }
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v32, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier);
  v38 = static DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.== infix(_:_:)(v25, v18);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v28, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v30, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v21, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?);
  if ((v38 & 1) == 0)
    goto LABEL_8;
LABEL_11:
  v40 = v91;
  v39 = v92;
  v41 = v91[7];
  v42 = (uint64_t *)((char *)v92 + v41);
  v43 = *(uint64_t *)((char *)v92 + v41 + 8);
  v44 = v93;
  v45 = (uint64_t *)((char *)v93 + v41);
  v46 = v45[1];
  if (v43)
  {
    v48 = (uint64_t)v89;
    v47 = (uint64_t)v90;
    v49 = (uint64_t)v87;
    v50 = (uint64_t)v88;
    if (!v46)
      goto LABEL_8;
    if (*v42 != *v45 || v43 != v46)
    {
      v36 = 0;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        return v36 & 1;
    }
  }
  else
  {
    v48 = (uint64_t)v89;
    v47 = (uint64_t)v90;
    v49 = (uint64_t)v87;
    v50 = (uint64_t)v88;
    if (v46)
      goto LABEL_8;
  }
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v39 + v40[8], v50, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v44 + v40[8], v49, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
  v51 = v47 + *(int *)(v84 + 48);
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v50, v47, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v49, v51, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
  v52 = v86;
  v53 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v85 + 48);
  if (v53(v47, 1, v86) == 1)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v49, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v50, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
    if (v53(v51, 1, v52) == 1)
    {
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v47, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
      goto LABEL_25;
    }
    goto LABEL_23;
  }
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v47, v48, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
  if (v53(v51, 1, v52) == 1)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v49, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v50, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v48, type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document);
LABEL_23:
    v34 = &demangling cache variable for type metadata for (DocumentUnderstanding_DocumentRepresentation_Document?, DocumentUnderstanding_DocumentRepresentation_Document?);
    v35 = v47;
    goto LABEL_7;
  }
  v54 = v83;
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v51, v83, type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document);
  v55 = static DocumentUnderstanding_DocumentRepresentation_Document.== infix(_:_:)(v48, v54);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v54, type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v49, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v50, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v48, type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v47, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
  if ((v55 & 1) == 0)
    goto LABEL_8;
LABEL_25:
  v56 = v40[9];
  v57 = (uint64_t *)((char *)v39 + v56);
  v58 = *(uint64_t *)((char *)v39 + v56 + 8);
  v59 = (uint64_t *)((char *)v44 + v56);
  v60 = v59[1];
  if (v58)
  {
    if (!v60)
      goto LABEL_8;
    if (*v57 != *v59 || v58 != v60)
    {
      v36 = 0;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        return v36 & 1;
    }
  }
  else if (v60)
  {
    goto LABEL_8;
  }
  v61 = v40[10];
  v62 = (uint64_t *)((char *)v39 + v61);
  v63 = *(uint64_t *)((char *)v39 + v61 + 8);
  v64 = (uint64_t *)((char *)v44 + v61);
  v65 = v64[1];
  if (!v63)
  {
    if (!v65)
      goto LABEL_39;
LABEL_8:
    v36 = 0;
    return v36 & 1;
  }
  if (!v65)
    goto LABEL_8;
  if (*v62 == *v64 && v63 == v65 || (v36 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
LABEL_39:
    if ((specialized static Array<A>.== infix(_:_:)(*v39, *v44) & 1) != 0)
    {
      v66 = v40[11];
      v67 = (double *)((char *)v39 + v66);
      v68 = *((_BYTE *)v39 + v66 + 8);
      v69 = (double *)((char *)v44 + v66);
      v70 = *((unsigned __int8 *)v44 + v66 + 8);
      if ((v68 & 1) != 0)
      {
        if (v70)
        {
LABEL_46:
          v72 = v81;
          v71 = v82;
          v73 = *(void (**)(char *, char *, uint64_t))(v81 + 16);
          v74 = v79;
          v73(v79, (char *)v39 + v40[5], v82);
          v75 = (char *)v44 + v40[5];
          v76 = v80;
          v73(v80, v75, v71);
          lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
          v36 = dispatch thunk of static Equatable.== infix(_:_:)();
          v77 = *(void (**)(char *, uint64_t))(v72 + 8);
          v77(v76, v71);
          v77(v74, v71);
          return v36 & 1;
        }
      }
      else
      {
        if (*v67 != *v69)
          LOBYTE(v70) = 1;
        if ((v70 & 1) == 0)
          goto LABEL_46;
      }
    }
    goto LABEL_8;
  }
  return v36 & 1;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate and conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate);
}

uint64_t base witness table accessor for Message in DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate and conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate);
}

uint64_t base witness table accessor for Hashable in DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate and conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate);
}

uint64_t base witness table accessor for Equatable in DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate and conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate);
}

uint64_t sub_2283E74F8@<X0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  double v6;

  result = type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate();
  v5 = a1 + *(int *)(result + 44);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *a2 = v6;
  return result;
}

uint64_t sub_2283E7540(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a1;
  result = type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate();
  v5 = a2 + *(int *)(result + 44);
  *(_QWORD *)v5 = v3;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, _QWORD, uint64_t, int *);
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int (*v49)(char *, uint64_t, uint64_t);
  uint64_t v50;
  void (*v51)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  void (*v64)(char *, char *, uint64_t);
  uint64_t v65;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = (char *)v7 + v13;
    v15 = (char *)a2 + v13;
    v16 = (int *)type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier();
    v17 = *((_QWORD *)v16 - 1);
    v64 = v12;
    v65 = v11;
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v17 + 48))(v15, 1, v16))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v12(v14, v15, v11);
      v19 = v16[5];
      v20 = &v14[v19];
      v21 = &v15[v19];
      v22 = *((_QWORD *)v21 + 1);
      *(_QWORD *)v20 = *(_QWORD *)v21;
      *((_QWORD *)v20 + 1) = v22;
      v23 = v16[6];
      v24 = &v14[v23];
      v25 = &v15[v23];
      v26 = *((_QWORD *)v25 + 1);
      *(_QWORD *)v24 = *(_QWORD *)v25;
      *((_QWORD *)v24 + 1) = v26;
      v27 = v16[7];
      v28 = &v14[v27];
      v29 = &v15[v27];
      v30 = *((_QWORD *)v29 + 1);
      *(_QWORD *)v28 = *(_QWORD *)v29;
      *((_QWORD *)v28 + 1) = v30;
      v31 = v16[8];
      v32 = &v14[v31];
      v33 = &v15[v31];
      v34 = *((_QWORD *)v33 + 1);
      *(_QWORD *)v32 = *(_QWORD *)v33;
      *((_QWORD *)v32 + 1) = v34;
      v35 = v16[9];
      v36 = &v14[v35];
      v37 = &v15[v35];
      v38 = *((_QWORD *)v37 + 1);
      *(_QWORD *)v36 = *(_QWORD *)v37;
      *((_QWORD *)v36 + 1) = v38;
      v39 = *(void (**)(char *, _QWORD, uint64_t, int *))(v17 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v39(v14, 0, 1, v16);
    }
    v40 = a3[7];
    v41 = a3[8];
    v42 = (uint64_t *)((char *)v7 + v40);
    v43 = (uint64_t *)((char *)a2 + v40);
    v44 = v43[1];
    *v42 = *v43;
    v42[1] = v44;
    v45 = (char *)v7 + v41;
    v46 = (char *)a2 + v41;
    v47 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0);
    v48 = *(_QWORD *)(v47 - 8);
    v49 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48);
    swift_bridgeObjectRetain();
    if (v49(v46, 1, v47))
    {
      v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
      memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    }
    else
    {
      v64(v45, v46, v65);
      *(_QWORD *)&v45[*(int *)(v47 + 20)] = *(_QWORD *)&v46[*(int *)(v47 + 20)];
      v51 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56);
      swift_retain();
      v51(v45, 0, 1, v47);
    }
    v52 = a3[9];
    v53 = a3[10];
    v54 = (uint64_t *)((char *)v7 + v52);
    v55 = (uint64_t *)((char *)a2 + v52);
    v56 = v55[1];
    *v54 = *v55;
    v54[1] = v56;
    v57 = (uint64_t *)((char *)v7 + v53);
    v58 = (uint64_t *)((char *)a2 + v53);
    v59 = v58[1];
    *v57 = *v58;
    v57[1] = v59;
    v60 = a3[11];
    v61 = (char *)v7 + v60;
    v62 = (char *)a2 + v60;
    v61[8] = v62[8];
    *(_QWORD *)v61 = *(_QWORD *)v62;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t destroy for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  swift_bridgeObjectRelease();
  v4 = a1 + a2[5];
  v5 = type metadata accessor for UnknownStorage();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v7 = a1 + a2[6];
  v8 = type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8))
  {
    v6(v7, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v9 = a1 + a2[8];
  v10 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))
  {
    v6(v9, v5);
    swift_release();
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, _QWORD, uint64_t, int *);
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(char *, uint64_t, uint64_t);
  uint64_t v48;
  void (*v49)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  void (*v62)(char *, char *, uint64_t);
  uint64_t v63;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = (int *)type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier();
  v15 = *((_QWORD *)v14 - 1);
  v62 = v10;
  v63 = v9;
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v10(v12, v13, v9);
    v17 = v14[5];
    v18 = &v12[v17];
    v19 = &v13[v17];
    v20 = *((_QWORD *)v19 + 1);
    *(_QWORD *)v18 = *(_QWORD *)v19;
    *((_QWORD *)v18 + 1) = v20;
    v21 = v14[6];
    v22 = &v12[v21];
    v23 = &v13[v21];
    v24 = *((_QWORD *)v23 + 1);
    *(_QWORD *)v22 = *(_QWORD *)v23;
    *((_QWORD *)v22 + 1) = v24;
    v25 = v14[7];
    v26 = &v12[v25];
    v27 = &v13[v25];
    v28 = *((_QWORD *)v27 + 1);
    *(_QWORD *)v26 = *(_QWORD *)v27;
    *((_QWORD *)v26 + 1) = v28;
    v29 = v14[8];
    v30 = &v12[v29];
    v31 = &v13[v29];
    v32 = *((_QWORD *)v31 + 1);
    *(_QWORD *)v30 = *(_QWORD *)v31;
    *((_QWORD *)v30 + 1) = v32;
    v33 = v14[9];
    v34 = &v12[v33];
    v35 = &v13[v33];
    v36 = *((_QWORD *)v35 + 1);
    *(_QWORD *)v34 = *(_QWORD *)v35;
    *((_QWORD *)v34 + 1) = v36;
    v37 = *(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v37(v12, 0, 1, v14);
  }
  v38 = a3[7];
  v39 = a3[8];
  v40 = (_QWORD *)((char *)a1 + v38);
  v41 = (_QWORD *)((char *)a2 + v38);
  v42 = v41[1];
  *v40 = *v41;
  v40[1] = v42;
  v43 = (char *)a1 + v39;
  v44 = (char *)a2 + v39;
  v45 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0);
  v46 = *(_QWORD *)(v45 - 8);
  v47 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48);
  swift_bridgeObjectRetain();
  if (v47(v44, 1, v45))
  {
    v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
  }
  else
  {
    v62(v43, v44, v63);
    *(_QWORD *)&v43[*(int *)(v45 + 20)] = *(_QWORD *)&v44[*(int *)(v45 + 20)];
    v49 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56);
    swift_retain();
    v49(v43, 0, 1, v45);
  }
  v50 = a3[9];
  v51 = a3[10];
  v52 = (_QWORD *)((char *)a1 + v50);
  v53 = (_QWORD *)((char *)a2 + v50);
  v54 = v53[1];
  *v52 = *v53;
  v52[1] = v54;
  v55 = (_QWORD *)((char *)a1 + v51);
  v56 = (_QWORD *)((char *)a2 + v51);
  v57 = v56[1];
  *v55 = *v56;
  v55[1] = v57;
  v58 = a3[11];
  v59 = (char *)a1 + v58;
  v60 = (char *)a2 + v58;
  v59[8] = v60[8];
  *(_QWORD *)v59 = *(_QWORD *)v60;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, int *);
  int v16;
  int v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  void (*v33)(char *, _QWORD, uint64_t, int *);
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(char *, uint64_t, uint64_t);
  int v44;
  int v45;
  void (*v46)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  void (*v74)(char *, char *, uint64_t);
  uint64_t v75;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v75 = *(_QWORD *)(v9 - 8);
  v74 = *(void (**)(char *, char *, uint64_t))(v75 + 24);
  v74(v7, v8, v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = (int *)type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier();
  v14 = *((_QWORD *)v13 - 1);
  v15 = *(uint64_t (**)(char *, uint64_t, int *))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v75 + 16))(v11, v12, v9);
      v18 = v13[5];
      v19 = &v11[v18];
      v20 = &v12[v18];
      *(_QWORD *)v19 = *(_QWORD *)v20;
      *((_QWORD *)v19 + 1) = *((_QWORD *)v20 + 1);
      v21 = v13[6];
      v22 = &v11[v21];
      v23 = &v12[v21];
      *(_QWORD *)v22 = *(_QWORD *)v23;
      *((_QWORD *)v22 + 1) = *((_QWORD *)v23 + 1);
      v24 = v13[7];
      v25 = &v11[v24];
      v26 = &v12[v24];
      *(_QWORD *)v25 = *(_QWORD *)v26;
      *((_QWORD *)v25 + 1) = *((_QWORD *)v26 + 1);
      v27 = v13[8];
      v28 = &v11[v27];
      v29 = &v12[v27];
      *(_QWORD *)v28 = *(_QWORD *)v29;
      *((_QWORD *)v28 + 1) = *((_QWORD *)v29 + 1);
      v30 = v13[9];
      v31 = &v11[v30];
      v32 = &v12[v30];
      *(_QWORD *)v31 = *(_QWORD *)v32;
      *((_QWORD *)v31 + 1) = *((_QWORD *)v32 + 1);
      v33 = *(void (**)(char *, _QWORD, uint64_t, int *))(v14 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v33(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier);
LABEL_6:
    v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_7;
  }
  v74(v11, v12, v9);
  v59 = v13[5];
  v60 = &v11[v59];
  v61 = &v12[v59];
  *(_QWORD *)v60 = *(_QWORD *)v61;
  *((_QWORD *)v60 + 1) = *((_QWORD *)v61 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v62 = v13[6];
  v63 = &v11[v62];
  v64 = &v12[v62];
  *(_QWORD *)v63 = *(_QWORD *)v64;
  *((_QWORD *)v63 + 1) = *((_QWORD *)v64 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v65 = v13[7];
  v66 = &v11[v65];
  v67 = &v12[v65];
  *(_QWORD *)v66 = *(_QWORD *)v67;
  *((_QWORD *)v66 + 1) = *((_QWORD *)v67 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v68 = v13[8];
  v69 = &v11[v68];
  v70 = &v12[v68];
  *(_QWORD *)v69 = *(_QWORD *)v70;
  *((_QWORD *)v69 + 1) = *((_QWORD *)v70 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v71 = v13[9];
  v72 = &v11[v71];
  v73 = &v12[v71];
  *(_QWORD *)v72 = *(_QWORD *)v73;
  *((_QWORD *)v72 + 1) = *((_QWORD *)v73 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_7:
  v35 = a3[7];
  v36 = (_QWORD *)((char *)a1 + v35);
  v37 = (_QWORD *)((char *)a2 + v35);
  *v36 = *v37;
  v36[1] = v37[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v38 = a3[8];
  v39 = (char *)a1 + v38;
  v40 = (char *)a2 + v38;
  v41 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0);
  v42 = *(_QWORD *)(v41 - 8);
  v43 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v42 + 48);
  v44 = v43(v39, 1, v41);
  v45 = v43(v40, 1, v41);
  if (!v44)
  {
    if (!v45)
    {
      v74(v39, v40, v9);
      *(_QWORD *)&v39[*(int *)(v41 + 20)] = *(_QWORD *)&v40[*(int *)(v41 + 20)];
      swift_retain();
      swift_release();
      goto LABEL_13;
    }
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v39, type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document);
    goto LABEL_12;
  }
  if (v45)
  {
LABEL_12:
    v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v75 + 16))(v39, v40, v9);
  *(_QWORD *)&v39[*(int *)(v41 + 20)] = *(_QWORD *)&v40[*(int *)(v41 + 20)];
  v46 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56);
  swift_retain();
  v46(v39, 0, 1, v41);
LABEL_13:
  v48 = a3[9];
  v49 = (_QWORD *)((char *)a1 + v48);
  v50 = (_QWORD *)((char *)a2 + v48);
  *v49 = *v50;
  v49[1] = v50[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v51 = a3[10];
  v52 = (_QWORD *)((char *)a1 + v51);
  v53 = (_QWORD *)((char *)a2 + v51);
  *v52 = *v53;
  v52[1] = v53[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v54 = a3[11];
  v55 = (char *)a1 + v54;
  v56 = (char *)a2 + v54;
  v57 = *(_QWORD *)v56;
  v55[8] = v56[8];
  *(_QWORD *)v55 = v57;
  return a1;
}

_QWORD *initializeWithTake for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = (int *)type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier();
  v15 = *((_QWORD *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v10(v12, v13, v9);
    *(_OWORD *)&v12[v14[5]] = *(_OWORD *)&v13[v14[5]];
    *(_OWORD *)&v12[v14[6]] = *(_OWORD *)&v13[v14[6]];
    *(_OWORD *)&v12[v14[7]] = *(_OWORD *)&v13[v14[7]];
    *(_OWORD *)&v12[v14[8]] = *(_OWORD *)&v13[v14[8]];
    *(_OWORD *)&v12[v14[9]] = *(_OWORD *)&v13[v14[9]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  v17 = a3[8];
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    v10(v18, v19, v9);
    *(_QWORD *)&v18[*(int *)(v20 + 20)] = *(_QWORD *)&v19[*(int *)(v20 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  v23 = a3[10];
  *(_OWORD *)((char *)a1 + a3[9]) = *(_OWORD *)((char *)a2 + a3[9]);
  *(_OWORD *)((char *)a1 + v23) = *(_OWORD *)((char *)a2 + v23);
  v24 = a3[11];
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  *(_QWORD *)v25 = *(_QWORD *)v26;
  v25[8] = v26[8];
  return a1;
}

_QWORD *assignWithTake for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, int *);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(char *, uint64_t, uint64_t);
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(char *, char *, uint64_t);
  uint64_t v73;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v73 = *(_QWORD *)(v9 - 8);
  v72 = *(void (**)(char *, char *, uint64_t))(v73 + 40);
  v72(v7, v8, v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = (int *)type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier();
  v14 = *((_QWORD *)v13 - 1);
  v15 = *(uint64_t (**)(char *, uint64_t, int *))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v11, v12, v9);
      *(_OWORD *)&v11[v13[5]] = *(_OWORD *)&v12[v13[5]];
      *(_OWORD *)&v11[v13[6]] = *(_OWORD *)&v12[v13[6]];
      *(_OWORD *)&v11[v13[7]] = *(_OWORD *)&v12[v13[7]];
      *(_OWORD *)&v11[v13[8]] = *(_OWORD *)&v12[v13[8]];
      *(_OWORD *)&v11[v13[9]] = *(_OWORD *)&v12[v13[9]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier);
LABEL_6:
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  v72(v11, v12, v9);
  v47 = v13[5];
  v48 = &v11[v47];
  v49 = &v12[v47];
  v51 = *(_QWORD *)v49;
  v50 = *((_QWORD *)v49 + 1);
  *(_QWORD *)v48 = v51;
  *((_QWORD *)v48 + 1) = v50;
  swift_bridgeObjectRelease();
  v52 = v13[6];
  v53 = &v11[v52];
  v54 = &v12[v52];
  v56 = *(_QWORD *)v54;
  v55 = *((_QWORD *)v54 + 1);
  *(_QWORD *)v53 = v56;
  *((_QWORD *)v53 + 1) = v55;
  swift_bridgeObjectRelease();
  v57 = v13[7];
  v58 = &v11[v57];
  v59 = &v12[v57];
  v61 = *(_QWORD *)v59;
  v60 = *((_QWORD *)v59 + 1);
  *(_QWORD *)v58 = v61;
  *((_QWORD *)v58 + 1) = v60;
  swift_bridgeObjectRelease();
  v62 = v13[8];
  v63 = &v11[v62];
  v64 = &v12[v62];
  v66 = *(_QWORD *)v64;
  v65 = *((_QWORD *)v64 + 1);
  *(_QWORD *)v63 = v66;
  *((_QWORD *)v63 + 1) = v65;
  swift_bridgeObjectRelease();
  v67 = v13[9];
  v68 = &v11[v67];
  v69 = &v12[v67];
  v71 = *(_QWORD *)v69;
  v70 = *((_QWORD *)v69 + 1);
  *(_QWORD *)v68 = v71;
  *((_QWORD *)v68 + 1) = v70;
  swift_bridgeObjectRelease();
LABEL_7:
  v19 = a3[7];
  v20 = (_QWORD *)((char *)a1 + v19);
  v21 = (_QWORD *)((char *)a2 + v19);
  v23 = *v21;
  v22 = v21[1];
  *v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease();
  v24 = a3[8];
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  v27 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48);
  v30 = v29(v25, 1, v27);
  v31 = v29(v26, 1, v27);
  if (!v30)
  {
    if (!v31)
    {
      v72(v25, v26, v9);
      *(_QWORD *)&v25[*(int *)(v27 + 20)] = *(_QWORD *)&v26[*(int *)(v27 + 20)];
      swift_release();
      goto LABEL_13;
    }
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v25, type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document);
    goto LABEL_12;
  }
  if (v31)
  {
LABEL_12:
    v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v25, v26, v9);
  *(_QWORD *)&v25[*(int *)(v27 + 20)] = *(_QWORD *)&v26[*(int *)(v27 + 20)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
LABEL_13:
  v33 = a3[9];
  v34 = (_QWORD *)((char *)a1 + v33);
  v35 = (_QWORD *)((char *)a2 + v33);
  v37 = *v35;
  v36 = v35[1];
  *v34 = v37;
  v34[1] = v36;
  swift_bridgeObjectRelease();
  v38 = a3[10];
  v39 = (_QWORD *)((char *)a1 + v38);
  v40 = (_QWORD *)((char *)a2 + v38);
  v42 = *v40;
  v41 = v40[1];
  *v39 = v42;
  v39[1] = v41;
  swift_bridgeObjectRelease();
  v43 = a3[11];
  v44 = (char *)a1 + v43;
  v45 = (char *)a2 + v43;
  *(_QWORD *)v44 = *(_QWORD *)v45;
  v44[8] = v45[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2283E864C(char *a1, uint64_t a2, int *a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[5];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[6];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a3[8];
      }
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_2283E8724(char *result, uint64_t a2, int a3, int *a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[5];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[6];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[8];
      }
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void type metadata completion function for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent?(319, &lazy cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?, (void (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier);
    if (v1 <= 0x3F)
    {
      type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent?(319, &lazy cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?, (void (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t DUBackboneEncodingSmolBERToImplementation.__allocating_init()()
{
  return swift_allocObject();
}

BOOL static BuildSmolBERToHeadInputError.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void BuildSmolBERToHeadInputError.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

Swift::Int BuildSmolBERToHeadInputError.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

unint64_t static DUBackboneEncodingSmolBERToImplementation.implementationID.getter()
{
  return 0xD00000000000002ALL;
}

uint64_t static DUBackboneEncodingSmolBERToImplementation.specification.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for DUBackboneEncodingSmolBERToSpecification();
  result = swift_allocObject();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for DUBackboneEncodingSmolBERToSpecification;
  *a1 = result;
  return result;
}

void *static DUBackboneEncodingSmolBERToImplementation.implementationAttributes.getter()
{
  return &outlined read-only object #0 of static DUBackboneEncodingSmolBERToImplementation.implementationAttributes.getter;
}

uint64_t DUBackboneEncodingSmolBERToImplementation.runTypedOnRequest(request:)()
{
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
  v1 = swift_allocError();
  *(_QWORD *)v2 = 0xD00000000000001ALL;
  *(_QWORD *)(v2 + 8) = 0x80000002284DD7C0;
  *(_BYTE *)(v2 + 16) = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, 1);
}

uint64_t DUBackboneEncodingSmolBERToImplementation.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t DUBackboneEncodingSmolBERToImplementation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t DUBackboneEncodingSmolBERToImplementation.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t protocol witness for static DUProcessingPhaseImplementation.specification.getter in conformance DUBackboneEncodingSmolBERToImplementation@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for DUBackboneEncodingSmolBERToSpecification();
  result = swift_allocObject();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for DUBackboneEncodingSmolBERToSpecification;
  *a1 = result;
  return result;
}

unint64_t protocol witness for static DUProcessingPhaseImplementation.implementationID.getter in conformance DUBackboneEncodingSmolBERToImplementation()
{
  return 0xD00000000000002ALL;
}

void *protocol witness for static DUProcessingPhaseImplementation.implementationAttributes.getter in conformance DUBackboneEncodingSmolBERToImplementation()
{
  return &outlined read-only object #0 of protocol witness for static DUProcessingPhaseImplementation.implementationAttributes.getter in conformance DUBackboneEncodingSmolBERToImplementation;
}

uint64_t protocol witness for DUProcessingPhaseImplementation.runTypedOnRequest(request:) in conformance DUBackboneEncodingSmolBERToImplementation(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  *(_QWORD *)(v3 + 16) = a1;
  v7 = (uint64_t (*)(uint64_t))(**(int **)(**(_QWORD **)v2 + 96) + *(_QWORD *)(**(_QWORD **)v2 + 96));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v5;
  *v5 = v3;
  v5[1] = protocol witness for DUProcessingPhaseImplementation.runTypedOnRequest(request:) in conformance DUCategoryClassificationSmolBERToImplementation;
  return v7(a2);
}

_UNKNOWN **associated type witness table accessor for DUProcessingPhaseImplementation.SpecificationType : DUProcessingPhaseSpecification in DUBackboneEncodingSmolBERToImplementation()
{
  return &protocol witness table for DUBackboneEncodingSmolBERToSpecification;
}

uint64_t storeEnumTagSinglePayload for BuildSmolBERToHeadInputError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2283E8BD8 + 4 * byte_2284C74D5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2283E8C0C + 4 * byte_2284C74D0[v4]))();
}

uint64_t sub_2283E8C0C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2283E8C14(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2283E8C1CLL);
  return result;
}

uint64_t sub_2283E8C28(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2283E8C30);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2283E8C34(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2283E8C3C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BuildSmolBERToHeadInputError()
{
  return &type metadata for BuildSmolBERToHeadInputError;
}

uint64_t type metadata accessor for DUBackboneEncodingSmolBERToImplementation()
{
  return objc_opt_self();
}

uint64_t static TextUnderstandingManagerError.__derived_enum_equals(_:_:)()
{
  return 1;
}

void TextUnderstandingManagerError.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int TextUnderstandingManagerError.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

id one-time initialization function for shared()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for TextUnderstandingManager()), sel_init);
  static TextUnderstandingManager.shared = (uint64_t)result;
  return result;
}

uint64_t *TextUnderstandingManager.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return &static TextUnderstandingManager.shared;
}

id static TextUnderstandingManager.shared.getter()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return (id)static TextUnderstandingManager.shared;
}

id TextUnderstandingManager.().init()()
{
  char *v0;
  uint64_t v1;
  id v2;
  char *v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  objc_super v10;

  v1 = OBJC_IVAR____TtC21DocumentUnderstanding24TextUnderstandingManager_queue;
  v2 = objc_allocWithZone(MEMORY[0x24BDD1710]);
  v3 = v0;
  v4 = objc_msgSend(v2, sel_init);
  *(_QWORD *)&v0[v1] = v4;
  *(_QWORD *)&v3[OBJC_IVAR____TtC21DocumentUnderstanding24TextUnderstandingManager____lazy_storage___client] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC21DocumentUnderstanding24TextUnderstandingManager____lazy_storage___updater] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC21DocumentUnderstanding24TextUnderstandingManager____lazy_storage___bulkupdater] = 0;
  v5 = v4;
  v6 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000028, 0x80000002284E0500);
  objc_msgSend(v5, sel_setName_, v6);

  v7 = *(void **)&v0[v1];
  objc_msgSend(v7, sel_setMaxConcurrentOperationCount_, 1);
  v8 = v7;
  objc_msgSend(v8, sel_setQualityOfService_, 9);

  v10.receiver = v3;
  v10.super_class = (Class)type metadata accessor for TextUnderstandingManager();
  return objc_msgSendSuper2(&v10, sel_init);
}

id TextUnderstandingManager.client.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  id v5;
  id v6;
  void *v7;
  id v8;

  v1 = OBJC_IVAR____TtC21DocumentUnderstanding24TextUnderstandingManager____lazy_storage___client;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding24TextUnderstandingManager____lazy_storage___client);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding24TextUnderstandingManager____lazy_storage___client);
  }
  else
  {
    v4 = v0;
    v5 = objc_allocWithZone((Class)type metadata accessor for DUClient());
    v6 = DUClient.init(identifier:)(0xD000000000000030, 0x80000002284E04C0);
    v7 = *(void **)(v0 + v1);
    *(_QWORD *)(v4 + v1) = v6;
    v3 = v6;

    v2 = 0;
  }
  v8 = v2;
  return v3;
}

id TextUnderstandingManager.updater.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  id v9;

  v1 = OBJC_IVAR____TtC21DocumentUnderstanding24TextUnderstandingManager____lazy_storage___updater;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding24TextUnderstandingManager____lazy_storage___updater);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding24TextUnderstandingManager____lazy_storage___updater);
  }
  else
  {
    v4 = v0;
    v5 = TextUnderstandingManager.client.getter();
    v6 = objc_allocWithZone((Class)type metadata accessor for DUDocumentUpdater());
    v7 = specialized DUDocumentUpdater.init(client:)(v5);

    v8 = *(void **)(v4 + v1);
    *(_QWORD *)(v4 + v1) = v7;
    v3 = v7;

    v2 = 0;
  }
  v9 = v2;
  return v3;
}

id TextUnderstandingManager.bulkupdater.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC21DocumentUnderstanding24TextUnderstandingManager____lazy_storage___bulkupdater;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding24TextUnderstandingManager____lazy_storage___bulkupdater);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding24TextUnderstandingManager____lazy_storage___bulkupdater);
  }
  else
  {
    v4 = closure #1 in TextUnderstandingManager.bulkupdater.getter();
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id closure #1 in TextUnderstandingManager.bulkupdater.getter()
{
  id v0;
  objc_class *v1;
  char *v2;
  char *v3;
  id v4;
  char *v5;
  uint64_t v6;
  char *v7;
  id v8;
  objc_super v10;

  v0 = TextUnderstandingManager.client.getter();
  v1 = (objc_class *)type metadata accessor for DUBulkUpdater();
  v2 = (char *)objc_allocWithZone(v1);
  v3 = &v2[OBJC_IVAR____TtC21DocumentUnderstanding13DUBulkUpdater_documentNamespace];
  *(_QWORD *)v3 = 0xD000000000000028;
  *((_QWORD *)v3 + 1) = 0x80000002284DCDC0;
  *(_QWORD *)&v2[OBJC_IVAR____TtC21DocumentUnderstanding13DUBulkUpdater_client] = v0;
  type metadata accessor for PoemAggregationModelHandler();
  swift_allocObject();
  v4 = v0;
  v5 = v2;
  v6 = PoemAggregationModelHandler.init()();
  v7 = &v5[OBJC_IVAR____TtC21DocumentUnderstanding13DUBulkUpdater_poemOnBoardHandler];
  *(_QWORD *)v7 = v4;
  *((_QWORD *)v7 + 1) = v6;

  v10.receiver = v5;
  v10.super_class = v1;
  v8 = objc_msgSendSuper2(&v10, sel_init);

  return v8;
}

uint64_t TextUnderstandingManager.ping(withReply:)(uint64_t (*a1)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v11;

  v2 = type metadata accessor for Logger();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Logger.init()();
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_2282CC000, v6, v7, "Received ping \n", v8, 2u);
    MEMORY[0x22E2B117C](v8, -1, -1);
  }

  v9 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return a1(v9);
}

uint64_t TextUnderstandingManager.triggerSpotlightFileUpdateNoArgs(withReply:)(uint64_t (*a1)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  void (*v12)(char *, uint64_t);
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v18;

  v2 = type metadata accessor for Logger();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v18 - v7;
  Logger.init()();
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_2282CC000, v9, v10, "DocumentUnderstanding: triggerSpotlightFileUpdateNoArgs in manager called", v11, 2u);
    MEMORY[0x22E2B117C](v11, -1, -1);
  }

  v12 = *(void (**)(char *, uint64_t))(v3 + 8);
  v12(v8, v2);
  Logger.init()();
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_2282CC000, v13, v14, "(TextUnderstandingManager) SearchAndOrganizationDocumentIngest is off.  Skipping triggerSpotlightFileUpdateNoArgs", v15, 2u);
    MEMORY[0x22E2B117C](v15, -1, -1);
  }

  v16 = ((uint64_t (*)(char *, uint64_t))v12)(v6, v2);
  return a1(v16);
}

void @objc TextUnderstandingManager.ping(withReply:)(void *a1, int a2, void *aBlock, void (*a4)(void *))
{
  void *v6;
  id v7;

  v6 = _Block_copy(aBlock);
  _Block_copy(v6);
  v7 = a1;
  a4(v6);
  _Block_release(v6);
  _Block_release(v6);

}

uint64_t TextUnderstandingManager.addOrUpdateSearchableItems(_:bundleID:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  void (*v15)(char *, uint64_t);
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v20;

  v5 = type metadata accessor for Logger();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v20 - v10;
  Logger.init()();
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_2282CC000, v12, v13, "DocumentUnderstanding - Server addOrUpdateSearchableItems called", v14, 2u);
    MEMORY[0x22E2B117C](v14, -1, -1);
  }

  v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  v15(v11, v5);
  Logger.init()();
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v18 = 0;
    _os_log_impl(&dword_2282CC000, v16, v17, "(TextUnderstandingManager) SearchAndOrganizationDocumentIngest is off.  Skipping addOrUpdateSearchableItems", v18, 2u);
    MEMORY[0x22E2B117C](v18, -1, -1);
  }

  v15(v9, v5);
  return a4(0);
}

void thunk for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id v4;

  if (a1)
    v3 = _convertErrorToNSError(_:)();
  else
    v3 = 0;
  v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);

}

void TextUnderstandingManager.addSerializedDocument(_:documentType:completion:)(uint64_t a1, unint64_t a2, uint64_t a3, void (*a4)(_QWORD), uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  void (*v19)(char *, uint64_t);
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  unint64_t v30;
  void (*v31)(_QWORD);
  uint64_t v32;
  _QWORD aBlock[6];

  v6 = v5;
  v31 = a4;
  v32 = a5;
  v30 = a2;
  v9 = type metadata accessor for Logger();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v29 - v14;
  Logger.init()();
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v18 = 0;
    _os_log_impl(&dword_2282CC000, v16, v17, "(TextUnderstandingManager) addSerializedDocument called", v18, 2u);
    MEMORY[0x22E2B117C](v18, -1, -1);
  }

  v19 = *(void (**)(char *, uint64_t))(v10 + 8);
  v19(v15, v9);
  if (a3 == 1)
  {
    v20 = *(void **)(v6 + OBJC_IVAR____TtC21DocumentUnderstanding24TextUnderstandingManager_queue);
    v21 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v22 = (_QWORD *)swift_allocObject();
    v22[2] = v21;
    v22[3] = a1;
    v23 = v30;
    v22[4] = v30;
    v22[5] = 1;
    v24 = v32;
    v22[6] = v31;
    v22[7] = v24;
    aBlock[4] = partial apply for closure #1 in TextUnderstandingManager.addSerializedDocument(_:documentType:completion:);
    aBlock[5] = v22;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_10;
    v25 = _Block_copy(aBlock);
    outlined copy of Data._Representation(a1, v23);
    swift_retain();
    swift_release();
    objc_msgSend(v20, sel_addOperationWithBlock_, v25);
    _Block_release(v25);
  }
  else
  {
    Logger.init()();
    v26 = Logger.logObject.getter();
    v27 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v28 = 0;
      _os_log_impl(&dword_2282CC000, v26, v27, "(TextUnderstandingManager) SearchAndOrganizationDocumentIngest is off, and document type is not messages.  Skipping addSerializedDocument", v28, 2u);
      MEMORY[0x22E2B117C](v28, -1, -1);
    }

    v19(v13, v9);
    v31(0);
  }
}

void closure #1 in TextUnderstandingManager.addSerializedDocument(_:documentType:completion:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  dispatch_semaphore_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  _QWORD *v20;
  NSObject *v21;
  uint64_t v22;

  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1 + 16;
  v16 = dispatch_semaphore_create(0);
  v17 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v14, 1, 1, v17);
  v18 = swift_allocObject();
  swift_beginAccess();
  v19 = (void *)MEMORY[0x22E2B1224](v15);
  swift_unknownObjectWeakInit();

  v20 = (_QWORD *)swift_allocObject();
  v20[2] = 0;
  v20[3] = 0;
  v20[4] = v18;
  v20[5] = a2;
  v20[6] = a3;
  v20[7] = a4;
  v20[8] = a5;
  v20[9] = a6;
  v20[10] = v16;
  outlined copy of Data._Representation(a2, a3);
  swift_retain();
  v21 = v16;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v14, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in TextUnderstandingManager.addSerializedDocument(_:documentType:completion:), (uint64_t)v20);
  swift_release();
  OS_dispatch_semaphore.wait()();

}

uint64_t closure #1 in closure #1 in TextUnderstandingManager.addSerializedDocument(_:documentType:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;

  v8[10] = v10;
  v8[11] = v11;
  v8[8] = a7;
  v8[9] = a8;
  v8[6] = a5;
  v8[7] = a6;
  v8[5] = a4;
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in TextUnderstandingManager.addSerializedDocument(_:documentType:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  _QWORD *v4;
  int *v5;
  _QWORD *v6;
  int *v8;

  v1 = *(_QWORD *)(v0 + 40) + 16;
  swift_beginAccess();
  v2 = MEMORY[0x22E2B1224](v1);
  if (v2)
  {
    v3 = (void *)v2;
    v4 = TextUnderstandingManager.updater.getter();
    *(_QWORD *)(v0 + 96) = v4;

    v5 = *(int **)((*MEMORY[0x24BEE4EA0] & *v4) + 0xA0);
    v8 = (int *)((char *)v5 + *v5);
    v6 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 104) = v6;
    *v6 = v0;
    v6[1] = closure #1 in closure #1 in TextUnderstandingManager.addSerializedDocument(_:documentType:completion:);
    return ((uint64_t (*)(_QWORD, _QWORD, _QWORD))v8)(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  }
  else
  {
    (*(void (**)(void))(v0 + 72))();
    OS_dispatch_semaphore.signal()();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 112) = v0;
  swift_task_dealloc();
  if (!v0)

  return swift_task_switch();
}

{
  uint64_t v0;

  (*(void (**)(_QWORD))(v0 + 72))(0);
  OS_dispatch_semaphore.signal()();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  void (*v2)(void *);
  id v3;

  v1 = *(void **)(v0 + 112);
  v2 = *(void (**)(void *))(v0 + 72);

  v3 = v1;
  v2(v1);

  OS_dispatch_semaphore.signal()();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void TextUnderstandingManager.foundInEventResult(withSerializedDocument:documentType:completion:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  id v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD aBlock[6];

  v22 = a4;
  v23 = a3;
  v8 = type metadata accessor for Logger();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  Logger.init()();
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_2282CC000, v12, v13, "(TextUnderstandingManager) foundInEventsResponseForSerializedDocument called", v14, 2u);
    MEMORY[0x22E2B117C](v14, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1710]), sel_init);
  v16 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000036, 0x80000002284E0340);
  objc_msgSend(v15, sel_setName_, v16);

  objc_msgSend(v15, sel_setMaxConcurrentOperationCount_, 1);
  v17 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v18 = (_QWORD *)swift_allocObject();
  v19 = v22;
  v18[2] = v17;
  v18[3] = v19;
  v18[4] = a5;
  v18[5] = a1;
  v20 = v23;
  v18[6] = a2;
  v18[7] = v20;
  aBlock[4] = partial apply for closure #1 in TextUnderstandingManager.foundInEventResult(withSerializedDocument:documentType:completion:);
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_10;
  v21 = _Block_copy(aBlock);
  swift_retain();
  outlined copy of Data._Representation(a1, a2);
  swift_release();
  objc_msgSend(v15, sel_addOperationWithBlock_, v21);
  _Block_release(v21);

}

void closure #1 in TextUnderstandingManager.foundInEventResult(withSerializedDocument:documentType:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  dispatch_semaphore_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  _QWORD *v20;
  NSObject *v21;
  uint64_t v22;

  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1 + 16;
  v16 = dispatch_semaphore_create(0);
  v17 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v14, 1, 1, v17);
  v18 = swift_allocObject();
  swift_beginAccess();
  v19 = (void *)MEMORY[0x22E2B1224](v15);
  swift_unknownObjectWeakInit();

  v20 = (_QWORD *)swift_allocObject();
  v20[2] = 0;
  v20[3] = 0;
  v20[4] = v18;
  v20[5] = a2;
  v20[6] = a3;
  v20[7] = a4;
  v20[8] = a5;
  v20[9] = a6;
  v20[10] = v16;
  swift_retain();
  outlined copy of Data._Representation(a4, a5);
  v21 = v16;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v14, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in TextUnderstandingManager.foundInEventResult(withSerializedDocument:documentType:completion:), (uint64_t)v20);
  swift_release();
  OS_dispatch_semaphore.wait()();

}

uint64_t closure #1 in closure #1 in TextUnderstandingManager.foundInEventResult(withSerializedDocument:documentType:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;

  v8[14] = v10;
  v8[15] = v11;
  v8[12] = a7;
  v8[13] = a8;
  v8[10] = a5;
  v8[11] = a6;
  v8[9] = a4;
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in TextUnderstandingManager.foundInEventResult(withSerializedDocument:documentType:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  id v6;
  objc_class *v7;
  char *v8;
  id v9;
  objc_class *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  void (*v14)(id, void *);
  id v15;
  void *v16;
  _QWORD *v17;
  id v18;
  _QWORD *v19;
  uint64_t v20;
  int *v21;
  _QWORD *v22;
  uint64_t (*v24)(uint64_t);

  v1 = *(_QWORD *)(v0 + 72) + 16;
  swift_beginAccess();
  v2 = MEMORY[0x22E2B1224](v1);
  *(_QWORD *)(v0 + 128) = v2;
  if (v2)
  {
    v4 = *(_QWORD *)(v0 + 104);
    v3 = *(_QWORD *)(v0 + 112);
    v5 = *(_QWORD *)(v0 + 96);
    v6 = TextUnderstandingManager.client.getter();
    v7 = (objc_class *)type metadata accessor for DURequestContentType();
    v8 = (char *)objc_allocWithZone(v7);
    *(_QWORD *)&v8[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = 2048;
    *(_QWORD *)(v0 + 40) = v8;
    *(_QWORD *)(v0 + 48) = v7;
    v9 = objc_msgSendSuper2((objc_super *)(v0 + 40), sel_init);
    v10 = (objc_class *)type metadata accessor for DURequest();
    v11 = (char *)objc_allocWithZone(v10);
    *(_QWORD *)&v11[OBJC_IVAR____TtC21DocumentUnderstanding9DURequest_client] = v6;
    *(_QWORD *)&v11[OBJC_IVAR____TtC21DocumentUnderstanding9DURequest_contentType] = v9;
    *(_QWORD *)&v11[OBJC_IVAR____TtC21DocumentUnderstanding9DURequest_strategies] = 0;
    *(_QWORD *)(v0 + 56) = v11;
    *(_QWORD *)(v0 + 64) = v10;
    v12 = objc_msgSendSuper2((objc_super *)(v0 + 56), sel_init);
    *(_QWORD *)(v0 + 136) = v12;
    v13 = specialized static HarvestingDocumentNormalization.normalizeDocument(documentData:documentType:)(v5, v4, v3);
    *(_QWORD *)(v0 + 144) = v13;
    v17 = (_QWORD *)v13;

    v19 = (_QWORD *)MEMORY[0x24BEE4EA0];
    v20 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v17) + 0xB8))();
    *(_QWORD *)(v0 + 152) = v20;
    v21 = *(int **)((*v19 & *v12) + 0x70);
    v24 = (uint64_t (*)(uint64_t))((char *)v21 + *v21);
    v22 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 160) = v22;
    *v22 = v0;
    v22[1] = closure #1 in closure #1 in TextUnderstandingManager.foundInEventResult(withSerializedDocument:documentType:completion:);
    return v24(v20);
  }
  else
  {
    v14 = *(void (**)(id, void *))(v0 + 80);
    v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE2E0A8]), sel_init);
    lazy protocol witness table accessor for type TextUnderstandingManagerError and conformance TextUnderstandingManagerError();
    v16 = (void *)swift_allocError();
    v14(v15, v16);

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  void *v35;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  void (*v51)(id, _QWORD);
  void *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  char v68;

  v1 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v2 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 168)) + 0x110))();
  if (v2)
  {
    v3 = v2;
    v68 = (*(uint64_t (**)(void))((*v1 & *v2) + 0x128))();
    v67 = (void *)(*(uint64_t (**)(void))((*v1 & *v3) + 0x140))();
    v4 = (*(uint64_t (**)(void))((*v1 & *v3) + 0x158))();
    v65 = v5;
    v66 = v4;
    v64 = (void *)(*(uint64_t (**)(void))((*v1 & *v3) + 0x170))();
    v6 = (*(uint64_t (**)(void))((*v1 & *v3) + 0x188))();
    v62 = v7;
    v63 = v6;
    v61 = (void *)(*(uint64_t (**)(void))((*v1 & *v3) + 0x230))();
    v8 = (*(uint64_t (**)(void))((*v1 & *v3) + 0x248))();
    v59 = v9;
    v60 = v8;
    v10 = (*(uint64_t (**)(void))((*v1 & *v3) + 0x260))();
    if (v10)
    {
      v58 = specialized _dictionaryUpCast<A, B, C, D>(_:)(v10);
      v10 = swift_bridgeObjectRelease();
    }
    else
    {
      v58 = 0;
    }
    v57 = (void *)(*(uint64_t (**)(uint64_t))((*v1 & *v3) + 0x278))(v10);
    v13 = (*(uint64_t (**)(void))((*v1 & *v3) + 0x290))();
    v55 = v14;
    v56 = v13;
    v15 = (*(uint64_t (**)(void))((*v1 & *v3) + 0x2A8))();
    if (v15)
    {
      v50 = specialized _dictionaryUpCast<A, B, C, D>(_:)(v15);
      v15 = swift_bridgeObjectRelease();
    }
    else
    {
      v50 = 0;
    }
    v54 = *(void **)(v0 + 144);
    v52 = *(void **)(v0 + 168);
    v53 = *(void **)(v0 + 136);
    v51 = *(void (**)(id, _QWORD))(v0 + 80);
    v49 = (void *)(*(uint64_t (**)(uint64_t))((*v1 & *v3) + 0x2C0))(v15);
    v48 = (*(uint64_t (**)(void))((*v1 & *v3) + 0x2D8))();
    v47 = v16;
    v46 = (void *)(*(uint64_t (**)(void))((*v1 & *v3) + 0x2F0))();
    v17 = (*(uint64_t (**)(void))((*v1 & *v3) + 0x308))();
    v44 = v18;
    v45 = v17;
    v43 = (void *)(*(uint64_t (**)(void))((*v1 & *v3) + 0x320))();
    v19 = (*(uint64_t (**)(void))((*v1 & *v3) + 0x338))();
    v41 = v20;
    v42 = v19;
    v40 = (void *)(*(uint64_t (**)(void))((*v1 & *v3) + 0x350))();
    v21 = (*(uint64_t (**)(void))((*v1 & *v3) + 0x368))();
    v38 = v22;
    v39 = v21;
    v37 = (void *)(*(uint64_t (**)(void))((*v1 & *v3) + 0x1A0))();
    v23 = (*(uint64_t (**)(void))((*v1 & *v3) + 0x1B8))();
    v25 = v24;
    v26 = (void *)(*(uint64_t (**)(void))((*v1 & *v3) + 0x1D0))();
    v27 = (*(uint64_t (**)(void))((*v1 & *v3) + 0x1E8))();
    v29 = v28;
    v30 = (void *)(*(uint64_t (**)(void))((*v1 & *v3) + 0x200))();
    v31 = (*(uint64_t (**)(void))((*v1 & *v3) + 0x218))();
    v33 = v32;
    v34 = objc_allocWithZone(MEMORY[0x24BE2E0A8]);
    v12 = @nonobjc DUFoundInEventClientAbstractResult.init(fields:reservationIdError:reservationId:reservationNameError:reservationName:startAddressError:startAddress:startAddressComponents:endAddressError:endAddress:endAddressComponents:startPlaceError:startPlace:endPlaceError:endPlace:startDateError:startDate:endDateError:endDate:hotelNameError:hotelName:guestNameError:guestName:movieNameError:movieName:)(v68 & 1, v67, v66, v65, v64, v63, v62, v61, v60, v59, v58, v57, v56, v55, v50, v49, v48, v47, v46,
            v45,
            v44,
            v43,
            v42,
            v41,
            v40,
            v39,
            v38,
            v37,
            v23,
            v25,
            v26,
            v27,
            v29,
            v30,
            v31,
            v33);
    v51(v12, 0);

    v11 = v53;
  }
  else
  {
    v11 = *(void **)(v0 + 168);
    v3 = *(_QWORD **)(v0 + 136);
    v12 = *(id *)(v0 + 144);
  }

  v35 = *(void **)(v0 + 128);
  OS_dispatch_semaphore.signal()();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void (*v4)(id, void *);
  id v5;
  id v6;
  void *v7;

  v1 = *(void **)(v0 + 152);
  v2 = *(void **)(v0 + 136);

  v3 = *(void **)(v0 + 176);
  v4 = *(void (**)(id, void *))(v0 + 80);

  v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE2E0A8]), sel_init);
  v6 = v3;
  v4(v5, v3);

  v7 = *(void **)(v0 + 128);
  OS_dispatch_semaphore.signal()();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in TextUnderstandingManager.foundInEventResult(withSerializedDocument:documentType:completion:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 168) = a1;
  *(_QWORD *)(v3 + 176) = v1;
  swift_task_dealloc();
  if (!v1)

  return swift_task_switch();
}

Swift::Void __swiftcall TextUnderstandingManager.onBoardPoem()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  _QWORD aBlock[6];

  v1 = v0;
  v2 = type metadata accessor for Logger();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Logger.init()();
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_2282CC000, v6, v7, "DocumentUnderstanding: onBoardPoem in manager called", v8, 2u);
    MEMORY[0x22E2B117C](v8, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v9 = *(void **)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding24TextUnderstandingManager_queue);
  v10 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = partial apply for closure #1 in TextUnderstandingManager.onBoardPoem();
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_14_0;
  v11 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v9, sel_addOperationWithBlock_, v11);
  _Block_release(v11);
}

void closure #1 in TextUnderstandingManager.onBoardPoem()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  dispatch_semaphore_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  NSObject *v11;
  uint64_t v12;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = a1 + 16;
  v6 = dispatch_semaphore_create(0);
  v7 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v4, 1, 1, v7);
  v8 = swift_allocObject();
  swift_beginAccess();
  v9 = (void *)MEMORY[0x22E2B1224](v5);
  swift_unknownObjectWeakInit();

  v10 = (_QWORD *)swift_allocObject();
  v10[2] = 0;
  v10[3] = 0;
  v10[4] = v8;
  v10[5] = v6;
  v11 = v6;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v4, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in TextUnderstandingManager.onBoardPoem(), (uint64_t)v10);
  swift_release();
  OS_dispatch_semaphore.wait()();

}

uint64_t closure #1 in closure #1 in TextUnderstandingManager.onBoardPoem()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;

  v5[6] = a4;
  v5[7] = a5;
  v6 = type metadata accessor for Logger();
  v5[8] = v6;
  v5[9] = *(_QWORD *)(v6 - 8);
  v5[10] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in TextUnderstandingManager.onBoardPoem()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  char *v4;
  char *v5;
  void *v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;

  v1 = *(_QWORD *)(v0 + 48) + 16;
  swift_beginAccess();
  v2 = MEMORY[0x22E2B1224](v1);
  if (v2)
  {
    v3 = (void *)v2;
    v4 = (char *)TextUnderstandingManager.bulkupdater.getter();

    v5 = &v4[OBJC_IVAR____TtC21DocumentUnderstanding13DUBulkUpdater_poemOnBoardHandler];
    v6 = *(void **)&v4[OBJC_IVAR____TtC21DocumentUnderstanding13DUBulkUpdater_poemOnBoardHandler];
    *(_QWORD *)(v0 + 88) = v6;
    v7 = *((_QWORD *)v5 + 1);
    *(_QWORD *)(v0 + 96) = v7;
    swift_retain();
    v8 = v6;

    v9 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 104) = v9;
    *v9 = v0;
    v9[1] = closure #1 in closure #1 in TextUnderstandingManager.onBoardPoem();
    return PoemOnBoardHandler.onBoard()((uint64_t)v8, v7);
  }
  else
  {
    OS_dispatch_semaphore.signal()();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 112) = v0;
  swift_task_dealloc();
  if (!v0)
  {

    swift_release();
  }
  return swift_task_switch();
}

{
  uint64_t v0;

  OS_dispatch_semaphore.signal()();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint8_t *v7;
  _QWORD *v8;
  id v9;
  uint64_t v10;
  void *v11;

  v1 = *(void **)(v0 + 112);

  swift_release();
  Logger.init()();
  v2 = v1;
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(void **)(v0 + 112);
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v7 = 138412290;
    v9 = v6;
    v10 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 40) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v8 = v10;

    _os_log_impl(&dword_2282CC000, v4, v5, "DocumentUnderstanding - onBoardPoem: Received error %@", v7, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x22E2B117C](v8, -1, -1);
    MEMORY[0x22E2B117C](v7, -1, -1);

  }
  else
  {
    v11 = *(void **)(v0 + 112);

  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));
  OS_dispatch_semaphore.signal()();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Void __swiftcall TextUnderstandingManager.incrementallyUpdatePoem()()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  char *v12;
  _QWORD aBlock[6];

  v1 = v0;
  v2 = type metadata accessor for Logger();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Logger.init()();
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_2282CC000, v6, v7, "DocumentUnderstanding: triggerIncrementalPoemUpdate in manager called", v8, 2u);
    MEMORY[0x22E2B117C](v8, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v9 = *(void **)&v1[OBJC_IVAR____TtC21DocumentUnderstanding24TextUnderstandingManager_queue];
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v1;
  aBlock[4] = partial apply for closure #1 in TextUnderstandingManager.incrementallyUpdatePoem();
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_20;
  v11 = _Block_copy(aBlock);
  v12 = v1;
  swift_release();
  objc_msgSend(v9, sel_addOperationWithBlock_, v11);
  _Block_release(v11);
}

id TextUnderstandingManager.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TextUnderstandingManager();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id @nonobjc DUFoundInEventClientAbstractResult.init(fields:reservationIdError:reservationId:reservationNameError:reservationName:startAddressError:startAddress:startAddressComponents:endAddressError:endAddress:endAddressComponents:startPlaceError:startPlace:endPlaceError:endPlace:startDateError:startDate:endDateError:endDate:hotelNameError:hotelName:guestNameError:guestName:movieNameError:movieName:)(char a1, void *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36)
{
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  void *v56;
  void *v57;
  void *v58;
  uint64_t v59;
  void *v60;
  void *v61;
  void *v62;
  uint64_t v63;
  void *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  void *v68;
  void *v69;
  void *v71;
  void *v72;
  NSDictionary v73;
  void *v74;
  void *v75;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  id v83;
  void *v84;
  void *v85;
  void *v86;
  NSDictionary v87;
  void *v88;

  if (a2)
  {
    v81 = (void *)_convertErrorToNSError(_:)();

    if (a4)
      goto LABEL_3;
  }
  else
  {
    v81 = 0;
    if (a4)
    {
LABEL_3:
      v80 = (void *)MEMORY[0x22E2AF8EC](a3, a4);
      swift_bridgeObjectRelease();
      if (a5)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  v80 = 0;
  if (a5)
  {
LABEL_4:
    v79 = (void *)_convertErrorToNSError(_:)();

    if (a7)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  v79 = 0;
  if (a7)
  {
LABEL_5:
    v78 = (void *)MEMORY[0x22E2AF8EC](a6, a7);
    swift_bridgeObjectRelease();
    v43 = a10;
    if (a8)
      goto LABEL_6;
LABEL_12:
    v77 = 0;
    v44 = a11;
    if (v43)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_11:
  v78 = 0;
  v43 = a10;
  if (!a8)
    goto LABEL_12;
LABEL_6:
  v77 = (void *)_convertErrorToNSError(_:)();

  v44 = a11;
  if (v43)
  {
LABEL_7:
    v71 = (void *)MEMORY[0x22E2AF8EC](a9, v43);
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
LABEL_13:
  v71 = 0;
LABEL_14:
  if (v44)
  {
    v87.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v45 = a14;
    if (a12)
      goto LABEL_16;
  }
  else
  {
    v87.super.isa = 0;
    v45 = a14;
    if (a12)
    {
LABEL_16:
      v75 = (void *)_convertErrorToNSError(_:)();

      v46 = a15;
      if (v45)
        goto LABEL_17;
      goto LABEL_35;
    }
  }
  v75 = 0;
  v46 = a15;
  if (v45)
  {
LABEL_17:
    v74 = (void *)MEMORY[0x22E2AF8EC](a13, v45);
    swift_bridgeObjectRelease();
    v47 = a16;
    if (v46)
      goto LABEL_18;
    goto LABEL_36;
  }
LABEL_35:
  v74 = 0;
  v47 = a16;
  if (v46)
  {
LABEL_18:
    v73.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v48 = a18;
    if (v47)
      goto LABEL_19;
    goto LABEL_37;
  }
LABEL_36:
  v73.super.isa = 0;
  v48 = a18;
  if (v47)
  {
LABEL_19:
    v72 = (void *)_convertErrorToNSError(_:)();

    v49 = a19;
    if (v48)
      goto LABEL_20;
    goto LABEL_38;
  }
LABEL_37:
  v72 = 0;
  v49 = a19;
  if (v48)
  {
LABEL_20:
    v88 = (void *)MEMORY[0x22E2AF8EC](a17, v48);
    swift_bridgeObjectRelease();
    v50 = a21;
    if (v49)
      goto LABEL_21;
    goto LABEL_39;
  }
LABEL_38:
  v88 = 0;
  v50 = a21;
  if (v49)
  {
LABEL_21:
    v86 = (void *)_convertErrorToNSError(_:)();

    v51 = a22;
    if (v50)
      goto LABEL_22;
    goto LABEL_40;
  }
LABEL_39:
  v86 = 0;
  v51 = a22;
  if (v50)
  {
LABEL_22:
    v85 = (void *)MEMORY[0x22E2AF8EC](a20, v50);
    swift_bridgeObjectRelease();
    v52 = a24;
    if (v51)
      goto LABEL_23;
    goto LABEL_41;
  }
LABEL_40:
  v85 = 0;
  v52 = a24;
  if (v51)
  {
LABEL_23:
    v84 = (void *)_convertErrorToNSError(_:)();

    v53 = a25;
    if (v52)
      goto LABEL_24;
    goto LABEL_42;
  }
LABEL_41:
  v84 = 0;
  v53 = a25;
  if (v52)
  {
LABEL_24:
    v54 = (void *)MEMORY[0x22E2AF8EC](a23, v52);
    swift_bridgeObjectRelease();
    v55 = a27;
    if (v53)
      goto LABEL_25;
    goto LABEL_43;
  }
LABEL_42:
  v54 = 0;
  v55 = a27;
  if (v53)
  {
LABEL_25:
    v56 = (void *)_convertErrorToNSError(_:)();

    v57 = a28;
    if (v55)
      goto LABEL_26;
    goto LABEL_44;
  }
LABEL_43:
  v56 = 0;
  v57 = a28;
  if (v55)
  {
LABEL_26:
    v58 = (void *)MEMORY[0x22E2AF8EC](a26, v55);
    swift_bridgeObjectRelease();
    v59 = a30;
    if (v57)
      goto LABEL_27;
    goto LABEL_45;
  }
LABEL_44:
  v58 = 0;
  v59 = a30;
  if (v57)
  {
LABEL_27:
    v60 = (void *)_convertErrorToNSError(_:)();

    v61 = a31;
    if (v59)
      goto LABEL_28;
    goto LABEL_46;
  }
LABEL_45:
  v60 = 0;
  v61 = a31;
  if (v59)
  {
LABEL_28:
    v62 = (void *)MEMORY[0x22E2AF8EC](a29, v59);
    swift_bridgeObjectRelease();
    v63 = a33;
    if (v61)
      goto LABEL_29;
    goto LABEL_47;
  }
LABEL_46:
  v62 = 0;
  v63 = a33;
  if (v61)
  {
LABEL_29:
    v64 = (void *)_convertErrorToNSError(_:)();

    v65 = a34;
    if (v63)
      goto LABEL_30;
    goto LABEL_48;
  }
LABEL_47:
  v64 = 0;
  v65 = a34;
  if (v63)
  {
LABEL_30:
    v66 = (void *)MEMORY[0x22E2AF8EC](a32, v63);
    swift_bridgeObjectRelease();
    v67 = a36;
    if (v65)
      goto LABEL_31;
LABEL_49:
    v68 = 0;
    if (v67)
      goto LABEL_32;
LABEL_50:
    v69 = 0;
    goto LABEL_51;
  }
LABEL_48:
  v66 = 0;
  v67 = a36;
  if (!v65)
    goto LABEL_49;
LABEL_31:
  v68 = (void *)_convertErrorToNSError(_:)();

  if (!v67)
    goto LABEL_50;
LABEL_32:
  v69 = (void *)MEMORY[0x22E2AF8EC](a35, v67);
  swift_bridgeObjectRelease();
LABEL_51:
  v83 = objc_msgSend(v82, sel_initWithFields_reservationIdError_reservationId_reservationNameError_reservationName_startAddressError_startAddress_startAddressComponents_endAddressError_endAddress_endAddressComponents_startPlaceError_startPlace_endPlaceError_endPlace_startDateError_startDate_endDateError_endDate_hotelNameError_hotelName_guestNameError_guestName_movieNameError_movieName_, a1 & 1, v81, v80, v79, v78, v77, v71, v87.super.isa, v75, v74, v73.super.isa, v72, v88, v86, v85, v84, v54,
          v56,
          v58,
          v60,
          v62,
          v64,
          v66,
          v68,
          v69);

  return v83;
}

uint64_t sub_2283EB908()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TextUnderstandingManager.addSerializedDocument(_:documentType:completion:)()
{
  return partial apply for closure #1 in TextUnderstandingManager.addSerializedDocument(_:documentType:completion:)((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in TextUnderstandingManager.addSerializedDocument(_:documentType:completion:));
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

uint64_t sub_2283EB954()
{
  uint64_t v0;

  swift_release();
  swift_release();
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TextUnderstandingManager.foundInEventResult(withSerializedDocument:documentType:completion:)()
{
  return partial apply for closure #1 in TextUnderstandingManager.addSerializedDocument(_:documentType:completion:)((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in TextUnderstandingManager.foundInEventResult(withSerializedDocument:documentType:completion:));
}

void partial apply for closure #1 in TextUnderstandingManager.onBoardPoem()()
{
  uint64_t v0;

  closure #1 in TextUnderstandingManager.onBoardPoem()(v0);
}

uint64_t sub_2283EB99C()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in TextUnderstandingManager.incrementallyUpdatePoem()()
{
  _QWORD *v0;

  v0 = TextUnderstandingManager.bulkupdater.getter();
  (*(void (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x90))();

}

uint64_t type metadata accessor for TextUnderstandingManager()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type TextUnderstandingManagerError and conformance TextUnderstandingManagerError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextUnderstandingManagerError and conformance TextUnderstandingManagerError;
  if (!lazy protocol witness table cache variable for type TextUnderstandingManagerError and conformance TextUnderstandingManagerError)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for TextUnderstandingManagerError, &type metadata for TextUnderstandingManagerError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextUnderstandingManagerError and conformance TextUnderstandingManagerError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextUnderstandingManagerError and conformance TextUnderstandingManagerError;
  if (!lazy protocol witness table cache variable for type TextUnderstandingManagerError and conformance TextUnderstandingManagerError)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for TextUnderstandingManagerError, &type metadata for TextUnderstandingManagerError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextUnderstandingManagerError and conformance TextUnderstandingManagerError);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for TextUnderstandingManagerError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_2283EBAB8 + 4 * asc_2284C7610[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_2283EBAD8 + 4 * byte_2284C7615[v4]))();
}

_BYTE *sub_2283EBAB8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_2283EBAD8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2283EBAE0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2283EBAE8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2283EBAF0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2283EBAF8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for TextUnderstandingManagerError()
{
  return &type metadata for TextUnderstandingManagerError;
}

uint64_t sub_2283EBB14()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t specialized TextUnderstandingManager.ping(withReply:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v10;

  v2 = type metadata accessor for Logger();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Logger.init()();
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_2282CC000, v6, v7, "Received ping \n", v8, 2u);
    MEMORY[0x22E2B117C](v8, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(uint64_t))(a1 + 16))(a1);
}

uint64_t specialized TextUnderstandingManager.triggerSpotlightFileUpdateNoArgs(withReply:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  void (*v12)(char *, uint64_t);
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v17;

  v2 = type metadata accessor for Logger();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v17 - v7;
  Logger.init()();
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_2282CC000, v9, v10, "DocumentUnderstanding: triggerSpotlightFileUpdateNoArgs in manager called", v11, 2u);
    MEMORY[0x22E2B117C](v11, -1, -1);
  }

  v12 = *(void (**)(char *, uint64_t))(v3 + 8);
  v12(v8, v2);
  Logger.init()();
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_2282CC000, v13, v14, "(TextUnderstandingManager) SearchAndOrganizationDocumentIngest is off.  Skipping triggerSpotlightFileUpdateNoArgs", v15, 2u);
    MEMORY[0x22E2B117C](v15, -1, -1);
  }

  v12(v6, v2);
  return (*(uint64_t (**)(uint64_t))(a1 + 16))(a1);
}

uint64_t specialized TextUnderstandingManager.addOrUpdateSearchableItems(_:bundleID:completion:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  void (*v12)(char *, uint64_t);
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v17;

  v2 = type metadata accessor for Logger();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v17 - v7;
  Logger.init()();
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_2282CC000, v9, v10, "DocumentUnderstanding - Server addOrUpdateSearchableItems called", v11, 2u);
    MEMORY[0x22E2B117C](v11, -1, -1);
  }

  v12 = *(void (**)(char *, uint64_t))(v3 + 8);
  v12(v8, v2);
  Logger.init()();
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_2282CC000, v13, v14, "(TextUnderstandingManager) SearchAndOrganizationDocumentIngest is off.  Skipping addOrUpdateSearchableItems", v15, 2u);
    MEMORY[0x22E2B117C](v15, -1, -1);
  }

  v12(v6, v2);
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 16))(a1, 0);
}

uint64_t specialized TextUnderstandingManager.addSerializedDocument(_:documentType:completion:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void (**a5)(_QWORD, _QWORD))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  void (**v19)(_QWORD, _QWORD);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint8_t *v24;
  uint8_t *v25;
  void (*v26)(char *, uint64_t);
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD aBlock[6];

  v37 = a4;
  v38 = a3;
  v8 = type metadata accessor for Logger();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v35 - v13;
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a5;
  _Block_copy(a5);
  Logger.init()();
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc();
    v36 = v12;
    v19 = a5;
    v20 = v8;
    v21 = v15;
    v22 = a1;
    v23 = a2;
    v24 = v18;
    *(_WORD *)v18 = 0;
    _os_log_impl(&dword_2282CC000, v16, v17, "(TextUnderstandingManager) addSerializedDocument called", v18, 2u);
    v25 = v24;
    a2 = v23;
    a1 = v22;
    v15 = v21;
    v8 = v20;
    a5 = v19;
    v12 = v36;
    MEMORY[0x22E2B117C](v25, -1, -1);
  }

  v26 = *(void (**)(char *, uint64_t))(v9 + 8);
  v26(v14, v8);
  if (v38 == 1)
  {
    v27 = *(void **)(v37 + OBJC_IVAR____TtC21DocumentUnderstanding24TextUnderstandingManager_queue);
    v28 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v29 = (_QWORD *)swift_allocObject();
    v29[2] = v28;
    v29[3] = a1;
    v29[4] = a2;
    v29[5] = 1;
    v29[6] = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> ();
    v29[7] = v15;
    aBlock[4] = partial apply for closure #1 in TextUnderstandingManager.addSerializedDocument(_:documentType:completion:);
    aBlock[5] = v29;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_34_0;
    v30 = _Block_copy(aBlock);
    outlined copy of Data._Representation(a1, a2);
    swift_retain();
    swift_release();
    objc_msgSend(v27, sel_addOperationWithBlock_, v30);
    _Block_release(v30);
  }
  else
  {
    Logger.init()();
    v31 = Logger.logObject.getter();
    v32 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v33 = 0;
      _os_log_impl(&dword_2282CC000, v31, v32, "(TextUnderstandingManager) SearchAndOrganizationDocumentIngest is off, and document type is not messages.  Skipping addSerializedDocument", v33, 2u);
      MEMORY[0x22E2B117C](v33, -1, -1);
    }

    v26(v12, v8);
    a5[2](a5, 0);
  }
  return swift_release();
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> ()(uint64_t a1)
{
  uint64_t v1;

  thunk for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> ()(a1, *(_QWORD *)(v1 + 16));
}

uint64_t objectdestroy_2Tm()
{
  uint64_t v0;

  swift_release();
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TextUnderstandingManager.addSerializedDocument(_:documentType:completion:)(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t sub_2283EC2D8()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in TextUnderstandingManager.onBoardPoem()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  return closure #1 in closure #1 in TextUnderstandingManager.onBoardPoem()(a1, v4, v5, v7, v6);
}

uint64_t sub_2283EC384()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in TextUnderstandingManager.foundInEventResult(withSerializedDocument:documentType:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v6;
  __int128 v7;

  v6 = *(_OWORD *)(v0 + 64);
  v7 = *(_OWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = swift_task_alloc();
  v4 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  *(_QWORD *)(v3 + 120) = v2;
  *(_OWORD *)(v3 + 104) = v6;
  *(_OWORD *)(v3 + 88) = v7;
  *(_OWORD *)(v3 + 72) = v4;
  return swift_task_switch();
}

uint64_t sub_2283EC498()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in TextUnderstandingManager.addSerializedDocument(_:documentType:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v8;

  v8 = *(_OWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 80);
  v5 = swift_task_alloc();
  v6 = *(_OWORD *)(v0 + 64);
  *(_QWORD *)(v1 + 16) = v5;
  *(_QWORD *)v5 = v1;
  *(_QWORD *)(v5 + 8) = partial apply for closure #2 in DUFoundInEventMultilingualBERTImplementation.loadModelHeadBundle();
  *(_QWORD *)(v5 + 88) = v4;
  *(_OWORD *)(v5 + 72) = v6;
  *(_QWORD *)(v5 + 56) = v2;
  *(_QWORD *)(v5 + 64) = v3;
  *(_OWORD *)(v5 + 40) = v8;
  return swift_task_switch();
}

uint64_t DULanguageTaggingSpecification.__allocating_init()()
{
  return swift_allocObject();
}

unint64_t static DULanguageTaggingSpecification.phaseID.getter()
{
  return 0xD000000000000016;
}

uint64_t DULanguageTaggingSpecification.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t DULanguageTaggingSpecification.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t DULanguageTaggingSpecification.init()()
{
  uint64_t v0;

  return v0;
}

unint64_t protocol witness for static DUProcessingPhaseSpecification.phaseID.getter in conformance DULanguageTaggingSpecification()
{
  return 0xD000000000000016;
}

uint64_t DULanguageTaggingSpecification.attachResultsToResponse(response:processingRequest:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  *(_QWORD *)(v2 + 48) = a1;
  v6 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:)
                                       + async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 56) = v4;
  *v4 = v2;
  v4[1] = DULanguageTaggingSpecification.attachResultsToResponse(response:processingRequest:);
  return v6(a2);
}

uint64_t DULanguageTaggingSpecification.attachResultsToResponse(response:processingRequest:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 64) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t DULanguageTaggingSpecification.attachResultsToResponse(response:processingRequest:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v3)(void);
  id v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  void (*v13)(uint64_t, _QWORD);

  v1 = *(_QWORD *)(v0 + 64);
  if (v1)
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4EA0];
    v3 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 48)) + 0xC8);
    v4 = (id)v3();
    if (!v4)
      v4 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DULanguageTaggingResponse()), sel_init);
    v5 = (*(uint64_t (**)(id))((*v2 & **(_QWORD **)(v0 + 48)) + 0xD0))(v4);
    v6 = ((uint64_t (*)(uint64_t))v3)(v5);
    if (v6)
    {
      v7 = (_QWORD *)v6;
      v8 = (_QWORD *)v3();
      if (v8)
      {
        v9 = v8;
        v10 = (*(uint64_t (**)(void))((*v2 & *v8) + 0x60))();

      }
      else
      {
        v10 = MEMORY[0x24BEE4AF8];
      }
      (*(void (**)(uint64_t))((*v2 & *v7) + 0x68))(v10);

    }
    v11 = (_QWORD *)v3();
    if (v11)
    {
      v12 = v11;
      v13 = (void (*)(uint64_t, _QWORD))(*(uint64_t (**)(uint64_t))((*v2 & *v11) + 0x70))(v0 + 16);
      specialized Array.append<A>(contentsOf:)(v1);
      v13(v0 + 16, 0);

    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id DULanguageTaggingSpecification.associatedRequestTypes.getter()
{
  objc_class *v0;
  char *v1;
  objc_super v3;

  v0 = (objc_class *)type metadata accessor for DURequestContentType();
  v1 = (char *)objc_allocWithZone(v0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = 1;
  v3.receiver = v1;
  v3.super_class = v0;
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t protocol witness for TopLevelSpecificationProtocol.attachResultsToResponse(response:processingRequest:) in conformance DULanguageTaggingSpecification(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = partial apply for closure #2 in DUFoundInEventMultilingualBERTImplementation.loadModelHeadBundle();
  v5[6] = a1;
  v8 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:)
                                       + async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:));
  v6 = (_QWORD *)swift_task_alloc();
  v5[7] = v6;
  *v6 = v5;
  v6[1] = DULanguageTaggingSpecification.attachResultsToResponse(response:processingRequest:);
  return v8(a2);
}

id protocol witness for TopLevelSpecificationProtocol.associatedRequestTypes.getter in conformance DULanguageTaggingSpecification()
{
  objc_class *v0;
  char *v1;
  objc_super v3;

  v0 = (objc_class *)type metadata accessor for DURequestContentType();
  v1 = (char *)objc_allocWithZone(v0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = 1;
  v3.receiver = v1;
  v3.super_class = v0;
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t type metadata accessor for DULanguageTaggingSpecification()
{
  return objc_opt_self();
}

uint64_t DUCreateContextRequestDefaultImplementation.__allocating_init()()
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 1;
  return result;
}

unint64_t static DUCreateContextRequestDefaultImplementation.implementationID.getter()
{
  return 0xD00000000000002DLL;
}

id DUCreateContextRequestDefaultImplementation.contextClient.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  id v4;

  v1 = *(void **)(v0 + 16);
  v2 = v1;
  if (v1 == (void *)1)
  {
    v2 = objc_msgSend((id)objc_opt_self(), sel_clientWithDefaultRequestType_, 19);
    v3 = *(void **)(v0 + 16);
    *(_QWORD *)(v0 + 16) = v2;
    v4 = v2;
    outlined consume of CKContextClient??(v3);
  }
  outlined copy of CKContextClient??(v1);
  return v2;
}

void DUCreateContextRequestDefaultImplementation.contextClient.setter(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = a1;
  outlined consume of CKContextClient??(v2);
}

void (*DUCreateContextRequestDefaultImplementation.contextClient.modify(id *a1))(uint64_t a1, char a2)
{
  void *v1;

  a1[1] = v1;
  *a1 = DUCreateContextRequestDefaultImplementation.contextClient.getter();
  return DUWikipediaTopicDetectionDefaultImplementation.contextClient.modify;
}

uint64_t static DUCreateContextRequestDefaultImplementation.specification.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for DUCreateContextRequestSpecification();
  result = swift_allocObject();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for DUCreateContextRequestSpecification;
  *a1 = result;
  return result;
}

void *static DUCreateContextRequestDefaultImplementation.implementationAttributes.getter()
{
  return &outlined read-only object #0 of static DUCreateContextRequestDefaultImplementation.implementationAttributes.getter;
}

uint64_t DUCreateContextRequestDefaultImplementation.runTypedOnRequest(request:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[2] = a1;
  v2[3] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[4] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t DUCreateContextRequestDefaultImplementation.runTypedOnRequest(request:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  id v5;
  _QWORD *v6;
  uint64_t (*v7)(void);
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void);
  id v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(void);
  id v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t (*v36)(void);
  uint64_t v37;
  uint64_t v38;
  void *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  id v56;
  NSArray v57;
  Class isa;
  id v59;
  uint64_t v60;
  void *v61;
  void *v62;
  uint64_t v63;

  v1 = (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 16) + 136))();
  if (!v1)
  {
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v12 = (id)swift_allocError();
    *(_QWORD *)v13 = 0xD000000000000015;
    *(_QWORD *)(v13 + 8) = 0x80000002284DB0D0;
    *(_BYTE *)(v13 + 16) = 0;
    v14 = 1;
LABEL_48:
    swift_task_dealloc();
    return (*(uint64_t (**)(id, uint64_t))(v0 + 8))(v12, v14);
  }
  v2 = (_QWORD *)v1;
  v3 = (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 24) + 88))();
  if (!v3)
  {
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v12 = (id)swift_allocError();
    *(_QWORD *)v15 = 0xD00000000000002CLL;
    *(_QWORD *)(v15 + 8) = 0x80000002284E05C0;
    v14 = 1;
    *(_BYTE *)(v15 + 16) = 1;

    goto LABEL_48;
  }
  v4 = (void *)v3;
  v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE199C0]), sel_initForClient_, v3);
  v6 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v7 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v2) + 0x58);
  v8 = v5;
  v9 = v7();
  if (v10)
  {
    v11 = (void *)MEMORY[0x22E2AF8EC](v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = 0;
  }
  objc_msgSend(v8, sel_setTitle_, v11);

  v16 = *(uint64_t (**)(void))((*v6 & *v2) + 0x70);
  v17 = v8;
  v18 = v16();
  v62 = v4;
  if (v19)
  {
    v20 = (void *)MEMORY[0x22E2AF8EC](v18);
    swift_bridgeObjectRelease();
  }
  else
  {
    v20 = 0;
  }
  v21 = *(_QWORD *)(v0 + 32);
  objc_msgSend(v17, sel_setContentAuthor_, v20);

  (*(void (**)(void))((*v6 & *v2) + 0xA8))();
  v22 = type metadata accessor for URL();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22);
  v25 = *(_QWORD *)(v0 + 32);
  if (v24 == 1)
  {
    outlined destroy of URL?(*(_QWORD *)(v0 + 32));
    v26 = 0;
  }
  else
  {
    v27 = URL.absoluteString.getter();
    v28 = v2;
    v30 = v29;
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v25, v22);
    v26 = (void *)MEMORY[0x22E2AF8EC](v27, v30);
    v2 = v28;
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v17, sel_setUrl_, v26);

  v31 = *(uint64_t (**)(void))((*v6 & *v2) + 0x88);
  v32 = v17;
  v33 = v31();
  if (v34)
  {
    v35 = (void *)MEMORY[0x22E2AF8EC](v33);
    swift_bridgeObjectRelease();
  }
  else
  {
    v35 = 0;
  }
  objc_msgSend(v32, sel_setText_, v35);

  v36 = *(uint64_t (**)(void))((*v6 & *v2) + 0x90);
  v12 = v32;
  v37 = v36();
  if (v38)
  {
    v39 = (void *)MEMORY[0x22E2AF8EC](v37);
    swift_bridgeObjectRelease();
  }
  else
  {
    v39 = 0;
  }
  objc_msgSend(v12, sel_setLanguageTag_, v39);

  v40 = (*(uint64_t (**)(void))((*v6 & *v2) + 0xD8))();
  if (!v40)
  {

LABEL_47:
    v14 = 0;
    goto LABEL_48;
  }
  v41 = v40;
  v61 = v2;
  v63 = MEMORY[0x24BEE4AF8];
  if (v40 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v42 = result;
    if (result)
      goto LABEL_23;
    goto LABEL_45;
  }
  v42 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain();
  if (!v42)
  {
LABEL_45:
    swift_bridgeObjectRelease();
LABEL_46:
    swift_bridgeObjectRelease();
    type metadata accessor for CKContextUIElement();
    v12 = v12;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v12, sel_setUiElements_, isa);

    goto LABEL_47;
  }
LABEL_23:
  v59 = v12;
  v60 = v0;
  if (v42 >= 1)
  {
    v44 = 0;
    while (1)
    {
      if ((v41 & 0xC000000000000001) != 0)
        v45 = (_QWORD *)MEMORY[0x22E2AFF34](v44, v41);
      else
        v45 = *(id *)(v41 + 8 * v44 + 32);
      v46 = v45;
      v47 = (*(uint64_t (**)(void))((*v6 & *v45) + 0xB0))();
      if (v48)
      {
        v49 = v47;
        v50 = v48;
        if (((*(uint64_t (**)(void))((*v6 & *v46) + 0x170))() & 1) != 0)
        {
          v51 = (*(uint64_t (**)(void))((*v6 & *v46) + 0xE0))();
          v53 = v52;
          v54 = (void *)MEMORY[0x22E2AF8EC](v49, v50);
          swift_bridgeObjectRelease();
          if (v53)
          {
            v55 = (void *)MEMORY[0x22E2AF8EC](v51, v53);
            swift_bridgeObjectRelease();
          }
          else
          {
            v55 = 0;
          }
          v56 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE199D8]), sel_initWithText_className_, v54, v55);

          (*(void (**)(void))((*v6 & *v46) + 0xF8))();
          if ((*(uint64_t (**)(id))((*v6 & *v46) + 0x110))(objc_msgSend(v56, sel_setFontSize_)))
          {
            v57.super.isa = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
          }
          else
          {
            v57.super.isa = 0;
          }
          objc_msgSend(v56, sel_setSuperviewClassNames_, v57.super.isa, v59, v60, v61, v62);

          (*(void (**)(void))((*v6 & *v46) + 0x128))();
          (*(void (**)(id))((*v6 & *v46) + 0x140))(objc_msgSend(v56, sel_setFrameInWindow_));
          objc_msgSend(v56, sel_setOnScreen_, (*(uint64_t (**)(id))((*v6 & *v46) + 0x158))(objc_msgSend(v56, sel_setAbsoluteOriginOnScreen_)) & 1);

          MEMORY[0x22E2AFAFC]();
          if (*(_QWORD *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          goto LABEL_27;
        }
        swift_bridgeObjectRelease();
      }

LABEL_27:
      if (v42 == ++v44)
      {
        swift_bridgeObjectRelease();
        v12 = v59;
        v0 = v60;
        goto LABEL_46;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t DUCreateContextRequestDefaultImplementation.deinit()
{
  uint64_t v0;

  outlined consume of CKContextClient??(*(id *)(v0 + 16));
  return v0;
}

uint64_t DUCreateContextRequestDefaultImplementation.__deallocating_deinit()
{
  uint64_t v0;

  outlined consume of CKContextClient??(*(id *)(v0 + 16));
  return swift_deallocClassInstance();
}

uint64_t DUCreateContextRequestDefaultImplementation.init()()
{
  uint64_t v0;
  uint64_t result;

  result = v0;
  *(_QWORD *)(v0 + 16) = 1;
  return result;
}

unint64_t type metadata accessor for CKContextUIElement()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CKContextUIElement;
  if (!lazy cache variable for type metadata for CKContextUIElement)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CKContextUIElement);
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for DUProcessingPhaseImplementation.SpecificationType : DUProcessingPhaseSpecification in DUCreateContextRequestDefaultImplementation()
{
  return &protocol witness table for DUCreateContextRequestSpecification;
}

uint64_t protocol witness for static DUProcessingPhaseImplementation.specification.getter in conformance DUCreateContextRequestDefaultImplementation@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for DUCreateContextRequestSpecification();
  result = swift_allocObject();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for DUCreateContextRequestSpecification;
  *a1 = result;
  return result;
}

unint64_t protocol witness for static DUProcessingPhaseImplementation.implementationID.getter in conformance DUCreateContextRequestDefaultImplementation()
{
  return 0xD00000000000002DLL;
}

void *protocol witness for static DUProcessingPhaseImplementation.implementationAttributes.getter in conformance DUCreateContextRequestDefaultImplementation()
{
  return &outlined read-only object #0 of protocol witness for static DUProcessingPhaseImplementation.implementationAttributes.getter in conformance DUCreateContextRequestDefaultImplementation;
}

uint64_t protocol witness for DUProcessingPhaseImplementation.runTypedOnRequest(request:) in conformance DUCreateContextRequestDefaultImplementation(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  *(_QWORD *)(v3 + 16) = a1;
  v7 = (uint64_t (*)(uint64_t))(**(int **)(**(_QWORD **)v2 + 112) + *(_QWORD *)(**(_QWORD **)v2 + 112));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v5;
  *v5 = v3;
  v5[1] = protocol witness for DUProcessingPhaseImplementation.runTypedOnRequest(request:) in conformance DUCategoryClassificationSmolBERToImplementation;
  return v7(a2);
}

uint64_t sub_2283ED358@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 88))();
  *a2 = result;
  return result;
}

uint64_t sub_2283ED388(id *a1, uint64_t a2)
{
  id v2;
  uint64_t (*v3)(id);
  id v4;

  v2 = *a1;
  v3 = *(uint64_t (**)(id))(**(_QWORD **)a2 + 96);
  v4 = *a1;
  return v3(v2);
}

uint64_t type metadata accessor for DUCreateContextRequestDefaultImplementation()
{
  return objc_opt_self();
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySaySiGSaySo8_NSRangeVGG_Si2id_Si5startSi6lengthts5NeverOTg508_sSiSo8_f12VS3iIgyyddd_l30_ABtSi2id_Si5startSi6lengthts5j95OIegnrzr_TR0124_s21DocumentUnderstanding22SentencePieceTokenizerC20encodingAndUTF8Spans4textSayq1_r21Si6lengthtGSS_tFSiAF_l10AGSiAHtw5_M20_A7VtXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  uint64_t *v8;
  __int128 *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (v5 >= v4)
    v6 = *(_QWORD *)(a1 + 16);
  else
    v6 = *(_QWORD *)(a2 + 16);
  v35 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
  v7 = v6;
  v31 = v4;
  v34 = a1;
  v32 = v5;
  if (v6)
  {
    v8 = (uint64_t *)(a1 + 32);
    v9 = (__int128 *)(a2 + 32);
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v11 = a2;
    while (v4)
    {
      if (!v5)
        goto LABEL_26;
      v12 = *v8;
      v13 = *v9;
      v15 = *(_QWORD *)(v35 + 16);
      v14 = *(_QWORD *)(v35 + 24);
      if (v15 >= v14 >> 1)
      {
        v29 = v11;
        v28 = *v9;
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
        v13 = v28;
        v11 = v29;
      }
      *(_QWORD *)(v35 + 16) = v15 + 1;
      v16 = v35 + 24 * v15;
      --v5;
      *(_QWORD *)(v16 + 32) = v12;
      *(_OWORD *)(v16 + 40) = v13;
      --v4;
      ++v9;
      ++v8;
      if (!--v6)
        goto LABEL_13;
    }
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v11 = a2;
LABEL_13:
    if (v31 <= v32)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v35;
    }
    if (v7 <= v32)
      v17 = v32;
    else
      v17 = v7;
    v18 = v17 - v7;
    v19 = v31 - v7;
    v20 = v32 - v7;
    v21 = (uint64_t *)(v34 + 8 * v7 + 32);
    v22 = (__int128 *)(v11 + 16 * v7 + 32);
    while (v19)
    {
      if (!v20)
        goto LABEL_24;
      if (!v18)
        goto LABEL_28;
      v23 = *v21;
      v24 = *v22;
      v26 = *(_QWORD *)(v35 + 16);
      v25 = *(_QWORD *)(v35 + 24);
      if (v26 >= v25 >> 1)
      {
        v30 = v11;
        v33 = *v22;
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
        v24 = v33;
        v11 = v30;
      }
      *(_QWORD *)(v35 + 16) = v26 + 1;
      v27 = v35 + 24 * v26;
      --v18;
      *(_QWORD *)(v27 + 32) = v23;
      *(_OWORD *)(v27 + 40) = v24;
      --v20;
      ++v21;
      ++v22;
      if (!--v19)
        goto LABEL_24;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

id SentencePieceTokenizer.wrapper.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

uint64_t SentencePieceTokenizer.__allocating_init(path:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  id v5;
  id v6;
  void *v7;

  v4 = swift_allocObject();
  v5 = objc_msgSend(objc_allocWithZone((Class)SentencePieceWrapper), sel_init);
  *(_QWORD *)(v4 + 16) = v5;
  v6 = v5;
  v7 = (void *)MEMORY[0x22E2AF8EC](a1, a2);
  swift_bridgeObjectRelease();
  LODWORD(a2) = objc_msgSend(v6, sel_load_, v7);

  if (!(_DWORD)a2)
  {
    swift_release();
    return 0;
  }
  return v4;
}

uint64_t SentencePieceTokenizer.init(path:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v5;
  id v6;
  void *v7;

  v5 = objc_msgSend(objc_allocWithZone((Class)SentencePieceWrapper), sel_init);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = v5;
  v7 = (void *)MEMORY[0x22E2AF8EC](a1, a2);
  swift_bridgeObjectRelease();
  LOBYTE(a2) = objc_msgSend(v6, sel_load_, v7);

  if ((a2 & 1) == 0)
  {
    swift_release();
    return 0;
  }
  return v2;
}

_QWORD *SentencePieceTokenizer.encode(text:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v5 = String.count.getter();
  swift_bridgeObjectRetain();
  if (v5 >= 5120)
  {
    v6 = specialized Collection.prefix(_:)(5120);
    v8 = v7;
    v10 = v9;
    v12 = v11;
    swift_bridgeObjectRelease();
    a1 = MEMORY[0x22E2AF988](v6, v8, v10, v12);
    a2 = v13;
    swift_bridgeObjectRelease();
  }
  v14 = *(void **)(v2 + 16);
  v15 = (void *)MEMORY[0x22E2AF8EC](a1, a2);
  swift_bridgeObjectRelease();
  v16 = objc_msgSend(v14, sel_encode_, v15);

  if (!v16)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  type metadata accessor for NSNumber();
  v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v18 = specialized _arrayConditionalCast<A, B>(_:)(v17);
  swift_bridgeObjectRelease();
  if (!v18)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  v19 = *(_QWORD *)(v18 + 16);
  if (v19 >= 0x1FE)
    v19 = 510;
  specialized Array.append<A>(contentsOf:)(v18, v18 + 32, 0, (2 * v19) | 1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v20 = outlined read-only object #0 of SentencePieceTokenizer.encode(text:);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 2, 1, outlined read-only object #0 of SentencePieceTokenizer.encode(text:));
  v22 = v20[2];
  v21 = v20[3];
  if (v22 >= v21 >> 1)
    v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v22 + 1, 1, v20);
  v20[2] = v22 + 1;
  v20[v22 + 4] = 2;
  swift_bridgeObjectRelease();
  v23 = specialized Array.init(repeating:count:)(0, 512 - v20[2]);
  specialized Array.append<A>(contentsOf:)(v23);
  return v20;
}

uint64_t specialized _arrayConditionalCast<A, B>(_:)(unint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  id v7;
  uint64_t v9;

  v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v9 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3 & ~(v3 >> 63), 0);
  v4 = v9;
  if (v2)
  {
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v6)
      return v4;
  }
  else if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return v4;
  }
  if ((a1 & 0xC000000000000001) != 0)
  {
    MEMORY[0x22E2AFF34](0, a1);
    static Int._conditionallyBridgeFromObjectiveC(_:result:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v7 = *(id *)(a1 + 32);
    static Int._conditionallyBridgeFromObjectiveC(_:result:)();

  }
  swift_release();
  return 0;
}

uint64_t SentencePieceTokenizer.encodingAndUTF8Spans(text:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  void *v13;

  v1 = String.count.getter();
  swift_bridgeObjectRetain();
  if (v1 >= 5120)
  {
    v2 = specialized Collection.prefix(_:)(5120);
    v4 = v3;
    v6 = v5;
    v8 = v7;
    swift_bridgeObjectRelease();
    MEMORY[0x22E2AF988](v2, v4, v6, v8);
    swift_bridgeObjectRelease();
  }
  v9 = *(void **)(v0 + 16);
  v10 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v11 = objc_msgSend(v9, sel_encodingAndUTF8Spans_, v10 + 32);
  swift_release();
  if (v11)
  {
    v12 = objc_msgSend(v11, sel_first);
    if (v12)
    {
      v13 = v12;
      static Array._conditionallyBridgeFromObjectiveC(_:result:)();

    }
  }
  return MEMORY[0x24BEE4AF8];
}

Swift::String __swiftcall SentencePieceTokenizer.decode(tokens:)(Swift::OpaquePointer tokens)
{
  uint64_t v1;
  void *v2;
  Class isa;
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  Swift::String result;

  v2 = *(void **)(v1 + 16);
  specialized _arrayForceCast<A, B>(_:)((uint64_t)tokens._rawValue);
  type metadata accessor for NSNumber();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v4 = objc_msgSend(v2, sel_decode_, isa);

  if (v4)
  {
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0xE000000000000000;
  }
  v8 = v5;
  v9 = (void *)v7;
  result._object = v9;
  result._countAndFlagsBits = v8;
  return result;
}

uint64_t SentencePieceTokenizer.attentionMaskForTokenIds(tokenIds:)(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  _QWORD *v4;
  unint64_t v5;
  float v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v9 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    result = v9;
    v4 = (_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(v9 + 16);
    do
    {
      if (*v4++)
        v7 = 1.0;
      else
        v7 = 0.0;
      v10 = result;
      v8 = *(_QWORD *)(result + 24);
      if (v5 >= v8 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v5 + 1, 1);
        result = v10;
      }
      *(_QWORD *)(result + 16) = v5 + 1;
      *(float *)(result + 4 * v5++ + 32) = v7;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t SentencePieceTokenizer.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t SentencePieceTokenizer.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SentencePieceTokenizer()
{
  return objc_opt_self();
}

uint64_t FoundInEventsPostProcessingFieldOutput.value.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t FoundInEventsPostProcessingFieldOutput.value.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*FoundInEventsPostProcessingFieldOutput.value.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t FoundInEventsPostProcessingFieldOutput.dictionaryValues.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FoundInEventsPostProcessingFieldOutput.dictionaryValues.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*FoundInEventsPostProcessingFieldOutput.dictionaryValues.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t FoundInEventsPostProcessingFieldOutput.hasLabel.getter(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return a4 & 1;
}

uint64_t FoundInEventsPostProcessingFieldOutput.hasLabel.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 24) = result;
  return result;
}

uint64_t (*FoundInEventsPostProcessingFieldOutput.hasLabel.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t destroy for FoundInEventsPostProcessingFieldOutput()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FoundInEventsPostProcessingFieldOutput(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FoundInEventsPostProcessingFieldOutput(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for FoundInEventsPostProcessingFieldOutput(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for FoundInEventsPostProcessingFieldOutput(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FoundInEventsPostProcessingFieldOutput(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for FoundInEventsPostProcessingFieldOutput()
{
  return &type metadata for FoundInEventsPostProcessingFieldOutput;
}

uint64_t AvailableModelsForTextGenerationFramework.description.getter()
{
  return 0x2D6E6F2D78616A61;
}

BOOL AvailableModelsForTextGenerationFramework.init(rawValue:)(uint64_t a1)
{
  return a1 != 0;
}

void *static AvailableModelsForTextGenerationFramework.allCases.getter()
{
  return &outlined read-only object #0 of static AvailableModelsForTextGenerationFramework.allCases.getter;
}

uint64_t AvailableModelsForTextGenerationFramework.rawValue.getter()
{
  return 0;
}

unint64_t lazy protocol witness table accessor for type AvailableModelsForTextGenerationFramework and conformance AvailableModelsForTextGenerationFramework()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AvailableModelsForTextGenerationFramework and conformance AvailableModelsForTextGenerationFramework;
  if (!lazy protocol witness table cache variable for type AvailableModelsForTextGenerationFramework and conformance AvailableModelsForTextGenerationFramework)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for AvailableModelsForTextGenerationFramework, &type metadata for AvailableModelsForTextGenerationFramework);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AvailableModelsForTextGenerationFramework and conformance AvailableModelsForTextGenerationFramework);
  }
  return result;
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance AvailableModelsForTextGenerationFramework@<X0>(_QWORD *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != 0;
  return result;
}

unint64_t lazy protocol witness table accessor for type [AvailableModelsForTextGenerationFramework] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [AvailableModelsForTextGenerationFramework] and conformance [A];
  if (!lazy protocol witness table cache variable for type [AvailableModelsForTextGenerationFramework] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [AvailableModelsForTextGenerationFramework]);
    result = MEMORY[0x22E2B10E0](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [AvailableModelsForTextGenerationFramework] and conformance [A]);
  }
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance AvailableModelsForTextGenerationFramework(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance AvailableModelsForTextGenerationFramework;
}

uint64_t storeEnumTagSinglePayload for AvailableModelsForTextGenerationFramework(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_2283EE3C8 + 4 * asc_2284C78C0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_2283EE3E8 + 4 * byte_2284C78C5[v4]))();
}

_BYTE *sub_2283EE3C8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_2283EE3E8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2283EE3F0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2283EE3F8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2283EE400(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2283EE408(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AvailableModelsForTextGenerationFramework()
{
  return &type metadata for AvailableModelsForTextGenerationFramework;
}

uint64_t static FilesDocumentIngesterError.__derived_enum_equals(_:_:)()
{
  return 1;
}

void FilesDocumentIngesterError.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int FilesDocumentIngesterError.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

BOOL static FilesDocumentIngester.FileParserType.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void FilesDocumentIngester.FileParserType.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int FilesDocumentIngester.ShouldPerfromOCR.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t FilesDocumentIngester.DUDocumentJSONStructure.text.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FilesDocumentIngester.DUDocumentJSONStructure.documentUIElements.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FilesDocumentIngester.DUDocumentJSONStructure.documentHTMLData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v1 + 24, a1, &demangling cache variable for type metadata for FilesDocumentIngester.DocumentHTMLData?);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance FilesDocumentIngester.DUDocumentJSONStructure.CodingKeys()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000012;
  if (*v0 != 1)
    v1 = 0xD000000000000010;
  if (*v0)
    return v1;
  else
    return 1954047348;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance FilesDocumentIngester.DUDocumentJSONStructure.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized FilesDocumentIngester.DUDocumentJSONStructure.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance FilesDocumentIngester.DUDocumentJSONStructure.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FilesDocumentIngester.DUDocumentJSONStructure.CodingKeys()
{
  lazy protocol witness table accessor for type FilesDocumentIngester.DUDocumentJSONStructure.CodingKeys and conformance FilesDocumentIngester.DUDocumentJSONStructure.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FilesDocumentIngester.DUDocumentJSONStructure.CodingKeys()
{
  lazy protocol witness table accessor for type FilesDocumentIngester.DUDocumentJSONStructure.CodingKeys and conformance FilesDocumentIngester.DUDocumentJSONStructure.CodingKeys();
  return CodingKey.debugDescription.getter();
}

double FilesDocumentIngester.DUDocumentJSONStructure.init(from:)@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v8[2];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  specialized FilesDocumentIngester.DUDocumentJSONStructure.init(from:)(a1, (uint64_t *)v8);
  if (!v2)
  {
    v5 = v12;
    *(_OWORD *)(a2 + 64) = v11;
    *(_OWORD *)(a2 + 80) = v5;
    *(_OWORD *)(a2 + 96) = v13;
    *(_QWORD *)(a2 + 112) = v14;
    v6 = v8[1];
    *(_OWORD *)a2 = v8[0];
    *(_OWORD *)(a2 + 16) = v6;
    result = *(double *)&v9;
    v7 = v10;
    *(_OWORD *)(a2 + 32) = v9;
    *(_OWORD *)(a2 + 48) = v7;
  }
  return result;
}

__n128 FilesDocumentIngester.DUDocumentJSONStructure.init(text:documentUIElements:documentHTMLData:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __n128 result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD v15[6];

  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(a4, (uint64_t)v15, &demangling cache variable for type metadata for FilesDocumentIngester.DocumentHTMLData?);
  result = (__n128)v15[0];
  v10 = v15[1];
  v11 = v15[2];
  v12 = v15[3];
  v13 = v15[4];
  v14 = v15[5];
  *(_QWORD *)a5 = a1;
  *(_QWORD *)(a5 + 8) = a2;
  *(_QWORD *)(a5 + 16) = a3;
  *(__n128 *)(a5 + 24) = result;
  *(_OWORD *)(a5 + 40) = v10;
  *(_OWORD *)(a5 + 56) = v11;
  *(_OWORD *)(a5 + 72) = v12;
  *(_OWORD *)(a5 + 88) = v13;
  *(_OWORD *)(a5 + 104) = v14;
  return result;
}

double protocol witness for Decodable.init(from:) in conformance FilesDocumentIngester.DUDocumentJSONStructure@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v8[2];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  specialized FilesDocumentIngester.DUDocumentJSONStructure.init(from:)(a1, (uint64_t *)v8);
  if (!v2)
  {
    v5 = v12;
    *(_OWORD *)(a2 + 64) = v11;
    *(_OWORD *)(a2 + 80) = v5;
    *(_OWORD *)(a2 + 96) = v13;
    *(_QWORD *)(a2 + 112) = v14;
    v6 = v8[1];
    *(_OWORD *)a2 = v8[0];
    *(_OWORD *)(a2 + 16) = v6;
    result = *(double *)&v9;
    v7 = v10;
    *(_OWORD *)(a2 + 32) = v9;
    *(_OWORD *)(a2 + 48) = v7;
  }
  return result;
}

uint64_t FilesDocumentIngester.DocumentHTMLData.htmlString.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FilesDocumentIngester.DocumentHTMLData.documentEmailData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v1 + 16, a1, &demangling cache variable for type metadata for FilesDocumentIngester.DocumentEmailData?);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance FilesDocumentIngester.DocumentHTMLData.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000011;
  else
    return 0x697274536C6D7468;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance FilesDocumentIngester.DocumentHTMLData.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized FilesDocumentIngester.DocumentHTMLData.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance FilesDocumentIngester.DocumentHTMLData.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FilesDocumentIngester.DocumentHTMLData.CodingKeys()
{
  lazy protocol witness table accessor for type FilesDocumentIngester.DocumentHTMLData.CodingKeys and conformance FilesDocumentIngester.DocumentHTMLData.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FilesDocumentIngester.DocumentHTMLData.CodingKeys()
{
  lazy protocol witness table accessor for type FilesDocumentIngester.DocumentHTMLData.CodingKeys and conformance FilesDocumentIngester.DocumentHTMLData.CodingKeys();
  return CodingKey.debugDescription.getter();
}

double FilesDocumentIngester.DocumentHTMLData.init(from:)@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v8[6];

  specialized FilesDocumentIngester.DocumentHTMLData.init(from:)(a1, (uint64_t *)v8);
  if (!v2)
  {
    v5 = v8[3];
    a2[2] = v8[2];
    a2[3] = v5;
    v6 = v8[5];
    a2[4] = v8[4];
    a2[5] = v6;
    result = *(double *)v8;
    v7 = v8[1];
    *a2 = v8[0];
    a2[1] = v7;
  }
  return result;
}

__n128 FilesDocumentIngester.DocumentHTMLData.init(htmlString:documentEmailData:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __n128 result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v12[5];

  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(a3, (uint64_t)v12, &demangling cache variable for type metadata for FilesDocumentIngester.DocumentEmailData?);
  result = (__n128)v12[0];
  v8 = v12[1];
  v9 = v12[2];
  v10 = v12[3];
  v11 = v12[4];
  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = a2;
  *(__n128 *)(a4 + 16) = result;
  *(_OWORD *)(a4 + 32) = v8;
  *(_OWORD *)(a4 + 48) = v9;
  *(_OWORD *)(a4 + 64) = v10;
  *(_OWORD *)(a4 + 80) = v11;
  return result;
}

double protocol witness for Decodable.init(from:) in conformance FilesDocumentIngester.DocumentHTMLData@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v8[6];

  specialized FilesDocumentIngester.DocumentHTMLData.init(from:)(a1, (uint64_t *)v8);
  if (!v2)
  {
    v5 = v8[3];
    a2[2] = v8[2];
    a2[3] = v5;
    v6 = v8[5];
    a2[4] = v8[4];
    a2[5] = v6;
    result = *(double *)v8;
    v7 = v8[1];
    *a2 = v8[0];
    a2[1] = v7;
  }
  return result;
}

uint64_t FilesDocumentIngester.DocumentEmailData.subject.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FilesDocumentIngester.DocumentEmailData.senderName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FilesDocumentIngester.DocumentEmailData.senderEmail.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FilesDocumentIngester.DocumentEmailData.senderDomain.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FilesDocumentIngester.DocumentEmailData.recipientNames.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FilesDocumentIngester.DocumentEmailData.recipientEmails.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance FilesDocumentIngester.DocumentEmailData.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2283EEA90
                                                            + 4 * asc_2284C7A00[*v0]))(0x7463656A627573, 0xE700000000000000);
}

uint64_t sub_2283EEA90()
{
  return 0x614E7265646E6573;
}

uint64_t sub_2283EEAAC()
{
  return 0x6D457265646E6573;
}

uint64_t sub_2283EEACC()
{
  return 0x6F447265646E6573;
}

uint64_t sub_2283EEAEC()
{
  return 0x6E65697069636572;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance FilesDocumentIngester.DocumentEmailData.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized FilesDocumentIngester.DocumentEmailData.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FilesDocumentIngester.DocumentEmailData.CodingKeys()
{
  lazy protocol witness table accessor for type FilesDocumentIngester.DocumentEmailData.CodingKeys and conformance FilesDocumentIngester.DocumentEmailData.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FilesDocumentIngester.DocumentEmailData.CodingKeys()
{
  lazy protocol witness table accessor for type FilesDocumentIngester.DocumentEmailData.CodingKeys and conformance FilesDocumentIngester.DocumentEmailData.CodingKeys();
  return CodingKey.debugDescription.getter();
}

__n128 FilesDocumentIngester.DocumentEmailData.init(from:)@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  _OWORD v6[5];

  specialized FilesDocumentIngester.DocumentEmailData.init(from:)(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v6[4];
    result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t FilesDocumentIngester.DocumentEmailData.init(subject:senderName:senderEmail:senderDomain:recipientNames:recipientEmails:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11)
{
  *a9 = result;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = a7;
  a9[7] = a8;
  a9[8] = a10;
  a9[9] = a11;
  return result;
}

__n128 protocol witness for Decodable.init(from:) in conformance FilesDocumentIngester.DocumentEmailData@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  _OWORD v6[5];

  specialized FilesDocumentIngester.DocumentEmailData.init(from:)(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v6[4];
    result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t FilesDocumentIngester.DocumentUIElement.text.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FilesDocumentIngester.DocumentUIElement.superviewClassNames.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FilesDocumentIngester.DocumentUIElement.superviewClassIndices.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FilesDocumentIngester.DocumentUIElement.range.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FilesDocumentIngester.DocumentUIElement.styleProperties.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FilesDocumentIngester.DocumentUIElement.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2283EECBC + 4 * byte_2284C7A06[a1]))(1954047348, 0xE400000000000000);
}

unint64_t sub_2283EECBC()
{
  return 0xD000000000000013;
}

unint64_t sub_2283EECD8()
{
  return 0xD000000000000015;
}

uint64_t sub_2283EECF8()
{
  return 0x65676E6172;
}

uint64_t sub_2283EED0C()
{
  return 0x6F7250656C797473;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance FilesDocumentIngester.DocumentUIElement.CodingKeys()
{
  unsigned __int8 *v0;

  return FilesDocumentIngester.DocumentUIElement.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance FilesDocumentIngester.DocumentUIElement.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized FilesDocumentIngester.DocumentUIElement.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FilesDocumentIngester.DocumentUIElement.CodingKeys()
{
  lazy protocol witness table accessor for type FilesDocumentIngester.DocumentUIElement.CodingKeys and conformance FilesDocumentIngester.DocumentUIElement.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FilesDocumentIngester.DocumentUIElement.CodingKeys()
{
  lazy protocol witness table accessor for type FilesDocumentIngester.DocumentUIElement.CodingKeys and conformance FilesDocumentIngester.DocumentUIElement.CodingKeys();
  return CodingKey.debugDescription.getter();
}

double FilesDocumentIngester.DocumentUIElement.init(from:)@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  specialized FilesDocumentIngester.DocumentUIElement.init(from:)(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t FilesDocumentIngester.DocumentUIElement.init(text:superviewClassNames:superviewClassIndices:range:styleProperties:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  *a7 = result;
  a7[1] = a2;
  a7[2] = a3;
  a7[3] = a4;
  a7[4] = a5;
  a7[5] = a6;
  return result;
}

double protocol witness for Decodable.init(from:) in conformance FilesDocumentIngester.DocumentUIElement@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  specialized FilesDocumentIngester.DocumentUIElement.init(from:)(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t static FilesDocumentIngester.getEffectiveFileExtensionForURL(fileURL:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  Swift::String v4;
  uint64_t countAndFlagsBits;
  uint64_t v6;
  BOOL v7;
  uint64_t v9;

  v0 = type metadata accessor for URL();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.pathExtension.getter();
  v4 = String.lowercased()();
  countAndFlagsBits = v4._countAndFlagsBits;
  swift_bridgeObjectRelease();
  v6 = DUIngestableFiletypes.icloudFileExtension.unsafeMutableAddressor();
  v7 = v4._countAndFlagsBits == *(_QWORD *)v6 && v4._object == *(void **)(v6 + 8);
  if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    URL.deletingPathExtension()();
    URL.pathExtension.getter();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    countAndFlagsBits = String.lowercased()()._countAndFlagsBits;
    swift_bridgeObjectRelease();
  }
  return countAndFlagsBits;
}

_QWORD *static FilesDocumentIngester.getHTMLDataFromJson(parsedJson:)(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _BYTE v8[96];
  _QWORD v9[12];

  v2 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUDocumentHTMLData()), sel_init);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(a1 + 24, (uint64_t)v8, &demangling cache variable for type metadata for FilesDocumentIngester.DocumentHTMLData?);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v8, (uint64_t)v9, &demangling cache variable for type metadata for FilesDocumentIngester.DocumentHTMLData?);
  v3 = 0;
  v4 = 0;
  if (v9[1] != 1)
  {
    v3 = v9[0];
    v4 = swift_bridgeObjectRetain();
  }
  v5 = (_QWORD *)MEMORY[0x24BEE4EA0];
  (*(void (**)(uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & *v2) + 0x68))(v3, v4);
  v6 = specialized static FilesDocumentIngester.getEmailDataFromJson(parsedJson:)(a1);
  (*(void (**)(_QWORD *))((*v5 & *v2) + 0x80))(v6);
  return v2;
}

id @objc static FilesDocumentIngester.ingestDocumentFromFile(fileURL:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v11;

  v5 = type metadata accessor for URL();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = (void *)a4(v8);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return v9;
}

id FilesDocumentIngester.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id FilesDocumentIngester.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FilesDocumentIngester();
  return objc_msgSendSuper2(&v2, sel_init);
}

id FilesDocumentIngester.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FilesDocumentIngester();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t specialized static FilesDocumentIngester.checkIsURLDatalessFault(fileURL:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t);
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  void (*v21)(char *, uint64_t);
  void *v22;
  NSURL *v23;
  void *v24;
  void *v25;
  id v26;
  char v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v2 = type metadata accessor for URL();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v36 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v32 - v10;
  Logger.init()();
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v37 = a1;
  v12(v5, a1, v2);
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc();
    v35 = v6;
    v16 = (uint8_t *)v15;
    v33 = swift_slowAlloc();
    v39 = v33;
    v34 = v7;
    *(_DWORD *)v16 = 136315138;
    v32 = v16 + 4;
    v17 = URL.absoluteString.getter();
    v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    _os_log_impl(&dword_2282CC000, v13, v14, "Checking if url %s is a dataless fault", v16, 0xCu);
    v19 = v33;
    swift_arrayDestroy();
    MEMORY[0x22E2B117C](v19, -1, -1);
    v20 = v16;
    v6 = v35;
    MEMORY[0x22E2B117C](v20, -1, -1);

    v21 = *(void (**)(char *, uint64_t))(v34 + 8);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);

    v21 = *(void (**)(char *, uint64_t))(v7 + 8);
  }
  v21(v11, v6);
  v22 = (void *)objc_opt_self();
  URL._bridgeToObjectiveC()(v23);
  v25 = v24;
  v26 = objc_msgSend(v22, sel_isURLDatalessFault_, v24);

  if (!v26)
  {
    v27 = 0;
    return v27 & 1;
  }
  if (v26 == (id)2)
  {
LABEL_12:
    lazy protocol witness table accessor for type FilesDocumentIngesterError and conformance FilesDocumentIngesterError();
    swift_allocError();
    swift_willThrow();
    return v27 & 1;
  }
  if (v26 != (id)1)
  {
    Logger.init()();
    v28 = Logger.logObject.getter();
    v29 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v30 = 0;
      _os_log_impl(&dword_2282CC000, v28, v29, "Received unknown return value from isURLDatalessFault", v30, 2u);
      MEMORY[0x22E2B117C](v30, -1, -1);
    }

    v21(v36, v6);
    goto LABEL_12;
  }
  v27 = 1;
  return v27 & 1;
}

uint64_t specialized static FilesDocumentIngester.getParserTypeForFilePath(fileURL:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  Swift::String v4;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v7;
  BOOL v8;
  Swift::String v9;
  _QWORD **v10;
  _QWORD **v12;
  _QWORD **v13;
  _QWORD **v14;
  _QWORD **v15;
  _QWORD **v16;
  char v17;
  uint64_t v18;

  v0 = type metadata accessor for URL();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.pathExtension.getter();
  v4 = String.lowercased()();
  countAndFlagsBits = v4._countAndFlagsBits;
  object = v4._object;
  swift_bridgeObjectRelease();
  v7 = DUIngestableFiletypes.icloudFileExtension.unsafeMutableAddressor();
  v8 = v4._countAndFlagsBits == *(_QWORD *)v7 && v4._object == *(void **)(v7 + 8);
  if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    URL.deletingPathExtension()();
    URL.pathExtension.getter();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    v9 = String.lowercased()();
    countAndFlagsBits = v9._countAndFlagsBits;
    object = v9._object;
    swift_bridgeObjectRelease();
  }
  v10 = (_QWORD **)DUIngestableFiletypes.pdfFileExtensions.unsafeMutableAddressor();
  if ((specialized Sequence<>.contains(_:)(countAndFlagsBits, (uint64_t)object, *v10) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v12 = (_QWORD **)DUIngestableFiletypes.officeFileExtensions.unsafeMutableAddressor();
    if ((specialized Sequence<>.contains(_:)(countAndFlagsBits, (uint64_t)object, *v12) & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v13 = (_QWORD **)DUIngestableFiletypes.iWorkFileExtensions.unsafeMutableAddressor();
      if ((specialized Sequence<>.contains(_:)(countAndFlagsBits, (uint64_t)object, *v13) & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        v14 = (_QWORD **)DUIngestableFiletypes.jsonFileExtensions.unsafeMutableAddressor();
        if ((specialized Sequence<>.contains(_:)(countAndFlagsBits, (uint64_t)object, *v14) & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else
        {
          v15 = (_QWORD **)DUIngestableFiletypes.txtFileExtensions.unsafeMutableAddressor();
          if ((specialized Sequence<>.contains(_:)(countAndFlagsBits, (uint64_t)object, *v15) & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 4;
          }
          else
          {
            v16 = (_QWORD **)DUIngestableFiletypes.emlFileExtensions.unsafeMutableAddressor();
            v17 = specialized Sequence<>.contains(_:)(countAndFlagsBits, (uint64_t)object, *v16);
            swift_bridgeObjectRelease();
            if ((v17 & 1) != 0)
              return 5;
            else
              return 6;
          }
        }
      }
    }
  }
}

_QWORD *specialized static FilesDocumentIngester.getEmailDataFromJson(parsedJson:)(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void (*v10)(uint64_t, uint64_t);
  void (*v11)(uint64_t, uint64_t);
  void (*v12)(uint64_t, uint64_t);
  void (*v13)(uint64_t, uint64_t);
  void (*v14)(uint64_t);
  uint64_t v15;
  void (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[96];
  _OWORD v22[7];
  _OWORD v23[5];
  _BYTE v24[80];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v2 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUDocumentEmailData()), sel_init);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(a1 + 24, (uint64_t)v21, &demangling cache variable for type metadata for FilesDocumentIngester.DocumentHTMLData?);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v21, (uint64_t)v22, &demangling cache variable for type metadata for FilesDocumentIngester.DocumentHTMLData?);
  if (*((_QWORD *)&v22[0] + 1) != 1)
  {
    v23[1] = v22[2];
    v23[2] = v22[3];
    v23[3] = v22[4];
    v23[4] = v22[5];
    v22[6] = v22[0];
    v23[0] = v22[1];
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v23, (uint64_t)v24, &demangling cache variable for type metadata for FilesDocumentIngester.DocumentEmailData?);
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v24, (uint64_t)&v25, &demangling cache variable for type metadata for FilesDocumentIngester.DocumentEmailData?);
    v3 = v26;
    if (v26 != 1)
    {
      v4 = v25;
      v5 = v27;
      v6 = v28;
      v7 = v30;
      v8 = v32;
      v19 = v29;
      v20 = v31;
      v9 = (_QWORD *)MEMORY[0x24BEE4EA0];
      v10 = *(void (**)(uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & *v2) + 0xB0);
      swift_bridgeObjectRetain();
      v10(v4, v3);
      v11 = *(void (**)(uint64_t, uint64_t))((*v9 & *v2) + 0xC8);
      swift_bridgeObjectRetain();
      v11(v5, v6);
      v12 = *(void (**)(uint64_t, uint64_t))((*v9 & *v2) + 0xE0);
      swift_bridgeObjectRetain();
      v12(v19, v7);
      v13 = *(void (**)(uint64_t, uint64_t))((*v9 & *v2) + 0xF8);
      swift_bridgeObjectRetain();
      v13(v20, v8);
      v14 = *(void (**)(uint64_t))((*v9 & *v2) + 0x110);
      v15 = swift_bridgeObjectRetain();
      v14(v15);
      v16 = *(void (**)(uint64_t))((*v9 & *v2) + 0x128);
      v17 = swift_bridgeObjectRetain();
      v16(v17);
    }
  }
  return v2;
}

uint64_t specialized static FilesDocumentIngester.getUIElementsFromJson(parsedJson:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  _QWORD *v7;
  _QWORD *v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  void (*v12)(uint64_t);
  uint64_t v13;
  void (*v14)(uint64_t);
  uint64_t v15;
  void (*v16)(uint64_t);
  uint64_t v17;
  _QWORD *v18;
  objc_class *v20;
  uint64_t v21;
  uint64_t v22;

  v22 = MEMORY[0x24BEE4AF8];
  if (*(_QWORD *)(a1 + 16))
    v1 = *(_QWORD *)(a1 + 16);
  else
    v1 = MEMORY[0x24BEE4AF8];
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v20 = (objc_class *)type metadata accessor for DUDocumentUIElement();
    swift_bridgeObjectRetain();
    v3 = (uint64_t *)(v1 + 40);
    do
    {
      v21 = v2;
      v5 = *(v3 - 1);
      v4 = *v3;
      v6 = objc_allocWithZone(v20);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v7 = objc_msgSend(v6, sel_init);
      v8 = (_QWORD *)MEMORY[0x24BEE4EA0];
      v9 = *(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v7) + 0x1C0);
      v10 = swift_bridgeObjectRetain();
      v9(v10);
      v11 = *(void (**)(uint64_t, uint64_t))((*v8 & *v7) + 0xB8);
      swift_bridgeObjectRetain();
      v11(v5, v4);
      v12 = *(void (**)(uint64_t))((*v8 & *v7) + 0x118);
      v13 = swift_bridgeObjectRetain();
      v12(v13);
      v14 = *(void (**)(uint64_t))((*v8 & *v7) + 0x190);
      v15 = swift_bridgeObjectRetain();
      v14(v15);
      v16 = *(void (**)(uint64_t))((*v8 & *v7) + 0x1A8);
      v17 = swift_bridgeObjectRetain();
      v16(v17);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v18 = v7;
      MEMORY[0x22E2AFAFC]();
      if (*(_QWORD *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v3 += 6;
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      v2 = v21 - 1;
    }
    while (v21 != 1);
    swift_bridgeObjectRelease();
    return v22;
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
}

_QWORD *specialized static FilesDocumentIngester.createDocumentFromJson(parsedJson:)(uint64_t *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  _BYTE v13[96];
  _QWORD v14[12];

  v2 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DURawDocument()), sel_init);
  v3 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUDocumentHTMLData()), sel_init);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)(a1 + 3), (uint64_t)v13, &demangling cache variable for type metadata for FilesDocumentIngester.DocumentHTMLData?);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v13, (uint64_t)v14, &demangling cache variable for type metadata for FilesDocumentIngester.DocumentHTMLData?);
  v4 = 0;
  v5 = 0;
  if (v14[1] != 1)
  {
    v4 = v14[0];
    v5 = swift_bridgeObjectRetain();
  }
  v6 = (_QWORD *)MEMORY[0x24BEE4EA0];
  (*(void (**)(uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & *v3) + 0x68))(v4, v5);
  v7 = specialized static FilesDocumentIngester.getEmailDataFromJson(parsedJson:)((uint64_t)a1);
  (*(void (**)(_QWORD *))((*v6 & *v3) + 0x80))(v7);
  (*(void (**)(_QWORD *))((*v6 & *v2) + 0x280))(v3);
  v8 = specialized static FilesDocumentIngester.getUIElementsFromJson(parsedJson:)((uint64_t)a1);
  (*(void (**)(uint64_t))((*v6 & *v2) + 0x268))(v8);
  v10 = *a1;
  v9 = a1[1];
  v11 = *(void (**)(uint64_t, uint64_t))((*v6 & *v2) + 0x178);
  swift_bridgeObjectRetain();
  v11(v10, v9);
  return v2;
}

id specialized static FilesDocumentIngester.readFromJson(fileURL:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  id v23;
  NSURL *v24;
  void *v25;
  void *v26;
  id v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  id v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  _OWORD v80[7];
  uint64_t v81;

  v2 = type metadata accessor for URL();
  v3 = *(_QWORD *)(v2 - 8);
  v70 = v2;
  v71 = v3;
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v4);
  v66 = (char *)&v62 - v8;
  MEMORY[0x24BDAC7A8](v7);
  v64 = (char *)&v62 - v9;
  v10 = type metadata accessor for Logger();
  v68 = *(_QWORD *)(v10 - 8);
  v69 = v10;
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v11);
  v67 = (char *)&v62 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v65 = (char *)&v62 - v16;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v17);
  v63 = (uint64_t)&v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for String.Encoding();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v62 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = objc_allocWithZone(MEMORY[0x24BDBCE50]);
  URL._bridgeToObjectiveC()(v24);
  v26 = v25;
  v27 = objc_msgSend(v23, sel_initWithContentsOfURL_, v25);

  if (v27
    && (v80[0] = xmmword_2284C0CD0,
        static Data._conditionallyBridgeFromObjectiveC(_:result:)(),
        v27,
        v28 = *((_QWORD *)&v80[0] + 1),
        *((_QWORD *)&v80[0] + 1) >> 60 != 15))
  {
    v40 = *(_QWORD *)&v80[0];
    static String.Encoding.utf8.getter();
    String.init(data:encoding:)();
    if (v41)
    {
      static String.Encoding.utf8.getter();
      v42 = String.data(using:allowLossyConversion:)();
      v44 = v43;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
      if (v44 >> 60 != 15)
      {
        type metadata accessor for JSONDecoder();
        swift_allocObject();
        JSONDecoder.init()();
        lazy protocol witness table accessor for type FilesDocumentIngester.DUDocumentJSONStructure and conformance FilesDocumentIngester.DUDocumentJSONStructure();
        v55 = v42;
        dispatch thunk of JSONDecoder.decode<A>(_:from:)();
        swift_release();
        v80[4] = v76;
        v80[5] = v77;
        v80[6] = v78;
        v81 = v79;
        v80[0] = v72;
        v80[1] = v73;
        v80[2] = v74;
        v80[3] = v75;
        v56 = specialized static FilesDocumentIngester.createDocumentFromJson(parsedJson:)((uint64_t *)v80);
        outlined release of FilesDocumentIngester.DUDocumentJSONStructure(v80);
        v57 = v44;
        v58 = v70;
        v59 = v71;
        v60 = v63;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v71 + 16))(v63, a1, v70);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v59 + 56))(v60, 0, 1, v58);
        (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v56) + 0x1D8))(v60);
        v61 = objc_allocWithZone((Class)type metadata accessor for DUDocument());
        v38 = specialized DUDocument.init(rawDocument:maxLength:)(v56, 5120);

        outlined consume of Data?(v55, v57);
        outlined consume of Data?(v40, v28);
        return v38;
      }
    }
    v63 = v40;
    v45 = v67;
    Logger.init()();
    v47 = v70;
    v46 = v71;
    v48 = v66;
    (*(void (**)(char *, uint64_t, uint64_t))(v71 + 16))(v66, a1, v70);
    v49 = Logger.logObject.getter();
    v50 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v49, v50))
    {
      v51 = (uint8_t *)swift_slowAlloc();
      v52 = swift_slowAlloc();
      *(_QWORD *)&v80[0] = v52;
      *(_DWORD *)v51 = 136315138;
      v62 = v28;
      lazy protocol witness table accessor for type URL and conformance URL();
      v53 = dispatch thunk of CustomStringConvertible.description.getter();
      *(_QWORD *)&v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v54, (uint64_t *)v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v71 + 8))(v48, v47);
      _os_log_impl(&dword_2282CC000, v49, v50, "Unable to convert JSON data from filepath %s's data", v51, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22E2B117C](v52, -1, -1);
      MEMORY[0x22E2B117C](v51, -1, -1);
      outlined consume of Data?(v63, v62);

      (*(void (**)(char *, uint64_t))(v68 + 8))(v67, v69);
    }
    else
    {
      outlined consume of Data?(v63, v28);
      (*(void (**)(char *, uint64_t))(v46 + 8))(v48, v47);

      (*(void (**)(char *, uint64_t))(v68 + 8))(v45, v69);
    }
  }
  else
  {
    Logger.init()();
    v29 = v71;
    v30 = a1;
    v31 = v70;
    (*(void (**)(char *, uint64_t, uint64_t))(v71 + 16))(v6, v30, v70);
    v32 = Logger.logObject.getter();
    v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc();
      v35 = swift_slowAlloc();
      *(_QWORD *)&v80[0] = v35;
      *(_DWORD *)v34 = 136315138;
      v67 = (char *)(v34 + 4);
      lazy protocol witness table accessor for type URL and conformance URL();
      v36 = dispatch thunk of CustomStringConvertible.description.getter();
      *(_QWORD *)&v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, (uint64_t *)v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v71 + 8))(v6, v31);
      _os_log_impl(&dword_2282CC000, v32, v33, "Unable to obtain data from filepath: %s", v34, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22E2B117C](v35, -1, -1);
      MEMORY[0x22E2B117C](v34, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v29 + 8))(v6, v31);
    }

    (*(void (**)(char *, uint64_t))(v68 + 8))(v13, v69);
  }
  return 0;
}

id specialized static FilesDocumentIngester.readFromPDF(fileURL:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  NSURL *v8;
  char *v9;
  const __CFURL *v10;
  const __CFURL *v11;
  CGPDFDocument *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  _QWORD *v30;
  id v31;
  uint64_t v32;
  os_log_t v33;
  uint64_t v35;
  os_log_t v36;
  uint64_t v37;

  v2 = type metadata accessor for Logger();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (NSURL *)((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (char *)((char *)&v35 - (char *)v8);
  URL._bridgeToObjectiveC()(v8);
  v11 = v10;
  v12 = CGPDFDocumentCreateWithURL(v10);

  if (v12)
  {
    specialized PDFDocumentNormalizer.getTextForPDF(pdfDocumentRef:targetStringLength:)(v12, 5120);
    v14 = v13;
    v16 = v15;

    v17 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DURawDocument()), sel_init);
    v18 = (_QWORD *)MEMORY[0x24BEE4EA0];
    (*(void (**)(uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & *v17) + 0x178))(v14, v16);
    v19 = type metadata accessor for URL();
    v20 = *(_QWORD *)(v19 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v9, a1, v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v9, 0, 1, v19);
    (*(void (**)(char *))((*v18 & *v17) + 0x1D8))(v9);
    v21 = objc_allocWithZone((Class)type metadata accessor for DUDocument());
    v22 = specialized DUDocument.init(rawDocument:maxLength:)(v17, 5120);

  }
  else
  {
    lazy protocol witness table accessor for type PDFNormalizationError and conformance PDFNormalizationError();
    v23 = (void *)swift_allocError();
    swift_willThrow();
    Logger.init()();
    v24 = v23;
    v25 = v23;
    v26 = Logger.logObject.getter();
    v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc();
      v29 = swift_slowAlloc();
      v36 = v26;
      v30 = (_QWORD *)v29;
      *(_DWORD *)v28 = 138412290;
      v31 = v23;
      v32 = _swift_stdlib_bridgeErrorToNSError();
      v37 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v30 = v32;

      v33 = v36;
      _os_log_impl(&dword_2282CC000, v36, v27, "Error reading PDF: %@", v28, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x22E2B117C](v30, -1, -1);
      MEMORY[0x22E2B117C](v28, -1, -1);

    }
    else
    {

    }
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return 0;
  }
  return v22;
}

id specialized static FilesDocumentIngester.readFromOffice(fileURL:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  NSURL *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  uint64_t v22;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (void *)objc_opt_self();
  URL._bridgeToObjectiveC()(v6);
  v8 = v7;
  v9 = objc_msgSend(v5, sel_searchableAttributesForOfficeFile_, v7);

  if (!v9)
    return 0;
  v10 = objc_msgSend(v9, sel_textContent);
  if (!v10)
  {

    return 0;
  }
  v11 = v10;
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v14 = v13;

  v15 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DURawDocument()), sel_init);
  v16 = (_QWORD *)MEMORY[0x24BEE4EA0];
  (*(void (**)(uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & *v15) + 0x178))(v12, v14);
  v17 = type metadata accessor for URL();
  v18 = *(_QWORD *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v4, a1, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v4, 0, 1, v17);
  (*(void (**)(char *))((*v16 & *v15) + 0x1D8))(v4);
  v19 = objc_allocWithZone((Class)type metadata accessor for DUDocument());
  v20 = specialized DUDocument.init(rawDocument:maxLength:)(v15, 5120);

  return v20;
}

id specialized static FilesDocumentIngester.openiWorkFile(fileURL:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  NSURL *v13;
  char v14;
  void *v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  NSURL *v26;
  void *v27;
  void *v28;
  id v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v34;
  void *v35;
  uint64_t v36;

  v0 = type metadata accessor for UTType();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UTType?);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x24BDAC7A8](v3);
  v8 = (char *)&v36 - v7;
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v36 - v9;
  v11 = (void *)MEMORY[0x22E2AF8EC](0, 0xE000000000000000);
  URL.pathExtension.getter();
  static UTType.data.getter();
  UTType.init(filenameExtension:conformingTo:)();
  if (URL.pathExtension.getter() == 7955819 && v12 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    URL._bridgeToObjectiveC()(v13);
    v16 = v15;
    outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v10, (uint64_t)v8, &demangling cache variable for type metadata for UTType?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v8, 1, v0) == 1)
    {
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v8, &demangling cache variable for type metadata for UTType?);
      v17 = 0;
      v18 = 0xE000000000000000;
    }
    else
    {
      v17 = UTType.identifier.getter();
      v18 = v19;
      (*(void (**)(char *, uint64_t))(v1 + 8))(v8, v0);
    }
    v20 = (void *)objc_opt_self();
    v21 = (id)MEMORY[0x22E2AF8EC](v17, v18);
    swift_bridgeObjectRelease();
    v22 = objc_msgSend(v20, sel_htmlForFileURL_referringURLPrefix_uti_, v16, v11, v21);
    goto LABEL_9;
  }
  v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v14 & 1) != 0)
    goto LABEL_5;
  v25 = objc_allocWithZone(MEMORY[0x24BDBCE50]);
  URL._bridgeToObjectiveC()(v26);
  v28 = v27;
  v29 = objc_msgSend(v25, sel_initWithContentsOfURL_, v27);

  if (!v29)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v10, &demangling cache variable for type metadata for UTType?);
    v22 = 0;
    goto LABEL_16;
  }
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v10, (uint64_t)v5, &demangling cache variable for type metadata for UTType?);
  v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v1 + 48))(v5, 1, v0);
  v21 = v29;
  if (v30 == 1)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v5, &demangling cache variable for type metadata for UTType?);
    v31 = 0;
    v32 = 0xE000000000000000;
  }
  else
  {
    v31 = UTType.identifier.getter();
    v32 = v34;
    (*(void (**)(char *, uint64_t))(v1 + 8))(v5, v0);
  }
  v20 = (void *)objc_opt_self();
  v35 = (void *)MEMORY[0x22E2AF8EC](v31, v32);
  swift_bridgeObjectRelease();
  v22 = objc_msgSend(v20, sel_htmlForFileData_referringURLPrefix_uti_, v21, v11, v35);

  v16 = v21;
LABEL_9:

  v23 = v20;
  if (v22)
  {
    v24 = v22;

    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v10, &demangling cache variable for type metadata for UTType?);
    v11 = v24;
  }
  else
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v10, &demangling cache variable for type metadata for UTType?);
  }
LABEL_16:

  return v22;
}

id specialized static FilesDocumentIngester.readFromiWork(fileURL:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  id v24;
  uint64_t v25;
  Swift::String v26;
  Swift::Bool v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  Class isa;
  id v32;
  uint64_t v33;
  CGPDFDocument *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  id v44;
  id v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  void (*v53)(char *, uint64_t);
  char *v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  id v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  _OWORD v86[2];
  _OWORD v87[2];
  _OWORD v88[4];
  __int128 v89;
  uint64_t v90;
  __int128 v91;

  v82 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v82 - 8);
  v3 = MEMORY[0x24BDAC7A8](v82);
  v5 = (char *)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x24BDAC7A8](v3);
  v8 = (char *)&v74 - v7;
  MEMORY[0x24BDAC7A8](v6);
  v79 = (char *)&v74 - v9;
  v10 = type metadata accessor for Logger();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v74 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v74 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v20);
  v78 = (char *)&v74 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = specialized static FilesDocumentIngester.openiWorkFile(fileURL:)();
  if (!v22)
    return 0;
  v23 = v22;
  v76 = v19;
  v83 = v2;
  strcpy((char *)v88, "HTMLResources");
  HIWORD(v88[0]) = -4864;
  v24 = objc_msgSend(v22, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();
  if (v24)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v88, 0, 32);
  }
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v88, (uint64_t)&v89, &demangling cache variable for type metadata for Any?);
  v25 = v83;
  v80 = v11;
  v81 = v23;
  if (!v90)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)&v89, &demangling cache variable for type metadata for Any?);
    goto LABEL_19;
  }
  type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for NSDictionary);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_19:
    Logger.init()();
    v46 = v82;
    (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v5, a1, v82);
    v47 = Logger.logObject.getter();
    v48 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v47, v48))
    {

      (*(void (**)(char *, uint64_t))(v25 + 8))(v5, v46);
      (*(void (**)(char *, uint64_t))(v80 + 8))(v14, v10);
      return 0;
    }
    v49 = (uint8_t *)swift_slowAlloc();
    v50 = swift_slowAlloc();
    *(_QWORD *)&v89 = v50;
    *(_DWORD *)v49 = 136315138;
    v77 = v10;
    lazy protocol witness table accessor for type URL and conformance URL();
    v51 = dispatch thunk of CustomStringConvertible.description.getter();
    *(_QWORD *)&v88[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v52, (uint64_t *)&v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v83 + 8))(v5, v46);
    _os_log_impl(&dword_2282CC000, v47, v48, "FilesDocumentIngester found no HTMLResources for: %s", v49, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22E2B117C](v50, -1, -1);
    MEMORY[0x22E2B117C](v49, -1, -1);

    v53 = *(void (**)(char *, uint64_t))(v80 + 8);
    v54 = v14;
LABEL_26:
    v53(v54, v77);
    return 0;
  }
  v77 = v10;
  v75 = *(id *)&v87[0];
  NSDictionary.makeIterator()();
  swift_retain();
  NSDictionary.Iterator.next()();
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v88, (uint64_t)&v89, &demangling cache variable for type metadata for (key: Any, value: Any)?);
  if (!v90)
  {
LABEL_22:
    swift_release_n();
    Logger.init()();
    v55 = v83;
    v56 = v82;
    (*(void (**)(char *, uint64_t, uint64_t))(v83 + 16))(v8, a1, v82);
    v57 = Logger.logObject.getter();
    v58 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v57, v58))
    {
      v59 = (uint8_t *)swift_slowAlloc();
      v60 = swift_slowAlloc();
      *(_QWORD *)&v89 = v60;
      *(_DWORD *)v59 = 136315138;
      lazy protocol witness table accessor for type URL and conformance URL();
      v61 = dispatch thunk of CustomStringConvertible.description.getter();
      *(_QWORD *)&v88[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v62, (uint64_t *)&v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v83 + 8))(v8, v56);
      _os_log_impl(&dword_2282CC000, v57, v58, "FilesDocumentIngester found no preview PDF for %s", v59, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22E2B117C](v60, -1, -1);
      MEMORY[0x22E2B117C](v59, -1, -1);

    }
    else
    {

      (*(void (**)(char *, uint64_t))(v55 + 8))(v8, v56);
    }
    v53 = *(void (**)(char *, uint64_t))(v80 + 8);
    v54 = v17;
    goto LABEL_26;
  }
  while (1)
  {
    outlined init with take of Any(&v91, v88);
    outlined init with take of Any(&v89, v87);
    if ((swift_dynamicCast() & 1) == 0)
      goto LABEL_10;
    v26._countAndFlagsBits = 0x2E77656976657270;
    v26._object = (void *)0xEB00000000666470;
    v27 = String.hasSuffix(_:)(v26);
    swift_bridgeObjectRelease();
    outlined init with copy of Any((uint64_t)v88, (uint64_t)v87);
    if (v27)
      break;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v87);
LABEL_10:
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v88);
    NSDictionary.Iterator.next()();
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v88, (uint64_t)&v89, &demangling cache variable for type metadata for (key: Any, value: Any)?);
    if (!v90)
      goto LABEL_22;
  }
  outlined init with take of Any(v87, v86);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_10;
  swift_release();
  outlined consume of Data._Representation(v84, v85);
  outlined init with copy of Any((uint64_t)v88, (uint64_t)v86);
  if ((swift_dynamicCast() & 1) == 0)
  {
    v33 = v77;
LABEL_31:
    v64 = v83;
    v65 = v79;
    v66 = v76;
    Logger.init()();
    v67 = v82;
    (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))(v65, a1, v82);
    v68 = Logger.logObject.getter();
    v69 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v68, v69))
    {
      v70 = (uint8_t *)swift_slowAlloc();
      v71 = swift_slowAlloc();
      *(_QWORD *)&v87[0] = v71;
      *(_DWORD *)v70 = 136315138;
      lazy protocol witness table accessor for type URL and conformance URL();
      v72 = dispatch thunk of CustomStringConvertible.description.getter();
      *(_QWORD *)&v86[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v73, (uint64_t *)v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v83 + 8))(v65, v67);
      _os_log_impl(&dword_2282CC000, v68, v69, "FilesDocumentIngester failed to read preview PDF for %s", v70, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22E2B117C](v71, -1, -1);
      MEMORY[0x22E2B117C](v70, -1, -1);

      swift_release();
      (*(void (**)(char *, uint64_t))(v80 + 8))(v76, v77);
    }
    else
    {

      swift_release();
      (*(void (**)(char *, uint64_t))(v64 + 8))(v65, v67);
      (*(void (**)(char *, uint64_t))(v80 + 8))(v66, v33);
    }
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v88);
    return 0;
  }
  v28 = v84;
  v29 = v85;
  v30 = objc_allocWithZone(MEMORY[0x24BDE30E8]);
  outlined copy of Data._Representation(v28, v29);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v32 = objc_msgSend(v30, sel_initWithData_, isa);
  outlined consume of Data._Representation(v28, v29);

  v33 = v77;
  if (!v32
    || (v34 = (CGPDFDocument *)objc_msgSend(v32, sel_documentRef),
        v32,
        !v34))
  {
    outlined consume of Data._Representation(v28, v29);
    goto LABEL_31;
  }
  specialized PDFDocumentNormalizer.getTextForPDF(pdfDocumentRef:targetStringLength:)(v34, 5120);
  v36 = v35;
  v38 = v37;
  v39 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DURawDocument()), sel_init);
  v40 = (_QWORD *)MEMORY[0x24BEE4EA0];
  (*(void (**)(uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & *v39) + 0x178))(v36, v38);
  v41 = v83;
  v42 = v78;
  v43 = v82;
  (*(void (**)(char *, uint64_t, uint64_t))(v83 + 16))(v78, a1, v82);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v42, 0, 1, v43);
  (*(void (**)(char *))((*v40 & *v39) + 0x1D8))(v42);
  v44 = objc_allocWithZone((Class)type metadata accessor for DUDocument());
  v45 = specialized DUDocument.init(rawDocument:maxLength:)(v39, 5120);

  swift_release();
  outlined consume of Data._Representation(v28, v29);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v88);
  return v45;
}

id specialized static FilesDocumentIngester.readFromText(fileURL:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v17;

  v2 = type metadata accessor for Logger();
  MEMORY[0x24BDAC7A8](v2);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for String.Encoding();
  MEMORY[0x24BDAC7A8](v6);
  static String.Encoding.utf8.getter();
  v7 = String.init(contentsOf:encoding:)();
  v9 = v8;
  v10 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DURawDocument()), sel_init);
  v11 = (_QWORD *)MEMORY[0x24BEE4EA0];
  (*(void (**)(uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & *v10) + 0x178))(v7, v9);
  v12 = type metadata accessor for URL();
  v13 = *(_QWORD *)(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v5, a1, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v5, 0, 1, v12);
  (*(void (**)(char *))((*v11 & *v10) + 0x1D8))(v5);
  v14 = objc_allocWithZone((Class)type metadata accessor for DUDocument());
  v15 = specialized DUDocument.init(rawDocument:maxLength:)(v10, 5120);

  return v15;
}

uint64_t specialized static FilesDocumentIngester.readFromEML(fileURL:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  Class isa;
  id v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char **v42;
  id v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  char **v50;
  id v51;
  void *v52;
  id v53;
  void *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  id v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char **v66;
  id v67;
  void *v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char **v76;
  id v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char **v82;
  id v83;
  void *v84;
  id v85;
  void *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  id v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char **v98;
  id v99;
  void *v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  char **v108;
  id v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char **v114;
  id v115;
  void *v116;
  id v117;
  void *v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  id v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  id v130;
  void *v131;
  id v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  _QWORD *v140;
  id v141;
  char *v142;
  uint64_t v143;
  _QWORD *v144;
  id v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  void (*v153)(_QWORD *);
  _QWORD *v154;
  void (*v155)(_QWORD *);
  _QWORD *v156;
  id v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  id v166;
  id v167;
  char *v168;
  id v169;
  id v170;
  char *v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  id v178;
  _QWORD *v179;
  void (*v180)(char *, _QWORD, uint64_t, uint64_t);
  _QWORD *v181;
  uint64_t v182;

  v2 = type metadata accessor for URL();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = type metadata accessor for Logger();
  v181 = *(_QWORD **)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v171 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for String.Encoding();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v171 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v171 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = Data.init(contentsOf:options:)();
  v179 = v10;
  v171 = v7;
  v176 = v13;
  v177 = v3;
  v174 = a1;
  v175 = v2;
  v15 = v14;
  v17 = v16;
  v18 = (void *)objc_opt_self();
  v172 = v17;
  v173 = v15;
  isa = Data._bridgeToObjectiveC()().super.isa;
  v20 = objc_msgSend(v18, sel_parseRfc822_, isa);

  v181 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUDocumentEmailData()), sel_init);
  v21 = objc_msgSend(v20, sel_subject);
  if (v21)
  {
    v22 = v21;
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v25 = v24;

  }
  else
  {
    v23 = 0;
    v25 = 0;
  }
  (*(void (**)(uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & *v181) + 0xB0))(v23, v25);
  v26 = objc_msgSend(v20, sel_from);
  v27 = v26;
  if (v26)
  {
    v28 = objc_msgSend(v26, sel_name);

    if (v28)
    {
      v27 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
      v30 = v29;

      goto LABEL_9;
    }
    v27 = 0;
  }
  v30 = 0;
LABEL_9:
  (*(void (**)(void *, uint64_t))((*MEMORY[0x24BEE4EA0] & *v181) + 0xC8))(v27, v30);
  v31 = objc_msgSend(v20, sel_from);
  v32 = v31;
  if (v31)
  {
    v33 = objc_msgSend(v31, sel_emailAddress);

    v32 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    v35 = v34;

  }
  else
  {
    v35 = 0;
  }
  v36 = v181;
  v37 = (_QWORD *)MEMORY[0x24BEE4EA0];
  (*(void (**)(void *, uint64_t))((*MEMORY[0x24BEE4EA0] & *v181) + 0xE0))(v32, v35);
  v38 = objc_msgSend(v20, sel_senderDomain);
  v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v41 = v40;

  (*(void (**)(uint64_t, uint64_t))((*v37 & *v36) + 0xF8))(v39, v41);
  v42 = &selRef_e1946_;
  v43 = objc_msgSend(v20, sel_to);
  v180 = (void (*)(char *, _QWORD, uint64_t, uint64_t))type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for SGSimpleNamedEmailAddress);
  v44 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v44 >> 62)
  {
    swift_bridgeObjectRetain();
    v45 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v45 = *(_QWORD *)((v44 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v46 = MEMORY[0x24BEE4AF8];
  v178 = v20;
  if (v45)
  {
    v182 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v45 & ~(v45 >> 63), 0);
    if (v45 < 0)
    {
      __break(1u);
      goto LABEL_105;
    }
    v48 = 0;
    v49 = v182;
    v50 = &selRef_e1946_;
    do
    {
      if ((v44 & 0xC000000000000001) != 0)
        v51 = (id)MEMORY[0x22E2AFF34](v48, v44);
      else
        v51 = *(id *)(v44 + 8 * v48 + 32);
      v52 = v51;
      v53 = objc_msgSend(v51, v50[282]);
      if (v53)
      {
        v54 = v53;
        v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v57 = v56;

      }
      else
      {

        v55 = 0;
        v57 = 0xE000000000000000;
      }
      v182 = v49;
      v59 = *(_QWORD *)(v49 + 16);
      v58 = *(_QWORD *)(v49 + 24);
      if (v59 >= v58 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v58 > 1, v59 + 1, 1);
        v50 = &selRef_e1946_;
        v49 = v182;
      }
      ++v48;
      *(_QWORD *)(v49 + 16) = v59 + 1;
      v60 = v49 + 16 * v59;
      *(_QWORD *)(v60 + 32) = v55;
      *(_QWORD *)(v60 + 40) = v57;
    }
    while (v45 != v48);
    swift_bridgeObjectRelease();
    v20 = v178;
    v46 = MEMORY[0x24BEE4AF8];
    v42 = &selRef_e1946_;
  }
  else
  {
    swift_bridgeObjectRelease();
    v49 = MEMORY[0x24BEE4AF8];
  }
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v181) + 0x110))(v49);
  v61 = objc_msgSend(v20, v42[382]);
  v62 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v62 >> 62))
  {
    v63 = *(_QWORD *)((v62 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v63)
      goto LABEL_30;
LABEL_41:
    swift_bridgeObjectRelease();
    v65 = MEMORY[0x24BEE4AF8];
    goto LABEL_42;
  }
  swift_bridgeObjectRetain();
  v63 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v63)
    goto LABEL_41;
LABEL_30:
  v182 = v46;
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v63 & ~(v63 >> 63), 0);
  if (v63 < 0)
  {
LABEL_105:
    __break(1u);
    goto LABEL_106;
  }
  v64 = 0;
  v65 = v182;
  v66 = &selRef_e1946_;
  do
  {
    if ((v62 & 0xC000000000000001) != 0)
      v67 = (id)MEMORY[0x22E2AFF34](v64, v62);
    else
      v67 = *(id *)(v62 + 8 * v64 + 32);
    v68 = v67;
    v69 = objc_msgSend(v67, v66[230]);
    v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v72 = v71;

    v182 = v65;
    v74 = *(_QWORD *)(v65 + 16);
    v73 = *(_QWORD *)(v65 + 24);
    if (v74 >= v73 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v73 > 1, v74 + 1, 1);
      v66 = &selRef_e1946_;
      v65 = v182;
    }
    ++v64;
    *(_QWORD *)(v65 + 16) = v74 + 1;
    v75 = v65 + 16 * v74;
    *(_QWORD *)(v75 + 32) = v70;
    *(_QWORD *)(v75 + 40) = v72;
  }
  while (v63 != v64);
  swift_bridgeObjectRelease();
  v20 = v178;
  v46 = MEMORY[0x24BEE4AF8];
LABEL_42:
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v181) + 0x128))(v65);
  v76 = &selRef_e1946_;
  v77 = objc_msgSend(v20, sel_cc);
  v78 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v78 >> 62))
  {
    v79 = *(_QWORD *)((v78 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v79)
      goto LABEL_44;
LABEL_57:
    swift_bridgeObjectRelease();
    v81 = MEMORY[0x24BEE4AF8];
    goto LABEL_58;
  }
  swift_bridgeObjectRetain();
  v79 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v79)
    goto LABEL_57;
LABEL_44:
  v182 = v46;
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v79 & ~(v79 >> 63), 0);
  if (v79 < 0)
  {
LABEL_106:
    __break(1u);
    goto LABEL_107;
  }
  v80 = 0;
  v81 = v182;
  v82 = &selRef_e1946_;
  do
  {
    if ((v78 & 0xC000000000000001) != 0)
      v83 = (id)MEMORY[0x22E2AFF34](v80, v78);
    else
      v83 = *(id *)(v78 + 8 * v80 + 32);
    v84 = v83;
    v85 = objc_msgSend(v83, v82[282]);
    if (v85)
    {
      v86 = v85;
      v87 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v89 = v88;

    }
    else
    {

      v87 = 0;
      v89 = 0xE000000000000000;
    }
    v182 = v81;
    v91 = *(_QWORD *)(v81 + 16);
    v90 = *(_QWORD *)(v81 + 24);
    if (v91 >= v90 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v90 > 1, v91 + 1, 1);
      v82 = &selRef_e1946_;
      v81 = v182;
    }
    ++v80;
    *(_QWORD *)(v81 + 16) = v91 + 1;
    v92 = v81 + 16 * v91;
    *(_QWORD *)(v92 + 32) = v87;
    *(_QWORD *)(v92 + 40) = v89;
  }
  while (v79 != v80);
  swift_bridgeObjectRelease();
  v20 = v178;
  v46 = MEMORY[0x24BEE4AF8];
  v76 = &selRef_e1946_;
LABEL_58:
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v181) + 0x140))(v81);
  v93 = objc_msgSend(v20, v76[383]);
  v94 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v94 >> 62))
  {
    v95 = *(_QWORD *)((v94 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v95)
      goto LABEL_60;
LABEL_70:
    swift_bridgeObjectRelease();
    v97 = MEMORY[0x24BEE4AF8];
    goto LABEL_71;
  }
  swift_bridgeObjectRetain();
  v95 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v95)
    goto LABEL_70;
LABEL_60:
  v182 = v46;
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v95 & ~(v95 >> 63), 0);
  if (v95 < 0)
  {
LABEL_107:
    __break(1u);
    goto LABEL_108;
  }
  v96 = 0;
  v97 = v182;
  v98 = &selRef_e1946_;
  do
  {
    if ((v94 & 0xC000000000000001) != 0)
      v99 = (id)MEMORY[0x22E2AFF34](v96, v94);
    else
      v99 = *(id *)(v94 + 8 * v96 + 32);
    v100 = v99;
    v101 = objc_msgSend(v99, v98[230]);
    v102 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v104 = v103;

    v182 = v97;
    v106 = *(_QWORD *)(v97 + 16);
    v105 = *(_QWORD *)(v97 + 24);
    if (v106 >= v105 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v105 > 1, v106 + 1, 1);
      v98 = &selRef_e1946_;
      v97 = v182;
    }
    ++v96;
    *(_QWORD *)(v97 + 16) = v106 + 1;
    v107 = v97 + 16 * v106;
    *(_QWORD *)(v107 + 32) = v102;
    *(_QWORD *)(v107 + 40) = v104;
  }
  while (v95 != v96);
  swift_bridgeObjectRelease();
  v20 = v178;
  v46 = MEMORY[0x24BEE4AF8];
LABEL_71:
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v181) + 0x158))(v97);
  v108 = &selRef_e1946_;
  v109 = objc_msgSend(v20, sel_bcc);
  v110 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v110 >> 62))
  {
    v111 = *(_QWORD *)((v110 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v111)
      goto LABEL_73;
LABEL_86:
    swift_bridgeObjectRelease();
    v113 = MEMORY[0x24BEE4AF8];
    goto LABEL_87;
  }
  swift_bridgeObjectRetain();
  v111 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v111)
    goto LABEL_86;
LABEL_73:
  v182 = v46;
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v111 & ~(v111 >> 63), 0);
  if (v111 < 0)
  {
LABEL_108:
    __break(1u);
    goto LABEL_109;
  }
  v112 = 0;
  v113 = v182;
  v114 = &selRef_e1946_;
  do
  {
    if ((v110 & 0xC000000000000001) != 0)
      v115 = (id)MEMORY[0x22E2AFF34](v112, v110);
    else
      v115 = *(id *)(v110 + 8 * v112 + 32);
    v116 = v115;
    v117 = objc_msgSend(v115, v114[282]);
    if (v117)
    {
      v118 = v117;
      v119 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v121 = v120;

    }
    else
    {

      v119 = 0;
      v121 = 0xE000000000000000;
    }
    v182 = v113;
    v123 = *(_QWORD *)(v113 + 16);
    v122 = *(_QWORD *)(v113 + 24);
    if (v123 >= v122 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v122 > 1, v123 + 1, 1);
      v114 = &selRef_e1946_;
      v113 = v182;
    }
    ++v112;
    *(_QWORD *)(v113 + 16) = v123 + 1;
    v124 = v113 + 16 * v123;
    *(_QWORD *)(v124 + 32) = v119;
    *(_QWORD *)(v124 + 40) = v121;
  }
  while (v111 != v112);
  swift_bridgeObjectRelease();
  v20 = v178;
  v46 = MEMORY[0x24BEE4AF8];
  v108 = &selRef_e1946_;
LABEL_87:
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v181) + 0x170))(v113);
  v125 = objc_msgSend(v20, v108[384]);
  v126 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v126 >> 62)
  {
    swift_bridgeObjectRetain();
    v127 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v127)
    {
LABEL_89:
      v182 = v46;
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v127 & ~(v127 >> 63), 0);
      if ((v127 & 0x8000000000000000) == 0)
      {
        v128 = 0;
        v129 = v182;
        do
        {
          if ((v126 & 0xC000000000000001) != 0)
            v130 = (id)MEMORY[0x22E2AFF34](v128, v126);
          else
            v130 = *(id *)(v126 + 8 * v128 + 32);
          v131 = v130;
          v132 = objc_msgSend(v130, sel_emailAddress);
          v133 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v135 = v134;

          v182 = v129;
          v137 = *(_QWORD *)(v129 + 16);
          v136 = *(_QWORD *)(v129 + 24);
          if (v137 >= v136 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v136 > 1, v137 + 1, 1);
            v129 = v182;
          }
          ++v128;
          *(_QWORD *)(v129 + 16) = v137 + 1;
          v138 = v129 + 16 * v137;
          *(_QWORD *)(v138 + 32) = v133;
          *(_QWORD *)(v138 + 40) = v135;
        }
        while (v127 != v128);
        swift_bridgeObjectRelease();
        v20 = v178;
        goto LABEL_100;
      }
LABEL_109:
      __break(1u);
      return result;
    }
  }
  else
  {
    v127 = *(_QWORD *)((v126 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v127)
      goto LABEL_89;
  }
  swift_bridgeObjectRelease();
  v129 = MEMORY[0x24BEE4AF8];
LABEL_100:
  v139 = v181;
  v140 = (_QWORD *)MEMORY[0x24BEE4EA0];
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v181) + 0x188))(v129);
  v141 = objc_msgSend(v20, sel_date);
  v142 = v176;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v143 = type metadata accessor for Date();
  v180 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v143 - 8) + 56);
  v180(v142, 0, 1, v143);
  (*(void (**)(char *))((*v140 & *v139) + 0x1A0))(v142);
  v144 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUDocumentHTMLData()), sel_init);
  v145 = objc_msgSend(v20, sel_htmlContentData);
  v146 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v148 = v147;

  static String.Encoding.utf8.getter();
  v149 = String.init(data:encoding:)();
  v150 = v20;
  v152 = v151;
  outlined consume of Data._Representation(v146, v148);
  (*(void (**)(uint64_t, uint64_t))((*v140 & *v144) + 0x68))(v149, v152);
  v153 = *(void (**)(_QWORD *))((*v140 & *v144) + 0x80);
  v179 = v139;
  v153(v139);
  v154 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DURawDocument()), sel_init);
  v155 = *(void (**)(_QWORD *))((*v140 & *v154) + 0x280);
  v156 = v144;
  v155(v144);
  v157 = objc_msgSend(v150, sel_subject);
  if (v157)
  {
    v158 = v157;
    v159 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v161 = v160;

  }
  else
  {
    v159 = 0;
    v161 = 0;
  }
  v162 = (_QWORD *)MEMORY[0x24BEE4EA0];
  (*(void (**)(uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & *v154) + 0xE8))(v159, v161);
  v163 = v177;
  v164 = v171;
  v165 = v175;
  (*(void (**)(char *, uint64_t, uint64_t))(v177 + 16))(v171, v174, v175);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v163 + 56))(v164, 0, 1, v165);
  (*(void (**)(char *))((*v162 & *v154) + 0x1D8))(v164);
  v166 = v178;
  v167 = objc_msgSend(v178, sel_date);
  v168 = v176;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v180(v168, 0, 1, v143);
  (*(void (**)(char *))((*v162 & *v154) + 0x220))(v168);
  v169 = objc_allocWithZone((Class)type metadata accessor for DUDocument());
  v170 = specialized DUDocument.init(rawDocument:maxLength:)(v154, 5120);

  outlined consume of Data._Representation(v173, v172);
  return (uint64_t)v170;
}

uint64_t specialized static FilesDocumentIngester.ingestDocumentFromFile(fileURL:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  unint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  char *v19;
  _QWORD v20[2];
  uint8_t *v21;
  uint64_t v22;
  os_log_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = type metadata accessor for URL();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((specialized static FilesDocumentIngester.checkIsURLDatalessFault(fileURL:)(a1) & 1) == 0)
  {
    Logger.init()();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v23 = v11;
      v13 = (uint8_t *)swift_slowAlloc();
      v22 = swift_slowAlloc();
      v25 = v22;
      v21 = v13;
      *(_DWORD *)v13 = 136315138;
      v20[1] = v13 + 4;
      v14 = URL.absoluteString.getter();
      v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      v11 = v23;
      v16 = v12;
      v17 = v21;
      _os_log_impl(&dword_2282CC000, v23, v16, "url %s is not a dataless fault.  Will attempt to ingest the file.", v21, 0xCu);
      v18 = v22;
      swift_arrayDestroy();
      MEMORY[0x22E2B117C](v18, -1, -1);
      MEMORY[0x22E2B117C](v17, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v19 = (char *)&loc_2283F2EE4
        + 4
        * aKnqtwz[specialized static FilesDocumentIngester.getParserTypeForFilePath(fileURL:)()];
    __asm { BR              X10 }
  }
  return 0;
}

void sub_2283F3090()
{
  uint64_t v0;

  specialized static FilesDocumentIngester.readFromPDF(fileURL:)(v0);
  JUMPOUT(0x2283F2EE4);
}

void sub_2283F309C()
{
  uint64_t v0;

  specialized static FilesDocumentIngester.readFromOffice(fileURL:)(v0);
  JUMPOUT(0x2283F2EE4);
}

void sub_2283F30A8()
{
  uint64_t v0;

  specialized static FilesDocumentIngester.readFromiWork(fileURL:)(v0);
  JUMPOUT(0x2283F2EE4);
}

void sub_2283F30B4()
{
  uint64_t v0;

  specialized static FilesDocumentIngester.readFromJson(fileURL:)(v0);
  JUMPOUT(0x2283F2EE4);
}

void sub_2283F30C0()
{
  uint64_t v0;

  specialized static FilesDocumentIngester.readFromText(fileURL:)(v0);
  JUMPOUT(0x2283F2EE4);
}

void sub_2283F30CC()
{
  uint64_t v0;

  specialized static FilesDocumentIngester.readFromEML(fileURL:)(v0);
  JUMPOUT(0x2283F2EE4);
}

uint64_t specialized FilesDocumentIngester.DUDocumentJSONStructure.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1954047348 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000002284DE960
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000002284E06C0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

void specialized FilesDocumentIngester.DUDocumentJSONStructure.init(from:)(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<FilesDocumentIngester.DUDocumentJSONStructure.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type FilesDocumentIngester.DUDocumentJSONStructure.CodingKeys and conformance FilesDocumentIngester.DUDocumentJSONStructure.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  else
  {
    LOBYTE(v40) = 0;
    v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v11 = v10;
    v39 = v9;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [FilesDocumentIngester.DocumentUIElement]);
    v52 = 1;
    lazy protocol witness table accessor for type [FilesDocumentIngester.DocumentUIElement] and conformance <A> [A]();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v12 = v40;
    v52 = 2;
    lazy protocol witness table accessor for type FilesDocumentIngester.DocumentHTMLData and conformance FilesDocumentIngester.DocumentHTMLData();
    v38 = v12;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v26 = v40;
    v28 = v41;
    v13 = v43;
    v31 = v42;
    v30 = v43;
    v27 = v44;
    v29 = v45;
    v35 = v47;
    v36 = v46;
    v32 = v48;
    v33 = v49;
    v34 = v50;
    v37 = v51;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14 = v26;
    v15 = v28;
    v16 = v27;
    outlined copy of FilesDocumentIngester.DocumentHTMLData?(v26, v28, v31, v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v17 = v15;
    v18 = v31;
    v19 = v16;
    v20 = v29;
    v22 = v35;
    v21 = v36;
    outlined consume of FilesDocumentIngester.DocumentHTMLData?(v14, v17, v31, v30);
    *a2 = v39;
    a2[1] = v11;
    a2[2] = v38;
    a2[3] = v14;
    a2[4] = v28;
    a2[5] = v18;
    a2[6] = v30;
    a2[7] = v19;
    a2[8] = v20;
    a2[9] = v21;
    v23 = v32;
    a2[10] = v22;
    a2[11] = v23;
    v24 = v34;
    a2[12] = v33;
    a2[13] = v24;
    a2[14] = v37;
  }
}

uint64_t specialized FilesDocumentIngester.DocumentHTMLData.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x697274536C6D7468 && a2 == 0xEA0000000000676ELL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000002284DE680)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized FilesDocumentIngester.DocumentHTMLData.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<FilesDocumentIngester.DocumentHTMLData.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type FilesDocumentIngester.DocumentHTMLData.CodingKeys and conformance FilesDocumentIngester.DocumentHTMLData.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  LOBYTE(v34) = 0;
  v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v11 = v10;
  v44 = 1;
  lazy protocol witness table accessor for type FilesDocumentIngester.DocumentEmailData and conformance FilesDocumentIngester.DocumentEmailData();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v12 = v34;
  v27 = v34;
  v28 = v9;
  v13 = v37;
  v31 = v35;
  v32 = v38;
  v26 = v40;
  v24 = v39;
  v25 = v41;
  v29 = v36;
  v30 = v42;
  v33 = v43;
  swift_bridgeObjectRetain();
  v23 = v13;
  v14 = v24;
  outlined copy of FilesDocumentIngester.DocumentEmailData?(v12, v31);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  swift_bridgeObjectRelease();
  v15 = v27;
  v17 = v31;
  v16 = v32;
  v19 = v25;
  v18 = v26;
  result = outlined consume of FilesDocumentIngester.DocumentEmailData?(v27, v31);
  *a2 = v28;
  a2[1] = v11;
  a2[2] = v15;
  a2[3] = v17;
  v21 = v23;
  a2[4] = v29;
  a2[5] = v21;
  a2[6] = v16;
  a2[7] = v14;
  a2[8] = v18;
  a2[9] = v19;
  v22 = v33;
  a2[10] = v30;
  a2[11] = v22;
  return result;
}

uint64_t specialized FilesDocumentIngester.DocumentEmailData.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7463656A627573 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x614E7265646E6573 && a2 == 0xEA0000000000656DLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6D457265646E6573 && a2 == 0xEB000000006C6961
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6F447265646E6573 && a2 == 0xEC0000006E69616DLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6E65697069636572 && a2 == 0xEE0073656D614E74
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6E65697069636572 && a2 == 0xEF736C69616D4574)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t specialized FilesDocumentIngester.DocumentEmailData.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<FilesDocumentIngester.DocumentEmailData.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type FilesDocumentIngester.DocumentEmailData.CodingKeys and conformance FilesDocumentIngester.DocumentEmailData.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  LOBYTE(v37) = 0;
  v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v11 = v10;
  LOBYTE(v37) = 1;
  swift_bridgeObjectRetain();
  v33 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v34 = v9;
  LOBYTE(v37) = 2;
  v13 = v12;
  swift_bridgeObjectRetain();
  v14 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v35 = v15;
  v29 = v14;
  v31 = v13;
  LOBYTE(v37) = 3;
  swift_bridgeObjectRetain();
  v30 = 0;
  v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v17 = v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  v36 = 4;
  v18 = lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A], &demangling cache variable for type metadata for [String], MEMORY[0x24BEE0D38]);
  v32 = v17;
  swift_bridgeObjectRetain();
  v28 = v18;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v36 = 5;
  v26 = v37;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v19 = v37;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  swift_bridgeObjectRelease();
  v20 = v26;
  swift_bridgeObjectRelease();
  v21 = v32;
  swift_bridgeObjectRelease();
  v22 = v35;
  swift_bridgeObjectRelease();
  v23 = v31;
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a2 = v34;
  a2[1] = v11;
  a2[2] = v33;
  a2[3] = v23;
  a2[4] = v29;
  a2[5] = v22;
  a2[6] = v27;
  a2[7] = v21;
  a2[8] = v20;
  a2[9] = v19;
  return result;
}

uint64_t specialized FilesDocumentIngester.DocumentUIElement.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1954047348 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000002284DCCA0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000002284DCCF0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x65676E6172 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6F7250656C797473 && a2 == 0xEF73656974726570)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t specialized FilesDocumentIngester.DocumentUIElement.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  char v33;
  uint64_t v34;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<FilesDocumentIngester.DocumentUIElement.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type FilesDocumentIngester.DocumentUIElement.CodingKeys and conformance FilesDocumentIngester.DocumentUIElement.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  LOBYTE(v34) = 0;
  v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v11 = v10;
  v31 = a2;
  v32 = v9;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  v33 = 1;
  v13 = lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A], &demangling cache variable for type metadata for [String], MEMORY[0x24BEE0D38]);
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v27 = v12;
  v28 = v13;
  v30 = v11;
  v14 = v34;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int64]);
  v33 = 2;
  lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [Int64] and conformance <A> [A], &demangling cache variable for type metadata for [Int64], MEMORY[0x24BEE4038]);
  swift_bridgeObjectRetain();
  v29 = 0;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v26 = v14;
  v15 = v34;
  v33 = 3;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v25 = v15;
  v16 = v34;
  v33 = 4;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v17 = v30;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v18 = v34;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v19 = v16;
  v20 = v25;
  swift_bridgeObjectRelease();
  v21 = v26;
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v23 = v31;
  *v31 = v32;
  v23[1] = v17;
  v23[2] = v21;
  v23[3] = v20;
  v23[4] = v19;
  v23[5] = v18;
  return result;
}

uint64_t type metadata accessor for FilesDocumentIngester()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type FilesDocumentIngesterError and conformance FilesDocumentIngesterError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FilesDocumentIngesterError and conformance FilesDocumentIngesterError;
  if (!lazy protocol witness table cache variable for type FilesDocumentIngesterError and conformance FilesDocumentIngesterError)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for FilesDocumentIngesterError, &type metadata for FilesDocumentIngesterError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FilesDocumentIngesterError and conformance FilesDocumentIngesterError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FilesDocumentIngesterError and conformance FilesDocumentIngesterError;
  if (!lazy protocol witness table cache variable for type FilesDocumentIngesterError and conformance FilesDocumentIngesterError)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for FilesDocumentIngesterError, &type metadata for FilesDocumentIngesterError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FilesDocumentIngesterError and conformance FilesDocumentIngesterError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FilesDocumentIngester.ShouldPerfromOCR and conformance FilesDocumentIngester.ShouldPerfromOCR()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FilesDocumentIngester.ShouldPerfromOCR and conformance FilesDocumentIngester.ShouldPerfromOCR;
  if (!lazy protocol witness table cache variable for type FilesDocumentIngester.ShouldPerfromOCR and conformance FilesDocumentIngester.ShouldPerfromOCR)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for FilesDocumentIngester.ShouldPerfromOCR, &type metadata for FilesDocumentIngester.ShouldPerfromOCR);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FilesDocumentIngester.ShouldPerfromOCR and conformance FilesDocumentIngester.ShouldPerfromOCR);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FilesDocumentIngester.FileParserType and conformance FilesDocumentIngester.FileParserType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FilesDocumentIngester.FileParserType and conformance FilesDocumentIngester.FileParserType;
  if (!lazy protocol witness table cache variable for type FilesDocumentIngester.FileParserType and conformance FilesDocumentIngester.FileParserType)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for FilesDocumentIngester.FileParserType, &type metadata for FilesDocumentIngester.FileParserType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FilesDocumentIngester.FileParserType and conformance FilesDocumentIngester.FileParserType);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FilesDocumentIngesterError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_2283F480C + 4 * asc_2284C7A12[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_2283F482C + 4 * byte_2284C7A17[v4]))();
}

_BYTE *sub_2283F480C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_2283F482C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2283F4834(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2283F483C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2283F4844(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2283F484C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FilesDocumentIngesterError()
{
  return &type metadata for FilesDocumentIngesterError;
}

ValueMetadata *type metadata accessor for FilesDocumentIngester.ShouldPerfromOCR()
{
  return &type metadata for FilesDocumentIngester.ShouldPerfromOCR;
}

uint64_t getEnumTagSinglePayload for FilesDocumentIngester.FileParserType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FilesDocumentIngester.FileParserType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_2283F495C + 4 * byte_2284C7A21[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_2283F4990 + 4 * byte_2284C7A1C[v4]))();
}

uint64_t sub_2283F4990(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2283F4998(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2283F49A0);
  return result;
}

uint64_t sub_2283F49AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2283F49B4);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_2283F49B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2283F49C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FilesDocumentIngester.FileParserType()
{
  return &type metadata for FilesDocumentIngester.FileParserType;
}

uint64_t destroy for FilesDocumentIngester.DUDocumentJSONStructure(uint64_t a1)
{
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = *(_QWORD *)(a1 + 32);
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    result = *(_QWORD *)(a1 + 48);
    if (result != 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t initializeWithCopy for FilesDocumentIngester.DUDocumentJSONStructure(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v5 == 1)
  {
    v6 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v6;
    v7 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v7;
    v8 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v8;
  }
  else
  {
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = v5;
    v9 = *(_QWORD *)(a2 + 48);
    swift_bridgeObjectRetain();
    if (v9 == 1)
    {
      v10 = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 88) = v10;
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      v11 = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = v11;
    }
    else
    {
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = v9;
      v12 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = v12;
      v13 = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = v13;
      v14 = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = v14;
      v16 = *(_QWORD *)(a2 + 104);
      v15 = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 104) = v16;
      *(_QWORD *)(a1 + 112) = v15;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  return a1;
}

uint64_t assignWithCopy for FilesDocumentIngester.DUDocumentJSONStructure(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (_OWORD *)(a1 + 24);
  v5 = (_OWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 32) == 1)
  {
    if (v6 == 1)
    {
      v7 = *(_OWORD *)(a2 + 40);
      *v4 = *v5;
      *(_OWORD *)(a1 + 40) = v7;
      v8 = *(_OWORD *)(a2 + 56);
      v9 = *(_OWORD *)(a2 + 72);
      v10 = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 104) = v10;
      *(_OWORD *)(a1 + 56) = v8;
      *(_OWORD *)(a1 + 72) = v9;
      return a1;
    }
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    v15 = *(_QWORD *)(a2 + 48);
    swift_bridgeObjectRetain();
    if (v15 == 1)
    {
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      v16 = *(_OWORD *)(a2 + 56);
      v17 = *(_OWORD *)(a2 + 72);
      v18 = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 104) = v18;
      *(_OWORD *)(a1 + 56) = v16;
      *(_OWORD *)(a1 + 72) = v17;
      return a1;
    }
LABEL_11:
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return a1;
  }
  if (v6 == 1)
  {
    outlined destroy of FilesDocumentIngester.DocumentHTMLData(a1 + 24);
    v11 = *(_OWORD *)(a2 + 40);
    *v4 = *v5;
    *(_OWORD *)(a1 + 40) = v11;
    v12 = *(_OWORD *)(a2 + 104);
    v14 = *(_OWORD *)(a2 + 56);
    v13 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v12;
    *(_OWORD *)(a1 + 56) = v14;
    *(_OWORD *)(a1 + 72) = v13;
    return a1;
  }
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19 = (_OWORD *)(a1 + 40);
  v20 = (_OWORD *)(a2 + 40);
  v21 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(a1 + 48) == 1)
  {
    if (v21 == 1)
    {
      *v19 = *v20;
      v22 = *(_OWORD *)(a2 + 56);
      v23 = *(_OWORD *)(a2 + 72);
      v24 = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 104) = v24;
      *(_OWORD *)(a1 + 56) = v22;
      *(_OWORD *)(a1 + 72) = v23;
      return a1;
    }
    goto LABEL_11;
  }
  if (v21 == 1)
  {
    outlined destroy of FilesDocumentIngester.DocumentEmailData(a1 + 40);
    *v19 = *v20;
    v25 = *(_OWORD *)(a2 + 104);
    v27 = *(_OWORD *)(a2 + 56);
    v26 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v25;
    *(_OWORD *)(a1 + 56) = v27;
    *(_OWORD *)(a1 + 72) = v26;
  }
  else
  {
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  return a1;
}

uint64_t outlined destroy of FilesDocumentIngester.DocumentEmailData(uint64_t a1)
{
  destroy for FilesDocumentIngester.DocumentEmailData();
  return a1;
}

uint64_t outlined destroy of FilesDocumentIngester.DocumentHTMLData(uint64_t a1)
{
  destroy for FilesDocumentIngester.DocumentHTMLData(a1);
  return a1;
}

__n128 __swift_memcpy120_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for FilesDocumentIngester.DUDocumentJSONStructure(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 32) == 1)
    goto LABEL_4;
  v5 = *(_QWORD *)(a2 + 32);
  if (v5 == 1)
  {
    outlined destroy of FilesDocumentIngester.DocumentHTMLData(a1 + 24);
LABEL_4:
    v6 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v6;
    v7 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v7;
    v8 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v8;
    return a1;
  }
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 48) != 1)
  {
    v9 = *(_QWORD *)(a2 + 48);
    if (v9 != 1)
    {
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = v9;
      swift_bridgeObjectRelease();
      v12 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = v12;
      swift_bridgeObjectRelease();
      v13 = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = v13;
      swift_bridgeObjectRelease();
      v14 = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = v14;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of FilesDocumentIngester.DocumentEmailData(a1 + 40);
  }
  v10 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = v10;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  v11 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v11;
  return a1;
}

uint64_t getEnumTagSinglePayload for FilesDocumentIngester.DUDocumentJSONStructure(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 120))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FilesDocumentIngester.DUDocumentJSONStructure(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 120) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 120) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for FilesDocumentIngester.DUDocumentJSONStructure()
{
  return &type metadata for FilesDocumentIngester.DUDocumentJSONStructure;
}

uint64_t destroy for FilesDocumentIngester.DocumentHTMLData(uint64_t a1)
{
  uint64_t result;

  swift_bridgeObjectRelease();
  result = *(_QWORD *)(a1 + 24);
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for FilesDocumentIngester.DocumentHTMLData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  if (v5 == 1)
  {
    v6 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v6;
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    v7 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v7;
  }
  else
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v5;
    v8 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = v8;
    v9 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = v9;
    v10 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = v10;
    v12 = *(_QWORD *)(a2 + 80);
    v11 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 80) = v12;
    *(_QWORD *)(a1 + 88) = v11;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for FilesDocumentIngester.DocumentHTMLData(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (_OWORD *)(a1 + 16);
  v5 = (_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 24) == 1)
  {
    if (v6 == 1)
    {
      *v4 = *v5;
      v7 = *(_OWORD *)(a2 + 32);
      v8 = *(_OWORD *)(a2 + 48);
      v9 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v9;
      *(_OWORD *)(a1 + 32) = v7;
      *(_OWORD *)(a1 + 48) = v8;
    }
    else
    {
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v6 == 1)
  {
    outlined destroy of FilesDocumentIngester.DocumentEmailData(a1 + 16);
    *v4 = *v5;
    v10 = *(_OWORD *)(a2 + 80);
    v12 = *(_OWORD *)(a2 + 32);
    v11 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v10;
    *(_OWORD *)(a1 + 32) = v12;
    *(_OWORD *)(a1 + 48) = v11;
  }
  else
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  return a1;
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

_QWORD *assignWithTake for FilesDocumentIngester.DocumentHTMLData(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  if (a1[3] != 1)
  {
    v5 = a2[3];
    if (v5 != 1)
    {
      a1[2] = a2[2];
      a1[3] = v5;
      swift_bridgeObjectRelease();
      v8 = a2[5];
      a1[4] = a2[4];
      a1[5] = v8;
      swift_bridgeObjectRelease();
      v9 = a2[7];
      a1[6] = a2[6];
      a1[7] = v9;
      swift_bridgeObjectRelease();
      v10 = a2[9];
      a1[8] = a2[8];
      a1[9] = v10;
      swift_bridgeObjectRelease();
      a1[10] = a2[10];
      swift_bridgeObjectRelease();
      a1[11] = a2[11];
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of FilesDocumentIngester.DocumentEmailData((uint64_t)(a1 + 2));
  }
  v6 = *((_OWORD *)a2 + 4);
  *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
  *((_OWORD *)a1 + 4) = v6;
  *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
  v7 = *((_OWORD *)a2 + 2);
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  *((_OWORD *)a1 + 2) = v7;
  return a1;
}

uint64_t getEnumTagSinglePayload for FilesDocumentIngester.DocumentHTMLData(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 96))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FilesDocumentIngester.DocumentHTMLData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 96) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for FilesDocumentIngester.DocumentHTMLData()
{
  return &type metadata for FilesDocumentIngester.DocumentHTMLData;
}

uint64_t destroy for FilesDocumentIngester.DocumentEmailData()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for FilesDocumentIngester.DocumentEmailData(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for FilesDocumentIngester.DocumentEmailData(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for FilesDocumentIngester.DocumentEmailData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FilesDocumentIngester.DocumentEmailData(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 80))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FilesDocumentIngester.DocumentEmailData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 80) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for FilesDocumentIngester.DocumentEmailData()
{
  return &type metadata for FilesDocumentIngester.DocumentEmailData;
}

uint64_t destroy for FilesDocumentIngester.DocumentUIElement()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for FilesDocumentIngester.DocumentUIElement(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for FilesDocumentIngester.DocumentUIElement(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for FilesDocumentIngester.DocumentUIElement(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FilesDocumentIngester.DocumentUIElement(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FilesDocumentIngester.DocumentUIElement(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for FilesDocumentIngester.DocumentUIElement()
{
  return &type metadata for FilesDocumentIngester.DocumentUIElement;
}

unint64_t lazy protocol witness table accessor for type URL and conformance URL()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type URL and conformance URL;
  if (!lazy protocol witness table cache variable for type URL and conformance URL)
  {
    v1 = type metadata accessor for URL();
    result = MEMORY[0x22E2B10E0](MEMORY[0x24BDCDB28], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FilesDocumentIngester.DUDocumentJSONStructure and conformance FilesDocumentIngester.DUDocumentJSONStructure()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FilesDocumentIngester.DUDocumentJSONStructure and conformance FilesDocumentIngester.DUDocumentJSONStructure;
  if (!lazy protocol witness table cache variable for type FilesDocumentIngester.DUDocumentJSONStructure and conformance FilesDocumentIngester.DUDocumentJSONStructure)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for FilesDocumentIngester.DUDocumentJSONStructure, &type metadata for FilesDocumentIngester.DUDocumentJSONStructure);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FilesDocumentIngester.DUDocumentJSONStructure and conformance FilesDocumentIngester.DUDocumentJSONStructure);
  }
  return result;
}

_QWORD *outlined release of FilesDocumentIngester.DUDocumentJSONStructure(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[5];
  v5 = a1[4];
  v6 = a1[3];
  v3 = a1[6];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of FilesDocumentIngester.DocumentHTMLData?(v6, v5, v2, v3);
  return a1;
}

void outlined consume of FilesDocumentIngester.DocumentHTMLData?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRelease();
    outlined consume of FilesDocumentIngester.DocumentEmailData?(a3, a4);
  }
}

uint64_t outlined consume of FilesDocumentIngester.DocumentEmailData?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FilesDocumentIngester.DocumentUIElement.CodingKeys and conformance FilesDocumentIngester.DocumentUIElement.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FilesDocumentIngester.DocumentUIElement.CodingKeys and conformance FilesDocumentIngester.DocumentUIElement.CodingKeys;
  if (!lazy protocol witness table cache variable for type FilesDocumentIngester.DocumentUIElement.CodingKeys and conformance FilesDocumentIngester.DocumentUIElement.CodingKeys)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for FilesDocumentIngester.DocumentUIElement.CodingKeys, &unk_24F0FC308);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FilesDocumentIngester.DocumentUIElement.CodingKeys and conformance FilesDocumentIngester.DocumentUIElement.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FilesDocumentIngester.DocumentUIElement.CodingKeys and conformance FilesDocumentIngester.DocumentUIElement.CodingKeys;
  if (!lazy protocol witness table cache variable for type FilesDocumentIngester.DocumentUIElement.CodingKeys and conformance FilesDocumentIngester.DocumentUIElement.CodingKeys)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for FilesDocumentIngester.DocumentUIElement.CodingKeys, &unk_24F0FC308);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FilesDocumentIngester.DocumentUIElement.CodingKeys and conformance FilesDocumentIngester.DocumentUIElement.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FilesDocumentIngester.DocumentUIElement.CodingKeys and conformance FilesDocumentIngester.DocumentUIElement.CodingKeys;
  if (!lazy protocol witness table cache variable for type FilesDocumentIngester.DocumentUIElement.CodingKeys and conformance FilesDocumentIngester.DocumentUIElement.CodingKeys)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for FilesDocumentIngester.DocumentUIElement.CodingKeys, &unk_24F0FC308);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FilesDocumentIngester.DocumentUIElement.CodingKeys and conformance FilesDocumentIngester.DocumentUIElement.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FilesDocumentIngester.DocumentUIElement.CodingKeys and conformance FilesDocumentIngester.DocumentUIElement.CodingKeys;
  if (!lazy protocol witness table cache variable for type FilesDocumentIngester.DocumentUIElement.CodingKeys and conformance FilesDocumentIngester.DocumentUIElement.CodingKeys)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for FilesDocumentIngester.DocumentUIElement.CodingKeys, &unk_24F0FC308);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FilesDocumentIngester.DocumentUIElement.CodingKeys and conformance FilesDocumentIngester.DocumentUIElement.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FilesDocumentIngester.DocumentEmailData.CodingKeys and conformance FilesDocumentIngester.DocumentEmailData.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FilesDocumentIngester.DocumentEmailData.CodingKeys and conformance FilesDocumentIngester.DocumentEmailData.CodingKeys;
  if (!lazy protocol witness table cache variable for type FilesDocumentIngester.DocumentEmailData.CodingKeys and conformance FilesDocumentIngester.DocumentEmailData.CodingKeys)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for FilesDocumentIngester.DocumentEmailData.CodingKeys, &unk_24F0FC278);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FilesDocumentIngester.DocumentEmailData.CodingKeys and conformance FilesDocumentIngester.DocumentEmailData.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FilesDocumentIngester.DocumentEmailData.CodingKeys and conformance FilesDocumentIngester.DocumentEmailData.CodingKeys;
  if (!lazy protocol witness table cache variable for type FilesDocumentIngester.DocumentEmailData.CodingKeys and conformance FilesDocumentIngester.DocumentEmailData.CodingKeys)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for FilesDocumentIngester.DocumentEmailData.CodingKeys, &unk_24F0FC278);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FilesDocumentIngester.DocumentEmailData.CodingKeys and conformance FilesDocumentIngester.DocumentEmailData.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FilesDocumentIngester.DocumentEmailData.CodingKeys and conformance FilesDocumentIngester.DocumentEmailData.CodingKeys;
  if (!lazy protocol witness table cache variable for type FilesDocumentIngester.DocumentEmailData.CodingKeys and conformance FilesDocumentIngester.DocumentEmailData.CodingKeys)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for FilesDocumentIngester.DocumentEmailData.CodingKeys, &unk_24F0FC278);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FilesDocumentIngester.DocumentEmailData.CodingKeys and conformance FilesDocumentIngester.DocumentEmailData.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FilesDocumentIngester.DocumentEmailData.CodingKeys and conformance FilesDocumentIngester.DocumentEmailData.CodingKeys;
  if (!lazy protocol witness table cache variable for type FilesDocumentIngester.DocumentEmailData.CodingKeys and conformance FilesDocumentIngester.DocumentEmailData.CodingKeys)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for FilesDocumentIngester.DocumentEmailData.CodingKeys, &unk_24F0FC278);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FilesDocumentIngester.DocumentEmailData.CodingKeys and conformance FilesDocumentIngester.DocumentEmailData.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FilesDocumentIngester.DocumentHTMLData.CodingKeys and conformance FilesDocumentIngester.DocumentHTMLData.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FilesDocumentIngester.DocumentHTMLData.CodingKeys and conformance FilesDocumentIngester.DocumentHTMLData.CodingKeys;
  if (!lazy protocol witness table cache variable for type FilesDocumentIngester.DocumentHTMLData.CodingKeys and conformance FilesDocumentIngester.DocumentHTMLData.CodingKeys)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for FilesDocumentIngester.DocumentHTMLData.CodingKeys, &unk_24F0FC1E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FilesDocumentIngester.DocumentHTMLData.CodingKeys and conformance FilesDocumentIngester.DocumentHTMLData.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FilesDocumentIngester.DocumentHTMLData.CodingKeys and conformance FilesDocumentIngester.DocumentHTMLData.CodingKeys;
  if (!lazy protocol witness table cache variable for type FilesDocumentIngester.DocumentHTMLData.CodingKeys and conformance FilesDocumentIngester.DocumentHTMLData.CodingKeys)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for FilesDocumentIngester.DocumentHTMLData.CodingKeys, &unk_24F0FC1E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FilesDocumentIngester.DocumentHTMLData.CodingKeys and conformance FilesDocumentIngester.DocumentHTMLData.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FilesDocumentIngester.DocumentHTMLData.CodingKeys and conformance FilesDocumentIngester.DocumentHTMLData.CodingKeys;
  if (!lazy protocol witness table cache variable for type FilesDocumentIngester.DocumentHTMLData.CodingKeys and conformance FilesDocumentIngester.DocumentHTMLData.CodingKeys)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for FilesDocumentIngester.DocumentHTMLData.CodingKeys, &unk_24F0FC1E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FilesDocumentIngester.DocumentHTMLData.CodingKeys and conformance FilesDocumentIngester.DocumentHTMLData.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FilesDocumentIngester.DocumentHTMLData.CodingKeys and conformance FilesDocumentIngester.DocumentHTMLData.CodingKeys;
  if (!lazy protocol witness table cache variable for type FilesDocumentIngester.DocumentHTMLData.CodingKeys and conformance FilesDocumentIngester.DocumentHTMLData.CodingKeys)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for FilesDocumentIngester.DocumentHTMLData.CodingKeys, &unk_24F0FC1E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FilesDocumentIngester.DocumentHTMLData.CodingKeys and conformance FilesDocumentIngester.DocumentHTMLData.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FilesDocumentIngester.DocumentEmailData and conformance FilesDocumentIngester.DocumentEmailData()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FilesDocumentIngester.DocumentEmailData and conformance FilesDocumentIngester.DocumentEmailData;
  if (!lazy protocol witness table cache variable for type FilesDocumentIngester.DocumentEmailData and conformance FilesDocumentIngester.DocumentEmailData)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for FilesDocumentIngester.DocumentEmailData, &type metadata for FilesDocumentIngester.DocumentEmailData);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FilesDocumentIngester.DocumentEmailData and conformance FilesDocumentIngester.DocumentEmailData);
  }
  return result;
}

uint64_t outlined copy of FilesDocumentIngester.DocumentEmailData?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FilesDocumentIngester.DUDocumentJSONStructure.CodingKeys and conformance FilesDocumentIngester.DUDocumentJSONStructure.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FilesDocumentIngester.DUDocumentJSONStructure.CodingKeys and conformance FilesDocumentIngester.DUDocumentJSONStructure.CodingKeys;
  if (!lazy protocol witness table cache variable for type FilesDocumentIngester.DUDocumentJSONStructure.CodingKeys and conformance FilesDocumentIngester.DUDocumentJSONStructure.CodingKeys)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for FilesDocumentIngester.DUDocumentJSONStructure.CodingKeys, &unk_24F0FC158);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FilesDocumentIngester.DUDocumentJSONStructure.CodingKeys and conformance FilesDocumentIngester.DUDocumentJSONStructure.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FilesDocumentIngester.DUDocumentJSONStructure.CodingKeys and conformance FilesDocumentIngester.DUDocumentJSONStructure.CodingKeys;
  if (!lazy protocol witness table cache variable for type FilesDocumentIngester.DUDocumentJSONStructure.CodingKeys and conformance FilesDocumentIngester.DUDocumentJSONStructure.CodingKeys)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for FilesDocumentIngester.DUDocumentJSONStructure.CodingKeys, &unk_24F0FC158);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FilesDocumentIngester.DUDocumentJSONStructure.CodingKeys and conformance FilesDocumentIngester.DUDocumentJSONStructure.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FilesDocumentIngester.DUDocumentJSONStructure.CodingKeys and conformance FilesDocumentIngester.DUDocumentJSONStructure.CodingKeys;
  if (!lazy protocol witness table cache variable for type FilesDocumentIngester.DUDocumentJSONStructure.CodingKeys and conformance FilesDocumentIngester.DUDocumentJSONStructure.CodingKeys)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for FilesDocumentIngester.DUDocumentJSONStructure.CodingKeys, &unk_24F0FC158);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FilesDocumentIngester.DUDocumentJSONStructure.CodingKeys and conformance FilesDocumentIngester.DUDocumentJSONStructure.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FilesDocumentIngester.DUDocumentJSONStructure.CodingKeys and conformance FilesDocumentIngester.DUDocumentJSONStructure.CodingKeys;
  if (!lazy protocol witness table cache variable for type FilesDocumentIngester.DUDocumentJSONStructure.CodingKeys and conformance FilesDocumentIngester.DUDocumentJSONStructure.CodingKeys)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for FilesDocumentIngester.DUDocumentJSONStructure.CodingKeys, &unk_24F0FC158);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FilesDocumentIngester.DUDocumentJSONStructure.CodingKeys and conformance FilesDocumentIngester.DUDocumentJSONStructure.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [FilesDocumentIngester.DocumentUIElement] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = lazy protocol witness table cache variable for type [FilesDocumentIngester.DocumentUIElement] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [FilesDocumentIngester.DocumentUIElement] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [FilesDocumentIngester.DocumentUIElement]);
    v2 = lazy protocol witness table accessor for type FilesDocumentIngester.DocumentUIElement and conformance FilesDocumentIngester.DocumentUIElement();
    result = MEMORY[0x22E2B10E0](MEMORY[0x24BEE12D0], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [FilesDocumentIngester.DocumentUIElement] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FilesDocumentIngester.DocumentUIElement and conformance FilesDocumentIngester.DocumentUIElement()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FilesDocumentIngester.DocumentUIElement and conformance FilesDocumentIngester.DocumentUIElement;
  if (!lazy protocol witness table cache variable for type FilesDocumentIngester.DocumentUIElement and conformance FilesDocumentIngester.DocumentUIElement)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for FilesDocumentIngester.DocumentUIElement, &type metadata for FilesDocumentIngester.DocumentUIElement);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FilesDocumentIngester.DocumentUIElement and conformance FilesDocumentIngester.DocumentUIElement);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FilesDocumentIngester.DocumentHTMLData and conformance FilesDocumentIngester.DocumentHTMLData()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FilesDocumentIngester.DocumentHTMLData and conformance FilesDocumentIngester.DocumentHTMLData;
  if (!lazy protocol witness table cache variable for type FilesDocumentIngester.DocumentHTMLData and conformance FilesDocumentIngester.DocumentHTMLData)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for FilesDocumentIngester.DocumentHTMLData, &type metadata for FilesDocumentIngester.DocumentHTMLData);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FilesDocumentIngester.DocumentHTMLData and conformance FilesDocumentIngester.DocumentHTMLData);
  }
  return result;
}

uint64_t outlined copy of FilesDocumentIngester.DocumentHTMLData?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRetain();
    return outlined copy of FilesDocumentIngester.DocumentEmailData?(a3, a4);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FilesDocumentIngester.ShouldPerfromOCR(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_2283F6178 + 4 * byte_2284C7A2B[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_2283F61AC + 4 * byte_2284C7A26[v4]))();
}

uint64_t sub_2283F61AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2283F61B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2283F61BCLL);
  return result;
}

uint64_t sub_2283F61C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2283F61D0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_2283F61D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2283F61DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for FilesDocumentIngester.DUDocumentJSONStructure.CodingKeys()
{
  return &unk_24F0FC158;
}

uint64_t storeEnumTagSinglePayload for FilesDocumentIngester.DocumentHTMLData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2283F6244 + 4 * byte_2284C7A35[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2283F6278 + 4 * byte_2284C7A30[v4]))();
}

uint64_t sub_2283F6278(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2283F6280(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2283F6288);
  return result;
}

uint64_t sub_2283F6294(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2283F629CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2283F62A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2283F62A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for FilesDocumentIngester.DocumentHTMLData.CodingKeys()
{
  return &unk_24F0FC1E8;
}

uint64_t storeEnumTagSinglePayload for FilesDocumentIngester.DocumentEmailData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_2283F6310 + 4 * byte_2284C7A3F[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_2283F6344 + 4 * byte_2284C7A3A[v4]))();
}

uint64_t sub_2283F6344(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2283F634C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2283F6354);
  return result;
}

uint64_t sub_2283F6360(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2283F6368);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_2283F636C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2283F6374(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for FilesDocumentIngester.DocumentEmailData.CodingKeys()
{
  return &unk_24F0FC278;
}

uint64_t storeEnumTagSinglePayload for FilesDocumentIngester.DocumentUIElement.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_2283F63DC + 4 * byte_2284C7A49[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_2283F6410 + 4 * byte_2284C7A44[v4]))();
}

uint64_t sub_2283F6410(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2283F6418(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2283F6420);
  return result;
}

uint64_t sub_2283F642C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2283F6434);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_2283F6438(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2283F6440(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for FilesDocumentIngester.DocumentUIElement.CodingKeys()
{
  return &unk_24F0FC308;
}

id DUCalendarEvent.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t DUStructuredEntity.__allocating_init<A>(proto:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  id v41;
  char *v42;
  char v43;
  void (*v44)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  id v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  double v68;
  double *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t i;
  _QWORD *v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v111;
  char v112;
  unint64_t v113;
  uint64_t v114;
  _BOOL8 v115;
  uint64_t v116;
  char v117;
  unint64_t v118;
  char v119;
  _QWORD *v120;
  _QWORD *v121;
  uint64_t v122;
  BOOL v123;
  uint64_t v124;
  id v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int *v130;
  uint64_t (*v131)(uint64_t, uint64_t, int *);
  int v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  _BYTE *v136;
  _QWORD *v137;
  _QWORD *v138;
  char *v139;
  void **v140;
  void *v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int *v150;
  uint64_t (*v151)(uint64_t, uint64_t, int *);
  char *v152;
  uint64_t v153;
  uint64_t v154;
  _OWORD *v155;
  char *v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  char *v161;
  void **v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t (*v168)(uint64_t, uint64_t, uint64_t);
  int v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  id v177;
  uint64_t *v178;
  uint64_t v179;
  unint64_t v180;
  char *v181;
  id v182;
  void **v183;
  void *v184;
  uint64_t result;
  _QWORD v186[2];
  uint64_t v187;
  uint64_t v188;
  _BYTE *v189;
  uint64_t v190;
  _OWORD *v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  int *v197;
  uint64_t v198;
  uint64_t v199;
  int *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD *v214;
  uint64_t v215;

  v5 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v202 = *(_QWORD *)(v5 - 8);
  v203 = v5;
  v6 = MEMORY[0x24BDAC7A8](v5);
  v194 = (char *)v186 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v193 = (uint64_t)v186 - v8;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v192 = (uint64_t)v186 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v201 = (uint64_t)v186 - v12;
  v13 = type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0);
  v199 = *(_QWORD *)(v13 - 8);
  v200 = (int *)v13;
  MEMORY[0x24BDAC7A8](v13);
  v191 = (_OWORD *)((char *)v186 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DisplayInfo?);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v190 = (uint64_t)v186 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v198 = (uint64_t)v186 - v18;
  v19 = type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0);
  v196 = *(_QWORD *)(v19 - 8);
  v197 = (int *)v19;
  MEMORY[0x24BDAC7A8](v19);
  v189 = (char *)v186 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CalendarEvent?);
  v22 = MEMORY[0x24BDAC7A8](v21);
  v188 = (uint64_t)v186 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v195 = (uint64_t)v186 - v24;
  v213 = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel(0);
  v207 = *(_QWORD *)(v213 - 8);
  v25 = MEMORY[0x24BDAC7A8](v213);
  v212 = (uint64_t)v186 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x24BDAC7A8](v25);
  v208 = (uint64_t)v186 - v28;
  MEMORY[0x24BDAC7A8](v27);
  v211 = (uint64_t)v186 - v29;
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntity?);
  v31 = MEMORY[0x24BDAC7A8](v30);
  v33 = (char *)v186 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v36 = (char *)v186 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0);
  v38 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v40 = (char *)v186 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = objc_msgSend(objc_allocWithZone(v2), sel_init);
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v36, a1, a2);
  v42 = (char *)v41;
  v43 = swift_dynamicCast();
  v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56);
  if ((v43 & 1) == 0)
  {
    v44(v33, 1, 1, v37);

    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(a1, a2);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v33, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntity?);
    return 0;
  }
  v206 = v42;
  v187 = a2;
  v44(v33, 0, 1, v37);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v33, (uint64_t)v40, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity);
  v45 = *(int *)(v37 + 20);
  v204 = v40;
  v205 = v45;
  v46 = *(_QWORD **)&v40[v45];
  swift_beginAccess();
  if (v46[3])
  {
    v47 = v46[2];
    v48 = v46[3];
  }
  else
  {
    v47 = 0;
    v48 = 0xE000000000000000;
  }
  v209 = v34;
  v210 = a1;
  v50 = &v206[OBJC_IVAR____TtC21DocumentUnderstanding18DUStructuredEntity_title];
  swift_beginAccess();
  *(_QWORD *)v50 = v47;
  *((_QWORD *)v50 + 1) = v48;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if (v46[5])
  {
    v51 = v46[4];
    v52 = v46[5];
  }
  else
  {
    v51 = 0;
    v52 = 0xE000000000000000;
  }
  v53 = &v206[OBJC_IVAR____TtC21DocumentUnderstanding18DUStructuredEntity_type];
  swift_beginAccess();
  *(_QWORD *)v53 = v51;
  *((_QWORD *)v53 + 1) = v52;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v54 = v46[6];
  v215 = MEMORY[0x24BEE4AF8];
  v55 = *(_QWORD *)(v54 + 16);
  if (v55)
  {
    v56 = v54 + ((*(unsigned __int8 *)(v207 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v207 + 80));
    v207 = *(_QWORD *)(v207 + 72);
    v186[1] = v54;
    swift_bridgeObjectRetain_n();
    do
    {
      v57 = v211;
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v56, v211, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel);
      v58 = v208;
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v57, v208, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel);
      v59 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUStructuredExtractionLabel()), sel_init);
      v60 = v58;
      v61 = v212;
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v60, v212, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel);
      v62 = (uint64_t *)(v61 + *(int *)(v213 + 20));
      if (v62[1])
      {
        v63 = *v62;
        v64 = v62[1];
      }
      else
      {
        v63 = 0;
        v64 = 0xE000000000000000;
      }
      v65 = &v59[OBJC_IVAR____TtC21DocumentUnderstanding27DUStructuredExtractionLabel_labelName];
      swift_beginAccess();
      *(_QWORD *)v65 = v63;
      *((_QWORD *)v65 + 1) = v64;
      v66 = v59;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v67 = v212 + *(int *)(v213 + 24);
      if (*(_BYTE *)(v67 + 8))
        v68 = 0.0;
      else
        v68 = *(double *)v67;
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v212, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel);
      v69 = (double *)&v66[OBJC_IVAR____TtC21DocumentUnderstanding27DUStructuredExtractionLabel_confidenceScore];
      swift_beginAccess();
      *v69 = v68;

      v70 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v211, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel);
      MEMORY[0x22E2AFAFC](v70);
      if (*(_QWORD *)((v215 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v215 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      v56 += v207;
      --v55;
    }
    while (v55);
    swift_bridgeObjectRelease();
    v71 = v215;
  }
  else
  {
    swift_bridgeObjectRetain();
    v71 = MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRelease();
  v72 = v206;
  v73 = &v206[OBJC_IVAR____TtC21DocumentUnderstanding18DUStructuredEntity_labels];
  swift_beginAccess();
  *(_QWORD *)v73 = v71;
  swift_bridgeObjectRelease();
  v74 = *(_QWORD **)&v204[v205];
  swift_beginAccess();
  v76 = v74[7];
  v75 = v74[8];
  v77 = &v72[OBJC_IVAR____TtC21DocumentUnderstanding18DUStructuredEntity_phoneNumber];
  swift_beginAccess();
  *(_QWORD *)v77 = v76;
  *((_QWORD *)v77 + 1) = v75;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v79 = v74[9];
  v78 = v74[10];
  v80 = &v72[OBJC_IVAR____TtC21DocumentUnderstanding18DUStructuredEntity_email];
  swift_beginAccess();
  *(_QWORD *)v80 = v79;
  *((_QWORD *)v80 + 1) = v78;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v82 = v74[11];
  v81 = v74[12];
  v83 = &v72[OBJC_IVAR____TtC21DocumentUnderstanding18DUStructuredEntity_url];
  swift_beginAccess();
  *(_QWORD *)v83 = v82;
  *((_QWORD *)v83 + 1) = v81;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v84 = v74 + 13;
  swift_beginAccess();
  v86 = v209;
  v85 = v210;
  if (!*(_QWORD *)(v74[13] + 16))
  {
LABEL_57:
    v126 = (uint64_t)v204;
    v127 = *(_QWORD *)&v204[v205]
         + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__calendarEvent;
    swift_beginAccess();
    v128 = v127;
    v129 = v195;
    outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v128, v195, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CalendarEvent?);
    v130 = v197;
    v131 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v196 + 48);
    v132 = v131(v129, 1, v197);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v129, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CalendarEvent?);
    v133 = 0;
    if (v132 != 1)
    {
      v134 = *(_QWORD *)(v126 + v205)
           + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__calendarEvent;
      swift_beginAccess();
      v135 = v188;
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v134, v188, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CalendarEvent?);
      if (v131(v135, 1, v130) == 1)
      {
        v136 = v189;
        *v189 = 0;
        UnknownStorage.init()();
        *(_OWORD *)&v136[v130[6]] = xmmword_2284C0CD0;
        v137 = &v136[v130[7]];
        *v137 = 0;
        v137[1] = 0;
        *(_OWORD *)&v136[v130[8]] = xmmword_2284C0CD0;
        v138 = &v136[v130[9]];
        *v138 = 0;
        v138[1] = 0;
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v135, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CalendarEvent?);
      }
      else
      {
        v136 = v189;
        outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v135, (uint64_t)v189, type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent);
      }
      v133 = specialized DUCalendarEvent.__allocating_init<A>(proto:)((uint64_t)v136);
      v126 = (uint64_t)v204;
    }
    v139 = v206;
    v140 = (void **)&v206[OBJC_IVAR____TtC21DocumentUnderstanding18DUStructuredEntity_calendarEvent];
    swift_beginAccess();
    v141 = *v140;
    *v140 = v133;

    v142 = *(_QWORD *)(v126 + v205);
    v143 = (uint64_t *)(v142
                     + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__homeAutomationID);
    swift_beginAccess();
    v145 = *v143;
    v144 = v143[1];
    v146 = &v139[OBJC_IVAR____TtC21DocumentUnderstanding18DUStructuredEntity_homeAutomationID];
    swift_beginAccess();
    *(_QWORD *)v146 = v145;
    *((_QWORD *)v146 + 1) = v144;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v147 = v142
         + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__displayInfo;
    swift_beginAccess();
    v148 = v147;
    v149 = v198;
    outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v148, v198, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DisplayInfo?);
    v150 = v200;
    v151 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v199 + 48);
    LODWORD(v139) = v151(v149, 1, v200);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v149, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DisplayInfo?);
    v152 = 0;
    if ((_DWORD)v139 != 1)
    {
      v153 = *(_QWORD *)(v126 + v205)
           + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__displayInfo;
      swift_beginAccess();
      v154 = v190;
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v153, v190, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DisplayInfo?);
      if (v151(v154, 1, v150) == 1)
      {
        v155 = v191;
        *v191 = xmmword_2284C0CE0;
        v155[1] = xmmword_2284C0CE0;
        *((_BYTE *)v155 + 32) = 0;
        UnknownStorage.init()();
        v156 = (char *)v155 + v150[8];
        *(_QWORD *)v156 = 0;
        v156[8] = 1;
        v157 = (char *)v155 + v150[9];
        *(_QWORD *)v157 = 0;
        v157[8] = 1;
        v158 = (char *)v155 + v150[10];
        *(_QWORD *)v158 = 0;
        v158[8] = 1;
        v159 = (char *)v155 + v150[11];
        *(_QWORD *)v159 = 0;
        v159[8] = 1;
        v160 = (char *)v155 + v150[12];
        *(_QWORD *)v160 = 0;
        v160[8] = 1;
        v161 = (char *)v155 + v150[13];
        *(_QWORD *)v161 = 0;
        v161[8] = 1;
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v154, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DisplayInfo?);
      }
      else
      {
        v155 = v191;
        outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v154, (uint64_t)v191, type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo);
      }
      v152 = specialized DUDisplayInfo.__allocating_init<A>(proto:)((uint64_t)v155);
      v126 = (uint64_t)v204;
    }
    v162 = (void **)&v206[OBJC_IVAR____TtC21DocumentUnderstanding18DUStructuredEntity_displayInfo];
    swift_beginAccess();
    v163 = *v162;
    *v162 = v152;

    v164 = *(_QWORD *)(v126 + v205)
         + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__responseDebugInfo;
    swift_beginAccess();
    v165 = v164;
    v166 = v201;
    outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v165, v201, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    v167 = v203;
    v168 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v202 + 48);
    v169 = v168(v166, 1, v203);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v166, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    v170 = 0;
    if (v169 != 1)
    {
      v171 = *(_QWORD *)(v126 + v205)
           + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__responseDebugInfo;
      swift_beginAccess();
      v172 = v171;
      v173 = v192;
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v172, v192, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
      if (v168(v173, 1, v167) == 1)
      {
        v174 = v193;
        UnknownStorage.init()();
        v175 = (_QWORD *)(v174 + *(int *)(v167 + 20));
        *v175 = 0;
        v175[1] = 0;
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v173, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
      }
      else
      {
        v174 = v193;
        outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v173, v193, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      }
      v176 = (uint64_t)v194;
      v177 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUDebugInfo()), sel_init);
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v174, v176, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      v178 = (uint64_t *)(v176 + *(int *)(v167 + 20));
      if (v178[1])
      {
        v179 = *v178;
        v180 = v178[1];
      }
      else
      {
        v179 = 0;
        v180 = 0xE000000000000000;
      }
      v170 = (char *)v177;
      swift_bridgeObjectRetain();
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v176, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      v181 = &v170[OBJC_IVAR____TtC21DocumentUnderstanding11DUDebugInfo_debugString];
      swift_beginAccess();
      *(_QWORD *)v181 = v179;
      *((_QWORD *)v181 + 1) = v180;

      swift_bridgeObjectRelease();
      v126 = (uint64_t)v204;
    }
    (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v85, v187);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v126, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity);
    v182 = v206;
    v183 = (void **)&v206[OBJC_IVAR____TtC21DocumentUnderstanding18DUStructuredEntity_responseDebugInfo];
    swift_beginAccess();
    v184 = *v183;
    *v183 = v170;
    v49 = v182;

    return (uint64_t)v49;
  }
  v87 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v88 = (unint64_t *)&v206[OBJC_IVAR____TtC21DocumentUnderstanding18DUStructuredEntity_addressComponents];
  swift_beginAccess();
  *v88 = v87;
  swift_bridgeObjectRelease();
  v89 = *v84;
  v90 = *(_QWORD *)(*v84 + 64);
  v208 = *v84 + 64;
  v91 = 1 << *(_BYTE *)(v89 + 32);
  v92 = -1;
  if (v91 < 64)
    v92 = ~(-1 << v91);
  v93 = v92 & v90;
  v211 = (unint64_t)(v91 + 63) >> 6;
  v212 = v89;
  swift_bridgeObjectRetain();
  for (i = 0; ; i = v213)
  {
    if (v93)
    {
      v96 = __clz(__rbit64(v93));
      v93 &= v93 - 1;
      v213 = i;
      v97 = v96 | (i << 6);
    }
    else
    {
      v98 = i + 1;
      if (__OFADD__(i, 1))
        goto LABEL_79;
      if (v98 >= v211)
      {
LABEL_56:
        swift_release();
        goto LABEL_57;
      }
      v99 = *(_QWORD *)(v208 + 8 * v98);
      v100 = i + 1;
      if (!v99)
      {
        v100 = i + 2;
        if (i + 2 >= v211)
          goto LABEL_56;
        v99 = *(_QWORD *)(v208 + 8 * v100);
        if (!v99)
        {
          v100 = i + 3;
          if (i + 3 >= v211)
            goto LABEL_56;
          v99 = *(_QWORD *)(v208 + 8 * v100);
          if (!v99)
          {
            v101 = i + 4;
            if (i + 4 >= v211)
              goto LABEL_56;
            v99 = *(_QWORD *)(v208 + 8 * v101);
            if (!v99)
            {
              while (1)
              {
                v100 = v101 + 1;
                if (__OFADD__(v101, 1))
                  goto LABEL_80;
                if (v100 >= v211)
                  goto LABEL_56;
                v99 = *(_QWORD *)(v208 + 8 * v100);
                ++v101;
                if (v99)
                  goto LABEL_43;
              }
            }
            v100 = i + 4;
          }
        }
      }
LABEL_43:
      v93 = (v99 - 1) & v99;
      v213 = v100;
      v97 = __clz(__rbit64(v99)) + (v100 << 6);
    }
    v102 = 16 * v97;
    v103 = (uint64_t *)(*(_QWORD *)(v212 + 48) + v102);
    v104 = *v103;
    v105 = v103[1];
    v106 = (uint64_t *)(*(_QWORD *)(v212 + 56) + v102);
    v108 = *v106;
    v107 = v106[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v109 = (void *)MEMORY[0x22E2AF8EC](v104, v105);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    if (!*v88)
      goto LABEL_81;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v214 = (_QWORD *)*v88;
    v111 = v214;
    *v88 = 0x8000000000000000;
    v113 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v109);
    v114 = v111[2];
    v115 = (v112 & 1) == 0;
    v116 = v114 + v115;
    if (__OFADD__(v114, v115))
      break;
    v117 = v112;
    if (v111[3] >= v116)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v120 = v214;
        if ((v112 & 1) != 0)
          goto LABEL_26;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        v120 = v214;
        if ((v117 & 1) != 0)
          goto LABEL_26;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v116, isUniquelyReferenced_nonNull_native);
      v118 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v109);
      if ((v117 & 1) != (v119 & 1))
        goto LABEL_82;
      v113 = v118;
      v120 = v214;
      if ((v117 & 1) != 0)
      {
LABEL_26:
        v95 = (_QWORD *)(v120[7] + 16 * v113);
        swift_bridgeObjectRelease();
        *v95 = v108;
        v95[1] = v107;
        goto LABEL_27;
      }
    }
    v120[(v113 >> 6) + 8] |= 1 << v113;
    *(_QWORD *)(v120[6] + 8 * v113) = v109;
    v121 = (_QWORD *)(v120[7] + 16 * v113);
    *v121 = v108;
    v121[1] = v107;
    v122 = v120[2];
    v123 = __OFADD__(v122, 1);
    v124 = v122 + 1;
    if (v123)
      goto LABEL_78;
    v120[2] = v124;
    v125 = v109;
LABEL_27:
    *v88 = (unint64_t)v120;

    swift_bridgeObjectRelease();
    swift_endAccess();
    v86 = v209;
    v85 = v210;
  }
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:

  __break(1u);
LABEL_82:
  type metadata accessor for NSTextCheckingKey(0);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t DUStructuredEntity.title.getter()
{
  return PoemMessage.path.getter(&OBJC_IVAR____TtC21DocumentUnderstanding18DUStructuredEntity_title);
}

uint64_t DUStructuredEntity.title.setter(uint64_t a1, uint64_t a2)
{
  return PoemMessage.path.setter(a1, a2, &OBJC_IVAR____TtC21DocumentUnderstanding18DUStructuredEntity_title);
}

uint64_t (*DUStructuredEntity.title.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUStructuredEntity.type.getter()
{
  return PoemMessage.path.getter(&OBJC_IVAR____TtC21DocumentUnderstanding18DUStructuredEntity_type);
}

uint64_t DUStructuredEntity.type.setter(uint64_t a1, uint64_t a2)
{
  return PoemMessage.path.setter(a1, a2, &OBJC_IVAR____TtC21DocumentUnderstanding18DUStructuredEntity_type);
}

uint64_t (*DUStructuredEntity.type.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUStructuredEntity.labels.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t DUStructuredEntity.labels.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding18DUStructuredEntity_labels);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*DUStructuredEntity.labels.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUStructuredEntity.phoneNumber.getter()
{
  return PoemMessage.path.getter(&OBJC_IVAR____TtC21DocumentUnderstanding18DUStructuredEntity_phoneNumber);
}

uint64_t DUStructuredEntity.phoneNumber.setter(uint64_t a1, uint64_t a2)
{
  return PoemMessage.path.setter(a1, a2, &OBJC_IVAR____TtC21DocumentUnderstanding18DUStructuredEntity_phoneNumber);
}

uint64_t (*DUStructuredEntity.phoneNumber.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUStructuredEntity.email.getter()
{
  return PoemMessage.path.getter(&OBJC_IVAR____TtC21DocumentUnderstanding18DUStructuredEntity_email);
}

uint64_t DUStructuredEntity.email.setter(uint64_t a1, uint64_t a2)
{
  return PoemMessage.path.setter(a1, a2, &OBJC_IVAR____TtC21DocumentUnderstanding18DUStructuredEntity_email);
}

uint64_t (*DUStructuredEntity.email.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUStructuredEntity.url.getter()
{
  return PoemMessage.path.getter(&OBJC_IVAR____TtC21DocumentUnderstanding18DUStructuredEntity_url);
}

uint64_t DUStructuredEntity.url.setter(uint64_t a1, uint64_t a2)
{
  return PoemMessage.path.setter(a1, a2, &OBJC_IVAR____TtC21DocumentUnderstanding18DUStructuredEntity_url);
}

uint64_t (*DUStructuredEntity.url.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUStructuredEntity.addressComponents.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t DUStructuredEntity.addressComponents.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding18DUStructuredEntity_addressComponents);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*DUStructuredEntity.addressComponents.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

void *DUStructuredEntity.calendarEvent.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding18DUStructuredEntity_calendarEvent);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void DUStructuredEntity.calendarEvent.setter(void *a1)
{
  DUResponse.topics.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding18DUStructuredEntity_calendarEvent);
}

uint64_t (*DUStructuredEntity.calendarEvent.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUStructuredEntity.homeAutomationID.getter()
{
  return PoemMessage.path.getter(&OBJC_IVAR____TtC21DocumentUnderstanding18DUStructuredEntity_homeAutomationID);
}

uint64_t DUStructuredEntity.homeAutomationID.setter(uint64_t a1, uint64_t a2)
{
  return PoemMessage.path.setter(a1, a2, &OBJC_IVAR____TtC21DocumentUnderstanding18DUStructuredEntity_homeAutomationID);
}

uint64_t (*DUStructuredEntity.homeAutomationID.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

void *DUStructuredEntity.displayInfo.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding18DUStructuredEntity_displayInfo);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void DUStructuredEntity.displayInfo.setter(void *a1)
{
  DUResponse.topics.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding18DUStructuredEntity_displayInfo);
}

uint64_t (*DUStructuredEntity.displayInfo.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

void *DUStructuredEntity.responseDebugInfo.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding18DUStructuredEntity_responseDebugInfo);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void DUStructuredEntity.responseDebugInfo.setter(void *a1)
{
  DUResponse.topics.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding18DUStructuredEntity_responseDebugInfo);
}

uint64_t (*DUStructuredEntity.responseDebugInfo.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

char *specialized DUStructuredExtractionLabel.__allocating_init<A>(proto:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  char *v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  double *v11;
  double v12;
  double *v13;
  _BYTE v15[24];

  v2 = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel(0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = &v15[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUStructuredExtractionLabel()), sel_init);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(a1, (uint64_t)v4, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel);
  v6 = (uint64_t *)&v4[*(int *)(v2 + 20)];
  if (v6[1])
  {
    v7 = *v6;
    v8 = v6[1];
  }
  else
  {
    v7 = 0;
    v8 = 0xE000000000000000;
  }
  v9 = &v5[OBJC_IVAR____TtC21DocumentUnderstanding27DUStructuredExtractionLabel_labelName];
  swift_beginAccess();
  *(_QWORD *)v9 = v7;
  *((_QWORD *)v9 + 1) = v8;
  v10 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11 = (double *)&v4[*(int *)(v2 + 24)];
  if (*((_BYTE *)v11 + 8))
    v12 = 0.0;
  else
    v12 = *v11;
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v4, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel);
  v13 = (double *)&v10[OBJC_IVAR____TtC21DocumentUnderstanding27DUStructuredExtractionLabel_confidenceScore];
  swift_beginAccess();
  *v13 = v12;

  return v10;
}

char *DUStructuredExtractionLabel.__allocating_init<A>(proto:)()
{
  objc_class *v0;
  objc_class *v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  char v10;
  void (*v11)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  double *v16;
  double v17;
  double *v18;
  _BYTE v20[24];

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityLabel?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = &v20[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v20[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = (char *)objc_msgSend(objc_allocWithZone(v1), sel_init);
  v10 = swift_dynamicCast();
  v11 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  if ((v10 & 1) != 0)
  {
    v11(v4, 0, 1, v5);
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v4, (uint64_t)v8, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel);
    v12 = (uint64_t *)&v8[*(int *)(v5 + 20)];
    if (v12[1])
    {
      v13 = *v12;
      v14 = v12[1];
    }
    else
    {
      v13 = 0;
      v14 = 0xE000000000000000;
    }
    v15 = &v9[OBJC_IVAR____TtC21DocumentUnderstanding27DUStructuredExtractionLabel_labelName];
    swift_beginAccess();
    *(_QWORD *)v15 = v13;
    *((_QWORD *)v15 + 1) = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v16 = (double *)&v8[*(int *)(v5 + 24)];
    if (*((_BYTE *)v16 + 8))
      v17 = 0.0;
    else
      v17 = *v16;
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v8, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel);
    v18 = (double *)&v9[OBJC_IVAR____TtC21DocumentUnderstanding27DUStructuredExtractionLabel_confidenceScore];
    swift_beginAccess();
    *v18 = v17;

  }
  else
  {
    v11(v4, 1, 1, v5);

    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v4, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityLabel?);
    return 0;
  }
  return v9;
}

char *specialized DUCalendarEvent.__allocating_init<A>(proto:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t);
  void (*v25)(char *, _QWORD, uint64_t, uint64_t);
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v50 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v46 = (char *)&v43 - v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v47 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v51 = (char *)&v43 - v10;
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v43 - v11;
  v13 = type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUCalendarEvent()), sel_init);
  v49 = a1;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(a1, (uint64_t)v15, type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent);
  LOBYTE(a1) = *v15;
  v17 = &v16[OBJC_IVAR____TtC21DocumentUnderstanding15DUCalendarEvent_isAllDay];
  swift_beginAccess();
  *v17 = a1;
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  v44 = v16;
  JSONDecoder.init()();
  v48 = v13;
  v18 = (uint64_t *)&v15[*(int *)(v13 + 24)];
  v19 = *v18;
  v20 = v18[1];
  if (v20 >> 60 == 15)
    v21 = 0;
  else
    v21 = *v18;
  if (v20 >> 60 == 15)
    v22 = 0xC000000000000000;
  else
    v22 = v18[1];
  v23 = type metadata accessor for DateComponents();
  v24 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE0];
  outlined copy of Data?(v19, v20);
  v45 = lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents, 255, v24, MEMORY[0x24BDCBE20]);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  outlined consume of Data._Representation(v21, v22);
  swift_release();
  v25 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56);
  v25(v12, 0, 1, v23);
  v26 = v44;
  v27 = (uint64_t)&v44[OBJC_IVAR____TtC21DocumentUnderstanding15DUCalendarEvent_startDateComponents];
  swift_beginAccess();
  outlined assign with take of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v12, v27, &demangling cache variable for type metadata for DateComponents?);
  swift_endAccess();
  v28 = v26;
  v29 = v48;
  v30 = (uint64_t)v46;
  if (*(_QWORD *)&v15[*(int *)(v48 + 28) + 8])
  {
    swift_bridgeObjectRetain();
    TimeZone.init(identifier:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    v31 = type metadata accessor for TimeZone();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v30, 1, 1, v31);
  }
  v32 = (uint64_t)&v26[OBJC_IVAR____TtC21DocumentUnderstanding15DUCalendarEvent_startTimezone];
  swift_beginAccess();
  outlined assign with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v30, v32, &demangling cache variable for type metadata for TimeZone?);
  swift_endAccess();
  swift_allocObject();
  JSONDecoder.init()();
  v33 = (uint64_t *)&v15[*(int *)(v29 + 32)];
  v34 = v33[1];
  if (v34 >> 60 == 15)
    v35 = 0;
  else
    v35 = *v33;
  if (v34 >> 60 == 15)
    v36 = 0xC000000000000000;
  else
    v36 = v33[1];
  outlined copy of Data?(*v33, v34);
  v37 = (uint64_t)v47;
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  outlined consume of Data._Representation(v35, v36);
  swift_release();
  v25((char *)v37, 0, 1, v23);
  v38 = (uint64_t)&v28[OBJC_IVAR____TtC21DocumentUnderstanding15DUCalendarEvent_endDateComponents];
  swift_beginAccess();
  outlined assign with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v37, v38, &demangling cache variable for type metadata for DateComponents?);
  swift_endAccess();
  v39 = (uint64_t)v50;
  if (*(_QWORD *)&v15[*(int *)(v29 + 36) + 8])
  {
    swift_bridgeObjectRetain();
    TimeZone.init(identifier:)();
    swift_bridgeObjectRelease();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v49, type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v15, type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent);
  }
  else
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v49, type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v15, type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent);
    v40 = type metadata accessor for TimeZone();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v39, 1, 1, v40);
  }
  v41 = (uint64_t)&v28[OBJC_IVAR____TtC21DocumentUnderstanding15DUCalendarEvent_endTimezone];
  swift_beginAccess();
  outlined assign with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v39, v41, &demangling cache variable for type metadata for TimeZone?);
  swift_endAccess();

  return v28;
}

void *DUCalendarEvent.__allocating_init<A>(proto:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  objc_class *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  id v28;
  char *v29;
  char v30;
  void (*v31)(char *, uint64_t, uint64_t, uint64_t);
  char v32;
  char *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t);
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, _QWORD, uint64_t, uint64_t);
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v72 = (char *)&v64 - v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v75 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v73 = (char *)&v64 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v71 = (char *)&v64 - v16;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CalendarEvent?);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v64 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v23 = (char *)&v64 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0);
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)&v64 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = objc_msgSend(objc_allocWithZone(v3), sel_init);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v23, a1, a2);
  v29 = (char *)v28;
  v30 = swift_dynamicCast();
  v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56);
  if ((v30 & 1) != 0)
  {
    v67 = v21;
    v68 = a1;
    v69 = a2;
    v70 = v9;
    v31(v20, 0, 1, v24);
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v20, (uint64_t)v27, type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent);
    v32 = *v27;
    v65 = v29;
    v33 = &v29[OBJC_IVAR____TtC21DocumentUnderstanding15DUCalendarEvent_isAllDay];
    swift_beginAccess();
    *v33 = v32;
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    v66 = v24;
    v34 = *(int *)(v24 + 24);
    v74 = v27;
    v35 = (uint64_t *)&v27[v34];
    v36 = *v35;
    v37 = v35[1];
    if (v37 >> 60 == 15)
      v38 = 0;
    else
      v38 = *v35;
    if (v37 >> 60 == 15)
      v39 = 0xC000000000000000;
    else
      v39 = v35[1];
    v40 = type metadata accessor for DateComponents();
    v41 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE0];
    outlined copy of Data?(v36, v37);
    v42 = lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents, 255, v41, MEMORY[0x24BDCBE20]);
    v43 = (uint64_t)v71;
    v64 = v42;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    outlined consume of Data._Representation(v38, v39);
    swift_release();
    v44 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56);
    v44(v43, 0, 1, v40);
    v45 = v65;
    v46 = (uint64_t)v65 + OBJC_IVAR____TtC21DocumentUnderstanding15DUCalendarEvent_startDateComponents;
    swift_beginAccess();
    outlined assign with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v43, v46, &demangling cache variable for type metadata for DateComponents?);
    swift_endAccess();
    v47 = v66;
    v48 = (uint64_t)v72;
    if (*(_QWORD *)&v74[*(int *)(v66 + 28) + 8])
    {
      swift_bridgeObjectRetain();
      TimeZone.init(identifier:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      v49 = type metadata accessor for TimeZone();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v48, 1, 1, v49);
    }
    v50 = (uint64_t)v45 + OBJC_IVAR____TtC21DocumentUnderstanding15DUCalendarEvent_startTimezone;
    swift_beginAccess();
    outlined assign with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v48, v50, &demangling cache variable for type metadata for TimeZone?);
    swift_endAccess();
    swift_allocObject();
    JSONDecoder.init()();
    v51 = (uint64_t)v74;
    v52 = (uint64_t *)&v74[*(int *)(v47 + 32)];
    v53 = v52[1];
    if (v53 >> 60 == 15)
      v54 = 0;
    else
      v54 = *v52;
    if (v53 >> 60 == 15)
      v55 = 0xC000000000000000;
    else
      v55 = v52[1];
    outlined copy of Data?(*v52, v53);
    v56 = (uint64_t)v73;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    outlined consume of Data._Representation(v54, v55);
    swift_release();
    v44(v56, 0, 1, v40);
    v57 = (uint64_t)v45 + OBJC_IVAR____TtC21DocumentUnderstanding15DUCalendarEvent_endDateComponents;
    swift_beginAccess();
    outlined assign with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v56, v57, &demangling cache variable for type metadata for DateComponents?);
    swift_endAccess();
    v58 = v67;
    v60 = v69;
    v59 = (uint64_t)v70;
    if (*(_QWORD *)(v51 + *(int *)(v47 + 36) + 8))
    {
      swift_bridgeObjectRetain();
      TimeZone.init(identifier:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v68, v60);
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v51, type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v68, v69);
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v51, type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent);
      v61 = type metadata accessor for TimeZone();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v59, 1, 1, v61);
    }
    v62 = (uint64_t)v45 + OBJC_IVAR____TtC21DocumentUnderstanding15DUCalendarEvent_endTimezone;
    swift_beginAccess();
    outlined assign with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v59, v62, &demangling cache variable for type metadata for TimeZone?);
    swift_endAccess();

  }
  else
  {
    v31(v20, 1, 1, v24);

    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(a1, a2);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v20, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CalendarEvent?);
    return 0;
  }
  return v45;
}

uint64_t DUStructuredEntity.protoRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t (*v47)(uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  id v125;
  char v126;
  char v127;
  unint64_t v128;
  uint64_t v129;
  _BOOL8 v130;
  uint64_t v131;
  char v132;
  unint64_t v133;
  char v134;
  _QWORD *v135;
  _QWORD *v136;
  uint64_t *v137;
  _QWORD *v138;
  uint64_t v139;
  BOOL v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  _QWORD *v144;
  _QWORD *v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  void (*v151)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  uint64_t *v167;
  _QWORD *v168;
  _QWORD *v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  void (*v175)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  _QWORD *v186;
  void *v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  uint64_t v191;
  void (*v192)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v193;
  uint64_t v194;
  _QWORD *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t result;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  _QWORD *v226;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  _QWORD *v233;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v207 = (uint64_t)&v202 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v206 = (uint64_t)&v202 - v7;
  MEMORY[0x24BDAC7A8](v6);
  v223 = (char *)&v202 - v8;
  v225 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v222 = *(_QWORD *)(v225 - 8);
  v9 = MEMORY[0x24BDAC7A8](v225);
  v215 = (uint64_t)&v202 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v214 = (char *)&v202 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v216 = (uint64_t)&v202 - v13;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DisplayInfo?);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v205 = (uint64_t)&v202 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v204 = (uint64_t)&v202 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v220 = (char *)&v202 - v19;
  v221 = type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0);
  v219 = *(_QWORD *)(v221 - 8);
  v20 = MEMORY[0x24BDAC7A8](v221);
  v212 = (uint64_t)&v202 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v211 = (char *)&v202 - v23;
  MEMORY[0x24BDAC7A8](v22);
  v213 = (uint64_t)&v202 - v24;
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CalendarEvent?);
  v26 = MEMORY[0x24BDAC7A8](v25);
  v203 = (uint64_t)&v202 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x24BDAC7A8](v26);
  v202 = (uint64_t)&v202 - v29;
  MEMORY[0x24BDAC7A8](v28);
  v218 = (char *)&v202 - v30;
  v224 = type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0);
  v217 = *(_QWORD *)(v224 - 8);
  v31 = MEMORY[0x24BDAC7A8](v224);
  v209 = (uint64_t)&v202 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = MEMORY[0x24BDAC7A8](v31);
  v208 = (char *)&v202 - v34;
  MEMORY[0x24BDAC7A8](v33);
  v210 = (uint64_t)&v202 - v35;
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityLabel?);
  MEMORY[0x24BDAC7A8](v36);
  v38 = (char *)&v202 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v232 = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel(0);
  v39 = *(_QWORD *)(v232 - 8);
  v40 = MEMORY[0x24BDAC7A8](v232);
  v231 = (unint64_t)&v202 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = MEMORY[0x24BDAC7A8](v40);
  v228 = (char *)&v202 - v43;
  MEMORY[0x24BDAC7A8](v42);
  v227 = (uint64_t)&v202 - v44;
  UnknownStorage.init()();
  v45 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0) + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a1 + v45) = static DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.defaultInstance;
  v46 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v47 = *(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0xA8);
  v48 = swift_retain();
  v49 = v47(v48);
  v51 = v50;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v226 = v1;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
    swift_allocObject();
    v53 = (_QWORD *)swift_retain();
    v54 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v53);
    v46 = (_QWORD *)MEMORY[0x24BEE4EA0];
    v1 = v226;
    swift_release();
    *(_QWORD *)(a1 + v45) = v54;
    swift_release();
  }
  v55 = *(_QWORD *)(a1 + v45);
  swift_beginAccess();
  *(_QWORD *)(v55 + 16) = v49;
  *(_QWORD *)(v55 + 24) = v51;
  v56 = swift_bridgeObjectRelease();
  v57 = (*(uint64_t (**)(uint64_t))((*v46 & *v1) + 0xC0))(v56);
  v59 = v58;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
    swift_allocObject();
    v60 = (_QWORD *)swift_retain();
    v61 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v60);
    v46 = (_QWORD *)MEMORY[0x24BEE4EA0];
    v1 = v226;
    swift_release();
    *(_QWORD *)(a1 + v45) = v61;
    swift_release();
  }
  v230 = a1;
  v229 = v45;
  v62 = *(_QWORD *)(a1 + v45);
  swift_beginAccess();
  *(_QWORD *)(v62 + 32) = v57;
  *(_QWORD *)(v62 + 40) = v59;
  v63 = swift_bridgeObjectRelease();
  v64 = (*(uint64_t (**)(uint64_t))((*v46 & *v1) + 0xD8))(v63);
  v65 = v64;
  if (v64 >> 62)
  {
    swift_bridgeObjectRetain();
    v66 = _CocoaArrayWrapper.endIndex.getter();
    if (v66)
      goto LABEL_9;
LABEL_23:
    v68 = MEMORY[0x24BEE4AF8];
    goto LABEL_24;
  }
  v66 = *(_QWORD *)((v64 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v66)
    goto LABEL_23;
LABEL_9:
  if (v66 < 1)
    goto LABEL_102;
  v67 = 0;
  v68 = MEMORY[0x24BEE4AF8];
  do
  {
    if ((v65 & 0xC000000000000001) != 0)
      v69 = (_QWORD *)MEMORY[0x22E2AFF34](v67, v65);
    else
      v69 = *(id *)(v65 + 8 * v67 + 32);
    v70 = v69;
    v71 = (uint64_t)v228;
    (*(void (**)(void))((*MEMORY[0x24BEE4EA0] & *v69) + 0x98))();
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v71, (uint64_t)v38, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel);
    v72 = v232;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v38, 0, 1, v232);

    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v38, 1, v72) == 1)
    {
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v38, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityLabel?);
    }
    else
    {
      v73 = v227;
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v38, v227, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel);
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v73, v231, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v68 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v68 + 16) + 1, 1, v68);
      v75 = *(_QWORD *)(v68 + 16);
      v74 = *(_QWORD *)(v68 + 24);
      if (v75 >= v74 >> 1)
        v68 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v74 > 1, v75 + 1, 1, v68);
      *(_QWORD *)(v68 + 16) = v75 + 1;
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v231, v68+ ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80))+ *(_QWORD *)(v39 + 72) * v75, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel);
    }
    ++v67;
  }
  while (v66 != v67);
LABEL_24:
  swift_bridgeObjectRelease_n();
  v76 = v230;
  v77 = v229;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
    swift_allocObject();
    v78 = (_QWORD *)swift_retain();
    v79 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v78);
    swift_release();
    *(_QWORD *)(v76 + v77) = v79;
    swift_release();
  }
  v80 = *(_QWORD *)(v76 + v77);
  swift_beginAccess();
  *(_QWORD *)(v80 + 48) = v68;
  v81 = swift_bridgeObjectRelease();
  v82 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v226) + 0xF0))(v81);
  if (v83)
  {
    v84 = v82;
    v85 = v83;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
      swift_allocObject();
      v86 = (_QWORD *)swift_retain();
      v87 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v86);
      swift_release();
      *(_QWORD *)(v76 + v77) = v87;
      swift_release();
    }
    v88 = *(_QWORD *)(v76 + v77);
    swift_beginAccess();
    *(_QWORD *)(v88 + 56) = v84;
    *(_QWORD *)(v88 + 64) = v85;
    v82 = swift_bridgeObjectRelease();
  }
  v89 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v226) + 0x108))(v82);
  if (v90)
  {
    v91 = v89;
    v92 = v90;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
      swift_allocObject();
      v93 = (_QWORD *)swift_retain();
      v94 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v93);
      swift_release();
      *(_QWORD *)(v76 + v77) = v94;
      swift_release();
    }
    v95 = *(_QWORD *)(v76 + v77);
    swift_beginAccess();
    *(_QWORD *)(v95 + 72) = v91;
    *(_QWORD *)(v95 + 80) = v92;
    v89 = swift_bridgeObjectRelease();
  }
  v96 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v226) + 0x120))(v89);
  if (v97)
  {
    v98 = v96;
    v99 = v97;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
      swift_allocObject();
      v100 = (_QWORD *)swift_retain();
      v101 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v100);
      swift_release();
      *(_QWORD *)(v76 + v77) = v101;
      swift_release();
    }
    v102 = *(_QWORD *)(v76 + v77);
    swift_beginAccess();
    *(_QWORD *)(v102 + 88) = v98;
    *(_QWORD *)(v102 + 96) = v99;
    v96 = swift_bridgeObjectRelease();
  }
  v103 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v226) + 0x138))(v96);
  if (!v103)
  {
LABEL_73:
    v144 = (_QWORD *)MEMORY[0x24BEE4EA0];
    v145 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v226) + 0x150))(v103);
    if (v145)
    {
      v146 = v145;
      (*(void (**)(void))((*v144 & *v145) + 0xF8))();

      v147 = (uint64_t)v218;
      v148 = v224;
      v149 = swift_dynamicCast();
      v150 = v217;
      v151 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v217 + 56);
      v151(v147, v149 ^ 1u, 1, v148);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v150 + 48))(v147, 1, v148) != 1)
      {
        v152 = v147;
        v153 = v210;
        outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v152, v210, type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent);
        outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v153, v209, type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
          swift_allocObject();
          v154 = (_QWORD *)swift_retain();
          v155 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v154);
          swift_release();
          *(_QWORD *)(v76 + v77) = v155;
          swift_release();
        }
        v156 = *(_QWORD *)(v76 + v77);
        v157 = v202;
        outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v209, v202, type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent);
        v151(v157, 0, 1, v224);
        v158 = v203;
        outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v157, v203, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CalendarEvent?);
        v159 = v156
             + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__calendarEvent;
        swift_beginAccess();
        swift_retain();
        outlined assign with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v158, v159, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CalendarEvent?);
        swift_endAccess();
        swift_release();
        v160 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v210, type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent);
LABEL_80:
        v161 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v226) + 0x168))(v160);
        if (v162)
        {
          v163 = v161;
          v164 = v162;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
            swift_allocObject();
            v165 = (_QWORD *)swift_retain();
            v166 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v165);
            swift_release();
            *(_QWORD *)(v76 + v77) = v166;
            swift_release();
          }
          v167 = (uint64_t *)(*(_QWORD *)(v76 + v77)
                           + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__homeAutomationID);
          swift_beginAccess();
          *v167 = v163;
          v167[1] = v164;
          v161 = swift_bridgeObjectRelease();
        }
        v168 = (_QWORD *)MEMORY[0x24BEE4EA0];
        v169 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v226) + 0x180))(v161);
        if (v169)
        {
          v170 = v169;
          (*(void (**)(void))((*v168 & *v169) + 0xB8))();

          v171 = (uint64_t)v220;
          v172 = v221;
          v173 = swift_dynamicCast();
          v174 = v219;
          v175 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v219 + 56);
          v175(v171, v173 ^ 1u, 1, v172);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v174 + 48))(v171, 1, v172) != 1)
          {
            v176 = v171;
            v177 = v213;
            outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v176, v213, type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo);
            outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v177, v212, type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
              swift_allocObject();
              v178 = (_QWORD *)swift_retain();
              v179 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v178);
              swift_release();
              *(_QWORD *)(v76 + v77) = v179;
              swift_release();
            }
            v180 = *(_QWORD *)(v76 + v77);
            v181 = v204;
            outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v212, v204, type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo);
            v175(v181, 0, 1, v172);
            v182 = v205;
            outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v181, v205, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DisplayInfo?);
            v183 = v180
                 + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__displayInfo;
            swift_beginAccess();
            swift_retain();
            outlined assign with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v182, v183, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DisplayInfo?);
            swift_endAccess();
            swift_release();
            v184 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v213, type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo);
LABEL_91:
            v185 = (_QWORD *)MEMORY[0x24BEE4EA0];
            v186 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v226) + 0x198))(v184);
            if (v186)
            {
              v187 = v186;
              (*(void (**)(void))((*v185 & *v186) + 0x78))();

              v188 = (uint64_t)v223;
              v189 = v225;
              v190 = swift_dynamicCast();
              v191 = v222;
              v192 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v222 + 56);
              v192(v188, v190 ^ 1u, 1, v189);
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v191 + 48))(v188, 1, v189) != 1)
              {
                v193 = v188;
                v194 = v216;
                outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v193, v216, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
                outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v194, v215, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
                  swift_allocObject();
                  v195 = (_QWORD *)swift_retain();
                  v196 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v195);
                  swift_release();
                  *(_QWORD *)(v76 + v77) = v196;
                  swift_release();
                }
                v197 = *(_QWORD *)(v76 + v77);
                v198 = v206;
                outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v215, v206, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
                v192(v198, 0, 1, v225);
                v199 = v207;
                outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v198, v207, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
                v200 = v197
                     + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__responseDebugInfo;
                swift_beginAccess();
                swift_retain();
                outlined assign with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v199, v200, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
                swift_endAccess();
                swift_release();
                return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v216, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
              }
            }
            else
            {
              v188 = (uint64_t)v223;
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v222 + 56))(v223, 1, 1, v225);
            }
            return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v188, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
          }
        }
        else
        {
          v171 = (uint64_t)v220;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v219 + 56))(v220, 1, 1, v221);
        }
        v184 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v171, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DisplayInfo?);
        goto LABEL_91;
      }
    }
    else
    {
      v147 = (uint64_t)v218;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v217 + 56))(v218, 1, 1, v224);
    }
    v160 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v147, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CalendarEvent?);
    goto LABEL_80;
  }
  v104 = 0;
  v105 = *(_QWORD *)(v103 + 64);
  v227 = v103 + 64;
  v106 = 1 << *(_BYTE *)(v103 + 32);
  v107 = -1;
  if (v106 < 64)
    v107 = ~(-1 << v106);
  v108 = v107 & v105;
  v228 = (char *)((unint64_t)(v106 + 63) >> 6);
  while (1)
  {
    if (v108)
    {
      v231 = (v108 - 1) & v108;
      v232 = v104;
      v110 = __clz(__rbit64(v108)) | (v104 << 6);
    }
    else
    {
      v111 = v104 + 1;
      if (__OFADD__(v104, 1))
        goto LABEL_100;
      if (v111 >= (uint64_t)v228)
      {
LABEL_72:
        v103 = swift_release();
        goto LABEL_73;
      }
      v112 = *(_QWORD *)(v227 + 8 * v111);
      v113 = v104 + 1;
      if (!v112)
      {
        v113 = v104 + 2;
        if (v104 + 2 >= (uint64_t)v228)
          goto LABEL_72;
        v112 = *(_QWORD *)(v227 + 8 * v113);
        if (!v112)
        {
          v113 = v104 + 3;
          if (v104 + 3 >= (uint64_t)v228)
            goto LABEL_72;
          v112 = *(_QWORD *)(v227 + 8 * v113);
          if (!v112)
          {
            v114 = v104 + 4;
            if (v104 + 4 >= (uint64_t)v228)
              goto LABEL_72;
            v112 = *(_QWORD *)(v227 + 8 * v114);
            if (!v112)
            {
              while (1)
              {
                v113 = v114 + 1;
                if (__OFADD__(v114, 1))
                  goto LABEL_101;
                if (v113 >= (uint64_t)v228)
                  goto LABEL_72;
                v112 = *(_QWORD *)(v227 + 8 * v113);
                ++v114;
                if (v112)
                  goto LABEL_58;
              }
            }
            v113 = v104 + 4;
          }
        }
      }
LABEL_58:
      v231 = (v112 - 1) & v112;
      v232 = v113;
      v110 = __clz(__rbit64(v112)) + (v113 << 6);
    }
    v115 = v103;
    v116 = *(void **)(*(_QWORD *)(v103 + 48) + 8 * v110);
    v117 = (uint64_t *)(*(_QWORD *)(v103 + 56) + 16 * v110);
    v118 = *v117;
    v119 = v117[1];
    v120 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v122 = v121;
    v123 = *(_QWORD *)(v76 + v77);
    swift_beginAccess();
    v124 = *(_QWORD **)(v123 + 104);
    v125 = v116;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v126 = swift_isUniquelyReferenced_nonNull_native();
    v233 = v124;
    v128 = specialized __RawDictionaryStorage.find<A>(_:)(v120, v122);
    v129 = v124[2];
    v130 = (v127 & 1) == 0;
    v131 = v129 + v130;
    if (__OFADD__(v129, v130))
      break;
    v132 = v127;
    if (v124[3] >= v131)
    {
      if ((v126 & 1) != 0)
      {
        v135 = v233;
        if ((v127 & 1) != 0)
          goto LABEL_66;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        v135 = v233;
        if ((v132 & 1) != 0)
          goto LABEL_66;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v131, v126);
      v133 = specialized __RawDictionaryStorage.find<A>(_:)(v120, v122);
      if ((v132 & 1) != (v134 & 1))
        goto LABEL_103;
      v128 = v133;
      v135 = v233;
      if ((v132 & 1) != 0)
      {
LABEL_66:
        v136 = (_QWORD *)(v135[7] + 16 * v128);
        swift_bridgeObjectRelease();
        *v136 = v118;
        v136[1] = v119;
        goto LABEL_70;
      }
    }
    v135[(v128 >> 6) + 8] |= 1 << v128;
    v137 = (uint64_t *)(v135[6] + 16 * v128);
    *v137 = v120;
    v137[1] = v122;
    v138 = (_QWORD *)(v135[7] + 16 * v128);
    *v138 = v118;
    v138[1] = v119;
    v139 = v135[2];
    v140 = __OFADD__(v139, 1);
    v141 = v139 + 1;
    if (v140)
      goto LABEL_99;
    v135[2] = v141;
    swift_bridgeObjectRetain();
LABEL_70:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v76 = v230;
    v77 = v229;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass(0);
      swift_allocObject();
      v142 = (_QWORD *)swift_retain();
      v143 = specialized DocumentUnderstanding_ClientInterface_StructuredEntity._StorageClass.init(copying:)(v142);
      swift_release();
      *(_QWORD *)(v76 + v77) = v143;
      swift_release();
    }
    v109 = *(_QWORD *)(v76 + v77);
    swift_beginAccess();
    *(_QWORD *)(v109 + 104) = v135;

    swift_bridgeObjectRelease();
    v103 = v115;
    v104 = v232;
    v108 = v231;
  }
  __break(1u);
LABEL_99:
  __break(1u);
LABEL_100:
  __break(1u);
LABEL_101:
  __break(1u);
LABEL_102:
  __break(1u);
LABEL_103:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t DUStructuredEntity.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v3 = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0x1B8))(v4);
  v7 = specialized DUStructuredEntity.__allocating_init<A>(proto:)((uint64_t)v6);
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DUStructuredEntity?);
  a1[3] = result;
  *a1 = v7;
  return result;
}

Swift::Void __swiftcall DUStructuredEntity.encode(with:)(NSCoder with)
{
  DUGlobalTopicSetIdentifier.encode(with:)(with.super.isa, (void (*)(void))type metadata accessor for DUStructuredEntity, &lazy protocol witness table cache variable for type DUStructuredEntity and conformance DUStructuredEntity, (uint64_t)&protocol conformance descriptor for DUStructuredEntity);
}

uint64_t DUStructuredEntity.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return DUStructuredEntity.init(coder:)(a1);
}

uint64_t DUStructuredEntity.init(coder:)(void *a1)
{
  return DUGlobalTopicSetIdentifier.init(coder:)(a1, &lazy protocol witness table cache variable for type DUStructuredEntity and conformance DUStructuredEntity, (uint64_t (*)(uint64_t))type metadata accessor for DUStructuredEntity, (uint64_t)&protocol conformance descriptor for DUStructuredEntity);
}

id DUStructuredEntity.init()()
{
  char *v0;
  char *v1;
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  objc_super v8;

  v1 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding18DUStructuredEntity_title];
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0xE000000000000000;
  v2 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding18DUStructuredEntity_type];
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0xE000000000000000;
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding18DUStructuredEntity_labels] = MEMORY[0x24BEE4AF8];
  v3 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding18DUStructuredEntity_phoneNumber];
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;
  v4 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding18DUStructuredEntity_email];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding18DUStructuredEntity_url];
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding18DUStructuredEntity_addressComponents] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding18DUStructuredEntity_calendarEvent] = 0;
  v6 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding18DUStructuredEntity_homeAutomationID];
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding18DUStructuredEntity_displayInfo] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding18DUStructuredEntity_responseDebugInfo] = 0;
  v8.receiver = v0;
  v8.super_class = (Class)type metadata accessor for DUStructuredEntity();
  return objc_msgSendSuper2(&v8, sel_init);
}

id DUStructuredEntity.__deallocating_deinit(uint64_t a1)
{
  return DUStructuredEntity.__deallocating_deinit(a1, type metadata accessor for DUStructuredEntity);
}

uint64_t protocol witness for DUProtobufEncodableProtocol.protoRepresentation.getter in conformance DUStructuredEntity()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **v0) + 0x1B8))();
}

uint64_t protocol witness for DUProtobufEncodableProtocol.init(proto:) in conformance DUStructuredEntity@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 432);
  v6 = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0);
  v7 = lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity, 255, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_StructuredEntity);
  result = v5(a1, v6, v7);
  *a2 = result;
  return result;
}

id @objc DUStructuredEntity.title.getter(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v3 = (uint64_t *)(a1 + *a3);
  swift_beginAccess();
  v5 = *v3;
  v4 = v3[1];
  swift_bridgeObjectRetain();
  v6 = (void *)MEMORY[0x22E2AF8EC](v5, v4);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t DUStructuredExtractionLabel.labelName.getter()
{
  return PoemMessage.path.getter(&OBJC_IVAR____TtC21DocumentUnderstanding27DUStructuredExtractionLabel_labelName);
}

uint64_t @objc DUStructuredEntity.title.setter(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;

  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v8 = v7;
  v9 = (uint64_t *)(a1 + *a4);
  swift_beginAccess();
  *v9 = v6;
  v9[1] = v8;
  return swift_bridgeObjectRelease();
}

uint64_t DUStructuredExtractionLabel.labelName.setter(uint64_t a1, uint64_t a2)
{
  return PoemMessage.path.setter(a1, a2, &OBJC_IVAR____TtC21DocumentUnderstanding27DUStructuredExtractionLabel_labelName);
}

uint64_t (*DUStructuredExtractionLabel.labelName.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

double DUStructuredExtractionLabel.confidenceScore.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC21DocumentUnderstanding27DUStructuredExtractionLabel_confidenceScore;
  swift_beginAccess();
  return *(double *)v1;
}

uint64_t DUStructuredExtractionLabel.confidenceScore.setter(double a1)
{
  uint64_t v1;
  double *v3;
  uint64_t result;

  v3 = (double *)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding27DUStructuredExtractionLabel_confidenceScore);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*DUStructuredExtractionLabel.confidenceScore.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

void DUStructuredExtractionLabel.protoRepresentation.getter(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  UnknownStorage.init()();
  v3 = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel(0);
  v4 = (_QWORD *)(a1 + *(int *)(v3 + 20));
  *v4 = 0;
  v4[1] = 0;
  v5 = a1 + *(int *)(v3 + 24);
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = (_QWORD *)MEMORY[0x24BEE4EA0];
  *v4 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v1) + 0x60))();
  v4[1] = v7;
  *(double *)v5 = (*(double (**)(void))((*v6 & *v1) + 0x78))();
  *(_BYTE *)(v5 + 8) = 0;
}

uint64_t DUStructuredExtractionLabel.copy(with:)@<X0>(char **a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t result;
  uint64_t v9;

  v3 = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel(0);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0x98))(v4);
  v7 = specialized DUStructuredExtractionLabel.__allocating_init<A>(proto:)((uint64_t)v6);
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DUStructuredExtractionLabel?);
  a1[3] = (char *)result;
  *a1 = v7;
  return result;
}

Swift::Void __swiftcall DUStructuredExtractionLabel.encode(with:)(NSCoder with)
{
  DUGlobalTopicSetIdentifier.encode(with:)(with.super.isa, (void (*)(void))type metadata accessor for DUStructuredExtractionLabel, &lazy protocol witness table cache variable for type DUStructuredExtractionLabel and conformance DUStructuredExtractionLabel, (uint64_t)&protocol conformance descriptor for DUStructuredExtractionLabel);
}

uint64_t DUStructuredExtractionLabel.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return DUStructuredExtractionLabel.init(coder:)(a1);
}

uint64_t DUStructuredExtractionLabel.init(coder:)(void *a1)
{
  return DUGlobalTopicSetIdentifier.init(coder:)(a1, &lazy protocol witness table cache variable for type DUStructuredExtractionLabel and conformance DUStructuredExtractionLabel, (uint64_t (*)(uint64_t))type metadata accessor for DUStructuredExtractionLabel, (uint64_t)&protocol conformance descriptor for DUStructuredExtractionLabel);
}

id DUStructuredExtractionLabel.init()()
{
  char *v0;
  char *v1;
  objc_super v3;

  v1 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding27DUStructuredExtractionLabel_labelName];
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0xE000000000000000;
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding27DUStructuredExtractionLabel_confidenceScore] = 0;
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for DUStructuredExtractionLabel();
  return objc_msgSendSuper2(&v3, sel_init);
}

id DUStructuredExtractionLabel.__deallocating_deinit(uint64_t a1)
{
  return DUStructuredEntity.__deallocating_deinit(a1, type metadata accessor for DUStructuredExtractionLabel);
}

uint64_t protocol witness for DUProtobufEncodableProtocol.init(proto:) in conformance DUStructuredExtractionLabel@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 144);
  v6 = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel(0);
  v7 = lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_StructuredEntityLabel and conformance DocumentUnderstanding_ClientInterface_StructuredEntityLabel, 255, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel);
  result = v5(a1, v6, v7);
  *a2 = result;
  return result;
}

uint64_t DUCalendarEvent.isAllDay.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding15DUCalendarEvent_isAllDay);
  swift_beginAccess();
  return *v1;
}

uint64_t DUCalendarEvent.isAllDay.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding15DUCalendarEvent_isAllDay);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*DUCalendarEvent.isAllDay.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUCalendarEvent.startDateComponents.getter@<X0>(uint64_t a1@<X8>)
{
  return DUDocumentUpdate.associatedFileURL.getter(&OBJC_IVAR____TtC21DocumentUnderstanding15DUCalendarEvent_startDateComponents, &demangling cache variable for type metadata for DateComponents?, a1);
}

uint64_t DUCalendarEvent.startDateComponents.setter(uint64_t a1)
{
  return DUDocumentUpdate.associatedFileURL.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding15DUCalendarEvent_startDateComponents, &demangling cache variable for type metadata for DateComponents?);
}

uint64_t (*DUCalendarEvent.startDateComponents.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

id @objc DUCalendarEvent.startDateComponents.getter(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t (*a5)(_QWORD), uint64_t (*a6)(void))
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v19;

  v11 = __swift_instantiateConcreteTypeFromMangledName(a3);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + *a4;
  swift_beginAccess();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v14, (uint64_t)v13, a3);
  v15 = a5(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v13, 1, v15) != 1)
  {
    v17 = (void *)a6();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
  }
  return v17;
}

uint64_t DUCalendarEvent.startTimezone.getter@<X0>(uint64_t a1@<X8>)
{
  return DUDocumentUpdate.associatedFileURL.getter(&OBJC_IVAR____TtC21DocumentUnderstanding15DUCalendarEvent_startTimezone, &demangling cache variable for type metadata for TimeZone?, a1);
}

void @objc DUCalendarEvent.startDateComponents.setter(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(uint64_t), uint64_t (*a6)(_QWORD), _QWORD *a7)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;

  v13 = __swift_instantiateConcreteTypeFromMangledName(a4);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    a5(a3);
    v16 = a6(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 0, 1, v16);
  }
  else
  {
    v17 = a6(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v15, 1, 1, v17);
  }
  v18 = (uint64_t)a1 + *a7;
  swift_beginAccess();
  v19 = a1;
  outlined assign with take of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v15, v18, a4);
  swift_endAccess();

}

uint64_t DUCalendarEvent.startTimezone.setter(uint64_t a1)
{
  return DUDocumentUpdate.associatedFileURL.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding15DUCalendarEvent_startTimezone, &demangling cache variable for type metadata for TimeZone?);
}

uint64_t (*DUCalendarEvent.startTimezone.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUCalendarEvent.endDateComponents.getter@<X0>(uint64_t a1@<X8>)
{
  return DUDocumentUpdate.associatedFileURL.getter(&OBJC_IVAR____TtC21DocumentUnderstanding15DUCalendarEvent_endDateComponents, &demangling cache variable for type metadata for DateComponents?, a1);
}

uint64_t DUCalendarEvent.endDateComponents.setter(uint64_t a1)
{
  return DUDocumentUpdate.associatedFileURL.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding15DUCalendarEvent_endDateComponents, &demangling cache variable for type metadata for DateComponents?);
}

uint64_t (*DUCalendarEvent.endDateComponents.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUCalendarEvent.endTimezone.getter@<X0>(uint64_t a1@<X8>)
{
  return DUDocumentUpdate.associatedFileURL.getter(&OBJC_IVAR____TtC21DocumentUnderstanding15DUCalendarEvent_endTimezone, &demangling cache variable for type metadata for TimeZone?, a1);
}

uint64_t DUCalendarEvent.endTimezone.setter(uint64_t a1)
{
  return DUDocumentUpdate.associatedFileURL.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding15DUCalendarEvent_endTimezone, &demangling cache variable for type metadata for TimeZone?);
}

uint64_t (*DUCalendarEvent.endTimezone.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryConfidence.modify;
}

uint64_t DUCalendarEvent.protoRepresentation.getter@<X0>(_BYTE *a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  unsigned int (*v40)(_QWORD, _QWORD, _QWORD);
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t);
  unsigned int (*v43)(_QWORD, _QWORD, _QWORD);
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  char *v63;
  uint64_t *v64;
  char *v65;
  uint64_t (*v66)(char *, uint64_t, uint64_t);
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v69 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v73 = (char *)&v61 - v7;
  v70 = type metadata accessor for TimeZone();
  v72 = *(_QWORD *)(v70 - 8);
  v8 = MEMORY[0x24BDAC7A8](v70);
  v65 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v63 = (char *)&v61 - v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v67 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v61 - v14;
  v16 = type metadata accessor for DateComponents();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v68 = (char *)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v61 - v20;
  v22 = (int *)type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0);
  v23 = UnknownStorage.init()();
  v24 = (uint64_t *)&a1[v22[6]];
  *(_OWORD *)v24 = xmmword_2284C0CD0;
  v25 = (uint64_t *)&a1[v22[7]];
  *v25 = 0;
  v25[1] = 0;
  v26 = (uint64_t *)&a1[v22[8]];
  v61 = v24;
  v62 = v26;
  *(_OWORD *)v26 = xmmword_2284C0CD0;
  v27 = (uint64_t *)&a1[v22[9]];
  *v27 = 0;
  v27[1] = 0;
  v64 = v27;
  v28 = (_QWORD *)MEMORY[0x24BEE4EA0];
  *a1 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v2) + 0x78))(v23) & 1;
  v29 = v17;
  (*(void (**)(void))((*v28 & *v2) + 0x90))();
  v66 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  v30 = v66(v15, 1, v16);
  v71 = v17;
  if (v30 == 1)
  {
    v31 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v15, &demangling cache variable for type metadata for DateComponents?);
    v32 = v70;
    v33 = v72;
    v34 = (uint64_t)v67;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v21, v15, v16);
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE0], MEMORY[0x24BDCBE00]);
    v35 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    v37 = v36;
    swift_release();
    v38 = v61;
    *v61 = v35;
    v38[1] = v37;
    v32 = v70;
    v29 = v71;
    v33 = v72;
    v34 = (uint64_t)v67;
    v31 = (*(uint64_t (**)(char *, uint64_t))(v71 + 8))(v21, v16);
  }
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v2) + 0xA8))(v31);
  v39 = (uint64_t)v73;
  v40 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v33 + 48);
  if (v40(v73, 1, v32) == 1)
  {
    v41 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v39, &demangling cache variable for type metadata for TimeZone?);
  }
  else
  {
    v42 = *(void (**)(char *, uint64_t, uint64_t))(v33 + 32);
    v70 = v16;
    v43 = v40;
    v44 = v63;
    v42(v63, v39, v32);
    v45 = TimeZone.identifier.getter();
    v47 = v46;
    swift_bridgeObjectRelease();
    *v25 = v45;
    v25[1] = v47;
    v48 = v44;
    v40 = v43;
    v16 = v70;
    v29 = v71;
    v41 = (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v48, v32);
  }
  v49 = (uint64_t)v69;
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v2) + 0xC0))(v41);
  if (v66((char *)v34, 1, v16) == 1)
  {
    v50 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v34, &demangling cache variable for type metadata for DateComponents?);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v29 + 32))(v68, v34, v16);
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE0], MEMORY[0x24BDCBE00]);
    v51 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    v53 = v52;
    swift_release();
    v54 = v62;
    outlined consume of Data?(*v62, v62[1]);
    *v54 = v51;
    v54[1] = v53;
    v50 = (*(uint64_t (**)(char *, uint64_t))(v71 + 8))(v68, v16);
    v33 = v72;
  }
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v2) + 0xD8))(v50);
  if (v40(v49, 1, v32) == 1)
    return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v49, &demangling cache variable for type metadata for TimeZone?);
  v56 = v65;
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 32))(v65, v49, v32);
  v57 = TimeZone.identifier.getter();
  v59 = v58;
  v60 = v64;
  swift_bridgeObjectRelease();
  *v60 = v57;
  v60[1] = v59;
  return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v56, v32);
}

uint64_t DUCalendarEvent.copy(with:)@<X0>(char **a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t result;
  uint64_t v9;

  v3 = type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0xF8))(v4);
  v7 = specialized DUCalendarEvent.__allocating_init<A>(proto:)((uint64_t)v6);
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DUCalendarEvent?);
  a1[3] = (char *)result;
  *a1 = v7;
  return result;
}

Swift::Void __swiftcall DUCalendarEvent.encode(with:)(NSCoder with)
{
  void *v2;
  id v3;
  void *v4;

  type metadata accessor for DUCalendarEvent();
  lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DUCalendarEvent and conformance DUCalendarEvent, 255, (uint64_t (*)(uint64_t))type metadata accessor for DUCalendarEvent, (uint64_t)&protocol conformance descriptor for DUCalendarEvent);
  v2 = (void *)DUProtobufEncodableProtocol.serializedData()();
  if (v2)
  {
    v3 = v2;
    v4 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000016, 0x80000002284DABA0);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v3, v4);

  }
}

uint64_t DUCalendarEvent.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return DUCalendarEvent.init(coder:)(a1);
}

uint64_t DUCalendarEvent.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  uint64_t v6;

  swift_getObjectType();
  type metadata accessor for NSData();
  v3 = v1;
  if (!NSCoder.decodeObject<A>(of:forKey:)())
  {

    goto LABEL_5;
  }
  swift_getObjectType();

  lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DUCalendarEvent and conformance DUCalendarEvent, 255, (uint64_t (*)(uint64_t))type metadata accessor for DUCalendarEvent, (uint64_t)&protocol conformance descriptor for DUCalendarEvent);
  DUProtobufEncodableProtocol.init(serializedData:)();

  v4 = v6;
  if (!v6)
  {
LABEL_5:
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v4;
}

id DUCalendarEvent.init()()
{
  _BYTE *v0;
  char *v1;
  uint64_t v2;
  void (*v3)(char *, uint64_t, uint64_t, uint64_t);
  char *v4;
  uint64_t v5;
  void (*v6)(char *, uint64_t, uint64_t, uint64_t);
  objc_super v8;

  v0[OBJC_IVAR____TtC21DocumentUnderstanding15DUCalendarEvent_isAllDay] = 0;
  v1 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding15DUCalendarEvent_startDateComponents];
  v2 = type metadata accessor for DateComponents();
  v3 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
  v4 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding15DUCalendarEvent_startTimezone];
  v5 = type metadata accessor for TimeZone();
  v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  v3(&v0[OBJC_IVAR____TtC21DocumentUnderstanding15DUCalendarEvent_endDateComponents], 1, 1, v2);
  v6(&v0[OBJC_IVAR____TtC21DocumentUnderstanding15DUCalendarEvent_endTimezone], 1, 1, v5);
  v8.receiver = v0;
  v8.super_class = (Class)type metadata accessor for DUCalendarEvent();
  return objc_msgSendSuper2(&v8, sel_init);
}

id DUCalendarEvent.__deallocating_deinit()
{
  return DUStructuredEntity.__deallocating_deinit(0, type metadata accessor for DUCalendarEvent);
}

id DUStructuredEntity.__deallocating_deinit(uint64_t a1, uint64_t (*a2)(void))
{
  void *v2;
  objc_super v4;

  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

uint64_t protocol witness for DUProtobufEncodableProtocol.init(proto:) in conformance DUCalendarEvent@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 240);
  v6 = type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0);
  v7 = lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_CalendarEvent and conformance DocumentUnderstanding_ClientInterface_CalendarEvent, 255, type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_CalendarEvent);
  result = v5(a1, v6, v7);
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for DUStructuredExtractionLabel()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for DUStructuredEntity()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for DUCalendarEvent()
{
  uint64_t result;

  result = type metadata singleton initialization cache for DUCalendarEvent;
  if (!type metadata singleton initialization cache for DUCalendarEvent)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t associated type witness table accessor for DUProtobufEncodableProtocol.ProtobufType : Message in DUStructuredEntity()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for DUProtobufEncodableProtocol.ProtobufType : Message in DUStructuredExtractionLabel()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for DUProtobufEncodableProtocol.ProtobufType : Message in DUCalendarEvent()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t ObjC metadata update function for DUCalendarEvent()
{
  return type metadata accessor for DUCalendarEvent();
}

void type metadata completion function for DUCalendarEvent()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent?(319, &lazy cache variable for type metadata for DateComponents?, (void (*)(uint64_t))MEMORY[0x24BDCBDE0]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent?(319, &lazy cache variable for type metadata for TimeZone?, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t sub_2283FC7A8()
{
  return lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity, 255, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_StructuredEntity);
}

uint64_t sub_2283FC7D8()
{
  return lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_StructuredEntityLabel and conformance DocumentUnderstanding_ClientInterface_StructuredEntityLabel, 255, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel);
}

uint64_t sub_2283FC808()
{
  return lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_CalendarEvent and conformance DocumentUnderstanding_ClientInterface_CalendarEvent, 255, type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_CalendarEvent);
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  UnknownStorage.init()();
  v2 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a1 + v2) = static DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.defaultInstance;
  return swift_retain();
}

uint64_t type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(uint64_t a1)
{
  return type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(a1, (uint64_t *)&type metadata singleton initialization cache for DocumentUnderstanding_ClientInterface_FoundInEventResult);
}

BOOL specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1 == a3;
}

uint64_t DocumentUnderstanding_ClientInterface_TaggedCharacterRange.annotationType.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t DocumentUnderstanding_ClientInterface_TaggedCharacterRange.annotationType.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)v2 = result;
  *(_BYTE *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*DocumentUnderstanding_ClientInterface_TaggedCharacterRange.annotationType.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DocumentUnderstanding_ClientInterface_TaggedCharacterRange.tags.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DocumentUnderstanding_ClientInterface_TaggedCharacterRange.tags.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*DocumentUnderstanding_ClientInterface_TaggedCharacterRange.tags.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DocumentUnderstanding_ClientInterface_TaggedCharacterRange.range.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DocumentUnderstanding_ClientInterface_TaggedCharacterRange.range.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

uint64_t (*DocumentUnderstanding_ClientInterface_TaggedCharacterRange.range.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DocumentUnderstanding_ClientInterface_TaggedCharacterRange.text.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DocumentUnderstanding_ClientInterface_TaggedCharacterRange.text.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t (*DocumentUnderstanding_ClientInterface_TaggedCharacterRange.text.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DocumentUnderstanding_ClientInterface_TaggedCharacterRange.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_TaggedCharacterRange(0) + 32);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t DocumentUnderstanding_ClientInterface_TaggedCharacterRange.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_TaggedCharacterRange(0) + 32);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*DocumentUnderstanding_ClientInterface_TaggedCharacterRange.unknownFields.modify())(_QWORD)
{
  type metadata accessor for DocumentUnderstanding_ClientInterface_TaggedCharacterRange(0);
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType.init()()
{
  return 0;
}

void DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType.init(rawValue:)()
{
  specialized DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType.init(rawValue:)();
}

void protocol witness for Enum.init(rawValue:) in conformance DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  char v4;

  specialized DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType.init(rawValue:)();
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 9) = v4 & 1;
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  char v4;

  specialized DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType.init(rawValue:)();
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 9) = v4 & 1;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType and conformance DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType();
  return Enum.hash(into:)();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType(uint64_t a1, uint64_t *a2)
{
  return specialized == infix<A>(_:_:)(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8), *a2);
}

uint64_t DocumentUnderstanding_ClientInterface_TaggedCharacterRange.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)a1 = 0;
  v1 = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = v1;
  *(_QWORD *)(a1 + 24) = v1;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0xE000000000000000;
  type metadata accessor for DocumentUnderstanding_ClientInterface_TaggedCharacterRange(0);
  return UnknownStorage.init()();
}

uint64_t *DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType.allCases.unsafeMutableAddressor()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  return &static DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType.allCases;
}

uint64_t static DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType.allCases.getter()
{
  return static DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType.allCases.setter(uint64_t a1)
{
  return static DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType.allCases.setter(a1, &one-time initialization token for allCases, &static DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType.allCases);
}

uint64_t (*static DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType(&one-time initialization token for allCases, &static DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType.allCases, a1);
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.detectedEventPolarity.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  return *(unsigned __int8 *)(v1 + 16);
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_FoundInEventResult.detectedEventPolarity : DocumentUnderstanding_ClientInterface_FoundInEventResult(char *a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(a2 + v4) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  result = swift_beginAccess();
  *(_BYTE *)(v6 + 16) = v3;
  return result;
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.detectedEventPolarity.setter(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(_BYTE *)(v5 + 16) = a1 & 1;
  return result;
}

void (*DocumentUnderstanding_ClientInterface_FoundInEventResult.detectedEventPolarity.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  *((_BYTE *)v3 + 84) = *(_BYTE *)(v5 + 16);
  return DocumentUnderstanding_ClientInterface_FoundInEventResult.detectedEventPolarity.modify;
}

void DocumentUnderstanding_ClientInterface_FoundInEventResult.detectedEventPolarity.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 80);
    v7 = *(_QWORD *)(v3 + 72);
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v8 = swift_retain();
    *(_QWORD *)(v7 + v6) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v8);
    swift_release();
  }
LABEL_4:
  v9 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80)) + 16);
  swift_beginAccess();
  *v9 = v4;
  free((void *)v3);
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.reservationIDError.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 33))
    return 0;
  else
    return *(_QWORD *)(v1 + 24);
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_FoundInEventResult.reservationIDError : DocumentUnderstanding_ClientInterface_FoundInEventResult@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  char v7;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  result = swift_beginAccess();
  v5 = *(_QWORD *)(v3 + 24);
  v6 = *(_BYTE *)(v3 + 32);
  v7 = *(_BYTE *)(v3 + 33);
  if (v7)
    v5 = 0;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = (v7 | v6) & 1;
  return result;
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_FoundInEventResult.reservationIDError : DocumentUnderstanding_ClientInterface_FoundInEventResult(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *a1;
  v4 = *((_BYTE *)a1 + 8);
  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(a2 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  result = swift_beginAccess();
  *(_QWORD *)(v7 + 24) = v3;
  *(_BYTE *)(v7 + 32) = v4;
  *(_BYTE *)(v7 + 33) = 0;
  return result;
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.reservationIDError.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(v2 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  result = swift_beginAccess();
  *(_QWORD *)(v7 + 24) = a1;
  *(_BYTE *)(v7 + 32) = a2 & 1;
  *(_BYTE *)(v7 + 33) = 0;
  return result;
}

void (*DocumentUnderstanding_ClientInterface_FoundInEventResult.reservationIDError.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 24);
  v7 = *(_BYTE *)(v5 + 32);
  v8 = *(_BYTE *)(v5 + 33);
  if (v8)
    v6 = 0;
  v3[9] = v6;
  *((_BYTE *)v3 + 80) = (v8 | v7) & 1;
  return DocumentUnderstanding_ClientInterface_FoundInEventResult.reservationIDError.modify;
}

void DocumentUnderstanding_ClientInterface_FoundInEventResult.reservationIDError.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  v5 = *(_BYTE *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 84);
    v8 = *(_QWORD *)(v3 + 88);
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v9 = swift_retain();
    *(_QWORD *)(v8 + v7) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v9);
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 88) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_QWORD *)(v10 + 24) = v4;
  *(_BYTE *)(v10 + 32) = v5;
  *(_BYTE *)(v10 + 33) = 0;
  free((void *)v3);
}

BOOL DocumentUnderstanding_ClientInterface_FoundInEventResult.hasReservationIDError.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 33) & 1) == 0;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_FoundInEventResult.clearReservationIDError()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v2);
    swift_release();
  }
  v3 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v3 + 24) = 0;
  *(_WORD *)(v3 + 32) = 256;
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.reservationID.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  if (*(_QWORD *)(v1 + 48))
    v2 = *(_QWORD *)(v1 + 40);
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_FoundInEventResult.reservationID : DocumentUnderstanding_ClientInterface_FoundInEventResult@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  if (*(_QWORD *)(v3 + 48))
  {
    v4 = *(_QWORD *)(v3 + 40);
    v5 = *(_QWORD *)(v3 + 48);
  }
  else
  {
    v4 = 0;
    v5 = 0xE000000000000000;
  }
  *a2 = v4;
  a2[1] = v5;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_FoundInEventResult.reservationID : DocumentUnderstanding_ClientInterface_FoundInEventResult(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(a2 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 40) = v4;
  *(_QWORD *)(v7 + 48) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.reservationID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(v2 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 40) = a1;
  *(_QWORD *)(v7 + 48) = a2;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_ClientInterface_FoundInEventResult.reservationID.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  if (*(_QWORD *)(v5 + 48))
  {
    v6 = *(_QWORD *)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 48);
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  v3[9] = v6;
  v3[10] = v7;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_ClientInterface_FoundInEventResult.reservationID.modify;
}

void DocumentUnderstanding_ClientInterface_FoundInEventResult.reservationID.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
      swift_allocObject();
      v7 = swift_retain();
      *(_QWORD *)(v6 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v7);
      swift_release();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v8 + 40) = v3;
    *(_QWORD *)(v8 + 48) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = *(int *)(v2 + 96);
      v10 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
      swift_allocObject();
      v11 = swift_retain();
      *(_QWORD *)(v10 + v9) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v11);
      swift_release();
    }
    v12 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v12 + 40) = v3;
    *(_QWORD *)(v12 + 48) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

BOOL DocumentUnderstanding_ClientInterface_FoundInEventResult.hasReservationID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  return *(_QWORD *)(v1 + 48) != 0;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_FoundInEventResult.clearReservationID()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v2);
    swift_release();
  }
  v3 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.reservationNameError.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 65))
    return 0;
  else
    return *(_QWORD *)(v1 + 56);
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_FoundInEventResult.reservationNameError : DocumentUnderstanding_ClientInterface_FoundInEventResult@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  char v7;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  result = swift_beginAccess();
  v5 = *(_QWORD *)(v3 + 56);
  v6 = *(_BYTE *)(v3 + 64);
  v7 = *(_BYTE *)(v3 + 65);
  if (v7)
    v5 = 0;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = (v7 | v6) & 1;
  return result;
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_FoundInEventResult.reservationNameError : DocumentUnderstanding_ClientInterface_FoundInEventResult(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *a1;
  v4 = *((_BYTE *)a1 + 8);
  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(a2 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  result = swift_beginAccess();
  *(_QWORD *)(v7 + 56) = v3;
  *(_BYTE *)(v7 + 64) = v4;
  *(_BYTE *)(v7 + 65) = 0;
  return result;
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.reservationNameError.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(v2 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  result = swift_beginAccess();
  *(_QWORD *)(v7 + 56) = a1;
  *(_BYTE *)(v7 + 64) = a2 & 1;
  *(_BYTE *)(v7 + 65) = 0;
  return result;
}

void (*DocumentUnderstanding_ClientInterface_FoundInEventResult.reservationNameError.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 56);
  v7 = *(_BYTE *)(v5 + 64);
  v8 = *(_BYTE *)(v5 + 65);
  if (v8)
    v6 = 0;
  v3[9] = v6;
  *((_BYTE *)v3 + 80) = (v8 | v7) & 1;
  return DocumentUnderstanding_ClientInterface_FoundInEventResult.reservationNameError.modify;
}

void DocumentUnderstanding_ClientInterface_FoundInEventResult.reservationNameError.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  v5 = *(_BYTE *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 84);
    v8 = *(_QWORD *)(v3 + 88);
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v9 = swift_retain();
    *(_QWORD *)(v8 + v7) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v9);
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 88) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_QWORD *)(v10 + 56) = v4;
  *(_BYTE *)(v10 + 64) = v5;
  *(_BYTE *)(v10 + 65) = 0;
  free((void *)v3);
}

BOOL DocumentUnderstanding_ClientInterface_FoundInEventResult.hasReservationNameError.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 65) & 1) == 0;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_FoundInEventResult.clearReservationNameError()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v2);
    swift_release();
  }
  v3 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v3 + 56) = 0;
  *(_WORD *)(v3 + 64) = 256;
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.reservationName.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  if (*(_QWORD *)(v1 + 80))
    v2 = *(_QWORD *)(v1 + 72);
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_FoundInEventResult.reservationName : DocumentUnderstanding_ClientInterface_FoundInEventResult@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  if (*(_QWORD *)(v3 + 80))
  {
    v4 = *(_QWORD *)(v3 + 72);
    v5 = *(_QWORD *)(v3 + 80);
  }
  else
  {
    v4 = 0;
    v5 = 0xE000000000000000;
  }
  *a2 = v4;
  a2[1] = v5;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_FoundInEventResult.reservationName : DocumentUnderstanding_ClientInterface_FoundInEventResult(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(a2 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 72) = v4;
  *(_QWORD *)(v7 + 80) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.reservationName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(v2 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 72) = a1;
  *(_QWORD *)(v7 + 80) = a2;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_ClientInterface_FoundInEventResult.reservationName.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  if (*(_QWORD *)(v5 + 80))
  {
    v6 = *(_QWORD *)(v5 + 72);
    v7 = *(_QWORD *)(v5 + 80);
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  v3[9] = v6;
  v3[10] = v7;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_ClientInterface_FoundInEventResult.reservationName.modify;
}

void DocumentUnderstanding_ClientInterface_FoundInEventResult.reservationName.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
      swift_allocObject();
      v7 = swift_retain();
      *(_QWORD *)(v6 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v7);
      swift_release();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v8 + 72) = v3;
    *(_QWORD *)(v8 + 80) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = *(int *)(v2 + 96);
      v10 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
      swift_allocObject();
      v11 = swift_retain();
      *(_QWORD *)(v10 + v9) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v11);
      swift_release();
    }
    v12 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v12 + 72) = v3;
    *(_QWORD *)(v12 + 80) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

BOOL DocumentUnderstanding_ClientInterface_FoundInEventResult.hasReservationName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  return *(_QWORD *)(v1 + 80) != 0;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_FoundInEventResult.clearReservationName()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v2);
    swift_release();
  }
  v3 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v3 + 72) = 0;
  *(_QWORD *)(v3 + 80) = 0;
  swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.startAddressError.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 97))
    return 0;
  else
    return *(_QWORD *)(v1 + 88);
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_FoundInEventResult.startAddressError : DocumentUnderstanding_ClientInterface_FoundInEventResult@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  char v7;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  result = swift_beginAccess();
  v5 = *(_QWORD *)(v3 + 88);
  v6 = *(_BYTE *)(v3 + 96);
  v7 = *(_BYTE *)(v3 + 97);
  if (v7)
    v5 = 0;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = (v7 | v6) & 1;
  return result;
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_FoundInEventResult.startAddressError : DocumentUnderstanding_ClientInterface_FoundInEventResult(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *a1;
  v4 = *((_BYTE *)a1 + 8);
  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(a2 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  result = swift_beginAccess();
  *(_QWORD *)(v7 + 88) = v3;
  *(_BYTE *)(v7 + 96) = v4;
  *(_BYTE *)(v7 + 97) = 0;
  return result;
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.startAddressError.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(v2 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  result = swift_beginAccess();
  *(_QWORD *)(v7 + 88) = a1;
  *(_BYTE *)(v7 + 96) = a2 & 1;
  *(_BYTE *)(v7 + 97) = 0;
  return result;
}

void (*DocumentUnderstanding_ClientInterface_FoundInEventResult.startAddressError.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 88);
  v7 = *(_BYTE *)(v5 + 96);
  v8 = *(_BYTE *)(v5 + 97);
  if (v8)
    v6 = 0;
  v3[9] = v6;
  *((_BYTE *)v3 + 80) = (v8 | v7) & 1;
  return DocumentUnderstanding_ClientInterface_FoundInEventResult.startAddressError.modify;
}

void DocumentUnderstanding_ClientInterface_FoundInEventResult.startAddressError.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  v5 = *(_BYTE *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 84);
    v8 = *(_QWORD *)(v3 + 88);
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v9 = swift_retain();
    *(_QWORD *)(v8 + v7) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v9);
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 88) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_QWORD *)(v10 + 88) = v4;
  *(_BYTE *)(v10 + 96) = v5;
  *(_BYTE *)(v10 + 97) = 0;
  free((void *)v3);
}

BOOL DocumentUnderstanding_ClientInterface_FoundInEventResult.hasStartAddressError.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 97) & 1) == 0;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_FoundInEventResult.clearStartAddressError()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v2);
    swift_release();
  }
  v3 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v3 + 88) = 0;
  *(_WORD *)(v3 + 96) = 256;
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.startAddress.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  if (*(_QWORD *)(v1 + 112))
    v2 = *(_QWORD *)(v1 + 104);
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_FoundInEventResult.startAddress : DocumentUnderstanding_ClientInterface_FoundInEventResult@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  if (*(_QWORD *)(v3 + 112))
  {
    v4 = *(_QWORD *)(v3 + 104);
    v5 = *(_QWORD *)(v3 + 112);
  }
  else
  {
    v4 = 0;
    v5 = 0xE000000000000000;
  }
  *a2 = v4;
  a2[1] = v5;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_FoundInEventResult.startAddress : DocumentUnderstanding_ClientInterface_FoundInEventResult(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(a2 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 104) = v4;
  *(_QWORD *)(v7 + 112) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.startAddress.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(v2 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 104) = a1;
  *(_QWORD *)(v7 + 112) = a2;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_ClientInterface_FoundInEventResult.startAddress.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  if (*(_QWORD *)(v5 + 112))
  {
    v6 = *(_QWORD *)(v5 + 104);
    v7 = *(_QWORD *)(v5 + 112);
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  v3[9] = v6;
  v3[10] = v7;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_ClientInterface_FoundInEventResult.startAddress.modify;
}

void DocumentUnderstanding_ClientInterface_FoundInEventResult.startAddress.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
      swift_allocObject();
      v7 = swift_retain();
      *(_QWORD *)(v6 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v7);
      swift_release();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v8 + 104) = v3;
    *(_QWORD *)(v8 + 112) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = *(int *)(v2 + 96);
      v10 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
      swift_allocObject();
      v11 = swift_retain();
      *(_QWORD *)(v10 + v9) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v11);
      swift_release();
    }
    v12 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v12 + 104) = v3;
    *(_QWORD *)(v12 + 112) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

BOOL DocumentUnderstanding_ClientInterface_FoundInEventResult.hasStartAddress.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  return *(_QWORD *)(v1 + 112) != 0;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_FoundInEventResult.clearStartAddress()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v2);
    swift_release();
  }
  v3 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v3 + 104) = 0;
  *(_QWORD *)(v3 + 112) = 0;
  swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.startAddressComponents.getter()
{
  type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0);
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_FoundInEventResult.startAddressComponents : DocumentUnderstanding_ClientInterface_FoundInEventResult@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 120);
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_FoundInEventResult.startAddressComponents : DocumentUnderstanding_ClientInterface_FoundInEventResult(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(a2 + v4) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  swift_beginAccess();
  *(_QWORD *)(v6 + 120) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.startAddressComponents.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  swift_beginAccess();
  *(_QWORD *)(v5 + 120) = a1;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_ClientInterface_FoundInEventResult.startAddressComponents.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v3[9] = *(_QWORD *)(v5 + 120);
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_ClientInterface_FoundInEventResult.startAddressComponents.modify;
}

void DocumentUnderstanding_ClientInterface_FoundInEventResult.startAddressComponents.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v4 = *(int *)(v2 + 88);
      v5 = *(_QWORD *)(v2 + 80);
      type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
      swift_allocObject();
      v6 = swift_retain();
      *(_QWORD *)(v5 + v4) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v6);
      swift_release();
    }
    v7 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess();
    *(_QWORD *)(v7 + 120) = v3;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v8 = *(int *)(v2 + 88);
      v9 = *(_QWORD *)(v2 + 80);
      type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
      swift_allocObject();
      v10 = swift_retain();
      *(_QWORD *)(v9 + v8) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v10);
      swift_release();
    }
    v11 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess();
    *(_QWORD *)(v11 + 120) = v3;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.endAddressError.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 137))
    return 0;
  else
    return *(_QWORD *)(v1 + 128);
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_FoundInEventResult.endAddressError : DocumentUnderstanding_ClientInterface_FoundInEventResult@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  char v7;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  result = swift_beginAccess();
  v5 = *(_QWORD *)(v3 + 128);
  v6 = *(_BYTE *)(v3 + 136);
  v7 = *(_BYTE *)(v3 + 137);
  if (v7)
    v5 = 0;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = (v7 | v6) & 1;
  return result;
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_FoundInEventResult.endAddressError : DocumentUnderstanding_ClientInterface_FoundInEventResult(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *a1;
  v4 = *((_BYTE *)a1 + 8);
  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(a2 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  result = swift_beginAccess();
  *(_QWORD *)(v7 + 128) = v3;
  *(_BYTE *)(v7 + 136) = v4;
  *(_BYTE *)(v7 + 137) = 0;
  return result;
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.endAddressError.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(v2 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  result = swift_beginAccess();
  *(_QWORD *)(v7 + 128) = a1;
  *(_BYTE *)(v7 + 136) = a2 & 1;
  *(_BYTE *)(v7 + 137) = 0;
  return result;
}

void (*DocumentUnderstanding_ClientInterface_FoundInEventResult.endAddressError.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 128);
  v7 = *(_BYTE *)(v5 + 136);
  v8 = *(_BYTE *)(v5 + 137);
  if (v8)
    v6 = 0;
  v3[9] = v6;
  *((_BYTE *)v3 + 80) = (v8 | v7) & 1;
  return DocumentUnderstanding_ClientInterface_FoundInEventResult.endAddressError.modify;
}

void DocumentUnderstanding_ClientInterface_FoundInEventResult.endAddressError.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  v5 = *(_BYTE *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 84);
    v8 = *(_QWORD *)(v3 + 88);
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v9 = swift_retain();
    *(_QWORD *)(v8 + v7) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v9);
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 88) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_QWORD *)(v10 + 128) = v4;
  *(_BYTE *)(v10 + 136) = v5;
  *(_BYTE *)(v10 + 137) = 0;
  free((void *)v3);
}

BOOL DocumentUnderstanding_ClientInterface_FoundInEventResult.hasEndAddressError.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 137) & 1) == 0;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_FoundInEventResult.clearEndAddressError()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v2);
    swift_release();
  }
  v3 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v3 + 128) = 0;
  *(_WORD *)(v3 + 136) = 256;
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.endAddress.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  if (*(_QWORD *)(v1 + 152))
    v2 = *(_QWORD *)(v1 + 144);
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_FoundInEventResult.endAddress : DocumentUnderstanding_ClientInterface_FoundInEventResult@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  if (*(_QWORD *)(v3 + 152))
  {
    v4 = *(_QWORD *)(v3 + 144);
    v5 = *(_QWORD *)(v3 + 152);
  }
  else
  {
    v4 = 0;
    v5 = 0xE000000000000000;
  }
  *a2 = v4;
  a2[1] = v5;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_FoundInEventResult.endAddress : DocumentUnderstanding_ClientInterface_FoundInEventResult(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(a2 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 144) = v4;
  *(_QWORD *)(v7 + 152) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.endAddress.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(v2 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 144) = a1;
  *(_QWORD *)(v7 + 152) = a2;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_ClientInterface_FoundInEventResult.endAddress.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  if (*(_QWORD *)(v5 + 152))
  {
    v6 = *(_QWORD *)(v5 + 144);
    v7 = *(_QWORD *)(v5 + 152);
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  v3[9] = v6;
  v3[10] = v7;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_ClientInterface_FoundInEventResult.endAddress.modify;
}

void DocumentUnderstanding_ClientInterface_FoundInEventResult.endAddress.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
      swift_allocObject();
      v7 = swift_retain();
      *(_QWORD *)(v6 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v7);
      swift_release();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v8 + 144) = v3;
    *(_QWORD *)(v8 + 152) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = *(int *)(v2 + 96);
      v10 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
      swift_allocObject();
      v11 = swift_retain();
      *(_QWORD *)(v10 + v9) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v11);
      swift_release();
    }
    v12 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v12 + 144) = v3;
    *(_QWORD *)(v12 + 152) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

BOOL DocumentUnderstanding_ClientInterface_FoundInEventResult.hasEndAddress.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  return *(_QWORD *)(v1 + 152) != 0;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_FoundInEventResult.clearEndAddress()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v2);
    swift_release();
  }
  v3 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v3 + 144) = 0;
  *(_QWORD *)(v3 + 152) = 0;
  swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.endAddressComponents.getter()
{
  type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0);
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_FoundInEventResult.endAddressComponents : DocumentUnderstanding_ClientInterface_FoundInEventResult@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 160);
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_FoundInEventResult.endAddressComponents : DocumentUnderstanding_ClientInterface_FoundInEventResult(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(a2 + v4) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  swift_beginAccess();
  *(_QWORD *)(v6 + 160) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.endAddressComponents.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  swift_beginAccess();
  *(_QWORD *)(v5 + 160) = a1;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_ClientInterface_FoundInEventResult.endAddressComponents.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v3[9] = *(_QWORD *)(v5 + 160);
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_ClientInterface_FoundInEventResult.endAddressComponents.modify;
}

void DocumentUnderstanding_ClientInterface_FoundInEventResult.endAddressComponents.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v4 = *(int *)(v2 + 88);
      v5 = *(_QWORD *)(v2 + 80);
      type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
      swift_allocObject();
      v6 = swift_retain();
      *(_QWORD *)(v5 + v4) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v6);
      swift_release();
    }
    v7 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess();
    *(_QWORD *)(v7 + 160) = v3;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v8 = *(int *)(v2 + 88);
      v9 = *(_QWORD *)(v2 + 80);
      type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
      swift_allocObject();
      v10 = swift_retain();
      *(_QWORD *)(v9 + v8) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v10);
      swift_release();
    }
    v11 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess();
    *(_QWORD *)(v11 + 160) = v3;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.startPlaceError.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 177))
    return 0;
  else
    return *(_QWORD *)(v1 + 168);
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_FoundInEventResult.startPlaceError : DocumentUnderstanding_ClientInterface_FoundInEventResult@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  char v7;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  result = swift_beginAccess();
  v5 = *(_QWORD *)(v3 + 168);
  v6 = *(_BYTE *)(v3 + 176);
  v7 = *(_BYTE *)(v3 + 177);
  if (v7)
    v5 = 0;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = (v7 | v6) & 1;
  return result;
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_FoundInEventResult.startPlaceError : DocumentUnderstanding_ClientInterface_FoundInEventResult(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *a1;
  v4 = *((_BYTE *)a1 + 8);
  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(a2 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  result = swift_beginAccess();
  *(_QWORD *)(v7 + 168) = v3;
  *(_BYTE *)(v7 + 176) = v4;
  *(_BYTE *)(v7 + 177) = 0;
  return result;
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.startPlaceError.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(v2 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  result = swift_beginAccess();
  *(_QWORD *)(v7 + 168) = a1;
  *(_BYTE *)(v7 + 176) = a2 & 1;
  *(_BYTE *)(v7 + 177) = 0;
  return result;
}

void (*DocumentUnderstanding_ClientInterface_FoundInEventResult.startPlaceError.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 168);
  v7 = *(_BYTE *)(v5 + 176);
  v8 = *(_BYTE *)(v5 + 177);
  if (v8)
    v6 = 0;
  v3[9] = v6;
  *((_BYTE *)v3 + 80) = (v8 | v7) & 1;
  return DocumentUnderstanding_ClientInterface_FoundInEventResult.startPlaceError.modify;
}

void DocumentUnderstanding_ClientInterface_FoundInEventResult.startPlaceError.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  v5 = *(_BYTE *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 84);
    v8 = *(_QWORD *)(v3 + 88);
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v9 = swift_retain();
    *(_QWORD *)(v8 + v7) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v9);
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 88) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_QWORD *)(v10 + 168) = v4;
  *(_BYTE *)(v10 + 176) = v5;
  *(_BYTE *)(v10 + 177) = 0;
  free((void *)v3);
}

BOOL DocumentUnderstanding_ClientInterface_FoundInEventResult.hasStartPlaceError.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 177) & 1) == 0;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_FoundInEventResult.clearStartPlaceError()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v2);
    swift_release();
  }
  v3 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v3 + 168) = 0;
  *(_WORD *)(v3 + 176) = 256;
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.startPlace.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  if (*(_QWORD *)(v1 + 192))
    v2 = *(_QWORD *)(v1 + 184);
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_FoundInEventResult.startPlace : DocumentUnderstanding_ClientInterface_FoundInEventResult@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  if (*(_QWORD *)(v3 + 192))
  {
    v4 = *(_QWORD *)(v3 + 184);
    v5 = *(_QWORD *)(v3 + 192);
  }
  else
  {
    v4 = 0;
    v5 = 0xE000000000000000;
  }
  *a2 = v4;
  a2[1] = v5;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_FoundInEventResult.startPlace : DocumentUnderstanding_ClientInterface_FoundInEventResult(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(a2 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 184) = v4;
  *(_QWORD *)(v7 + 192) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.startPlace.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(v2 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 184) = a1;
  *(_QWORD *)(v7 + 192) = a2;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_ClientInterface_FoundInEventResult.startPlace.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  if (*(_QWORD *)(v5 + 192))
  {
    v6 = *(_QWORD *)(v5 + 184);
    v7 = *(_QWORD *)(v5 + 192);
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  v3[9] = v6;
  v3[10] = v7;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_ClientInterface_FoundInEventResult.startPlace.modify;
}

void DocumentUnderstanding_ClientInterface_FoundInEventResult.startPlace.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
      swift_allocObject();
      v7 = swift_retain();
      *(_QWORD *)(v6 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v7);
      swift_release();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v8 + 184) = v3;
    *(_QWORD *)(v8 + 192) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = *(int *)(v2 + 96);
      v10 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
      swift_allocObject();
      v11 = swift_retain();
      *(_QWORD *)(v10 + v9) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v11);
      swift_release();
    }
    v12 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v12 + 184) = v3;
    *(_QWORD *)(v12 + 192) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

BOOL DocumentUnderstanding_ClientInterface_FoundInEventResult.hasStartPlace.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  return *(_QWORD *)(v1 + 192) != 0;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_FoundInEventResult.clearStartPlace()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v2);
    swift_release();
  }
  v3 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v3 + 184) = 0;
  *(_QWORD *)(v3 + 192) = 0;
  swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.endPlaceError.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 209))
    return 0;
  else
    return *(_QWORD *)(v1 + 200);
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_FoundInEventResult.endPlaceError : DocumentUnderstanding_ClientInterface_FoundInEventResult@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  char v7;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  result = swift_beginAccess();
  v5 = *(_QWORD *)(v3 + 200);
  v6 = *(_BYTE *)(v3 + 208);
  v7 = *(_BYTE *)(v3 + 209);
  if (v7)
    v5 = 0;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = (v7 | v6) & 1;
  return result;
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_FoundInEventResult.endPlaceError : DocumentUnderstanding_ClientInterface_FoundInEventResult(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *a1;
  v4 = *((_BYTE *)a1 + 8);
  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(a2 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  result = swift_beginAccess();
  *(_QWORD *)(v7 + 200) = v3;
  *(_BYTE *)(v7 + 208) = v4;
  *(_BYTE *)(v7 + 209) = 0;
  return result;
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.endPlaceError.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(v2 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  result = swift_beginAccess();
  *(_QWORD *)(v7 + 200) = a1;
  *(_BYTE *)(v7 + 208) = a2 & 1;
  *(_BYTE *)(v7 + 209) = 0;
  return result;
}

void (*DocumentUnderstanding_ClientInterface_FoundInEventResult.endPlaceError.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 200);
  v7 = *(_BYTE *)(v5 + 208);
  v8 = *(_BYTE *)(v5 + 209);
  if (v8)
    v6 = 0;
  v3[9] = v6;
  *((_BYTE *)v3 + 80) = (v8 | v7) & 1;
  return DocumentUnderstanding_ClientInterface_FoundInEventResult.endPlaceError.modify;
}

void DocumentUnderstanding_ClientInterface_FoundInEventResult.endPlaceError.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  v5 = *(_BYTE *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 84);
    v8 = *(_QWORD *)(v3 + 88);
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v9 = swift_retain();
    *(_QWORD *)(v8 + v7) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v9);
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 88) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_QWORD *)(v10 + 200) = v4;
  *(_BYTE *)(v10 + 208) = v5;
  *(_BYTE *)(v10 + 209) = 0;
  free((void *)v3);
}

BOOL DocumentUnderstanding_ClientInterface_FoundInEventResult.hasEndPlaceError.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 209) & 1) == 0;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_FoundInEventResult.clearEndPlaceError()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v2);
    swift_release();
  }
  v3 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v3 + 200) = 0;
  *(_WORD *)(v3 + 208) = 256;
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.endPlace.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  if (*(_QWORD *)(v1 + 224))
    v2 = *(_QWORD *)(v1 + 216);
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_FoundInEventResult.endPlace : DocumentUnderstanding_ClientInterface_FoundInEventResult@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  if (*(_QWORD *)(v3 + 224))
  {
    v4 = *(_QWORD *)(v3 + 216);
    v5 = *(_QWORD *)(v3 + 224);
  }
  else
  {
    v4 = 0;
    v5 = 0xE000000000000000;
  }
  *a2 = v4;
  a2[1] = v5;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_FoundInEventResult.endPlace : DocumentUnderstanding_ClientInterface_FoundInEventResult(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(a2 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 216) = v4;
  *(_QWORD *)(v7 + 224) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.endPlace.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(v2 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 216) = a1;
  *(_QWORD *)(v7 + 224) = a2;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_ClientInterface_FoundInEventResult.endPlace.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  if (*(_QWORD *)(v5 + 224))
  {
    v6 = *(_QWORD *)(v5 + 216);
    v7 = *(_QWORD *)(v5 + 224);
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  v3[9] = v6;
  v3[10] = v7;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_ClientInterface_FoundInEventResult.endPlace.modify;
}

void DocumentUnderstanding_ClientInterface_FoundInEventResult.endPlace.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
      swift_allocObject();
      v7 = swift_retain();
      *(_QWORD *)(v6 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v7);
      swift_release();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v8 + 216) = v3;
    *(_QWORD *)(v8 + 224) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = *(int *)(v2 + 96);
      v10 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
      swift_allocObject();
      v11 = swift_retain();
      *(_QWORD *)(v10 + v9) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v11);
      swift_release();
    }
    v12 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v12 + 216) = v3;
    *(_QWORD *)(v12 + 224) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

BOOL DocumentUnderstanding_ClientInterface_FoundInEventResult.hasEndPlace.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  return *(_QWORD *)(v1 + 224) != 0;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_FoundInEventResult.clearEndPlace()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v2);
    swift_release();
  }
  v3 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.startDateError.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 241))
    return 0;
  else
    return *(_QWORD *)(v1 + 232);
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_FoundInEventResult.startDateError : DocumentUnderstanding_ClientInterface_FoundInEventResult@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  char v7;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  result = swift_beginAccess();
  v5 = *(_QWORD *)(v3 + 232);
  v6 = *(_BYTE *)(v3 + 240);
  v7 = *(_BYTE *)(v3 + 241);
  if (v7)
    v5 = 0;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = (v7 | v6) & 1;
  return result;
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_FoundInEventResult.startDateError : DocumentUnderstanding_ClientInterface_FoundInEventResult(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *a1;
  v4 = *((_BYTE *)a1 + 8);
  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(a2 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  result = swift_beginAccess();
  *(_QWORD *)(v7 + 232) = v3;
  *(_BYTE *)(v7 + 240) = v4;
  *(_BYTE *)(v7 + 241) = 0;
  return result;
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.startDateError.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(v2 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  result = swift_beginAccess();
  *(_QWORD *)(v7 + 232) = a1;
  *(_BYTE *)(v7 + 240) = a2 & 1;
  *(_BYTE *)(v7 + 241) = 0;
  return result;
}

void (*DocumentUnderstanding_ClientInterface_FoundInEventResult.startDateError.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 232);
  v7 = *(_BYTE *)(v5 + 240);
  v8 = *(_BYTE *)(v5 + 241);
  if (v8)
    v6 = 0;
  v3[9] = v6;
  *((_BYTE *)v3 + 80) = (v8 | v7) & 1;
  return DocumentUnderstanding_ClientInterface_FoundInEventResult.startDateError.modify;
}

void DocumentUnderstanding_ClientInterface_FoundInEventResult.startDateError.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  v5 = *(_BYTE *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 84);
    v8 = *(_QWORD *)(v3 + 88);
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v9 = swift_retain();
    *(_QWORD *)(v8 + v7) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v9);
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 88) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_QWORD *)(v10 + 232) = v4;
  *(_BYTE *)(v10 + 240) = v5;
  *(_BYTE *)(v10 + 241) = 0;
  free((void *)v3);
}

BOOL DocumentUnderstanding_ClientInterface_FoundInEventResult.hasStartDateError.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 241) & 1) == 0;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_FoundInEventResult.clearStartDateError()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v2);
    swift_release();
  }
  v3 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v3 + 232) = 0;
  *(_WORD *)(v3 + 240) = 256;
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.startDate.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  if (*(_QWORD *)(v1 + 256))
    v2 = *(_QWORD *)(v1 + 248);
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_FoundInEventResult.startDate : DocumentUnderstanding_ClientInterface_FoundInEventResult@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  if (*(_QWORD *)(v3 + 256))
  {
    v4 = *(_QWORD *)(v3 + 248);
    v5 = *(_QWORD *)(v3 + 256);
  }
  else
  {
    v4 = 0;
    v5 = 0xE000000000000000;
  }
  *a2 = v4;
  a2[1] = v5;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_FoundInEventResult.startDate : DocumentUnderstanding_ClientInterface_FoundInEventResult(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(a2 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 248) = v4;
  *(_QWORD *)(v7 + 256) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.startDate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(v2 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 248) = a1;
  *(_QWORD *)(v7 + 256) = a2;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_ClientInterface_FoundInEventResult.startDate.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  if (*(_QWORD *)(v5 + 256))
  {
    v6 = *(_QWORD *)(v5 + 248);
    v7 = *(_QWORD *)(v5 + 256);
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  v3[9] = v6;
  v3[10] = v7;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_ClientInterface_FoundInEventResult.startDate.modify;
}

void DocumentUnderstanding_ClientInterface_FoundInEventResult.startDate.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
      swift_allocObject();
      v7 = swift_retain();
      *(_QWORD *)(v6 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v7);
      swift_release();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v8 + 248) = v3;
    *(_QWORD *)(v8 + 256) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = *(int *)(v2 + 96);
      v10 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
      swift_allocObject();
      v11 = swift_retain();
      *(_QWORD *)(v10 + v9) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v11);
      swift_release();
    }
    v12 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v12 + 248) = v3;
    *(_QWORD *)(v12 + 256) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

BOOL DocumentUnderstanding_ClientInterface_FoundInEventResult.hasStartDate.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  return *(_QWORD *)(v1 + 256) != 0;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_FoundInEventResult.clearStartDate()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v2);
    swift_release();
  }
  v3 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v3 + 248) = 0;
  *(_QWORD *)(v3 + 256) = 0;
  swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.endDateError.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 273))
    return 0;
  else
    return *(_QWORD *)(v1 + 264);
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_FoundInEventResult.endDateError : DocumentUnderstanding_ClientInterface_FoundInEventResult@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  char v7;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  result = swift_beginAccess();
  v5 = *(_QWORD *)(v3 + 264);
  v6 = *(_BYTE *)(v3 + 272);
  v7 = *(_BYTE *)(v3 + 273);
  if (v7)
    v5 = 0;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = (v7 | v6) & 1;
  return result;
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_FoundInEventResult.endDateError : DocumentUnderstanding_ClientInterface_FoundInEventResult(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *a1;
  v4 = *((_BYTE *)a1 + 8);
  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(a2 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  result = swift_beginAccess();
  *(_QWORD *)(v7 + 264) = v3;
  *(_BYTE *)(v7 + 272) = v4;
  *(_BYTE *)(v7 + 273) = 0;
  return result;
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.endDateError.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(v2 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  result = swift_beginAccess();
  *(_QWORD *)(v7 + 264) = a1;
  *(_BYTE *)(v7 + 272) = a2 & 1;
  *(_BYTE *)(v7 + 273) = 0;
  return result;
}

void (*DocumentUnderstanding_ClientInterface_FoundInEventResult.endDateError.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 264);
  v7 = *(_BYTE *)(v5 + 272);
  v8 = *(_BYTE *)(v5 + 273);
  if (v8)
    v6 = 0;
  v3[9] = v6;
  *((_BYTE *)v3 + 80) = (v8 | v7) & 1;
  return DocumentUnderstanding_ClientInterface_FoundInEventResult.endDateError.modify;
}

void DocumentUnderstanding_ClientInterface_FoundInEventResult.endDateError.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  v5 = *(_BYTE *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 84);
    v8 = *(_QWORD *)(v3 + 88);
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v9 = swift_retain();
    *(_QWORD *)(v8 + v7) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v9);
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 88) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_QWORD *)(v10 + 264) = v4;
  *(_BYTE *)(v10 + 272) = v5;
  *(_BYTE *)(v10 + 273) = 0;
  free((void *)v3);
}

BOOL DocumentUnderstanding_ClientInterface_FoundInEventResult.hasEndDateError.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20))
     + 264;
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 9) & 1) == 0;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_FoundInEventResult.clearEndDateError()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v2);
    swift_release();
  }
  v3 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v3 + 264) = 0;
  *(_WORD *)(v3 + 272) = 256;
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.endDate.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  if (*(_QWORD *)(v1 + 288))
    v2 = *(_QWORD *)(v1 + 280);
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_FoundInEventResult.endDate : DocumentUnderstanding_ClientInterface_FoundInEventResult@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  if (*(_QWORD *)(v3 + 288))
  {
    v4 = *(_QWORD *)(v3 + 280);
    v5 = *(_QWORD *)(v3 + 288);
  }
  else
  {
    v4 = 0;
    v5 = 0xE000000000000000;
  }
  *a2 = v4;
  a2[1] = v5;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_FoundInEventResult.endDate : DocumentUnderstanding_ClientInterface_FoundInEventResult(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(a2 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 280) = v4;
  *(_QWORD *)(v7 + 288) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.endDate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(v2 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 280) = a1;
  *(_QWORD *)(v7 + 288) = a2;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_ClientInterface_FoundInEventResult.endDate.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  if (*(_QWORD *)(v5 + 288))
  {
    v6 = *(_QWORD *)(v5 + 280);
    v7 = *(_QWORD *)(v5 + 288);
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  v3[9] = v6;
  v3[10] = v7;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_ClientInterface_FoundInEventResult.endDate.modify;
}

void DocumentUnderstanding_ClientInterface_FoundInEventResult.endDate.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
      swift_allocObject();
      v7 = swift_retain();
      *(_QWORD *)(v6 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v7);
      swift_release();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v8 + 280) = v3;
    *(_QWORD *)(v8 + 288) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = *(int *)(v2 + 96);
      v10 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
      swift_allocObject();
      v11 = swift_retain();
      *(_QWORD *)(v10 + v9) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v11);
      swift_release();
    }
    v12 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v12 + 280) = v3;
    *(_QWORD *)(v12 + 288) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

BOOL DocumentUnderstanding_ClientInterface_FoundInEventResult.hasEndDate.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  return *(_QWORD *)(v1 + 288) != 0;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_FoundInEventResult.clearEndDate()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v2);
    swift_release();
  }
  v3 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v3 + 280) = 0;
  *(_QWORD *)(v3 + 288) = 0;
  swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.hotelNameError.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 305))
    return 0;
  else
    return *(_QWORD *)(v1 + 296);
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_FoundInEventResult.hotelNameError : DocumentUnderstanding_ClientInterface_FoundInEventResult@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  char v7;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  result = swift_beginAccess();
  v5 = *(_QWORD *)(v3 + 296);
  v6 = *(_BYTE *)(v3 + 304);
  v7 = *(_BYTE *)(v3 + 305);
  if (v7)
    v5 = 0;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = (v7 | v6) & 1;
  return result;
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_FoundInEventResult.hotelNameError : DocumentUnderstanding_ClientInterface_FoundInEventResult(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *a1;
  v4 = *((_BYTE *)a1 + 8);
  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(a2 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  result = swift_beginAccess();
  *(_QWORD *)(v7 + 296) = v3;
  *(_BYTE *)(v7 + 304) = v4;
  *(_BYTE *)(v7 + 305) = 0;
  return result;
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.hotelNameError.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(v2 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  result = swift_beginAccess();
  *(_QWORD *)(v7 + 296) = a1;
  *(_BYTE *)(v7 + 304) = a2 & 1;
  *(_BYTE *)(v7 + 305) = 0;
  return result;
}

void (*DocumentUnderstanding_ClientInterface_FoundInEventResult.hotelNameError.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 296);
  v7 = *(_BYTE *)(v5 + 304);
  v8 = *(_BYTE *)(v5 + 305);
  if (v8)
    v6 = 0;
  v3[9] = v6;
  *((_BYTE *)v3 + 80) = (v8 | v7) & 1;
  return DocumentUnderstanding_ClientInterface_FoundInEventResult.hotelNameError.modify;
}

void DocumentUnderstanding_ClientInterface_FoundInEventResult.hotelNameError.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  v5 = *(_BYTE *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 84);
    v8 = *(_QWORD *)(v3 + 88);
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v9 = swift_retain();
    *(_QWORD *)(v8 + v7) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v9);
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 88) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_QWORD *)(v10 + 296) = v4;
  *(_BYTE *)(v10 + 304) = v5;
  *(_BYTE *)(v10 + 305) = 0;
  free((void *)v3);
}

BOOL DocumentUnderstanding_ClientInterface_FoundInEventResult.hasHotelNameError.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20))
     + 296;
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 9) & 1) == 0;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_FoundInEventResult.clearHotelNameError()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v2);
    swift_release();
  }
  v3 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v3 + 296) = 0;
  *(_WORD *)(v3 + 304) = 256;
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.hotelName.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  if (*(_QWORD *)(v1 + 320))
    v2 = *(_QWORD *)(v1 + 312);
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_FoundInEventResult.hotelName : DocumentUnderstanding_ClientInterface_FoundInEventResult@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  if (*(_QWORD *)(v3 + 320))
  {
    v4 = *(_QWORD *)(v3 + 312);
    v5 = *(_QWORD *)(v3 + 320);
  }
  else
  {
    v4 = 0;
    v5 = 0xE000000000000000;
  }
  *a2 = v4;
  a2[1] = v5;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_FoundInEventResult.hotelName : DocumentUnderstanding_ClientInterface_FoundInEventResult(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(a2 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 312) = v4;
  *(_QWORD *)(v7 + 320) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.hotelName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(v2 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 312) = a1;
  *(_QWORD *)(v7 + 320) = a2;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_ClientInterface_FoundInEventResult.hotelName.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  if (*(_QWORD *)(v5 + 320))
  {
    v6 = *(_QWORD *)(v5 + 312);
    v7 = *(_QWORD *)(v5 + 320);
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  v3[9] = v6;
  v3[10] = v7;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_ClientInterface_FoundInEventResult.hotelName.modify;
}

void DocumentUnderstanding_ClientInterface_FoundInEventResult.hotelName.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
      swift_allocObject();
      v7 = swift_retain();
      *(_QWORD *)(v6 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v7);
      swift_release();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v8 + 312) = v3;
    *(_QWORD *)(v8 + 320) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = *(int *)(v2 + 96);
      v10 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
      swift_allocObject();
      v11 = swift_retain();
      *(_QWORD *)(v10 + v9) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v11);
      swift_release();
    }
    v12 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v12 + 312) = v3;
    *(_QWORD *)(v12 + 320) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

BOOL DocumentUnderstanding_ClientInterface_FoundInEventResult.hasHotelName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  return *(_QWORD *)(v1 + 320) != 0;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_FoundInEventResult.clearHotelName()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v2);
    swift_release();
  }
  v3 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v3 + 312) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.guestNameError.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 337))
    return 0;
  else
    return *(_QWORD *)(v1 + 328);
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_FoundInEventResult.guestNameError : DocumentUnderstanding_ClientInterface_FoundInEventResult@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  char v7;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  result = swift_beginAccess();
  v5 = *(_QWORD *)(v3 + 328);
  v6 = *(_BYTE *)(v3 + 336);
  v7 = *(_BYTE *)(v3 + 337);
  if (v7)
    v5 = 0;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = (v7 | v6) & 1;
  return result;
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_FoundInEventResult.guestNameError : DocumentUnderstanding_ClientInterface_FoundInEventResult(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *a1;
  v4 = *((_BYTE *)a1 + 8);
  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(a2 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  result = swift_beginAccess();
  *(_QWORD *)(v7 + 328) = v3;
  *(_BYTE *)(v7 + 336) = v4;
  *(_BYTE *)(v7 + 337) = 0;
  return result;
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.guestNameError.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(v2 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  result = swift_beginAccess();
  *(_QWORD *)(v7 + 328) = a1;
  *(_BYTE *)(v7 + 336) = a2 & 1;
  *(_BYTE *)(v7 + 337) = 0;
  return result;
}

void (*DocumentUnderstanding_ClientInterface_FoundInEventResult.guestNameError.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 328);
  v7 = *(_BYTE *)(v5 + 336);
  v8 = *(_BYTE *)(v5 + 337);
  if (v8)
    v6 = 0;
  v3[9] = v6;
  *((_BYTE *)v3 + 80) = (v8 | v7) & 1;
  return DocumentUnderstanding_ClientInterface_FoundInEventResult.guestNameError.modify;
}

void DocumentUnderstanding_ClientInterface_FoundInEventResult.guestNameError.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  v5 = *(_BYTE *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 84);
    v8 = *(_QWORD *)(v3 + 88);
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v9 = swift_retain();
    *(_QWORD *)(v8 + v7) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v9);
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 88) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_QWORD *)(v10 + 328) = v4;
  *(_BYTE *)(v10 + 336) = v5;
  *(_BYTE *)(v10 + 337) = 0;
  free((void *)v3);
}

BOOL DocumentUnderstanding_ClientInterface_FoundInEventResult.hasGuestNameError.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20))
     + 328;
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 9) & 1) == 0;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_FoundInEventResult.clearGuestNameError()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v2);
    swift_release();
  }
  v3 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v3 + 328) = 0;
  *(_WORD *)(v3 + 336) = 256;
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.guestName.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  if (*(_QWORD *)(v1 + 352))
    v2 = *(_QWORD *)(v1 + 344);
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_FoundInEventResult.guestName : DocumentUnderstanding_ClientInterface_FoundInEventResult@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  if (*(_QWORD *)(v3 + 352))
  {
    v4 = *(_QWORD *)(v3 + 344);
    v5 = *(_QWORD *)(v3 + 352);
  }
  else
  {
    v4 = 0;
    v5 = 0xE000000000000000;
  }
  *a2 = v4;
  a2[1] = v5;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_FoundInEventResult.guestName : DocumentUnderstanding_ClientInterface_FoundInEventResult(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(a2 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 344) = v4;
  *(_QWORD *)(v7 + 352) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.guestName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(v2 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 344) = a1;
  *(_QWORD *)(v7 + 352) = a2;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_ClientInterface_FoundInEventResult.guestName.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  if (*(_QWORD *)(v5 + 352))
  {
    v6 = *(_QWORD *)(v5 + 344);
    v7 = *(_QWORD *)(v5 + 352);
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  v3[9] = v6;
  v3[10] = v7;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_ClientInterface_FoundInEventResult.guestName.modify;
}

void DocumentUnderstanding_ClientInterface_FoundInEventResult.guestName.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
      swift_allocObject();
      v7 = swift_retain();
      *(_QWORD *)(v6 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v7);
      swift_release();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v8 + 344) = v3;
    *(_QWORD *)(v8 + 352) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = *(int *)(v2 + 96);
      v10 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
      swift_allocObject();
      v11 = swift_retain();
      *(_QWORD *)(v10 + v9) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v11);
      swift_release();
    }
    v12 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v12 + 344) = v3;
    *(_QWORD *)(v12 + 352) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

BOOL DocumentUnderstanding_ClientInterface_FoundInEventResult.hasGuestName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  return *(_QWORD *)(v1 + 352) != 0;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_FoundInEventResult.clearGuestName()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v2);
    swift_release();
  }
  v3 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v3 + 344) = 0;
  *(_QWORD *)(v3 + 352) = 0;
  swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.movieNameError.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 369))
    return 0;
  else
    return *(_QWORD *)(v1 + 360);
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_FoundInEventResult.movieNameError : DocumentUnderstanding_ClientInterface_FoundInEventResult@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  char v7;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  result = swift_beginAccess();
  v5 = *(_QWORD *)(v3 + 360);
  v6 = *(_BYTE *)(v3 + 368);
  v7 = *(_BYTE *)(v3 + 369);
  if (v7)
    v5 = 0;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = (v7 | v6) & 1;
  return result;
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_FoundInEventResult.movieNameError : DocumentUnderstanding_ClientInterface_FoundInEventResult(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *a1;
  v4 = *((_BYTE *)a1 + 8);
  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(a2 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  result = swift_beginAccess();
  *(_QWORD *)(v7 + 360) = v3;
  *(_BYTE *)(v7 + 368) = v4;
  *(_BYTE *)(v7 + 369) = 0;
  return result;
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.movieNameError.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(v2 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  result = swift_beginAccess();
  *(_QWORD *)(v7 + 360) = a1;
  *(_BYTE *)(v7 + 368) = a2 & 1;
  *(_BYTE *)(v7 + 369) = 0;
  return result;
}

void (*DocumentUnderstanding_ClientInterface_FoundInEventResult.movieNameError.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 360);
  v7 = *(_BYTE *)(v5 + 368);
  v8 = *(_BYTE *)(v5 + 369);
  if (v8)
    v6 = 0;
  v3[9] = v6;
  *((_BYTE *)v3 + 80) = (v8 | v7) & 1;
  return DocumentUnderstanding_ClientInterface_FoundInEventResult.movieNameError.modify;
}

void DocumentUnderstanding_ClientInterface_FoundInEventResult.movieNameError.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  v5 = *(_BYTE *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 84);
    v8 = *(_QWORD *)(v3 + 88);
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v9 = swift_retain();
    *(_QWORD *)(v8 + v7) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v9);
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 88) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_QWORD *)(v10 + 360) = v4;
  *(_BYTE *)(v10 + 368) = v5;
  *(_BYTE *)(v10 + 369) = 0;
  free((void *)v3);
}

BOOL DocumentUnderstanding_ClientInterface_FoundInEventResult.hasMovieNameError.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20))
     + 360;
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 9) & 1) == 0;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_FoundInEventResult.clearMovieNameError()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v2);
    swift_release();
  }
  v3 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v3 + 360) = 0;
  *(_WORD *)(v3 + 368) = 256;
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.movieName.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  if (*(_QWORD *)(v1 + 384))
    v2 = *(_QWORD *)(v1 + 376);
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_FoundInEventResult.movieName : DocumentUnderstanding_ClientInterface_FoundInEventResult@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  if (*(_QWORD *)(v3 + 384))
  {
    v4 = *(_QWORD *)(v3 + 376);
    v5 = *(_QWORD *)(v3 + 384);
  }
  else
  {
    v4 = 0;
    v5 = 0xE000000000000000;
  }
  *a2 = v4;
  a2[1] = v5;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_FoundInEventResult.movieName : DocumentUnderstanding_ClientInterface_FoundInEventResult(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(a2 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 376) = v4;
  *(_QWORD *)(v7 + 384) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.movieName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(v2 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 376) = a1;
  *(_QWORD *)(v7 + 384) = a2;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_ClientInterface_FoundInEventResult.movieName.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  if (*(_QWORD *)(v5 + 384))
  {
    v6 = *(_QWORD *)(v5 + 376);
    v7 = *(_QWORD *)(v5 + 384);
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  v3[9] = v6;
  v3[10] = v7;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_ClientInterface_FoundInEventResult.movieName.modify;
}

void DocumentUnderstanding_ClientInterface_FoundInEventResult.movieName.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
      swift_allocObject();
      v7 = swift_retain();
      *(_QWORD *)(v6 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v7);
      swift_release();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v8 + 376) = v3;
    *(_QWORD *)(v8 + 384) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = *(int *)(v2 + 96);
      v10 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
      swift_allocObject();
      v11 = swift_retain();
      *(_QWORD *)(v10 + v9) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v11);
      swift_release();
    }
    v12 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v12 + 376) = v3;
    *(_QWORD *)(v12 + 384) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

BOOL DocumentUnderstanding_ClientInterface_FoundInEventResult.hasMovieName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  return *(_QWORD *)(v1 + 384) != 0;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_FoundInEventResult.clearMovieName()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v2);
    swift_release();
  }
  v3 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v3 + 376) = 0;
  *(_QWORD *)(v3 + 384) = 0;
  swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.text.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  if (*(_QWORD *)(v1 + 400))
    v2 = *(_QWORD *)(v1 + 392);
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_FoundInEventResult.text : DocumentUnderstanding_ClientInterface_FoundInEventResult@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  if (*(_QWORD *)(v3 + 400))
  {
    v4 = *(_QWORD *)(v3 + 392);
    v5 = *(_QWORD *)(v3 + 400);
  }
  else
  {
    v4 = 0;
    v5 = 0xE000000000000000;
  }
  *a2 = v4;
  a2[1] = v5;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_FoundInEventResult.text : DocumentUnderstanding_ClientInterface_FoundInEventResult(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(a2 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 392) = v4;
  *(_QWORD *)(v7 + 400) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.text.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(v2 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 392) = a1;
  *(_QWORD *)(v7 + 400) = a2;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_ClientInterface_FoundInEventResult.text.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  if (*(_QWORD *)(v5 + 400))
  {
    v6 = *(_QWORD *)(v5 + 392);
    v7 = *(_QWORD *)(v5 + 400);
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  v3[9] = v6;
  v3[10] = v7;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_ClientInterface_FoundInEventResult.text.modify;
}

void DocumentUnderstanding_ClientInterface_FoundInEventResult.text.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
      swift_allocObject();
      v7 = swift_retain();
      *(_QWORD *)(v6 + v5) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v7);
      swift_release();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v8 + 392) = v3;
    *(_QWORD *)(v8 + 400) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = *(int *)(v2 + 96);
      v10 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
      swift_allocObject();
      v11 = swift_retain();
      *(_QWORD *)(v10 + v9) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v11);
      swift_release();
    }
    v12 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v12 + 392) = v3;
    *(_QWORD *)(v12 + 400) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

BOOL DocumentUnderstanding_ClientInterface_FoundInEventResult.hasText.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  return *(_QWORD *)(v1 + 400) != 0;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_FoundInEventResult.clearText()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v2);
    swift_release();
  }
  v3 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v3 + 392) = 0;
  *(_QWORD *)(v3 + 400) = 0;
  swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.tags.getter()
{
  type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0);
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_FoundInEventResult.tags : DocumentUnderstanding_ClientInterface_FoundInEventResult@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 408);
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_FoundInEventResult.tags : DocumentUnderstanding_ClientInterface_FoundInEventResult(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(a2 + v4) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  swift_beginAccess();
  *(_QWORD *)(v6 + 408) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.tags.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  swift_beginAccess();
  *(_QWORD *)(v5 + 408) = a1;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_ClientInterface_FoundInEventResult.tags.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v3[9] = *(_QWORD *)(v5 + 408);
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_ClientInterface_FoundInEventResult.tags.modify;
}

void DocumentUnderstanding_ClientInterface_FoundInEventResult.tags.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v4 = *(int *)(v2 + 88);
      v5 = *(_QWORD *)(v2 + 80);
      type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
      swift_allocObject();
      v6 = swift_retain();
      *(_QWORD *)(v5 + v4) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v6);
      swift_release();
    }
    v7 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess();
    *(_QWORD *)(v7 + 408) = v3;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v8 = *(int *)(v2 + 88);
      v9 = *(_QWORD *)(v2 + 80);
      type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
      swift_allocObject();
      v10 = swift_retain();
      *(_QWORD *)(v9 + v8) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v10);
      swift_release();
    }
    v11 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess();
    *(_QWORD *)(v11 + 408) = v3;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*DocumentUnderstanding_ClientInterface_FoundInEventResult.unknownFields.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError.init()()
{
  return 0;
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result < 3;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2;
  char v3;

  v2 = *result >= 3uLL;
  *(_QWORD *)a2 = *result;
  v3 = !v2;
  *(_BYTE *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError and conformance DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError();
  return Enum.hash(into:)();
}

uint64_t *DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError.allCases.unsafeMutableAddressor()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  return &static DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError.allCases;
}

uint64_t static DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError.allCases.getter()
{
  return static DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType.allCases.getter(_QWORD *a1)
{
  if (*a1 != -1)
    swift_once();
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError.allCases.setter(uint64_t a1)
{
  return static DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType.allCases.setter(a1, &one-time initialization token for allCases, &static DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError.allCases);
}

uint64_t static DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType.allCases.setter(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  if (*a2 != -1)
    swift_once();
  swift_beginAccess();
  *a3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  return DUCategoryResult.categoryConfidence.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType(&one-time initialization token for allCases, &static DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError.allCases, a1);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType@<X0>(_QWORD *a1@<X2>, _QWORD *a2@<X3>, _QWORD *a3@<X8>)
{
  if (*a1 != -1)
    swift_once();
  swift_beginAccess();
  *a3 = *a2;
  return swift_bridgeObjectRetain();
}

void *DocumentUnderstanding_ClientInterface_TaggedCharacterRange.protoMessageName.unsafeMutableAddressor()
{
  return &static DocumentUnderstanding_ClientInterface_TaggedCharacterRange.protoMessageName;
}

unint64_t static DocumentUnderstanding_ClientInterface_TaggedCharacterRange.protoMessageName.getter()
{
  return 0xD00000000000003CLL;
}

uint64_t DocumentUnderstanding_ClientInterface_TaggedCharacterRange._protobuf_nameMap.unsafeMutableAddressor()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DocumentUnderstanding_ClientInterface_TaggedCharacterRange._protobuf_nameMap);
}

uint64_t static DocumentUnderstanding_ClientInterface_TaggedCharacterRange._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static DocumentUnderstanding_ClientInterface_StructuredEntity._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DocumentUnderstanding_ClientInterface_TaggedCharacterRange._protobuf_nameMap, a1);
}

uint64_t DocumentUnderstanding_ClientInterface_TaggedCharacterRange.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType and conformance DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType();
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 2:
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedStringField(value:)();
          goto LABEL_5;
        case 3:
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedInt64Field(value:)();
          goto LABEL_5;
        case 4:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t DocumentUnderstanding_ClientInterface_TaggedCharacterRange.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  if (!*v0
    || (lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType and conformance DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType(),
        result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v1))
  {
    if (!*(_QWORD *)(v0[2] + 16)
      || (result = dispatch thunk of Visitor.visitRepeatedStringField(value:fieldNumber:)(), !v1))
    {
      if (!*(_QWORD *)(v0[3] + 16)
        || (result = dispatch thunk of Visitor.visitPackedInt64Field(value:fieldNumber:)(), !v1))
      {
        v3 = v0[5];
        v4 = HIBYTE(v3) & 0xF;
        if ((v3 & 0x2000000000000000) == 0)
          v4 = v0[4] & 0xFFFFFFFFFFFFLL;
        if (!v4 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
        {
          type metadata accessor for DocumentUnderstanding_ClientInterface_TaggedCharacterRange(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

Swift::Int DocumentUnderstanding_ClientInterface_TaggedCharacterRange.hashValue.getter()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.hashValue.getter(type metadata accessor for DocumentUnderstanding_ClientInterface_TaggedCharacterRange, &lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_TaggedCharacterRange and conformance DocumentUnderstanding_ClientInterface_TaggedCharacterRange, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_TaggedCharacterRange);
}

uint64_t protocol witness for Message.init() in conformance DocumentUnderstanding_ClientInterface_TaggedCharacterRange@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  v1 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a1 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a1 + 24) = v1;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0xE000000000000000;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance DocumentUnderstanding_ClientInterface_TaggedCharacterRange()
{
  return 0xD00000000000003CLL;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance DocumentUnderstanding_ClientInterface_TaggedCharacterRange@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 32);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance DocumentUnderstanding_ClientInterface_TaggedCharacterRange(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 32);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance DocumentUnderstanding_ClientInterface_TaggedCharacterRange())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance DocumentUnderstanding_ClientInterface_TaggedCharacterRange()
{
  return DocumentUnderstanding_ClientInterface_TaggedCharacterRange.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance DocumentUnderstanding_ClientInterface_TaggedCharacterRange()
{
  return DocumentUnderstanding_ClientInterface_TaggedCharacterRange.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance DocumentUnderstanding_ClientInterface_TaggedCharacterRange()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_TaggedCharacterRange and conformance DocumentUnderstanding_ClientInterface_TaggedCharacterRange, type metadata accessor for DocumentUnderstanding_ClientInterface_TaggedCharacterRange, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_TaggedCharacterRange);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DocumentUnderstanding_ClientInterface_TaggedCharacterRange@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DocumentUnderstanding_ClientInterface_TaggedCharacterRange._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DocumentUnderstanding_ClientInterface_TaggedCharacterRange()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_TaggedCharacterRange and conformance DocumentUnderstanding_ClientInterface_TaggedCharacterRange, type metadata accessor for DocumentUnderstanding_ClientInterface_TaggedCharacterRange, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_TaggedCharacterRange);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DocumentUnderstanding_ClientInterface_TaggedCharacterRange()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_TaggedCharacterRange and conformance DocumentUnderstanding_ClientInterface_TaggedCharacterRange, type metadata accessor for DocumentUnderstanding_ClientInterface_TaggedCharacterRange, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_TaggedCharacterRange);
  return Message.hash(into:)();
}

uint64_t DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType._protobuf_nameMap.unsafeMutableAddressor()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType._protobuf_nameMap);
}

uint64_t static DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static DocumentUnderstanding_ClientInterface_StructuredEntity._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType._protobuf_nameMap, a1);
}

void *DocumentUnderstanding_ClientInterface_FoundInEventResult.protoMessageName.unsafeMutableAddressor()
{
  return &static DocumentUnderstanding_ClientInterface_FoundInEventResult.protoMessageName;
}

unint64_t static DocumentUnderstanding_ClientInterface_FoundInEventResult.protoMessageName.getter()
{
  return 0xD00000000000003ALL;
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult._protobuf_nameMap.unsafeMutableAddressor()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DocumentUnderstanding_ClientInterface_FoundInEventResult._protobuf_nameMap);
}

uint64_t static DocumentUnderstanding_ClientInterface_FoundInEventResult._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static DocumentUnderstanding_ClientInterface_StructuredEntity._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DocumentUnderstanding_ClientInterface_FoundInEventResult._protobuf_nameMap, a1);
}

uint64_t type metadata accessor for DocumentUnderstanding_ClientInterface_TaggedCharacterRange(uint64_t a1)
{
  return type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(a1, (uint64_t *)&type metadata singleton initialization cache for DocumentUnderstanding_ClientInterface_TaggedCharacterRange);
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init()()
{
  uint64_t v0;
  uint64_t v1;

  *(_BYTE *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_WORD *)(v0 + 32) = 256;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 56) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  *(_WORD *)(v0 + 64) = 256;
  *(_QWORD *)(v0 + 80) = 0;
  *(_QWORD *)(v0 + 88) = 0;
  *(_QWORD *)(v0 + 72) = 0;
  *(_WORD *)(v0 + 96) = 256;
  *(_QWORD *)(v0 + 104) = 0;
  *(_QWORD *)(v0 + 112) = 0;
  v1 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 120) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(v0 + 128) = 0;
  *(_WORD *)(v0 + 136) = 256;
  *(_QWORD *)(v0 + 144) = 0;
  *(_QWORD *)(v0 + 152) = 0;
  *(_QWORD *)(v0 + 160) = specialized Dictionary.init(dictionaryLiteral:)(v1);
  *(_QWORD *)(v0 + 168) = 0;
  *(_WORD *)(v0 + 176) = 256;
  *(_QWORD *)(v0 + 192) = 0;
  *(_QWORD *)(v0 + 200) = 0;
  *(_QWORD *)(v0 + 184) = 0;
  *(_WORD *)(v0 + 208) = 256;
  *(_QWORD *)(v0 + 224) = 0;
  *(_QWORD *)(v0 + 232) = 0;
  *(_QWORD *)(v0 + 216) = 0;
  *(_WORD *)(v0 + 240) = 256;
  *(_QWORD *)(v0 + 256) = 0;
  *(_QWORD *)(v0 + 264) = 0;
  *(_QWORD *)(v0 + 248) = 0;
  *(_WORD *)(v0 + 272) = 256;
  *(_QWORD *)(v0 + 280) = 0;
  *(_QWORD *)(v0 + 288) = 0;
  *(_QWORD *)(v0 + 296) = 0;
  *(_WORD *)(v0 + 304) = 256;
  *(_QWORD *)(v0 + 312) = 0;
  *(_QWORD *)(v0 + 320) = 0;
  *(_QWORD *)(v0 + 328) = 0;
  *(_WORD *)(v0 + 336) = 256;
  *(_QWORD *)(v0 + 344) = 0;
  *(_QWORD *)(v0 + 352) = 0;
  *(_QWORD *)(v0 + 360) = 0;
  *(_WORD *)(v0 + 368) = 256;
  *(_OWORD *)(v0 + 376) = 0u;
  *(_OWORD *)(v0 + 392) = 0u;
  *(_QWORD *)(v0 + 408) = v1;
  return v0;
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v46;

  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_WORD *)(v1 + 32) = 256;
  v46 = (_BYTE *)(a1 + 273);
  *(_QWORD *)(v1 + 48) = 0;
  *(_WORD *)(v1 + 64) = 256;
  *(_QWORD *)(v1 + 56) = 0;
  *(_QWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 80) = 0;
  *(_WORD *)(v1 + 96) = 256;
  *(_QWORD *)(v1 + 88) = 0;
  *(_QWORD *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 112) = 0;
  *(_QWORD *)(v1 + 104) = 0;
  v3 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 120) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(v1 + 128) = 0;
  *(_WORD *)(v1 + 136) = 256;
  *(_QWORD *)(v1 + 152) = 0;
  *(_QWORD *)(v1 + 144) = 0;
  *(_QWORD *)(v1 + 160) = specialized Dictionary.init(dictionaryLiteral:)(v3);
  *(_QWORD *)(v1 + 168) = 0;
  *(_WORD *)(v1 + 176) = 256;
  *(_QWORD *)(v1 + 192) = 0;
  *(_QWORD *)(v1 + 200) = 0;
  *(_QWORD *)(v1 + 184) = 0;
  *(_WORD *)(v1 + 208) = 256;
  *(_QWORD *)(v1 + 224) = 0;
  *(_WORD *)(v1 + 240) = 256;
  *(_QWORD *)(v1 + 232) = 0;
  *(_QWORD *)(v1 + 216) = 0;
  *(_QWORD *)(v1 + 256) = 0;
  *(_QWORD *)(v1 + 264) = 0;
  *(_WORD *)(v1 + 272) = 256;
  *(_QWORD *)(v1 + 248) = 0;
  *(_QWORD *)(v1 + 280) = 0;
  *(_QWORD *)(v1 + 288) = 0;
  *(_QWORD *)(v1 + 296) = 0;
  *(_WORD *)(v1 + 304) = 256;
  *(_QWORD *)(v1 + 312) = 0;
  *(_QWORD *)(v1 + 320) = 0;
  *(_QWORD *)(v1 + 328) = 0;
  *(_WORD *)(v1 + 336) = 256;
  *(_QWORD *)(v1 + 344) = 0;
  *(_QWORD *)(v1 + 352) = 0;
  *(_QWORD *)(v1 + 360) = 0;
  *(_WORD *)(v1 + 368) = 256;
  *(_QWORD *)(v1 + 408) = v3;
  *(_OWORD *)(v1 + 376) = 0u;
  *(_OWORD *)(v1 + 392) = 0u;
  swift_beginAccess();
  LOBYTE(v3) = *(_BYTE *)(a1 + 16);
  swift_beginAccess();
  *(_BYTE *)(v1 + 16) = v3;
  swift_beginAccess();
  v4 = *(_QWORD *)(a1 + 24);
  LOBYTE(v3) = *(_BYTE *)(a1 + 32);
  v5 = *(_BYTE *)(a1 + 33);
  swift_beginAccess();
  *(_QWORD *)(v1 + 24) = v4;
  *(_BYTE *)(v1 + 32) = v3;
  *(_BYTE *)(v1 + 33) = v5;
  swift_beginAccess();
  v7 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  swift_beginAccess();
  *(_QWORD *)(v1 + 40) = v7;
  *(_QWORD *)(v1 + 48) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(_BYTE *)(a1 + 64);
  v10 = *(_BYTE *)(a1 + 65);
  swift_beginAccess();
  *(_QWORD *)(v1 + 56) = v8;
  *(_BYTE *)(v1 + 64) = v9;
  *(_BYTE *)(v1 + 65) = v10;
  swift_beginAccess();
  v12 = *(_QWORD *)(a1 + 72);
  v11 = *(_QWORD *)(a1 + 80);
  swift_beginAccess();
  *(_QWORD *)(v1 + 72) = v12;
  *(_QWORD *)(v1 + 80) = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v13 = *(_QWORD *)(a1 + 88);
  LOBYTE(v8) = *(_BYTE *)(a1 + 96);
  LOBYTE(v12) = *(_BYTE *)(a1 + 97);
  swift_beginAccess();
  *(_QWORD *)(v1 + 88) = v13;
  *(_BYTE *)(v1 + 96) = v8;
  *(_BYTE *)(v1 + 97) = v12;
  swift_beginAccess();
  v15 = *(_QWORD *)(a1 + 104);
  v14 = *(_QWORD *)(a1 + 112);
  swift_beginAccess();
  *(_QWORD *)(v1 + 104) = v15;
  *(_QWORD *)(v1 + 112) = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v16 = *(_QWORD *)(a1 + 120);
  swift_beginAccess();
  *(_QWORD *)(v1 + 120) = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v17 = *(_QWORD *)(a1 + 128);
  LOBYTE(v8) = *(_BYTE *)(a1 + 136);
  LOBYTE(v15) = *(_BYTE *)(a1 + 137);
  swift_beginAccess();
  *(_QWORD *)(v1 + 128) = v17;
  *(_BYTE *)(v1 + 136) = v8;
  *(_BYTE *)(v1 + 137) = v15;
  swift_beginAccess();
  v19 = *(_QWORD *)(a1 + 144);
  v18 = *(_QWORD *)(a1 + 152);
  swift_beginAccess();
  *(_QWORD *)(v1 + 144) = v19;
  *(_QWORD *)(v1 + 152) = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v20 = *(_QWORD *)(a1 + 160);
  swift_beginAccess();
  *(_QWORD *)(v1 + 160) = v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v21 = *(_QWORD *)(a1 + 168);
  LOBYTE(v8) = *(_BYTE *)(a1 + 176);
  LOBYTE(v19) = *(_BYTE *)(a1 + 177);
  swift_beginAccess();
  *(_QWORD *)(v1 + 168) = v21;
  *(_BYTE *)(v1 + 176) = v8;
  *(_BYTE *)(v1 + 177) = v19;
  swift_beginAccess();
  v23 = *(_QWORD *)(a1 + 184);
  v22 = *(_QWORD *)(a1 + 192);
  swift_beginAccess();
  *(_QWORD *)(v1 + 184) = v23;
  *(_QWORD *)(v1 + 192) = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v24 = *(_QWORD *)(a1 + 200);
  LOBYTE(v8) = *(_BYTE *)(a1 + 208);
  LOBYTE(v23) = *(_BYTE *)(a1 + 209);
  swift_beginAccess();
  *(_QWORD *)(v1 + 200) = v24;
  *(_BYTE *)(v1 + 208) = v8;
  *(_BYTE *)(v1 + 209) = v23;
  swift_beginAccess();
  v26 = *(_QWORD *)(a1 + 216);
  v25 = *(_QWORD *)(a1 + 224);
  swift_beginAccess();
  *(_QWORD *)(v1 + 216) = v26;
  *(_QWORD *)(v1 + 224) = v25;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v27 = *(_QWORD *)(a1 + 232);
  LOBYTE(v8) = *(_BYTE *)(a1 + 240);
  LOBYTE(v26) = *(_BYTE *)(a1 + 241);
  swift_beginAccess();
  *(_QWORD *)(v1 + 232) = v27;
  *(_BYTE *)(v1 + 240) = v8;
  *(_BYTE *)(v1 + 241) = v26;
  swift_beginAccess();
  v29 = *(_QWORD *)(a1 + 248);
  v28 = *(_QWORD *)(a1 + 256);
  swift_beginAccess();
  *(_QWORD *)(v1 + 248) = v29;
  *(_QWORD *)(v1 + 256) = v28;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v30 = *(_QWORD *)(a1 + 264);
  LOBYTE(v8) = *(_BYTE *)(a1 + 272);
  LOBYTE(v29) = *(_BYTE *)(a1 + 273);
  swift_beginAccess();
  *(_QWORD *)(v1 + 264) = v30;
  *(_BYTE *)(v1 + 272) = v8;
  *(_BYTE *)(v1 + 273) = v29;
  swift_beginAccess();
  v32 = *(_QWORD *)(a1 + 280);
  v31 = *(_QWORD *)(a1 + 288);
  swift_beginAccess();
  *(_QWORD *)(v1 + 280) = v32;
  *(_QWORD *)(v1 + 288) = v31;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v33 = *(_QWORD *)(a1 + 296);
  LOBYTE(v8) = *(_BYTE *)(a1 + 304);
  LOBYTE(v32) = v46[32];
  swift_beginAccess();
  *(_QWORD *)(v1 + 296) = v33;
  *(_BYTE *)(v1 + 304) = v8;
  *(_BYTE *)(v1 + 305) = v32;
  swift_beginAccess();
  v35 = *(_QWORD *)(a1 + 312);
  v34 = *(_QWORD *)(a1 + 320);
  swift_beginAccess();
  *(_QWORD *)(v1 + 312) = v35;
  *(_QWORD *)(v1 + 320) = v34;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v36 = *(_QWORD *)(a1 + 328);
  LOBYTE(v8) = *(_BYTE *)(a1 + 336);
  LOBYTE(v35) = v46[64];
  swift_beginAccess();
  *(_QWORD *)(v1 + 328) = v36;
  *(_BYTE *)(v1 + 336) = v8;
  *(_BYTE *)(v1 + 337) = v35;
  swift_beginAccess();
  v38 = *(_QWORD *)(a1 + 344);
  v37 = *(_QWORD *)(a1 + 352);
  swift_beginAccess();
  *(_QWORD *)(v1 + 344) = v38;
  *(_QWORD *)(v1 + 352) = v37;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v39 = *(_QWORD *)(a1 + 360);
  LOBYTE(v8) = *(_BYTE *)(a1 + 368);
  LOBYTE(v38) = v46[96];
  swift_beginAccess();
  *(_QWORD *)(v1 + 360) = v39;
  *(_BYTE *)(v1 + 368) = v8;
  *(_BYTE *)(v1 + 369) = v38;
  swift_beginAccess();
  v41 = *(_QWORD *)(a1 + 376);
  v40 = *(_QWORD *)(a1 + 384);
  swift_beginAccess();
  *(_QWORD *)(v1 + 376) = v41;
  *(_QWORD *)(v1 + 384) = v40;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v43 = *(_QWORD *)(a1 + 392);
  v42 = *(_QWORD *)(a1 + 400);
  swift_beginAccess();
  *(_QWORD *)(v1 + 392) = v43;
  *(_QWORD *)(v1 + 400) = v42;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v44 = *(_QWORD *)(a1 + 408);
  swift_bridgeObjectRetain();
  swift_release();
  swift_beginAccess();
  *(_QWORD *)(v1 + 408) = v44;
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.__deallocating_deinit()
{
  DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.deinit();
  return swift_deallocClassInstance();
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v2);
    swift_release();
  }
  swift_retain();
  closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)();
  return swift_release();
}

uint64_t closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          closure #1 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)();
          break;
        case 2:
          closure #2 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)();
          break;
        case 3:
          closure #3 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)();
          break;
        case 4:
          closure #4 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)();
          break;
        case 5:
          closure #4 in closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.decodeMessage<A>(decoder:)();
          break;
        case 6:
          closure #6 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)();
          break;
        case 7:
          closure #7 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)();
          break;
        case 8:
          closure #8 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)();
          break;
        case 9:
          closure #9 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)();
          break;
        case 10:
          closure #10 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)();
          break;
        case 11:
          closure #11 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)();
          break;
        case 12:
          closure #12 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)();
          break;
        case 13:
          closure #13 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)();
          break;
        case 14:
          closure #14 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)();
          break;
        case 15:
          closure #15 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)();
          break;
        case 16:
          closure #16 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)();
          break;
        case 17:
          closure #17 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)();
          break;
        case 18:
          closure #18 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)();
          break;
        case 19:
          closure #19 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)();
          break;
        case 20:
          closure #20 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)();
          break;
        case 21:
          closure #21 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)();
          break;
        case 22:
          closure #22 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)();
          break;
        case 23:
          closure #23 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)();
          break;
        case 24:
          closure #24 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)();
          break;
        case 25:
          closure #25 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)();
          break;
        case 26:
          closure #26 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)();
          break;
        case 27:
          closure #27 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBoolField(value:)();
  return swift_endAccess();
}

uint64_t closure #2 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError and conformance DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError();
  dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
  return swift_endAccess();
}

uint64_t closure #3 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #4 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError and conformance DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError();
  dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
  return swift_endAccess();
}

uint64_t closure #6 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError and conformance DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError();
  dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
  return swift_endAccess();
}

uint64_t closure #7 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #8 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  type metadata accessor for ProtobufString();
  dispatch thunk of Decoder.decodeMapField<A, B>(fieldType:value:)();
  return swift_endAccess();
}

uint64_t closure #9 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError and conformance DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError();
  dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
  return swift_endAccess();
}

uint64_t closure #10 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #11 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  type metadata accessor for ProtobufString();
  dispatch thunk of Decoder.decodeMapField<A, B>(fieldType:value:)();
  return swift_endAccess();
}

uint64_t closure #12 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError and conformance DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError();
  dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
  return swift_endAccess();
}

uint64_t closure #13 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #14 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError and conformance DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError();
  dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
  return swift_endAccess();
}

uint64_t closure #15 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #16 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError and conformance DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError();
  dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
  return swift_endAccess();
}

uint64_t closure #17 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #18 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError and conformance DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError();
  dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
  return swift_endAccess();
}

uint64_t closure #19 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #20 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError and conformance DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError();
  dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
  return swift_endAccess();
}

uint64_t closure #21 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #22 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError and conformance DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError();
  dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
  return swift_endAccess();
}

uint64_t closure #23 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #24 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError and conformance DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError();
  dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
  return swift_endAccess();
}

uint64_t closure #25 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #26 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #27 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  type metadata accessor for DocumentUnderstanding_ClientInterface_TaggedCharacterRange(0);
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_TaggedCharacterRange and conformance DocumentUnderstanding_ClientInterface_TaggedCharacterRange, type metadata accessor for DocumentUnderstanding_ClientInterface_TaggedCharacterRange, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_TaggedCharacterRange);
  dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
  return swift_endAccess();
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0);
  v1 = swift_retain();
  closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.traverse<A>(visitor:)(v1);
  result = swift_release();
  if (!v0)
    return UnknownStorage.traverse<A>(visitor:)();
  return result;
}

uint64_t closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  swift_beginAccess();
  if (*(_BYTE *)(a1 + 16) != 1
    || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
  {
    result = closure #1 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.traverse<A>(visitor:)(a1);
    if (!v1)
    {
      closure #2 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.traverse<A>(visitor:)(a1);
      closure #3 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.traverse<A>(visitor:)(a1);
      closure #4 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.traverse<A>(visitor:)(a1);
      closure #5 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.traverse<A>(visitor:)(a1);
      closure #6 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.traverse<A>(visitor:)(a1);
      swift_beginAccess();
      if (*(_QWORD *)(*(_QWORD *)(a1 + 120) + 16))
      {
        type metadata accessor for ProtobufString();
        swift_bridgeObjectRetain();
        dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)();
        swift_bridgeObjectRelease();
      }
      closure #7 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.traverse<A>(visitor:)(a1);
      closure #8 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.traverse<A>(visitor:)(a1);
      swift_beginAccess();
      if (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 16))
      {
        type metadata accessor for ProtobufString();
        swift_bridgeObjectRetain();
        dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)();
        swift_bridgeObjectRelease();
      }
      closure #9 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.traverse<A>(visitor:)(a1);
      closure #10 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.traverse<A>(visitor:)(a1);
      closure #11 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.traverse<A>(visitor:)(a1);
      closure #12 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.traverse<A>(visitor:)(a1);
      closure #13 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.traverse<A>(visitor:)(a1);
      closure #14 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.traverse<A>(visitor:)(a1);
      closure #15 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.traverse<A>(visitor:)(a1);
      closure #16 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.traverse<A>(visitor:)(a1);
      closure #17 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.traverse<A>(visitor:)(a1);
      closure #18 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.traverse<A>(visitor:)(a1);
      closure #19 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.traverse<A>(visitor:)(a1);
      closure #20 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.traverse<A>(visitor:)(a1);
      closure #21 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.traverse<A>(visitor:)(a1);
      closure #22 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.traverse<A>(visitor:)(a1);
      closure #23 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.traverse<A>(visitor:)(a1);
      result = swift_beginAccess();
      if (*(_QWORD *)(*(_QWORD *)(a1 + 408) + 16))
      {
        type metadata accessor for DocumentUnderstanding_ClientInterface_TaggedCharacterRange(0);
        lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_TaggedCharacterRange and conformance DocumentUnderstanding_ClientInterface_TaggedCharacterRange, type metadata accessor for DocumentUnderstanding_ClientInterface_TaggedCharacterRange, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_TaggedCharacterRange);
        swift_bridgeObjectRetain();
        dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
        return swift_bridgeObjectRelease();
      }
    }
  }
  return result;
}

uint64_t closure #1 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if ((*(_BYTE *)(a1 + 33) & 1) == 0)
  {
    lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError and conformance DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #2 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if (*(_QWORD *)(a1 + 48))
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #3 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if ((*(_BYTE *)(a1 + 65) & 1) == 0)
  {
    lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError and conformance DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #4 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if (*(_QWORD *)(a1 + 80))
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #5 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if ((*(_BYTE *)(a1 + 97) & 1) == 0)
  {
    lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError and conformance DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #6 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if (*(_QWORD *)(a1 + 112))
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #7 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if ((*(_BYTE *)(a1 + 137) & 1) == 0)
  {
    lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError and conformance DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #8 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if (*(_QWORD *)(a1 + 152))
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #9 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if ((*(_BYTE *)(a1 + 177) & 1) == 0)
  {
    lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError and conformance DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #10 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if (*(_QWORD *)(a1 + 192))
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #11 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if ((*(_BYTE *)(a1 + 209) & 1) == 0)
  {
    lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError and conformance DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #12 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if (*(_QWORD *)(a1 + 224))
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #13 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if ((*(_BYTE *)(a1 + 241) & 1) == 0)
  {
    lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError and conformance DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #14 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if (*(_QWORD *)(a1 + 256))
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #15 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 + 264;
  result = swift_beginAccess();
  if ((*(_BYTE *)(v1 + 9) & 1) == 0)
  {
    lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError and conformance DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #16 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if (*(_QWORD *)(a1 + 288))
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #17 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 + 296;
  result = swift_beginAccess();
  if ((*(_BYTE *)(v1 + 9) & 1) == 0)
  {
    lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError and conformance DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #18 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if (*(_QWORD *)(a1 + 320))
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #19 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 + 328;
  result = swift_beginAccess();
  if ((*(_BYTE *)(v1 + 9) & 1) == 0)
  {
    lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError and conformance DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #20 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if (*(_QWORD *)(a1 + 352))
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #21 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 + 360;
  result = swift_beginAccess();
  if ((*(_BYTE *)(v1 + 9) & 1) == 0)
  {
    lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError and conformance DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #22 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if (*(_QWORD *)(a1 + 384))
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #23 in closure #1 in DocumentUnderstanding_ClientInterface_FoundInEventResult.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if (*(_QWORD *)(a1 + 400))
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #1 in static DocumentUnderstanding_ClientInterface_FoundInEventResult.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v4;
  char v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  swift_beginAccess();
  v4 = *(unsigned __int8 *)(a1 + 16);
  swift_beginAccess();
  if (v4 != *(unsigned __int8 *)(a2 + 16))
    goto LABEL_2;
  swift_beginAccess();
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_BYTE *)(a1 + 33);
  swift_beginAccess();
  if ((v8 & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 33) & 1) == 0)
      goto LABEL_2;
  }
  else
  {
    if ((*(_BYTE *)(a2 + 33) & 1) != 0)
      goto LABEL_2;
    v12 = *(_QWORD *)(a2 + 24);
    if ((*(_BYTE *)(a2 + 32) & 1) != 0)
    {
      if (v12)
      {
        if (v12 == 1)
        {
          if (v7 != 1)
            goto LABEL_2;
        }
        else if (v7 != 2)
        {
          goto LABEL_2;
        }
      }
      else if (v7)
      {
        goto LABEL_2;
      }
    }
    else if (v7 != v12)
    {
      goto LABEL_2;
    }
  }
  swift_beginAccess();
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  swift_beginAccess();
  v11 = *(_QWORD *)(a2 + 48);
  if (v10)
  {
    if (!v11)
      goto LABEL_2;
    if (v9 != *(_QWORD *)(a2 + 40) || v10 != v11)
    {
      v5 = 0;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        return v5 & 1;
    }
  }
  else if (v11)
  {
    goto LABEL_2;
  }
  swift_beginAccess();
  v13 = *(_QWORD *)(a1 + 56);
  v14 = *(_BYTE *)(a1 + 65);
  swift_beginAccess();
  if ((v14 & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 65) & 1) == 0)
      goto LABEL_2;
  }
  else
  {
    if ((*(_BYTE *)(a2 + 65) & 1) != 0)
      goto LABEL_2;
    v18 = *(_QWORD *)(a2 + 56);
    if ((*(_BYTE *)(a2 + 64) & 1) != 0)
    {
      if (v18)
      {
        if (v18 == 1)
        {
          if (v13 != 1)
            goto LABEL_2;
        }
        else if (v13 != 2)
        {
          goto LABEL_2;
        }
      }
      else if (v13)
      {
        goto LABEL_2;
      }
    }
    else if (v13 != v18)
    {
      goto LABEL_2;
    }
  }
  swift_beginAccess();
  v15 = *(_QWORD *)(a1 + 72);
  v16 = *(_QWORD *)(a1 + 80);
  swift_beginAccess();
  v17 = *(_QWORD *)(a2 + 80);
  if (v16)
  {
    if (!v17)
      goto LABEL_2;
    if (v15 != *(_QWORD *)(a2 + 72) || v16 != v17)
    {
      v5 = 0;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        return v5 & 1;
    }
  }
  else if (v17)
  {
    goto LABEL_2;
  }
  swift_beginAccess();
  v19 = *(_QWORD *)(a1 + 88);
  v20 = *(_BYTE *)(a1 + 97);
  swift_beginAccess();
  if ((v20 & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 97) & 1) == 0)
      goto LABEL_2;
  }
  else
  {
    if ((*(_BYTE *)(a2 + 97) & 1) != 0)
      goto LABEL_2;
    v21 = *(_QWORD *)(a2 + 88);
    if ((*(_BYTE *)(a2 + 96) & 1) != 0)
    {
      if (v21)
      {
        if (v21 == 1)
        {
          if (v19 != 1)
            goto LABEL_2;
        }
        else if (v19 != 2)
        {
          goto LABEL_2;
        }
      }
      else if (v19)
      {
        goto LABEL_2;
      }
    }
    else if (v19 != v21)
    {
      goto LABEL_2;
    }
  }
  swift_beginAccess();
  v22 = *(_QWORD *)(a1 + 104);
  v23 = *(_QWORD *)(a1 + 112);
  swift_beginAccess();
  v24 = *(_QWORD *)(a2 + 112);
  if (!v23)
  {
    if (!v24)
      goto LABEL_67;
LABEL_2:
    v5 = 0;
    return v5 & 1;
  }
  if (!v24)
    goto LABEL_2;
  if (v22 == *(_QWORD *)(a2 + 104) && v23 == v24 || (v5 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
LABEL_67:
    swift_beginAccess();
    v25 = *(_QWORD *)(a1 + 120);
    swift_beginAccess();
    v26 = *(_QWORD *)(a2 + 120);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v27 = specialized static Dictionary<>.== infix(_:_:)(v25, v26);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v27 & 1) != 0)
    {
      swift_beginAccess();
      v28 = *(_QWORD *)(a1 + 128);
      v29 = *(_BYTE *)(a1 + 137);
      swift_beginAccess();
      if ((v29 & 1) != 0)
      {
        if ((*(_BYTE *)(a2 + 137) & 1) == 0)
          goto LABEL_244;
      }
      else
      {
        if ((*(_BYTE *)(a2 + 137) & 1) != 0)
          goto LABEL_244;
        v30 = *(_QWORD *)(a2 + 128);
        if ((*(_BYTE *)(a2 + 136) & 1) != 0)
        {
          if (v30)
          {
            if (v30 == 1)
            {
              if (v28 != 1)
                goto LABEL_244;
            }
            else if (v28 != 2)
            {
              goto LABEL_244;
            }
          }
          else if (v28)
          {
            goto LABEL_244;
          }
        }
        else if (v28 != v30)
        {
          goto LABEL_244;
        }
      }
      swift_beginAccess();
      v31 = *(_QWORD *)(a1 + 144);
      v32 = *(_QWORD *)(a1 + 152);
      swift_beginAccess();
      v33 = *(_QWORD *)(a2 + 152);
      if (v32)
      {
        if (!v33)
          goto LABEL_244;
        if (v31 != *(_QWORD *)(a2 + 144) || v32 != v33)
        {
          v5 = 0;
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            goto LABEL_245;
        }
      }
      else if (v33)
      {
        goto LABEL_244;
      }
      swift_beginAccess();
      v34 = *(_QWORD *)(a1 + 160);
      swift_beginAccess();
      v35 = *(_QWORD *)(a2 + 160);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v36 = specialized static Dictionary<>.== infix(_:_:)(v34, v35);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v36 & 1) != 0)
      {
        swift_beginAccess();
        v37 = *(_QWORD *)(a1 + 168);
        v38 = *(_BYTE *)(a1 + 177);
        swift_beginAccess();
        if ((v38 & 1) != 0)
        {
          if ((*(_BYTE *)(a2 + 177) & 1) == 0)
            goto LABEL_244;
        }
        else
        {
          if ((*(_BYTE *)(a2 + 177) & 1) != 0)
            goto LABEL_244;
          v39 = *(_QWORD *)(a2 + 168);
          if ((*(_BYTE *)(a2 + 176) & 1) != 0)
          {
            if (v39)
            {
              if (v39 == 1)
              {
                if (v37 != 1)
                  goto LABEL_244;
              }
              else if (v37 != 2)
              {
                goto LABEL_244;
              }
            }
            else if (v37)
            {
              goto LABEL_244;
            }
          }
          else if (v37 != v39)
          {
            goto LABEL_244;
          }
        }
        swift_beginAccess();
        v40 = *(_QWORD *)(a1 + 184);
        v41 = *(_QWORD *)(a1 + 192);
        swift_beginAccess();
        v42 = *(_QWORD *)(a2 + 192);
        if (v41)
        {
          if (!v42)
            goto LABEL_244;
          if (v40 != *(_QWORD *)(a2 + 184) || v41 != v42)
          {
            v5 = 0;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
              goto LABEL_245;
          }
        }
        else if (v42)
        {
          goto LABEL_244;
        }
        swift_beginAccess();
        v43 = *(_QWORD *)(a1 + 200);
        v44 = *(_BYTE *)(a1 + 209);
        swift_beginAccess();
        if ((v44 & 1) != 0)
        {
          if ((*(_BYTE *)(a2 + 209) & 1) == 0)
            goto LABEL_244;
        }
        else
        {
          if ((*(_BYTE *)(a2 + 209) & 1) != 0)
            goto LABEL_244;
          v48 = *(_QWORD *)(a2 + 200);
          if ((*(_BYTE *)(a2 + 208) & 1) != 0)
          {
            if (v48)
            {
              if (v48 == 1)
              {
                if (v43 != 1)
                  goto LABEL_244;
              }
              else if (v43 != 2)
              {
                goto LABEL_244;
              }
            }
            else if (v43)
            {
              goto LABEL_244;
            }
          }
          else if (v43 != v48)
          {
            goto LABEL_244;
          }
        }
        swift_beginAccess();
        v45 = *(_QWORD *)(a1 + 216);
        v46 = *(_QWORD *)(a1 + 224);
        swift_beginAccess();
        v47 = *(_QWORD *)(a2 + 224);
        if (v46)
        {
          if (!v47)
            goto LABEL_244;
          if (v45 != *(_QWORD *)(a2 + 216) || v46 != v47)
          {
            v5 = 0;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
              goto LABEL_245;
          }
        }
        else if (v47)
        {
          goto LABEL_244;
        }
        swift_beginAccess();
        v49 = *(_QWORD *)(a1 + 232);
        v50 = *(_BYTE *)(a1 + 241);
        swift_beginAccess();
        if ((v50 & 1) != 0)
        {
          if ((*(_BYTE *)(a2 + 241) & 1) == 0)
            goto LABEL_244;
        }
        else
        {
          if ((*(_BYTE *)(a2 + 241) & 1) != 0)
            goto LABEL_244;
          v54 = *(_QWORD *)(a2 + 232);
          if ((*(_BYTE *)(a2 + 240) & 1) != 0)
          {
            if (v54)
            {
              if (v54 == 1)
              {
                if (v49 != 1)
                  goto LABEL_244;
              }
              else if (v49 != 2)
              {
                goto LABEL_244;
              }
            }
            else if (v49)
            {
              goto LABEL_244;
            }
          }
          else if (v49 != v54)
          {
            goto LABEL_244;
          }
        }
        swift_beginAccess();
        v51 = *(_QWORD *)(a1 + 248);
        v52 = *(_QWORD *)(a1 + 256);
        swift_beginAccess();
        v53 = *(_QWORD *)(a2 + 256);
        if (v52)
        {
          if (!v53)
            goto LABEL_244;
          if (v51 != *(_QWORD *)(a2 + 248) || v52 != v53)
          {
            v5 = 0;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
              goto LABEL_245;
          }
        }
        else if (v53)
        {
          goto LABEL_244;
        }
        swift_beginAccess();
        v55 = *(_QWORD *)(a1 + 264);
        v56 = *(_BYTE *)(a1 + 273);
        swift_beginAccess();
        if ((v56 & 1) != 0)
        {
          if ((*(_BYTE *)(a2 + 273) & 1) == 0)
            goto LABEL_244;
        }
        else
        {
          if ((*(_BYTE *)(a2 + 273) & 1) != 0)
            goto LABEL_244;
          v57 = *(_QWORD *)(a2 + 264);
          if ((*(_BYTE *)(a2 + 272) & 1) != 0)
          {
            if (v57)
            {
              if (v57 == 1)
              {
                if (v55 != 1)
                  goto LABEL_244;
              }
              else if (v55 != 2)
              {
                goto LABEL_244;
              }
            }
            else if (v55)
            {
              goto LABEL_244;
            }
          }
          else if (v55 != v57)
          {
            goto LABEL_244;
          }
        }
        swift_beginAccess();
        v58 = *(_QWORD *)(a1 + 280);
        v59 = *(_QWORD *)(a1 + 288);
        swift_beginAccess();
        v60 = *(_QWORD *)(a2 + 288);
        if (v59)
        {
          if (!v60)
            goto LABEL_244;
          if (v58 != *(_QWORD *)(a2 + 280) || v59 != v60)
          {
            v5 = 0;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
              goto LABEL_245;
          }
        }
        else if (v60)
        {
          goto LABEL_244;
        }
        swift_beginAccess();
        v61 = *(_QWORD *)(a1 + 296);
        v62 = *(_BYTE *)(a1 + 305);
        swift_beginAccess();
        if ((v62 & 1) != 0)
        {
          if ((*(_BYTE *)(a2 + 305) & 1) == 0)
            goto LABEL_244;
        }
        else
        {
          if ((*(_BYTE *)(a2 + 305) & 1) != 0)
            goto LABEL_244;
          v63 = *(_QWORD *)(a2 + 296);
          if ((*(_BYTE *)(a2 + 304) & 1) != 0)
          {
            if (v63)
            {
              if (v63 == 1)
              {
                if (v61 != 1)
                  goto LABEL_244;
              }
              else if (v61 != 2)
              {
                goto LABEL_244;
              }
            }
            else if (v61)
            {
              goto LABEL_244;
            }
          }
          else if (v61 != v63)
          {
            goto LABEL_244;
          }
        }
        swift_beginAccess();
        v64 = *(_QWORD *)(a1 + 312);
        v65 = *(_QWORD *)(a1 + 320);
        swift_beginAccess();
        v66 = *(_QWORD *)(a2 + 320);
        if (v65)
        {
          if (!v66)
            goto LABEL_244;
          if (v64 != *(_QWORD *)(a2 + 312) || v65 != v66)
          {
            v5 = 0;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
              goto LABEL_245;
          }
        }
        else if (v66)
        {
          goto LABEL_244;
        }
        swift_beginAccess();
        v67 = *(_QWORD *)(a1 + 328);
        v68 = *(_BYTE *)(a1 + 337);
        swift_beginAccess();
        if ((v68 & 1) != 0)
        {
          if ((*(_BYTE *)(a2 + 337) & 1) == 0)
            goto LABEL_244;
        }
        else
        {
          if ((*(_BYTE *)(a2 + 337) & 1) != 0)
            goto LABEL_244;
          v69 = *(_QWORD *)(a2 + 328);
          if ((*(_BYTE *)(a2 + 336) & 1) != 0)
          {
            if (v69)
            {
              if (v69 == 1)
              {
                if (v67 != 1)
                  goto LABEL_244;
              }
              else if (v67 != 2)
              {
                goto LABEL_244;
              }
            }
            else if (v67)
            {
              goto LABEL_244;
            }
          }
          else if (v67 != v69)
          {
            goto LABEL_244;
          }
        }
        swift_beginAccess();
        v70 = *(_QWORD *)(a1 + 344);
        v71 = *(_QWORD *)(a1 + 352);
        swift_beginAccess();
        v72 = *(_QWORD *)(a2 + 352);
        if (v71)
        {
          if (!v72)
            goto LABEL_244;
          if (v70 != *(_QWORD *)(a2 + 344) || v71 != v72)
          {
            v5 = 0;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
              goto LABEL_245;
          }
        }
        else if (v72)
        {
          goto LABEL_244;
        }
        swift_beginAccess();
        v73 = *(_QWORD *)(a1 + 360);
        v74 = *(_BYTE *)(a1 + 369);
        swift_beginAccess();
        if ((v74 & 1) != 0)
        {
          if ((*(_BYTE *)(a2 + 369) & 1) == 0)
            goto LABEL_244;
        }
        else
        {
          if ((*(_BYTE *)(a2 + 369) & 1) != 0)
            goto LABEL_244;
          v78 = *(_QWORD *)(a2 + 360);
          if ((*(_BYTE *)(a2 + 368) & 1) != 0)
          {
            if (v78)
            {
              if (v78 == 1)
              {
                if (v73 != 1)
                  goto LABEL_244;
              }
              else if (v73 != 2)
              {
                goto LABEL_244;
              }
            }
            else if (v73)
            {
              goto LABEL_244;
            }
          }
          else if (v73 != v78)
          {
            goto LABEL_244;
          }
        }
        swift_beginAccess();
        v75 = *(_QWORD *)(a1 + 376);
        v76 = *(_QWORD *)(a1 + 384);
        swift_beginAccess();
        v77 = *(_QWORD *)(a2 + 384);
        if (v76)
        {
          if (!v77)
            goto LABEL_244;
          if (v75 != *(_QWORD *)(a2 + 376) || v76 != v77)
          {
            v5 = 0;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
              goto LABEL_245;
          }
        }
        else if (v77)
        {
          goto LABEL_244;
        }
        swift_beginAccess();
        v79 = *(_QWORD *)(a1 + 392);
        v80 = *(_QWORD *)(a1 + 400);
        swift_beginAccess();
        v81 = *(_QWORD *)(a2 + 400);
        if (v80)
        {
          if (v81)
          {
            if (v79 != *(_QWORD *)(a2 + 392) || v80 != v81)
            {
              v5 = 0;
              if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                goto LABEL_245;
            }
            goto LABEL_240;
          }
        }
        else if (!v81)
        {
LABEL_240:
          swift_beginAccess();
          v82 = *(_QWORD *)(a1 + 408);
          swift_beginAccess();
          v83 = *(_QWORD *)(a2 + 408);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v5 = specialized static Array<A>.== infix(_:_:)(v82, v83);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_245:
          swift_release();
          swift_release();
          return v5 & 1;
        }
      }
    }
LABEL_244:
    v5 = 0;
    goto LABEL_245;
  }
  return v5 & 1;
}

Swift::Int DocumentUnderstanding_ClientInterface_FoundInEventResult.hashValue.getter()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.hashValue.getter(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult, &lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_FoundInEventResult and conformance DocumentUnderstanding_ClientInterface_FoundInEventResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_FoundInEventResult);
}

uint64_t protocol witness for Message.init() in conformance DocumentUnderstanding_ClientInterface_FoundInEventResult@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  UnknownStorage.init()();
  v4 = *(int *)(a1 + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a2 + v4) = static DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.defaultInstance;
  return swift_retain();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance DocumentUnderstanding_ClientInterface_FoundInEventResult()
{
  return 0xD00000000000003ALL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance DocumentUnderstanding_ClientInterface_FoundInEventResult()
{
  return DocumentUnderstanding_ClientInterface_FoundInEventResult.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance DocumentUnderstanding_ClientInterface_FoundInEventResult()
{
  return DocumentUnderstanding_ClientInterface_FoundInEventResult.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance DocumentUnderstanding_ClientInterface_FoundInEventResult()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_FoundInEventResult and conformance DocumentUnderstanding_ClientInterface_FoundInEventResult, type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_FoundInEventResult);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DocumentUnderstanding_ClientInterface_FoundInEventResult@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DocumentUnderstanding_ClientInterface_FoundInEventResult._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DocumentUnderstanding_ClientInterface_FoundInEventResult()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_FoundInEventResult and conformance DocumentUnderstanding_ClientInterface_FoundInEventResult, type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_FoundInEventResult);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DocumentUnderstanding_ClientInterface_FoundInEventResult()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_FoundInEventResult and conformance DocumentUnderstanding_ClientInterface_FoundInEventResult, type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_FoundInEventResult);
  return Message.hash(into:)();
}

uint64_t DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError._protobuf_nameMap.unsafeMutableAddressor()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError._protobuf_nameMap);
}

uint64_t static DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static DocumentUnderstanding_ClientInterface_StructuredEntity._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError._protobuf_nameMap, a1);
}

uint64_t specialized static DocumentUnderstanding_ClientInterface_TaggedCharacterRange.== infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v18 - v9;
  v11 = *a2;
  if (*((_BYTE *)a2 + 8) == 1)
    __asm { BR              X11 }
  if (*(_QWORD *)a1 == v11
    && (specialized static Array<A>.== infix(_:_:)(*(_QWORD **)(a1 + 16), (_QWORD *)a2[2]) & 1) != 0
    && specialized static Array<A>.== infix(_:_:)(*(_QWORD **)(a1 + 24), (_QWORD *)a2[3]))
  {
    if (*(_QWORD *)(a1 + 32) == a2[4] && *(_QWORD *)(a1 + 40) == a2[5]
      || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      v13 = type metadata accessor for DocumentUnderstanding_ClientInterface_TaggedCharacterRange(0);
      v14 = a1 + *(int *)(v13 + 32);
      v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v15(v10, v14, v4);
      v15(v8, (uint64_t)a2 + *(int *)(v13 + 32), v4);
      lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      v16 = *(void (**)(char *, uint64_t))(v5 + 8);
      v16(v8, v4);
      v16(v10, v4);
    }
  }
  else
  {
    v12 = 0;
  }
  return v12 & 1;
}

uint64_t specialized static DocumentUnderstanding_ClientInterface_FoundInEventResult.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  void (*v15)(char *, uint64_t, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v19 - v9;
  v11 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20);
  v12 = *(_QWORD *)(a1 + v11);
  v13 = *(_QWORD *)(a2 + v11);
  if (v12 == v13
    || (swift_retain(),
        swift_retain(),
        v14 = closure #1 in static DocumentUnderstanding_ClientInterface_FoundInEventResult.== infix(_:_:)(v12, v13),
        swift_release(),
        swift_release(),
        (v14 & 1) != 0))
  {
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15(v10, a1, v4);
    v15(v8, a2, v4);
    lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v10, v4);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType and conformance DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType and conformance DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType;
  if (!lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType and conformance DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType, &type metadata for DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType and conformance DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType and conformance DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType;
  if (!lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType and conformance DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType, &type metadata for DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType and conformance DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType and conformance DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType;
  if (!lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType and conformance DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType, &type metadata for DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType and conformance DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType and conformance DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType;
  if (!lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType and conformance DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType, &type metadata for DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType and conformance DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType()
{
  return lazy protocol witness table accessor for type [DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType] and conformance [A](&lazy protocol witness table cache variable for type [DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType] and conformance [A], &demangling cache variable for type metadata for [DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType]);
}

unint64_t lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError and conformance DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError and conformance DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError;
  if (!lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError and conformance DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError, &type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError and conformance DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError and conformance DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError;
  if (!lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError and conformance DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError, &type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError and conformance DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError and conformance DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError;
  if (!lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError and conformance DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError, &type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError and conformance DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError and conformance DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError;
  if (!lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError and conformance DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError, &type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError and conformance DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError()
{
  return lazy protocol witness table accessor for type [DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType] and conformance [A](&lazy protocol witness table cache variable for type [DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError] and conformance [A], &demangling cache variable for type metadata for [DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError]);
}

uint64_t lazy protocol witness table accessor for type [DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x22E2B10E0](MEMORY[0x24BEE12E0], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in DocumentUnderstanding_ClientInterface_TaggedCharacterRange()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_TaggedCharacterRange and conformance DocumentUnderstanding_ClientInterface_TaggedCharacterRange, type metadata accessor for DocumentUnderstanding_ClientInterface_TaggedCharacterRange, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_TaggedCharacterRange);
}

uint64_t base witness table accessor for Message in DocumentUnderstanding_ClientInterface_TaggedCharacterRange()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_TaggedCharacterRange and conformance DocumentUnderstanding_ClientInterface_TaggedCharacterRange, type metadata accessor for DocumentUnderstanding_ClientInterface_TaggedCharacterRange, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_TaggedCharacterRange);
}

uint64_t base witness table accessor for Hashable in DocumentUnderstanding_ClientInterface_TaggedCharacterRange()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_TaggedCharacterRange and conformance DocumentUnderstanding_ClientInterface_TaggedCharacterRange, type metadata accessor for DocumentUnderstanding_ClientInterface_TaggedCharacterRange, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_TaggedCharacterRange);
}

uint64_t base witness table accessor for Equatable in DocumentUnderstanding_ClientInterface_TaggedCharacterRange()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_TaggedCharacterRange and conformance DocumentUnderstanding_ClientInterface_TaggedCharacterRange, type metadata accessor for DocumentUnderstanding_ClientInterface_TaggedCharacterRange, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_TaggedCharacterRange);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in DocumentUnderstanding_ClientInterface_FoundInEventResult()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_FoundInEventResult and conformance DocumentUnderstanding_ClientInterface_FoundInEventResult, type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_FoundInEventResult);
}

uint64_t base witness table accessor for Message in DocumentUnderstanding_ClientInterface_FoundInEventResult()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_FoundInEventResult and conformance DocumentUnderstanding_ClientInterface_FoundInEventResult, type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_FoundInEventResult);
}

uint64_t base witness table accessor for Hashable in DocumentUnderstanding_ClientInterface_FoundInEventResult()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_FoundInEventResult and conformance DocumentUnderstanding_ClientInterface_FoundInEventResult, type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_FoundInEventResult);
}

uint64_t base witness table accessor for Equatable in DocumentUnderstanding_ClientInterface_FoundInEventResult()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_FoundInEventResult and conformance DocumentUnderstanding_ClientInterface_FoundInEventResult, type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_FoundInEventResult);
}

uint64_t sub_22840AA0C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 16);
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for DocumentUnderstanding_ClientInterface_TaggedCharacterRange(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v5 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v5;
    v6 = a2[5];
    v7 = *(int *)(a3 + 32);
    v8 = (uint64_t)a2 + v7;
    v9 = a1 + v7;
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v6;
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v9, v8, v10);
  }
  return v3;
}

uint64_t destroy for DocumentUnderstanding_ClientInterface_TaggedCharacterRange(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 32);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for DocumentUnderstanding_ClientInterface_TaggedCharacterRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(int *)(a3 + 32);
  v7 = a2 + v6;
  v8 = a1 + v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v8, v7, v9);
  return a1;
}

uint64_t assignWithCopy for DocumentUnderstanding_ClientInterface_TaggedCharacterRange(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 16) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_QWORD *)(a1 + 40) = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 32);
  v8 = a1 + v7;
  v9 = (uint64_t)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for DocumentUnderstanding_ClientInterface_TaggedCharacterRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  v5 = *(int *)(a3 + 32);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for DocumentUnderstanding_ClientInterface_TaggedCharacterRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 32);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for DocumentUnderstanding_ClientInterface_TaggedCharacterRange()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_22840AEC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for DocumentUnderstanding_ClientInterface_TaggedCharacterRange()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_22840AF50(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for DocumentUnderstanding_ClientInterface_TaggedCharacterRange()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType()
{
  return &type metadata for DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType;
}

uint64_t getEnumTagSinglePayload for DocumentUnderstanding_ClientInterface_FoundInEventResult()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_22840B06C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for DocumentUnderstanding_ClientInterface_FoundInEventResult()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_22840B0F4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

ValueMetadata *type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError()
{
  return &type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError;
}

uint64_t Dutool_TopicVectorEntry.title.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for Dutool_TopicVectorEntry() + 24));
  if (v1[1])
    v2 = *v1;
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t type metadata accessor for Dutool_TopicVectorEntry()
{
  uint64_t result;

  result = type metadata singleton initialization cache for Dutool_TopicVectorEntry;
  if (!type metadata singleton initialization cache for Dutool_TopicVectorEntry)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t key path getter for Dutool_TopicVectorEntry.title : Dutool_TopicVectorEntry@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for Dutool_TopicVectorEntry() + 24));
  v4 = v3[1];
  if (v4)
  {
    v5 = *v3;
    v6 = v4;
  }
  else
  {
    v5 = 0;
    v6 = 0xE000000000000000;
  }
  *a2 = v5;
  a2[1] = v6;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for Dutool_TopicVectorEntry.title : Dutool_TopicVectorEntry(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;

  v3 = *a1;
  v2 = a1[1];
  v4 = (_QWORD *)(a2 + *(int *)(type metadata accessor for Dutool_TopicVectorEntry() + 24));
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *v4 = v3;
  v4[1] = v2;
  return result;
}

uint64_t Dutool_TopicVectorEntry.title.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for Dutool_TopicVectorEntry() + 24));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*Dutool_TopicVectorEntry.title.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for Dutool_TopicVectorEntry() + 24);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_ClientInterface_StructuredEntityLabel.labelName.modify;
}

BOOL Dutool_TopicVectorEntry.hasTitle.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for Dutool_TopicVectorEntry() + 24) + 8) != 0;
}

Swift::Void __swiftcall Dutool_TopicVectorEntry.clearTitle()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(v0 + *(int *)(type metadata accessor for Dutool_TopicVectorEntry() + 24));
  swift_bridgeObjectRelease();
  *v1 = 0;
  v1[1] = 0;
}

uint64_t Dutool_TopicVectorEntry.qid.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for Dutool_TopicVectorEntry() + 28));
  if (v1[1])
    v2 = *v1;
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for Dutool_TopicVectorEntry.qid : Dutool_TopicVectorEntry@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for Dutool_TopicVectorEntry() + 28));
  v4 = v3[1];
  if (v4)
  {
    v5 = *v3;
    v6 = v4;
  }
  else
  {
    v5 = 0;
    v6 = 0xE000000000000000;
  }
  *a2 = v5;
  a2[1] = v6;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for Dutool_TopicVectorEntry.qid : Dutool_TopicVectorEntry(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;

  v3 = *a1;
  v2 = a1[1];
  v4 = (_QWORD *)(a2 + *(int *)(type metadata accessor for Dutool_TopicVectorEntry() + 28));
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *v4 = v3;
  v4[1] = v2;
  return result;
}

uint64_t Dutool_TopicVectorEntry.qid.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for Dutool_TopicVectorEntry() + 28));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*Dutool_TopicVectorEntry.qid.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for Dutool_TopicVectorEntry() + 28);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_ClientInterface_StructuredEntityLabel.labelName.modify;
}

BOOL Dutool_TopicVectorEntry.hasQid.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for Dutool_TopicVectorEntry() + 28) + 8) != 0;
}

Swift::Void __swiftcall Dutool_TopicVectorEntry.clearQid()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(v0 + *(int *)(type metadata accessor for Dutool_TopicVectorEntry() + 28));
  swift_bridgeObjectRelease();
  *v1 = 0;
  v1[1] = 0;
}

uint64_t Dutool_TopicVectorEntry.vector.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Dutool_TopicVectorEntry.vector.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*Dutool_TopicVectorEntry.vector.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t Dutool_TopicVectorEntry.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for Dutool_TopicVectorEntry() + 20);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t Dutool_TopicVectorEntry.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for Dutool_TopicVectorEntry() + 20);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*Dutool_TopicVectorEntry.unknownFields.modify())(_QWORD)
{
  type metadata accessor for Dutool_TopicVectorEntry();
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t Dutool_TopicVectorEntry.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  _QWORD *v5;

  *a1 = MEMORY[0x24BEE4AF8];
  v2 = type metadata accessor for Dutool_TopicVectorEntry();
  result = UnknownStorage.init()();
  v4 = (_QWORD *)((char *)a1 + *(int *)(v2 + 24));
  *v4 = 0;
  v4[1] = 0;
  v5 = (_QWORD *)((char *)a1 + *(int *)(v2 + 28));
  *v5 = 0;
  v5[1] = 0;
  return result;
}

void *Dutool_TopicVectorEntry.protoMessageName.unsafeMutableAddressor()
{
  return &static Dutool_TopicVectorEntry.protoMessageName;
}

unint64_t static Dutool_TopicVectorEntry.protoMessageName.getter()
{
  return 0xD000000000000017;
}

uint64_t Dutool_TopicVectorEntry._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static Dutool_TopicVectorEntry._protobuf_nameMap);
}

uint64_t static Dutool_TopicVectorEntry._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v2 = type metadata accessor for _NameMap();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static Dutool_TopicVectorEntry._protobuf_nameMap);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t Dutool_TopicVectorEntry.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 3)
    {
      dispatch thunk of Decoder.decodeRepeatedFloatField(value:)();
    }
    else if (result == 2 || result == 1)
    {
      type metadata accessor for Dutool_TopicVectorEntry();
      dispatch thunk of Decoder.decodeSingularStringField(value:)();
    }
    v0 = 0;
  }
  return result;
}

uint64_t Dutool_TopicVectorEntry.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  result = closure #1 in Dutool_TopicVectorEntry.traverse<A>(visitor:)(v0);
  if (!v1)
  {
    closure #2 in Dutool_TopicVectorEntry.traverse<A>(visitor:)(v0);
    if (*(_QWORD *)(*(_QWORD *)v0 + 16))
      dispatch thunk of Visitor.visitPackedFloatField(value:fieldNumber:)();
    type metadata accessor for Dutool_TopicVectorEntry();
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in Dutool_TopicVectorEntry.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for Dutool_TopicVectorEntry();
  if (*(_QWORD *)(a1 + *(int *)(result + 24) + 8))
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  return result;
}

uint64_t closure #2 in Dutool_TopicVectorEntry.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for Dutool_TopicVectorEntry();
  if (*(_QWORD *)(a1 + *(int *)(result + 28) + 8))
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  return result;
}

Swift::Int Dutool_TopicVectorEntry.hashValue.getter()
{
  Hasher.init(_seed:)();
  type metadata accessor for Dutool_TopicVectorEntry();
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type Dutool_TopicVectorEntry and conformance Dutool_TopicVectorEntry, (uint64_t (*)(uint64_t))type metadata accessor for Dutool_TopicVectorEntry, (uint64_t)&protocol conformance descriptor for Dutool_TopicVectorEntry);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Message.init() in conformance Dutool_TopicVectorEntry@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  *a2 = MEMORY[0x24BEE4AF8];
  result = UnknownStorage.init()();
  v5 = *(int *)(a1 + 28);
  v6 = (_QWORD *)((char *)a2 + *(int *)(a1 + 24));
  *v6 = 0;
  v6[1] = 0;
  v7 = (_QWORD *)((char *)a2 + v5);
  *v7 = 0;
  v7[1] = 0;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance Dutool_TopicVectorEntry()
{
  return 0xD000000000000017;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance Dutool_TopicVectorEntry()
{
  return Dutool_TopicVectorEntry.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance Dutool_TopicVectorEntry()
{
  return Dutool_TopicVectorEntry.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance Dutool_TopicVectorEntry()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type Dutool_TopicVectorEntry and conformance Dutool_TopicVectorEntry, (uint64_t (*)(uint64_t))type metadata accessor for Dutool_TopicVectorEntry, (uint64_t)&protocol conformance descriptor for Dutool_TopicVectorEntry);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Dutool_TopicVectorEntry@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v2 = type metadata accessor for _NameMap();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static Dutool_TopicVectorEntry._protobuf_nameMap);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Dutool_TopicVectorEntry()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type Dutool_TopicVectorEntry and conformance Dutool_TopicVectorEntry, (uint64_t (*)(uint64_t))type metadata accessor for Dutool_TopicVectorEntry, (uint64_t)&protocol conformance descriptor for Dutool_TopicVectorEntry);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Dutool_TopicVectorEntry()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type Dutool_TopicVectorEntry and conformance Dutool_TopicVectorEntry, (uint64_t (*)(uint64_t))type metadata accessor for Dutool_TopicVectorEntry, (uint64_t)&protocol conformance descriptor for Dutool_TopicVectorEntry);
  return Message.hash(into:)();
}

uint64_t specialized static Dutool_TopicVectorEntry.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v25;
  void (*v26)(char *, char *, uint64_t);
  void (*v27)(char *, uint64_t);
  uint64_t v29;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v29 - v9;
  v11 = (int *)type metadata accessor for Dutool_TopicVectorEntry();
  v12 = v11[6];
  v13 = (uint64_t *)((char *)a1 + v12);
  v14 = *(uint64_t *)((char *)a1 + v12 + 8);
  v15 = (uint64_t *)((char *)a2 + v12);
  v16 = v15[1];
  if (!v14)
  {
    if (v16)
      goto LABEL_21;
    goto LABEL_10;
  }
  if (!v16)
    goto LABEL_21;
  v17 = *v13 == *v15 && v14 == v16;
  if (v17 || (v18 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
LABEL_10:
    v19 = v11[7];
    v20 = (uint64_t *)((char *)a1 + v19);
    v21 = *(uint64_t *)((char *)a1 + v19 + 8);
    v22 = (uint64_t *)((char *)a2 + v19);
    v23 = v22[1];
    if (v21)
    {
      if (!v23)
        goto LABEL_21;
      if (*v20 != *v22 || v21 != v23)
      {
        v18 = 0;
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          return v18 & 1;
      }
    }
    else if (v23)
    {
      goto LABEL_21;
    }
    if (specialized static Array<A>.== infix(_:_:)(*a1, *a2))
    {
      v25 = (char *)a1 + v11[5];
      v26 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v26(v10, v25, v4);
      v26(v8, (char *)a2 + v11[5], v4);
      lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v18 = dispatch thunk of static Equatable.== infix(_:_:)();
      v27 = *(void (**)(char *, uint64_t))(v5 + 8);
      v27(v8, v4);
      v27(v10, v4);
      return v18 & 1;
    }
LABEL_21:
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in Dutool_TopicVectorEntry()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type Dutool_TopicVectorEntry and conformance Dutool_TopicVectorEntry, (uint64_t (*)(uint64_t))type metadata accessor for Dutool_TopicVectorEntry, (uint64_t)&protocol conformance descriptor for Dutool_TopicVectorEntry);
}

uint64_t base witness table accessor for Message in Dutool_TopicVectorEntry()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type Dutool_TopicVectorEntry and conformance Dutool_TopicVectorEntry, (uint64_t (*)(uint64_t))type metadata accessor for Dutool_TopicVectorEntry, (uint64_t)&protocol conformance descriptor for Dutool_TopicVectorEntry);
}

uint64_t base witness table accessor for Hashable in Dutool_TopicVectorEntry()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type Dutool_TopicVectorEntry and conformance Dutool_TopicVectorEntry, (uint64_t (*)(uint64_t))type metadata accessor for Dutool_TopicVectorEntry, (uint64_t)&protocol conformance descriptor for Dutool_TopicVectorEntry);
}

uint64_t base witness table accessor for Equatable in Dutool_TopicVectorEntry()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type Dutool_TopicVectorEntry and conformance Dutool_TopicVectorEntry, (uint64_t (*)(uint64_t))type metadata accessor for Dutool_TopicVectorEntry, (uint64_t)&protocol conformance descriptor for Dutool_TopicVectorEntry);
}

uint64_t *initializeBufferWithCopyOfBuffer for Dutool_TopicVectorEntry(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = a3[7];
    v15 = (uint64_t *)((char *)v7 + v13);
    v16 = (uint64_t *)((char *)a2 + v13);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    v18 = (uint64_t *)((char *)v7 + v14);
    v19 = (uint64_t *)((char *)a2 + v14);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t destroy for Dutool_TopicVectorEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for Dutool_TopicVectorEntry(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = a3[7];
  v13 = (_QWORD *)((char *)a1 + v11);
  v14 = (_QWORD *)((char *)a2 + v11);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = (_QWORD *)((char *)a1 + v12);
  v17 = (_QWORD *)((char *)a2 + v12);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Dutool_TopicVectorEntry(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[6];
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = a3[7];
  v14 = (_QWORD *)((char *)a1 + v13);
  v15 = (_QWORD *)((char *)a2 + v13);
  *v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *initializeWithTake for Dutool_TopicVectorEntry(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  return a1;
}

_QWORD *assignWithTake for Dutool_TopicVectorEntry(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[6];
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  v14 = *v12;
  v13 = v12[1];
  *v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease();
  v15 = a3[7];
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  v19 = *v17;
  v18 = v17[1];
  *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Dutool_TopicVectorEntry()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_22840C538(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for Dutool_TopicVectorEntry()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_22840C5C0(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for Dutool_TopicVectorEntry()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t DUDataDetectors.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t DUDataDetectors.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t DUDataDetectors.processCalendarResult(ddScannerResult:resultString:dateReceived:)@<X0>(BOOL *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  id v43;
  void *v44;
  id v45;
  void *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  void (*v51)(char *, char *, uint64_t);
  unsigned int (*v52)(char *, uint64_t, uint64_t);
  BOOL *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t result;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  void (*v75)(unint64_t, _QWORD, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char *v81;
  char v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  id v97;
  void *v98;
  _QWORD *v99;
  void (*v100)(char *, char *, uint64_t);
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  Class isa;
  void (*v106)(char *, uint64_t);
  char *v107;
  uint64_t v108;
  Class v109;
  Class v110;
  id v111;
  objc_class *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  void (*v116)(char *, uint64_t, uint64_t);
  int v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  BOOL *v128;
  uint64_t v129;
  uint64_t v130;
  BOOL *v131;
  void (*v132)(BOOL *, uint64_t, uint64_t, uint64_t);
  uint64_t v133;
  id v134;
  void *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  void (*v139)(char *, uint64_t, uint64_t);
  int v140;
  char *v141;
  char *v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  id v149;
  void *v150;
  char *v151;
  uint64_t v152;
  char v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  void (*v161)(unint64_t, _QWORD, uint64_t);
  void (*v162)(char *, uint64_t);
  uint64_t v163;
  uint64_t v164;
  char v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t (*v168)(uint64_t, uint64_t, uint64_t);
  void (*v169)(char *, uint64_t, uint64_t);
  uint64_t v170;
  uint64_t v171;
  char *v172;
  _QWORD *v173;
  void (*v174)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v175;
  id v176;
  int v177;
  char *v178;
  char *v179;
  char *v180;
  char *v181;
  char *v182;
  uint64_t v183;
  char *v184;
  char *v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  BOOL *v189;
  BOOL *v190;
  char *v191;
  BOOL *v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  char *v196;
  char *v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  Class v201;
  char v202;
  uint64_t v203;

  v200 = a3;
  v203 = *MEMORY[0x24BDAC8D0];
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v182 = (char *)&v167 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v190 = (BOOL *)&v167 - v8;
  v9 = type metadata accessor for CalendarEvent(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v189 = (BOOL *)&v167 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DateComponents();
  v194 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v180 = (char *)&v167 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v198 = (char *)&v167 - v15;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v178 = (char *)&v167 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v185 = (char *)&v167 - v19;
  v193 = type metadata accessor for TimeZone();
  v20 = *(_QWORD **)(v193 - 8);
  v21 = MEMORY[0x24BDAC7A8](v193);
  v191 = (char *)&v167 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v181 = (char *)&v167 - v23;
  v24 = type metadata accessor for Calendar();
  v187 = *(_QWORD *)(v24 - 8);
  v188 = v24;
  MEMORY[0x24BDAC7A8](v24);
  v197 = (char *)&v167 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v27 = MEMORY[0x24BDAC7A8](v26);
  v186 = (char *)&v167 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x24BDAC7A8](v27);
  v31 = (char *)&v167 - v30;
  MEMORY[0x24BDAC7A8](v29);
  v33 = (char *)&v167 - v32;
  v34 = type metadata accessor for Date();
  v199 = *(_QWORD *)(v34 - 8);
  v35 = MEMORY[0x24BDAC7A8](v34);
  v184 = (char *)&v167 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = MEMORY[0x24BDAC7A8](v35);
  v179 = (char *)&v167 - v38;
  v39 = MEMORY[0x24BDAC7A8](v37);
  v195 = (char *)&v167 - v40;
  MEMORY[0x24BDAC7A8](v39);
  v196 = (char *)&v167 - v41;
  v42 = objc_allocWithZone(MEMORY[0x24BDC6CB8]);
  v192 = a1;
  v43 = objc_msgSend(v42, sel_initWithDDScannerResult_, a1);
  if (!v43)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v200, 1, 1, v9);
  v183 = v12;
  v44 = v43;
  v45 = objc_msgSend(v43, sel_startDate);
  if (!v45)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v199 + 56))(v33, 1, 1, v34);
    goto LABEL_10;
  }
  v46 = v45;
  v173 = v20;
  v172 = v31;
  v47 = a2;
  v48 = v195;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v49 = v199;
  v50 = v48;
  v51 = *(void (**)(char *, char *, uint64_t))(v199 + 32);
  v51(v33, v50, v34);
  v174 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v49 + 56);
  v174(v33, 0, 1, v34);
  v52 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48);
  if (v52(v33, 1, v34) == 1)
  {
LABEL_10:

    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v33, &demangling cache variable for type metadata for Date?);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v200, 1, 1, v9);
  }
  v168 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v52;
  v170 = v10;
  v171 = v9;
  v169 = (void (*)(char *, uint64_t, uint64_t))v51;
  v51(v196, v33, v34);
  v53 = v192;
  v54 = objc_msgSend(v192, sel_type);
  v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v57 = v56;

  DUDataDetectors.getAllSubresultTypes(ddScannerResult:)(v53);
  v59 = v58;
  result = *MEMORY[0x24BE2B228];
  if (!*MEMORY[0x24BE2B228])
  {
    __break(1u);
    goto LABEL_89;
  }
  v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v167 = v47;
  v176 = v44;
  v175 = v34;
  if (v55 != v61 || v57 != v62)
  {
    v64 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v63 = v191;
    if ((v64 & 1) != 0)
    {
LABEL_13:
      v177 = 1;
      goto LABEL_19;
    }
    result = *MEMORY[0x24BE2B1E0];
    if (!*MEMORY[0x24BE2B1E0])
    {
LABEL_90:
      __break(1u);
LABEL_91:
      __break(1u);
LABEL_92:
      __break(1u);
      goto LABEL_93;
    }
    if (v55 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v57 != v65)
    {
      v153 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v153 & 1) != 0)
        goto LABEL_13;
      result = *MEMORY[0x24BE2B220];
      if (!*MEMORY[0x24BE2B220])
      {
LABEL_93:
        __break(1u);
        return result;
      }
      if (v55 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v57 != v154)
      {
        v177 = _stringCompareWithSmolCheck(_:_:expecting:)();
        goto LABEL_18;
      }
    }
    v177 = 1;
    goto LABEL_18;
  }
  v177 = 1;
  v63 = v191;
LABEL_18:
  swift_bridgeObjectRelease();
LABEL_19:
  result = *MEMORY[0x24BE2B1D8];
  if (!*MEMORY[0x24BE2B1D8])
  {
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
  if (v55 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v57 == v66)
    goto LABEL_22;
  v67 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v67 & 1) != 0)
    goto LABEL_24;
  result = *MEMORY[0x24BE2B1E0];
  if (!*MEMORY[0x24BE2B1E0])
    goto LABEL_91;
  if (v55 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v57 == v124)
  {
LABEL_22:
    swift_bridgeObjectRelease();
LABEL_24:
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
  v125 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v125 & 1) != 0)
    goto LABEL_24;
  result = *MEMORY[0x24BE2B1D0];
  if (!*MEMORY[0x24BE2B1D0])
    goto LABEL_92;
  if (v55 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v57 == v126)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v165 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v166 = v170;
    if ((v165 & 1) == 0)
    {
      if ((v177 & 1) == 0)
      {
        (*(void (**)(char *, uint64_t))(v199 + 8))(v196, v175);
        swift_bridgeObjectRelease();

        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v166 + 56))(v200, 1, 1, v171);
      }
      v68 = 0;
      goto LABEL_26;
    }
  }
LABEL_25:
  v68 = 1;
  if ((v177 & 1) == 0)
  {
    v76 = MEMORY[0x24BEE4B08];
    goto LABEL_28;
  }
LABEL_26:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>);
  v69 = type metadata accessor for Calendar.Component();
  v70 = *(_QWORD *)(v69 - 8);
  v71 = *(_QWORD *)(v70 + 72);
  v72 = (*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80);
  v73 = swift_allocObject();
  *(_OWORD *)(v73 + 16) = xmmword_2284C25C0;
  v74 = v73 + v72;
  v75 = *(void (**)(unint64_t, _QWORD, uint64_t))(v70 + 104);
  v75(v74, *MEMORY[0x24BDCF230], v69);
  v75(v74 + v71, *MEMORY[0x24BDCF258], v69);
  v75(v74 + 2 * v71, *MEMORY[0x24BDCF260], v69);
  v76 = specialized Set.init(_nonEmptyArrayLiteral:)(v73);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
LABEL_28:
  if ((specialized Sequence<>.contains(_:)(0x65626D754E796144, 0xE900000000000072, v59) & 1) != 0
    || (specialized Sequence<>.contains(_:)(0x6D754E68746E6F4DLL, 0xEB00000000726562, v59) & 1) != 0
    || (specialized Sequence<>.contains(_:)(0x626D754E72616559, 0xEA00000000007265, v59) & 1) != 0)
  {
    if ((specialized Sequence<>.contains(_:)(0x65626D754E796144, 0xE900000000000072, v59) & 1) != 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>);
      v77 = type metadata accessor for Calendar.Component();
      v78 = *(_QWORD *)(v77 - 8);
      v79 = (*(unsigned __int8 *)(v78 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80);
      v80 = swift_allocObject();
      *(_OWORD *)(v80 + 16) = xmmword_2284C1EE0;
      (*(void (**)(unint64_t, _QWORD, uint64_t))(v78 + 104))(v80 + v79, *MEMORY[0x24BDCF220], v77);
      v76 = specialized Set.union<A>(_:)(v80, v76);
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
    }
    v81 = v63;
    v82 = specialized Sequence<>.contains(_:)(0x6D754E68746E6F4DLL, 0xEB00000000726562, v59);
    v83 = v177;
    if ((v82 & 1) != 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>);
      v84 = type metadata accessor for Calendar.Component();
      v85 = *(_QWORD *)(v84 - 8);
      v86 = (*(unsigned __int8 *)(v85 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80);
      v87 = swift_allocObject();
      *(_OWORD *)(v87 + 16) = xmmword_2284C1EE0;
      (*(void (**)(unint64_t, _QWORD, uint64_t))(v85 + 104))(v87 + v86, *MEMORY[0x24BDCF250], v84);
      v76 = specialized Set.union<A>(_:)(v87, v76);
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
    }
    if ((specialized Sequence<>.contains(_:)(0x626D754E72616559, 0xEA00000000007265, v59) & 1) != 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>);
      v88 = type metadata accessor for Calendar.Component();
      v89 = *(_QWORD *)(v88 - 8);
      v90 = (*(unsigned __int8 *)(v89 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v89 + 80);
      v91 = swift_allocObject();
      *(_OWORD *)(v91 + 16) = xmmword_2284C1EE0;
      (*(void (**)(unint64_t, _QWORD, uint64_t))(v89 + 104))(v91 + v90, *MEMORY[0x24BDCF240], v88);
      v76 = specialized Set.union<A>(_:)(v91, v76);
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
    }
    if ((specialized Sequence<>.contains(_:)(0x626D754E72616559, 0xEA00000000007265, v59) & 1) != 0
      && (specialized Sequence<>.contains(_:)(0x6D754E68746E6F4DLL, 0xEB00000000726562, v59) & 1) != 0)
    {
      v92 = specialized Sequence<>.contains(_:)(0x65626D754E796144, 0xE900000000000072, v59);
    }
    else
    {
      v92 = 0;
    }
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>);
    v93 = type metadata accessor for Calendar.Component();
    v94 = *(_QWORD *)(v93 - 8);
    v95 = (*(unsigned __int8 *)(v94 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80);
    v96 = swift_allocObject();
    *(_OWORD *)(v96 + 16) = xmmword_2284C1EE0;
    (*(void (**)(unint64_t, _QWORD, uint64_t))(v94 + 104))(v96 + v95, *MEMORY[0x24BDCF240], v93);
    specialized Set.union<A>(_:)(v96, v76);
    swift_setDeallocating();
    swift_arrayDestroy();
    goto LABEL_42;
  }
  swift_bridgeObjectRelease();
  if (v68)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>);
    v155 = type metadata accessor for Calendar.Component();
    v156 = *(_QWORD *)(v155 - 8);
    v157 = *(_QWORD *)(v156 + 72);
    v158 = (*(unsigned __int8 *)(v156 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v156 + 80);
    v159 = swift_allocObject();
    *(_OWORD *)(v159 + 16) = xmmword_2284C25C0;
    v160 = v159 + v158;
    v161 = *(void (**)(unint64_t, _QWORD, uint64_t))(v156 + 104);
    v161(v160, *MEMORY[0x24BDCF240], v155);
    v161(v160 + v157, *MEMORY[0x24BDCF250], v155);
    v161(v160 + 2 * v157, *MEMORY[0x24BDCF220], v155);
    specialized Set.union<A>(_:)(v159, v76);
    swift_setDeallocating();
    swift_arrayDestroy();
    v92 = 0;
    v81 = v63;
    v83 = v177;
LABEL_42:
    swift_deallocClassInstance();
    goto LABEL_43;
  }
  v92 = 0;
  v81 = v63;
  v83 = v177;
LABEL_43:
  static Calendar.current.getter();
  v97 = objc_msgSend(v176, sel_startTimeZone, v167);
  if (!v97)
  {
    v103 = v81;
    v101 = (uint64_t)v185;
    v191 = (char *)v173[7];
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v191)(v185, 1, 1, v193);
    goto LABEL_47;
  }
  v98 = v97;
  static TimeZone._unconditionallyBridgeFromObjectiveC(_:)();

  v99 = v173;
  v100 = (void (*)(char *, char *, uint64_t))v173[4];
  v101 = (uint64_t)v185;
  v102 = v193;
  v100(v185, v81, v193);
  v191 = (char *)v99[7];
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v191)(v101, 0, 1, v102);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v99[6])(v101, 1, v102) == 1)
  {
    v103 = v81;
LABEL_47:
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v101, &demangling cache variable for type metadata for TimeZone?);
    goto LABEL_49;
  }
  v177 = v83;
  v104 = v181;
  v100(v181, (char *)v101, v102);
  ((void (*)(char *, char *, uint64_t))v99[2])(v81, v104, v102);
  v103 = v81;
  Calendar.timeZone.setter();
  v83 = v177;
  ((void (*)(char *, uint64_t))v99[1])(v104, v102);
LABEL_49:
  Calendar.dateComponents(_:from:)();
  if ((v92 & 1) != 0)
    goto LABEL_64;
  v177 = v83;
  Calendar.timeZone.getter();
  isa = TimeZone._bridgeToObjectiveC()().super.isa;
  v106 = (void (*)(char *, uint64_t))v173[1];
  v107 = v103;
  v108 = v193;
  v106(v103, v193);
  v202 = 0;
  v109 = Date._bridgeToObjectiveC()().super.isa;
  Calendar.timeZone.getter();
  v110 = TimeZone._bridgeToObjectiveC()().super.isa;
  v106(v107, v108);
  v201 = isa;
  v111 = objc_msgSend(v192, sel_dateFromReferenceDate_referenceTimezone_timezoneRef_allDayRef_, v109, v110, &v201, &v202);

  v112 = v201;
  if (!v111)
  {
    v114 = (uint64_t)v172;
    v174(v172, 1, 1, v175);
    goto LABEL_62;
  }
  v113 = v195;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v114 = (uint64_t)v172;
  v115 = v175;
  v116 = v169;
  v169(v172, (uint64_t)v113, v175);
  v174((char *)v114, 0, 1, v115);
  v117 = v168(v114, 1, v115);
  v118 = v194;
  if (v117 == 1)
  {
LABEL_62:
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v114, &demangling cache variable for type metadata for Date?);
    goto LABEL_63;
  }
  v119 = v179;
  v120 = v175;
  v116(v179, v114, v175);
  v121 = v180;
  Calendar.dateComponents(_:from:)();
  (*(void (**)(char *, uint64_t))(v199 + 8))(v119, v120);
  v122 = v198;
  v123 = v183;
  (*(void (**)(char *, uint64_t))(v118 + 8))(v198, v183);
  (*(void (**)(char *, char *, uint64_t))(v118 + 32))(v122, v121, v123);
LABEL_63:

  LOBYTE(v83) = v177;
LABEL_64:
  v127 = v171;
  v128 = v189;
  v129 = v194;
  v130 = v183;
  (*(void (**)(BOOL *, char *, uint64_t))(v194 + 16))(&v189[*(int *)(v171 + 20)], v198, v183);
  v131 = &v128[*(int *)(v127 + 24)];
  v132 = *(void (**)(BOOL *, uint64_t, uint64_t, uint64_t))(v129 + 56);
  v132(v131, 1, 1, v130);
  *v128 = (v83 & 1) == 0;
  v133 = (uint64_t)v190;
  v132(v190, 1, 1, v130);
  v134 = objc_msgSend(v176, sel_endDate);
  if (v134)
  {
    v135 = v134;
    v192 = v131;
    v136 = v195;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v137 = (uint64_t)v186;
    v138 = v175;
    v139 = v169;
    v169(v186, (uint64_t)v136, v175);
    v174((char *)v137, 0, 1, v138);
    v140 = v168(v137, 1, v138);
    v141 = v197;
    if (v140 != 1)
    {
      v142 = v184;
      v139(v184, v137, v175);
      v143 = (uint64_t)v182;
      Calendar.dateComponents(_:from:)();
      swift_bridgeObjectRelease();
      v144 = v141;
      v145 = v183;
      v132((BOOL *)v143, 0, 1, v183);
      outlined assign with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v143, v133, &demangling cache variable for type metadata for DateComponents?);
      v146 = v194;
      v147 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v194 + 48))(v133, 1, v145);
      v148 = (uint64_t)v192;
      if (!v147)
      {
        v149 = objc_msgSend(v176, sel_endTimeZone);
        if (v149)
        {
          v150 = v149;
          v151 = v178;
          static TimeZone._unconditionallyBridgeFromObjectiveC(_:)();

          v152 = 0;
        }
        else
        {
          v152 = 1;
          v151 = v178;
        }
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v191)(v151, v152, 1, v193);
        DateComponents.timeZone.setter();
        v145 = v183;
        v142 = v184;
        v146 = v194;
        v144 = v197;
      }

      v162 = *(void (**)(char *, uint64_t))(v199 + 8);
      v163 = v175;
      v162(v142, v175);
      (*(void (**)(char *, uint64_t))(v146 + 8))(v198, v145);
      (*(void (**)(char *, uint64_t))(v187 + 8))(v144, v188);
      v162(v196, v163);
      outlined assign with copy of DateComponents?(v133, v148);
      v127 = v171;
      goto LABEL_82;
    }
  }
  else
  {
    v137 = (uint64_t)v186;
    v174(v186, 1, 1, v175);
    v141 = v197;
  }
  swift_bridgeObjectRelease();

  (*(void (**)(char *, uint64_t))(v194 + 8))(v198, v183);
  (*(void (**)(char *, uint64_t))(v187 + 8))(v141, v188);
  (*(void (**)(char *, uint64_t))(v199 + 8))(v196, v175);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v137, &demangling cache variable for type metadata for Date?);
LABEL_82:
  v164 = v200;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v128, v200, type metadata accessor for CalendarEvent);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v170 + 56))(v164, 0, 1, v127);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v133, &demangling cache variable for type metadata for DateComponents?);
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v128, type metadata accessor for CalendarEvent);
}

void DUDataDetectors.getAllSubresultTypes(ddScannerResult:)(void *a1)
{
  id v1;
  void *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;

  v17 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v1 = objc_msgSend(a1, sel_subResults);
  if (!v1)
    return;
  v2 = v1;
  type metadata accessor for DDScannerResult();
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v3 >> 62))
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v4)
      goto LABEL_4;
LABEL_16:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  v4 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v4)
    goto LABEL_16;
LABEL_4:
  if (v4 < 1)
  {
    __break(1u);
  }
  else
  {
    v5 = 0;
    do
    {
      if ((v3 & 0xC000000000000001) != 0)
        v6 = (id)MEMORY[0x22E2AFF34](v5, v3);
      else
        v6 = *(id *)(v3 + 8 * v5 + 32);
      v7 = v6;
      v8 = objc_msgSend(v6, sel_type);
      v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v11 = v10;

      v12 = v17;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
      v14 = v12[2];
      v13 = v12[3];
      if (v14 >= v13 >> 1)
        v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, v12);
      ++v5;
      v12[2] = v14 + 1;
      v15 = &v12[2 * v14];
      v15[4] = v9;
      v15[5] = v11;
      v17 = v12;
      v16 = DUDataDetectors.getAllSubresultTypes(ddScannerResult:)(v7);
      specialized Array.append<A>(contentsOf:)(v16);

    }
    while (v4 != v5);
    swift_bridgeObjectRelease();
  }
}

uint64_t DUDataDetectors.prepareForResultType(ddScannerResult:ddMatch:resultString:dateReceived:)@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t, uint64_t);
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v30;
  char *v31;
  char *v32;
  id v33;
  id v34;
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v48;
  uint64_t v49;
  void *v50;
  id v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  void *v62;
  uint64_t v63;
  void *v64;
  id v65;
  id v66;
  uint64_t v67;
  uint64_t *v68;
  char v69;
  void *v70;
  uint64_t v71;
  void *v72;
  id v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  void *v79;
  uint64_t v80;
  void *v81;
  id v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  id v88;
  uint64_t v89;
  uint64_t *v90;
  char v91;
  void *v92;
  uint64_t v93;
  void *v94;
  id v95;
  id v96;
  uint64_t v97;
  void (*v98)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t *v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t *v106;
  char *v107;
  void *v108;
  char *v109;
  uint64_t v110;
  void (*v111)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  id v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  Swift::String v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;

  v117 = a5;
  v122 = a3;
  v123 = a4;
  v108 = a2;
  v120 = a6;
  v121 = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v6);
  v101 = (char *)&v98 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CalendarEvent?);
  MEMORY[0x24BDAC7A8](v8);
  v116 = (uint64_t)&v98 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = type metadata accessor for CalendarEvent(0);
  v115 = *(_QWORD *)(v118 - 8);
  MEMORY[0x24BDAC7A8](v118);
  v113 = (uint64_t)&v98 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (int *)type metadata accessor for FoundInEventDataDetectorsOutput();
  v119 = *((_QWORD *)v11 - 1);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v98 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DateComponents();
  v110 = *(_QWORD *)(v14 - 8);
  v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v110 + 56);
  v15(v13, 1, 1, v14);
  v16 = &v13[v11[5]];
  v17 = type metadata accessor for TimeZone();
  v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v18(v16, 1, 1, v17);
  v109 = &v13[v11[6]];
  v111 = v15;
  v112 = v14;
  ((void (*)(void))v15)();
  v18(&v13[v11[7]], 1, 1, v17);
  v19 = v11[8];
  v13[v19] = 0;
  v20 = &v13[v11[9]];
  *(_QWORD *)v20 = 0;
  *((_QWORD *)v20 + 1) = 0;
  v106 = (uint64_t *)v20;
  v21 = &v13[v11[10]];
  *(_QWORD *)v21 = 0;
  *((_QWORD *)v21 + 1) = 0;
  v107 = v21;
  v22 = &v13[v11[11]];
  *(_QWORD *)v22 = 0;
  *((_QWORD *)v22 + 1) = 0;
  v102 = (uint64_t *)v22;
  v23 = &v13[v11[12]];
  *(_QWORD *)v23 = 0;
  *((_QWORD *)v23 + 1) = 0;
  v103 = v23;
  v24 = &v13[v11[13]];
  *(_QWORD *)v24 = 0;
  *((_QWORD *)v24 + 1) = 0;
  v105 = v24;
  v25 = &v13[v11[14]];
  *(_QWORD *)v25 = 0;
  *((_QWORD *)v25 + 1) = 0;
  v26 = &v13[v11[15]];
  *(_QWORD *)v26 = 0;
  *((_QWORD *)v26 + 1) = 0;
  v104 = v26;
  v27 = (uint64_t)&v13[v11[16]];
  v28 = type metadata accessor for URL();
  v29 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56);
  v100 = v27;
  v99 = v28;
  v98 = v29;
  ((void (*)(uint64_t, uint64_t, uint64_t))v29)(v27, 1, 1);
  v114 = v11[17];
  *(_QWORD *)&v13[v114] = 0;
  v30 = &v13[v11[18]];
  v31 = &v13[v11[19]];
  v32 = &v13[v11[20]];
  v33 = v121;
  v34 = objc_msgSend(v121, sel_type);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  v35 = String.lowercased()();
  swift_bridgeObjectRelease();
  v36 = v123;
  *(_QWORD *)v30 = v122;
  *((_QWORD *)v30 + 1) = v36;
  swift_bridgeObjectRetain();
  *(_QWORD *)v31 = objc_msgSend(v33, sel_range);
  v31[8] = 0;
  objc_msgSend(v33, sel_range);
  *(_QWORD *)v32 = v37;
  v32[8] = 0;
  v126 = v35;
  v124 = 0x73736572646461;
  v125 = 0xE700000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  if ((StringProtocol.contains<A>(_:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v13[v19] = 4;
    v38 = specialized DUDataDetectors.processAddressComponents(ddScannerResult:resultString:)((uint64_t)v33);
    if (v38)
    {
      *(_QWORD *)&v13[v114] = v38;
LABEL_10:
      v44 = v119;
      v43 = v120;
      goto LABEL_11;
    }
  }
  else
  {
    v39 = v19;
    v126 = v35;
    v124 = 1702125924;
    v125 = 0xE400000000000000;
    if ((StringProtocol.contains<A>(_:)() & 1) == 0)
    {
      v126 = v35;
      v124 = 1701669236;
      v125 = 0xE400000000000000;
      if ((StringProtocol.contains<A>(_:)() & 1) == 0)
      {
        v126 = v35;
        v124 = 0x676E696B63617274;
        v125 = 0xE800000000000000;
        if ((StringProtocol.contains<A>(_:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          objc_opt_self();
          v48 = v108;
          v49 = swift_dynamicCastObjCClass();
          v44 = v119;
          v43 = v120;
          if (!v49)
            goto LABEL_11;
          v50 = (void *)v49;
          v13[v39] = 10;
          v51 = v48;
          v52 = objc_msgSend(v50, sel_trackingNumber);
          v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v55 = v54;

          v56 = v106;
          *v106 = v53;
          v56[1] = v55;
          v57 = objc_msgSend(v50, sel_carrier);
          v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v60 = v59;

          v61 = &v130;
        }
        else
        {
          v126 = v35;
          v124 = 0x656E6F6870;
          v125 = 0xE500000000000000;
          if ((StringProtocol.contains<A>(_:)() & 1) == 0)
          {
            v126 = v35;
            v124 = 0x6C69616D65;
            v125 = 0xE500000000000000;
            v69 = StringProtocol.contains<A>(_:)();
            v44 = v119;
            v43 = v120;
            if ((v69 & 1) != 0)
            {
              swift_bridgeObjectRelease();
              objc_opt_self();
              v70 = v108;
              v71 = swift_dynamicCastObjCClass();
              if (!v71)
                goto LABEL_11;
              v72 = (void *)v71;
              v13[v39] = 8;
              v73 = v70;
              v74 = objc_msgSend(v72, sel_emailAddress);
              v75 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              v77 = v76;

              v78 = &v128;
            }
            else
            {
              v126 = v35;
              v124 = 0x746867696C66;
              v125 = 0xE600000000000000;
              if ((StringProtocol.contains<A>(_:)() & 1) == 0)
              {
                v126 = v35;
                v124 = 7107189;
                v125 = 0xE300000000000000;
                v91 = StringProtocol.contains<A>(_:)();
                swift_bridgeObjectRelease();
                if ((v91 & 1) == 0)
                {
                  v42 = 1;
                  goto LABEL_12;
                }
                objc_opt_self();
                v92 = v108;
                v93 = swift_dynamicCastObjCClass();
                if (v93)
                {
                  v94 = (void *)v93;
                  v13[v39] = 3;
                  v95 = v92;
                  v96 = objc_msgSend(v94, sel_URL);
                  v97 = (uint64_t)v101;
                  static URL._unconditionallyBridgeFromObjectiveC(_:)();

                  v98(v97, 0, 1, v99);
                  outlined assign with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v97, v100, &demangling cache variable for type metadata for URL?);
                }
                goto LABEL_11;
              }
              swift_bridgeObjectRelease();
              objc_opt_self();
              v79 = v108;
              v80 = swift_dynamicCastObjCClass();
              if (!v80)
              {
LABEL_11:
                outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v13, v43, (uint64_t (*)(_QWORD))type metadata accessor for FoundInEventDataDetectorsOutput);
                v42 = 0;
                goto LABEL_12;
              }
              v81 = (void *)v80;
              v13[v39] = 9;
              v82 = v79;
              v83 = objc_msgSend(v81, sel_flightNumber);
              v84 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              v86 = v85;

              v87 = v102;
              *v102 = v84;
              v87[1] = v86;
              v88 = objc_msgSend(v81, sel_airline);
              v75 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              v77 = v89;

              v78 = &v127;
            }
            v90 = (uint64_t *)*(v78 - 32);
            *v90 = v75;
            v90[1] = v77;
            goto LABEL_11;
          }
          swift_bridgeObjectRelease();
          objc_opt_self();
          v62 = v108;
          v63 = swift_dynamicCastObjCClass();
          v44 = v119;
          v43 = v120;
          if (!v63)
            goto LABEL_11;
          v64 = (void *)v63;
          v13[v39] = 2;
          v65 = v62;
          v66 = objc_msgSend(v64, sel_phoneNumber);
          v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v60 = v67;

          v61 = &v129;
        }
        v68 = (uint64_t *)*(v61 - 32);
        *v68 = v58;
        v68[1] = v60;
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease();
    v13[v19] = 5;
    v40 = v116;
    DUDataDetectors.processCalendarResult(ddScannerResult:resultString:dateReceived:)((BOOL *)v33, v117, v116);
    v41 = v118;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v115 + 48))(v40, 1, v118) != 1)
    {
      v45 = v113;
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v40, v113, type metadata accessor for CalendarEvent);
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v13, &demangling cache variable for type metadata for DateComponents?);
      v46 = v112;
      (*(void (**)(char *, uint64_t, uint64_t))(v110 + 32))(v13, v45 + *(int *)(v41 + 20), v112);
      v111(v13, 0, 1, v46);
      outlined assign with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v45 + *(int *)(v41 + 24), (uint64_t)v109, &demangling cache variable for type metadata for DateComponents?);
      goto LABEL_10;
    }
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v40, &demangling cache variable for type metadata for CalendarEvent?);
  }
  v42 = 1;
  v44 = v119;
  v43 = v120;
LABEL_12:
  (*(void (**)(uint64_t, uint64_t, uint64_t, int *))(v44 + 56))(v43, v42, 1, v11);
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for FoundInEventDataDetectorsOutput);
}

unint64_t DUDataDetectors.getDataDetectorsForPlainText(docText:dateReceieved:)(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();
  void *v12;
  void *v13;
  uint64_t v14;
  id v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)();
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v36;
  uint64_t (*v37)();
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;

  v40 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FoundInEventDataDetectorsOutput?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for FoundInEventDataDetectorsOutput();
  v44 = *(_QWORD *)(v39 - 8);
  v8 = MEMORY[0x24BDAC7A8](v39);
  v42 = (uint64_t)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v41 = (uint64_t)&v36 - v10;
  v11 = (uint64_t (*)())objc_msgSend(objc_allocWithZone(MEMORY[0x24BE2B378]), sel_initWithScannerType_passiveIntent_, 0, 1);
  v12 = (void *)objc_opt_self();
  v13 = (void *)MEMORY[0x22E2AF8EC](a1, a2);
  swift_bridgeObjectRetain();
  v43 = a1;
  v14 = String.UTF16View.count.getter();
  v46 = a2;
  swift_bridgeObjectRelease();
  v15 = objc_msgSend(v12, sel_scanString_range_configuration_, v13, 0, v14, v11);

  type metadata accessor for DDScannerResult();
  v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v16 >> 62)
    goto LABEL_22;
  v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v17)
  {
    v37 = v11;
    v38 = v7;
    v45 = v16 & 0xC000000000000001;
    v47 = MEMORY[0x24BEE4AF8];
    v18 = 4;
    v7 = v43;
    while (1)
    {
      v19 = v45 ? (id)MEMORY[0x22E2AFF34](v18 - 4, v16) : *(id *)(v16 + 8 * v18);
      v20 = v19;
      v21 = v18 - 3;
      if (__OFADD__(v18 - 4, 1))
        break;
      objc_msgSend(v19, sel_urlificationRange);
      Range<>.init(_:in:)();
      if ((v22 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return 0;
      }
      v23 = v16;
      v24 = String.subscript.getter();
      v25 = MEMORY[0x22E2AF988](v24);
      v11 = v26;
      swift_bridgeObjectRelease();
      v27 = specialized DUDataDetectors.useDataDetectorsForType(ddScannerResult:)(v20);
      if (v27)
      {
        v28 = v27;
        v29 = (uint64_t)v38;
        DUDataDetectors.prepareForResultType(ddScannerResult:ddMatch:resultString:dateReceived:)(v20, v27, v25, (uint64_t)v11, v40, (uint64_t)v38);
        swift_bridgeObjectRelease();
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v29, 1, v39) == 1)
        {

          outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v29, &demangling cache variable for type metadata for FoundInEventDataDetectorsOutput?);
          v7 = v43;
        }
        else
        {
          v30 = v29;
          v31 = v41;
          outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v30, v41, (uint64_t (*)(_QWORD))type metadata accessor for FoundInEventDataDetectorsOutput);
          outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v31, v42, (uint64_t (*)(_QWORD))type metadata accessor for FoundInEventDataDetectorsOutput);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v47 + 16) + 1, 1, v47);
          v7 = v43;
          v33 = *(_QWORD *)(v47 + 16);
          v32 = *(_QWORD *)(v47 + 24);
          if (v33 >= v32 >> 1)
            v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1, v47);
          v34 = v47;
          *(_QWORD *)(v47 + 16) = v33 + 1;
          v11 = type metadata accessor for FoundInEventDataDetectorsOutput;
          outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v42, v34+ ((*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80))+ *(_QWORD *)(v44 + 72) * v33, (uint64_t (*)(_QWORD))type metadata accessor for FoundInEventDataDetectorsOutput);

          outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v41, (uint64_t (*)(_QWORD))type metadata accessor for FoundInEventDataDetectorsOutput);
        }
      }
      else
      {

        swift_bridgeObjectRelease();
      }
      v16 = v23;
      ++v18;
      if (v21 == v17)
      {

        swift_bridgeObjectRelease();
        return v47;
      }
    }
    __break(1u);
LABEL_22:
    swift_bridgeObjectRetain();
    v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
  return MEMORY[0x24BEE4AF8];
}

uint64_t DUDataDetectors.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t DUDataDetectors.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DUDataDetectors()
{
  return objc_opt_self();
}

id specialized DUDataDetectors.useDataDetectorsForType(ddScannerResult:)(void *a1)
{
  id v2;
  Swift::String v3;
  Class *v4;
  char v6;
  uint64_t v7;
  unint64_t v8;
  Swift::String v9;

  v2 = objc_msgSend(a1, sel_type);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  v3 = String.lowercased()();
  swift_bridgeObjectRelease();
  v9 = v3;
  v7 = 0x73736572646461;
  v8 = 0xE700000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  if ((StringProtocol.contains<A>(_:)() & 1) != 0)
  {
    v4 = (Class *)0x24BDC6CE0;
LABEL_6:
    swift_bridgeObjectRelease();
    return objc_msgSend(objc_allocWithZone(*v4), sel_initWithDDScannerResult_, a1, v7, v8, v9._countAndFlagsBits, v9._object);
  }
  v9 = v3;
  v7 = 1702125924;
  v8 = 0xE400000000000000;
  if ((StringProtocol.contains<A>(_:)() & 1) != 0
    || (v9 = v3, v7 = 1701669236, v8 = 0xE400000000000000, (StringProtocol.contains<A>(_:)() & 1) != 0))
  {
    v4 = (Class *)0x24BDC6CB8;
    goto LABEL_6;
  }
  v9 = v3;
  v7 = 0x676E696B63617274;
  v8 = 0xE800000000000000;
  if ((StringProtocol.contains<A>(_:)() & 1) != 0)
  {
    v4 = (Class *)0x24BDC6CE8;
    goto LABEL_6;
  }
  v9 = v3;
  v7 = 0x656E6F6870;
  v8 = 0xE500000000000000;
  if ((StringProtocol.contains<A>(_:)() & 1) != 0)
  {
    v4 = (Class *)0x24BDC6CD8;
    goto LABEL_6;
  }
  v9 = v3;
  v7 = 0x6C69616D65;
  v8 = 0xE500000000000000;
  if ((StringProtocol.contains<A>(_:)() & 1) != 0)
  {
    v4 = (Class *)0x24BDC6CC0;
    goto LABEL_6;
  }
  v9 = v3;
  v7 = 0x746867696C66;
  v8 = 0xE600000000000000;
  if ((StringProtocol.contains<A>(_:)() & 1) != 0)
  {
    v4 = (Class *)0x24BDC6CC8;
    goto LABEL_6;
  }
  v9 = v3;
  v7 = 7107189;
  v8 = 0xE300000000000000;
  v6 = StringProtocol.contains<A>(_:)();
  swift_bridgeObjectRelease();
  if ((v6 & 1) == 0)
    return 0;
  v4 = (Class *)0x24BDC6CD0;
  return objc_msgSend(objc_allocWithZone(*v4), sel_initWithDDScannerResult_, a1, v7, v8, v9._countAndFlagsBits, v9._object);
}

id specialized DUDataDetectors.processAddressComponents(ddScannerResult:resultString:)(uint64_t a1)
{
  id result;
  void *v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  id v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  id v28;
  id v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  id v36;
  id v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  result = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDC6CE0]), sel_initWithDDScannerResult_, a1);
  if (result)
  {
    v2 = result;
    v3 = MEMORY[0x24BEE4B00];
    v48 = MEMORY[0x24BEE4B00];
    v4 = objc_msgSend(result, sel_street);
    if (v4)
    {

      v5 = (id)*MEMORY[0x24BDD12B8];
      v6 = objc_msgSend(v2, sel_street);
      if (v6)
      {
        v7 = v6;
        v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v10 = v9;

        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v44 = v3;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v8, v10, v5, isUniquelyReferenced_nonNull_native);
        v48 = v3;
      }
      else
      {
        specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v5);
      }

      swift_bridgeObjectRelease();
    }
    v12 = objc_msgSend(v2, sel_city, v44);
    if (v12)
    {

      v13 = (id)*MEMORY[0x24BDD1288];
      v14 = objc_msgSend(v2, sel_city);
      if (v14)
      {
        v15 = v14;
        v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v18 = v17;

        v19 = swift_isUniquelyReferenced_nonNull_native();
        v45 = v48;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v16, v18, v13, v19);
      }
      else
      {
        specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v13);
      }

      swift_bridgeObjectRelease();
    }
    v20 = objc_msgSend(v2, sel_state, v45);
    if (v20)
    {

      v21 = (id)*MEMORY[0x24BDD12B0];
      v22 = objc_msgSend(v2, sel_state);
      if (v22)
      {
        v23 = v22;
        v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v26 = v25;

        v27 = swift_isUniquelyReferenced_nonNull_native();
        v46 = v48;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v24, v26, v21, v27);
      }
      else
      {
        specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v21);
      }

      swift_bridgeObjectRelease();
    }
    v28 = objc_msgSend(v2, sel_postalCode, v46);
    if (v28)
    {

      v29 = (id)*MEMORY[0x24BDD12C0];
      v30 = objc_msgSend(v2, sel_postalCode);
      if (v30)
      {
        v31 = v30;
        v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v34 = v33;

        v35 = swift_isUniquelyReferenced_nonNull_native();
        v47 = v48;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v32, v34, v29, v35);
      }
      else
      {
        specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v29);
      }

      swift_bridgeObjectRelease();
    }
    v36 = objc_msgSend(v2, sel_country, v47);
    if (v36)
    {

      v37 = (id)*MEMORY[0x24BDD1290];
      v38 = objc_msgSend(v2, sel_country);
      if (v38)
      {
        v39 = v38;
        v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v42 = v41;

        v43 = swift_isUniquelyReferenced_nonNull_native();
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v40, v42, v37, v43);
      }
      else
      {
        specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v37);
      }

      swift_bridgeObjectRelease();
    }
    else
    {

    }
    return (id)v48;
  }
  return result;
}

unint64_t type metadata accessor for DDScannerResult()
{
  unint64_t result;

  result = lazy cache variable for type metadata for DDScannerResult;
  if (!lazy cache variable for type metadata for DDScannerResult)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for DDScannerResult);
  }
  return result;
}

uint64_t specialized Set.union<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;

  v4 = type metadata accessor for Calendar.Component();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v16 - v9;
  v17 = a2;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    v12 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v13 = *(_QWORD *)(v5 + 72);
    v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    do
    {
      v14(v8, v12, v4);
      specialized Set._Variant.insert(_:)((uint64_t)v10, v8);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
      v12 += v13;
      --v11;
    }
    while (v11);
    return v17;
  }
  return a2;
}

uint64_t DUFoundInEventSpecification.__allocating_init()()
{
  return swift_allocObject();
}

unint64_t static DUFoundInEventSpecification.phaseID.getter()
{
  return 0xD000000000000014;
}

uint64_t DUFoundInEventSpecification.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t DUFoundInEventSpecification.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t DUFoundInEventSpecification.init()()
{
  uint64_t v0;

  return v0;
}

unint64_t protocol witness for static DUProcessingPhaseSpecification.phaseID.getter in conformance DUFoundInEventSpecification()
{
  return 0xD000000000000014;
}

uint64_t DUFoundInEventSpecification.attachResultsToResponse(response:processingRequest:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  v4 = type metadata accessor for Logger();
  v3[6] = v4;
  v3[7] = *(_QWORD *)(v4 - 8);
  v3[8] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t DUFoundInEventSpecification.attachResultsToResponse(response:processingRequest:)()
{
  _QWORD *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;

  Logger.init()();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v4 = v0[7];
    v3 = v0[8];
    v5 = v0[6];
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v14 = v7;
    *(_DWORD *)v6 = 136315138;
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000014, 0x80000002284E0EC0, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_2282CC000, v1, v2, "FoundInEvent phase ID: %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22E2B117C](v7, -1, -1);
    MEMORY[0x22E2B117C](v6, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  }
  else
  {
    v9 = v0[7];
    v8 = v0[8];
    v10 = v0[6];

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  }
  v13 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:)
                                        + async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:));
  v11 = (_QWORD *)swift_task_alloc();
  v0[9] = v11;
  *v11 = v0;
  v11[1] = DUFoundInEventSpecification.attachResultsToResponse(response:processingRequest:);
  return v13(v0[4]);
}

{
  uint64_t v0;
  void *v1;
  void (*v2)(void *);
  id v3;

  v1 = *(void **)(v0 + 80);
  if (v1)
  {
    v2 = *(void (**)(void *))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 24)) + 0x118);
    v3 = v1;
    v2(v1);

  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t DUFoundInEventSpecification.attachResultsToResponse(response:processingRequest:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 80) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

id DUFoundInEventSpecification.associatedRequestTypes.getter()
{
  objc_class *v0;
  char *v1;
  objc_super v3;

  v0 = (objc_class *)type metadata accessor for DURequestContentType();
  v1 = (char *)objc_allocWithZone(v0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = 2048;
  v3.receiver = v1;
  v3.super_class = v0;
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t protocol witness for TopLevelSpecificationProtocol.attachResultsToResponse(response:processingRequest:) in conformance DUFoundInEventSpecification(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = partial apply for closure #2 in DUFoundInEventMultilingualBERTImplementation.loadModelHeadBundle();
  return DUFoundInEventSpecification.attachResultsToResponse(response:processingRequest:)(a1, a2);
}

id protocol witness for TopLevelSpecificationProtocol.associatedRequestTypes.getter in conformance DUFoundInEventSpecification()
{
  objc_class *v0;
  char *v1;
  objc_super v3;

  v0 = (objc_class *)type metadata accessor for DURequestContentType();
  v1 = (char *)objc_allocWithZone(v0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = 2048;
  v3.receiver = v1;
  v3.super_class = v0;
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t type metadata accessor for DUFoundInEventSpecification()
{
  return objc_opt_self();
}

char *DUTopicDetectionResponse.__allocating_init<A>(proto:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  id v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  char *v35;
  char v36;
  void (*v37)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t, uint64_t, uint64_t);
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  id v69;
  uint64_t *v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  void **v75;
  void *v76;
  _QWORD v78[2];
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  v90 = a2;
  v91 = a1;
  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v86 = *(_QWORD *)(v4 - 8);
  v87 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v83 = (char *)v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v82 = (uint64_t)v78 - v7;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v81 = (uint64_t)v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v85 = (uint64_t)v78 - v11;
  v12 = type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult();
  v88 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v78 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)v78 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)v78 - v19;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?);
  v22 = MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)v78 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v27 = (char *)v78 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse();
  v29 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v31 = (_QWORD *)((char *)v78 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  v32 = objc_msgSend(objc_allocWithZone(v2), sel_init);
  v89 = v25;
  v33 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 16);
  v34 = v90;
  v33(v27, v91, v90);
  v35 = (char *)v32;
  v36 = swift_dynamicCast();
  v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 56);
  if ((v36 & 1) != 0)
  {
    v38 = v28;
    v39 = v91;
    v84 = v35;
    v79 = v38;
    v37(v24, 0, 1, v38);
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v24, (uint64_t)v31, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse);
    v40 = *v31;
    v93 = MEMORY[0x24BEE4AF8];
    v41 = *(_QWORD *)(v40 + 16);
    v80 = v31;
    if (v41)
    {
      v42 = v40 + ((*(unsigned __int8 *)(v88 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80));
      v43 = *(_QWORD *)(v88 + 72);
      v78[1] = v40;
      swift_bridgeObjectRetain();
      do
      {
        outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v42, (uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult);
        outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v20, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult);
        v44 = specialized DUTopicResult.__allocating_init<A>(proto:)((uint64_t)v18);
        v45 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult);
        if (v44)
        {
          MEMORY[0x22E2AFAFC](v45);
          if (*(_QWORD *)((v93 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v93 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        v42 += v43;
        --v41;
      }
      while (v41);
      v47 = v93;
      v48 = v90;
      v39 = v91;
      v31 = v80;
    }
    else
    {
      swift_bridgeObjectRetain();
      v47 = MEMORY[0x24BEE4AF8];
      v48 = v34;
    }
    swift_bridgeObjectRelease();
    v46 = v84;
    v49 = &v84[OBJC_IVAR____TtC21DocumentUnderstanding24DUTopicDetectionResponse_globalTopics];
    swift_beginAccess();
    *(_QWORD *)v49 = v47;
    swift_bridgeObjectRelease();
    v50 = v31[1];
    v92 = MEMORY[0x24BEE4AF8];
    v51 = *(_QWORD *)(v50 + 16);
    if (v51)
    {
      v52 = v50 + ((*(unsigned __int8 *)(v88 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80));
      v53 = *(_QWORD *)(v88 + 72);
      swift_bridgeObjectRetain();
      do
      {
        outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v52, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult);
        outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v15, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult);
        v54 = specialized DUTopicResult.__allocating_init<A>(proto:)((uint64_t)v18);
        v55 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult);
        if (v54)
        {
          MEMORY[0x22E2AFAFC](v55);
          if (*(_QWORD *)((v92 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v92 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        v52 += v53;
        --v51;
      }
      while (v51);
      v56 = v92;
      v48 = v90;
      v39 = v91;
      v46 = v84;
      v31 = v80;
    }
    else
    {
      swift_bridgeObjectRetain();
      v56 = MEMORY[0x24BEE4AF8];
    }
    swift_bridgeObjectRelease();
    v57 = &v46[OBJC_IVAR____TtC21DocumentUnderstanding24DUTopicDetectionResponse_personalTopics];
    swift_beginAccess();
    *(_QWORD *)v57 = v56;
    swift_bridgeObjectRelease();
    v58 = (uint64_t)v31 + *(int *)(v79 + 28);
    v59 = v85;
    outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?(v58, v85);
    v60 = v87;
    v61 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v86 + 48);
    v62 = v61(v59, 1, v87);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v59, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    v63 = v89;
    if (v62 == 1)
    {

      (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v39, v48);
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v31, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse);
    }
    else
    {
      v64 = v58;
      v65 = v81;
      outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?(v64, v81);
      if (v61(v65, 1, v60) == 1)
      {
        v66 = v82;
        UnknownStorage.init()();
        v67 = (_QWORD *)(v66 + *(int *)(v60 + 20));
        *v67 = 0;
        v67[1] = 0;
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v65, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
      }
      else
      {
        v66 = v82;
        outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v65, v82, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      }
      v68 = (uint64_t)v83;
      v69 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUDebugInfo()), sel_init);
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v66, v68, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      v70 = (uint64_t *)(v68 + *(int *)(v60 + 20));
      if (v70[1])
      {
        v71 = *v70;
        v72 = v70[1];
      }
      else
      {
        v71 = 0;
        v72 = 0xE000000000000000;
      }
      v73 = (char *)v69;
      swift_bridgeObjectRetain();
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v68, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      v74 = &v73[OBJC_IVAR____TtC21DocumentUnderstanding11DUDebugInfo_debugString];
      swift_beginAccess();
      *(_QWORD *)v74 = v71;
      *((_QWORD *)v74 + 1) = v72;

      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v39, v48);
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v31, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse);
      v75 = (void **)&v46[OBJC_IVAR____TtC21DocumentUnderstanding24DUTopicDetectionResponse_responseDebugInfo];
      swift_beginAccess();
      v76 = *v75;
      *v75 = v73;

    }
  }
  else
  {
    v37(v24, 1, 1, v28);

    (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v91, v34);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v24, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?);
    return 0;
  }
  return v46;
}

id DUTopicDetectionResponse.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t DUTopicDetectionResponse.globalTopics.getter()
{
  return PoemMessage.sender.getter();
}

uint64_t DUTopicDetectionResponse.globalTopics.setter(uint64_t a1)
{
  return PoemMessage.sender.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding24DUTopicDetectionResponse_globalTopics);
}

uint64_t (*DUTopicDetectionResponse.globalTopics.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryConfidence.modify;
}

Class @objc DUTopicDetectionResponse.globalTopics.getter(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  Class isa;

  v3 = (_QWORD *)(a1 + *a3);
  swift_beginAccess();
  if (!*v3)
    return (Class)0;
  type metadata accessor for DUTopicResult();
  swift_bridgeObjectRetain();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  return isa;
}

uint64_t DUTopicDetectionResponse.personalTopics.getter()
{
  return PoemMessage.sender.getter();
}

uint64_t @objc DUTopicDetectionResponse.globalTopics.setter(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t *v7;

  v5 = a3;
  if (a3)
  {
    type metadata accessor for DUTopicResult();
    v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  v7 = (uint64_t *)(a1 + *a4);
  swift_beginAccess();
  *v7 = v5;
  return swift_bridgeObjectRelease();
}

uint64_t DUTopicDetectionResponse.personalTopics.setter(uint64_t a1)
{
  return PoemMessage.sender.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding24DUTopicDetectionResponse_personalTopics);
}

uint64_t (*DUTopicDetectionResponse.personalTopics.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

void *DUTopicDetectionResponse.responseDebugInfo.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding24DUTopicDetectionResponse_responseDebugInfo);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void DUTopicDetectionResponse.responseDebugInfo.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;

  v3 = (void **)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding24DUTopicDetectionResponse_responseDebugInfo);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*DUTopicDetectionResponse.responseDebugInfo.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

unint64_t DUTopicDetectionResponse.protoRepresentation.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(void);
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  void *v36;
  int v37;
  void (*v38)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t result;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  void *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  void *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v78;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicResult?);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v78 = (char *)&v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v67 - v5;
  v7 = type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v75 = (uint64_t)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v72 = (uint64_t)&v67 - v12;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v76 = (uint64_t)&v67 - v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v67 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v73 = (uint64_t)&v67 - v18;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v67 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = MEMORY[0x24BDAC7A8](v22);
  v69 = (uint64_t)&v67 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x24BDAC7A8](v24);
  MEMORY[0x24BDAC7A8](v26);
  v74 = (unint64_t)&v67 - v27;
  v28 = MEMORY[0x24BEE4AF8];
  *a1 = MEMORY[0x24BEE4AF8];
  a1[1] = v28;
  v29 = type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse();
  UnknownStorage.init()();
  v30 = *(int *)(v29 + 28);
  v70 = a1;
  v31 = (uint64_t)a1 + v30;
  v32 = *(uint64_t (**)(void))(v23 + 56);
  v68 = v31;
  v77 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v32;
  v33 = v32();
  v34 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v35 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v71) + 0x98))(v33);
  if (v35)
  {
    v36 = v35;
    (*(void (**)(void))((*v34 & *v35) + 0x78))();

    v37 = swift_dynamicCast();
    v38 = v77;
    v77((uint64_t)v21, v37 ^ 1u, 1, v22);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) != 1)
    {
      v39 = v74;
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v21, v74, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      v40 = v69;
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v39, v69, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      v41 = v68;
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v68, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v40, v41, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      v38(v41, 0, 1, v22);
      v42 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v39, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      goto LABEL_6;
    }
  }
  else
  {
    v77((uint64_t)v21, 1, 1, v22);
  }
  v42 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v21, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
LABEL_6:
  v43 = (uint64_t)v78;
  v44 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v45 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v71) + 0x68))(v42);
  if (!v45)
    goto LABEL_25;
  v46 = v45;
  if (v45 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v47 = result;
    v77 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v46;
    if (result)
      goto LABEL_9;
  }
  else
  {
    v47 = *(_QWORD *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    v77 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v46;
    if (v47)
    {
LABEL_9:
      if (v47 < 1)
      {
        __break(1u);
        goto LABEL_46;
      }
      v49 = 0;
      v74 = v46 & 0xC000000000000001;
      v50 = MEMORY[0x24BEE4AF8];
      do
      {
        if (v74)
          v51 = (_QWORD *)MEMORY[0x22E2AFF34](v49, v77);
        else
          v51 = *((id *)v77 + v49 + 4);
        v52 = v51;
        (*(void (**)(void))((*MEMORY[0x24BEE4EA0] & *v51) + 0xD8))();
        outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v17, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);

        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
        {
          outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v6, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicResult?);
        }
        else
        {
          v53 = v73;
          outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v6, v73, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult);
          outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v53, v76, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v50 + 16) + 1, 1, v50);
          v55 = *(_QWORD *)(v50 + 16);
          v54 = *(_QWORD *)(v50 + 24);
          if (v55 >= v54 >> 1)
            v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v54 > 1, v55 + 1, 1, v50);
          *(_QWORD *)(v50 + 16) = v55 + 1;
          outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v76, v50+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v55, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult);
          v43 = (uint64_t)v78;
        }
        ++v49;
      }
      while (v47 != v49);
      goto LABEL_24;
    }
  }
  v50 = MEMORY[0x24BEE4AF8];
LABEL_24:
  swift_bridgeObjectRelease_n();
  v56 = v70;
  swift_bridgeObjectRelease();
  *v56 = v50;
  v44 = (_QWORD *)MEMORY[0x24BEE4EA0];
LABEL_25:
  result = (*(uint64_t (**)(void))((*v44 & *v71) + 0x80))();
  if (!result)
    return result;
  v57 = result;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v58 = result;
    if (result)
    {
LABEL_28:
      if (v58 >= 1)
      {
        v59 = 0;
        v77 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))(v57 & 0xC000000000000001);
        v60 = MEMORY[0x24BEE4AF8];
        do
        {
          if (v77)
            v61 = (_QWORD *)MEMORY[0x22E2AFF34](v59, v57);
          else
            v61 = *(id *)(v57 + 8 * v59 + 32);
          v62 = v61;
          (*(void (**)(void))((*MEMORY[0x24BEE4EA0] & *v61) + 0xD8))();
          outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v17, v43, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v43, 0, 1, v7);

          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v43, 1, v7) == 1)
          {
            outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v43, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicResult?);
          }
          else
          {
            v63 = v72;
            outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v43, v72, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult);
            outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v63, v75, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v60 + 16) + 1, 1, v60);
            v65 = *(_QWORD *)(v60 + 16);
            v64 = *(_QWORD *)(v60 + 24);
            if (v65 >= v64 >> 1)
              v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v64 > 1, v65 + 1, 1, v60);
            *(_QWORD *)(v60 + 16) = v65 + 1;
            outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v75, v60+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v65, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult);
            v43 = (uint64_t)v78;
          }
          ++v59;
        }
        while (v58 != v59);
        goto LABEL_43;
      }
LABEL_46:
      __break(1u);
      return result;
    }
  }
  else
  {
    v58 = *(_QWORD *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v58)
      goto LABEL_28;
  }
  v60 = MEMORY[0x24BEE4AF8];
LABEL_43:
  swift_bridgeObjectRelease_n();
  v66 = v70;
  result = swift_bridgeObjectRelease();
  v66[1] = v60;
  return result;
}

uint64_t DUTopicDetectionResponse.copy(with:)@<X0>(char **a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t result;
  uint64_t v9;

  v3 = type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse();
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0xB8))(v4);
  v7 = specialized DUTopicDetectionResponse.__allocating_init<A>(proto:)((uint64_t)v6);
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DUTopicDetectionResponse?);
  a1[3] = (char *)result;
  *a1 = v7;
  return result;
}

Swift::Void __swiftcall DUTopicDetectionResponse.encode(with:)(NSCoder with)
{
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;

  type metadata accessor for DUTopicDetectionResponse();
  lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DUTopicDetectionResponse and conformance DUTopicDetectionResponse, v2, (uint64_t (*)(uint64_t))type metadata accessor for DUTopicDetectionResponse, (uint64_t)&protocol conformance descriptor for DUTopicDetectionResponse);
  v3 = (void *)DUProtobufEncodableProtocol.serializedData()();
  if (v3)
  {
    v4 = v3;
    v5 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000016, 0x80000002284DABA0);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v4, v5);

  }
}

uint64_t DUTopicDetectionResponse.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return DUTopicDetectionResponse.init(coder:)(a1);
}

uint64_t DUTopicDetectionResponse.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  swift_getObjectType();
  type metadata accessor for NSData();
  v3 = v1;
  if (!NSCoder.decodeObject<A>(of:forKey:)())
  {

    goto LABEL_5;
  }
  swift_getObjectType();

  lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DUTopicDetectionResponse and conformance DUTopicDetectionResponse, v4, (uint64_t (*)(uint64_t))type metadata accessor for DUTopicDetectionResponse, (uint64_t)&protocol conformance descriptor for DUTopicDetectionResponse);
  DUProtobufEncodableProtocol.init(serializedData:)();

  v5 = v7;
  if (!v7)
  {
LABEL_5:
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v5;
}

id DUTopicDetectionResponse.init()()
{
  char *v0;
  objc_super v2;

  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding24DUTopicDetectionResponse_globalTopics] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding24DUTopicDetectionResponse_personalTopics] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding24DUTopicDetectionResponse_responseDebugInfo] = 0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DUTopicDetectionResponse();
  return objc_msgSendSuper2(&v2, sel_init);
}

id DUTopicDetectionResponse.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DUTopicDetectionResponse();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for DUProtobufEncodableProtocol.init(proto:) in conformance DUTopicDetectionResponse@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 176);
  v6 = type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse();
  v7 = lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_TopicDetectionResponse and conformance DocumentUnderstanding_ClientInterface_TopicDetectionResponse, 255, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse);
  result = v5(a1, v6, v7);
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for DUTopicDetectionResponse()
{
  return objc_opt_self();
}

uint64_t associated type witness table accessor for DUProtobufEncodableProtocol.ProtobufType : Message in DUTopicDetectionResponse()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_2284110C8()
{
  return lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_TopicDetectionResponse and conformance DocumentUnderstanding_ClientInterface_TopicDetectionResponse, 255, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse);
}

uint64_t DocumentUnderstanding_DocumentRepresentation_Document.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  UnknownStorage.init()();
  v2 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a1 + v2) = static DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.defaultInstance;
  return swift_retain();
}

uint64_t type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(uint64_t a1)
{
  return type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(a1, (uint64_t *)&type metadata singleton initialization cache for DocumentUnderstanding_DocumentRepresentation_Document);
}

uint64_t DocumentUnderstanding_DocumentRepresentation_Document.headline.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20));
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for DocumentUnderstanding_DocumentRepresentation_Document.headline : DocumentUnderstanding_DocumentRepresentation_Document@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20));
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 24);
  *a2 = *(_QWORD *)(v3 + 16);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_DocumentRepresentation_Document.headline : DocumentUnderstanding_DocumentRepresentation_Document(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
    swift_allocObject();
    v6 = (_QWORD *)swift_retain();
    *(_QWORD *)(a2 + v5) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 16) = v4;
  *(_QWORD *)(v7 + 24) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_DocumentRepresentation_Document.headline.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
    swift_allocObject();
    v6 = (_QWORD *)swift_retain();
    *(_QWORD *)(v2 + v5) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_DocumentRepresentation_Document.headline.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 24);
  v3[9] = *(_QWORD *)(v5 + 16);
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_DocumentRepresentation_Document.headline.modify;
}

void DocumentUnderstanding_DocumentRepresentation_Document.headline.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
      swift_allocObject();
      v7 = (_QWORD *)swift_retain();
      *(_QWORD *)(v6 + v5) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v7);
      swift_release();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v8 + 16) = v3;
    *(_QWORD *)(v8 + 24) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = *(int *)(v2 + 96);
      v10 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
      swift_allocObject();
      v11 = (_QWORD *)swift_retain();
      *(_QWORD *)(v10 + v9) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v11);
      swift_release();
    }
    v12 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v12 + 16) = v3;
    *(_QWORD *)(v12 + 24) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t DocumentUnderstanding_DocumentRepresentation_Document.subHeadline.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20));
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 32);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for DocumentUnderstanding_DocumentRepresentation_Document.subHeadline : DocumentUnderstanding_DocumentRepresentation_Document@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20));
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 40);
  *a2 = *(_QWORD *)(v3 + 32);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_DocumentRepresentation_Document.subHeadline : DocumentUnderstanding_DocumentRepresentation_Document(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
    swift_allocObject();
    v6 = (_QWORD *)swift_retain();
    *(_QWORD *)(a2 + v5) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 32) = v4;
  *(_QWORD *)(v7 + 40) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_DocumentRepresentation_Document.subHeadline.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
    swift_allocObject();
    v6 = (_QWORD *)swift_retain();
    *(_QWORD *)(v2 + v5) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 32) = a1;
  *(_QWORD *)(v7 + 40) = a2;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_DocumentRepresentation_Document.subHeadline.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 40);
  v3[9] = *(_QWORD *)(v5 + 32);
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_DocumentRepresentation_Document.subHeadline.modify;
}

void DocumentUnderstanding_DocumentRepresentation_Document.subHeadline.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
      swift_allocObject();
      v7 = (_QWORD *)swift_retain();
      *(_QWORD *)(v6 + v5) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v7);
      swift_release();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v8 + 32) = v3;
    *(_QWORD *)(v8 + 40) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = *(int *)(v2 + 96);
      v10 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
      swift_allocObject();
      v11 = (_QWORD *)swift_retain();
      *(_QWORD *)(v10 + v9) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v11);
      swift_release();
    }
    v12 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v12 + 32) = v3;
    *(_QWORD *)(v12 + 40) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t DocumentUnderstanding_DocumentRepresentation_Document.version.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20));
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 48);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for DocumentUnderstanding_DocumentRepresentation_Document.version : DocumentUnderstanding_DocumentRepresentation_Document@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20));
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 56);
  *a2 = *(_QWORD *)(v3 + 48);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_DocumentRepresentation_Document.version : DocumentUnderstanding_DocumentRepresentation_Document(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
    swift_allocObject();
    v6 = (_QWORD *)swift_retain();
    *(_QWORD *)(a2 + v5) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 48) = v4;
  *(_QWORD *)(v7 + 56) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_DocumentRepresentation_Document.version.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
    swift_allocObject();
    v6 = (_QWORD *)swift_retain();
    *(_QWORD *)(v2 + v5) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 48) = a1;
  *(_QWORD *)(v7 + 56) = a2;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_DocumentRepresentation_Document.version.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 56);
  v3[9] = *(_QWORD *)(v5 + 48);
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_DocumentRepresentation_Document.version.modify;
}

void DocumentUnderstanding_DocumentRepresentation_Document.version.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
      swift_allocObject();
      v7 = (_QWORD *)swift_retain();
      *(_QWORD *)(v6 + v5) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v7);
      swift_release();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v8 + 48) = v3;
    *(_QWORD *)(v8 + 56) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = *(int *)(v2 + 96);
      v10 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
      swift_allocObject();
      v11 = (_QWORD *)swift_retain();
      *(_QWORD *)(v10 + v9) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v11);
      swift_release();
    }
    v12 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v12 + 48) = v3;
    *(_QWORD *)(v12 + 56) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t DocumentUnderstanding_DocumentRepresentation_Document.creator.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20));
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 64);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for DocumentUnderstanding_DocumentRepresentation_Document.creator : DocumentUnderstanding_DocumentRepresentation_Document@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20));
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 72);
  *a2 = *(_QWORD *)(v3 + 64);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_DocumentRepresentation_Document.creator : DocumentUnderstanding_DocumentRepresentation_Document(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
    swift_allocObject();
    v6 = (_QWORD *)swift_retain();
    *(_QWORD *)(a2 + v5) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 64) = v4;
  *(_QWORD *)(v7 + 72) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_DocumentRepresentation_Document.creator.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
    swift_allocObject();
    v6 = (_QWORD *)swift_retain();
    *(_QWORD *)(v2 + v5) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 64) = a1;
  *(_QWORD *)(v7 + 72) = a2;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_DocumentRepresentation_Document.creator.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 72);
  v3[9] = *(_QWORD *)(v5 + 64);
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_DocumentRepresentation_Document.creator.modify;
}

void DocumentUnderstanding_DocumentRepresentation_Document.creator.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
      swift_allocObject();
      v7 = (_QWORD *)swift_retain();
      *(_QWORD *)(v6 + v5) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v7);
      swift_release();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v8 + 64) = v3;
    *(_QWORD *)(v8 + 72) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = *(int *)(v2 + 96);
      v10 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
      swift_allocObject();
      v11 = (_QWORD *)swift_retain();
      *(_QWORD *)(v10 + v9) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v11);
      swift_release();
    }
    v12 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v12 + 64) = v3;
    *(_QWORD *)(v12 + 72) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t DocumentUnderstanding_DocumentRepresentation_Document.abstract.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20));
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 80);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for DocumentUnderstanding_DocumentRepresentation_Document.abstract : DocumentUnderstanding_DocumentRepresentation_Document@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20));
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 88);
  *a2 = *(_QWORD *)(v3 + 80);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_DocumentRepresentation_Document.abstract : DocumentUnderstanding_DocumentRepresentation_Document(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
    swift_allocObject();
    v6 = (_QWORD *)swift_retain();
    *(_QWORD *)(a2 + v5) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 80) = v4;
  *(_QWORD *)(v7 + 88) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_DocumentRepresentation_Document.abstract.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
    swift_allocObject();
    v6 = (_QWORD *)swift_retain();
    *(_QWORD *)(v2 + v5) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 80) = a1;
  *(_QWORD *)(v7 + 88) = a2;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_DocumentRepresentation_Document.abstract.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 88);
  v3[9] = *(_QWORD *)(v5 + 80);
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_DocumentRepresentation_Document.abstract.modify;
}

void DocumentUnderstanding_DocumentRepresentation_Document.abstract.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
      swift_allocObject();
      v7 = (_QWORD *)swift_retain();
      *(_QWORD *)(v6 + v5) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v7);
      swift_release();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v8 + 80) = v3;
    *(_QWORD *)(v8 + 88) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = *(int *)(v2 + 96);
      v10 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
      swift_allocObject();
      v11 = (_QWORD *)swift_retain();
      *(_QWORD *)(v10 + v9) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v11);
      swift_release();
    }
    v12 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v12 + 80) = v3;
    *(_QWORD *)(v12 + 88) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t DocumentUnderstanding_DocumentRepresentation_Document.comment.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20));
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 96);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for DocumentUnderstanding_DocumentRepresentation_Document.comment : DocumentUnderstanding_DocumentRepresentation_Document@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20));
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 104);
  *a2 = *(_QWORD *)(v3 + 96);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_DocumentRepresentation_Document.comment : DocumentUnderstanding_DocumentRepresentation_Document(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
    swift_allocObject();
    v6 = (_QWORD *)swift_retain();
    *(_QWORD *)(a2 + v5) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 96) = v4;
  *(_QWORD *)(v7 + 104) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_DocumentRepresentation_Document.comment.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
    swift_allocObject();
    v6 = (_QWORD *)swift_retain();
    *(_QWORD *)(v2 + v5) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 96) = a1;
  *(_QWORD *)(v7 + 104) = a2;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_DocumentRepresentation_Document.comment.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 104);
  v3[9] = *(_QWORD *)(v5 + 96);
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_DocumentRepresentation_Document.comment.modify;
}

void DocumentUnderstanding_DocumentRepresentation_Document.comment.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
      swift_allocObject();
      v7 = (_QWORD *)swift_retain();
      *(_QWORD *)(v6 + v5) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v7);
      swift_release();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v8 + 96) = v3;
    *(_QWORD *)(v8 + 104) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = *(int *)(v2 + 96);
      v10 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
      swift_allocObject();
      v11 = (_QWORD *)swift_retain();
      *(_QWORD *)(v10 + v9) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v11);
      swift_release();
    }
    v12 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v12 + 96) = v3;
    *(_QWORD *)(v12 + 104) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t DocumentUnderstanding_DocumentRepresentation_Document.text.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20));
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 112);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for DocumentUnderstanding_DocumentRepresentation_Document.text : DocumentUnderstanding_DocumentRepresentation_Document@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20));
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 120);
  *a2 = *(_QWORD *)(v3 + 112);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_DocumentRepresentation_Document.text : DocumentUnderstanding_DocumentRepresentation_Document(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
    swift_allocObject();
    v6 = (_QWORD *)swift_retain();
    *(_QWORD *)(a2 + v5) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 112) = v4;
  *(_QWORD *)(v7 + 120) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_DocumentRepresentation_Document.text.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
    swift_allocObject();
    v6 = (_QWORD *)swift_retain();
    *(_QWORD *)(v2 + v5) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 112) = a1;
  *(_QWORD *)(v7 + 120) = a2;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_DocumentRepresentation_Document.text.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 120);
  v3[9] = *(_QWORD *)(v5 + 112);
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_DocumentRepresentation_Document.text.modify;
}

void DocumentUnderstanding_DocumentRepresentation_Document.text.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
      swift_allocObject();
      v7 = (_QWORD *)swift_retain();
      *(_QWORD *)(v6 + v5) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v7);
      swift_release();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v8 + 112) = v3;
    *(_QWORD *)(v8 + 120) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = *(int *)(v2 + 96);
      v10 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
      swift_allocObject();
      v11 = (_QWORD *)swift_retain();
      *(_QWORD *)(v10 + v9) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v11);
      swift_release();
    }
    v12 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v12 + 112) = v3;
    *(_QWORD *)(v12 + 120) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t DocumentUnderstanding_DocumentRepresentation_Document.inLanguage.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20));
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 128);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for DocumentUnderstanding_DocumentRepresentation_Document.inLanguage : DocumentUnderstanding_DocumentRepresentation_Document@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20));
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 136);
  *a2 = *(_QWORD *)(v3 + 128);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_DocumentRepresentation_Document.inLanguage : DocumentUnderstanding_DocumentRepresentation_Document(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
    swift_allocObject();
    v6 = (_QWORD *)swift_retain();
    *(_QWORD *)(a2 + v5) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 128) = v4;
  *(_QWORD *)(v7 + 136) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_DocumentRepresentation_Document.inLanguage.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
    swift_allocObject();
    v6 = (_QWORD *)swift_retain();
    *(_QWORD *)(v2 + v5) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 128) = a1;
  *(_QWORD *)(v7 + 136) = a2;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_DocumentRepresentation_Document.inLanguage.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 136);
  v3[9] = *(_QWORD *)(v5 + 128);
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_DocumentRepresentation_Document.inLanguage.modify;
}

void DocumentUnderstanding_DocumentRepresentation_Document.inLanguage.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
      swift_allocObject();
      v7 = (_QWORD *)swift_retain();
      *(_QWORD *)(v6 + v5) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v7);
      swift_release();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v8 + 128) = v3;
    *(_QWORD *)(v8 + 136) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = *(int *)(v2 + 96);
      v10 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
      swift_allocObject();
      v11 = (_QWORD *)swift_retain();
      *(_QWORD *)(v10 + v9) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v11);
      swift_release();
    }
    v12 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v12 + 128) = v3;
    *(_QWORD *)(v12 + 136) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t DocumentUnderstanding_DocumentRepresentation_Document.keywords.getter()
{
  type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0);
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t key path getter for DocumentUnderstanding_DocumentRepresentation_Document.keywords : DocumentUnderstanding_DocumentRepresentation_Document@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20));
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 144);
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_DocumentRepresentation_Document.keywords : DocumentUnderstanding_DocumentRepresentation_Document(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
    swift_allocObject();
    v5 = (_QWORD *)swift_retain();
    *(_QWORD *)(a2 + v4) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  swift_beginAccess();
  *(_QWORD *)(v6 + 144) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_DocumentRepresentation_Document.keywords.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
    swift_allocObject();
    v4 = (_QWORD *)swift_retain();
    *(_QWORD *)(v1 + v3) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  swift_beginAccess();
  *(_QWORD *)(v5 + 144) = a1;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_DocumentRepresentation_Document.keywords.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v3[9] = *(_QWORD *)(v5 + 144);
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_DocumentRepresentation_Document.keywords.modify;
}

void DocumentUnderstanding_DocumentRepresentation_Document.keywords.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v4 = *(int *)(v2 + 88);
      v5 = *(_QWORD *)(v2 + 80);
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
      swift_allocObject();
      v6 = (_QWORD *)swift_retain();
      *(_QWORD *)(v5 + v4) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v6);
      swift_release();
    }
    v7 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess();
    *(_QWORD *)(v7 + 144) = v3;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v8 = *(int *)(v2 + 88);
      v9 = *(_QWORD *)(v2 + 80);
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
      swift_allocObject();
      v10 = (_QWORD *)swift_retain();
      *(_QWORD *)(v9 + v8) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v10);
      swift_release();
    }
    v11 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess();
    *(_QWORD *)(v11 + 144) = v3;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t DocumentUnderstanding_DocumentRepresentation_Document.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20));
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 152);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for DocumentUnderstanding_DocumentRepresentation_Document.identifier : DocumentUnderstanding_DocumentRepresentation_Document@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20));
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 160);
  *a2 = *(_QWORD *)(v3 + 152);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_DocumentRepresentation_Document.identifier : DocumentUnderstanding_DocumentRepresentation_Document(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
    swift_allocObject();
    v6 = (_QWORD *)swift_retain();
    *(_QWORD *)(a2 + v5) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 152) = v4;
  *(_QWORD *)(v7 + 160) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_DocumentRepresentation_Document.identifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
    swift_allocObject();
    v6 = (_QWORD *)swift_retain();
    *(_QWORD *)(v2 + v5) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 152) = a1;
  *(_QWORD *)(v7 + 160) = a2;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_DocumentRepresentation_Document.identifier.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 160);
  v3[9] = *(_QWORD *)(v5 + 152);
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_DocumentRepresentation_Document.identifier.modify;
}

void DocumentUnderstanding_DocumentRepresentation_Document.identifier.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
      swift_allocObject();
      v7 = (_QWORD *)swift_retain();
      *(_QWORD *)(v6 + v5) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v7);
      swift_release();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v8 + 152) = v3;
    *(_QWORD *)(v8 + 160) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = *(int *)(v2 + 96);
      v10 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
      swift_allocObject();
      v11 = (_QWORD *)swift_retain();
      *(_QWORD *)(v10 + v9) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v11);
      swift_release();
    }
    v12 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v12 + 152) = v3;
    *(_QWORD *)(v12 + 160) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t DocumentUnderstanding_DocumentRepresentation_Document.url.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20));
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 168);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for DocumentUnderstanding_DocumentRepresentation_Document.url : DocumentUnderstanding_DocumentRepresentation_Document@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20));
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 176);
  *a2 = *(_QWORD *)(v3 + 168);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_DocumentRepresentation_Document.url : DocumentUnderstanding_DocumentRepresentation_Document(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
    swift_allocObject();
    v6 = (_QWORD *)swift_retain();
    *(_QWORD *)(a2 + v5) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 168) = v4;
  *(_QWORD *)(v7 + 176) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_DocumentRepresentation_Document.url.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
    swift_allocObject();
    v6 = (_QWORD *)swift_retain();
    *(_QWORD *)(v2 + v5) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 168) = a1;
  *(_QWORD *)(v7 + 176) = a2;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_DocumentRepresentation_Document.url.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 176);
  v3[9] = *(_QWORD *)(v5 + 168);
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_DocumentRepresentation_Document.url.modify;
}

void DocumentUnderstanding_DocumentRepresentation_Document.url.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
      swift_allocObject();
      v7 = (_QWORD *)swift_retain();
      *(_QWORD *)(v6 + v5) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v7);
      swift_release();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v8 + 168) = v3;
    *(_QWORD *)(v8 + 176) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = *(int *)(v2 + 96);
      v10 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
      swift_allocObject();
      v11 = (_QWORD *)swift_retain();
      *(_QWORD *)(v10 + v9) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v11);
      swift_release();
    }
    v12 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v12 + 168) = v3;
    *(_QWORD *)(v12 + 176) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t DocumentUnderstanding_DocumentRepresentation_Document.thumbnailURL.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20));
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 184);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for DocumentUnderstanding_DocumentRepresentation_Document.thumbnailURL : DocumentUnderstanding_DocumentRepresentation_Document@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20));
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 192);
  *a2 = *(_QWORD *)(v3 + 184);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_DocumentRepresentation_Document.thumbnailURL : DocumentUnderstanding_DocumentRepresentation_Document(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
    swift_allocObject();
    v6 = (_QWORD *)swift_retain();
    *(_QWORD *)(a2 + v5) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 184) = v4;
  *(_QWORD *)(v7 + 192) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_DocumentRepresentation_Document.thumbnailURL.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
    swift_allocObject();
    v6 = (_QWORD *)swift_retain();
    *(_QWORD *)(v2 + v5) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 184) = a1;
  *(_QWORD *)(v7 + 192) = a2;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_DocumentRepresentation_Document.thumbnailURL.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 192);
  v3[9] = *(_QWORD *)(v5 + 184);
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_DocumentRepresentation_Document.thumbnailURL.modify;
}

void DocumentUnderstanding_DocumentRepresentation_Document.thumbnailURL.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
      swift_allocObject();
      v7 = (_QWORD *)swift_retain();
      *(_QWORD *)(v6 + v5) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v7);
      swift_release();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v8 + 184) = v3;
    *(_QWORD *)(v8 + 192) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = *(int *)(v2 + 96);
      v10 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
      swift_allocObject();
      v11 = (_QWORD *)swift_retain();
      *(_QWORD *)(v10 + v9) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v11);
      swift_release();
    }
    v12 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v12 + 184) = v3;
    *(_QWORD *)(v12 + 192) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t DocumentUnderstanding_DocumentRepresentation_Document.significantLink.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20));
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 200);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for DocumentUnderstanding_DocumentRepresentation_Document.significantLink : DocumentUnderstanding_DocumentRepresentation_Document@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20));
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 208);
  *a2 = *(_QWORD *)(v3 + 200);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_DocumentRepresentation_Document.significantLink : DocumentUnderstanding_DocumentRepresentation_Document(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
    swift_allocObject();
    v6 = (_QWORD *)swift_retain();
    *(_QWORD *)(a2 + v5) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 200) = v4;
  *(_QWORD *)(v7 + 208) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_DocumentRepresentation_Document.significantLink.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v5 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
    swift_allocObject();
    v6 = (_QWORD *)swift_retain();
    *(_QWORD *)(v2 + v5) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 200) = a1;
  *(_QWORD *)(v7 + 208) = a2;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_DocumentRepresentation_Document.significantLink.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 208);
  v3[9] = *(_QWORD *)(v5 + 200);
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_DocumentRepresentation_Document.significantLink.modify;
}

void DocumentUnderstanding_DocumentRepresentation_Document.significantLink.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
      swift_allocObject();
      v7 = (_QWORD *)swift_retain();
      *(_QWORD *)(v6 + v5) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v7);
      swift_release();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v8 + 200) = v3;
    *(_QWORD *)(v8 + 208) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = *(int *)(v2 + 96);
      v10 = *(_QWORD *)(v2 + 88);
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
      swift_allocObject();
      v11 = (_QWORD *)swift_retain();
      *(_QWORD *)(v10 + v9) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v11);
      swift_release();
    }
    v12 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v12 + 200) = v3;
    *(_QWORD *)(v12 + 208) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

double DocumentUnderstanding_DocumentRepresentation_Document.dateCreated.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20));
  swift_beginAccess();
  return *(double *)(v1 + 216);
}

uint64_t key path setter for DocumentUnderstanding_DocumentRepresentation_Document.dateCreated : DocumentUnderstanding_DocumentRepresentation_Document(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
    swift_allocObject();
    v5 = (_QWORD *)swift_retain();
    *(_QWORD *)(a2 + v4) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  result = swift_beginAccess();
  *(_QWORD *)(v6 + 216) = v3;
  return result;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_Document.dateCreated.setter(double a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
    swift_allocObject();
    v4 = (_QWORD *)swift_retain();
    *(_QWORD *)(v1 + v3) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(double *)(v5 + 216) = a1;
  return result;
}

void (*DocumentUnderstanding_DocumentRepresentation_Document.dateCreated.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v3[9] = *(_QWORD *)(v5 + 216);
  return DocumentUnderstanding_DocumentRepresentation_Document.dateCreated.modify;
}

void DocumentUnderstanding_DocumentRepresentation_Document.dateCreated.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
    swift_allocObject();
    v8 = (_QWORD *)swift_retain();
    *(_QWORD *)(v7 + v6) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v8);
    swift_release();
  }
LABEL_4:
  v9 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88)) + 216);
  swift_beginAccess();
  *v9 = v4;
  free((void *)v3);
}

double DocumentUnderstanding_DocumentRepresentation_Document.dateModified.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20));
  swift_beginAccess();
  return *(double *)(v1 + 224);
}

uint64_t key path setter for DocumentUnderstanding_DocumentRepresentation_Document.dateModified : DocumentUnderstanding_DocumentRepresentation_Document(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
    swift_allocObject();
    v5 = (_QWORD *)swift_retain();
    *(_QWORD *)(a2 + v4) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  result = swift_beginAccess();
  *(_QWORD *)(v6 + 224) = v3;
  return result;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_Document.dateModified.setter(double a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
    swift_allocObject();
    v4 = (_QWORD *)swift_retain();
    *(_QWORD *)(v1 + v3) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(double *)(v5 + 224) = a1;
  return result;
}

void (*DocumentUnderstanding_DocumentRepresentation_Document.dateModified.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v3[9] = *(_QWORD *)(v5 + 224);
  return DocumentUnderstanding_DocumentRepresentation_Document.dateModified.modify;
}

void DocumentUnderstanding_DocumentRepresentation_Document.dateModified.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
    swift_allocObject();
    v8 = (_QWORD *)swift_retain();
    *(_QWORD *)(v7 + v6) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v8);
    swift_release();
  }
LABEL_4:
  v9 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88)) + 224);
  swift_beginAccess();
  *v9 = v4;
  free((void *)v3);
}

uint64_t DocumentUnderstanding_DocumentRepresentation_Document.documentUielements.getter()
{
  type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0);
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t key path getter for DocumentUnderstanding_DocumentRepresentation_Document.documentUielements : DocumentUnderstanding_DocumentRepresentation_Document@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20));
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 232);
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_DocumentRepresentation_Document.documentUielements : DocumentUnderstanding_DocumentRepresentation_Document(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
    swift_allocObject();
    v5 = (_QWORD *)swift_retain();
    *(_QWORD *)(a2 + v4) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  swift_beginAccess();
  *(_QWORD *)(v6 + 232) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_DocumentRepresentation_Document.documentUielements.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
    swift_allocObject();
    v4 = (_QWORD *)swift_retain();
    *(_QWORD *)(v1 + v3) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  swift_beginAccess();
  *(_QWORD *)(v5 + 232) = a1;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_DocumentRepresentation_Document.documentUielements.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v3[9] = *(_QWORD *)(v5 + 232);
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_DocumentRepresentation_Document.documentUielements.modify;
}

void DocumentUnderstanding_DocumentRepresentation_Document.documentUielements.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v4 = *(int *)(v2 + 88);
      v5 = *(_QWORD *)(v2 + 80);
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
      swift_allocObject();
      v6 = (_QWORD *)swift_retain();
      *(_QWORD *)(v5 + v4) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v6);
      swift_release();
    }
    v7 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess();
    *(_QWORD *)(v7 + 232) = v3;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v8 = *(int *)(v2 + 88);
      v9 = *(_QWORD *)(v2 + 80);
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
      swift_allocObject();
      v10 = (_QWORD *)swift_retain();
      *(_QWORD *)(v9 + v8) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v10);
      swift_release();
    }
    v11 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess();
    *(_QWORD *)(v11 + 232) = v3;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t DocumentUnderstanding_DocumentRepresentation_Document.documentHtmldata.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20))
     + OBJC_IVAR____TtCV21DocumentUnderstanding53DocumentUnderstanding_DocumentRepresentation_DocumentP33_B25D73F1E23932B4C52C7495EED50DAA13_StorageClass__documentHtmldata;
  swift_beginAccess();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v6, (uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData?);
  v7 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v5, (uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData);
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  UnknownStorage.init()();
  v8 = (char *)a1 + *(int *)(v7 + 24);
  v9 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData?);
}

uint64_t key path getter for DocumentUnderstanding_DocumentRepresentation_Document.documentHtmldata : DocumentUnderstanding_DocumentRepresentation_Document@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20))
     + OBJC_IVAR____TtCV21DocumentUnderstanding53DocumentUnderstanding_DocumentRepresentation_DocumentP33_B25D73F1E23932B4C52C7495EED50DAA13_StorageClass__documentHtmldata;
  swift_beginAccess();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v7, (uint64_t)v6, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData?);
  v8 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v6, (uint64_t)a2, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData);
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  UnknownStorage.init()();
  v9 = (char *)a2 + *(int *)(v8 + 24);
  v10 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v6, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData?);
}

uint64_t DocumentUnderstanding_DocumentRepresentation_Document.documentHtmldata.setter(uint64_t a1)
{
  return DocumentUnderstanding_DocumentRepresentation_Document.documentHtmldata.setter(a1, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData?, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData, &OBJC_IVAR____TtCV21DocumentUnderstanding53DocumentUnderstanding_DocumentRepresentation_DocumentP33_B25D73F1E23932B4C52C7495EED50DAA13_StorageClass__documentHtmldata);
}

void (*DocumentUnderstanding_DocumentRepresentation_Document.documentHtmldata.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1
                  + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20))
      + OBJC_IVAR____TtCV21DocumentUnderstanding53DocumentUnderstanding_DocumentRepresentation_DocumentP33_B25D73F1E23932B4C52C7495EED50DAA13_StorageClass__documentHtmldata;
  swift_beginAccess();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v10, (uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = 0;
    v9[1] = 0xE000000000000000;
    UnknownStorage.init()();
    v11 = (char *)v9 + *(int *)(v6 + 24);
    v12 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData?);
  }
  else
  {
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v5, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData);
  }
  return DocumentUnderstanding_DocumentRepresentation_Document.documentHtmldata.modify;
}

void DocumentUnderstanding_DocumentRepresentation_Document.documentHtmldata.modify(uint64_t a1, char a2)
{
  DocumentUnderstanding_ClientInterface_StructuredEntity.calendarEvent.modify(a1, a2, (void (*)(void *))DocumentUnderstanding_DocumentRepresentation_Document.documentHtmldata.setter, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData);
}

BOOL DocumentUnderstanding_DocumentRepresentation_Document.hasDocumentHtmldata.getter()
{
  return DocumentUnderstanding_DocumentRepresentation_Document.hasDocumentHtmldata.getter(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData?, &OBJC_IVAR____TtCV21DocumentUnderstanding53DocumentUnderstanding_DocumentRepresentation_DocumentP33_B25D73F1E23932B4C52C7495EED50DAA13_StorageClass__documentHtmldata, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData);
}

Swift::Void __swiftcall DocumentUnderstanding_DocumentRepresentation_Document.clearDocumentHtmldata()()
{
  DocumentUnderstanding_DocumentRepresentation_Document.clearDocumentHtmldata()(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData?, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData, &OBJC_IVAR____TtCV21DocumentUnderstanding53DocumentUnderstanding_DocumentRepresentation_DocumentP33_B25D73F1E23932B4C52C7495EED50DAA13_StorageClass__documentHtmldata);
}

uint64_t DocumentUnderstanding_DocumentRepresentation_Document.documentMessageData.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20))
     + OBJC_IVAR____TtCV21DocumentUnderstanding53DocumentUnderstanding_DocumentRepresentation_DocumentP33_B25D73F1E23932B4C52C7495EED50DAA13_StorageClass__documentMessageData;
  swift_beginAccess();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v6, (uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData?);
  v7 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v5, (uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData);
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  v8 = MEMORY[0x24BEE4AF8];
  a1[4] = MEMORY[0x24BEE4AF8];
  a1[5] = v8;
  a1[6] = 0;
  a1[7] = 0xE000000000000000;
  a1[8] = 0;
  a1[9] = 0xE000000000000000;
  UnknownStorage.init()();
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData?);
}

uint64_t DocumentUnderstanding_DocumentRepresentation_Document.documentMessageData.setter(uint64_t a1)
{
  return DocumentUnderstanding_DocumentRepresentation_Document.documentHtmldata.setter(a1, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData?, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData, &OBJC_IVAR____TtCV21DocumentUnderstanding53DocumentUnderstanding_DocumentRepresentation_DocumentP33_B25D73F1E23932B4C52C7495EED50DAA13_StorageClass__documentMessageData);
}

uint64_t DocumentUnderstanding_DocumentRepresentation_Document.documentHtmldata.setter(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_QWORD), _QWORD *a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v9 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v21 - v13;
  v15 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
    swift_allocObject();
    v16 = (_QWORD *)swift_retain();
    *(_QWORD *)(v4 + v15) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v16);
    swift_release();
  }
  v17 = *(_QWORD *)(v4 + v15);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(a1, (uint64_t)v14, a3);
  v18 = a3(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v14, 0, 1, v18);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v14, (uint64_t)v12, a2);
  v19 = v17 + *a4;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v12, v19, a2);
  swift_endAccess();
  return swift_release();
}

void (*DocumentUnderstanding_DocumentRepresentation_Document.documentMessageData.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1
                  + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20))
      + OBJC_IVAR____TtCV21DocumentUnderstanding53DocumentUnderstanding_DocumentRepresentation_DocumentP33_B25D73F1E23932B4C52C7495EED50DAA13_StorageClass__documentMessageData;
  swift_beginAccess();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v10, (uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = 0;
    v9[1] = 0xE000000000000000;
    v9[2] = 0;
    v9[3] = 0xE000000000000000;
    v11 = MEMORY[0x24BEE4AF8];
    v9[4] = MEMORY[0x24BEE4AF8];
    v9[5] = v11;
    v9[6] = 0;
    v9[7] = 0xE000000000000000;
    v9[8] = 0;
    v9[9] = 0xE000000000000000;
    UnknownStorage.init()();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData?);
  }
  else
  {
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v5, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData);
  }
  return DocumentUnderstanding_DocumentRepresentation_Document.documentMessageData.modify;
}

void DocumentUnderstanding_DocumentRepresentation_Document.documentMessageData.modify(uint64_t a1, char a2)
{
  DocumentUnderstanding_ClientInterface_StructuredEntity.calendarEvent.modify(a1, a2, (void (*)(void *))DocumentUnderstanding_DocumentRepresentation_Document.documentMessageData.setter, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData);
}

BOOL DocumentUnderstanding_DocumentRepresentation_Document.hasDocumentMessageData.getter()
{
  return DocumentUnderstanding_DocumentRepresentation_Document.hasDocumentHtmldata.getter(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData?, &OBJC_IVAR____TtCV21DocumentUnderstanding53DocumentUnderstanding_DocumentRepresentation_DocumentP33_B25D73F1E23932B4C52C7495EED50DAA13_StorageClass__documentMessageData, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData);
}

BOOL DocumentUnderstanding_DocumentRepresentation_Document.hasDocumentHtmldata.getter(uint64_t *a1, _QWORD *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v14;

  v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v3
                  + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20))
      + *a2;
  swift_beginAccess();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v10, (uint64_t)v9, a1);
  v11 = a3(0);
  v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v9, a1);
  return v12;
}

Swift::Void __swiftcall DocumentUnderstanding_DocumentRepresentation_Document.clearDocumentMessageData()()
{
  DocumentUnderstanding_DocumentRepresentation_Document.clearDocumentHtmldata()(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData?, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData, &OBJC_IVAR____TtCV21DocumentUnderstanding53DocumentUnderstanding_DocumentRepresentation_DocumentP33_B25D73F1E23932B4C52C7495EED50DAA13_StorageClass__documentMessageData);
}

uint64_t DocumentUnderstanding_DocumentRepresentation_Document.clearDocumentHtmldata()(uint64_t *a1, uint64_t (*a2)(_QWORD), _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
    swift_allocObject();
    v11 = (_QWORD *)swift_retain();
    *(_QWORD *)(v3 + v10) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v11);
    swift_release();
  }
  v12 = *(_QWORD *)(v3 + v10);
  v13 = a2(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v9, 1, 1, v13);
  v14 = v12 + *a3;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v9, v14, a1);
  swift_endAccess();
  return swift_release();
}

uint64_t DocumentUnderstanding_DocumentRepresentation_Document.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t DocumentUnderstanding_DocumentRepresentation_Document.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*DocumentUnderstanding_DocumentRepresentation_Document.unknownFields.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

void *DocumentUnderstanding_DocumentRepresentation_Document.protoMessageName.unsafeMutableAddressor()
{
  return &static DocumentUnderstanding_DocumentRepresentation_Document.protoMessageName;
}

unint64_t static DocumentUnderstanding_DocumentRepresentation_Document.protoMessageName.getter()
{
  return 0xD000000000000037;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_Document._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static DocumentUnderstanding_DocumentRepresentation_Document._protobuf_nameMap);
}

uint64_t static DocumentUnderstanding_DocumentRepresentation_Document._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v2 = type metadata accessor for _NameMap();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static DocumentUnderstanding_DocumentRepresentation_Document._protobuf_nameMap);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

_QWORD *one-time initialization function for defaultInstance()
{
  _QWORD *result;

  type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
  swift_allocObject();
  result = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init()();
  static DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.defaultInstance = (uint64_t)result;
  return result;
}

uint64_t type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(uint64_t a1)
{
  return type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(a1, (uint64_t *)&type metadata singleton initialization cache for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass);
}

_QWORD *DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init()()
{
  _QWORD *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  v0[2] = 0;
  v0[3] = 0xE000000000000000;
  v0[4] = 0;
  v0[5] = 0xE000000000000000;
  v0[6] = 0;
  v0[7] = 0xE000000000000000;
  v0[8] = 0;
  v0[9] = 0xE000000000000000;
  v0[10] = 0;
  v0[11] = 0xE000000000000000;
  v0[12] = 0;
  v0[13] = 0xE000000000000000;
  v0[14] = 0;
  v0[15] = 0xE000000000000000;
  v0[16] = 0;
  v0[17] = 0xE000000000000000;
  v1 = MEMORY[0x24BEE4AF8];
  v0[18] = MEMORY[0x24BEE4AF8];
  v0[19] = 0;
  v0[20] = 0xE000000000000000;
  v0[21] = 0;
  v0[22] = 0xE000000000000000;
  v0[23] = 0;
  v0[24] = 0xE000000000000000;
  v0[25] = 0;
  v0[26] = 0xE000000000000000;
  v0[27] = 0;
  v2 = (char *)v0
     + OBJC_IVAR____TtCV21DocumentUnderstanding53DocumentUnderstanding_DocumentRepresentation_DocumentP33_B25D73F1E23932B4C52C7495EED50DAA13_StorageClass__documentHtmldata;
  v0[28] = 0;
  v0[29] = v1;
  v3 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  v4 = (char *)v0
     + OBJC_IVAR____TtCV21DocumentUnderstanding53DocumentUnderstanding_DocumentRepresentation_DocumentP33_B25D73F1E23932B4C52C7495EED50DAA13_StorageClass__documentMessageData;
  v5 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  return v0;
}

_QWORD *DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData?);
  MEMORY[0x24BDAC7A8](v3);
  v74 = (uint64_t)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData?);
  MEMORY[0x24BDAC7A8](v5);
  v73 = (uint64_t)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[2] = 0;
  v1[3] = 0xE000000000000000;
  v1[4] = 0;
  v1[5] = 0xE000000000000000;
  v1[6] = 0;
  v1[7] = 0xE000000000000000;
  v1[8] = 0;
  v1[9] = 0xE000000000000000;
  v1[10] = 0;
  v59 = v1 + 10;
  v1[11] = 0xE000000000000000;
  v1[12] = 0;
  v60 = v1 + 12;
  v1[13] = 0xE000000000000000;
  v1[14] = 0;
  v61 = v1 + 14;
  v1[15] = 0xE000000000000000;
  v1[16] = 0;
  v62 = v1 + 16;
  v1[17] = 0xE000000000000000;
  v7 = MEMORY[0x24BEE4AF8];
  v1[18] = MEMORY[0x24BEE4AF8];
  v63 = v1 + 18;
  v1[19] = 0;
  v64 = v1 + 19;
  v1[20] = 0xE000000000000000;
  v1[21] = 0;
  v65 = v1 + 21;
  v1[23] = 0;
  v66 = v1 + 23;
  v1[22] = 0xE000000000000000;
  v1[24] = 0xE000000000000000;
  v1[25] = 0;
  v1[26] = 0xE000000000000000;
  v1[28] = 0;
  v69 = v1 + 28;
  v1[29] = v7;
  v70 = v1 + 29;
  v8 = (char *)v1
     + OBJC_IVAR____TtCV21DocumentUnderstanding53DocumentUnderstanding_DocumentRepresentation_DocumentP33_B25D73F1E23932B4C52C7495EED50DAA13_StorageClass__documentHtmldata;
  v71 = (char *)v1
      + OBJC_IVAR____TtCV21DocumentUnderstanding53DocumentUnderstanding_DocumentRepresentation_DocumentP33_B25D73F1E23932B4C52C7495EED50DAA13_StorageClass__documentHtmldata;
  v1[27] = 0;
  v67 = v1 + 25;
  v68 = v1 + 27;
  v9 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = (char *)v1
      + OBJC_IVAR____TtCV21DocumentUnderstanding53DocumentUnderstanding_DocumentRepresentation_DocumentP33_B25D73F1E23932B4C52C7495EED50DAA13_StorageClass__documentMessageData;
  v72 = (char *)v1
      + OBJC_IVAR____TtCV21DocumentUnderstanding53DocumentUnderstanding_DocumentRepresentation_DocumentP33_B25D73F1E23932B4C52C7495EED50DAA13_StorageClass__documentMessageData;
  v11 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  swift_beginAccess();
  v13 = a1[2];
  v12 = a1[3];
  swift_beginAccess();
  v1[2] = v13;
  v1[3] = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v15 = a1[4];
  v14 = a1[5];
  swift_beginAccess();
  v1[4] = v15;
  v1[5] = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v17 = a1[6];
  v16 = a1[7];
  swift_beginAccess();
  v1[6] = v17;
  v1[7] = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v19 = a1[8];
  v18 = a1[9];
  swift_beginAccess();
  v1[8] = v19;
  v1[9] = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v21 = a1[10];
  v20 = a1[11];
  v22 = v59;
  swift_beginAccess();
  *v22 = v21;
  v1[11] = v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v24 = a1[12];
  v23 = a1[13];
  v25 = v60;
  swift_beginAccess();
  *v25 = v24;
  v1[13] = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v27 = a1[14];
  v26 = a1[15];
  v28 = v61;
  swift_beginAccess();
  *v28 = v27;
  v1[15] = v26;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v30 = a1[16];
  v29 = a1[17];
  v31 = v62;
  swift_beginAccess();
  *v31 = v30;
  v1[17] = v29;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v32 = a1[18];
  v33 = v63;
  swift_beginAccess();
  *v33 = v32;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v35 = a1[19];
  v34 = a1[20];
  v36 = v64;
  swift_beginAccess();
  *v36 = v35;
  v1[20] = v34;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v38 = a1[21];
  v37 = a1[22];
  v39 = v65;
  swift_beginAccess();
  *v39 = v38;
  v1[22] = v37;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v41 = a1[23];
  v40 = a1[24];
  v42 = v66;
  swift_beginAccess();
  *v42 = v41;
  v1[24] = v40;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v44 = a1[25];
  v43 = a1[26];
  v45 = v67;
  swift_beginAccess();
  *v45 = v44;
  v1[26] = v43;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v46 = a1[27];
  v47 = v68;
  swift_beginAccess();
  *v47 = v46;
  swift_beginAccess();
  v48 = a1[28];
  v49 = v69;
  swift_beginAccess();
  *v49 = v48;
  swift_beginAccess();
  v50 = a1[29];
  v51 = v70;
  swift_beginAccess();
  *v51 = v50;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v52 = (uint64_t)a1
      + OBJC_IVAR____TtCV21DocumentUnderstanding53DocumentUnderstanding_DocumentRepresentation_DocumentP33_B25D73F1E23932B4C52C7495EED50DAA13_StorageClass__documentHtmldata;
  swift_beginAccess();
  v53 = v73;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v52, v73, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData?);
  v54 = (uint64_t)v71;
  swift_beginAccess();
  outlined assign with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v53, v54, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData?);
  swift_endAccess();
  v55 = (uint64_t)a1
      + OBJC_IVAR____TtCV21DocumentUnderstanding53DocumentUnderstanding_DocumentRepresentation_DocumentP33_B25D73F1E23932B4C52C7495EED50DAA13_StorageClass__documentMessageData;
  swift_beginAccess();
  v56 = v74;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v55, v74, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData?);
  swift_release();
  v57 = (uint64_t)v72;
  swift_beginAccess();
  outlined assign with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v56, v57, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData?);
  swift_endAccess();
  return v1;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0+ OBJC_IVAR____TtCV21DocumentUnderstanding53DocumentUnderstanding_DocumentRepresentation_DocumentP33_B25D73F1E23932B4C52C7495EED50DAA13_StorageClass__documentHtmldata, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData?);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0+ OBJC_IVAR____TtCV21DocumentUnderstanding53DocumentUnderstanding_DocumentRepresentation_DocumentP33_B25D73F1E23932B4C52C7495EED50DAA13_StorageClass__documentMessageData, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData?);
  return v0;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.__deallocating_deinit()
{
  DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.deinit();
  return swift_deallocClassInstance();
}

uint64_t DocumentUnderstanding_DocumentRepresentation_Document.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v7 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
    swift_allocObject();
    v8 = (_QWORD *)swift_retain();
    *(_QWORD *)(v3 + v7) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v8);
    swift_release();
  }
  v9 = swift_retain();
  closure #1 in DocumentUnderstanding_DocumentRepresentation_Document.decodeMessage<A>(decoder:)(v9, a1, a2, a3);
  return swift_release();
}

uint64_t closure #1 in DocumentUnderstanding_DocumentRepresentation_Document.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t (*v16)();
  unint64_t *v17;
  void *v18;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          closure #1 in closure #1 in DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.decodeMessage<A>(decoder:)();
          break;
        case 2:
          closure #2 in closure #1 in DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.decodeMessage<A>(decoder:)();
          break;
        case 3:
          closure #3 in closure #1 in DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.decodeMessage<A>(decoder:)();
          break;
        case 4:
          closure #4 in closure #1 in DocumentUnderstanding_DocumentRepresentation_Document.decodeMessage<A>(decoder:)();
          break;
        case 5:
          closure #5 in closure #1 in DocumentUnderstanding_DocumentRepresentation_Document.decodeMessage<A>(decoder:)();
          break;
        case 6:
          closure #6 in closure #1 in DocumentUnderstanding_DocumentRepresentation_Document.decodeMessage<A>(decoder:)();
          break;
        case 7:
          closure #7 in closure #1 in DocumentUnderstanding_DocumentRepresentation_Document.decodeMessage<A>(decoder:)();
          break;
        case 8:
          closure #8 in closure #1 in DocumentUnderstanding_DocumentRepresentation_Document.decodeMessage<A>(decoder:)();
          break;
        case 9:
          closure #9 in closure #1 in DocumentUnderstanding_DocumentRepresentation_Document.decodeMessage<A>(decoder:)();
          break;
        case 10:
          closure #10 in closure #1 in DocumentUnderstanding_DocumentRepresentation_Document.decodeMessage<A>(decoder:)();
          break;
        case 11:
          closure #11 in closure #1 in DocumentUnderstanding_DocumentRepresentation_Document.decodeMessage<A>(decoder:)();
          break;
        case 12:
          closure #12 in closure #1 in DocumentUnderstanding_DocumentRepresentation_Document.decodeMessage<A>(decoder:)();
          break;
        case 13:
          closure #13 in closure #1 in DocumentUnderstanding_DocumentRepresentation_Document.decodeMessage<A>(decoder:)();
          break;
        case 14:
          closure #14 in closure #1 in DocumentUnderstanding_DocumentRepresentation_Document.decodeMessage<A>(decoder:)();
          break;
        case 15:
          closure #15 in closure #1 in DocumentUnderstanding_DocumentRepresentation_Document.decodeMessage<A>(decoder:)();
          break;
        case 16:
          closure #16 in closure #1 in DocumentUnderstanding_DocumentRepresentation_Document.decodeMessage<A>(decoder:)();
          break;
        case 17:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV21DocumentUnderstanding53DocumentUnderstanding_DocumentRepresentation_DocumentP33_B25D73F1E23932B4C52C7495EED50DAA13_StorageClass__documentHtmldata;
          v16 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData;
          v17 = &lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData and conformance DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData;
          v18 = &protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData;
          goto LABEL_25;
        case 18:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV21DocumentUnderstanding53DocumentUnderstanding_DocumentRepresentation_DocumentP33_B25D73F1E23932B4C52C7495EED50DAA13_StorageClass__documentMessageData;
          v16 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData;
          v17 = &lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_DocumentMessageData and conformance DocumentUnderstanding_DocumentRepresentation_DocumentMessageData;
          v18 = &protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData;
LABEL_25:
          closure #7 in closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntity.decodeMessage<A>(decoder:)(v11, v12, v13, v14, (uint64_t)v15, (uint64_t (*)(uint64_t))v16, v17, (uint64_t)v18);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #4 in closure #1 in DocumentUnderstanding_DocumentRepresentation_Document.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #5 in closure #1 in DocumentUnderstanding_DocumentRepresentation_Document.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #6 in closure #1 in DocumentUnderstanding_DocumentRepresentation_Document.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #7 in closure #1 in DocumentUnderstanding_DocumentRepresentation_Document.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #8 in closure #1 in DocumentUnderstanding_DocumentRepresentation_Document.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #9 in closure #1 in DocumentUnderstanding_DocumentRepresentation_Document.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeRepeatedStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #10 in closure #1 in DocumentUnderstanding_DocumentRepresentation_Document.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #11 in closure #1 in DocumentUnderstanding_DocumentRepresentation_Document.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #12 in closure #1 in DocumentUnderstanding_DocumentRepresentation_Document.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #13 in closure #1 in DocumentUnderstanding_DocumentRepresentation_Document.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #14 in closure #1 in DocumentUnderstanding_DocumentRepresentation_Document.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
  return swift_endAccess();
}

uint64_t closure #15 in closure #1 in DocumentUnderstanding_DocumentRepresentation_Document.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
  return swift_endAccess();
}

uint64_t closure #16 in closure #1 in DocumentUnderstanding_DocumentRepresentation_Document.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement();
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity((unint64_t *)&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_DocumentUIElement and conformance DocumentUnderstanding_DocumentRepresentation_DocumentUIElement, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement);
  dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
  return swift_endAccess();
}

uint64_t DocumentUnderstanding_DocumentRepresentation_Document.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t result;

  type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0);
  v7 = swift_retain();
  closure #1 in DocumentUnderstanding_DocumentRepresentation_Document.traverse<A>(visitor:)(v7, a1, a2, a3);
  result = swift_release();
  if (!v3)
    return UnknownStorage.traverse<A>(visitor:)();
  return result;
}

uint64_t closure #1 in DocumentUnderstanding_DocumentRepresentation_Document.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t result;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;

  swift_beginAccess();
  v9 = *(_QWORD *)(a1 + 24);
  v10 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000) == 0)
    v10 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFLL;
  if (v10)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v4)
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  v11 = *(_QWORD *)(a1 + 40);
  v12 = HIBYTE(v11) & 0xF;
  if ((v11 & 0x2000000000000000) == 0)
    v12 = *(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFLL;
  if (v12)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v4)
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  v13 = *(_QWORD *)(a1 + 56);
  v14 = HIBYTE(v13) & 0xF;
  if ((v13 & 0x2000000000000000) == 0)
    v14 = *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFLL;
  if (v14)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v4)
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  v15 = *(_QWORD *)(a1 + 72);
  v16 = HIBYTE(v15) & 0xF;
  if ((v15 & 0x2000000000000000) == 0)
    v16 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL;
  if (v16)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v4)
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  v17 = *(_QWORD *)(a1 + 88);
  v18 = HIBYTE(v17) & 0xF;
  if ((v17 & 0x2000000000000000) == 0)
    v18 = *(_QWORD *)(a1 + 80) & 0xFFFFFFFFFFFFLL;
  if (v18)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v4)
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  v19 = *(_QWORD *)(a1 + 104);
  v20 = HIBYTE(v19) & 0xF;
  if ((v19 & 0x2000000000000000) == 0)
    v20 = *(_QWORD *)(a1 + 96) & 0xFFFFFFFFFFFFLL;
  if (v20)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v4)
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  v21 = *(_QWORD *)(a1 + 120);
  v22 = HIBYTE(v21) & 0xF;
  if ((v21 & 0x2000000000000000) == 0)
    v22 = *(_QWORD *)(a1 + 112) & 0xFFFFFFFFFFFFLL;
  if (v22)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (!v4)
    {
      swift_bridgeObjectRelease();
      goto LABEL_36;
    }
    return swift_bridgeObjectRelease();
  }
LABEL_36:
  swift_beginAccess();
  v23 = *(_QWORD *)(a1 + 136);
  v24 = HIBYTE(v23) & 0xF;
  if ((v23 & 0x2000000000000000) == 0)
    v24 = *(_QWORD *)(a1 + 128) & 0xFFFFFFFFFFFFLL;
  if (v24)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v4)
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(a1 + 144) + 16)
    || (swift_bridgeObjectRetain(),
        dispatch thunk of Visitor.visitRepeatedStringField(value:fieldNumber:)(),
        result = swift_bridgeObjectRelease(),
        !v4))
  {
    swift_beginAccess();
    v26 = *(_QWORD *)(a1 + 160);
    v27 = HIBYTE(v26) & 0xF;
    if ((v26 & 0x2000000000000000) == 0)
      v27 = *(_QWORD *)(a1 + 152) & 0xFFFFFFFFFFFFLL;
    if (!v27
      || (swift_bridgeObjectRetain(),
          dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(),
          result = swift_bridgeObjectRelease(),
          !v4))
    {
      swift_beginAccess();
      v28 = *(_QWORD *)(a1 + 176);
      v29 = HIBYTE(v28) & 0xF;
      if ((v28 & 0x2000000000000000) == 0)
        v29 = *(_QWORD *)(a1 + 168) & 0xFFFFFFFFFFFFLL;
      if (!v29
        || (swift_bridgeObjectRetain(),
            dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(),
            result = swift_bridgeObjectRelease(),
            !v4))
      {
        swift_beginAccess();
        v30 = *(_QWORD *)(a1 + 192);
        v31 = HIBYTE(v30) & 0xF;
        if ((v30 & 0x2000000000000000) == 0)
          v31 = *(_QWORD *)(a1 + 184) & 0xFFFFFFFFFFFFLL;
        if (!v31
          || (swift_bridgeObjectRetain(),
              dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(),
              result = swift_bridgeObjectRelease(),
              !v4))
        {
          swift_beginAccess();
          v32 = *(_QWORD *)(a1 + 208);
          v33 = HIBYTE(v32) & 0xF;
          if ((v32 & 0x2000000000000000) == 0)
            v33 = *(_QWORD *)(a1 + 200) & 0xFFFFFFFFFFFFLL;
          if (!v33
            || (swift_bridgeObjectRetain(),
                dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(),
                result = swift_bridgeObjectRelease(),
                !v4))
          {
            swift_beginAccess();
            if (*(double *)(a1 + 216) == 0.0
              || (result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(), !v4))
            {
              swift_beginAccess();
              if (*(double *)(a1 + 224) == 0.0
                || (result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(), !v4))
              {
                swift_beginAccess();
                if (!*(_QWORD *)(*(_QWORD *)(a1 + 232) + 16)
                  || (type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement(),
                      lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity((unint64_t *)&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_DocumentUIElement and conformance DocumentUnderstanding_DocumentRepresentation_DocumentUIElement, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement), swift_bridgeObjectRetain(), dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), result = swift_bridgeObjectRelease(), !v4))
                {
                  result = closure #1 in closure #1 in DocumentUnderstanding_DocumentRepresentation_Document.traverse<A>(visitor:)(a1, a2, a3, a4);
                  if (!v4)
                    return closure #2 in closure #1 in DocumentUnderstanding_DocumentRepresentation_Document.traverse<A>(visitor:)(a1, a2, a3, a4);
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t closure #1 in closure #1 in DocumentUnderstanding_DocumentRepresentation_Document.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV21DocumentUnderstanding53DocumentUnderstanding_DocumentRepresentation_DocumentP33_B25D73F1E23932B4C52C7495EED50DAA13_StorageClass__documentHtmldata;
  swift_beginAccess();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v12, (uint64_t)v7, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v7, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData?);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v7, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData);
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData and conformance DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData);
}

uint64_t closure #2 in closure #1 in DocumentUnderstanding_DocumentRepresentation_Document.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV21DocumentUnderstanding53DocumentUnderstanding_DocumentRepresentation_DocumentP33_B25D73F1E23932B4C52C7495EED50DAA13_StorageClass__documentMessageData;
  swift_beginAccess();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v12, (uint64_t)v7, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v7, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData?);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v7, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData);
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_DocumentMessageData and conformance DocumentUnderstanding_DocumentRepresentation_DocumentMessageData, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData);
}

BOOL closure #1 in static DocumentUnderstanding_DocumentRepresentation_Document.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  _BOOL8 result;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  double v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  unsigned int (*v68)(uint64_t, uint64_t, uint64_t);
  char *v69;
  char v70;
  uint64_t v71;
  _BYTE *v72;
  uint64_t v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int (*v77)(uint64_t, uint64_t, uint64_t);
  _BYTE *v78;
  _BYTE *v79;
  char v80;
  _BYTE v81[12];
  int v82;
  _BYTE *v83;
  _BYTE *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  _BYTE *v90;
  _BYTE *v91;

  v4 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData();
  v87 = *(_QWORD *)(v4 - 8);
  v88 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v83 = &v81[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DocumentUnderstanding_DocumentRepresentation_DocumentMessageData?, DocumentUnderstanding_DocumentRepresentation_DocumentMessageData?));
  MEMORY[0x24BDAC7A8](v86);
  v89 = &v81[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData?);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v84 = &v81[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v8);
  v90 = &v81[-v10];
  v11 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v85 = &v81[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData?, DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData?));
  MEMORY[0x24BDAC7A8](v14);
  v91 = &v81[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData?);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (uint64_t *)&v81[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v17);
  v21 = &v81[-v20];
  swift_beginAccess();
  v22 = *(_QWORD *)(a1 + 16);
  v23 = *(_QWORD *)(a1 + 24);
  swift_beginAccess();
  if (v22 == *(_QWORD *)(a2 + 16) && v23 == *(_QWORD *)(a2 + 24)
    || (v24 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v24 & 1) != 0))
  {
    if ((swift_beginAccess(),
          v26 = *(_QWORD *)(a1 + 32),
          v27 = *(_QWORD *)(a1 + 40),
          swift_beginAccess(),
          v26 == *(_QWORD *)(a2 + 32))
      && v27 == *(_QWORD *)(a2 + 40)
      || (v28 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v28 & 1) != 0))
    {
      if ((swift_beginAccess(),
            v29 = *(_QWORD *)(a1 + 48),
            v30 = *(_QWORD *)(a1 + 56),
            swift_beginAccess(),
            v29 == *(_QWORD *)(a2 + 48))
        && v30 == *(_QWORD *)(a2 + 56)
        || (v31 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v31 & 1) != 0))
      {
        if ((swift_beginAccess(),
              v32 = *(_QWORD *)(a1 + 64),
              v33 = *(_QWORD *)(a1 + 72),
              swift_beginAccess(),
              v32 == *(_QWORD *)(a2 + 64))
          && v33 == *(_QWORD *)(a2 + 72)
          || (v34 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v34 & 1) != 0))
        {
          if ((swift_beginAccess(),
                v35 = *(_QWORD *)(a1 + 80),
                v36 = *(_QWORD *)(a1 + 88),
                swift_beginAccess(),
                v35 == *(_QWORD *)(a2 + 80))
            && v36 == *(_QWORD *)(a2 + 88)
            || (v37 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v37 & 1) != 0))
          {
            if ((swift_beginAccess(),
                  v38 = *(_QWORD *)(a1 + 96),
                  v39 = *(_QWORD *)(a1 + 104),
                  swift_beginAccess(),
                  v38 == *(_QWORD *)(a2 + 96))
              && v39 == *(_QWORD *)(a2 + 104)
              || (v40 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v40 & 1) != 0))
            {
              if ((swift_beginAccess(),
                    v41 = *(_QWORD *)(a1 + 112),
                    v42 = *(_QWORD *)(a1 + 120),
                    swift_beginAccess(),
                    v41 == *(_QWORD *)(a2 + 112))
                && v42 == *(_QWORD *)(a2 + 120)
                || (v43 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v43 & 1) != 0))
              {
                if ((swift_beginAccess(),
                      v44 = *(_QWORD *)(a1 + 128),
                      v45 = *(_QWORD *)(a1 + 136),
                      swift_beginAccess(),
                      v44 == *(_QWORD *)(a2 + 128))
                  && v45 == *(_QWORD *)(a2 + 136)
                  || (v46 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v46 & 1) != 0))
                {
                  swift_beginAccess();
                  v47 = *(_QWORD **)(a1 + 144);
                  swift_beginAccess();
                  if ((specialized static Array<A>.== infix(_:_:)(v47, *(_QWORD **)(a2 + 144)) & 1) == 0)
                    return 0;
                  if ((swift_beginAccess(),
                        v48 = *(_QWORD *)(a1 + 152),
                        v49 = *(_QWORD *)(a1 + 160),
                        swift_beginAccess(),
                        v48 == *(_QWORD *)(a2 + 152))
                    && v49 == *(_QWORD *)(a2 + 160)
                    || (v50 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v50 & 1) != 0))
                  {
                    if ((swift_beginAccess(),
                          v51 = *(_QWORD *)(a1 + 168),
                          v52 = *(_QWORD *)(a1 + 176),
                          swift_beginAccess(),
                          v51 == *(_QWORD *)(a2 + 168))
                      && v52 == *(_QWORD *)(a2 + 176)
                      || (v53 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v53 & 1) != 0))
                    {
                      if ((swift_beginAccess(),
                            v54 = *(_QWORD *)(a1 + 184),
                            v55 = *(_QWORD *)(a1 + 192),
                            swift_beginAccess(),
                            v54 == *(_QWORD *)(a2 + 184))
                        && v55 == *(_QWORD *)(a2 + 192)
                        || (v56 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v56 & 1) != 0))
                      {
                        if ((swift_beginAccess(),
                              v57 = *(_QWORD *)(a1 + 200),
                              v58 = *(_QWORD *)(a1 + 208),
                              swift_beginAccess(),
                              v57 == *(_QWORD *)(a2 + 200))
                          && v58 == *(_QWORD *)(a2 + 208)
                          || (v59 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v59 & 1) != 0))
                        {
                          swift_beginAccess();
                          v60 = *(double *)(a1 + 216);
                          swift_beginAccess();
                          if (v60 != *(double *)(a2 + 216))
                            return 0;
                          swift_beginAccess();
                          v61 = *(double *)(a1 + 224);
                          swift_beginAccess();
                          if (v61 != *(double *)(a2 + 224))
                            return 0;
                          swift_beginAccess();
                          v62 = *(_QWORD *)(a1 + 232);
                          swift_beginAccess();
                          v63 = *(_QWORD *)(a2 + 232);
                          swift_retain();
                          swift_retain();
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                          v82 = specialized static Array<A>.== infix(_:_:)(v62, v63);
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          if ((v82 & 1) == 0)
                            goto LABEL_47;
                          v64 = a1
                              + OBJC_IVAR____TtCV21DocumentUnderstanding53DocumentUnderstanding_DocumentRepresentation_DocumentP33_B25D73F1E23932B4C52C7495EED50DAA13_StorageClass__documentHtmldata;
                          swift_beginAccess();
                          outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v64, (uint64_t)v21, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData?);
                          v65 = a2
                              + OBJC_IVAR____TtCV21DocumentUnderstanding53DocumentUnderstanding_DocumentRepresentation_DocumentP33_B25D73F1E23932B4C52C7495EED50DAA13_StorageClass__documentHtmldata;
                          swift_beginAccess();
                          v66 = v91;
                          v67 = (uint64_t)&v91[*(int *)(v14 + 48)];
                          outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v21, (uint64_t)v91, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData?);
                          outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v65, v67, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData?);
                          v68 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
                          if (v68((uint64_t)v66, 1, v11) == 1)
                          {
                            outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v21, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData?);
                            if (v68(v67, 1, v11) == 1)
                            {
                              outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v66, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData?);
LABEL_51:
                              v71 = a1
                                  + OBJC_IVAR____TtCV21DocumentUnderstanding53DocumentUnderstanding_DocumentRepresentation_DocumentP33_B25D73F1E23932B4C52C7495EED50DAA13_StorageClass__documentMessageData;
                              swift_beginAccess();
                              v72 = v90;
                              outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v71, (uint64_t)v90, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData?);
                              v73 = a2
                                  + OBJC_IVAR____TtCV21DocumentUnderstanding53DocumentUnderstanding_DocumentRepresentation_DocumentP33_B25D73F1E23932B4C52C7495EED50DAA13_StorageClass__documentMessageData;
                              swift_beginAccess();
                              v74 = v89;
                              v75 = (uint64_t)&v89[*(int *)(v86 + 48)];
                              outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v72, (uint64_t)v89, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData?);
                              outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v73, v75, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData?);
                              v76 = v88;
                              v77 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v87 + 48);
                              if (v77((uint64_t)v74, 1, v88) == 1)
                              {
                                swift_release();
                                swift_release();
                                outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v72, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData?);
                                if (v77(v75, 1, v76) == 1)
                                {
                                  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v74, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData?);
                                  return 1;
                                }
                              }
                              else
                              {
                                v78 = v84;
                                outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v74, (uint64_t)v84, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData?);
                                if (v77(v75, 1, v76) != 1)
                                {
                                  v79 = v83;
                                  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v75, (uint64_t)v83, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData);
                                  v80 = specialized static DocumentUnderstanding_DocumentRepresentation_DocumentMessageData.== infix(_:_:)((uint64_t)v78, (uint64_t)v79);
                                  swift_release();
                                  swift_release();
                                  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v79, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData);
                                  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v90, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData?);
                                  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v78, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData);
                                  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v74, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData?);
                                  return (v80 & 1) != 0;
                                }
                                swift_release();
                                swift_release();
                                outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v90, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData?);
                                outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v78, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData);
                              }
                              outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v74, &demangling cache variable for type metadata for (DocumentUnderstanding_DocumentRepresentation_DocumentMessageData?, DocumentUnderstanding_DocumentRepresentation_DocumentMessageData?));
                              return 0;
                            }
                          }
                          else
                          {
                            outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v66, (uint64_t)v19, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData?);
                            if (v68(v67, 1, v11) != 1)
                            {
                              v69 = v85;
                              outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v67, (uint64_t)v85, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData);
                              v70 = specialized static DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData.== infix(_:_:)(v19, v69);
                              outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v69, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData);
                              outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v21, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData?);
                              outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData);
                              outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v66, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData?);
                              if ((v70 & 1) != 0)
                                goto LABEL_51;
LABEL_47:
                              swift_release();
                              swift_release();
                              return 0;
                            }
                            outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v21, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData?);
                            outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData);
                          }
                          outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v66, &demangling cache variable for type metadata for (DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData?, DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData?));
                          goto LABEL_47;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

Swift::Int DocumentUnderstanding_DocumentRepresentation_Document.hashValue.getter()
{
  Hasher.init(_seed:)();
  type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0);
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_Document and conformance DocumentUnderstanding_DocumentRepresentation_Document, type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_Document);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Message.init() in conformance DocumentUnderstanding_DocumentRepresentation_Document@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  UnknownStorage.init()();
  v4 = *(int *)(a1 + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a2 + v4) = static DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.defaultInstance;
  return swift_retain();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance DocumentUnderstanding_DocumentRepresentation_Document()
{
  return 0xD000000000000037;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance DocumentUnderstanding_DocumentRepresentation_Document(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return DocumentUnderstanding_DocumentRepresentation_Document.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance DocumentUnderstanding_DocumentRepresentation_Document(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return DocumentUnderstanding_DocumentRepresentation_Document.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance DocumentUnderstanding_DocumentRepresentation_Document()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_Document and conformance DocumentUnderstanding_DocumentRepresentation_Document, type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_Document);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DocumentUnderstanding_DocumentRepresentation_Document@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v2 = type metadata accessor for _NameMap();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static DocumentUnderstanding_DocumentRepresentation_Document._protobuf_nameMap);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DocumentUnderstanding_DocumentRepresentation_Document()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity((unint64_t *)&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_Document and conformance DocumentUnderstanding_DocumentRepresentation_Document, type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_Document);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DocumentUnderstanding_DocumentRepresentation_Document()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity((unint64_t *)&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_Document and conformance DocumentUnderstanding_DocumentRepresentation_Document, type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_Document);
  return Message.hash(into:)();
}

uint64_t specialized static DocumentUnderstanding_DocumentRepresentation_Document.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  void (*v15)(char *, uint64_t, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v19 - v9;
  v11 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  v12 = *(_QWORD *)(a1 + v11);
  v13 = *(_QWORD *)(a2 + v11);
  if (v12 == v13
    || (swift_retain(),
        swift_retain(),
        v14 = closure #1 in static DocumentUnderstanding_DocumentRepresentation_Document.== infix(_:_:)(v12, v13),
        swift_release(),
        swift_release(),
        v14))
  {
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15(v10, a1, v4);
    v15(v8, a2, v4);
    lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v10, v4);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in DocumentUnderstanding_DocumentRepresentation_Document()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_Document and conformance DocumentUnderstanding_DocumentRepresentation_Document, type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_Document);
}

uint64_t base witness table accessor for Message in DocumentUnderstanding_DocumentRepresentation_Document()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity((unint64_t *)&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_Document and conformance DocumentUnderstanding_DocumentRepresentation_Document, type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_Document);
}

uint64_t base witness table accessor for Hashable in DocumentUnderstanding_DocumentRepresentation_Document()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_Document and conformance DocumentUnderstanding_DocumentRepresentation_Document, type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_Document);
}

uint64_t base witness table accessor for Equatable in DocumentUnderstanding_DocumentRepresentation_Document()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_Document and conformance DocumentUnderstanding_DocumentRepresentation_Document, type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_Document);
}

double sub_228418C98@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  double result;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20));
  swift_beginAccess();
  result = *(double *)(v3 + 216);
  *a2 = result;
  return result;
}

double sub_228418CF0@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  double result;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20));
  swift_beginAccess();
  result = *(double *)(v3 + 224);
  *a2 = result;
  return result;
}

uint64_t sub_228418D54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for DocumentUnderstanding_ClientInterface_StructuredEntity.calendarEvent : DocumentUnderstanding_ClientInterface_StructuredEntity(a1, a2, a3, a4, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData, (uint64_t (*)(char *))DocumentUnderstanding_DocumentRepresentation_Document.documentHtmldata.setter);
}

uint64_t sub_228418D78@<X0>(_QWORD *a1@<X8>)
{
  return DocumentUnderstanding_DocumentRepresentation_Document.documentMessageData.getter(a1);
}

uint64_t sub_228418D98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for DocumentUnderstanding_ClientInterface_StructuredEntity.calendarEvent : DocumentUnderstanding_ClientInterface_StructuredEntity(a1, a2, a3, a4, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData, (uint64_t (*)(char *))DocumentUnderstanding_DocumentRepresentation_Document.documentMessageData.setter);
}

uint64_t getEnumTagSinglePayload for DocumentUnderstanding_DocumentRepresentation_Document()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_228418DC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for DocumentUnderstanding_DocumentRepresentation_Document()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_228418E50(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t ObjC metadata update function for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass()
{
  return type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
}

void type metadata completion function for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent?(319, &lazy cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData?, (void (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData);
  if (v0 <= 0x3F)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent?(319, &lazy cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData?, (void (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;

  *a1 = MEMORY[0x24BEE4AF8];
  v2 = type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse();
  UnknownStorage.init()();
  v3 = (char *)a1 + *(int *)(v2 + 24);
  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
}

uint64_t type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse()
{
  uint64_t result;

  result = type metadata singleton initialization cache for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse;
  if (!type metadata singleton initialization cache for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse)
    return swift_getSingletonMetadata();
  return result;
}

BOOL DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse.hasResponseDebugInfo.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse();
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?(v0 + *(int *)(v4 + 24), (uint64_t)v3);
  v5 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v3, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  return v6;
}

uint64_t DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse.responseDebugInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse();
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?(v1 + *(int *)(v6 + 24), (uint64_t)v5);
  v7 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of DocumentUnderstanding_ClientInterface_DebugInfo((uint64_t)v5, a1);
  UnknownStorage.init()();
  v8 = (_QWORD *)(a1 + *(int *)(v7 + 20));
  *v8 = 0;
  v8[1] = 0;
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
}

uint64_t DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse.responseDebugInfo.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1
     + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse()
              + 24);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v3, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  outlined init with take of DocumentUnderstanding_ClientInterface_DebugInfo(a1, v3);
  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

uint64_t DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse.foundEntities.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse.foundEntities.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse.foundEntities.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse.responseDebugInfo : DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse();
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?(a1 + *(int *)(v7 + 24), (uint64_t)v6);
  v8 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of DocumentUnderstanding_ClientInterface_DebugInfo((uint64_t)v6, a2);
  UnknownStorage.init()();
  v9 = (_QWORD *)(a2 + *(int *)(v8 + 20));
  *v9 = 0;
  v9[1] = 0;
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v6, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse.responseDebugInfo : DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo(a1, (uint64_t)v7);
  v8 = a2
     + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse()
              + 24);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v8, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  outlined init with take of DocumentUnderstanding_ClientInterface_DebugInfo((uint64_t)v7, v8);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

void (*DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse.responseDebugInfo.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse()
               + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?(v1 + v10, (uint64_t)v5);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_QWORD *)v11 = 0;
    *((_QWORD *)v11 + 1) = 0;
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  }
  else
  {
    outlined init with take of DocumentUnderstanding_ClientInterface_DebugInfo((uint64_t)v5, (uint64_t)v9);
  }
  return DocumentUnderstanding_ClientInterface_TopicDetectionResponse.responseDebugInfo.modify;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse.clearResponseDebugInfo()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0
     + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse()
              + 24);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v1, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  v2 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1
     + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse()
              + 20);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1
     + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse()
              + 20);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse.unknownFields.modify())(_QWORD)
{
  type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse();
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

void *DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse.protoMessageName;
}

unint64_t static DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse.protoMessageName.getter()
{
  return 0xD00000000000004ALL;
}

uint64_t DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse._protobuf_nameMap);
}

uint64_t static DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v2 = type metadata accessor for _NameMap();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse._protobuf_nameMap);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        closure #2 in DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse.decodeMessage<A>(decoder:)();
      }
      else if (result == 1)
      {
        type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult();
        lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult and conformance DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #2 in DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse.decodeMessage<A>(decoder:)()
{
  type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse();
  type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_DebugInfo and conformance DocumentUnderstanding_ClientInterface_DebugInfo, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_DebugInfo);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)v0 + 16)
    || (type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult(),
        lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult and conformance DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    result = closure #1 in DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse.traverse<A>(visitor:)(v0);
    if (!v1)
    {
      type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse();
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #1 in DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD v11[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse();
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?(a1 + *(int *)(v9 + 24), (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v4, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  outlined init with take of DocumentUnderstanding_ClientInterface_DebugInfo((uint64_t)v4, (uint64_t)v8);
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_DebugInfo and conformance DocumentUnderstanding_ClientInterface_DebugInfo, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_DebugInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of DocumentUnderstanding_ClientInterface_DebugInfo((uint64_t)v8);
}

Swift::Int DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse.hashValue.getter()
{
  Hasher.init(_seed:)();
  type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse();
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse and conformance DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse()
{
  return 0xD00000000000004ALL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse()
{
  return DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse()
{
  return DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse and conformance DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v2 = type metadata accessor for _NameMap();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse._protobuf_nameMap);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse and conformance DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse and conformance DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse);
  return Message.hash(into:)();
}

uint64_t specialized static DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t *v31;
  char *v32;
  uint64_t v33;
  unsigned int v34;
  char v35;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  char *v43;
  void (*v44)(char *, uint64_t);
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v48 = type metadata accessor for UnknownStorage();
  v50 = *(_QWORD *)(v48 - 8);
  v4 = MEMORY[0x24BDAC7A8](v48);
  v49 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v45 - v6;
  v8 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v51 = *(_QWORD *)(v8 - 8);
  v52 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DocumentUnderstanding_ClientInterface_DebugInfo?, DocumentUnderstanding_ClientInterface_DebugInfo?));
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v45 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v45 - v21;
  v23 = a1;
  v24 = *a1;
  v25 = a2;
  if ((specialized static Array<A>.== infix(_:_:)(v24, *a2) & 1) == 0)
    goto LABEL_8;
  v45 = v10;
  v46 = v17;
  v47 = v7;
  v26 = type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse();
  v27 = v23;
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?((uint64_t)v23 + *(int *)(v26 + 24), (uint64_t)v22);
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?((uint64_t)a2 + *(int *)(v26 + 24), (uint64_t)v20);
  v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?((uint64_t)v22, (uint64_t)v13);
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?((uint64_t)v20, v28);
  v29 = v52;
  v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48);
  v31 = v25;
  if (v30((uint64_t)v13, 1, v52) == 1)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v20, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v22, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    if (v30(v28, 1, v29) == 1)
    {
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v13, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
      v32 = v47;
LABEL_11:
      v39 = (uint64_t)v27 + *(int *)(v26 + 20);
      v40 = v50;
      v41 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 16);
      v42 = v48;
      v41(v32, v39, v48);
      v43 = v49;
      v41(v49, (uint64_t)v31 + *(int *)(v26 + 20), v42);
      lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v35 = dispatch thunk of static Equatable.== infix(_:_:)();
      v44 = *(void (**)(char *, uint64_t))(v40 + 8);
      v44(v43, v42);
      v44(v32, v42);
      return v35 & 1;
    }
    goto LABEL_7;
  }
  v33 = (uint64_t)v46;
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?((uint64_t)v13, (uint64_t)v46);
  v34 = v30(v28, 1, v29);
  v32 = v47;
  if (v34 == 1)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v20, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v22, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    outlined destroy of DocumentUnderstanding_ClientInterface_DebugInfo(v33);
LABEL_7:
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v13, &demangling cache variable for type metadata for (DocumentUnderstanding_ClientInterface_DebugInfo?, DocumentUnderstanding_ClientInterface_DebugInfo?));
    goto LABEL_8;
  }
  v37 = (uint64_t)v45;
  outlined init with take of DocumentUnderstanding_ClientInterface_DebugInfo(v28, (uint64_t)v45);
  v38 = static DocumentUnderstanding_ClientInterface_DebugInfo.== infix(_:_:)(v33, v37);
  outlined destroy of DocumentUnderstanding_ClientInterface_DebugInfo(v37);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v20, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v22, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  outlined destroy of DocumentUnderstanding_ClientInterface_DebugInfo(v33);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v13, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  if ((v38 & 1) != 0)
    goto LABEL_11;
LABEL_8:
  v35 = 0;
  return v35 & 1;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse and conformance DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse);
}

uint64_t base witness table accessor for Message in DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse and conformance DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse);
}

uint64_t base witness table accessor for Hashable in DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse and conformance DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse);
}

uint64_t base witness table accessor for Equatable in DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse and conformance DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse);
}

uint64_t getEnumTagSinglePayload for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_22841A2F4(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_22841A3A4(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

uint64_t DocumentUnderstanding_ClientInterface_CategoryClassificationResponse.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;

  *a1 = MEMORY[0x24BEE4AF8];
  v2 = type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse();
  UnknownStorage.init()();
  v3 = (char *)a1 + *(int *)(v2 + 24);
  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
}

uint64_t type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse()
{
  uint64_t result;

  result = type metadata singleton initialization cache for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse;
  if (!type metadata singleton initialization cache for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse)
    return swift_getSingletonMetadata();
  return result;
}

BOOL DocumentUnderstanding_ClientInterface_CategoryClassificationResponse.hasResponseDebugInfo.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse();
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?(v0 + *(int *)(v4 + 24), (uint64_t)v3);
  v5 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v3, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  return v6;
}

uint64_t DocumentUnderstanding_ClientInterface_CategoryClassificationResponse.responseDebugInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse();
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?(v1 + *(int *)(v6 + 24), (uint64_t)v5);
  v7 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of DocumentUnderstanding_ClientInterface_DebugInfo((uint64_t)v5, a1);
  UnknownStorage.init()();
  v8 = (_QWORD *)(a1 + *(int *)(v7 + 20));
  *v8 = 0;
  v8[1] = 0;
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
}

uint64_t DocumentUnderstanding_ClientInterface_CategoryClassificationResponse.responseDebugInfo.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1
     + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse() + 24);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v3, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  outlined init with take of DocumentUnderstanding_ClientInterface_DebugInfo(a1, v3);
  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

uint64_t DocumentUnderstanding_ClientInterface_CategoryClassificationResponse.categories.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DocumentUnderstanding_ClientInterface_CategoryClassificationResponse.categories.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*DocumentUnderstanding_ClientInterface_CategoryClassificationResponse.categories.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse.responseDebugInfo : DocumentUnderstanding_ClientInterface_CategoryClassificationResponse@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse();
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?(a1 + *(int *)(v7 + 24), (uint64_t)v6);
  v8 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of DocumentUnderstanding_ClientInterface_DebugInfo((uint64_t)v6, a2);
  UnknownStorage.init()();
  v9 = (_QWORD *)(a2 + *(int *)(v8 + 20));
  *v9 = 0;
  v9[1] = 0;
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v6, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse.responseDebugInfo : DocumentUnderstanding_ClientInterface_CategoryClassificationResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo(a1, (uint64_t)v7);
  v8 = a2
     + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse() + 24);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v8, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  outlined init with take of DocumentUnderstanding_ClientInterface_DebugInfo((uint64_t)v7, v8);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

void (*DocumentUnderstanding_ClientInterface_CategoryClassificationResponse.responseDebugInfo.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse() + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?(v1 + v10, (uint64_t)v5);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_QWORD *)v11 = 0;
    *((_QWORD *)v11 + 1) = 0;
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  }
  else
  {
    outlined init with take of DocumentUnderstanding_ClientInterface_DebugInfo((uint64_t)v5, (uint64_t)v9);
  }
  return DocumentUnderstanding_ClientInterface_TopicDetectionResponse.responseDebugInfo.modify;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_CategoryClassificationResponse.clearResponseDebugInfo()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0
     + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse() + 24);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v1, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  v2 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t DocumentUnderstanding_ClientInterface_CategoryClassificationResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1
     + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse() + 20);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t DocumentUnderstanding_ClientInterface_CategoryClassificationResponse.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1
     + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse() + 20);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*DocumentUnderstanding_ClientInterface_CategoryClassificationResponse.unknownFields.modify())(_QWORD)
{
  type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse();
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

void *DocumentUnderstanding_ClientInterface_CategoryClassificationResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static DocumentUnderstanding_ClientInterface_CategoryClassificationResponse.protoMessageName;
}

unint64_t static DocumentUnderstanding_ClientInterface_CategoryClassificationResponse.protoMessageName.getter()
{
  return 0xD000000000000046;
}

uint64_t DocumentUnderstanding_ClientInterface_CategoryClassificationResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static DocumentUnderstanding_ClientInterface_CategoryClassificationResponse._protobuf_nameMap);
}

uint64_t static DocumentUnderstanding_ClientInterface_CategoryClassificationResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v2 = type metadata accessor for _NameMap();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static DocumentUnderstanding_ClientInterface_CategoryClassificationResponse._protobuf_nameMap);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t DocumentUnderstanding_ClientInterface_CategoryClassificationResponse.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        closure #2 in DocumentUnderstanding_ClientInterface_CategoryClassificationResponse.decodeMessage<A>(decoder:)();
      }
      else if (result == 1)
      {
        type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult();
        lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_CategoryResult and conformance DocumentUnderstanding_ClientInterface_CategoryResult, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_CategoryResult);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #2 in DocumentUnderstanding_ClientInterface_CategoryClassificationResponse.decodeMessage<A>(decoder:)()
{
  type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse();
  type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_DebugInfo and conformance DocumentUnderstanding_ClientInterface_DebugInfo, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_DebugInfo);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t DocumentUnderstanding_ClientInterface_CategoryClassificationResponse.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)v0 + 16)
    || (type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult(),
        lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_CategoryResult and conformance DocumentUnderstanding_ClientInterface_CategoryResult, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_CategoryResult), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    result = closure #1 in DocumentUnderstanding_ClientInterface_CategoryClassificationResponse.traverse<A>(visitor:)(v0);
    if (!v1)
    {
      type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse();
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #1 in DocumentUnderstanding_ClientInterface_CategoryClassificationResponse.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD v11[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse();
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?(a1 + *(int *)(v9 + 24), (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v4, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  outlined init with take of DocumentUnderstanding_ClientInterface_DebugInfo((uint64_t)v4, (uint64_t)v8);
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_DebugInfo and conformance DocumentUnderstanding_ClientInterface_DebugInfo, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_DebugInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of DocumentUnderstanding_ClientInterface_DebugInfo((uint64_t)v8);
}

Swift::Int DocumentUnderstanding_ClientInterface_CategoryClassificationResponse.hashValue.getter()
{
  Hasher.init(_seed:)();
  type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse();
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_CategoryClassificationResponse and conformance DocumentUnderstanding_ClientInterface_CategoryClassificationResponse, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance DocumentUnderstanding_ClientInterface_CategoryClassificationResponse()
{
  return 0xD000000000000046;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance DocumentUnderstanding_ClientInterface_CategoryClassificationResponse()
{
  return DocumentUnderstanding_ClientInterface_CategoryClassificationResponse.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance DocumentUnderstanding_ClientInterface_CategoryClassificationResponse()
{
  return DocumentUnderstanding_ClientInterface_CategoryClassificationResponse.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance DocumentUnderstanding_ClientInterface_CategoryClassificationResponse()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_CategoryClassificationResponse and conformance DocumentUnderstanding_ClientInterface_CategoryClassificationResponse, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DocumentUnderstanding_ClientInterface_CategoryClassificationResponse@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v2 = type metadata accessor for _NameMap();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static DocumentUnderstanding_ClientInterface_CategoryClassificationResponse._protobuf_nameMap);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DocumentUnderstanding_ClientInterface_CategoryClassificationResponse()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_CategoryClassificationResponse and conformance DocumentUnderstanding_ClientInterface_CategoryClassificationResponse, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DocumentUnderstanding_ClientInterface_CategoryClassificationResponse()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_CategoryClassificationResponse and conformance DocumentUnderstanding_ClientInterface_CategoryClassificationResponse, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse);
  return Message.hash(into:)();
}

uint64_t specialized static DocumentUnderstanding_ClientInterface_CategoryClassificationResponse.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t *v31;
  char *v32;
  uint64_t v33;
  unsigned int v34;
  char v35;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  char *v43;
  void (*v44)(char *, uint64_t);
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v48 = type metadata accessor for UnknownStorage();
  v50 = *(_QWORD *)(v48 - 8);
  v4 = MEMORY[0x24BDAC7A8](v48);
  v49 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v45 - v6;
  v8 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v51 = *(_QWORD *)(v8 - 8);
  v52 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DocumentUnderstanding_ClientInterface_DebugInfo?, DocumentUnderstanding_ClientInterface_DebugInfo?));
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v45 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v45 - v21;
  v23 = a1;
  v24 = *a1;
  v25 = a2;
  if ((specialized static Array<A>.== infix(_:_:)(v24, *a2) & 1) == 0)
    goto LABEL_8;
  v45 = v10;
  v46 = v17;
  v47 = v7;
  v26 = type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse();
  v27 = v23;
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?((uint64_t)v23 + *(int *)(v26 + 24), (uint64_t)v22);
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?((uint64_t)a2 + *(int *)(v26 + 24), (uint64_t)v20);
  v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?((uint64_t)v22, (uint64_t)v13);
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?((uint64_t)v20, v28);
  v29 = v52;
  v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48);
  v31 = v25;
  if (v30((uint64_t)v13, 1, v52) == 1)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v20, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v22, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    if (v30(v28, 1, v29) == 1)
    {
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v13, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
      v32 = v47;
LABEL_11:
      v39 = (uint64_t)v27 + *(int *)(v26 + 20);
      v40 = v50;
      v41 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 16);
      v42 = v48;
      v41(v32, v39, v48);
      v43 = v49;
      v41(v49, (uint64_t)v31 + *(int *)(v26 + 20), v42);
      lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v35 = dispatch thunk of static Equatable.== infix(_:_:)();
      v44 = *(void (**)(char *, uint64_t))(v40 + 8);
      v44(v43, v42);
      v44(v32, v42);
      return v35 & 1;
    }
    goto LABEL_7;
  }
  v33 = (uint64_t)v46;
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?((uint64_t)v13, (uint64_t)v46);
  v34 = v30(v28, 1, v29);
  v32 = v47;
  if (v34 == 1)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v20, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v22, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    outlined destroy of DocumentUnderstanding_ClientInterface_DebugInfo(v33);
LABEL_7:
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v13, &demangling cache variable for type metadata for (DocumentUnderstanding_ClientInterface_DebugInfo?, DocumentUnderstanding_ClientInterface_DebugInfo?));
    goto LABEL_8;
  }
  v37 = (uint64_t)v45;
  outlined init with take of DocumentUnderstanding_ClientInterface_DebugInfo(v28, (uint64_t)v45);
  v38 = static DocumentUnderstanding_ClientInterface_DebugInfo.== infix(_:_:)(v33, v37);
  outlined destroy of DocumentUnderstanding_ClientInterface_DebugInfo(v37);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v20, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v22, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  outlined destroy of DocumentUnderstanding_ClientInterface_DebugInfo(v33);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v13, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  if ((v38 & 1) != 0)
    goto LABEL_11;
LABEL_8:
  v35 = 0;
  return v35 & 1;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in DocumentUnderstanding_ClientInterface_CategoryClassificationResponse()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_CategoryClassificationResponse and conformance DocumentUnderstanding_ClientInterface_CategoryClassificationResponse, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse);
}

uint64_t base witness table accessor for Message in DocumentUnderstanding_ClientInterface_CategoryClassificationResponse()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_CategoryClassificationResponse and conformance DocumentUnderstanding_ClientInterface_CategoryClassificationResponse, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse);
}

uint64_t base witness table accessor for Hashable in DocumentUnderstanding_ClientInterface_CategoryClassificationResponse()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_CategoryClassificationResponse and conformance DocumentUnderstanding_ClientInterface_CategoryClassificationResponse, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse);
}

uint64_t base witness table accessor for Equatable in DocumentUnderstanding_ClientInterface_CategoryClassificationResponse()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_CategoryClassificationResponse and conformance DocumentUnderstanding_ClientInterface_CategoryClassificationResponse, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse);
}

uint64_t getEnumTagSinglePayload for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_22841B784(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_22841B834(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

uint64_t Logger.standard.unsafeMutableAddressor()
{
  return Logger.standard.unsafeMutableAddressor(&one-time initialization token for standard, (uint64_t)static Logger.standard);
}

uint64_t one-time initialization function for standard(uint64_t a1)
{
  return one-time initialization function for standard(a1, static Logger.standard);
}

uint64_t static Logger.standard.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.standard.getter(&one-time initialization token for standard, (uint64_t)static Logger.standard, a1);
}

uint64_t one-time initialization function for signpost(uint64_t a1)
{
  return one-time initialization function for standard(a1, static Logger.signpost);
}

uint64_t one-time initialization function for standard(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return Logger.init(subsystem:category:)();
}

uint64_t Logger.signpost.unsafeMutableAddressor()
{
  return Logger.standard.unsafeMutableAddressor(&one-time initialization token for signpost, (uint64_t)static Logger.signpost);
}

uint64_t Logger.standard.unsafeMutableAddressor(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;

  if (*a1 != -1)
    swift_once();
  v3 = type metadata accessor for Logger();
  return __swift_project_value_buffer(v3, a2);
}

uint64_t static Logger.signpost.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.standard.getter(&one-time initialization token for signpost, (uint64_t)static Logger.signpost, a1);
}

uint64_t static Logger.standard.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

id SQLiteRetrievalDatabase.database.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding23SQLiteRetrievalDatabase_database);
}

uint64_t SQLiteRetrievalDatabase.isFrozen.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding23SQLiteRetrievalDatabase_isFrozen);
}

id SQLiteRetrievalDatabase.__allocating_init(dbURL:isFrozen:)(uint64_t a1, char a2)
{
  objc_class *v2;
  objc_class *v3;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  char v12;
  id v13;
  uint64_t v14;
  objc_super v16;

  v3 = v2;
  v6 = objc_allocWithZone(v2);
  v7 = URL.absoluteString.getter();
  v9 = v8;
  if (one-time initialization token for migrations != -1)
    swift_once();
  v10 = static RetrievalDatabaseMigrations.migrations;
  v11 = objc_allocWithZone((Class)type metadata accessor for SQLiteDatabase());
  swift_bridgeObjectRetain();
  v12 = a2 & 1;
  *(_QWORD *)&v6[OBJC_IVAR____TtC21DocumentUnderstanding23SQLiteRetrievalDatabase_database] = SQLiteDatabase.init(dbPath:migrationsList:isFrozen:)(v7, v9, v10, v12);
  v6[OBJC_IVAR____TtC21DocumentUnderstanding23SQLiteRetrievalDatabase_isFrozen] = v12;

  v16.receiver = v6;
  v16.super_class = v3;
  v13 = objc_msgSendSuper2(&v16, sel_init);
  v14 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(a1, v14);
  return v13;
}

id SQLiteRetrievalDatabase.init(dbURL:isFrozen:)(uint64_t a1, char a2)
{
  void *v2;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  char v11;
  id v12;
  uint64_t v13;
  objc_super v15;

  v5 = v2;
  v6 = URL.absoluteString.getter();
  v8 = v7;
  if (one-time initialization token for migrations != -1)
    swift_once();
  v9 = static RetrievalDatabaseMigrations.migrations;
  v10 = objc_allocWithZone((Class)type metadata accessor for SQLiteDatabase());
  swift_bridgeObjectRetain();
  v11 = a2 & 1;
  *(_QWORD *)&v5[OBJC_IVAR____TtC21DocumentUnderstanding23SQLiteRetrievalDatabase_database] = SQLiteDatabase.init(dbPath:migrationsList:isFrozen:)(v6, v8, v9, v11);
  v5[OBJC_IVAR____TtC21DocumentUnderstanding23SQLiteRetrievalDatabase_isFrozen] = v11;

  v15.receiver = v5;
  v15.super_class = (Class)type metadata accessor for SQLiteRetrievalDatabase();
  v12 = objc_msgSendSuper2(&v15, sel_init);
  v13 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a1, v13);
  return v12;
}

uint64_t type metadata accessor for SQLiteRetrievalDatabase()
{
  return objc_opt_self();
}

Swift::Void __swiftcall SQLiteRetrievalDatabase.insertRecords(records:)(Swift::OpaquePointer records)
{
  uint64_t v1;
  uint64_t v3;
  void (*v4)(unint64_t, unint64_t, void (*)(void *), uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding23SQLiteRetrievalDatabase_isFrozen) & 1) == 0)
  {
    v3 = *((_QWORD *)records._rawValue + 2);
    if (v3)
    {
      v4 = *(void (**)(unint64_t, unint64_t, void (*)(void *), uint64_t, _QWORD, _QWORD))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding23SQLiteRetrievalDatabase_database)) + 0x108);
      swift_bridgeObjectRetain();
      v5 = 32;
      do
      {
        v6 = *(_OWORD *)((char *)records._rawValue + v5 + 16);
        v11 = *(_OWORD *)((char *)records._rawValue + v5);
        v12 = v6;
        v13 = *(_QWORD *)((char *)records._rawValue + v5 + 32);
        v7 = v6;
        outlined retain of VectorRecord((uint64_t)&v11);
        v8 = specialized static DUVectorUtils.normalized(vector:)(v7);
        v9 = swift_allocObject();
        v10 = v12;
        *(_OWORD *)(v9 + 16) = v11;
        *(_OWORD *)(v9 + 32) = v10;
        *(_QWORD *)(v9 + 48) = v13;
        *(_QWORD *)(v9 + 56) = v8;
        outlined retain of VectorRecord((uint64_t)&v11);
        v4(0xD00000000000007ELL, 0x80000002284DB490, partial apply for closure #1 in static RetrievalDatabaseQueries.insertRecord(db:record:), v9, 0, 0);
        swift_release();
        outlined release of VectorRecord((uint64_t)&v11);
        v5 += 40;
        --v3;
      }
      while (v3);
      swift_bridgeObjectRelease();
    }
  }
}

Swift::Void __swiftcall SQLiteRetrievalDatabase.clearAllRecords()()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding23SQLiteRetrievalDatabase_isFrozen) & 1) == 0)
    (*(void (**)(unint64_t, unint64_t, _QWORD, _QWORD, _QWORD, _QWORD))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding23SQLiteRetrievalDatabase_database))
                                                                                               + 0x108))(0xD000000000000017, 0x80000002284DB510, 0, 0, 0, 0);
}

uint64_t SQLiteRetrievalDatabase.fetchNeighborsForVector(vector:distanceLimit:countLimit:)(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(unint64_t, unint64_t, id (*)(void *), uint64_t, uint64_t (*)(void *), uint64_t);
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;

  v7 = *(_QWORD **)(v3 + OBJC_IVAR____TtC21DocumentUnderstanding23SQLiteRetrievalDatabase_database);
  v8 = swift_allocObject();
  v9 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v8 + 16) = MEMORY[0x24BEE4AF8];
  v10 = specialized static DUVectorUtils.normalized(vector:)(a1);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v10;
  *(float *)(v11 + 24) = a3;
  *(_QWORD *)(v11 + 32) = a2;
  v12 = *(void (**)(unint64_t, unint64_t, id (*)(void *), uint64_t, uint64_t (*)(void *), uint64_t))((*MEMORY[0x24BEE4EA0] & *v7) + 0x108);
  swift_retain();
  v12(0xD000000000000158, 0x80000002284DB530, partial apply for closure #1 in static RetrievalDatabaseQueries.fetchNeighborsForVector(db:vector:distanceLimit:countLimit:), v11, partial apply for closure #2 in static RetrievalDatabaseQueries.fetchNeighborsForVector(db:vector:distanceLimit:countLimit:), v8);
  swift_release();
  swift_release();
  swift_beginAccess();
  v13 = *(_QWORD *)(v8 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  v14 = *(_QWORD *)(v13 + 16);
  if (v14)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 0);
    v15 = v9;
    v16 = (_DWORD *)(v13 + 64);
    do
    {
      v18 = *((_QWORD *)v16 - 4);
      v17 = *((_QWORD *)v16 - 3);
      v19 = *((_QWORD *)v16 - 2);
      v20 = *((_QWORD *)v16 - 1);
      v21 = *v16;
      swift_bridgeObjectRetain();
      outlined copy of Data?(v19, v20);
      swift_bridgeObjectRetain();
      outlined copy of Data?(v19, v20);
      outlined consume of Data?(v19, v20);
      swift_bridgeObjectRelease();
      v23 = *(_QWORD *)(v9 + 16);
      v22 = *(_QWORD *)(v9 + 24);
      if (v23 >= v22 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
      v16 += 10;
      *(_QWORD *)(v9 + 16) = v23 + 1;
      v24 = v9 + 40 * v23;
      *(_QWORD *)(v24 + 32) = v18;
      *(_QWORD *)(v24 + 40) = v17;
      *(_QWORD *)(v24 + 48) = v19;
      *(_QWORD *)(v24 + 56) = v20;
      *(_DWORD *)(v24 + 64) = v21;
      --v14;
    }
    while (v14);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  return v15;
}

id SQLiteRetrievalDatabase.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void SQLiteRetrievalDatabase.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SQLiteRetrievalDatabase.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SQLiteRetrievalDatabase();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for VectorRetrieval.fetchNeighborsForVector(vector:distanceLimit:countLimit:) in conformance SQLiteRetrievalDatabase()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **v0) + 0x78))();
}

uint64_t sub_22841C20C()
{
  uint64_t v0;
  unint64_t v1;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = *(_QWORD *)(v0 + 48);
  if (v1 >> 60 != 15)
    outlined consume of Data._Representation(*(_QWORD *)(v0 + 40), v1);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t outlined release of VectorRecord(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data?(v2, v3);
  return a1;
}

uint64_t sub_22841C2A0()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_22841C2C4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t DUDocument.__allocating_init<A>(proto:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v5 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DURawDocument();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, a2);
  v8 = DURawDocument.__allocating_init<A>(proto:)((uint64_t)v7, a2);
  if (v8)
    v9 = (*(uint64_t (**)(char *, _QWORD))(v2 + 232))(v8, 0);
  else
    v9 = 0;
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, a2);
  return v9;
}

id DUDocument.__allocating_init(rawDocument:maxLength:)(void *a1, uint64_t a2)
{
  objc_class *v2;
  id v5;
  id v6;

  v5 = objc_allocWithZone(v2);
  v6 = specialized DUDocument.init(rawDocument:maxLength:)(a1, a2);

  return v6;
}

uint64_t String.truncate(maxLength:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v26[24];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = type metadata accessor for Logger();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = &v26[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v28 = a2;
  v29 = a3;
  swift_bridgeObjectRetain();
  if (a1 && String.count.getter() > a1)
  {
    swift_bridgeObjectRetain();
    v10 = specialized Collection.prefix(_:)(a1);
    v12 = v11;
    v14 = v13;
    v16 = v15;
    swift_bridgeObjectRelease();
    v17 = MEMORY[0x22E2AF988](v10, v12, v14, v16);
    v19 = v18;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v28 = v17;
    v29 = v19;
  }
  swift_bridgeObjectRetain();
  v20 = String.count.getter();
  swift_bridgeObjectRelease();
  if (v20 > 100000)
  {
    Logger.init()();
    v21 = Logger.logObject.getter();
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = swift_slowAlloc();
      *(_DWORD *)v23 = 134218240;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v24 = String.count.getter();
      swift_bridgeObjectRelease();
      v27 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v23 + 12) = 2048;
      v27 = 100000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_2282CC000, v21, v22, "DUDocument: Document length %ld is beyond recommended maximum %ld.", (uint8_t *)v23, 0x16u);
      MEMORY[0x22E2B117C](v23, -1, -1);
    }

    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
  }
  swift_beginAccess();
  return v28;
}

uint64_t DUDocument.headline.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0
                                                                    + OBJC_IVAR____TtC21DocumentUnderstanding10DUDocument_rawDocument))
                              + 0xE0))();
}

uint64_t DUDocument.subHeadline.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0
                                                                    + OBJC_IVAR____TtC21DocumentUnderstanding10DUDocument_rawDocument))
                              + 0xF8))();
}

uint64_t DUDocument.version.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0
                                                                    + OBJC_IVAR____TtC21DocumentUnderstanding10DUDocument_rawDocument))
                              + 0x110))();
}

uint64_t DUDocument.creator.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0
                                                                    + OBJC_IVAR____TtC21DocumentUnderstanding10DUDocument_rawDocument))
                              + 0x128))();
}

uint64_t DUDocument.abstract.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0
                                                                    + OBJC_IVAR____TtC21DocumentUnderstanding10DUDocument_rawDocument))
                              + 0x140))();
}

uint64_t DUDocument.comment.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0
                                                                    + OBJC_IVAR____TtC21DocumentUnderstanding10DUDocument_rawDocument))
                              + 0x158))();
}

uint64_t DUDocument.text.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0
                                                                    + OBJC_IVAR____TtC21DocumentUnderstanding10DUDocument_rawDocument))
                              + 0x170))();
}

uint64_t DUDocument.inLanguage.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0
                                                                    + OBJC_IVAR____TtC21DocumentUnderstanding10DUDocument_rawDocument))
                              + 0x188))();
}

uint64_t DUDocument.keywords.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0
                                                                    + OBJC_IVAR____TtC21DocumentUnderstanding10DUDocument_rawDocument))
                              + 0x1A0))();
}

uint64_t DUDocument.identifier.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0
                                                                    + OBJC_IVAR____TtC21DocumentUnderstanding10DUDocument_rawDocument))
                              + 0x1B8))();
}

uint64_t DUDocument.url.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0
                                                                    + OBJC_IVAR____TtC21DocumentUnderstanding10DUDocument_rawDocument))
                              + 0x1D0))();
}

uint64_t DUDocument.thumbnailUrl.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0
                                                                    + OBJC_IVAR____TtC21DocumentUnderstanding10DUDocument_rawDocument))
                              + 0x1E8))();
}

uint64_t DUDocument.significantLink.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0
                                                                    + OBJC_IVAR____TtC21DocumentUnderstanding10DUDocument_rawDocument))
                              + 0x200))();
}

uint64_t DUDocument.dateCreated.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0
                                                                    + OBJC_IVAR____TtC21DocumentUnderstanding10DUDocument_rawDocument))
                              + 0x218))();
}

uint64_t DUDocument.dateModified.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0
                                                                    + OBJC_IVAR____TtC21DocumentUnderstanding10DUDocument_rawDocument))
                              + 0x230))();
}

uint64_t DUDocument.documentMessageData.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0
                                                                    + OBJC_IVAR____TtC21DocumentUnderstanding10DUDocument_rawDocument))
                              + 0x248))();
}

uint64_t DUDocument.documentUIElements.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0
                                                                    + OBJC_IVAR____TtC21DocumentUnderstanding10DUDocument_rawDocument))
                              + 0x260))();
}

uint64_t DUDocument.documentHTMLData.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0
                                                                    + OBJC_IVAR____TtC21DocumentUnderstanding10DUDocument_rawDocument))
                              + 0x278))();
}

id DUDocument.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void DUDocument.init()()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id DUDocument.init(rawDocument:maxLength:)(void *a1, uint64_t a2)
{
  id v3;

  v3 = specialized DUDocument.init(rawDocument:maxLength:)(a1, a2);

  return v3;
}

id DUDocument.__allocating_init(text:maxLength:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  id v7;
  _QWORD *v8;
  id v9;

  v7 = objc_allocWithZone(v3);
  v8 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DURawDocument()), sel_init);
  (*(void (**)(uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & *v8) + 0x178))(a1, a2);
  v9 = objc_msgSend(v7, sel_initWithRawDocument_maxLength_, v8, a3);

  return v9;
}

id DUDocument.init(text:maxLength:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  _QWORD *v8;
  id v9;

  v4 = v3;
  v8 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DURawDocument()), sel_init);
  (*(void (**)(uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & *v8) + 0x178))(a1, a2);
  v9 = objc_msgSend(v4, sel_initWithRawDocument_maxLength_, v8, a3);

  return v9;
}

uint64_t DUDocument.rawCopy()()
{
  uint64_t v0;
  uint64_t v2;

  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding10DUDocument_rawDocument), sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for DURawDocument();
  if (swift_dynamicCast())
    return v2;
  else
    return 0;
}

Swift::Void __swiftcall DUDocument.encode(with:)(NSCoder with)
{
  uint64_t v1;

  (*(void (**)(Class))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v1
                                                                      + OBJC_IVAR____TtC21DocumentUnderstanding10DUDocument_rawDocument))
                                + 0x290))(with.super.isa);
}

id DUDocument.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;

  v3 = objc_allocWithZone(v1);
  v4 = objc_allocWithZone((Class)type metadata accessor for DURawDocument());
  v5 = a1;
  v6 = DURawDocument.init(coder:)(v5);
  if (v6)
  {
    v7 = (void *)v6;
    v8 = objc_msgSend(v3, sel_initWithRawDocument_maxLength_, v6, 0);

  }
  else
  {

    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v8;
}

id DUDocument.init(coder:)(void *a1)
{
  void *v1;
  void *v2;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;

  v2 = v1;
  objc_allocWithZone((Class)type metadata accessor for DURawDocument());
  v4 = a1;
  v5 = DURawDocument.init(coder:)(v4);
  if (v5)
  {
    v6 = (void *)v5;
    v7 = objc_msgSend(v2, sel_initWithRawDocument_maxLength_, v5, 0);

  }
  else
  {

    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v7;
}

uint64_t DUDocument.copy(with:)@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  id v12;
  id v13;
  uint64_t result;
  uint64_t v15;

  v3 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v4);
  v9 = (char *)&v15 - v8;
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0x118))(v7);
  outlined init with copy of DocumentUnderstanding_DocumentRepresentation_Document((uint64_t)v9, (uint64_t)v6);
  v10 = specialized DURawDocument.__allocating_init<A>(proto:)((uint64_t)v6);
  if (v10)
  {
    v11 = v10;
    v12 = objc_allocWithZone((Class)type metadata accessor for DUDocument());
    v13 = specialized DUDocument.init(rawDocument:maxLength:)(v11, 0);

  }
  else
  {
    v13 = 0;
  }
  outlined destroy of DocumentUnderstanding_DocumentRepresentation_Document((uint64_t)v9);
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DUDocument?);
  a1[3] = result;
  *a1 = v13;
  return result;
}

id DUDocument.isEqual(_:)(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  char *v6;
  _BYTE v7[24];
  uint64_t v8;

  outlined init with copy of Any?(a1, (uint64_t)v7);
  if (!v8)
  {
    outlined destroy of Any?((uint64_t)v7);
    return 0;
  }
  type metadata accessor for DUDocument();
  if ((swift_dynamicCast() & 1) == 0)
    return 0;
  v2 = *(void **)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding10DUDocument_rawDocument);
  v3 = *(id *)&v6[OBJC_IVAR____TtC21DocumentUnderstanding10DUDocument_rawDocument];
  v4 = objc_msgSend(v2, sel_isEqual_, v3);

  return v4;
}

uint64_t DUDocument.protoRepresentation.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0
                                                                    + OBJC_IVAR____TtC21DocumentUnderstanding10DUDocument_rawDocument))
                              + 0x2B0))();
}

id DUDocument.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DUDocument();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for DUProtobufEncodableProtocol.protoRepresentation.getter in conformance DUDocument()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **v0) + 0x118))();
}

uint64_t protocol witness for DUProtobufEncodableProtocol.init(proto:) in conformance DUDocument@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t (*v5)(uint64_t, uint64_t, unint64_t);
  uint64_t v6;
  unint64_t v7;
  uint64_t result;

  v5 = *(uint64_t (**)(uint64_t, uint64_t, unint64_t))(v2 + 272);
  v6 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0);
  v7 = lazy protocol witness table accessor for type DocumentUnderstanding_DocumentRepresentation_Document and conformance DocumentUnderstanding_DocumentRepresentation_Document();
  result = v5(a1, v6, v7);
  *a2 = result;
  return result;
}

id specialized DUDocument.init(rawDocument:maxLength:)(void *a1, uint64_t a2)
{
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(void);
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t i;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  void *v53;
  objc_class *v54;
  id result;
  _QWORD *v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  objc_super v63;
  _QWORD *v64;
  uint64_t v65;

  v62 = a2;
  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = type metadata accessor for Logger();
  v8 = *(_QWORD *)(v60 - 8);
  v9 = MEMORY[0x24BDAC7A8](v60);
  v11 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (uint64_t *)((char *)&v60 - v12);
  v14 = v2;
  objc_msgSend(a1, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for DURawDocument();
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_37;
  v61 = v14;
  v13 = v64;
  v15 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v16 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v64) + 0x1B8))();
  if (!v17)
    goto LABEL_6;
  v18 = v16;
  v19 = v17;
  v20 = swift_bridgeObjectRelease();
  v21 = HIBYTE(v19) & 0xF;
  if ((v19 & 0x2000000000000000) == 0)
    v21 = v18 & 0xFFFFFFFFFFFFLL;
  if (!v21)
  {
LABEL_6:
    UUID.init()();
    v22 = UUID.uuidString.getter();
    v24 = v23;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v20 = (*(uint64_t (**)(uint64_t, uint64_t))((*v15 & *v13) + 0x1C0))(v22, v24);
  }
  if (v62 > 100000)
  {
    Logger.init()();
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = swift_slowAlloc();
      *(_DWORD *)v27 = 134218240;
      v65 = v62;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v27 + 12) = 2048;
      v65 = 100000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_2282CC000, v25, v26, "DUDocument: Truncation string length %ld is beyond recommended maximum %ld.", (uint8_t *)v27, 0x16u);
      MEMORY[0x22E2B117C](v27, -1, -1);
    }

    v20 = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v60);
  }
  v29 = (*(uint64_t (**)(uint64_t))((*v15 & *v13) + 0x170))(v20);
  if (v28)
  {
    v29 = String.truncate(maxLength:)(v62, v29, v28);
    v31 = v30;
    swift_bridgeObjectRelease();
  }
  else
  {
    v31 = 0;
  }
  v32 = (*(uint64_t (**)(uint64_t, uint64_t))((*v15 & *v13) + 0x178))(v29, v31);
  v33 = *(uint64_t (**)(void))((*v15 & *v13) + 0x278);
  v34 = ((uint64_t (*)(uint64_t))v33)(v32);
  if (v34)
  {
    v35 = (_QWORD *)v34;
    v36 = (_QWORD *)v33();
    v37 = v36;
    if (v36)
    {
      v38 = (*(uint64_t (**)(void))((*v15 & *v36) + 0x60))();
      v40 = v39;

      if (v40)
      {
        v37 = (void *)String.truncate(maxLength:)(100000, v38, v40);
        v42 = v41;
        swift_bridgeObjectRelease();
LABEL_20:
        (*(void (**)(void *, uint64_t))((*v15 & *v35) + 0x68))(v37, v42);

        goto LABEL_21;
      }
      v37 = 0;
    }
    v42 = 0;
    goto LABEL_20;
  }
LABEL_21:
  v43 = (*(uint64_t (**)(void))((*v15 & *v13) + 0x260))();
  if (!v43)
  {
LABEL_35:
    v53 = v61;
    *(_QWORD *)&v61[OBJC_IVAR____TtC21DocumentUnderstanding10DUDocument_rawDocument] = v13;

    v54 = (objc_class *)type metadata accessor for DUDocument();
    v63.receiver = v53;
    v63.super_class = v54;
    return objc_msgSendSuper2(&v63, sel_init);
  }
  v44 = v43;
  if (v43 >> 62)
  {
    swift_bridgeObjectRetain();
    v45 = _CocoaArrayWrapper.endIndex.getter();
    if (v45)
      goto LABEL_24;
LABEL_34:
    swift_bridgeObjectRelease_n();
    goto LABEL_35;
  }
  v45 = *(_QWORD *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v45)
    goto LABEL_34;
LABEL_24:
  if (v45 >= 1)
  {
    for (i = 0; i != v45; ++i)
    {
      if ((v44 & 0xC000000000000001) != 0)
        v50 = (_QWORD *)MEMORY[0x22E2AFF34](i, v44);
      else
        v50 = *(id *)(v44 + 8 * i + 32);
      v51 = v50;
      v47 = (*(uint64_t (**)(void))((*v15 & *v50) + 0xB0))();
      if (v52)
      {
        v47 = String.truncate(maxLength:)(v62, v47, v52);
        v49 = v48;
        swift_bridgeObjectRelease();
      }
      else
      {
        v49 = 0;
      }
      (*(void (**)(uint64_t, uint64_t))((*v15 & *v51) + 0xB8))(v47, v49);

    }
    goto LABEL_34;
  }
  __break(1u);
LABEL_37:
  Logger.init()();
  v56 = v13;
  v57 = Logger.logObject.getter();
  v58 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v57, v58))
  {
    v59 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v59 = 0;
    _os_log_impl(&dword_2282CC000, v57, v58, "Could not create a DURawDocument copy due to mismatched typing.", v59, 2u);
    MEMORY[0x22E2B117C](v59, -1, -1);
  }

  (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v56, v60);
  result = (id)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined init with copy of DocumentUnderstanding_DocumentRepresentation_Document(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of DocumentUnderstanding_DocumentRepresentation_Document(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for DUDocument()
{
  return objc_opt_self();
}

uint64_t associated type witness table accessor for DUProtobufEncodableProtocol.ProtobufType : Message in DUDocument()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type DocumentUnderstanding_DocumentRepresentation_Document and conformance DocumentUnderstanding_DocumentRepresentation_Document()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_Document and conformance DocumentUnderstanding_DocumentRepresentation_Document;
  if (!lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_Document and conformance DocumentUnderstanding_DocumentRepresentation_Document)
  {
    v1 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(255);
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_Document, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_Document and conformance DocumentUnderstanding_DocumentRepresentation_Document);
  }
  return result;
}

id DUFoundInEventResult.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id static DUFoundInEventResult.getErrorForField(field:errorCode:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  id v5;
  void *v6;
  Class isa;
  id v8;

  v4 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(a1, a2, a3);
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v4);
  swift_bridgeObjectRelease();
  v5 = objc_allocWithZone(MEMORY[0x24BDD1540]);
  v6 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, 0x80000002284D9F10);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(v5, sel_initWithDomain_code_userInfo_, v6, a3, isa);

  return v8;
}

char *DUFoundInEventResult.__allocating_init<A>(proto:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char v16;
  void (*v17)(char *, uint64_t, uint64_t, uint64_t);
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  id v26;
  void *v27;
  Class isa;
  id v29;
  void **v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  id v37;
  void *v38;
  Class v39;
  id v40;
  void **v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  id v48;
  unint64_t v49;
  void *v50;
  Class v51;
  id v52;
  void **v53;
  void *v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  id v60;
  void *v61;
  Class v62;
  id v63;
  void **v64;
  void *v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  id v71;
  unint64_t v72;
  void *v73;
  Class v74;
  id v75;
  void **v76;
  void *v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  id v83;
  void *v84;
  Class v85;
  id v86;
  void **v87;
  void *v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  id v96;
  unint64_t v97;
  void *v98;
  Class v99;
  id v100;
  void **v101;
  void *v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  id v110;
  void *v111;
  Class v112;
  id v113;
  void **v114;
  void *v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  uint64_t v119;
  unint64_t v120;
  id v121;
  unint64_t v122;
  void *v123;
  Class v124;
  id v125;
  void **v126;
  void *v127;
  uint64_t v128;
  unint64_t v129;
  char *v130;
  uint64_t v131;
  unint64_t v132;
  id v133;
  void *v134;
  Class v135;
  id v136;
  void **v137;
  void *v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  unint64_t v145;
  id v146;
  void *v147;
  Class v148;
  id v149;
  void **v150;
  void *v151;
  _QWORD *v152;
  uint64_t v153;
  unint64_t v154;
  char *v155;
  uint64_t v156;
  unint64_t v157;
  char *v158;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  _BYTE *v165;
  unint64_t v166;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v160 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)&v160 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v160 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a2);
  v16 = swift_dynamicCast();
  v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
  if ((v16 & 1) != 0)
  {
    v161 = v9;
    v162 = a1;
    v163 = a2;
    v17(v8, 0, 1, v12);
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v8, (uint64_t)v15, type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult);
    v18 = (char *)objc_msgSend(objc_allocWithZone(v2), sel_init);
    v19 = *(int *)(v12 + 20);
    v164 = v15;
    v160 = v19;
    v20 = *(_QWORD *)&v15[v19];
    swift_beginAccess();
    v21 = *(_BYTE *)(v20 + 16);
    v22 = &v18[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_detectedEventPolarity];
    swift_beginAccess();
    *v22 = v21;
    swift_beginAccess();
    if (*(_BYTE *)(v20 + 33))
      v23 = 0;
    else
      v23 = *(_QWORD *)(v20 + 24);
    v24 = v18;
    v25 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x7461767265736572, 0xED000064496E6F69, v23);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v25);
    swift_bridgeObjectRelease();
    v26 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v166 = (unint64_t)"ultilingual_implementation";
    v27 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, 0x80000002284D9F10);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v29 = objc_msgSend(v26, sel_initWithDomain_code_userInfo_, v27, v23, isa);

    v30 = (void **)&v24[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_reservationIdError];
    swift_beginAccess();
    v31 = *v30;
    *v30 = v29;

    swift_beginAccess();
    if (*(_QWORD *)(v20 + 48))
    {
      v32 = *(_QWORD *)(v20 + 40);
      v33 = *(_QWORD *)(v20 + 48);
    }
    else
    {
      v32 = 0;
      v33 = 0xE000000000000000;
    }
    v165 = (_BYTE *)(v20 + 273);
    v34 = &v24[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_reservationId];
    swift_beginAccess();
    *(_QWORD *)v34 = v32;
    *((_QWORD *)v34 + 1) = v33;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    if (*(_BYTE *)(v20 + 65))
      v35 = 0;
    else
      v35 = *(_QWORD *)(v20 + 56);
    v36 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x7461767265736572, 0xEF656D614E6E6F69, v35);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v36);
    swift_bridgeObjectRelease();
    v37 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v38 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, 0x80000002284D9F10);
    v39 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v40 = objc_msgSend(v37, sel_initWithDomain_code_userInfo_, v38, v35, v39);

    v41 = (void **)&v24[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_reservationNameError];
    swift_beginAccess();
    v42 = *v41;
    *v41 = v40;

    swift_beginAccess();
    if (*(_QWORD *)(v20 + 80))
    {
      v43 = *(_QWORD *)(v20 + 72);
      v44 = *(_QWORD *)(v20 + 80);
    }
    else
    {
      v43 = 0;
      v44 = 0xE000000000000000;
    }
    v45 = &v24[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_reservationName];
    swift_beginAccess();
    *(_QWORD *)v45 = v43;
    *((_QWORD *)v45 + 1) = v44;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    if (v165[32])
      v46 = 0;
    else
      v46 = *(_QWORD *)(v20 + 296);
    v47 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x6D614E6C65746F68, 0xE900000000000065, v46);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v47);
    swift_bridgeObjectRelease();
    v48 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v49 = v166 | 0x8000000000000000;
    v50 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, v166 | 0x8000000000000000);
    v51 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v52 = objc_msgSend(v48, sel_initWithDomain_code_userInfo_, v50, v46, v51);

    v53 = (void **)&v24[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_hotelNameError];
    swift_beginAccess();
    v54 = *v53;
    *v53 = v52;

    swift_beginAccess();
    if (*(_QWORD *)(v20 + 320))
    {
      v55 = *(_QWORD *)(v20 + 312);
      v56 = *(_QWORD *)(v20 + 320);
    }
    else
    {
      v55 = 0;
      v56 = 0xE000000000000000;
    }
    v57 = &v24[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_hotelName];
    swift_beginAccess();
    *(_QWORD *)v57 = v55;
    *((_QWORD *)v57 + 1) = v56;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    if (v165[64])
      v58 = 0;
    else
      v58 = *(_QWORD *)(v20 + 328);
    v59 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x6D614E7473657567, 0xE900000000000065, v58);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v59);
    swift_bridgeObjectRelease();
    v60 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v61 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, v49);
    v62 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v63 = objc_msgSend(v60, sel_initWithDomain_code_userInfo_, v61, v58, v62);

    v64 = (void **)&v24[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_guestNameError];
    swift_beginAccess();
    v65 = *v64;
    *v64 = v63;

    swift_beginAccess();
    if (*(_QWORD *)(v20 + 352))
    {
      v66 = *(_QWORD *)(v20 + 344);
      v67 = *(_QWORD *)(v20 + 352);
    }
    else
    {
      v66 = 0;
      v67 = 0xE000000000000000;
    }
    v68 = &v24[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_guestName];
    swift_beginAccess();
    *(_QWORD *)v68 = v66;
    *((_QWORD *)v68 + 1) = v67;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    if (v165[96])
      v69 = 0;
    else
      v69 = *(_QWORD *)(v20 + 360);
    v70 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x6D614E6569766F6DLL, 0xE900000000000065, v69);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v70);
    swift_bridgeObjectRelease();
    v71 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v72 = v166 | 0x8000000000000000;
    v73 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, v166 | 0x8000000000000000);
    v74 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v75 = objc_msgSend(v71, sel_initWithDomain_code_userInfo_, v73, v69, v74);

    v76 = (void **)&v24[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_movieNameError];
    swift_beginAccess();
    v77 = *v76;
    *v76 = v75;

    swift_beginAccess();
    if (*(_QWORD *)(v20 + 384))
    {
      v78 = *(_QWORD *)(v20 + 376);
      v79 = *(_QWORD *)(v20 + 384);
    }
    else
    {
      v78 = 0;
      v79 = 0xE000000000000000;
    }
    v80 = &v24[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_movieName];
    swift_beginAccess();
    *(_QWORD *)v80 = v78;
    *((_QWORD *)v80 + 1) = v79;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    if (*(_BYTE *)(v20 + 97))
      v81 = 0;
    else
      v81 = *(_QWORD *)(v20 + 88);
    v82 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x6464417472617473, 0xEC00000073736572, v81);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v82);
    swift_bridgeObjectRelease();
    v83 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v84 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, v72);
    v85 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v86 = objc_msgSend(v83, sel_initWithDomain_code_userInfo_, v84, v81, v85);

    v87 = (void **)&v24[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_startAddressError];
    swift_beginAccess();
    v88 = *v87;
    *v87 = v86;

    swift_beginAccess();
    if (*(_QWORD *)(v20 + 112))
    {
      v89 = *(_QWORD *)(v20 + 104);
      v90 = *(_QWORD *)(v20 + 112);
    }
    else
    {
      v89 = 0;
      v90 = 0xE000000000000000;
    }
    v91 = &v24[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_startAddress];
    swift_beginAccess();
    *(_QWORD *)v91 = v89;
    *((_QWORD *)v91 + 1) = v90;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v92 = *(_QWORD *)(v20 + 120);
    v93 = &v24[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_startAddressComponents];
    swift_beginAccess();
    *(_QWORD *)v93 = v92;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    if (*(_BYTE *)(v20 + 137))
      v94 = 0;
    else
      v94 = *(_QWORD *)(v20 + 128);
    v95 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x6572646441646E65, 0xEA00000000007373, v94);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v95);
    swift_bridgeObjectRelease();
    v96 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v97 = v166 | 0x8000000000000000;
    v98 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, v166 | 0x8000000000000000);
    v99 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v100 = objc_msgSend(v96, sel_initWithDomain_code_userInfo_, v98, v94, v99);

    v101 = (void **)&v24[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_endAddressError];
    swift_beginAccess();
    v102 = *v101;
    *v101 = v100;

    swift_beginAccess();
    if (*(_QWORD *)(v20 + 152))
    {
      v103 = *(_QWORD *)(v20 + 144);
      v104 = *(_QWORD *)(v20 + 152);
    }
    else
    {
      v103 = 0;
      v104 = 0xE000000000000000;
    }
    v105 = &v24[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_endAddress];
    swift_beginAccess();
    *(_QWORD *)v105 = v103;
    *((_QWORD *)v105 + 1) = v104;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v106 = *(_QWORD *)(v20 + 160);
    v107 = &v24[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_endAddressComponents];
    swift_beginAccess();
    *(_QWORD *)v107 = v106;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    if (*(_BYTE *)(v20 + 177))
      v108 = 0;
    else
      v108 = *(_QWORD *)(v20 + 168);
    v109 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x616C507472617473, 0xEA00000000006563, v108);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v109);
    swift_bridgeObjectRelease();
    v110 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v111 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, v97);
    v112 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v113 = objc_msgSend(v110, sel_initWithDomain_code_userInfo_, v111, v108, v112);

    v114 = (void **)&v24[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_startPlaceError];
    swift_beginAccess();
    v115 = *v114;
    *v114 = v113;

    swift_beginAccess();
    if (*(_QWORD *)(v20 + 192))
    {
      v116 = *(_QWORD *)(v20 + 184);
      v117 = *(_QWORD *)(v20 + 192);
    }
    else
    {
      v116 = 0;
      v117 = 0xE000000000000000;
    }
    v118 = &v24[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_startPlace];
    swift_beginAccess();
    *(_QWORD *)v118 = v116;
    *((_QWORD *)v118 + 1) = v117;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    if (*(_BYTE *)(v20 + 209))
      v119 = 0;
    else
      v119 = *(_QWORD *)(v20 + 200);
    v120 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x6563616C50646E65, 0xE800000000000000, v119);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v120);
    swift_bridgeObjectRelease();
    v121 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v122 = v166 | 0x8000000000000000;
    v123 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, v166 | 0x8000000000000000);
    v124 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v125 = objc_msgSend(v121, sel_initWithDomain_code_userInfo_, v123, v119, v124);

    v126 = (void **)&v24[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_endPlaceError];
    swift_beginAccess();
    v127 = *v126;
    *v126 = v125;

    swift_beginAccess();
    if (*(_QWORD *)(v20 + 224))
    {
      v128 = *(_QWORD *)(v20 + 216);
      v129 = *(_QWORD *)(v20 + 224);
    }
    else
    {
      v128 = 0;
      v129 = 0xE000000000000000;
    }
    v130 = &v24[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_endPlace];
    swift_beginAccess();
    *(_QWORD *)v130 = v128;
    *((_QWORD *)v130 + 1) = v129;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    if (*(_BYTE *)(v20 + 241))
      v131 = 0;
    else
      v131 = *(_QWORD *)(v20 + 232);
    v132 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x7461447472617473, 0xE900000000000065, v131);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v132);
    swift_bridgeObjectRelease();
    v133 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v134 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, v122);
    v135 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v136 = objc_msgSend(v133, sel_initWithDomain_code_userInfo_, v134, v131, v135);

    v137 = (void **)&v24[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_startDateError];
    swift_beginAccess();
    v138 = *v137;
    *v137 = v136;

    swift_beginAccess();
    if (*(_QWORD *)(v20 + 256))
    {
      v139 = *(_QWORD *)(v20 + 248);
      v140 = *(_QWORD *)(v20 + 256);
    }
    else
    {
      v139 = 0;
      v140 = 0xE000000000000000;
    }
    v141 = (uint64_t)v164;
    v142 = v161;
    v143 = &v24[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_startDate];
    swift_beginAccess();
    *(_QWORD *)v143 = v139;
    *((_QWORD *)v143 + 1) = v140;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    if (*v165)
      v144 = 0;
    else
      v144 = *(_QWORD *)(v20 + 264);
    v145 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x65746144646E65, 0xE700000000000000, v144);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v145);
    swift_bridgeObjectRelease();
    v146 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v147 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, v166 | 0x8000000000000000);
    v148 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v149 = objc_msgSend(v146, sel_initWithDomain_code_userInfo_, v147, v144, v148);

    (*(void (**)(uint64_t, uint64_t))(v142 + 8))(v162, v163);
    v150 = (void **)&v24[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_endDateError];
    swift_beginAccess();
    v151 = *v150;
    *v150 = v149;

    v152 = *(_QWORD **)(v141 + v160);
    swift_beginAccess();
    if (v152[36])
    {
      v153 = v152[35];
      v154 = v152[36];
    }
    else
    {
      v153 = 0;
      v154 = 0xE000000000000000;
    }
    v155 = &v24[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_endDate];
    swift_beginAccess();
    *(_QWORD *)v155 = v153;
    *((_QWORD *)v155 + 1) = v154;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    if (v152[50])
    {
      v156 = v152[49];
      v157 = v152[50];
    }
    else
    {
      v156 = 0;
      v157 = 0xE000000000000000;
    }
    swift_bridgeObjectRetain();
    outlined destroy of DocumentUnderstanding_ClientInterface_FoundInEventResult(v141);
    v158 = &v24[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_text];
    swift_beginAccess();
    *(_QWORD *)v158 = v156;
    *((_QWORD *)v158 + 1) = v157;

    swift_bridgeObjectRelease();
  }
  else
  {
    v17(v8, 1, 1, v12);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, a2);
    outlined destroy of DocumentUnderstanding_ClientInterface_FoundInEventResult?((uint64_t)v8);
    return 0;
  }
  return v24;
}

uint64_t one-time initialization function for errorCodeToUserInfo()
{
  void *v0;
  uint64_t result;

  v0 = (void *)specialized Dictionary.init(dictionaryLiteral:)(outlined read-only object #0 of one-time initialization function for errorCodeToUserInfo);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, String));
  result = swift_arrayDestroy();
  errorCodeToUserInfo._rawValue = v0;
  return result;
}

uint64_t DUFoundInEventResult.detectedEventPolarity.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_detectedEventPolarity);
  swift_beginAccess();
  return *v1;
}

uint64_t DUFoundInEventResult.detectedEventPolarity.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_detectedEventPolarity);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*DUFoundInEventResult.detectedEventPolarity.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryConfidence.modify;
}

void *DUFoundInEventResult.reservationIdError.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_reservationIdError);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void DUFoundInEventResult.reservationIdError.setter(void *a1)
{
  DUResponse.topics.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_reservationIdError);
}

uint64_t (*DUFoundInEventResult.reservationIdError.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUFoundInEventResult.reservationId.getter()
{
  return PoemMessage.path.getter(&OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_reservationId);
}

uint64_t DUFoundInEventResult.reservationId.setter(uint64_t a1, uint64_t a2)
{
  return PoemMessage.path.setter(a1, a2, &OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_reservationId);
}

uint64_t (*DUFoundInEventResult.reservationId.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

void *DUFoundInEventResult.reservationNameError.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_reservationNameError);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void DUFoundInEventResult.reservationNameError.setter(void *a1)
{
  DUResponse.topics.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_reservationNameError);
}

uint64_t (*DUFoundInEventResult.reservationNameError.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUFoundInEventResult.reservationName.getter()
{
  return PoemMessage.path.getter(&OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_reservationName);
}

uint64_t DUFoundInEventResult.reservationName.setter(uint64_t a1, uint64_t a2)
{
  return PoemMessage.path.setter(a1, a2, &OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_reservationName);
}

uint64_t (*DUFoundInEventResult.reservationName.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

void *DUFoundInEventResult.hotelNameError.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_hotelNameError);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void DUFoundInEventResult.hotelNameError.setter(void *a1)
{
  DUResponse.topics.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_hotelNameError);
}

uint64_t (*DUFoundInEventResult.hotelNameError.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUFoundInEventResult.hotelName.getter()
{
  return PoemMessage.path.getter(&OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_hotelName);
}

uint64_t DUFoundInEventResult.hotelName.setter(uint64_t a1, uint64_t a2)
{
  return PoemMessage.path.setter(a1, a2, &OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_hotelName);
}

uint64_t (*DUFoundInEventResult.hotelName.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

void *DUFoundInEventResult.guestNameError.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_guestNameError);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void DUFoundInEventResult.guestNameError.setter(void *a1)
{
  DUResponse.topics.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_guestNameError);
}

uint64_t (*DUFoundInEventResult.guestNameError.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUFoundInEventResult.guestName.getter()
{
  return PoemMessage.path.getter(&OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_guestName);
}

uint64_t DUFoundInEventResult.guestName.setter(uint64_t a1, uint64_t a2)
{
  return PoemMessage.path.setter(a1, a2, &OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_guestName);
}

uint64_t (*DUFoundInEventResult.guestName.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

void *DUFoundInEventResult.movieNameError.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_movieNameError);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void DUFoundInEventResult.movieNameError.setter(void *a1)
{
  DUResponse.topics.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_movieNameError);
}

uint64_t (*DUFoundInEventResult.movieNameError.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUFoundInEventResult.movieName.getter()
{
  return PoemMessage.path.getter(&OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_movieName);
}

uint64_t DUFoundInEventResult.movieName.setter(uint64_t a1, uint64_t a2)
{
  return PoemMessage.path.setter(a1, a2, &OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_movieName);
}

uint64_t (*DUFoundInEventResult.movieName.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

void *DUFoundInEventResult.startAddressError.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_startAddressError);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void DUFoundInEventResult.startAddressError.setter(void *a1)
{
  DUResponse.topics.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_startAddressError);
}

uint64_t (*DUFoundInEventResult.startAddressError.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUFoundInEventResult.startAddress.getter()
{
  return PoemMessage.path.getter(&OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_startAddress);
}

uint64_t DUFoundInEventResult.startAddress.setter(uint64_t a1, uint64_t a2)
{
  return PoemMessage.path.setter(a1, a2, &OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_startAddress);
}

uint64_t (*DUFoundInEventResult.startAddress.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUFoundInEventResult.startAddressComponents.getter()
{
  return PoemMessage.sender.getter();
}

uint64_t DUFoundInEventResult.startAddressComponents.setter(uint64_t a1)
{
  return PoemMessage.sender.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_startAddressComponents);
}

uint64_t (*DUFoundInEventResult.startAddressComponents.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

void *DUFoundInEventResult.endAddressError.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_endAddressError);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void DUFoundInEventResult.endAddressError.setter(void *a1)
{
  DUResponse.topics.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_endAddressError);
}

uint64_t (*DUFoundInEventResult.endAddressError.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUFoundInEventResult.endAddress.getter()
{
  return PoemMessage.path.getter(&OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_endAddress);
}

uint64_t DUFoundInEventResult.endAddress.setter(uint64_t a1, uint64_t a2)
{
  return PoemMessage.path.setter(a1, a2, &OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_endAddress);
}

uint64_t (*DUFoundInEventResult.endAddress.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

Class @objc DUFoundInEventResult.startAddressComponents.getter(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  Class isa;

  v3 = (_QWORD *)(a1 + *a3);
  swift_beginAccess();
  if (!*v3)
    return (Class)0;
  swift_bridgeObjectRetain();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  return isa;
}

uint64_t DUFoundInEventResult.endAddressComponents.getter()
{
  return PoemMessage.sender.getter();
}

uint64_t @objc DUFoundInEventResult.startAddressComponents.setter(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t *v7;

  if (a3)
    v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  else
    v6 = 0;
  v7 = (uint64_t *)(a1 + *a4);
  swift_beginAccess();
  *v7 = v6;
  return swift_bridgeObjectRelease();
}

uint64_t DUFoundInEventResult.endAddressComponents.setter(uint64_t a1)
{
  return PoemMessage.sender.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_endAddressComponents);
}

uint64_t (*DUFoundInEventResult.endAddressComponents.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

void *DUFoundInEventResult.startPlaceError.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_startPlaceError);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void DUFoundInEventResult.startPlaceError.setter(void *a1)
{
  DUResponse.topics.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_startPlaceError);
}

uint64_t (*DUFoundInEventResult.startPlaceError.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUFoundInEventResult.startPlace.getter()
{
  return PoemMessage.path.getter(&OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_startPlace);
}

uint64_t DUFoundInEventResult.startPlace.setter(uint64_t a1, uint64_t a2)
{
  return PoemMessage.path.setter(a1, a2, &OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_startPlace);
}

uint64_t (*DUFoundInEventResult.startPlace.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

void *DUFoundInEventResult.endPlaceError.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_endPlaceError);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void DUFoundInEventResult.endPlaceError.setter(void *a1)
{
  DUResponse.topics.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_endPlaceError);
}

uint64_t (*DUFoundInEventResult.endPlaceError.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUFoundInEventResult.endPlace.getter()
{
  return PoemMessage.path.getter(&OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_endPlace);
}

uint64_t DUFoundInEventResult.endPlace.setter(uint64_t a1, uint64_t a2)
{
  return PoemMessage.path.setter(a1, a2, &OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_endPlace);
}

uint64_t (*DUFoundInEventResult.endPlace.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

void *DUFoundInEventResult.startDateError.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_startDateError);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void DUFoundInEventResult.startDateError.setter(void *a1)
{
  DUResponse.topics.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_startDateError);
}

uint64_t (*DUFoundInEventResult.startDateError.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUFoundInEventResult.startDate.getter()
{
  return PoemMessage.path.getter(&OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_startDate);
}

uint64_t DUFoundInEventResult.startDate.setter(uint64_t a1, uint64_t a2)
{
  return PoemMessage.path.setter(a1, a2, &OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_startDate);
}

uint64_t (*DUFoundInEventResult.startDate.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

void *DUFoundInEventResult.endDateError.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_endDateError);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void DUFoundInEventResult.endDateError.setter(void *a1)
{
  DUResponse.topics.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_endDateError);
}

uint64_t (*DUFoundInEventResult.endDateError.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUFoundInEventResult.endDate.getter()
{
  return PoemMessage.path.getter(&OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_endDate);
}

uint64_t DUFoundInEventResult.endDate.setter(uint64_t a1, uint64_t a2)
{
  return PoemMessage.path.setter(a1, a2, &OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_endDate);
}

uint64_t (*DUFoundInEventResult.endDate.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUFoundInEventResult.text.getter()
{
  return PoemMessage.path.getter(&OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_text);
}

uint64_t DUFoundInEventResult.text.setter(uint64_t a1, uint64_t a2)
{
  return PoemMessage.path.setter(a1, a2, &OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_text);
}

uint64_t (*DUFoundInEventResult.text.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUFoundInEventResult.tags.getter()
{
  return PoemMessage.sender.getter();
}

uint64_t DUFoundInEventResult.tags.setter(uint64_t a1)
{
  return PoemMessage.sender.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_tags);
}

uint64_t (*DUFoundInEventResult.tags.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

id DUFoundInEventResult.init()()
{
  _BYTE *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  objc_super v14;

  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_reservationIdError] = 0;
  v1 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_reservationId];
  *v1 = 0;
  v1[1] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_reservationNameError] = 0;
  v2 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_reservationName];
  *v2 = 0;
  v2[1] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_hotelNameError] = 0;
  v3 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_hotelName];
  *v3 = 0;
  v3[1] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_guestNameError] = 0;
  v4 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_guestName];
  *v4 = 0;
  v4[1] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_movieNameError] = 0;
  v5 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_movieName];
  *v5 = 0;
  v5[1] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_startAddressError] = 0;
  v6 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_startAddress];
  *v6 = 0;
  v6[1] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_startAddressComponents] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_endAddressError] = 0;
  v7 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_endAddress];
  *v7 = 0;
  v7[1] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_endAddressComponents] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_startPlaceError] = 0;
  v8 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_startPlace];
  *v8 = 0;
  v8[1] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_endPlaceError] = 0;
  v9 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_endPlace];
  *v9 = 0;
  v9[1] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_startDateError] = 0;
  v10 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_startDate];
  *v10 = 0;
  v10[1] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_endDateError] = 0;
  v11 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_endDate];
  *v11 = 0;
  v11[1] = 0;
  v12 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_text];
  *v12 = 0;
  v12[1] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_tags] = 0;
  v0[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_detectedEventPolarity] = 0;
  v14.receiver = v0;
  v14.super_class = (Class)type metadata accessor for DUFoundInEventResult();
  return objc_msgSendSuper2(&v14, sel_init);
}

unint64_t DUFoundInEventResult.protoRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  void *v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  void *v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  void *v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  void *v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  void *v122;
  id v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  void *v133;
  id v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t result;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;

  v2 = v1;
  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_TaggedCharacterRange(0);
  v164 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v163 = (char *)&v161 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  UnknownStorage.init()();
  v6 = (uint64_t *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0) + 20));
  if (one-time initialization token for defaultInstance != -1)
    goto LABEL_118;
  while (1)
  {
    *v6 = static DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.defaultInstance;
    v7 = (_QWORD *)MEMORY[0x24BEE4EA0];
    v8 = *(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v2) + 0x128);
    v9 = swift_retain();
    v10 = v8(v9);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
      swift_allocObject();
      v11 = swift_retain();
      *v6 = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v11);
      swift_release();
    }
    v12 = *v6;
    v13 = swift_beginAccess();
    *(_BYTE *)(v12 + 16) = v10 & 1;
    v14 = (void *)(*(uint64_t (**)(uint64_t))((*v7 & *v2) + 0x140))(v13);
    if (v14)
    {
      v15 = v14;
      v16 = objc_msgSend(v14, sel_code);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
        swift_allocObject();
        v17 = swift_retain();
        *v6 = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v17);
        swift_release();
      }
      v18 = *v6;
      swift_beginAccess();
      *(_QWORD *)(v18 + 24) = v16;
      *(_BYTE *)(v18 + 32) = (unint64_t)v16 < 3;
      *(_BYTE *)(v18 + 33) = 0;

    }
    v19 = (*(uint64_t (**)(void))((*v7 & *v2) + 0x158))();
    if (v20)
    {
      v21 = v19;
      v22 = v20;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
        swift_allocObject();
        v23 = swift_retain();
        *v6 = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v23);
        swift_release();
      }
      v24 = *v6;
      swift_beginAccess();
      *(_QWORD *)(v24 + 40) = v21;
      *(_QWORD *)(v24 + 48) = v22;
      v19 = swift_bridgeObjectRelease();
    }
    v25 = (void *)(*(uint64_t (**)(uint64_t))((*v7 & *v2) + 0x170))(v19);
    if (v25)
    {
      v26 = v25;
      v27 = objc_msgSend(v25, sel_code);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
        swift_allocObject();
        v28 = swift_retain();
        *v6 = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v28);
        swift_release();
      }
      v29 = *v6;
      swift_beginAccess();
      *(_QWORD *)(v29 + 56) = v27;
      *(_BYTE *)(v29 + 64) = (unint64_t)v27 < 3;
      *(_BYTE *)(v29 + 65) = 0;

    }
    v30 = (*(uint64_t (**)(void))((*v7 & *v2) + 0x188))();
    if (v31)
    {
      v32 = v30;
      v33 = v31;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
        swift_allocObject();
        v34 = swift_retain();
        *v6 = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v34);
        swift_release();
      }
      v35 = *v6;
      swift_beginAccess();
      *(_QWORD *)(v35 + 72) = v32;
      *(_QWORD *)(v35 + 80) = v33;
      v30 = swift_bridgeObjectRelease();
    }
    v36 = (void *)(*(uint64_t (**)(uint64_t))((*v7 & *v2) + 0x1A0))(v30);
    if (v36)
    {
      v37 = v36;
      v38 = objc_msgSend(v36, sel_code);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
        swift_allocObject();
        v39 = swift_retain();
        *v6 = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v39);
        swift_release();
      }
      v40 = *v6;
      swift_beginAccess();
      *(_QWORD *)(v40 + 296) = v38;
      *(_BYTE *)(v40 + 304) = (unint64_t)v38 < 3;
      *(_BYTE *)(v40 + 305) = 0;

    }
    v41 = (*(uint64_t (**)(void))((*v7 & *v2) + 0x1B8))();
    if (v42)
    {
      v43 = v41;
      v44 = v42;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
        swift_allocObject();
        v45 = swift_retain();
        *v6 = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v45);
        swift_release();
      }
      v46 = *v6;
      swift_beginAccess();
      *(_QWORD *)(v46 + 312) = v43;
      *(_QWORD *)(v46 + 320) = v44;
      v41 = swift_bridgeObjectRelease();
    }
    v47 = (void *)(*(uint64_t (**)(uint64_t))((*v7 & *v2) + 0x1D0))(v41);
    if (v47)
    {
      v48 = v47;
      v49 = objc_msgSend(v47, sel_code);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
        swift_allocObject();
        v50 = swift_retain();
        *v6 = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v50);
        swift_release();
      }
      v51 = *v6;
      swift_beginAccess();
      *(_QWORD *)(v51 + 328) = v49;
      *(_BYTE *)(v51 + 336) = (unint64_t)v49 < 3;
      *(_BYTE *)(v51 + 337) = 0;

    }
    v52 = (*(uint64_t (**)(void))((*v7 & *v2) + 0x1E8))();
    if (v53)
    {
      v54 = v52;
      v55 = v53;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
        swift_allocObject();
        v56 = swift_retain();
        *v6 = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v56);
        swift_release();
      }
      v57 = *v6;
      swift_beginAccess();
      *(_QWORD *)(v57 + 344) = v54;
      *(_QWORD *)(v57 + 352) = v55;
      v52 = swift_bridgeObjectRelease();
    }
    v58 = (void *)(*(uint64_t (**)(uint64_t))((*v7 & *v2) + 0x200))(v52);
    if (v58)
    {
      v59 = v58;
      v60 = objc_msgSend(v58, sel_code);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
        swift_allocObject();
        v61 = swift_retain();
        *v6 = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v61);
        swift_release();
      }
      v62 = *v6;
      swift_beginAccess();
      *(_QWORD *)(v62 + 360) = v60;
      *(_BYTE *)(v62 + 368) = (unint64_t)v60 < 3;
      *(_BYTE *)(v62 + 369) = 0;

    }
    v63 = (*(uint64_t (**)(void))((*v7 & *v2) + 0x218))();
    if (v64)
    {
      v65 = v63;
      v66 = v64;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
        swift_allocObject();
        v67 = swift_retain();
        *v6 = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v67);
        swift_release();
      }
      v68 = *v6;
      swift_beginAccess();
      *(_QWORD *)(v68 + 376) = v65;
      *(_QWORD *)(v68 + 384) = v66;
      v63 = swift_bridgeObjectRelease();
    }
    v69 = (void *)(*(uint64_t (**)(uint64_t))((*v7 & *v2) + 0x230))(v63);
    if (v69)
    {
      v70 = v69;
      v71 = objc_msgSend(v69, sel_code);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
        swift_allocObject();
        v72 = swift_retain();
        *v6 = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v72);
        swift_release();
      }
      v73 = *v6;
      swift_beginAccess();
      *(_QWORD *)(v73 + 88) = v71;
      *(_BYTE *)(v73 + 96) = (unint64_t)v71 < 3;
      *(_BYTE *)(v73 + 97) = 0;

    }
    v74 = (*(uint64_t (**)(void))((*v7 & *v2) + 0x248))();
    if (v75)
    {
      v76 = v74;
      v77 = v75;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
        swift_allocObject();
        v78 = swift_retain();
        *v6 = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v78);
        swift_release();
      }
      v79 = *v6;
      swift_beginAccess();
      *(_QWORD *)(v79 + 104) = v76;
      *(_QWORD *)(v79 + 112) = v77;
      v74 = swift_bridgeObjectRelease();
    }
    v80 = (*(uint64_t (**)(uint64_t))((*v7 & *v2) + 0x260))(v74);
    if (v80)
    {
      v81 = v80;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
        swift_allocObject();
        v82 = swift_retain();
        *v6 = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v82);
        swift_release();
      }
      v83 = *v6;
      swift_beginAccess();
      *(_QWORD *)(v83 + 120) = v81;
      v80 = swift_bridgeObjectRelease();
    }
    v84 = (void *)(*(uint64_t (**)(uint64_t))((*v7 & *v2) + 0x278))(v80);
    if (v84)
    {
      v85 = v84;
      v86 = objc_msgSend(v84, sel_code);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
        swift_allocObject();
        v87 = swift_retain();
        *v6 = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v87);
        swift_release();
      }
      v88 = *v6;
      swift_beginAccess();
      *(_QWORD *)(v88 + 128) = v86;
      *(_BYTE *)(v88 + 136) = (unint64_t)v86 < 3;
      *(_BYTE *)(v88 + 137) = 0;

    }
    v89 = (*(uint64_t (**)(void))((*v7 & *v2) + 0x290))();
    if (v90)
    {
      v91 = v89;
      v92 = v90;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
        swift_allocObject();
        v93 = swift_retain();
        *v6 = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v93);
        swift_release();
      }
      v94 = *v6;
      swift_beginAccess();
      *(_QWORD *)(v94 + 144) = v91;
      *(_QWORD *)(v94 + 152) = v92;
      v89 = swift_bridgeObjectRelease();
    }
    v95 = (*(uint64_t (**)(uint64_t))((*v7 & *v2) + 0x2A8))(v89);
    if (v95)
    {
      v96 = v95;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
        swift_allocObject();
        v97 = swift_retain();
        *v6 = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v97);
        swift_release();
      }
      v98 = *v6;
      swift_beginAccess();
      *(_QWORD *)(v98 + 160) = v96;
      v95 = swift_bridgeObjectRelease();
    }
    v99 = (void *)(*(uint64_t (**)(uint64_t))((*v7 & *v2) + 0x2C0))(v95);
    if (v99)
    {
      v100 = v99;
      v101 = objc_msgSend(v99, sel_code);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
        swift_allocObject();
        v102 = swift_retain();
        *v6 = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v102);
        swift_release();
      }
      v103 = *v6;
      swift_beginAccess();
      *(_QWORD *)(v103 + 168) = v101;
      *(_BYTE *)(v103 + 176) = (unint64_t)v101 < 3;
      *(_BYTE *)(v103 + 177) = 0;

    }
    v104 = (*(uint64_t (**)(void))((*v7 & *v2) + 0x2D8))();
    if (v105)
    {
      v106 = v104;
      v107 = v105;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
        swift_allocObject();
        v108 = swift_retain();
        *v6 = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v108);
        swift_release();
      }
      v109 = *v6;
      swift_beginAccess();
      *(_QWORD *)(v109 + 184) = v106;
      *(_QWORD *)(v109 + 192) = v107;
      v104 = swift_bridgeObjectRelease();
    }
    v110 = (void *)(*(uint64_t (**)(uint64_t))((*v7 & *v2) + 0x2F0))(v104);
    if (v110)
    {
      v111 = v110;
      v112 = objc_msgSend(v110, sel_code);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
        swift_allocObject();
        v113 = swift_retain();
        *v6 = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v113);
        swift_release();
      }
      v114 = *v6;
      swift_beginAccess();
      *(_QWORD *)(v114 + 200) = v112;
      *(_BYTE *)(v114 + 208) = (unint64_t)v112 < 3;
      *(_BYTE *)(v114 + 209) = 0;

    }
    v115 = (*(uint64_t (**)(void))((*v7 & *v2) + 0x308))();
    if (v116)
    {
      v117 = v115;
      v118 = v116;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
        swift_allocObject();
        v119 = swift_retain();
        *v6 = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v119);
        swift_release();
      }
      v120 = *v6;
      swift_beginAccess();
      *(_QWORD *)(v120 + 216) = v117;
      *(_QWORD *)(v120 + 224) = v118;
      v115 = swift_bridgeObjectRelease();
    }
    v121 = (void *)(*(uint64_t (**)(uint64_t))((*v7 & *v2) + 0x320))(v115);
    if (v121)
    {
      v122 = v121;
      v123 = objc_msgSend(v121, sel_code);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
        swift_allocObject();
        v124 = swift_retain();
        *v6 = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v124);
        swift_release();
      }
      v125 = *v6;
      swift_beginAccess();
      *(_QWORD *)(v125 + 232) = v123;
      *(_BYTE *)(v125 + 240) = (unint64_t)v123 < 3;
      *(_BYTE *)(v125 + 241) = 0;

    }
    v126 = (*(uint64_t (**)(void))((*v7 & *v2) + 0x338))();
    if (v127)
    {
      v128 = v126;
      v129 = v127;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
        swift_allocObject();
        v130 = swift_retain();
        *v6 = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v130);
        swift_release();
      }
      v131 = *v6;
      swift_beginAccess();
      *(_QWORD *)(v131 + 248) = v128;
      *(_QWORD *)(v131 + 256) = v129;
      v126 = swift_bridgeObjectRelease();
    }
    v132 = (void *)(*(uint64_t (**)(uint64_t))((*v7 & *v2) + 0x350))(v126);
    if (v132)
    {
      v133 = v132;
      v134 = objc_msgSend(v132, sel_code);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
        swift_allocObject();
        v135 = swift_retain();
        *v6 = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v135);
        swift_release();
      }
      v136 = *v6;
      swift_beginAccess();
      *(_QWORD *)(v136 + 264) = v134;
      *(_BYTE *)(v136 + 272) = (unint64_t)v134 < 3;
      *(_BYTE *)(v136 + 273) = 0;

    }
    v137 = (*(uint64_t (**)(void))((*v7 & *v2) + 0x368))();
    if (v138)
    {
      v139 = v137;
      v140 = v138;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
        swift_allocObject();
        v141 = swift_retain();
        *v6 = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v141);
        swift_release();
      }
      v142 = *v6;
      swift_beginAccess();
      *(_QWORD *)(v142 + 280) = v139;
      *(_QWORD *)(v142 + 288) = v140;
      v137 = swift_bridgeObjectRelease();
    }
    v143 = (*(uint64_t (**)(uint64_t))((*v7 & *v2) + 0x380))(v137);
    if (v144)
    {
      v145 = v143;
      v146 = v144;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
        swift_allocObject();
        v147 = swift_retain();
        *v6 = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v147);
        swift_release();
      }
      v148 = *v6;
      swift_beginAccess();
      *(_QWORD *)(v148 + 392) = v145;
      *(_QWORD *)(v148 + 400) = v146;
      v143 = swift_bridgeObjectRelease();
    }
    result = (*(uint64_t (**)(uint64_t))((*v7 & *v2) + 0x398))(v143);
    if (!result)
      return result;
    v150 = result;
    if (result >> 62)
    {
      v151 = _CocoaArrayWrapper.endIndex.getter();
      v152 = (uint64_t)v163;
      if (!v151)
      {
LABEL_120:
        swift_bridgeObjectRelease();
        v154 = MEMORY[0x24BEE4AF8];
LABEL_121:
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass();
          swift_allocObject();
          v159 = swift_retain();
          *v6 = DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.init(copying:)(v159);
          swift_release();
        }
        v160 = *v6;
        swift_beginAccess();
        *(_QWORD *)(v160 + 408) = v154;
        return swift_bridgeObjectRelease();
      }
    }
    else
    {
      v151 = *(_QWORD *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
      v152 = (uint64_t)v163;
      if (!v151)
        goto LABEL_120;
    }
    v165 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v151 & ~(v151 >> 63), 0);
    if (v151 < 0)
    {
      __break(1u);
      return result;
    }
    v153 = 0;
    v2 = 0;
    v154 = v165;
    v162 = v6;
    v163 = (char *)(v150 & 0xC000000000000001);
    v6 = (uint64_t *)v150;
    while (v151 != v153)
    {
      if (v163)
      {
        v155 = MEMORY[0x22E2AFF34](v153, v150);
      }
      else
      {
        v155 = *(_QWORD *)(v150 + 8 * v153 + 32);
        swift_retain();
      }
      v166 = v155;
      closure #1 in DUFoundInEventResult.protoRepresentation.getter(&v166, v152);
      swift_release();
      v165 = v154;
      v156 = v152;
      v158 = *(_QWORD *)(v154 + 16);
      v157 = *(_QWORD *)(v154 + 24);
      if (v158 >= v157 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v157 > 1, v158 + 1, 1);
        v154 = v165;
      }
      ++v153;
      *(_QWORD *)(v154 + 16) = v158 + 1;
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v156, v154+ ((*(unsigned __int8 *)(v164 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v164 + 80))+ *(_QWORD *)(v164 + 72) * v158, type metadata accessor for DocumentUnderstanding_ClientInterface_TaggedCharacterRange);
      v152 = v156;
      v150 = (unint64_t)v6;
      if (v151 == v153)
      {
        swift_bridgeObjectRelease();
        v6 = v162;
        goto LABEL_121;
      }
    }
    __break(1u);
LABEL_118:
    swift_once();
  }
}

uint64_t closure #1 in DUFoundInEventResult.protoRepresentation.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;

  v3 = *a1;
  type metadata accessor for DocumentUnderstanding_ClientInterface_TaggedCharacterRange(0);
  v4 = UnknownStorage.init()();
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 120))(v4);
  specialized DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType.init(rawValue:)();
  if ((v6 & 0x100) != 0)
    v7 = 0;
  else
    v7 = v5;
  *(_QWORD *)a2 = v7;
  *(_BYTE *)(a2 + 8) = (v6 & 0x101) != 0;
  v8 = (*(uint64_t (**)(void))(*(_QWORD *)v3 + 168))();
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v18 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
    v10 = 0;
    v11 = v18;
    v12 = *(_QWORD *)(v18 + 16);
    do
    {
      v13 = *(_QWORD *)(v8 + 8 * v10 + 32);
      v14 = *(_QWORD *)(v18 + 24);
      if (v12 >= v14 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v12 + 1, 1);
      ++v10;
      *(_QWORD *)(v18 + 16) = v12 + 1;
      *(_QWORD *)(v18 + 8 * v12++ + 32) = v13;
    }
    while (v9 != v10);
    v15 = swift_bridgeObjectRelease();
  }
  else
  {
    v15 = swift_bridgeObjectRelease();
    v11 = MEMORY[0x24BEE4AF8];
  }
  *(_QWORD *)(a2 + 24) = v11;
  *(_QWORD *)(a2 + 16) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 144))(v15);
  result = (*(uint64_t (**)(void))(*(_QWORD *)v3 + 192))();
  *(_QWORD *)(a2 + 32) = result;
  *(_QWORD *)(a2 + 40) = v17;
  return result;
}

uint64_t DUFoundInEventResult.copy(with:)@<X0>(char **a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t result;
  uint64_t v8;

  v3 = type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DUFoundInEventResult();
  (*(void (**)(void))((*MEMORY[0x24BEE4EA0] & *v1) + 0x3B8))();
  v6 = specialized DUFoundInEventResult.__allocating_init<A>(proto:)((uint64_t)v5);
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DUFoundInEventResult?);
  a1[3] = (char *)result;
  *a1 = v6;
  return result;
}

NSData_optional __swiftcall DUFoundInEventResult.serializedData()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  id v8;
  Class isa;
  objc_class *v10;
  Swift::Bool v11;
  objc_class *v12;
  uint64_t v13;
  NSData_optional result;

  v1 = type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0);
  v2 = MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v0) + 0x3B8))(v2);
  lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_FoundInEventResult and conformance DocumentUnderstanding_ClientInterface_FoundInEventResult, 255, type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_FoundInEventResult);
  v5 = Message.serializedData(partial:)();
  v7 = v6;
  outlined destroy of DocumentUnderstanding_ClientInterface_FoundInEventResult((uint64_t)v4);
  v8 = objc_allocWithZone(MEMORY[0x24BDBCE50]);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v10 = (objc_class *)objc_msgSend(v8, sel_initWithData_, isa);
  outlined consume of Data._Representation(v5, v7);

  v12 = v10;
  result.value.super.isa = v12;
  result.is_nil = v11;
  return result;
}

Swift::Void __swiftcall DUFoundInEventResult.encode(with:)(NSCoder with)
{
  _QWORD *v1;
  void *v3;
  id v4;
  id v5;

  v3 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v1) + 0x3C8))();
  if (v3)
  {
    v4 = v3;
    v5 = (id)MEMORY[0x22E2AF8EC](0xD000000000000016, 0x80000002284DABA0);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v4, v5);

  }
}

uint64_t DUFoundInEventResult.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return DUFoundInEventResult.init(coder:)(a1);
}

uint64_t DUFoundInEventResult.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  swift_getObjectType();
  type metadata accessor for NSNumber(0, (unint64_t *)&lazy cache variable for type metadata for NSData);
  v3 = v1;
  if (!NSCoder.decodeObject<A>(of:forKey:)())
  {

    goto LABEL_5;
  }
  swift_getObjectType();

  lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DUFoundInEventResult and conformance DUFoundInEventResult, v4, (uint64_t (*)(uint64_t))type metadata accessor for DUFoundInEventResult, (uint64_t)&protocol conformance descriptor for DUFoundInEventResult);
  DUProtobufEncodableProtocol.init(serializedData:)();

  v5 = v7;
  if (!v7)
  {
LABEL_5:
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v5;
}

id DUFoundInEventResult.__allocating_init(foundInEventResult:)(void *a1)
{
  objc_class *v1;
  id v3;
  id v4;

  v3 = objc_allocWithZone(v1);
  v4 = specialized DUFoundInEventResult.init(foundInEventResult:)(a1);

  return v4;
}

id DUFoundInEventResult.init(foundInEventResult:)(void *a1)
{
  id v2;

  v2 = specialized DUFoundInEventResult.init(foundInEventResult:)(a1);

  return v2;
}

id DUFoundInEventResult.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DUFoundInEventResult();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for DUProtobufEncodableProtocol.protoRepresentation.getter in conformance DUFoundInEventResult()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **v0) + 0x3B8))();
}

uint64_t protocol witness for DUProtobufEncodableProtocol.init(proto:) in conformance DUFoundInEventResult@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 944);
  v6 = type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0);
  v7 = lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_FoundInEventResult and conformance DocumentUnderstanding_ClientInterface_FoundInEventResult, 255, type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_FoundInEventResult);
  result = v5(a1, v6, v7);
  *a2 = result;
  return result;
}

unint64_t specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t inited;
  uint64_t v7;
  _QWORD *rawValue;
  unint64_t v9;
  char v10;
  _QWORD *v11;
  uint64_t v12;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2284C1EE0;
  *(_QWORD *)(inited + 32) = a1;
  *(_QWORD *)(inited + 40) = a2;
  v7 = one-time initialization token for errorCodeToUserInfo;
  swift_bridgeObjectRetain();
  if (v7 != -1)
    swift_once();
  rawValue = errorCodeToUserInfo._rawValue;
  if (*((_QWORD *)errorCodeToUserInfo._rawValue + 2)
    && (v9 = specialized __RawDictionaryStorage.find<A>(_:)(a3), (v10 & 1) != 0))
  {
    v11 = (_QWORD *)(rawValue[7] + 16 * v9);
    v12 = v11[1];
    *(_QWORD *)(inited + 48) = *v11;
    *(_QWORD *)(inited + 56) = v12;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_QWORD *)(inited + 48) = 0xD00000000000001CLL;
    *(_QWORD *)(inited + 56) = 0x80000002284E1680;
  }
  return specialized Dictionary.init(dictionaryLiteral:)(inited);
}

uint64_t outlined destroy of DocumentUnderstanding_ClientInterface_FoundInEventResult?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined destroy of DocumentUnderstanding_ClientInterface_FoundInEventResult(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for DUFoundInEventResult()
{
  return objc_opt_self();
}

id specialized DUFoundInEventResult.init(foundInEventResult:)(void *a1)
{
  char *v1;
  void **v3;
  uint64_t *v4;
  void **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  void **v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  unsigned __int8 v19;
  id v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  void *v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  void *v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  id v46;
  void *v47;
  void *v48;
  id v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  id v56;
  void *v57;
  void *v58;
  id v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  void *v65;
  void *v66;
  id v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  void *v73;
  void *v74;
  id v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  void *v81;
  void *v82;
  id v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  void *v89;
  void *v90;
  id v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  id v96;
  void *v97;
  void *v98;
  id v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  id v104;
  void *v105;
  void *v106;
  id v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v113;
  void **v114;
  char *v115;
  void **v116;
  uint64_t *v117;
  void **v118;
  uint64_t *v119;
  void **v120;
  uint64_t *v121;
  void **v122;
  uint64_t *v123;
  void **v124;
  uint64_t *v125;
  void **v126;
  uint64_t *v127;
  char *v128;
  void **v129;
  uint64_t *v130;
  objc_super v131;
  void *v132;
  id v133;
  void *v134;
  id v135;
  void *v136;
  id v137;
  void *v138;
  id v139;
  void *v140;
  id v141;
  void *v142;
  id v143;
  void *v144;
  id v145;
  void *v146;
  id v147;
  void *v148;
  id v149;
  void *v150;
  id v151;
  void *v152;
  id v153;

  v3 = (void **)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_reservationIdError];
  *(_QWORD *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_reservationIdError] = 0;
  v4 = (uint64_t *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_reservationId];
  *v4 = 0;
  v4[1] = 0;
  v5 = (void **)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_reservationNameError];
  *(_QWORD *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_reservationNameError] = 0;
  v6 = (uint64_t *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_reservationName];
  *v6 = 0;
  v6[1] = 0;
  v124 = (void **)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_hotelNameError];
  *(_QWORD *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_hotelNameError] = 0;
  v7 = (uint64_t *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_hotelName];
  *v7 = 0;
  v7[1] = 0;
  v125 = v7;
  v126 = (void **)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_guestNameError];
  *(_QWORD *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_guestNameError] = 0;
  v8 = (uint64_t *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_guestName];
  *v8 = 0;
  v8[1] = 0;
  v127 = v8;
  v129 = (void **)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_movieNameError];
  *(_QWORD *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_movieNameError] = 0;
  v9 = (uint64_t *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_movieName];
  *v9 = 0;
  v9[1] = 0;
  v130 = v9;
  v10 = (void **)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_startAddressError];
  *(_QWORD *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_startAddressError] = 0;
  v11 = (uint64_t *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_startAddress];
  *v11 = 0;
  v11[1] = 0;
  v113 = &v1[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_startAddressComponents];
  *(_QWORD *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_startAddressComponents] = 0;
  v114 = (void **)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_endAddressError];
  *(_QWORD *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_endAddressError] = 0;
  v12 = (uint64_t *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_endAddress];
  *v12 = 0;
  v12[1] = 0;
  v115 = &v1[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_endAddressComponents];
  *(_QWORD *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_endAddressComponents] = 0;
  v116 = (void **)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_startPlaceError];
  *(_QWORD *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_startPlaceError] = 0;
  v13 = (uint64_t *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_startPlace];
  *v13 = 0;
  v13[1] = 0;
  v117 = v13;
  v118 = (void **)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_endPlaceError];
  *(_QWORD *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_endPlaceError] = 0;
  v14 = (uint64_t *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_endPlace];
  *v14 = 0;
  v14[1] = 0;
  v119 = v14;
  v120 = (void **)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_startDateError];
  *(_QWORD *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_startDateError] = 0;
  v15 = (uint64_t *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_startDate];
  *v15 = 0;
  v15[1] = 0;
  v121 = v15;
  v122 = (void **)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_endDateError];
  *(_QWORD *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_endDateError] = 0;
  v16 = (uint64_t *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_endDate];
  *v16 = 0;
  v16[1] = 0;
  v123 = v16;
  v17 = &v1[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_text];
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_tags] = 0;
  v18 = v1;
  v19 = objc_msgSend(a1, sel_detectedEventPolarity);
  v128 = v18;
  v18[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_detectedEventPolarity] = v19;
  v20 = objc_msgSend(a1, sel_reservationIdError);
  if (v20)
  {
    v153 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for NSError);
    if (swift_dynamicCast())
      v21 = v152;
    else
      v21 = 0;
  }
  else
  {
    v21 = 0;
  }
  swift_beginAccess();
  v22 = *v3;
  *v3 = v21;

  v23 = objc_msgSend(a1, sel_reservationId);
  if (v23)
  {
    v24 = v23;
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v27 = v26;

  }
  else
  {
    v25 = 0;
    v27 = 0;
  }
  swift_beginAccess();
  *v4 = v25;
  v4[1] = v27;
  swift_bridgeObjectRelease();
  v28 = objc_msgSend(a1, sel_reservationNameError);
  if (v28)
  {
    v151 = v28;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for NSError);
    if (swift_dynamicCast())
      v29 = v150;
    else
      v29 = 0;
  }
  else
  {
    v29 = 0;
  }
  swift_beginAccess();
  v30 = *v5;
  *v5 = v29;

  v31 = objc_msgSend(a1, sel_reservationName);
  if (v31)
  {
    v32 = v31;
    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v35 = v34;

  }
  else
  {
    v33 = 0;
    v35 = 0;
  }
  swift_beginAccess();
  *v6 = v33;
  v6[1] = v35;
  swift_bridgeObjectRelease();
  v36 = objc_msgSend(a1, sel_startAddressError);
  if (v36)
  {
    v149 = v36;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for NSError);
    if (swift_dynamicCast())
      v37 = v148;
    else
      v37 = 0;
  }
  else
  {
    v37 = 0;
  }
  swift_beginAccess();
  v38 = *v10;
  *v10 = v37;

  v39 = objc_msgSend(a1, sel_startAddress);
  if (v39)
  {
    v40 = v39;
    v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v43 = v42;

  }
  else
  {
    v41 = 0;
    v43 = 0;
  }
  swift_beginAccess();
  *v11 = v41;
  v11[1] = v43;
  swift_bridgeObjectRelease();
  v44 = objc_msgSend(a1, sel_startAddressComponents);
  if (v44)
  {
    v45 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    v44 = (id)specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(v45);
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  *(_QWORD *)v113 = v44;
  swift_bridgeObjectRelease();
  v46 = objc_msgSend(a1, sel_endAddressError);
  if (v46)
  {
    v147 = v46;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for NSError);
    if (swift_dynamicCast())
      v47 = v146;
    else
      v47 = 0;
  }
  else
  {
    v47 = 0;
  }
  swift_beginAccess();
  v48 = *v114;
  *v114 = v47;

  v49 = objc_msgSend(a1, sel_endAddress);
  if (v49)
  {
    v50 = v49;
    v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v53 = v52;

  }
  else
  {
    v51 = 0;
    v53 = 0;
  }
  swift_beginAccess();
  *v12 = v51;
  v12[1] = v53;
  swift_bridgeObjectRelease();
  v54 = objc_msgSend(a1, sel_endAddressComponents);
  if (v54)
  {
    v55 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    v54 = (id)specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(v55);
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  *(_QWORD *)v115 = v54;
  swift_bridgeObjectRelease();
  v56 = objc_msgSend(a1, sel_startPlaceError);
  if (v56)
  {
    v145 = v56;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for NSError);
    if (swift_dynamicCast())
      v57 = v144;
    else
      v57 = 0;
  }
  else
  {
    v57 = 0;
  }
  swift_beginAccess();
  v58 = *v116;
  *v116 = v57;

  v59 = objc_msgSend(a1, sel_startPlace);
  if (v59)
  {
    v60 = v59;
    v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v63 = v62;

  }
  else
  {
    v61 = 0;
    v63 = 0;
  }
  swift_beginAccess();
  *v117 = v61;
  v117[1] = v63;
  swift_bridgeObjectRelease();
  v64 = objc_msgSend(a1, sel_endPlaceError);
  if (v64)
  {
    v143 = v64;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for NSError);
    if (swift_dynamicCast())
      v65 = v142;
    else
      v65 = 0;
  }
  else
  {
    v65 = 0;
  }
  swift_beginAccess();
  v66 = *v118;
  *v118 = v65;

  v67 = objc_msgSend(a1, sel_endPlace);
  if (v67)
  {
    v68 = v67;
    v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v71 = v70;

  }
  else
  {
    v69 = 0;
    v71 = 0;
  }
  swift_beginAccess();
  *v119 = v69;
  v119[1] = v71;
  swift_bridgeObjectRelease();
  v72 = objc_msgSend(a1, sel_startDateError);
  if (v72)
  {
    v141 = v72;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for NSError);
    if (swift_dynamicCast())
      v73 = v140;
    else
      v73 = 0;
  }
  else
  {
    v73 = 0;
  }
  swift_beginAccess();
  v74 = *v120;
  *v120 = v73;

  v75 = objc_msgSend(a1, sel_startDate);
  if (v75)
  {
    v76 = v75;
    v77 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v79 = v78;

  }
  else
  {
    v77 = 0;
    v79 = 0;
  }
  swift_beginAccess();
  *v121 = v77;
  v121[1] = v79;
  swift_bridgeObjectRelease();
  v80 = objc_msgSend(a1, sel_endDateError);
  if (v80)
  {
    v139 = v80;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for NSError);
    if (swift_dynamicCast())
      v81 = v138;
    else
      v81 = 0;
  }
  else
  {
    v81 = 0;
  }
  swift_beginAccess();
  v82 = *v122;
  *v122 = v81;

  v83 = objc_msgSend(a1, sel_endDate);
  if (v83)
  {
    v84 = v83;
    v85 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v87 = v86;

  }
  else
  {
    v85 = 0;
    v87 = 0;
  }
  swift_beginAccess();
  *v123 = v85;
  v123[1] = v87;
  swift_bridgeObjectRelease();
  v88 = objc_msgSend(a1, sel_hotelNameError);
  if (v88)
  {
    v137 = v88;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for NSError);
    if (swift_dynamicCast())
      v89 = v136;
    else
      v89 = 0;
  }
  else
  {
    v89 = 0;
  }
  swift_beginAccess();
  v90 = *v124;
  *v124 = v89;

  v91 = objc_msgSend(a1, sel_hotelName);
  if (v91)
  {
    v92 = v91;
    v93 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v95 = v94;

  }
  else
  {
    v93 = 0;
    v95 = 0;
  }
  swift_beginAccess();
  *v125 = v93;
  v125[1] = v95;
  swift_bridgeObjectRelease();
  v96 = objc_msgSend(a1, sel_guestNameError);
  if (v96)
  {
    v135 = v96;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for NSError);
    if (swift_dynamicCast())
      v97 = v134;
    else
      v97 = 0;
  }
  else
  {
    v97 = 0;
  }
  swift_beginAccess();
  v98 = *v126;
  *v126 = v97;

  v99 = objc_msgSend(a1, sel_guestName);
  if (v99)
  {
    v100 = v99;
    v101 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v103 = v102;

  }
  else
  {
    v101 = 0;
    v103 = 0;
  }
  swift_beginAccess();
  *v127 = v101;
  v127[1] = v103;
  swift_bridgeObjectRelease();
  v104 = objc_msgSend(a1, sel_movieNameError);
  if (v104)
  {
    v133 = v104;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for NSError);
    if (swift_dynamicCast())
      v105 = v132;
    else
      v105 = 0;
  }
  else
  {
    v105 = 0;
  }
  swift_beginAccess();
  v106 = *v129;
  *v129 = v105;

  v107 = objc_msgSend(a1, sel_movieName);
  if (v107)
  {
    v108 = v107;
    v109 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v111 = v110;

  }
  else
  {
    v109 = 0;
    v111 = 0;
  }
  swift_beginAccess();
  *v130 = v109;
  v130[1] = v111;

  swift_bridgeObjectRelease();
  v131.receiver = v128;
  v131.super_class = (Class)type metadata accessor for DUFoundInEventResult();
  return objc_msgSendSuper2(&v131, sel_init);
}

uint64_t associated type witness table accessor for DUProtobufEncodableProtocol.ProtobufType : Message in DUFoundInEventResult()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_228423D70()
{
  return lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_FoundInEventResult and conformance DocumentUnderstanding_ClientInterface_FoundInEventResult, 255, type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_FoundInEventResult);
}

Swift::String *TextUnderstandingDaemonName.unsafeMutableAddressor()
{
  return &TextUnderstandingDaemonName;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  id v14;
  uint64_t v15;

  v15 = MEMORY[0x24BEE4AF8];
  v2 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  if (!v5)
    goto LABEL_5;
LABEL_4:
  v9 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (i = v9 | (v8 << 6); ; i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    v14 = *(id *)(*(_QWORD *)(a1 + 56) + 8 * i);
    MEMORY[0x22E2AFAFC]();
    if (*(_QWORD *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    result = specialized Array._endMutation()();
    if (v5)
      goto LABEL_4;
LABEL_5:
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v11 >= v6)
      goto LABEL_25;
    v12 = *(_QWORD *)(v2 + 8 * v11);
    ++v8;
    if (!v12)
    {
      v8 = v11 + 1;
      if (v11 + 1 >= v6)
        goto LABEL_25;
      v12 = *(_QWORD *)(v2 + 8 * v8);
      if (!v12)
      {
        v8 = v11 + 2;
        if (v11 + 2 >= v6)
          goto LABEL_25;
        v12 = *(_QWORD *)(v2 + 8 * v8);
        if (!v12)
        {
          v8 = v11 + 3;
          if (v11 + 3 >= v6)
            goto LABEL_25;
          v12 = *(_QWORD *)(v2 + 8 * v8);
          if (!v12)
            break;
        }
      }
    }
LABEL_20:
    v5 = (v12 - 1) & v12;
  }
  v13 = v11 + 4;
  if (v13 >= v6)
  {
LABEL_25:
    swift_release();
    return v15;
  }
  v12 = *(_QWORD *)(v2 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_20;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v6)
      goto LABEL_25;
    v12 = *(_QWORD *)(v2 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_20;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t DUPoemImplementation.__allocating_init()()
{
  return swift_allocObject();
}

unint64_t static DUPoemImplementation.implementationID.getter()
{
  return 0xD00000000000001BLL;
}

uint64_t static DUPoemImplementation.specification.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for DUPoemSpecification();
  result = swift_allocObject();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for DUPoemSpecification;
  *a1 = result;
  return result;
}

void *static DUPoemImplementation.implementationAttributes.getter()
{
  return &outlined read-only object #0 of static DUPoemImplementation.implementationAttributes.getter;
}

id closure #1 in DUPoemImplementation.filterEntityExtractions(extractions:)(void **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  void *v17;
  id result;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  id v33;
  id v34;
  void *v35;
  id v36;
  void *v37;
  uint64_t v38;
  id v39;
  unint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  id v45;
  void *v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  char v51;
  char v52;
  _QWORD *v53;
  unint64_t v54;
  char v55;
  id v56;
  id v57;
  id v58;
  id v59;
  double v60;
  double v61;
  double v62;
  id v63;
  id v64;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  id v73[2];

  v71 = a2;
  v73[1] = *(id *)MEMORY[0x24BDAC8D0];
  v4 = type metadata accessor for Logger();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)&v69 - v10;
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v69 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v69 - v15;
  v17 = *a1;
  result = objc_msgSend(v17, sel_text);
  if (!result)
    return result;
  v19 = result;
  v70 = v17;
  v72 = v2;
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v22 = v21;

  v23 = HIBYTE(v22) & 0xF;
  if ((v22 & 0x2000000000000000) == 0)
    v23 = v20 & 0xFFFFFFFFFFFFLL;
  if (v23)
  {
    v24 = specialized static PoemStreamUtilities.normalizedName(name:)();
    v26 = v25;
    swift_bridgeObjectRelease();
    if (String.count.getter() < 2)
    {
      swift_bridgeObjectRelease();
      Logger.init()();
      v27 = Logger.logObject.getter();
      v28 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v27, v28))
      {
        v29 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v29 = 0;
        _os_log_impl(&dword_2282CC000, v27, v28, "Discarding span because it's a single character", v29, 2u);
        MEMORY[0x22E2B117C](v29, -1, -1);
      }

      return (id)(*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v11, v4);
    }
    v33 = objc_allocWithZone(MEMORY[0x24BDD14E8]);
    v73[0] = 0;
    v34 = objc_msgSend(v33, sel_initWithTypes_error_, 32, v73);
    v69 = v24;
    if (v34)
    {
      v35 = v34;
      v36 = v73[0];
      v37 = (void *)MEMORY[0x22E2AF8EC](v24, v26);
      swift_bridgeObjectRetain();
      v38 = String.UTF16View.count.getter();
      swift_bridgeObjectRelease();
      v39 = objc_msgSend(v35, sel_matchesInString_options_range_, v37, 0, 0, v38, v69);

      type metadata accessor for NSNumber(0, (unint64_t *)&lazy cache variable for type metadata for NSTextCheckingResult);
      v40 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v40 >> 62)
      {
        swift_bridgeObjectRetain();
        v68 = _CocoaArrayWrapper.endIndex.getter();

        swift_bridgeObjectRelease_n();
        if (v68)
          goto LABEL_16;
      }
      else
      {
        v41 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRelease();

        if (v41)
        {
LABEL_16:
          swift_bridgeObjectRelease();
          Logger.init()();
          v42 = Logger.logObject.getter();
          v43 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v42, v43))
          {
            v44 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v44 = 0;
            _os_log_impl(&dword_2282CC000, v42, v43, "Discarding span because it resembles a URL", v44, 2u);
            MEMORY[0x22E2B117C](v44, -1, -1);
          }

          return (id)(*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v14, v4);
        }
      }
    }
    else
    {
      v45 = v73[0];
      v46 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
      Logger.init()();
      v47 = Logger.logObject.getter();
      v48 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v47, v48))
      {
        v49 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v49 = 0;
        _os_log_impl(&dword_2282CC000, v47, v48, "PoemStreamUtilities: Unable to check for URL", v49, 2u);
        MEMORY[0x22E2B117C](v49, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v5 + 8))(v16, v4);
    }
    v50 = v71;
    if (!*(_QWORD *)(*(_QWORD *)v71 + 16)
      || (swift_bridgeObjectRetain(),
          specialized __RawDictionaryStorage.find<A>(_:)(v69, v26),
          v52 = v51,
          swift_bridgeObjectRelease(),
          (v52 & 1) == 0))
    {
      v64 = v70;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v73[0] = *(id *)v50;
      *(_QWORD *)v50 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v64, v69, v26, isUniquelyReferenced_nonNull_native);
      *(id *)v50 = v73[0];
LABEL_31:
      swift_bridgeObjectRelease();
      return (id)swift_bridgeObjectRelease();
    }
    v53 = *(_QWORD **)v50;
    if (*(_QWORD *)(*(_QWORD *)v50 + 16))
    {
      swift_bridgeObjectRetain();
      v54 = specialized __RawDictionaryStorage.find<A>(_:)(v69, v26);
      if ((v55 & 1) == 0)
        return (id)swift_bridgeObjectRelease_n();
      v56 = *(id *)(v53[7] + 8 * v54);
      swift_bridgeObjectRelease();
      v57 = objc_msgSend(v56, sel_identifier);
      if (!v57)
      {
        v63 = v70;
        goto LABEL_36;
      }

      v58 = v70;
      v59 = objc_msgSend(v70, sel_identifier);
      if (v59)
      {

        objc_msgSend(v58, sel_confidenceScore);
        v61 = v60;
        objc_msgSend(v56, sel_confidenceScore);
        if (v62 < v61)
        {
          v63 = v58;
LABEL_36:
          v66 = (uint64_t)v63;
          v67 = swift_isUniquelyReferenced_nonNull_native();
          v73[0] = *(id *)v50;
          *(_QWORD *)v50 = 0x8000000000000000;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v66, v69, v26, v67);
          *(id *)v50 = v73[0];

          goto LABEL_31;
        }
      }

    }
    return (id)swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  Logger.init()();
  v30 = Logger.logObject.getter();
  v31 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v30, v31))
  {
    v32 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v32 = 0;
    _os_log_impl(&dword_2282CC000, v30, v31, "Found an empty span while filtering", v32, 2u);
    MEMORY[0x22E2B117C](v32, -1, -1);
  }

  return (id)(*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t DUPoemImplementation.runTypedOnRequest(request:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = a1;
  return swift_task_switch();
}

{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 56) = a1;
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 72) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t DUPoemImplementation.runTypedOnRequest(request:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);

  v1 = (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 24) + 136))();
  *(_QWORD *)(v0 + 32) = v1;
  if (v1)
  {
    type metadata accessor for DUPosTaggingSpecification();
    *(_QWORD *)(v0 + 40) = swift_allocObject();
    v6 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:)
                                         + async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:));
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 48) = v2;
    *v2 = v0;
    v2[1] = DUPoemImplementation.runTypedOnRequest(request:);
    return v6(*(_QWORD *)(v0 + 24));
  }
  else
  {
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v4 = swift_allocError();
    *(_QWORD *)v5 = 0xD000000000000015;
    *(_QWORD *)(v5 + 8) = 0x80000002284DB0D0;
    *(_BYTE *)(v5 + 16) = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v4, 1);
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;

  v1 = *(void **)(v0 + 32);
  if (*(_QWORD *)(v0 + 56))
  {
    v2 = specialized DUPoemImplementation.generateBufferStreamEvents(document:posTags:)(*(_QWORD *)(v0 + 56));
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 16) = v2;
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 64) = v3;
    *v3 = v0;
    v3[1] = DUPoemImplementation.runTypedOnRequest(request:);
    return specialized DUPoemImplementation.generateBufferStreamEventsUsingEcr(document:)((uint64_t)v1);
  }
  else
  {
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v5 = swift_allocError();
    *(_QWORD *)v6 = 0xD000000000000016;
    *(_QWORD *)(v6 + 8) = 0x80000002284E1780;
    *(_BYTE *)(v6 + 16) = 0;

    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v5, 1);
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  v1 = *(void **)(v0 + 32);
  specialized Array.append<A>(contentsOf:)(*(_QWORD *)(v0 + 72));
  v2 = specialized DUPoemImplementation.filterEntityExtractions(extractions:)(*(_QWORD *)(v0 + 16));

  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, _QWORD))(v0 + 8))(v2, 0);
}

uint64_t DUPoemImplementation.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t DUPoemImplementation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t DUPoemImplementation.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t protocol witness for static DUProcessingPhaseImplementation.specification.getter in conformance DUPoemImplementation@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for DUPoemSpecification();
  result = swift_allocObject();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for DUPoemSpecification;
  *a1 = result;
  return result;
}

unint64_t protocol witness for static DUProcessingPhaseImplementation.implementationID.getter in conformance DUPoemImplementation()
{
  return 0xD00000000000001BLL;
}

void *protocol witness for static DUProcessingPhaseImplementation.implementationAttributes.getter in conformance DUPoemImplementation()
{
  return &outlined read-only object #0 of protocol witness for static DUProcessingPhaseImplementation.implementationAttributes.getter in conformance DUPoemImplementation;
}

uint64_t protocol witness for DUProcessingPhaseImplementation.runTypedOnRequest(request:) in conformance DUPoemImplementation(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  *(_QWORD *)(v3 + 16) = a1;
  v7 = (uint64_t (*)(uint64_t))(**(int **)(**(_QWORD **)v2 + 104) + *(_QWORD *)(**(_QWORD **)v2 + 104));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v5;
  *v5 = v3;
  v5[1] = protocol witness for DUProcessingPhaseImplementation.runTypedOnRequest(request:) in conformance DUCategoryClassificationSmolBERToImplementation;
  return v7(a2);
}

uint64_t specialized DUPoemImplementation.generateBufferStreamEvents(document:posTags:)(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t i;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Class isa;
  Class v24;
  id v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = MEMORY[0x24BEE4AF8];
  v29 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v3 = result;
    if (result)
      goto LABEL_3;
LABEL_20:
    swift_bridgeObjectRelease();
    v14 = MEMORY[0x24BEE4AF8];
    if ((MEMORY[0x24BEE4AF8] & 0x8000000000000000) != 0)
      goto LABEL_30;
LABEL_21:
    if ((v14 & 0x4000000000000000) != 0)
      goto LABEL_30;
    v15 = *(_QWORD *)(v14 + 16);
    if (v15)
      goto LABEL_23;
LABEL_31:
    swift_release();
    return MEMORY[0x24BEE4AF8];
  }
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain();
  if (!v3)
    goto LABEL_20;
LABEL_3:
  if (v3 < 1)
  {
    __break(1u);
    goto LABEL_34;
  }
  for (i = 0; i != v3; ++i)
  {
    if ((a1 & 0xC000000000000001) != 0)
      v6 = (_QWORD *)MEMORY[0x22E2AFF34](i, a1);
    else
      v6 = *(id *)(a1 + 8 * i + 32);
    v7 = v6;
    v8 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v6) + 0x70))();
    v10 = v9;
    if (v8 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v10 == v11)
    {
      swift_bridgeObjectRelease_n();
LABEL_6:
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      continue;
    }
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v13 & 1) != 0)
      goto LABEL_6;

  }
  swift_bridgeObjectRelease();
  v14 = v29;
  if ((v29 & 0x8000000000000000) == 0)
    goto LABEL_21;
LABEL_30:
  swift_bridgeObjectRetain();
  v15 = _CocoaArrayWrapper.endIndex.getter();
  swift_release();
  if (!v15)
    goto LABEL_31;
LABEL_23:
  v30 = v2;
  result = specialized ContiguousArray.reserveCapacity(_:)();
  if ((v15 & 0x8000000000000000) == 0)
  {
    type metadata accessor for NSNumber(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v16 = 0;
    v28 = v14 & 0xC000000000000001;
    v17 = v14;
    do
    {
      if (v28)
        v18 = (_QWORD *)MEMORY[0x22E2AFF34](v16, v14);
      else
        v18 = *(id *)(v14 + 8 * v16 + 32);
      v19 = v18;
      ++v16;
      v20 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v18) + 0x88))();
      v22 = v21;
      isa = NSNumber.init(integerLiteral:)(1).super.super.isa;
      v24 = NSNumber.init(integerLiteral:)(0).super.super.isa;
      v25 = objc_allocWithZone(MEMORY[0x24BE0C7F8]);
      v26 = (void *)MEMORY[0x22E2AF8EC](v20, v22);
      swift_bridgeObjectRelease();
      objc_msgSend(v25, sel_initWithType_text_identifier_confidenceScore_contactIdentifier_role_isCoref_, 1, v26, 0, isa, 0, 3, v24);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v14 = v17;
    }
    while (v15 != v16);
    v27 = v30;
    swift_release();
    return v27;
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t specialized DUPoemImplementation.generateBufferStreamEventsUsingEcr(document:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[13] = a1;
  v2 = type metadata accessor for CharacterSet();
  v1[14] = v2;
  v1[15] = *(_QWORD *)(v2 - 8);
  v1[16] = swift_task_alloc();
  v3 = type metadata accessor for Logger();
  v1[17] = v3;
  v1[18] = *(_QWORD *)(v3 - 8);
  v1[19] = swift_task_alloc();
  v1[20] = swift_task_alloc();
  v1[21] = swift_task_alloc();
  v1[22] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 208) = a1;
  *(_QWORD *)(v3 + 216) = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t specialized DUPoemImplementation.generateBufferStreamEventsUsingEcr(document:)()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  Class isa;
  id v10;
  id v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t (*v15)(id);

  *(_QWORD *)(v0 + 88) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 40) = &type metadata for IntelligencePlatform;
  *(_QWORD *)(v0 + 48) = lazy protocol witness table accessor for type IntelligencePlatform and conformance IntelligencePlatform();
  v1 = isFeatureEnabled(_:)();
  v2 = __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  if ((v1 & 1) != 0
    && (v3 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 104)) + 0x88))(v2), v4))
  {
    v5 = v3;
    v6 = v4;
    v7 = objc_allocWithZone(MEMORY[0x24BE584E0]);
    v8 = (void *)MEMORY[0x22E2AF8EC](v5, v6);
    swift_bridgeObjectRelease();
    isa = Array._bridgeToObjectiveC()().super.isa;
    v10 = objc_msgSend(v7, sel_initWithText_entityClassFilter_spans_, v8, isa, 0);
    *(_QWORD *)(v0 + 184) = v10;

    v11 = objc_allocWithZone((Class)type metadata accessor for EntityResolutionTextClient());
    *(_QWORD *)(v0 + 192) = EntityResolutionTextClient.init(for:viaXPC:warmup:)();
    v15 = (uint64_t (*)(id))((int)*MEMORY[0x24BE583A8] + MEMORY[0x24BE583A8]);
    v12 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 200) = v12;
    *v12 = v0;
    v12[1] = specialized DUPoemImplementation.generateBufferStreamEventsUsingEcr(document:);
    return v15(v10);
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 88);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v14);
  }
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  _QWORD *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(void **)(v0 + 184);

  v2 = *(void **)(v0 + 216);
  Logger.init()();
  v3 = v2;
  v4 = v2;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v7 = 138412290;
    v9 = v2;
    v10 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 96) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v8 = v10;

    _os_log_impl(&dword_2282CC000, v5, v6, "Error while calling ecr: %@", v7, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x22E2B117C](v8, -1, -1);
    MEMORY[0x22E2B117C](v7, -1, -1);

  }
  else
  {

  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 144) + 8))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 136));
  v11 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v11);
}

void specialized DUPoemImplementation.generateBufferStreamEventsUsingEcr(document:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  id v11;
  void *v12;
  BOOL v13;
  unint64_t v14;
  id v15;
  void *v16;
  id v17;
  char v18;
  char v19;
  id v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  NSObject *v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t);
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  id v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  void (*v74)(uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  id v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  uint8_t *v86;
  NSObject *v87;
  void *v88;
  NSNumber v89;
  void *v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  _QWORD *v101;
  unint64_t v102;
  uint64_t v103;
  id v104;
  void (*v105)(uint64_t, uint64_t);
  uint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115[2];

  v1 = v0;
  v2 = *(void **)(v0 + 208);
  v4 = v0 + 184;
  v3 = *(void **)(v0 + 184);

  v5 = objc_msgSend(v2, sel_rankedResults);
  type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for GDRankerResult);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v7 = v6;
  v100 = v6;
  if (v6 >> 62)
    goto LABEL_53;
  v8 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v8)
  {
LABEL_54:
    v94 = *(void **)(v1 + 208);
    swift_bridgeObjectRelease();

    v95 = *(_QWORD *)(v1 + 88);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    (*(void (**)(uint64_t))(v1 + 8))(v95);
    return;
  }
LABEL_3:
  v9 = 0;
  v101 = (_QWORD *)(v1 + 88);
  v107 = *(_QWORD *)(v1 + 144);
  v103 = *(_QWORD *)(v1 + 120);
  v99 = v7 & 0xC000000000000001;
  v96 = v7 + 32;
  v97 = v7 & 0xFFFFFFFFFFFFFF8;
  v112 = v1;
  v98 = v8;
  while (1)
  {
    if (v99)
    {
      v10 = v9;
      v11 = (id)MEMORY[0x22E2AFF34](v9, v7);
    }
    else
    {
      if (v9 >= *(_QWORD *)(v97 + 16))
        goto LABEL_52;
      v10 = v9;
      v11 = *(id *)(v96 + 8 * v9);
    }
    v12 = v11;
    v13 = __OFADD__(v10, 1);
    v14 = v10 + 1;
    if (v13)
    {
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      swift_bridgeObjectRetain();
      v8 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      v7 = v100;
      if (!v8)
        goto LABEL_54;
      goto LABEL_3;
    }
    v102 = v14;
    v15 = objc_msgSend(v11, sel_span);
    if (v15)
      break;
LABEL_5:

    v9 = v102;
    v7 = v100;
    if (v102 == v98)
      goto LABEL_54;
  }
  v16 = v15;
  objc_msgSend(v15, sel_range);
  v17 = objc_msgSend(v16, sel_text);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  Range<>.init(_:in:)();
  v19 = v18;
  swift_bridgeObjectRelease();
  if ((v19 & 1) != 0)
  {

    goto LABEL_5;
  }
  v104 = v16;
  v20 = objc_msgSend(v12, sel_rankedItems);
  type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for GDRankerItem);
  v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v21 >> 62))
  {
    v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v22)
      goto LABEL_15;
    goto LABEL_49;
  }
  swift_bridgeObjectRetain();
  v22 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v22)
  {
LABEL_49:

    swift_bridgeObjectRelease();
    v12 = v104;
    goto LABEL_5;
  }
LABEL_15:
  v23 = 0;
  v110 = v21;
  v111 = v21 & 0xC000000000000001;
  v108 = v12;
  v109 = v22;
  while (2)
  {
    if (v111)
      v26 = (id)MEMORY[0x22E2AFF34](v23, v21);
    else
      v26 = *(id *)(v21 + 8 * v23 + 32);
    v27 = v26;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
      goto LABEL_51;
    }
    v113 = v23;
    Logger.init()();
    v28 = v27;
    v29 = Logger.logObject.getter();
    v30 = static os_log_type_t.debug.getter();
    v114 = v23 + 1;
    if (!os_log_type_enabled(v29, v30))
    {
      v42 = *(_QWORD *)(v1 + 176);
      v43 = *(_QWORD *)(v1 + 136);

      v41 = *(void (**)(uint64_t, uint64_t))(v107 + 8);
      v41(v42, v43);
LABEL_28:
      -[NSObject score](v28, sel_score);
      if (v44 <= 0.0)
      {
        Logger.init()();
        v28 = v28;
        v72 = Logger.logObject.getter();
        v73 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v72, v73))
        {
          v74 = v41;
          v75 = swift_slowAlloc();
          v76 = swift_slowAlloc();
          v115[0] = v76;
          *(_DWORD *)v75 = 136315394;
          v77 = -[NSObject entityID](v28, sel_entityID);
          v78 = objc_msgSend(v77, sel_stringValue);

          if (!v78)
            goto LABEL_56;
          v106 = *(_QWORD *)(v1 + 160);
          v79 = *(_QWORD *)(v1 + 136);
          v80 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v82 = v81;

          *(_QWORD *)(v75 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v82, v115);
          v1 = v112;
          swift_bridgeObjectRelease();

          *(_WORD *)(v75 + 12) = 2048;
          -[NSObject score](v28, sel_score);
          *(_QWORD *)(v75 + 14) = v83;

          _os_log_impl(&dword_2282CC000, v72, v73, "Ignoring ecr extraction with id %s and score %f", (uint8_t *)v75, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x22E2B117C](v76, -1, -1);
          MEMORY[0x22E2B117C](v75, -1, -1);

          v74(v106, v79);
        }
        else
        {
          v24 = *(_QWORD *)(v1 + 160);
          v25 = *(_QWORD *)(v1 + 136);

          v41(v24, v25);
        }
        v12 = v108;
      }
      else
      {
        v105 = v41;
        v45 = *(_QWORD *)(v1 + 128);
        v46 = *(_QWORD *)(v1 + 112);
        v47 = objc_msgSend(v104, sel_text);
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        v48 = String.subscript.getter();
        v50 = v49;
        v52 = v51;
        v54 = v53;
        swift_bridgeObjectRelease();
        v55 = MEMORY[0x22E2AF988](v48, v50, v52, v54);
        v57 = v56;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v1 + 56) = v55;
        *(_QWORD *)(v1 + 64) = v57;
        static CharacterSet.punctuationCharacters.getter();
        lazy protocol witness table accessor for type String and conformance String();
        v58 = StringProtocol.trimmingCharacters(in:)();
        v59 = v1;
        v61 = v60;
        v62 = *(void (**)(uint64_t, uint64_t))(v103 + 8);
        v62(v45, v46);
        *(_QWORD *)(v59 + 72) = v58;
        *(_QWORD *)(v59 + 80) = v61;
        static CharacterSet.whitespacesAndNewlines.getter();
        v63 = StringProtocol.trimmingCharacters(in:)();
        v65 = v64;
        v62(v45, v46);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v66 = HIBYTE(v65) & 0xF;
        if ((v65 & 0x2000000000000000) == 0)
          v66 = v63 & 0xFFFFFFFFFFFFLL;
        if (v66)
        {
          v67 = -[NSObject entityID](v28, sel_entityID);
          v68 = objc_msgSend(v67, sel_stringValue);

          if (v68)
          {
            v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v71 = v70;

          }
          else
          {
            v69 = 0;
            v71 = 0;
          }
          v1 = v112;
          v12 = v108;
          v88 = (void *)MEMORY[0x22E2AFBEC](-[NSObject score](v28, sel_score));
          type metadata accessor for NSNumber(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
          v89.super.super.isa = NSNumber.init(integerLiteral:)(0).super.super.isa;
          v90 = (void *)MEMORY[0x22E2AF8EC](v63, v65);
          swift_bridgeObjectRelease();
          if (v71)
          {
            v91 = (void *)MEMORY[0x22E2AF8EC](v69, v71);
            swift_bridgeObjectRelease();
          }
          else
          {
            v91 = 0;
          }
          v21 = v110;
          objc_msgSend(objc_allocWithZone(MEMORY[0x24BE0C7F8]), sel_initWithType_text_identifier_confidenceScore_contactIdentifier_role_isCoref_, 0, v90, v91, v88, 0, 3, v89.super.super.isa);

          MEMORY[0x22E2AFAFC]();
          if (*(_QWORD *)((*v101 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v101 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();

LABEL_19:
          v23 = v113 + 1;
          if (v114 == v109)
            goto LABEL_49;
          continue;
        }
        swift_bridgeObjectRelease();
        Logger.init()();
        v84 = Logger.logObject.getter();
        v85 = static os_log_type_t.debug.getter();
        v1 = v59;
        if (os_log_type_enabled(v84, v85))
        {
          v86 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v86 = 0;
          _os_log_impl(&dword_2282CC000, v84, v85, "No need to have extractions with empty string", v86, 2u);
          MEMORY[0x22E2B117C](v86, -1, -1);
          v87 = v28;
        }
        else
        {
          v87 = v84;
          v84 = v28;
        }
        v12 = v108;
        v92 = *(_QWORD *)(v1 + 168);
        v93 = *(_QWORD *)(v1 + 136);

        v105(v92, v93);
      }
      v21 = v110;
      goto LABEL_19;
    }
    break;
  }
  v31 = swift_slowAlloc();
  v32 = swift_slowAlloc();
  v115[0] = v32;
  *(_DWORD *)v31 = 136315138;
  v33 = -[NSObject entityID](v28, sel_entityID);
  v34 = objc_msgSend(v33, sel_stringValue);

  if (v34)
  {
    v35 = *(_QWORD *)(v1 + 176);
    v36 = *(_QWORD *)(v1 + 136);
    v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v39 = v38;

    v40 = v37;
    v1 = v112;
    *(_QWORD *)(v31 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v39, v115);
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_2282CC000, v29, v30, "Found ecr extraction with id %s", (uint8_t *)v31, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22E2B117C](v32, -1, -1);
    MEMORY[0x22E2B117C](v31, -1, -1);

    v41 = *(void (**)(uint64_t, uint64_t))(v107 + 8);
    v41(v35, v36);
    goto LABEL_28;
  }

  __break(1u);
LABEL_56:

  __break(1u);
}

uint64_t specialized DUPoemImplementation.filterEntityExtractions(extractions:)(unint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;

  v10 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  if (!(a1 >> 62))
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v2)
      goto LABEL_3;
LABEL_11:
    swift_bridgeObjectRelease();
LABEL_12:
    v7 = swift_bridgeObjectRetain();
    v8 = specialized Sequence.compactMap<A>(_:)(v7);
    swift_bridgeObjectRelease_n();
    return v8;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v2 = result;
  if (!result)
    goto LABEL_11;
LABEL_3:
  if (v2 >= 1)
  {
    v4 = 0;
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
        v5 = (id)MEMORY[0x22E2AFF34](v4, a1);
      else
        v5 = *(id *)(a1 + 8 * v4 + 32);
      v6 = v5;
      ++v4;
      v9 = v5;
      closure #1 in DUPoemImplementation.filterEntityExtractions(extractions:)(&v9, (uint64_t)&v10);

    }
    while (v2 != v4);
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

_UNKNOWN **associated type witness table accessor for DUProcessingPhaseImplementation.SpecificationType : DUProcessingPhaseSpecification in DUPoemImplementation()
{
  return &protocol witness table for DUPoemSpecification;
}

uint64_t type metadata accessor for DUPoemImplementation()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type IntelligencePlatform and conformance IntelligencePlatform()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IntelligencePlatform and conformance IntelligencePlatform;
  if (!lazy protocol witness table cache variable for type IntelligencePlatform and conformance IntelligencePlatform)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for IntelligencePlatform, &type metadata for IntelligencePlatform);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IntelligencePlatform and conformance IntelligencePlatform);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IntelligencePlatform and conformance IntelligencePlatform;
  if (!lazy protocol witness table cache variable for type IntelligencePlatform and conformance IntelligencePlatform)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for IntelligencePlatform, &type metadata for IntelligencePlatform);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IntelligencePlatform and conformance IntelligencePlatform);
  }
  return result;
}

uint64_t NeighborRetrievalResult.init(recordID:associatedData:distance:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, float a6@<S0>)
{
  *(_QWORD *)a5 = result;
  *(_QWORD *)(a5 + 8) = a2;
  *(_QWORD *)(a5 + 16) = a3;
  *(_QWORD *)(a5 + 24) = a4;
  *(float *)(a5 + 32) = a6;
  return result;
}

uint64_t VectorRecord.recordID.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t VectorRecord.vector.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t VectorRecord.associatedData.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  outlined copy of Data?(v1, *(_QWORD *)(v0 + 32));
  return v1;
}

uint64_t VectorRecord.init(recordID:vector:associatedData:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  *a6 = result;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  a6[4] = a5;
  return result;
}

uint64_t NeighborRetrievalResult.recordID.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NeighborRetrievalResult.associatedData.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  outlined copy of Data?(v1, *(_QWORD *)(v0 + 24));
  return v1;
}

float NeighborRetrievalResult.distance.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 32);
}

uint64_t VectorRetrieval.fetchNeighborsForVector(vector:distanceLimit:countLimit:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t destroy for VectorRecord(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(a1 + 32);
  if (v3 >> 60 != 15)
    return outlined consume of Data._Representation(*(_QWORD *)(a1 + 24), v3);
  return result;
}

uint64_t initializeWithCopy for VectorRecord(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;

  v3 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = a2[2];
  v4 = a2 + 3;
  v5 = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v5 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)v4;
  }
  else
  {
    v6 = *v4;
    outlined copy of Data._Representation(*v4, v5);
    *(_QWORD *)(a1 + 24) = v6;
    *(_QWORD *)(a1 + 32) = v5;
  }
  return a1;
}

_QWORD *assignWithCopy for VectorRecord(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a2 + 3;
  v5 = a2[4];
  if (a1[4] >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      v7 = *v4;
      outlined copy of Data._Representation(*v4, v5);
      v8 = a1[3];
      v9 = a1[4];
      a1[3] = v7;
      a1[4] = v5;
      outlined consume of Data._Representation(v8, v9);
      return a1;
    }
    outlined destroy of Data((uint64_t)(a1 + 3));
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 3) = *(_OWORD *)v4;
    return a1;
  }
  v6 = *v4;
  outlined copy of Data._Representation(*v4, v5);
  a1[3] = v6;
  a1[4] = v5;
  return a1;
}

_QWORD *assignWithTake for VectorRecord(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  v5 = a2 + 3;
  v6 = a1[4];
  if (v6 >> 60 != 15)
  {
    v7 = a2[4];
    if (v7 >> 60 != 15)
    {
      v8 = a1[3];
      a1[3] = *v5;
      a1[4] = v7;
      outlined consume of Data._Representation(v8, v6);
      return a1;
    }
    outlined destroy of Data((uint64_t)(a1 + 3));
  }
  *(_OWORD *)(a1 + 3) = *(_OWORD *)v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for VectorRecord(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VectorRecord(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for VectorRecord()
{
  return &type metadata for VectorRecord;
}

uint64_t destroy for NeighborRetrievalResult(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  result = swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >> 60 != 15)
    return outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), v3);
  return result;
}

uint64_t initializeWithCopy for NeighborRetrievalResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  unint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = (_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *v5;
  }
  else
  {
    v7 = *(_QWORD *)v5;
    outlined copy of Data._Representation(v7, v6);
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v6;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

uint64_t assignWithCopy for NeighborRetrievalResult(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 24) >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      v7 = *v4;
      outlined copy of Data._Representation(*v4, *(_QWORD *)(a2 + 24));
      v8 = *(_QWORD *)(a1 + 16);
      v9 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 16) = v7;
      *(_QWORD *)(a1 + 24) = v5;
      outlined consume of Data._Representation(v8, v9);
      goto LABEL_8;
    }
    outlined destroy of Data(a1 + 16);
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v4;
    goto LABEL_8;
  }
  v6 = *v4;
  outlined copy of Data._Representation(*v4, *(_QWORD *)(a2 + 24));
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v5;
LABEL_8:
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

__n128 __swift_memcpy36_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for NeighborRetrievalResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = (_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  if (v6 >> 60 != 15)
  {
    v7 = *(_QWORD *)(a2 + 24);
    if (v7 >> 60 != 15)
    {
      v8 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = *v5;
      *(_QWORD *)(a1 + 24) = v7;
      outlined consume of Data._Representation(v8, v6);
      goto LABEL_6;
    }
    outlined destroy of Data(a1 + 16);
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)v5;
LABEL_6:
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for NeighborRetrievalResult(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 36))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NeighborRetrievalResult(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 36) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 36) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NeighborRetrievalResult()
{
  return &type metadata for NeighborRetrievalResult;
}

uint64_t specialized Collection.first.getter(uint64_t a1)
{
  uint64_t result;
  int v3;
  char v4;
  uint64_t v5;

  result = specialized Set.startIndex.getter(a1);
  if ((v4 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
    return 0;
  v5 = specialized Set.subscript.getter(result, v3, 0, a1);
  swift_bridgeObjectRetain();
  return v5;
}

_BYTE *specialized Collection.first.getter(uint64_t a1)
{
  _BYTE *result;
  int v3;
  char v4;
  char v5;

  result = (_BYTE *)specialized Dictionary.startIndex.getter(a1);
  if ((v4 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == (_BYTE *)(1 << *(_BYTE *)(a1 + 32)))
    return 0;
  else
    return specialized Dictionary.subscript.getter(&v5, (uint64_t)result, v3, 0, a1);
}

uint64_t DUStructuredExtractionContextKitImplementation.__allocating_init()()
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0x2F3A6F746C69616DLL;
  *(_QWORD *)(result + 24) = 0xE90000000000002FLL;
  return result;
}

void *one-time initialization function for typeMapping()
{
  uint64_t inited;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2284C94F0;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 40) = v1;
  *(_QWORD *)(inited + 48) = 0x656C746974;
  *(_QWORD *)(inited + 56) = 0xE500000000000000;
  *(_QWORD *)(inited + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 72) = v2;
  *(_QWORD *)(inited + 80) = 0x656E6F6870;
  *(_QWORD *)(inited + 88) = 0xE500000000000000;
  *(_QWORD *)(inited + 96) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 104) = v3;
  *(_QWORD *)(inited + 112) = 0x73736572646461;
  *(_QWORD *)(inited + 120) = 0xE700000000000000;
  *(_QWORD *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 136) = v4;
  *(_QWORD *)(inited + 144) = 7107189;
  *(_QWORD *)(inited + 152) = 0xE300000000000000;
  *(_QWORD *)(inited + 160) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 168) = v5;
  strcpy((char *)(inited + 176), "calendarEvent");
  *(_WORD *)(inited + 190) = -4864;
  *(_QWORD *)(inited + 192) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 200) = v6;
  *(_QWORD *)(inited + 208) = 0x747865546576696CLL;
  *(_QWORD *)(inited + 216) = 0xE800000000000000;
  *(_QWORD *)(inited + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 232) = v7;
  *(_QWORD *)(inited + 240) = 0x6E6F73726570;
  *(_QWORD *)(inited + 248) = 0xE600000000000000;
  *(_QWORD *)(inited + 256) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 264) = v8;
  *(_QWORD *)(inited + 272) = 0x656D6F486D68;
  *(_QWORD *)(inited + 280) = 0xE600000000000000;
  *(_QWORD *)(inited + 288) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 296) = v9;
  *(_QWORD *)(inited + 304) = 0x6D6F6F526D68;
  *(_QWORD *)(inited + 312) = 0xE600000000000000;
  *(_QWORD *)(inited + 320) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 328) = v10;
  *(_QWORD *)(inited + 336) = 0x7373656363416D68;
  *(_QWORD *)(inited + 344) = 0xEB0000000079726FLL;
  result = (void *)specialized Dictionary.init(dictionaryLiteral:)(inited);
  typeMapping._rawValue = result;
  return result;
}

unint64_t static DUStructuredExtractionContextKitImplementation.implementationID.getter()
{
  return 0xD00000000000002FLL;
}

uint64_t static DUStructuredExtractionContextKitImplementation.specification.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for DUStructuredExtractionSpecification();
  result = swift_allocObject();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for DUStructuredExtractionSpecification;
  *a1 = result;
  return result;
}

void *static DUStructuredExtractionContextKitImplementation.implementationAttributes.getter()
{
  return &outlined read-only object #0 of static DUStructuredExtractionContextKitImplementation.implementationAttributes.getter;
}

uint64_t DUStructuredExtractionContextKitImplementation.emailURLPrefix.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DUStructuredExtractionContextKitImplementation.runTypedOnRequest(request:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 128) = a1;
  *(_QWORD *)(v2 + 136) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 168) = a1;
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t DUStructuredExtractionContextKitImplementation.runTypedOnRequest(request:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);

  v1 = (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 128) + 136))();
  *(_QWORD *)(v0 + 144) = v1;
  if (v1)
  {
    type metadata accessor for DUCreateContextRequestSpecification();
    *(_QWORD *)(v0 + 152) = swift_allocObject();
    v6 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:)
                                         + async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:));
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 160) = v2;
    *v2 = v0;
    v2[1] = DUStructuredExtractionContextKitImplementation.runTypedOnRequest(request:);
    return v6(*(_QWORD *)(v0 + 128));
  }
  else
  {
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v4 = swift_allocError();
    *(_QWORD *)v5 = 0xD000000000000015;
    *(_QWORD *)(v5 + 8) = 0x80000002284DB0D0;
    *(_BYTE *)(v5 + 16) = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v4, 1);
  }
}

{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  _QWORD *v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(void **)(v0 + 168);
  if (v1)
  {
    v2 = objc_msgSend(*(id *)(v0 + 168), sel_text);
    if (v2 || (v2 = objc_msgSend(v1, sel_uiElements)) != 0)
    {

LABEL_5:
      objc_msgSend(v1, sel_setIncludeStructuredExtractionResults_, 1);
      *(_QWORD *)(v0 + 56) = v0 + 120;
      *(_QWORD *)(v0 + 16) = v0;
      *(_QWORD *)(v0 + 24) = DUStructuredExtractionContextKitImplementation.runTypedOnRequest(request:);
      v3 = swift_continuation_init();
      *(_QWORD *)(v0 + 80) = MEMORY[0x24BDAC760];
      v4 = (_QWORD *)(v0 + 80);
      v4[1] = 0x40000000;
      v4[2] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned CKContextResponse?) -> () with result type CKContextResponse?;
      v4[3] = &block_descriptor_11;
      v4[4] = v3;
      objc_msgSend(v1, sel_executeWithReply_, v4);
      return swift_continuation_await();
    }
    v9 = (_QWORD *)MEMORY[0x24BEE4EA0];
    (*(void (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 144)) + 0x88))();
    v11 = v10;
    v12 = swift_bridgeObjectRelease();
    if (!v11)
    {
      v13 = (*(uint64_t (**)(uint64_t))((*v9 & **(_QWORD **)(v0 + 144)) + 0xD8))(v12);
      swift_bridgeObjectRelease();
      if (!v13)
      {
        objc_msgSend(v1, sel_setType_, 10);
        goto LABEL_5;
      }
    }
    v6 = *(void **)(v0 + 144);
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v7 = swift_allocError();
    *(_QWORD *)v14 = 0xD000000000000037;
    *(_QWORD *)(v14 + 8) = 0x80000002284E1810;
    *(_BYTE *)(v14 + 16) = 0;

  }
  else
  {
    v6 = *(void **)(v0 + 144);
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v7 = swift_allocError();
    *(_QWORD *)v8 = 0xD00000000000002FLL;
    *(_QWORD *)(v8 + 8) = 0x80000002284DB340;
    *(_BYTE *)(v8 + 16) = 0;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v7, 1);
}

{
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;

  v1 = *(void **)(v0 + 120);
  if (v1 && (v2 = objc_msgSend(*(id *)(v0 + 120), sel_results)) != 0)
  {
    v3 = v2;
    v4 = *(void **)(v0 + 168);
    v5 = *(_QWORD *)(v0 + 136);
    v6 = *(void **)(v0 + 144);
    type metadata accessor for CKContextResult();
    v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    swift_retain();
    v8 = specialized Sequence.compactMap<A>(_:)(v7, v5);
    swift_release();

    swift_bridgeObjectRelease();
    v9 = 0;
  }
  else
  {
    v10 = *(void **)(v0 + 168);
    v11 = *(void **)(v0 + 144);
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v8 = swift_allocError();
    *(_QWORD *)v12 = 0xD000000000000027;
    *(_QWORD *)(v12 + 8) = 0x80000002284DD580;
    v9 = 1;
    *(_BYTE *)(v12 + 16) = 1;

  }
  return (*(uint64_t (**)(unint64_t, uint64_t))(v0 + 8))(v8, v9);
}

uint64_t DUStructuredExtractionContextKitImplementation.convertToDUStructuredExtractionResult(ckResult:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *rawValue;
  unint64_t v36;
  char v37;
  uint64_t *v38;
  uint64_t v39;
  id v40;
  id v41;
  uint64_t v42;
  char *v43;
  int *v44;
  void (*v45)(void);
  void (*v46)(void);
  uint64_t *v47;
  uint64_t v48;
  id v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v55;
  char *v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  void (*v77)(void);
  void *v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  void *v93;
  uint64_t v94;
  id v95;
  void *v96;
  char *v97;
  uint64_t v98;
  void (*v99)(char *, char *, uint64_t);
  uint64_t v100;
  void (*v101)(char *, uint64_t, uint64_t, uint64_t);
  id v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  BOOL *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  id v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  char v121;
  char *v122;
  void (*v123)(void);
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  void (*v127)(void);
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  BOOL *v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  id v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  int *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;

  v145 = a2;
  v140 = type metadata accessor for CalendarEvent(0);
  v3 = *(_QWORD *)(v140 - 8);
  MEMORY[0x24BDAC7A8](v140);
  v132 = (BOOL *)&v122 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v131 = (char *)&v122 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v133 = (uint64_t)&v122 - v9;
  MEMORY[0x24BDAC7A8](v8);
  v136 = (char *)&v122 - v10;
  v137 = type metadata accessor for DateComponents();
  v135 = *(_QWORD *)(v137 - 8);
  v11 = MEMORY[0x24BDAC7A8](v137);
  v13 = (char *)&v122 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v134 = (char *)&v122 - v14;
  v141 = type metadata accessor for URL();
  v15 = *(_QWORD *)(v141 - 8);
  MEMORY[0x24BDAC7A8](v141);
  v17 = (char *)&v122 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v138 = (char *)&v122 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v122 - v22;
  MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)&v122 - v24;
  v146 = (int *)type metadata accessor for DUStructuredExtractionResult(0);
  v144 = *((_QWORD *)v146 - 1);
  MEMORY[0x24BDAC7A8](v146);
  v142 = a1;
  v143 = (char *)&v122 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = objc_msgSend(a1, sel_tags);
  if (!v27)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v144 + 56))(v145, 1, 1, v146);
  v28 = v27;
  v29 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  if (one-time initialization token for typeMapping != -1)
    swift_once();
  v30 = swift_bridgeObjectRetain();
  v31 = specialized _NativeSet.genericIntersection<A>(_:)(v30, v29);
  swift_bridgeObjectRelease();
  v32 = specialized Collection.first.getter(v31);
  v34 = v33;
  swift_release();
  if (!v34)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v144 + 56))(v145, 1, 1, v146);
  rawValue = typeMapping._rawValue;
  if (!*((_QWORD *)typeMapping._rawValue + 2)
    || (v36 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v34), (v37 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v144 + 56))(v145, 1, 1, v146);
  }
  v38 = (uint64_t *)(rawValue[7] + 16 * v36);
  v39 = v38[1];
  v130 = *v38;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v40 = v142;
  v41 = objc_msgSend(v142, sel_title);
  v129 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v128 = v42;

  v43 = v143;
  *((_OWORD *)v143 + 4) = 0u;
  *((_OWORD *)v43 + 5) = 0u;
  *((_OWORD *)v43 + 3) = 0u;
  v44 = v146;
  v45 = *(void (**)(void))(v15 + 56);
  v125 = (uint64_t)&v43[v146[10]];
  v127 = v45;
  v45();
  v126 = v44[11];
  *(_QWORD *)&v43[v126] = 0;
  v46 = *(void (**)(void))(v3 + 56);
  v122 = &v43[v44[12]];
  v46();
  v47 = (uint64_t *)&v43[v44[13]];
  *v47 = 0;
  v47[1] = 0;
  v124 = v47;
  v48 = v128;
  *(_QWORD *)v43 = v129;
  *((_QWORD *)v43 + 1) = v48;
  *((_QWORD *)v43 + 2) = v130;
  *((_QWORD *)v43 + 3) = v39;
  v129 = v39;
  swift_bridgeObjectRetain();
  v49 = objc_msgSend(v40, sel_category);
  v123 = v46;
  if (v49)
  {
    v50 = v49;
    v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v53 = v52;

  }
  else
  {
    v51 = 0;
    v53 = 0;
  }
  v55 = &v43[v146[14]];
  v56 = &v43[v146[15]];
  v57 = v146[16];
  *((_QWORD *)v143 + 4) = v51;
  *((_QWORD *)v143 + 5) = v53;
  v58 = v142;
  objc_msgSend(v142, sel_frameInWindow);
  *(_QWORD *)v55 = v59;
  *((_QWORD *)v55 + 1) = v60;
  *((_QWORD *)v55 + 2) = v61;
  *((_QWORD *)v55 + 3) = v62;
  objc_msgSend(v58, sel_absoluteOriginOnScreen);
  *(_QWORD *)v56 = v63;
  *((_QWORD *)v56 + 1) = v64;
  v65 = objc_msgSend(v58, sel_isOnScreen);
  v143[v57] = v65;
  v66 = (uint64_t)v143;
  v67 = v130;
  v68 = v129;
  if ((v130 != 0x656E6F6870 || v129 != 0xE500000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    if (v67 == 7107189 && v68 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v75 = objc_msgSend(v142, "url");
      v76 = v141;
      v77 = v127;
      if (v75)
      {
        v78 = v75;
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        v79 = 0;
      }
      else
      {
        v79 = 1;
      }
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v77)(v23, v79, 1, v76);
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v23, (uint64_t)v25, &demangling cache variable for type metadata for URL?);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v25, 1, v76))
      {
        (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v17, v25, v76);
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v25, &demangling cache variable for type metadata for URL?);
        v82 = URL.absoluteString.getter();
        v84 = v83;
        (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v76);
        v149 = v82;
        v150 = v84;
        v85 = *(_QWORD *)(v139 + 24);
        v147 = *(_QWORD *)(v139 + 16);
        v148 = v85;
        lazy protocol witness table accessor for type String and conformance String();
        lazy protocol witness table accessor for type String and conformance String();
        LOBYTE(v82) = BidirectionalCollection<>.starts<A>(with:)();
        swift_bridgeObjectRelease();
        if ((v82 & 1) != 0)
        {
          v87 = *(_QWORD *)v66;
          v86 = *(_QWORD *)(v66 + 8);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(v66 + 80) = v87;
          *(_QWORD *)(v66 + 88) = v86;
        }
        else
        {
          v88 = objc_msgSend(v142, "url");
          if (v88)
          {
            v89 = v88;
            v90 = (uint64_t)v138;
            static URL._unconditionallyBridgeFromObjectiveC(_:)();

            v91 = 0;
          }
          else
          {
            v91 = 1;
            v90 = (uint64_t)v138;
          }
          v107 = v125;
          ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v77)(v90, v91, 1, v76);
          outlined assign with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v90, v107, &demangling cache variable for type metadata for URL?);
        }
        goto LABEL_16;
      }
      v80 = &demangling cache variable for type metadata for URL?;
      v81 = (uint64_t)v25;
    }
    else
    {
      if (v67 == 0x73736572646461 && v68 == 0xE700000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v92 = objc_msgSend(v142, sel_extractedAddressComponents);
        if (v92)
        {
          v93 = v92;
          type metadata accessor for NSTextCheckingKey(0);
          lazy protocol witness table accessor for type NSTextCheckingKey and conformance NSTextCheckingKey();
          v94 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

        }
        else
        {
          v94 = 0;
        }
        *(_QWORD *)(v66 + v126) = v94;
        goto LABEL_16;
      }
      if ((v67 != 0x7261646E656C6163 || v68 != 0xED0000746E657645)
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        if (v67 == 0x6D6F6F526D68 && v68 == 0xE600000000000000
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
          || v67 == 0x656D6F486D68 && v68 == 0xE600000000000000)
        {
          swift_bridgeObjectRelease();
        }
        else if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
               || v130 == 0x7373656363416D68 && v129 == 0xEB0000000079726FLL)
        {
          swift_bridgeObjectRelease();
          v66 = (uint64_t)v143;
        }
        else
        {
          v121 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          v66 = (uint64_t)v143;
          if ((v121 & 1) == 0)
            goto LABEL_16;
        }
        v115 = objc_msgSend(v142, sel_topicId);
        if (v115)
        {
          v116 = v115;
          v117 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v119 = v118;

        }
        else
        {
          v117 = 0;
          v119 = 0;
        }
        v120 = v124;
        *v124 = v117;
        v120[1] = v119;
        goto LABEL_16;
      }
      swift_bridgeObjectRelease_n();
      strcpy((char *)(v66 + 16), "calendarEvent");
      *(_WORD *)(v66 + 30) = -4864;
      v95 = objc_msgSend(v142, sel_extractedStartDateComponents);
      if (v95)
      {
        v96 = v95;
        static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

        v98 = v135;
        v97 = v136;
        v99 = *(void (**)(char *, char *, uint64_t))(v135 + 32);
        v100 = v137;
        v99(v136, v13, v137);
        v101 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v98 + 56);
        v101(v97, 0, 1, v100);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v98 + 48))(v97, 1, v100) != 1)
        {
          v99(v134, v97, v100);
          v102 = objc_msgSend(v142, sel_extractedEndDateComponents);
          if (v102)
          {
            v103 = v102;
            v104 = (uint64_t)v131;
            static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

            v105 = 0;
          }
          else
          {
            v105 = 1;
            v104 = (uint64_t)v131;
          }
          v106 = v132;
          v101((char *)v104, v105, 1, v100);
          v108 = v133;
          outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v104, v133, &demangling cache variable for type metadata for DateComponents?);
          v109 = v134;
          DateComponents.minute.getter();
          v111 = v110;
          v112 = v140;
          v99((char *)&v106[*(int *)(v140 + 20)], v109, v100);
          v113 = (uint64_t)&v106[*(int *)(v112 + 24)];
          v101((char *)v113, 1, 1, v100);
          *v106 = (v111 & 1) == 0;
          outlined assign with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v108, v113, &demangling cache variable for type metadata for DateComponents?);
          v114 = (uint64_t)v122;
          outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v122, &demangling cache variable for type metadata for CalendarEvent?);
          outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v106, v114, type metadata accessor for CalendarEvent);
          ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v123)(v114, 0, 1, v112);
          outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v106, type metadata accessor for CalendarEvent);
          goto LABEL_16;
        }
      }
      else
      {
        v97 = v136;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v135 + 56))(v136, 1, 1, v137);
      }
      v80 = &demangling cache variable for type metadata for DateComponents?;
      v81 = (uint64_t)v97;
    }
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v81, v80);
    (*(void (**)(uint64_t, uint64_t, uint64_t, int *))(v144 + 56))(v145, 1, 1, v146);
    v74 = v66;
    return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v74, type metadata accessor for DUStructuredExtractionResult);
  }
  swift_bridgeObjectRelease();
  v69 = objc_msgSend(v142, sel_title);
  v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v72 = v71;

  *(_QWORD *)(v66 + 48) = v70;
  *(_QWORD *)(v66 + 56) = v72;
LABEL_16:
  v73 = v145;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v66, v145, type metadata accessor for DUStructuredExtractionResult);
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v144 + 56))(v73, 0, 1, v146);
  v74 = v66;
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v74, type metadata accessor for DUStructuredExtractionResult);
}

uint64_t DUStructuredExtractionContextKitImplementation.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t DUStructuredExtractionContextKitImplementation.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t DUStructuredExtractionContextKitImplementation.init()()
{
  uint64_t v0;
  uint64_t result;

  result = v0;
  *(_QWORD *)(v0 + 16) = 0x2F3A6F746C69616DLL;
  *(_QWORD *)(v0 + 24) = 0xE90000000000002FLL;
  return result;
}

unint64_t protocol witness for static DUProcessingPhaseImplementation.implementationID.getter in conformance DUStructuredExtractionContextKitImplementation()
{
  return 0xD00000000000002FLL;
}

void *protocol witness for static DUProcessingPhaseImplementation.implementationAttributes.getter in conformance DUStructuredExtractionContextKitImplementation()
{
  return &outlined read-only object #0 of protocol witness for static DUProcessingPhaseImplementation.implementationAttributes.getter in conformance DUStructuredExtractionContextKitImplementation;
}

uint64_t specialized _NativeSet.genericIntersection<A>(_:)(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3;
  char v4;
  unint64_t v5;
  size_t v6;
  uint64_t v7;
  void *v8;
  _QWORD v10[2];

  v3 = isStackAllocationSafe;
  v10[1] = *MEMORY[0x24BDAC8D0];
  v4 = *(_BYTE *)(a2 + 32);
  v5 = (unint64_t)((1 << v4) + 63) >> 6;
  v6 = 8 * v5;
  if ((v4 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    bzero((char *)v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v6);
    v7 = specialized closure #1 in _NativeSet.genericIntersection<A>(_:)((_QWORD *)((char *)v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0)), v5, v3, a2);
    swift_release();
  }
  else
  {
    v8 = (void *)swift_slowAlloc();
    bzero(v8, v6);
    v7 = specialized closure #1 in _NativeSet.genericIntersection<A>(_:)((unint64_t *)v8, v5, v3, a2);
    swift_release();
    MEMORY[0x22E2B117C](v8, -1, -1);
  }
  return v7;
}

uint64_t specialized closure #1 in _NativeSet.genericIntersection<A>(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  BOOL v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t i;
  unint64_t v29;
  _QWORD *v30;
  BOOL v31;
  uint64_t v33;
  uint64_t v35;
  int64_t v36;
  uint64_t v39;

  v35 = a3 + 64;
  v4 = 1 << *(_BYTE *)(a3 + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a3 + 64);
  v36 = (unint64_t)(v4 + 63) >> 6;
  v39 = a4 + 56;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  v9 = 0;
LABEL_5:
  v33 = v8;
  while (1)
  {
    if (v6)
    {
      v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v11 = v10 | (v9 << 6);
      goto LABEL_25;
    }
    v12 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_48;
    }
    if (v12 >= v36)
      goto LABEL_46;
    v13 = *(_QWORD *)(v35 + 8 * v12);
    ++v9;
    if (!v13)
    {
      v9 = v12 + 1;
      if (v12 + 1 >= v36)
        goto LABEL_46;
      v13 = *(_QWORD *)(v35 + 8 * v9);
      if (!v13)
      {
        v9 = v12 + 2;
        if (v12 + 2 >= v36)
          goto LABEL_46;
        v13 = *(_QWORD *)(v35 + 8 * v9);
        if (!v13)
        {
          v9 = v12 + 3;
          if (v12 + 3 >= v36)
            goto LABEL_46;
          v13 = *(_QWORD *)(v35 + 8 * v9);
          if (!v13)
            break;
        }
      }
    }
LABEL_24:
    v6 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v9 << 6);
LABEL_25:
    v15 = (uint64_t *)(*(_QWORD *)(a3 + 48) + 16 * v11);
    v17 = *v15;
    v16 = v15[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v18 = Hasher._finalize()();
    v19 = -1 << *(_BYTE *)(a4 + 32);
    v20 = v18 & ~v19;
    v21 = v20 >> 6;
    v22 = 1 << v20;
    if (((1 << v20) & *(_QWORD *)(v39 + 8 * (v20 >> 6))) == 0)
      goto LABEL_6;
    v23 = *(_QWORD *)(a4 + 48);
    v24 = (_QWORD *)(v23 + 16 * v20);
    v25 = *v24 == v17 && v24[1] == v16;
    if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      result = swift_bridgeObjectRelease();
LABEL_32:
      v26 = a1[v21];
      a1[v21] = v22 | v26;
      if ((v22 & v26) == 0)
      {
        v8 = v33 + 1;
        if (!__OFADD__(v33, 1))
          goto LABEL_5;
        __break(1u);
LABEL_46:
        swift_release();
        swift_retain();
        return specialized _NativeSet.extractSubset(using:count:)(a1, a2, v33, a4);
      }
    }
    else
    {
      v27 = ~v19;
      for (i = v20 + 1; ; i = v29 + 1)
      {
        v29 = i & v27;
        if (((*(_QWORD *)(v39 + (((i & v27) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v27)) & 1) == 0)
          break;
        v30 = (_QWORD *)(v23 + 16 * v29);
        v31 = *v30 == v17 && v30[1] == v16;
        if (v31 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          result = swift_bridgeObjectRelease();
          v21 = v29 >> 6;
          v22 = 1 << v29;
          goto LABEL_32;
        }
      }
LABEL_6:
      result = swift_bridgeObjectRelease();
    }
  }
  v14 = v12 + 4;
  if (v14 >= v36)
    goto LABEL_46;
  v13 = *(_QWORD *)(v35 + 8 * v14);
  if (v13)
  {
    v9 = v14;
    goto LABEL_24;
  }
  while (1)
  {
    v9 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v9 >= v36)
      goto LABEL_46;
    v13 = *(_QWORD *)(v35 + 8 * v9);
    ++v14;
    if (v13)
      goto LABEL_24;
  }
LABEL_48:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.extractSubset(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;

  v4 = a4;
  if (!a3)
  {
    v8 = MEMORY[0x24BEE4B08];
LABEL_36:
    swift_release();
    return v8;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  result = static _SetStorage.allocate(capacity:)();
  v8 = result;
  v30 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_39;
    if (v14 >= v30)
      goto LABEL_36;
    v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v30)
        goto LABEL_36;
      v15 = a1[v10];
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v30)
          goto LABEL_36;
        v15 = a1[v10];
        if (!v15)
          break;
      }
    }
LABEL_23:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v18 = *v17;
    v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    result = Hasher._finalize()();
    v20 = -1 << *(_BYTE *)(v8 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(_QWORD *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v23);
    *v28 = v18;
    v28[1] = v19;
    ++*(_QWORD *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v16 = v14 + 3;
  if (v16 >= v30)
    goto LABEL_36;
  v15 = a1[v16];
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v30)
      goto LABEL_36;
    v15 = a1[v10];
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

_BYTE *specialized Dictionary.subscript.getter(_BYTE *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  if (a2 < 0 || 1 << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a5 + 48) + 16 * a2);
    *result = *(_BYTE *)(*(_QWORD *)(a5 + 56) + a2);
    swift_bridgeObjectRetain();
    return (_BYTE *)v5;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t specialized Set.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t specialized Set.subscript.getter(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(_BYTE *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a4 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2)
    return *(_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * result);
LABEL_8:
  __break(1u);
  return result;
}

unint64_t specialized Sequence.compactMap<A>(_:)(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  id v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(id);
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DUStructuredExtractionResult?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for DUStructuredExtractionResult(0);
  v9 = *(_QWORD *)(v29 - 8);
  v10 = MEMORY[0x24BDAC7A8](v29);
  v28 = (uint64_t)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v24 = (uint64_t)&v23 - v12;
  if (a1 >> 62)
    goto LABEL_18;
  v13 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v13; v13 = _CocoaArrayWrapper.endIndex.getter())
  {
    v23 = v3;
    v27 = a1 & 0xC000000000000001;
    v25 = *(void (**)(id))(*(_QWORD *)a2 + 96);
    v14 = MEMORY[0x24BEE4AF8];
    v15 = 4;
    v26 = a1;
    while (1)
    {
      v3 = v15 - 4;
      v17 = v27 ? (id)MEMORY[0x22E2AFF34](v15 - 4, a1) : *(id *)(a1 + 8 * v15);
      v18 = v17;
      a1 = v15 - 3;
      if (__OFADD__(v3, 1))
        break;
      v25(v17);

      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v29) == 1)
      {
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v8, &demangling cache variable for type metadata for DUStructuredExtractionResult?);
      }
      else
      {
        v19 = v24;
        outlined init with take of DUStructuredExtractionResult((uint64_t)v8, v24);
        outlined init with take of DUStructuredExtractionResult(v19, v28);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v14 + 16) + 1, 1, v14);
        v21 = *(_QWORD *)(v14 + 16);
        v20 = *(_QWORD *)(v14 + 24);
        if (v21 >= v20 >> 1)
          v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1, v14);
        *(_QWORD *)(v14 + 16) = v21 + 1;
        outlined init with take of DUStructuredExtractionResult(v28, v14+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v21);
      }
      ++v15;
      v16 = a1 == v13;
      a1 = v26;
      if (v16)
      {
        swift_bridgeObjectRelease();
        return v14;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x24BEE4AF8];
}

unint64_t lazy protocol witness table accessor for type NSTextCheckingKey and conformance NSTextCheckingKey()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type NSTextCheckingKey and conformance NSTextCheckingKey;
  if (!lazy protocol witness table cache variable for type NSTextCheckingKey and conformance NSTextCheckingKey)
  {
    type metadata accessor for NSTextCheckingKey(255);
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for NSTextCheckingKey, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSTextCheckingKey and conformance NSTextCheckingKey);
  }
  return result;
}

uint64_t type metadata accessor for DUStructuredExtractionContextKitImplementation()
{
  return objc_opt_self();
}

uint64_t outlined init with take of DUStructuredExtractionResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DUStructuredExtractionResult(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.documentNamespace.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier()
                          + 20));
  if (v1[1])
    v2 = *v1;
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier()
{
  uint64_t result;

  result = type metadata singleton initialization cache for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier;
  if (!type metadata singleton initialization cache for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.documentID.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier()
                          + 24));
  if (v1[1])
    v2 = *v1;
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

BOOL DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.hasSpotlightBundleID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0
                   + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier()
                            + 28)
                   + 8) != 0;
}

uint64_t DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.spotlightBundleID.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier()
                          + 28));
  if (v1[1])
    v2 = *v1;
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

BOOL DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.hasSpotlightDomainIdentifier.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0
                   + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier()
                            + 32)
                   + 8) != 0;
}

uint64_t DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.spotlightDomainIdentifier.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier()
                          + 32));
  if (v1[1])
    v2 = *v1;
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

BOOL DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.hasSpotlightUniqueIdentifier.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0
                   + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier()
                            + 36)
                   + 8) != 0;
}

uint64_t DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.spotlightUniqueIdentifier.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier()
                          + 36));
  if (v1[1])
    v2 = *v1;
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

int *DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.init()@<X0>(uint64_t a1@<X8>)
{
  int *result;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier();
  v3 = (_QWORD *)(a1 + result[5]);
  *v3 = 0;
  v3[1] = 0;
  v4 = (_QWORD *)(a1 + result[6]);
  *v4 = 0;
  v4[1] = 0;
  v5 = (_QWORD *)(a1 + result[7]);
  *v5 = 0;
  v5[1] = 0;
  v6 = (_QWORD *)(a1 + result[8]);
  *v6 = 0;
  v6[1] = 0;
  v7 = (_QWORD *)(a1 + result[9]);
  *v7 = 0;
  v7[1] = 0;
  return result;
}

uint64_t DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.documentNamespace.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2
                + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier()
                         + 20));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.documentID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2
                + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier()
                         + 24));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.spotlightBundleID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2
                + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier()
                         + 28));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.spotlightDomainIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2
                + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier()
                         + 32));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.spotlightUniqueIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2
                + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier()
                         + 36));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t key path getter for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.documentNamespace : DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = (uint64_t *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier()
                          + 20));
  v4 = v3[1];
  if (v4)
  {
    v5 = *v3;
    v6 = v4;
  }
  else
  {
    v5 = 0;
    v6 = 0xE000000000000000;
  }
  *a2 = v5;
  a2[1] = v6;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.documentNamespace : DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;

  v3 = *a1;
  v2 = a1[1];
  v4 = (_QWORD *)(a2
                + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier()
                         + 20));
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *v4 = v3;
  v4[1] = v2;
  return result;
}

uint64_t (*DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.documentNamespace.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier()
              + 20);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_ClientInterface_StructuredEntityLabel.labelName.modify;
}

BOOL DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.hasDocumentNamespace.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0
                   + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier()
                            + 20)
                   + 8) != 0;
}

Swift::Void __swiftcall DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.clearDocumentNamespace()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(v0
                + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier()
                         + 20));
  swift_bridgeObjectRelease();
  *v1 = 0;
  v1[1] = 0;
}

uint64_t key path getter for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.documentID : DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = (uint64_t *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier()
                          + 24));
  v4 = v3[1];
  if (v4)
  {
    v5 = *v3;
    v6 = v4;
  }
  else
  {
    v5 = 0;
    v6 = 0xE000000000000000;
  }
  *a2 = v5;
  a2[1] = v6;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.documentID : DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;

  v3 = *a1;
  v2 = a1[1];
  v4 = (_QWORD *)(a2
                + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier()
                         + 24));
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *v4 = v3;
  v4[1] = v2;
  return result;
}

uint64_t (*DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.documentID.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier()
              + 24);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_ClientInterface_StructuredEntityLabel.labelName.modify;
}

BOOL DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.hasDocumentID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0
                   + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier()
                            + 24)
                   + 8) != 0;
}

Swift::Void __swiftcall DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.clearDocumentID()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(v0
                + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier()
                         + 24));
  swift_bridgeObjectRelease();
  *v1 = 0;
  v1[1] = 0;
}

uint64_t key path getter for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.spotlightBundleID : DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = (uint64_t *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier()
                          + 28));
  v4 = v3[1];
  if (v4)
  {
    v5 = *v3;
    v6 = v4;
  }
  else
  {
    v5 = 0;
    v6 = 0xE000000000000000;
  }
  *a2 = v5;
  a2[1] = v6;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.spotlightBundleID : DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;

  v3 = *a1;
  v2 = a1[1];
  v4 = (_QWORD *)(a2
                + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier()
                         + 28));
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *v4 = v3;
  v4[1] = v2;
  return result;
}

uint64_t (*DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.spotlightBundleID.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier()
              + 28);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_ClientInterface_StructuredEntityLabel.labelName.modify;
}

Swift::Void __swiftcall DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.clearSpotlightBundleID()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(v0
                + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier()
                         + 28));
  swift_bridgeObjectRelease();
  *v1 = 0;
  v1[1] = 0;
}

uint64_t key path getter for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.spotlightDomainIdentifier : DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = (uint64_t *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier()
                          + 32));
  v4 = v3[1];
  if (v4)
  {
    v5 = *v3;
    v6 = v4;
  }
  else
  {
    v5 = 0;
    v6 = 0xE000000000000000;
  }
  *a2 = v5;
  a2[1] = v6;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.spotlightDomainIdentifier : DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;

  v3 = *a1;
  v2 = a1[1];
  v4 = (_QWORD *)(a2
                + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier()
                         + 32));
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *v4 = v3;
  v4[1] = v2;
  return result;
}

uint64_t (*DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.spotlightDomainIdentifier.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier()
              + 32);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_ClientInterface_StructuredEntityLabel.labelName.modify;
}

Swift::Void __swiftcall DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.clearSpotlightDomainIdentifier()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(v0
                + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier()
                         + 32));
  swift_bridgeObjectRelease();
  *v1 = 0;
  v1[1] = 0;
}

uint64_t key path getter for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.spotlightUniqueIdentifier : DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = (uint64_t *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier()
                          + 36));
  v4 = v3[1];
  if (v4)
  {
    v5 = *v3;
    v6 = v4;
  }
  else
  {
    v5 = 0;
    v6 = 0xE000000000000000;
  }
  *a2 = v5;
  a2[1] = v6;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.spotlightUniqueIdentifier : DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;

  v3 = *a1;
  v2 = a1[1];
  v4 = (_QWORD *)(a2
                + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier()
                         + 36));
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *v4 = v3;
  v4[1] = v2;
  return result;
}

uint64_t (*DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.spotlightUniqueIdentifier.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier()
              + 36);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_ClientInterface_StructuredEntityLabel.labelName.modify;
}

Swift::Void __swiftcall DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.clearSpotlightUniqueIdentifier()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(v0
                + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier()
                         + 36));
  swift_bridgeObjectRelease();
  *v1 = 0;
  v1[1] = 0;
}

uint64_t DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.unknownFields.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

void *DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.protoMessageName.unsafeMutableAddressor()
{
  return &static DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.protoMessageName;
}

unint64_t static DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.protoMessageName.getter()
{
  return 0xD00000000000004FLL;
}

uint64_t DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier._protobuf_nameMap);
}

uint64_t static DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v2 = type metadata accessor for _NameMap();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier._protobuf_nameMap);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
          type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier();
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  result = closure #1 in DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.traverse<A>(visitor:)(v0);
  if (!v1)
  {
    closure #2 in DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.traverse<A>(visitor:)(v0);
    closure #3 in DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.traverse<A>(visitor:)(v0);
    closure #4 in DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.traverse<A>(visitor:)(v0);
    closure #5 in DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.traverse<A>(visitor:)(v0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier();
  if (*(_QWORD *)(a1 + *(int *)(result + 20) + 8))
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  return result;
}

uint64_t closure #2 in DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier();
  if (*(_QWORD *)(a1 + *(int *)(result + 24) + 8))
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  return result;
}

uint64_t closure #3 in DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier();
  if (*(_QWORD *)(a1 + *(int *)(result + 28) + 8))
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  return result;
}

uint64_t closure #4 in DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier();
  if (*(_QWORD *)(a1 + *(int *)(result + 32) + 8))
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  return result;
}

uint64_t closure #5 in DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier();
  if (*(_QWORD *)(a1 + *(int *)(result + 36) + 8))
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  return result;
}

Swift::Int DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.hashValue.getter()
{
  Hasher.init(_seed:)();
  type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier();
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier and conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Message.init() in conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;

  result = UnknownStorage.init()();
  v5 = a1[6];
  v6 = (_QWORD *)(a2 + a1[5]);
  *v6 = 0;
  v6[1] = 0;
  v7 = (_QWORD *)(a2 + v5);
  *v7 = 0;
  v7[1] = 0;
  v8 = a1[8];
  v9 = (_QWORD *)(a2 + a1[7]);
  *v9 = 0;
  v9[1] = 0;
  v10 = (_QWORD *)(a2 + v8);
  *v10 = 0;
  v10[1] = 0;
  v11 = (_QWORD *)(a2 + a1[9]);
  *v11 = 0;
  v11[1] = 0;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier()
{
  return 0xD00000000000004FLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier()
{
  return DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier()
{
  return DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier and conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v2 = type metadata accessor for _NameMap();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier._protobuf_nameMap);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity((unint64_t *)&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier and conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity((unint64_t *)&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier and conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier);
  return Message.hash(into:)();
}

uint64_t specialized static DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  void (*v43)(char *, uint64_t, uint64_t);
  void (*v44)(char *, uint64_t);
  uint64_t v45;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v45 - v9;
  v11 = (int *)type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier();
  v12 = v11[5];
  v13 = (_QWORD *)(a1 + v12);
  v14 = *(_QWORD *)(a1 + v12 + 8);
  v15 = (_QWORD *)(a2 + v12);
  v16 = v15[1];
  if (!v14)
  {
    if (v16)
      goto LABEL_44;
    goto LABEL_10;
  }
  if (!v16)
    goto LABEL_44;
  v17 = *v13 == *v15 && v14 == v16;
  if (v17 || (v18 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
LABEL_10:
    v19 = v11[6];
    v20 = (_QWORD *)(a1 + v19);
    v21 = *(_QWORD *)(a1 + v19 + 8);
    v22 = (_QWORD *)(a2 + v19);
    v23 = v22[1];
    if (v21)
    {
      if (!v23)
        goto LABEL_44;
      if (*v20 != *v22 || v21 != v23)
      {
        v18 = 0;
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          return v18 & 1;
      }
    }
    else if (v23)
    {
      goto LABEL_44;
    }
    v25 = v11[7];
    v26 = (_QWORD *)(a1 + v25);
    v27 = *(_QWORD *)(a1 + v25 + 8);
    v28 = (_QWORD *)(a2 + v25);
    v29 = v28[1];
    if (v27)
    {
      if (!v29)
        goto LABEL_44;
      if (*v26 != *v28 || v27 != v29)
      {
        v18 = 0;
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          return v18 & 1;
      }
    }
    else if (v29)
    {
      goto LABEL_44;
    }
    v31 = v11[8];
    v32 = (_QWORD *)(a1 + v31);
    v33 = *(_QWORD *)(a1 + v31 + 8);
    v34 = (_QWORD *)(a2 + v31);
    v35 = v34[1];
    if (v33)
    {
      if (!v35)
        goto LABEL_44;
      if (*v32 != *v34 || v33 != v35)
      {
        v18 = 0;
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          return v18 & 1;
      }
    }
    else if (v35)
    {
      goto LABEL_44;
    }
    v37 = v11[9];
    v38 = (_QWORD *)(a1 + v37);
    v39 = *(_QWORD *)(a1 + v37 + 8);
    v40 = (_QWORD *)(a2 + v37);
    v41 = v40[1];
    if (v39)
    {
      if (v41)
      {
        if (*v38 != *v40 || v39 != v41)
        {
          v18 = 0;
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            return v18 & 1;
        }
LABEL_46:
        v43 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
        v43(v10, a1, v4);
        v43(v8, a2, v4);
        lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        v18 = dispatch thunk of static Equatable.== infix(_:_:)();
        v44 = *(void (**)(char *, uint64_t))(v5 + 8);
        v44(v8, v4);
        v44(v10, v4);
        return v18 & 1;
      }
    }
    else if (!v41)
    {
      goto LABEL_46;
    }
LABEL_44:
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier and conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier);
}

uint64_t base witness table accessor for Message in DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity((unint64_t *)&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier and conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier);
}

uint64_t base witness table accessor for Hashable in DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier and conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier);
}

uint64_t base witness table accessor for Equatable in DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier and conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier);
}

uint64_t *initializeBufferWithCopyOfBuffer for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v28 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v28 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (uint64_t *)((char *)a1 + v9);
    v14 = (uint64_t *)((char *)a2 + v9);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = a3[7];
    v17 = a3[8];
    v18 = (uint64_t *)((char *)a1 + v16);
    v19 = (uint64_t *)((char *)a2 + v16);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    v21 = (uint64_t *)((char *)a1 + v17);
    v22 = (uint64_t *)((char *)a2 + v17);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    v24 = a3[9];
    v25 = (uint64_t *)((char *)a1 + v24);
    v26 = (uint64_t *)((char *)a2 + v24);
    v27 = v26[1];
    *v25 = *v26;
    v25[1] = v27;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (_QWORD *)(a1 + v8);
  v13 = (_QWORD *)(a2 + v8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = a3[7];
  v16 = a3[8];
  v17 = (_QWORD *)(a1 + v15);
  v18 = (_QWORD *)(a2 + v15);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  v20 = (_QWORD *)(a1 + v16);
  v21 = (_QWORD *)(a2 + v16);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  v23 = a3[9];
  v24 = (_QWORD *)(a1 + v23);
  v25 = (_QWORD *)(a2 + v23);
  v26 = v25[1];
  *v24 = *v25;
  v24[1] = v26;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = a3[6];
  v11 = (_QWORD *)(a1 + v10);
  v12 = (_QWORD *)(a2 + v10);
  *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = a3[7];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  *v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v16 = a3[8];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (_QWORD *)(a2 + v16);
  *v17 = *v18;
  v17[1] = v18[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19 = a3[9];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (_QWORD *)(a2 + v19);
  *v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithTake for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  v12 = a3[6];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (uint64_t *)(a2 + v12);
  v16 = *v14;
  v15 = v14[1];
  *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  v17 = a3[7];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (uint64_t *)(a2 + v17);
  v21 = *v19;
  v20 = v19[1];
  *v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  v22 = a3[8];
  v23 = (_QWORD *)(a1 + v22);
  v24 = (uint64_t *)(a2 + v22);
  v26 = *v24;
  v25 = v24[1];
  *v23 = v26;
  v23[1] = v25;
  swift_bridgeObjectRelease();
  v27 = a3[9];
  v28 = (_QWORD *)(a1 + v27);
  v29 = (uint64_t *)(a2 + v27);
  v31 = *v29;
  v30 = v29[1];
  *v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_22842A580(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_22842A618(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  return result;
}

uint64_t type metadata completion function for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

double DUStructuredExtractionResult.init(title:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _OWORD *v12;
  double result;
  _QWORD *v14;

  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0xE000000000000000;
  v6 = (int *)type metadata accessor for DUStructuredExtractionResult(0);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  v7 = a3 + v6[10];
  v8 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  *(_QWORD *)(a3 + v6[11]) = 0;
  v9 = a3 + v6[12];
  v10 = type metadata accessor for CalendarEvent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = (_QWORD *)(a3 + v6[13]);
  *v11 = 0;
  v11[1] = 0;
  v12 = (_OWORD *)(a3 + v6[14]);
  result = 0.0;
  *v12 = 0u;
  v12[1] = 0u;
  v14 = (_QWORD *)(a3 + v6[15]);
  *v14 = 0;
  v14[1] = 0;
  *(_BYTE *)(a3 + v6[16]) = 0;
  *(_QWORD *)a3 = a1;
  *(_QWORD *)(a3 + 8) = a2;
  return result;
}

uint64_t type metadata accessor for DUStructuredExtractionResult(uint64_t a1)
{
  return type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(a1, (uint64_t *)&type metadata singleton initialization cache for DUStructuredExtractionResult);
}

uint64_t type metadata accessor for CalendarEvent(uint64_t a1)
{
  return type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(a1, (uint64_t *)&type metadata singleton initialization cache for CalendarEvent);
}

uint64_t CalendarEvent.init(isAllDay:startDateComponents:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for CalendarEvent(0);
  v7 = &a3[*(int *)(v6 + 24)];
  v8 = type metadata accessor for DateComponents();
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
  *a3 = a1;
  return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v9 + 32))(&a3[*(int *)(v6 + 20)], a2, v8);
}

uint64_t DUStructuredExtractionResult.title.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DUStructuredExtractionResult.title.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*DUStructuredExtractionResult.title.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DUStructuredExtractionResult.type.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DUStructuredExtractionResult.type.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*DUStructuredExtractionResult.type.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DUStructuredExtractionResult.debug.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DUStructuredExtractionResult.debug.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t (*DUStructuredExtractionResult.debug.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DUStructuredExtractionResult.phoneNumber.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DUStructuredExtractionResult.phoneNumber.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  return result;
}

uint64_t (*DUStructuredExtractionResult.phoneNumber.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DUStructuredExtractionResult.phoneNumberLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DUStructuredExtractionResult.phoneNumberLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 64) = a1;
  *(_QWORD *)(v2 + 72) = a2;
  return result;
}

uint64_t (*DUStructuredExtractionResult.phoneNumberLabel.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DUStructuredExtractionResult.emailAddress.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DUStructuredExtractionResult.emailAddress.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 80) = a1;
  *(_QWORD *)(v2 + 88) = a2;
  return result;
}

uint64_t (*DUStructuredExtractionResult.emailAddress.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DUStructuredExtractionResult.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for DUStructuredExtractionResult(0);
  return outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v1 + *(int *)(v3 + 40), a1, &demangling cache variable for type metadata for URL?);
}

uint64_t DUStructuredExtractionResult.url.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for DUStructuredExtractionResult(0);
  return outlined assign with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(a1, v1 + *(int *)(v3 + 40), &demangling cache variable for type metadata for URL?);
}

uint64_t (*DUStructuredExtractionResult.url.modify())(_QWORD)
{
  type metadata accessor for DUStructuredExtractionResult(0);
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DUStructuredExtractionResult.addressComponents.getter()
{
  type metadata accessor for DUStructuredExtractionResult(0);
  return swift_bridgeObjectRetain();
}

uint64_t DUStructuredExtractionResult.addressComponents.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for DUStructuredExtractionResult(0) + 44);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*DUStructuredExtractionResult.addressComponents.modify())(_QWORD)
{
  type metadata accessor for DUStructuredExtractionResult(0);
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DUStructuredExtractionResult.event.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for DUStructuredExtractionResult(0);
  return outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v1 + *(int *)(v3 + 48), a1, &demangling cache variable for type metadata for CalendarEvent?);
}

uint64_t DUStructuredExtractionResult.event.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for DUStructuredExtractionResult(0);
  return outlined assign with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(a1, v1 + *(int *)(v3 + 48), &demangling cache variable for type metadata for CalendarEvent?);
}

uint64_t (*DUStructuredExtractionResult.event.modify())(_QWORD)
{
  type metadata accessor for DUStructuredExtractionResult(0);
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DUStructuredExtractionResult.homeAutomationID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for DUStructuredExtractionResult(0) + 52));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DUStructuredExtractionResult.homeAutomationID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for DUStructuredExtractionResult(0) + 52));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*DUStructuredExtractionResult.homeAutomationID.modify())(_QWORD)
{
  type metadata accessor for DUStructuredExtractionResult(0);
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

double DUStructuredExtractionResult.frameInWindow.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for DUStructuredExtractionResult(0) + 56));
}

uint64_t DUStructuredExtractionResult.frameInWindow.setter(double a1, double a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t result;
  double *v10;

  result = type metadata accessor for DUStructuredExtractionResult(0);
  v10 = (double *)(v4 + *(int *)(result + 56));
  *v10 = a1;
  v10[1] = a2;
  v10[2] = a3;
  v10[3] = a4;
  return result;
}

uint64_t (*DUStructuredExtractionResult.frameInWindow.modify())(_QWORD)
{
  type metadata accessor for DUStructuredExtractionResult(0);
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

double DUStructuredExtractionResult.absoluteOriginOnScreen.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for DUStructuredExtractionResult(0) + 60));
}

uint64_t DUStructuredExtractionResult.absoluteOriginOnScreen.setter(double a1, double a2)
{
  uint64_t v2;
  uint64_t result;
  double *v6;

  result = type metadata accessor for DUStructuredExtractionResult(0);
  v6 = (double *)(v2 + *(int *)(result + 60));
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*DUStructuredExtractionResult.absoluteOriginOnScreen.modify())(_QWORD)
{
  type metadata accessor for DUStructuredExtractionResult(0);
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DUStructuredExtractionResult.isOnScreen.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for DUStructuredExtractionResult(0) + 64));
}

uint64_t DUStructuredExtractionResult.isOnScreen.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for DUStructuredExtractionResult(0);
  *(_BYTE *)(v1 + *(int *)(result + 64)) = a1;
  return result;
}

uint64_t (*DUStructuredExtractionResult.isOnScreen.modify())(_QWORD)
{
  type metadata accessor for DUStructuredExtractionResult(0);
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t CalendarEvent.isAllDay.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t CalendarEvent.isAllDay.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*CalendarEvent.isAllDay.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t CalendarEvent.startDateComponents.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CalendarEvent(0) + 20);
  v4 = type metadata accessor for DateComponents();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t CalendarEvent.startDateComponents.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CalendarEvent(0) + 20);
  v4 = type metadata accessor for DateComponents();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*CalendarEvent.startDateComponents.modify())(_QWORD)
{
  type metadata accessor for CalendarEvent(0);
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t CalendarEvent.endDateComponents.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for CalendarEvent(0);
  return outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v1 + *(int *)(v3 + 24), a1, &demangling cache variable for type metadata for DateComponents?);
}

uint64_t CalendarEvent.endDateComponents.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for CalendarEvent(0);
  return outlined assign with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(a1, v1 + *(int *)(v3 + 24), &demangling cache variable for type metadata for DateComponents?);
}

uint64_t (*CalendarEvent.endDateComponents.modify())(_QWORD)
{
  type metadata accessor for CalendarEvent(0);
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

_QWORD *initializeBufferWithCopyOfBuffer for DUStructuredExtractionResult(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(_BYTE *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  void (*v30)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  _OWORD *v40;
  _OWORD *v41;
  __int128 v42;
  uint64_t v43;
  unsigned int (*v45)(char *, uint64_t, uint64_t);
  char *v46;
  char *__dst;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    v8 = a2[5];
    a1[4] = a2[4];
    a1[5] = v8;
    v9 = a2[7];
    a1[6] = a2[6];
    a1[7] = v9;
    v10 = a2[9];
    a1[8] = a2[8];
    a1[9] = v10;
    v11 = a2[11];
    v12 = a3[10];
    __dst = (char *)a1 + v12;
    v46 = (char *)a2 + v12;
    a1[10] = a2[10];
    a1[11] = v11;
    v13 = type metadata accessor for URL();
    v14 = *(_QWORD *)(v13 - 8);
    v45 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v45(v46, 1, v13))
    {
      v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(__dst, v46, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(__dst, v46, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(__dst, 0, 1, v13);
    }
    v17 = a3[12];
    *(_QWORD *)((char *)v4 + a3[11]) = *(_QWORD *)((char *)a2 + a3[11]);
    v18 = (char *)v4 + v17;
    v19 = (char *)a2 + v17;
    v20 = type metadata accessor for CalendarEvent(0);
    v21 = *(_QWORD *)(v20 - 8);
    v22 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v21 + 48);
    swift_bridgeObjectRetain();
    if (v22(v19, 1, v20))
    {
      v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CalendarEvent?);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      *v18 = *v19;
      v24 = *(int *)(v20 + 20);
      v25 = &v18[v24];
      v26 = &v19[v24];
      v27 = type metadata accessor for DateComponents();
      v28 = *(_QWORD *)(v27 - 8);
      v29 = v26;
      v30 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v28 + 16);
      v30(v25, v29, v27);
      v31 = *(int *)(v20 + 24);
      v32 = &v18[v31];
      v33 = &v19[v31];
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v28 + 48))(v33, 1, v27))
      {
        v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
        memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
      }
      else
      {
        v30(v32, v33, v27);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v32, 0, 1, v27);
      }
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    v35 = a3[13];
    v36 = a3[14];
    v37 = (_QWORD *)((char *)v4 + v35);
    v38 = (_QWORD *)((char *)a2 + v35);
    v39 = v38[1];
    *v37 = *v38;
    v37[1] = v39;
    v40 = (_OWORD *)((char *)v4 + v36);
    v41 = (_OWORD *)((char *)a2 + v36);
    v42 = v41[1];
    *v40 = *v41;
    v40[1] = v42;
    v43 = a3[16];
    *(_OWORD *)((char *)v4 + a3[15]) = *(_OWORD *)((char *)a2 + a3[15]);
    *((_BYTE *)v4 + v43) = *((_BYTE *)a2 + v43);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for DUStructuredExtractionResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 40);
  v5 = type metadata accessor for URL();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_bridgeObjectRelease();
  v7 = a1 + *(int *)(a2 + 48);
  v8 = type metadata accessor for CalendarEvent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8))
  {
    v9 = v7 + *(int *)(v8 + 20);
    v10 = type metadata accessor for DateComponents();
    v11 = *(_QWORD *)(v10 - 8);
    v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v12(v9, v10);
    v13 = v7 + *(int *)(v8 + 24);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v13, 1, v10))
      v12(v13, v10);
  }
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for DUStructuredExtractionResult(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(_BYTE *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  void (*v29)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _OWORD *v39;
  _OWORD *v40;
  __int128 v41;
  uint64_t v42;
  char *v44;
  unsigned int (*v45)(char *, uint64_t, uint64_t);
  char *__dst;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  v7 = a2[5];
  a1[4] = a2[4];
  a1[5] = v7;
  v8 = a2[7];
  a1[6] = a2[6];
  a1[7] = v8;
  v9 = a2[9];
  a1[8] = a2[8];
  a1[9] = v9;
  v10 = a2[11];
  v11 = a3[10];
  __dst = (char *)a1 + v11;
  v44 = (char *)a2 + v11;
  a1[10] = a2[10];
  a1[11] = v10;
  v12 = type metadata accessor for URL();
  v13 = *(_QWORD *)(v12 - 8);
  v45 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v45(v44, 1, v12))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(__dst, v44, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(__dst, v44, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
  }
  v15 = a3;
  v16 = a3[12];
  *(_QWORD *)((char *)a1 + a3[11]) = *(_QWORD *)((char *)a2 + a3[11]);
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = type metadata accessor for CalendarEvent(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v20 + 48);
  swift_bridgeObjectRetain();
  if (v21(v18, 1, v19))
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CalendarEvent?);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    *v17 = *v18;
    v23 = *(int *)(v19 + 20);
    v24 = &v17[v23];
    v25 = &v18[v23];
    v26 = type metadata accessor for DateComponents();
    v27 = *(_QWORD *)(v26 - 8);
    v28 = v24;
    v29 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v27 + 16);
    v29(v28, v25, v26);
    v30 = *(int *)(v19 + 24);
    v31 = &v17[v30];
    v32 = &v18[v30];
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v27 + 48))(v32, 1, v26))
    {
      v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      v29(v31, v32, v26);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v31, 0, 1, v26);
    }
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    v15 = a3;
  }
  v34 = v15[13];
  v35 = v15[14];
  v36 = (_QWORD *)((char *)a1 + v34);
  v37 = (_QWORD *)((char *)a2 + v34);
  v38 = v37[1];
  *v36 = *v37;
  v36[1] = v38;
  v39 = (_OWORD *)((char *)a1 + v35);
  v40 = (_OWORD *)((char *)a2 + v35);
  v41 = v40[1];
  *v39 = *v40;
  v39[1] = v41;
  v42 = v15[16];
  *(_OWORD *)((char *)a1 + v15[15]) = *(_OWORD *)((char *)a2 + v15[15]);
  *((_BYTE *)a1 + v42) = *((_BYTE *)a2 + v42);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for DUStructuredExtractionResult(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(_BYTE *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  uint64_t v31;
  size_t v32;
  void *v33;
  const void *v34;
  uint64_t v35;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  void (*v41)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  uint64_t (*v45)(_BYTE *, uint64_t, uint64_t);
  int v46;
  int v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  _BYTE *v58;
  void (*v59)(_BYTE *, _BYTE *, uint64_t);

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[10];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  *(_QWORD *)((char *)a1 + a3[11]) = *(_QWORD *)((char *)a2 + a3[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15 = a3[12];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = type metadata accessor for CalendarEvent(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  if (!v21)
  {
    if (!v22)
    {
      *v16 = *v17;
      v35 = *(int *)(v18 + 20);
      v36 = &v16[v35];
      v37 = &v17[v35];
      v38 = type metadata accessor for DateComponents();
      v39 = *(_QWORD *)(v38 - 8);
      v40 = v37;
      v41 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v39 + 24);
      v41(v36, v40, v38);
      v42 = *(int *)(v18 + 24);
      v43 = &v16[v42];
      v44 = &v17[v42];
      v45 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v39 + 48);
      v46 = v45(v43, 1, v38);
      v47 = v45(v44, 1, v38);
      if (v46)
      {
        if (!v47)
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v39 + 16))(v43, v44, v38);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v43, 0, 1, v38);
          goto LABEL_21;
        }
      }
      else
      {
        if (!v47)
        {
          v41(v43, v44, v38);
          goto LABEL_21;
        }
        (*(void (**)(_BYTE *, uint64_t))(v39 + 8))(v43, v38);
      }
      v32 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?)
                                  - 8)
                      + 64);
      v33 = v43;
      v34 = v44;
      goto LABEL_14;
    }
    outlined destroy of CalendarEvent((uint64_t)v16);
LABEL_13:
    v32 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CalendarEvent?)
                                - 8)
                    + 64);
    v33 = v16;
    v34 = v17;
LABEL_14:
    memcpy(v33, v34, v32);
    goto LABEL_21;
  }
  if (v22)
    goto LABEL_13;
  *v16 = *v17;
  v23 = *(int *)(v18 + 20);
  v58 = &v16[v23];
  v24 = &v17[v23];
  v25 = type metadata accessor for DateComponents();
  v26 = *(_QWORD *)(v25 - 8);
  v27 = v58;
  v59 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v26 + 16);
  v59(v27, v24, v25);
  v28 = *(int *)(v18 + 24);
  v29 = &v16[v28];
  v30 = &v17[v28];
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v26 + 48))(v30, 1, v25))
  {
    v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    v59(v29, v30, v25);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v29, 0, 1, v25);
  }
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
LABEL_21:
  v48 = a3[13];
  v49 = (_QWORD *)((char *)a1 + v48);
  v50 = (_QWORD *)((char *)a2 + v48);
  *v49 = *v50;
  v49[1] = v50[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v51 = a3[14];
  v52 = (_QWORD *)((char *)a1 + v51);
  v53 = (_QWORD *)((char *)a2 + v51);
  *v52 = *v53;
  v52[1] = v53[1];
  v52[2] = v53[2];
  v52[3] = v53[3];
  v54 = a3[15];
  v55 = (_QWORD *)((char *)a1 + v54);
  v56 = (_QWORD *)((char *)a2 + v54);
  *v55 = *v56;
  v55[1] = v56[1];
  *((_BYTE *)a1 + a3[16]) = *((_BYTE *)a2 + a3[16]);
  return a1;
}

_OWORD *initializeWithTake for DUStructuredExtractionResult(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  _OWORD *v32;
  __int128 v33;
  uint64_t v34;
  _BYTE *v36;
  void (*v37)(_BYTE *, _BYTE *, uint64_t);

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a2[5];
  v9 = a3[10];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  a1[4] = a2[4];
  a1[5] = v8;
  v12 = type metadata accessor for URL();
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  v15 = a3[12];
  *(_QWORD *)((char *)a1 + a3[11]) = *(_QWORD *)((char *)a2 + a3[11]);
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = type metadata accessor for CalendarEvent(0);
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CalendarEvent?);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    *v16 = *v17;
    v21 = *(int *)(v18 + 20);
    v36 = &v16[v21];
    v22 = &v17[v21];
    v23 = type metadata accessor for DateComponents();
    v24 = *(_QWORD *)(v23 - 8);
    v25 = v36;
    v37 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v24 + 32);
    v37(v25, v22, v23);
    v26 = *(int *)(v18 + 24);
    v27 = &v16[v26];
    v28 = &v17[v26];
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v24 + 48))(v28, 1, v23))
    {
      v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      v37(v27, v28, v23);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v27, 0, 1, v23);
    }
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  v30 = a3[14];
  *(_OWORD *)((char *)a1 + a3[13]) = *(_OWORD *)((char *)a2 + a3[13]);
  v31 = (_OWORD *)((char *)a1 + v30);
  v32 = (_OWORD *)((char *)a2 + v30);
  v33 = v32[1];
  *v31 = *v32;
  v31[1] = v33;
  v34 = a3[16];
  *(_OWORD *)((char *)a1 + a3[15]) = *(_OWORD *)((char *)a2 + a3[15]);
  *((_BYTE *)a1 + v34) = *((_BYTE *)a2 + v34);
  return a1;
}

_QWORD *assignWithTake for DUStructuredExtractionResult(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(_BYTE *, uint64_t, uint64_t);
  int v27;
  int v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  _BYTE *v35;
  _BYTE *v36;
  uint64_t v37;
  size_t v38;
  void *v39;
  const void *v40;
  uint64_t v41;
  _BYTE *v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  void (*v47)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v48;
  _BYTE *v49;
  _BYTE *v50;
  uint64_t (*v51)(_BYTE *, uint64_t, uint64_t);
  int v52;
  int v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _OWORD *v61;
  _OWORD *v62;
  __int128 v63;
  _BYTE *v65;
  void (*v66)(_BYTE *, _BYTE *, uint64_t);

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  swift_bridgeObjectRelease();
  v10 = a2[9];
  a1[8] = a2[8];
  a1[9] = v10;
  swift_bridgeObjectRelease();
  v11 = a2[11];
  a1[10] = a2[10];
  a1[11] = v11;
  swift_bridgeObjectRelease();
  v12 = a3[10];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for URL();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
LABEL_6:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v13, v14, v15);
LABEL_7:
  *(_QWORD *)((char *)a1 + a3[11]) = *(_QWORD *)((char *)a2 + a3[11]);
  swift_bridgeObjectRelease();
  v21 = a3[12];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = type metadata accessor for CalendarEvent(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v25 + 48);
  v27 = v26(v22, 1, v24);
  v28 = v26(v23, 1, v24);
  if (!v27)
  {
    if (!v28)
    {
      *v22 = *v23;
      v41 = *(int *)(v24 + 20);
      v42 = &v22[v41];
      v43 = &v23[v41];
      v44 = type metadata accessor for DateComponents();
      v45 = *(_QWORD *)(v44 - 8);
      v46 = v43;
      v47 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v45 + 40);
      v47(v42, v46, v44);
      v48 = *(int *)(v24 + 24);
      v49 = &v22[v48];
      v50 = &v23[v48];
      v51 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v45 + 48);
      v52 = v51(v49, 1, v44);
      v53 = v51(v50, 1, v44);
      if (v52)
      {
        if (!v53)
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v45 + 32))(v49, v50, v44);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v49, 0, 1, v44);
          goto LABEL_21;
        }
      }
      else
      {
        if (!v53)
        {
          v47(v49, v50, v44);
          goto LABEL_21;
        }
        (*(void (**)(_BYTE *, uint64_t))(v45 + 8))(v49, v44);
      }
      v38 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?)
                                  - 8)
                      + 64);
      v39 = v49;
      v40 = v50;
      goto LABEL_14;
    }
    outlined destroy of CalendarEvent((uint64_t)v22);
LABEL_13:
    v38 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CalendarEvent?)
                                - 8)
                    + 64);
    v39 = v22;
    v40 = v23;
LABEL_14:
    memcpy(v39, v40, v38);
    goto LABEL_21;
  }
  if (v28)
    goto LABEL_13;
  *v22 = *v23;
  v29 = *(int *)(v24 + 20);
  v65 = &v22[v29];
  v30 = &v23[v29];
  v31 = type metadata accessor for DateComponents();
  v32 = *(_QWORD *)(v31 - 8);
  v33 = v65;
  v66 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v32 + 32);
  v66(v33, v30, v31);
  v34 = *(int *)(v24 + 24);
  v35 = &v22[v34];
  v36 = &v23[v34];
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v32 + 48))(v36, 1, v31))
  {
    v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  else
  {
    v66(v35, v36, v31);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v35, 0, 1, v31);
  }
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
LABEL_21:
  v54 = a3[13];
  v55 = (_QWORD *)((char *)a1 + v54);
  v56 = (_QWORD *)((char *)a2 + v54);
  v58 = *v56;
  v57 = v56[1];
  *v55 = v58;
  v55[1] = v57;
  swift_bridgeObjectRelease();
  v59 = a3[14];
  v60 = a3[15];
  v61 = (_OWORD *)((char *)a1 + v59);
  v62 = (_OWORD *)((char *)a2 + v59);
  v63 = v62[1];
  *v61 = *v62;
  v61[1] = v63;
  *(_OWORD *)((char *)a1 + v60) = *(_OWORD *)((char *)a2 + v60);
  *((_BYTE *)a1 + a3[16]) = *((_BYTE *)a2 + a3[16]);
  return a1;
}

uint64_t getEnumTagSinglePayload for DUStructuredExtractionResult()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_22842C29C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 40);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CalendarEvent?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 48);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for DUStructuredExtractionResult()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_22842C350(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 40);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CalendarEvent?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 48);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void type metadata completion function for DUStructuredExtractionResult()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent?(319, (unint64_t *)&lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent?(319, &lazy cache variable for type metadata for CalendarEvent?, (void (*)(uint64_t))type metadata accessor for CalendarEvent);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for CalendarEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for DateComponents();
    v11 = *(_QWORD *)(v10 - 8);
    v12 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
    v12(v8, v9, v10);
    v13 = *(int *)(a3 + 24);
    v14 = (char *)v4 + v13;
    v15 = (char *)a2 + v13;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v15, 1, v10))
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      v12(v14, v15, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v10);
    }
  }
  return v4;
}

uint64_t destroy for CalendarEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for DateComponents();
  v6 = *(_QWORD *)(v5 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v9(v4, v5);
  v7 = a1 + *(int *)(a2 + 24);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v7, 1, v5);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v7, v5);
  return result;
}

_BYTE *initializeWithCopy for CalendarEvent(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for DateComponents();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 24);
  v13 = &a1[v12];
  v14 = &a2[v12];
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(v14, 1, v9))
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v11(v13, v14, v9);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v13, 0, 1, v9);
  }
  return a1;
}

_BYTE *assignWithCopy for CalendarEvent(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t (*v15)(_BYTE *, uint64_t, uint64_t);
  int v16;
  uint64_t v17;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for DateComponents();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 24);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  LODWORD(v7) = v15(&a1[v12], 1, v9);
  v16 = v15(v14, 1, v9);
  if (!(_DWORD)v7)
  {
    if (!v16)
    {
      v11(v13, v14, v9);
      return a1;
    }
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v13, v9);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(v13, v14, v9);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v13, 0, 1, v9);
  return a1;
}

_BYTE *initializeWithTake for CalendarEvent(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for DateComponents();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 24);
  v13 = &a1[v12];
  v14 = &a2[v12];
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(v14, 1, v9))
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v11(v13, v14, v9);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v13, 0, 1, v9);
  }
  return a1;
}

_BYTE *assignWithTake for CalendarEvent(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t (*v15)(_BYTE *, uint64_t, uint64_t);
  int v16;
  uint64_t v17;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for DateComponents();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 24);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  LODWORD(v7) = v15(&a1[v12], 1, v9);
  v16 = v15(v14, 1, v9);
  if (!(_DWORD)v7)
  {
    if (!v16)
    {
      v11(v13, v14, v9);
      return a1;
    }
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v13, v9);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v13, v14, v9);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v13, 0, 1, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for CalendarEvent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_22842CACC(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a2 == 254)
  {
    v4 = *a1;
    v5 = v4 >= 2;
    v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5)
      return (v6 + 1);
    else
      return 0;
  }
  else
  {
    v10 = type metadata accessor for DateComponents();
    v11 = *(_QWORD *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == (_DWORD)a2)
    {
      v12 = v10;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
      v11 = *(_QWORD *)(v12 - 8);
      v13 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v11 + 48))(&a1[v13], a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for CalendarEvent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_BYTE *sub_22842CB7C(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 254)
  {
    *result = a2 + 1;
  }
  else
  {
    v8 = type metadata accessor for DateComponents();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void type metadata completion function for CalendarEvent()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for DateComponents();
  if (v0 <= 0x3F)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent?(319, &lazy cache variable for type metadata for DateComponents?, (void (*)(uint64_t))MEMORY[0x24BDCBDE0]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t DUBackboneEncodingSmolBERToSpecification.__allocating_init()()
{
  return swift_allocObject();
}

unint64_t static DUBackboneEncodingSmolBERToSpecification.phaseID.getter()
{
  return 0xD000000000000021;
}

uint64_t DUBackboneEncodingSmolBERToSpecification.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t DUBackboneEncodingSmolBERToSpecification.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t DUBackboneEncodingSmolBERToSpecification.init()()
{
  uint64_t v0;

  return v0;
}

unint64_t protocol witness for static DUProcessingPhaseSpecification.phaseID.getter in conformance DUBackboneEncodingSmolBERToSpecification()
{
  return 0xD000000000000021;
}

uint64_t type metadata accessor for DUBackboneEncodingSmolBERToSpecification()
{
  return objc_opt_self();
}

uint64_t DUFoundInEventSmolBERToImplementation.__allocating_init()()
{
  return swift_allocObject();
}

unint64_t static DUFoundInEventSmolBERToImplementation.implementationID.getter()
{
  return 0xD000000000000025;
}

uint64_t static DUFoundInEventSmolBERToImplementation.specification.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for DUFoundInEventSpecification();
  result = swift_allocObject();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for DUFoundInEventSpecification;
  *a1 = result;
  return result;
}

void *static DUFoundInEventSmolBERToImplementation.implementationAttributes.getter()
{
  return &outlined read-only object #0 of static DUFoundInEventSmolBERToImplementation.implementationAttributes.getter;
}

_QWORD *DUFoundInEventSmolBERToImplementation.postprocessModelOutput(modelOutput:engineConfiguration:)(uint64_t *a1, void *a2)
{
  objc_class *v4;
  id v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  void *v16;
  Class v17;
  id v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  void *v23;
  Class isa;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  id v31;
  void *v32;
  Class v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  void (*v39)(uint64_t);
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  unint64_t v43;
  id v44;
  void *v45;
  Class v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  id v52;
  void *v53;
  Class v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  _QWORD *v60;
  void (*v61)(uint64_t);
  uint64_t v62;
  _QWORD *v63;
  void (*v64)(uint64_t, uint64_t);
  uint64_t v65;
  unint64_t v66;
  id v67;
  void *v68;
  Class v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  unint64_t v75;
  id v76;
  void *v77;
  Class v78;
  id v79;
  char v80;
  uint64_t v81;
  unint64_t v82;
  id v83;
  void *v84;
  Class v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  unint64_t v91;
  id v92;
  void *v93;
  Class v94;
  id v95;
  char v96;
  uint64_t v97;
  unint64_t v98;
  id v99;
  void *v100;
  Class v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  unint64_t v107;
  id v108;
  void *v109;
  Class v110;
  id v111;
  char v112;
  uint64_t v113;
  unint64_t v114;
  id v115;
  void *v116;
  Class v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  unint64_t v123;
  id v124;
  void *v125;
  Class v126;
  id v127;
  char v128;
  uint64_t v129;
  unint64_t v130;
  id v131;
  void *v132;
  Class v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  uint64_t v138;
  unint64_t v139;
  id v140;
  void *v141;
  Class v142;
  id v143;
  char v144;
  uint64_t v145;
  unint64_t v146;
  id v147;
  void *v148;
  Class v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char v153;
  uint64_t v154;
  unint64_t v155;
  id v156;
  void *v157;
  Class v158;
  id v159;
  char v160;
  uint64_t v161;
  unint64_t v162;
  id v163;
  void *v164;
  Class v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char v169;
  uint64_t v170;
  unint64_t v171;
  id v172;
  void *v173;
  Class v174;
  id v175;
  char v176;
  uint64_t v177;
  unint64_t v178;
  id v179;
  void *v180;
  Class v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char v185;
  uint64_t v186;
  unint64_t v187;
  id v188;
  void *v189;
  Class v190;
  id v191;
  char v192;
  uint64_t v193;
  unint64_t v194;
  id v195;
  void *v196;
  Class v197;
  uint64_t v198;
  uint64_t *v200;

  type metadata accessor for DUFoundInEventsPostprocessing();
  *(_QWORD *)(swift_allocObject() + 16) = a2;
  v4 = (objc_class *)type metadata accessor for DUFoundInEventResult();
  v5 = a2;
  v6 = objc_msgSend(objc_allocWithZone(v4), sel_init);
  v7 = specialized DUFoundInEventsPostprocessing.detectEventPolarity(modelOutput:)((uint64_t)a1);
  if (v7 == 2)
  {
    (*(void (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & *v6) + 0x130))(0);
    goto LABEL_111;
  }
  v8 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v9 = (*(uint64_t (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & *v6) + 0x130))(v7 & 1);
  if (((*(uint64_t (**)(uint64_t))((*v8 & *v6) + 0x128))(v9) & 1) == 0)
    goto LABEL_111;
  v10 = DUFoundInEventsPostprocessing.simpleCandidateResolutionForModelOutput(modelOutput:type:)(a1, 0x7461767265736572, 0xED000064496E6F69);
  if (!v11)
  {
    v19 = v12;
    swift_bridgeObjectRelease();
    if ((v19 & 1) != 0)
      v20 = 1;
    else
      v20 = 2;
    v21 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x7461767265736572, 0xED000064496E6F69, v20);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v21);
    swift_bridgeObjectRelease();
    v22 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v23 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, 0x80000002284D9F10);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v18 = objc_msgSend(v22, sel_initWithDomain_code_userInfo_, v23, v20, isa);

    goto LABEL_11;
  }
  v13 = v11;
  if (v11 == 1)
  {
    v14 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x7461767265736572, 0xED000064496E6F69, 0);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v14);
    swift_bridgeObjectRelease();
    v15 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v16 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, 0x80000002284D9F10);
    v17 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v18 = objc_msgSend(v15, sel_initWithDomain_code_userInfo_, v16, 0, v17);

LABEL_11:
    (*(void (**)(id))((*v8 & *v6) + 0x148))(v18);
    goto LABEL_13;
  }
  v25 = v10;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))((*v8 & *v6) + 0x160))(v25, v13);
LABEL_13:
  v26 = DUFoundInEventsPostprocessing.addressValuesForModelOutput(modelOutput:startAddress:)(a1, 1);
  if (v27 == 1)
  {
    v30 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x6464417472617473, 0xEC00000073736572, 0);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v30);
    swift_bridgeObjectRelease();
    v31 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v32 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, 0x80000002284D9F10);
    v33 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v34 = objc_msgSend(v31, sel_initWithDomain_code_userInfo_, v32, 0, v33);

LABEL_24:
    (*(void (**)(id))((*v8 & *v6) + 0x238))(v34);
    goto LABEL_26;
  }
  v35 = v26;
  v36 = v27;
  v37 = v28;
  v38 = v29;
  if (v28)
  {
    v39 = *(void (**)(uint64_t))((*v8 & *v6) + 0x268);
    v40 = swift_bridgeObjectRetain();
    v39(v40);
    if (!v36)
      goto LABEL_25;
  }
  else if (!v27)
  {
    goto LABEL_25;
  }
  v41 = *(void (**)(uint64_t, uint64_t))((*v8 & *v6) + 0x250);
  swift_bridgeObjectRetain();
  v41(v35, v36);
  if (v37)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v38 & 1) != 0)
      v42 = 1;
    else
      v42 = 2;
    v43 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x6464417472617473, 0xEC00000073736572, v42);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v43);
    swift_bridgeObjectRelease();
    v44 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v45 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, 0x80000002284D9F10);
    v46 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v34 = objc_msgSend(v44, sel_initWithDomain_code_userInfo_, v45, v42, v46);

    goto LABEL_24;
  }
LABEL_25:
  swift_bridgeObjectRelease();
LABEL_26:
  v47 = DUFoundInEventsPostprocessing.addressValuesForModelOutput(modelOutput:startAddress:)(a1, 0);
  if (v48 == 1)
  {
    v51 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x6572646441646E65, 0xEA00000000007373, 0);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v51);
    swift_bridgeObjectRelease();
    v52 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v53 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, 0x80000002284D9F10);
    v54 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v55 = objc_msgSend(v52, sel_initWithDomain_code_userInfo_, v53, 0, v54);

    (*(void (**)(id))((*v8 & *v6) + 0x280))(v55);
    goto LABEL_39;
  }
  v56 = v47;
  v57 = v48;
  v58 = v49;
  v59 = v50;
  v200 = a1;
  if (v49)
  {
    v60 = v8;
    v61 = *(void (**)(uint64_t))((*v8 & *v6) + 0x2B0);
    v62 = swift_bridgeObjectRetain();
    v61(v62);
    v8 = v60;
    if (!v57)
      goto LABEL_37;
  }
  else if (!v48)
  {
    goto LABEL_37;
  }
  v63 = v8;
  v64 = *(void (**)(uint64_t, uint64_t))((*v8 & *v6) + 0x298);
  swift_bridgeObjectRetain();
  v64(v56, v57);
  v8 = v63;
  if (v58)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v59 & 1) != 0)
      v65 = 1;
    else
      v65 = 2;
    v66 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x6572646441646E65, 0xEA00000000007373, v65);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v66);
    swift_bridgeObjectRelease();
    v67 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v68 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, 0x80000002284D9F10);
    v69 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v70 = objc_msgSend(v67, sel_initWithDomain_code_userInfo_, v68, v65, v69);

    (*(void (**)(id))((*v63 & *v6) + 0x280))(v70);
    goto LABEL_38;
  }
LABEL_37:
  swift_bridgeObjectRelease();
LABEL_38:
  a1 = v200;
LABEL_39:
  v71 = DUFoundInEventsPostprocessing.dateStringForModelOutput(modelOutput:startDate:)(a1, 1);
  if (!v72)
  {
    v80 = v73;
    swift_bridgeObjectRelease();
    if ((v80 & 1) != 0)
      v81 = 1;
    else
      v81 = 2;
    v82 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x7461447472617473, 0xE900000000000065, v81);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v82);
    swift_bridgeObjectRelease();
    v83 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v84 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, 0x80000002284D9F10);
    v85 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v79 = objc_msgSend(v83, sel_initWithDomain_code_userInfo_, v84, v81, v85);

    goto LABEL_46;
  }
  v74 = v72;
  if (v72 == 1)
  {
    v75 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x7461447472617473, 0xE900000000000065, 0);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v75);
    swift_bridgeObjectRelease();
    v76 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v77 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, 0x80000002284D9F10);
    v78 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v79 = objc_msgSend(v76, sel_initWithDomain_code_userInfo_, v77, 0, v78);

LABEL_46:
    (*(void (**)(id))((*v8 & *v6) + 0x328))(v79);
    goto LABEL_48;
  }
  v86 = v71;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))((*v8 & *v6) + 0x340))(v86, v74);
LABEL_48:
  v87 = DUFoundInEventsPostprocessing.dateStringForModelOutput(modelOutput:startDate:)(a1, 0);
  if (!v88)
  {
    v96 = v89;
    swift_bridgeObjectRelease();
    if ((v96 & 1) != 0)
      v97 = 1;
    else
      v97 = 2;
    v98 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x65746144646E65, 0xE700000000000000, v97);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v98);
    swift_bridgeObjectRelease();
    v99 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v100 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, 0x80000002284D9F10);
    v101 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v95 = objc_msgSend(v99, sel_initWithDomain_code_userInfo_, v100, v97, v101);

    goto LABEL_55;
  }
  v90 = v88;
  if (v88 == 1)
  {
    v91 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x65746144646E65, 0xE700000000000000, 0);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v91);
    swift_bridgeObjectRelease();
    v92 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v93 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, 0x80000002284D9F10);
    v94 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v95 = objc_msgSend(v92, sel_initWithDomain_code_userInfo_, v93, 0, v94);

LABEL_55:
    (*(void (**)(id))((*v8 & *v6) + 0x358))(v95);
    goto LABEL_57;
  }
  v102 = v87;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))((*v8 & *v6) + 0x370))(v102, v90);
LABEL_57:
  v103 = DUFoundInEventsPostprocessing.simpleCandidateResolutionForModelOutput(modelOutput:type:)(a1, 0x616C507472617473, 0xEA00000000006563);
  if (!v104)
  {
    v112 = v105;
    swift_bridgeObjectRelease();
    if ((v112 & 1) != 0)
      v113 = 1;
    else
      v113 = 2;
    v114 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x616C507472617473, 0xEA00000000006563, v113);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v114);
    swift_bridgeObjectRelease();
    v115 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v116 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, 0x80000002284D9F10);
    v117 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v111 = objc_msgSend(v115, sel_initWithDomain_code_userInfo_, v116, v113, v117);

    goto LABEL_64;
  }
  v106 = v104;
  if (v104 == 1)
  {
    v107 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x616C507472617473, 0xEA00000000006563, 0);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v107);
    swift_bridgeObjectRelease();
    v108 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v109 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, 0x80000002284D9F10);
    v110 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v111 = objc_msgSend(v108, sel_initWithDomain_code_userInfo_, v109, 0, v110);

LABEL_64:
    (*(void (**)(id))((*v8 & *v6) + 0x2C8))(v111);
    goto LABEL_66;
  }
  v118 = v103;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))((*v8 & *v6) + 0x2E0))(v118, v106);
LABEL_66:
  v119 = DUFoundInEventsPostprocessing.simpleCandidateResolutionForModelOutput(modelOutput:type:)(a1, 0x6563616C50646E65, 0xE800000000000000);
  if (!v120)
  {
    v128 = v121;
    swift_bridgeObjectRelease();
    if ((v128 & 1) != 0)
      v129 = 1;
    else
      v129 = 2;
    v130 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x6563616C50646E65, 0xE800000000000000, v129);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v130);
    swift_bridgeObjectRelease();
    v131 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v132 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, 0x80000002284D9F10);
    v133 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v127 = objc_msgSend(v131, sel_initWithDomain_code_userInfo_, v132, v129, v133);

    goto LABEL_73;
  }
  v122 = v120;
  if (v120 == 1)
  {
    v123 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x6563616C50646E65, 0xE800000000000000, 0);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v123);
    swift_bridgeObjectRelease();
    v124 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v125 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, 0x80000002284D9F10);
    v126 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v127 = objc_msgSend(v124, sel_initWithDomain_code_userInfo_, v125, 0, v126);

LABEL_73:
    (*(void (**)(id))((*v8 & *v6) + 0x2F8))(v127);
    goto LABEL_75;
  }
  v134 = v119;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))((*v8 & *v6) + 0x310))(v134, v122);
LABEL_75:
  v135 = DUFoundInEventsPostprocessing.simpleCandidateResolutionForModelOutput(modelOutput:type:)(a1, 0x7461767265736572, 0xEF656D614E6E6F69);
  if (!v136)
  {
    v144 = v137;
    swift_bridgeObjectRelease();
    if ((v144 & 1) != 0)
      v145 = 1;
    else
      v145 = 2;
    v146 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x7461767265736572, 0xEF656D614E6E6F69, v145);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v146);
    swift_bridgeObjectRelease();
    v147 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v148 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, 0x80000002284D9F10);
    v149 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v143 = objc_msgSend(v147, sel_initWithDomain_code_userInfo_, v148, v145, v149);

    goto LABEL_82;
  }
  v138 = v136;
  if (v136 == 1)
  {
    v139 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x7461767265736572, 0xEF656D614E6E6F69, 0);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v139);
    swift_bridgeObjectRelease();
    v140 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v141 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, 0x80000002284D9F10);
    v142 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v143 = objc_msgSend(v140, sel_initWithDomain_code_userInfo_, v141, 0, v142);

LABEL_82:
    (*(void (**)(id))((*v8 & *v6) + 0x178))(v143);
    goto LABEL_84;
  }
  v150 = v135;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))((*v8 & *v6) + 0x190))(v150, v138);
LABEL_84:
  v151 = DUFoundInEventsPostprocessing.simpleCandidateResolutionForModelOutput(modelOutput:type:)(a1, 0xD000000000000013, 0x80000002284D9F50);
  if (!v152)
  {
    v160 = v153;
    swift_bridgeObjectRelease();
    if ((v160 & 1) != 0)
      v161 = 1;
    else
      v161 = 2;
    v162 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0xD000000000000013, 0x80000002284D9F50, v161);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v162);
    swift_bridgeObjectRelease();
    v163 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v164 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, 0x80000002284D9F10);
    v165 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v159 = objc_msgSend(v163, sel_initWithDomain_code_userInfo_, v164, v161, v165);

    goto LABEL_91;
  }
  v154 = v152;
  if (v152 == 1)
  {
    v155 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0xD000000000000013, 0x80000002284D9F50, 0);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v155);
    swift_bridgeObjectRelease();
    v156 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v157 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, 0x80000002284D9F10);
    v158 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v159 = objc_msgSend(v156, sel_initWithDomain_code_userInfo_, v157, 0, v158);

LABEL_91:
    (*(void (**)(id))((*v8 & *v6) + 0x1A8))(v159);
    goto LABEL_93;
  }
  v166 = v151;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))((*v8 & *v6) + 0x1C0))(v166, v154);
LABEL_93:
  v167 = DUFoundInEventsPostprocessing.simpleCandidateResolutionForModelOutput(modelOutput:type:)(a1, 0x6D614E7473657567, 0xE900000000000065);
  if (v168)
  {
    v170 = v168;
    if (v168 != 1)
    {
      v182 = v167;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))((*v8 & *v6) + 0x1F0))(v182, v170);
      goto LABEL_102;
    }
    v171 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x6D614E7473657567, 0xE900000000000065, 0);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v171);
    swift_bridgeObjectRelease();
    v172 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v173 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, 0x80000002284D9F10);
    v174 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v175 = objc_msgSend(v172, sel_initWithDomain_code_userInfo_, v173, 0, v174);

  }
  else
  {
    v176 = v169;
    swift_bridgeObjectRelease();
    if ((v176 & 1) != 0)
      v177 = 1;
    else
      v177 = 2;
    v178 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x6D614E7473657567, 0xE900000000000065, v177);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v178);
    swift_bridgeObjectRelease();
    v179 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v180 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, 0x80000002284D9F10);
    v181 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v175 = objc_msgSend(v179, sel_initWithDomain_code_userInfo_, v180, v177, v181);

  }
  (*(void (**)(id))((*v8 & *v6) + 0x1D8))(v175);
LABEL_102:
  v183 = DUFoundInEventsPostprocessing.simpleCandidateResolutionForModelOutput(modelOutput:type:)(a1, 0x6369546569766F6DLL, 0xEF656D614E74656BLL);
  if (v184)
  {
    v186 = v184;
    if (v184 != 1)
    {
      v198 = v183;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))((*v8 & *v6) + 0x220))(v198, v186);
      goto LABEL_111;
    }
    v187 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x6369546569766F6DLL, 0xEF656D614E74656BLL, 0);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v187);
    swift_bridgeObjectRelease();
    v188 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v189 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, 0x80000002284D9F10);
    v190 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v191 = objc_msgSend(v188, sel_initWithDomain_code_userInfo_, v189, 0, v190);

  }
  else
  {
    v192 = v185;
    swift_bridgeObjectRelease();
    if ((v192 & 1) != 0)
      v193 = 1;
    else
      v193 = 2;
    v194 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x6369546569766F6DLL, 0xEF656D614E74656BLL, v193);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v194);
    swift_bridgeObjectRelease();
    v195 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v196 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, 0x80000002284D9F10);
    v197 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v191 = objc_msgSend(v195, sel_initWithDomain_code_userInfo_, v196, v193, v197);

  }
  (*(void (**)(id))((*v8 & *v6) + 0x208))(v191);
LABEL_111:
  swift_release();
  return v6;
}

uint64_t DUFoundInEventSmolBERToImplementation.runTypedOnRequest(request:)()
{
  return swift_task_switch();
}

{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v1 = *(unsigned __int8 *)DocumentUnderstandingFeatureFlagReader.isFoundInModelsEnabled.unsafeMutableAddressor();
  lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
  v2 = swift_allocError();
  v4 = 0xD00000000000001ALL;
  if (v1)
    v4 = 0xD000000000000027;
  v5 = 0x80000002284E19B0;
  if (v1)
    v5 = 0x80000002284E19D0;
  *(_QWORD *)v3 = v4;
  *(_QWORD *)(v3 + 8) = v5;
  *(_BYTE *)(v3 + 16) = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, 1);
}

uint64_t DUFoundInEventSmolBERToImplementation.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t DUFoundInEventSmolBERToImplementation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t DUFoundInEventSmolBERToImplementation.init()()
{
  uint64_t v0;

  return v0;
}

unint64_t protocol witness for static DUProcessingPhaseImplementation.implementationID.getter in conformance DUFoundInEventSmolBERToImplementation()
{
  return 0xD000000000000025;
}

void *protocol witness for static DUProcessingPhaseImplementation.implementationAttributes.getter in conformance DUFoundInEventSmolBERToImplementation()
{
  return &outlined read-only object #0 of protocol witness for static DUProcessingPhaseImplementation.implementationAttributes.getter in conformance DUFoundInEventSmolBERToImplementation;
}

uint64_t type metadata accessor for DUFoundInEventSmolBERToImplementation()
{
  return objc_opt_self();
}

uint64_t DUFoundInEventEncodingSmolBERToSpecification.__allocating_init()()
{
  return swift_allocObject();
}

unint64_t static DUFoundInEventEncodingSmolBERToSpecification.phaseID.getter()
{
  return 0xD000000000000027;
}

uint64_t DUFoundInEventEncodingSmolBERToSpecification.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t DUFoundInEventEncodingSmolBERToSpecification.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t DUFoundInEventEncodingSmolBERToSpecification.init()()
{
  uint64_t v0;

  return v0;
}

unint64_t protocol witness for static DUProcessingPhaseSpecification.phaseID.getter in conformance DUFoundInEventEncodingSmolBERToSpecification()
{
  return 0xD000000000000027;
}

uint64_t type metadata accessor for DUFoundInEventEncodingSmolBERToSpecification()
{
  return objc_opt_self();
}

char *DULanguageTaggingResponse.__allocating_init<A>(proto:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  objc_class *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  id v25;
  char *v26;
  char v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  id v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  void **v49;
  void *v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;

  v3 = v2;
  v6 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v59 = *(_QWORD **)(v6 - 8);
  v60 = v6;
  v7 = MEMORY[0x24BDAC7A8](v6);
  v57 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v55 = (uint64_t)&v52 - v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v56 = (uint64_t)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v58 = (uint64_t)&v52 - v13;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse();
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v24 = (uint64_t *)((char *)&v52 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v25 = objc_msgSend(objc_allocWithZone(v3), sel_init);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, a1, a2);
  v26 = (char *)v25;
  v27 = swift_dynamicCast();
  v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56);
  if ((v27 & 1) != 0)
  {
    v53 = v18;
    v54 = a1;
    v29 = (uint64_t)v57;
    v28(v17, 0, 1, v21);
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v17, (uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse);
    v30 = *v24;
    v31 = &v26[OBJC_IVAR____TtC21DocumentUnderstanding25DULanguageTaggingResponse_languageTags];
    swift_beginAccess();
    *(_QWORD *)v31 = v30;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v32 = (uint64_t)v24 + *(int *)(v21 + 24);
    v33 = v58;
    outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?(v32, v58);
    v34 = v60;
    v35 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v59[6];
    LODWORD(v30) = v35(v33, 1, v60);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v33, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    if ((_DWORD)v30 == 1)
    {

      (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v54, a2);
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse);
    }
    else
    {
      v59 = v24;
      v36 = v32;
      v37 = v56;
      outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?(v36, v56);
      v38 = v35(v37, 1, v34);
      v39 = v54;
      v40 = v55;
      if (v38 == 1)
      {
        UnknownStorage.init()();
        v41 = (_QWORD *)(v40 + *(int *)(v34 + 20));
        *v41 = 0;
        v41[1] = 0;
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v37, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
      }
      else
      {
        outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v37, v55, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      }
      v42 = v53;
      v43 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUDebugInfo()), sel_init);
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v40, v29, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      v44 = (uint64_t *)(v29 + *(int *)(v34 + 20));
      if (v44[1])
      {
        v45 = *v44;
        v46 = v44[1];
      }
      else
      {
        v45 = 0;
        v46 = 0xE000000000000000;
      }
      v47 = (char *)v43;
      swift_bridgeObjectRetain();
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v29, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      v48 = &v47[OBJC_IVAR____TtC21DocumentUnderstanding11DUDebugInfo_debugString];
      swift_beginAccess();
      *(_QWORD *)v48 = v45;
      *((_QWORD *)v48 + 1) = v46;

      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v39, a2);
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v59, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse);
      v49 = (void **)&v26[OBJC_IVAR____TtC21DocumentUnderstanding25DULanguageTaggingResponse_responseDebugInfo];
      swift_beginAccess();
      v50 = *v49;
      *v49 = v47;

    }
  }
  else
  {
    v28(v17, 1, 1, v21);

    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a1, a2);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v17, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?);
    return 0;
  }
  return v26;
}

id DULanguageTaggingResponse.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t DULanguageTaggingResponse.languageTags.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t DULanguageTaggingResponse.languageTags.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding25DULanguageTaggingResponse_languageTags);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*DULanguageTaggingResponse.languageTags.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryConfidence.modify;
}

void *DULanguageTaggingResponse.responseDebugInfo.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding25DULanguageTaggingResponse_responseDebugInfo);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void DULanguageTaggingResponse.responseDebugInfo.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;

  v3 = (void **)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding25DULanguageTaggingResponse_responseDebugInfo);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*DULanguageTaggingResponse.responseDebugInfo.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DULanguageTaggingResponse.protoRepresentation.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v27 = (uint64_t)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  MEMORY[0x24BDAC7A8](v11);
  v26 = (uint64_t)&v26 - v12;
  *a1 = MEMORY[0x24BEE4AF8];
  v13 = type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse();
  UnknownStorage.init()();
  v14 = (uint64_t)a1 + *(int *)(v13 + 24);
  v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
  v16 = v15(v14, 1, 1, v7);
  v17 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v18 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v2) + 0x78))(v16);
  if (!v18)
  {
    v15((uint64_t)v6, 1, 1, v7);
    goto LABEL_5;
  }
  v19 = v18;
  (*(void (**)(void))((*v17 & *v18) + 0x78))();

  v20 = swift_dynamicCast();
  v15((uint64_t)v6, v20 ^ 1u, 1, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
LABEL_5:
    v23 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v6, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    goto LABEL_6;
  }
  v21 = v26;
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v6, v26, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
  v22 = v27;
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo(v21, v27);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v14, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v22, v14, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
  v15(v14, 0, 1, v7);
  v23 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v21, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
LABEL_6:
  v24 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v2) + 0x60))(v23);
  result = swift_bridgeObjectRelease();
  *a1 = v24;
  return result;
}

uint64_t DULanguageTaggingResponse.copy(with:)@<X0>(char **a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t result;
  uint64_t v9;

  v3 = type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse();
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0x98))(v4);
  v7 = specialized DULanguageTaggingResponse.__allocating_init<A>(proto:)((uint64_t)v6);
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DULanguageTaggingResponse?);
  a1[3] = (char *)result;
  *a1 = v7;
  return result;
}

Swift::Void __swiftcall DULanguageTaggingResponse.encode(with:)(NSCoder with)
{
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;

  type metadata accessor for DULanguageTaggingResponse();
  lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DULanguageTaggingResponse and conformance DULanguageTaggingResponse, v2, (uint64_t (*)(uint64_t))type metadata accessor for DULanguageTaggingResponse, (uint64_t)&protocol conformance descriptor for DULanguageTaggingResponse);
  v3 = (void *)DUProtobufEncodableProtocol.serializedData()();
  if (v3)
  {
    v4 = v3;
    v5 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000016, 0x80000002284DABA0);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v4, v5);

  }
}

uint64_t type metadata accessor for DULanguageTaggingResponse()
{
  return objc_opt_self();
}

uint64_t DULanguageTaggingResponse.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return DULanguageTaggingResponse.init(coder:)(a1);
}

uint64_t DULanguageTaggingResponse.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  swift_getObjectType();
  type metadata accessor for NSData();
  v3 = v1;
  if (!NSCoder.decodeObject<A>(of:forKey:)())
  {

    goto LABEL_5;
  }
  swift_getObjectType();

  lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DULanguageTaggingResponse and conformance DULanguageTaggingResponse, v4, (uint64_t (*)(uint64_t))type metadata accessor for DULanguageTaggingResponse, (uint64_t)&protocol conformance descriptor for DULanguageTaggingResponse);
  DUProtobufEncodableProtocol.init(serializedData:)();

  v5 = v7;
  if (!v7)
  {
LABEL_5:
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v5;
}

id DULanguageTaggingResponse.init()()
{
  char *v0;
  objc_super v2;

  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding25DULanguageTaggingResponse_languageTags] = MEMORY[0x24BEE4AF8];
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding25DULanguageTaggingResponse_responseDebugInfo] = 0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DULanguageTaggingResponse();
  return objc_msgSendSuper2(&v2, sel_init);
}

id DULanguageTaggingResponse.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DULanguageTaggingResponse();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t associated type witness table accessor for DUProtobufEncodableProtocol.ProtobufType : Message in DULanguageTaggingResponse()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for DUProtobufEncodableProtocol.init(proto:) in conformance DULanguageTaggingResponse@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 144);
  v6 = type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse();
  v7 = lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_LanguageTaggingResponse and conformance DocumentUnderstanding_ClientInterface_LanguageTaggingResponse, 255, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse);
  result = v5(a1, v6, v7);
  *a2 = result;
  return result;
}

uint64_t sub_22842F85C()
{
  return lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_LanguageTaggingResponse and conformance DocumentUnderstanding_ClientInterface_LanguageTaggingResponse, 255, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse);
}

const char *IntelligencePlatform.domain.getter()
{
  return "IntelligencePlatform";
}

const char *IntelligencePlatform.feature.getter()
{
  return "NERD";
}

uint64_t static IntelligencePlatform.__derived_enum_equals(_:_:)()
{
  return 1;
}

void IntelligencePlatform.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int IntelligencePlatform.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance IntelligencePlatform()
{
  return "IntelligencePlatform";
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance IntelligencePlatform()
{
  return "NERD";
}

uint64_t storeEnumTagSinglePayload for IntelligencePlatform(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_22842F9D0 + 4 * asc_2284C99F0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_22842F9F0 + 4 * byte_2284C99F5[v4]))();
}

_BYTE *sub_22842F9D0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_22842F9F0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_22842F9F8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_22842FA00(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_22842FA08(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_22842FA10(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for IntelligencePlatform()
{
  return &type metadata for IntelligencePlatform;
}

uint64_t DUUserInterfaceUnderstandingDefaultImplementation.__allocating_init()()
{
  return swift_allocObject();
}

unint64_t static DUUserInterfaceUnderstandingDefaultImplementation.implementationID.getter()
{
  return 0xD000000000000033;
}

uint64_t static DUUserInterfaceUnderstandingDefaultImplementation.specification.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for DUUserInterfaceUnderstandingSpecification();
  result = swift_allocObject();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for DUUserInterfaceUnderstandingSpecification;
  *a1 = result;
  return result;
}

void *static DUUserInterfaceUnderstandingDefaultImplementation.implementationAttributes.getter()
{
  return &outlined read-only object #0 of static DUUserInterfaceUnderstandingDefaultImplementation.implementationAttributes.getter;
}

uint64_t DUUserInterfaceUnderstandingDefaultImplementation.runTypedOnRequest(request:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch();
}

uint64_t DUUserInterfaceUnderstandingDefaultImplementation.runTypedOnRequest(request:)()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = (void *)(*(uint64_t (**)(void))(**(_QWORD **)(v0 + 16) + 136))();

  if (v1)
  {
    v9 = MEMORY[0x24BEE4AF8];
    v2 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUUserInterfaceUnderstandingResult()), sel_init);
    v3 = (_QWORD *)MEMORY[0x24BEE4EA0];
    v4 = (*(uint64_t (**)(uint64_t, unint64_t))((*MEMORY[0x24BEE4EA0] & *v2) + 0x68))(0x6564692D74736574, 0xEF7265696669746ELL);
    (*(void (**)(uint64_t, double))((*v3 & *v2) + 0x80))(v4, 1.0);
    v5 = v2;
    MEMORY[0x22E2AFAFC]();
    if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

    v6 = v9;
  }
  else
  {
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v6 = swift_allocError();
    *(_QWORD *)v7 = 0xD000000000000015;
    *(_QWORD *)(v7 + 8) = 0x80000002284DB0D0;
    *(_BYTE *)(v7 + 16) = 0;
  }
  return (*(uint64_t (**)(uint64_t, BOOL))(v0 + 8))(v6, v1 == 0);
}

uint64_t DUUserInterfaceUnderstandingDefaultImplementation.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t DUUserInterfaceUnderstandingDefaultImplementation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t DUUserInterfaceUnderstandingDefaultImplementation.init()()
{
  uint64_t v0;

  return v0;
}

_UNKNOWN **associated type witness table accessor for DUProcessingPhaseImplementation.SpecificationType : DUProcessingPhaseSpecification in DUUserInterfaceUnderstandingDefaultImplementation()
{
  return &protocol witness table for DUUserInterfaceUnderstandingSpecification;
}

uint64_t protocol witness for static DUProcessingPhaseImplementation.specification.getter in conformance DUUserInterfaceUnderstandingDefaultImplementation@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for DUUserInterfaceUnderstandingSpecification();
  result = swift_allocObject();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for DUUserInterfaceUnderstandingSpecification;
  *a1 = result;
  return result;
}

unint64_t protocol witness for static DUProcessingPhaseImplementation.implementationID.getter in conformance DUUserInterfaceUnderstandingDefaultImplementation()
{
  return 0xD000000000000033;
}

void *protocol witness for static DUProcessingPhaseImplementation.implementationAttributes.getter in conformance DUUserInterfaceUnderstandingDefaultImplementation()
{
  return &outlined read-only object #0 of protocol witness for static DUProcessingPhaseImplementation.implementationAttributes.getter in conformance DUUserInterfaceUnderstandingDefaultImplementation;
}

uint64_t type metadata accessor for DUUserInterfaceUnderstandingDefaultImplementation()
{
  return objc_opt_self();
}

char *DUUserInterfaceUnderstandingResult.__allocating_init<A>(proto:)()
{
  objc_class *v0;
  objc_class *v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  char *v9;
  char v10;
  void (*v11)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  double *v15;
  double v16;
  double *v17;
  _BYTE v19[24];

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = &v19[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (uint64_t *)&v19[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = (char *)objc_msgSend(objc_allocWithZone(v1), sel_init);
  v10 = swift_dynamicCast();
  v11 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  if ((v10 & 1) != 0)
  {
    v11(v4, 0, 1, v5);
    outlined init with take of DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult((uint64_t)v4, (uint64_t)v8);
    v13 = *v8;
    v12 = v8[1];
    v14 = &v9[OBJC_IVAR____TtC21DocumentUnderstanding34DUUserInterfaceUnderstandingResult_topicIdentifier];
    swift_beginAccess();
    *(_QWORD *)v14 = v13;
    *((_QWORD *)v14 + 1) = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v15 = (double *)((char *)v8 + *(int *)(v5 + 24));
    if (*((_BYTE *)v15 + 8))
      v16 = 0.0;
    else
      v16 = *v15;
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult);
    v17 = (double *)&v9[OBJC_IVAR____TtC21DocumentUnderstanding34DUUserInterfaceUnderstandingResult_topicConfidence];
    swift_beginAccess();
    *v17 = v16;

  }
  else
  {
    v11(v4, 1, 1, v5);

    outlined destroy of DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult?((uint64_t)v4);
    return 0;
  }
  return v9;
}

uint64_t outlined destroy of DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id DUUserInterfaceUnderstandingResult.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t DUUserInterfaceUnderstandingResult.topicIdentifier.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding34DUUserInterfaceUnderstandingResult_topicIdentifier);
  swift_beginAccess();
  v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t DUUserInterfaceUnderstandingResult.topicIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC21DocumentUnderstanding34DUUserInterfaceUnderstandingResult_topicIdentifier);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*DUUserInterfaceUnderstandingResult.topicIdentifier.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

double DUUserInterfaceUnderstandingResult.topicConfidence.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC21DocumentUnderstanding34DUUserInterfaceUnderstandingResult_topicConfidence;
  swift_beginAccess();
  return *(double *)v1;
}

uint64_t DUUserInterfaceUnderstandingResult.topicConfidence.setter(double a1)
{
  uint64_t v1;
  double *v3;
  uint64_t result;

  v3 = (double *)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding34DUUserInterfaceUnderstandingResult_topicConfidence);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*DUUserInterfaceUnderstandingResult.topicConfidence.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryConfidence.modify;
}

void DUUserInterfaceUnderstandingResult.protoRepresentation.getter(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  int *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;

  *a1 = MEMORY[0x24BEE4AF8];
  v3 = (int *)type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult();
  UnknownStorage.init()();
  v4 = (char *)a1 + v3[6];
  v5 = type metadata accessor for DocumentUnderstanding_TopicSetIdentifier();
  v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v7 = (_QWORD *)((char *)a1 + v3[7]);
  *v7 = 0;
  v7[1] = 0;
  v8 = (char *)a1 + v3[8];
  *(_QWORD *)v8 = 0;
  v8[8] = 1;
  v9 = (_QWORD *)MEMORY[0x24BEE4EA0];
  *v7 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0x60))(v6);
  v7[1] = v10;
  *(double *)v8 = (*(double (**)(void))((*v9 & *v1) + 0x78))();
  v8[8] = 0;
}

uint64_t DUUserInterfaceUnderstandingResult.copy(with:)@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  uint64_t result;
  uint64_t v9;

  v3 = type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult();
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0x98))(v4);
  v7 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUUserInterfaceUnderstandingResult()), sel_init);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult);

  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DUUserInterfaceUnderstandingResult?);
  a1[3] = result;
  *a1 = 0;
  return result;
}

uint64_t type metadata accessor for DUUserInterfaceUnderstandingResult()
{
  return objc_opt_self();
}

Swift::Void __swiftcall DUUserInterfaceUnderstandingResult.encode(with:)(NSCoder with)
{
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;

  type metadata accessor for DUUserInterfaceUnderstandingResult();
  lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DUUserInterfaceUnderstandingResult and conformance DUUserInterfaceUnderstandingResult, v2, (uint64_t (*)(uint64_t))type metadata accessor for DUUserInterfaceUnderstandingResult, (uint64_t)&protocol conformance descriptor for DUUserInterfaceUnderstandingResult);
  v3 = (void *)DUProtobufEncodableProtocol.serializedData()();
  if (v3)
  {
    v4 = v3;
    v5 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000016, 0x80000002284DABA0);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v4, v5);

  }
}

uint64_t DUUserInterfaceUnderstandingResult.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return DUUserInterfaceUnderstandingResult.init(coder:)(a1);
}

uint64_t DUUserInterfaceUnderstandingResult.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  swift_getObjectType();
  type metadata accessor for NSData();
  v3 = v1;
  if (!NSCoder.decodeObject<A>(of:forKey:)())
  {

    goto LABEL_5;
  }
  swift_getObjectType();

  lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DUUserInterfaceUnderstandingResult and conformance DUUserInterfaceUnderstandingResult, v4, (uint64_t (*)(uint64_t))type metadata accessor for DUUserInterfaceUnderstandingResult, (uint64_t)&protocol conformance descriptor for DUUserInterfaceUnderstandingResult);
  DUProtobufEncodableProtocol.init(serializedData:)();

  v5 = v7;
  if (!v7)
  {
LABEL_5:
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v5;
}

id DUUserInterfaceUnderstandingResult.init()()
{
  char *v0;
  char *v1;
  objc_super v3;

  v1 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding34DUUserInterfaceUnderstandingResult_topicIdentifier];
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0xE000000000000000;
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding34DUUserInterfaceUnderstandingResult_topicConfidence] = 0;
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for DUUserInterfaceUnderstandingResult();
  return objc_msgSendSuper2(&v3, sel_init);
}

id DUUserInterfaceUnderstandingResult.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DUUserInterfaceUnderstandingResult();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t associated type witness table accessor for DUProtobufEncodableProtocol.ProtobufType : Message in DUUserInterfaceUnderstandingResult()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for DUProtobufEncodableProtocol.init(proto:) in conformance DUUserInterfaceUnderstandingResult@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 144);
  v6 = type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult();
  v7 = lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_TopicResult and conformance DocumentUnderstanding_ClientInterface_TopicResult, 255, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_TopicResult);
  result = v5(a1, v6, v7);
  *a2 = result;
  return result;
}

uint64_t sub_2284309B4()
{
  return lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_TopicResult and conformance DocumentUnderstanding_ClientInterface_TopicResult, 255, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_TopicResult);
}

id SpotlightDocumentTaggingUpdateHandler.__allocating_init(client:)(void *a1)
{
  objc_class *v1;
  char *v3;
  id v4;
  char *v5;
  id v6;
  id v7;
  id v8;
  objc_super v10;

  v3 = (char *)objc_allocWithZone(v1);
  *(_QWORD *)&v3[OBJC_IVAR____TtC21DocumentUnderstanding37SpotlightDocumentTaggingUpdateHandler_client] = a1;
  v4 = objc_allocWithZone((Class)type metadata accessor for SpotlightOutputSink());
  v5 = v3;
  v6 = a1;
  v7 = objc_msgSend(v4, sel_init);
  *(_QWORD *)&v5[OBJC_IVAR____TtC21DocumentUnderstanding37SpotlightDocumentTaggingUpdateHandler_spotlightOutputSink] = v7;

  v10.receiver = v5;
  v10.super_class = v1;
  v8 = objc_msgSendSuper2(&v10, sel_init);

  return v8;
}

id SpotlightDocumentTaggingUpdateHandler.client.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding37SpotlightDocumentTaggingUpdateHandler_client);
}

id SpotlightDocumentTaggingUpdateHandler.spotlightOutputSink.getter()
{
  uint64_t v0;

  return objc_retain(*(id *)(v0
                           + OBJC_IVAR____TtC21DocumentUnderstanding37SpotlightDocumentTaggingUpdateHandler_spotlightOutputSink));
}

id SpotlightDocumentTaggingUpdateHandler.init(client:)(void *a1)
{
  char *v1;
  id v3;
  char *v4;
  id v5;
  id v6;
  id v7;
  objc_super v9;

  *(_QWORD *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding37SpotlightDocumentTaggingUpdateHandler_client] = a1;
  v3 = objc_allocWithZone((Class)type metadata accessor for SpotlightOutputSink());
  v4 = v1;
  v5 = a1;
  v6 = objc_msgSend(v3, sel_init);
  *(_QWORD *)&v4[OBJC_IVAR____TtC21DocumentUnderstanding37SpotlightDocumentTaggingUpdateHandler_spotlightOutputSink] = v6;

  v9.receiver = v4;
  v9.super_class = (Class)type metadata accessor for SpotlightDocumentTaggingUpdateHandler();
  v7 = objc_msgSendSuper2(&v9, sel_init);

  return v7;
}

uint64_t type metadata accessor for SpotlightDocumentTaggingUpdateHandler()
{
  return objc_opt_self();
}

id SpotlightDocumentTaggingUpdateHandler.createRequest()()
{
  uint64_t v0;
  void *v1;
  objc_class *v2;
  char *v3;
  id v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  objc_class *v15;
  char *v16;
  objc_super v18;
  objc_super v19;
  objc_super v20;
  objc_super v21;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding37SpotlightDocumentTaggingUpdateHandler_client);
  v2 = (objc_class *)type metadata accessor for DURequestContentType();
  v3 = (char *)objc_allocWithZone(v2);
  *(_QWORD *)&v3[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = 2;
  v21.receiver = v3;
  v21.super_class = v2;
  v4 = v1;
  v5 = (char *)objc_msgSendSuper2(&v21, sel_init);
  v6 = (char *)objc_allocWithZone(v2);
  *(_QWORD *)&v6[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = 256;
  v20.receiver = v6;
  v20.super_class = v2;
  v7 = (char *)objc_msgSendSuper2(&v20, sel_init);
  v8 = &v5[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue];
  swift_beginAccess();
  v9 = *(_QWORD *)v8;
  v10 = (char *)objc_allocWithZone(v2);
  *(_QWORD *)&v10[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = v9;
  v19.receiver = v10;
  v19.super_class = v2;
  v11 = (char *)objc_msgSendSuper2(&v19, sel_init);
  v12 = &v11[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue];
  swift_beginAccess();
  v13 = *(_QWORD *)v12;
  v14 = &v7[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue];
  swift_beginAccess();
  *(_QWORD *)v12 = *(_QWORD *)v14 | v13;

  v15 = (objc_class *)type metadata accessor for DURequest();
  v16 = (char *)objc_allocWithZone(v15);
  *(_QWORD *)&v16[OBJC_IVAR____TtC21DocumentUnderstanding9DURequest_client] = v4;
  *(_QWORD *)&v16[OBJC_IVAR____TtC21DocumentUnderstanding9DURequest_contentType] = v11;
  *(_QWORD *)&v16[OBJC_IVAR____TtC21DocumentUnderstanding9DURequest_strategies] = 0;
  v18.receiver = v16;
  v18.super_class = v15;
  return objc_msgSendSuper2(&v18, sel_init);
}

uint64_t SpotlightDocumentTaggingUpdateHandler.handleSearchableItemFailure(searchableItem:isFile:)(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(v3 + 48) = a2;
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = v2;
  return swift_task_switch();
}

uint64_t SpotlightDocumentTaggingUpdateHandler.handleSearchableItemFailure(searchableItem:isFile:)()
{
  uint64_t v0;
  _QWORD *v1;
  int *v2;
  _QWORD *v3;
  uint64_t (*v4)();
  int *v5;
  int *v7;

  v1 = *(_QWORD **)(*(_QWORD *)(v0 + 24)
                  + OBJC_IVAR____TtC21DocumentUnderstanding37SpotlightDocumentTaggingUpdateHandler_spotlightOutputSink);
  if (*(_BYTE *)(v0 + 48) == 1)
  {
    v2 = *(int **)((*MEMORY[0x24BEE4EA0] & *v1) + 0x60);
    v7 = (int *)((char *)v2 + *v2);
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 32) = v3;
    v4 = SpotlightDocumentTaggingUpdateHandler.handleSearchableItemFailure(searchableItem:isFile:);
  }
  else
  {
    v5 = *(int **)((*MEMORY[0x24BEE4EA0] & *v1) + 0x68);
    v7 = (int *)((char *)v5 + *v5);
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 40) = v3;
    v4 = DUProcessingRequest.executeImplementation(phaseImplementation:);
  }
  *v3 = v0;
  v3[1] = v4;
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t))v7)(*(_QWORD *)(v0 + 16), MEMORY[0x24BEE4AF8], MEMORY[0x24BEE4AF8], 0xFFFFFFFFLL);
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t SpotlightDocumentTaggingUpdateHandler.handleDocumentUpdate(documentUpdate:searchableItem:isFile:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v4 + 88) = a2;
  *(_QWORD *)(v4 + 96) = v3;
  *(_BYTE *)(v4 + 272) = a3;
  *(_QWORD *)(v4 + 80) = a1;
  v5 = type metadata accessor for Logger();
  *(_QWORD *)(v4 + 104) = v5;
  *(_QWORD *)(v4 + 112) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 120) = swift_task_alloc();
  *(_QWORD *)(v4 + 128) = swift_task_alloc();
  *(_QWORD *)(v4 + 136) = swift_task_alloc();
  *(_QWORD *)(v4 + 144) = swift_task_alloc();
  *(_QWORD *)(v4 + 152) = swift_task_alloc();
  *(_QWORD *)(v4 + 160) = swift_task_alloc();
  *(_QWORD *)(v4 + 168) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t SpotlightDocumentTaggingUpdateHandler.handleDocumentUpdate(documentUpdate:searchableItem:isFile:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  int *v14;
  id v15;
  _QWORD *v16;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(void *);

  v1 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v2 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 80)) + 0xB8))();
  *(_QWORD *)(v0 + 176) = v2;
  if (v2)
  {
    v3 = (void *)v2;
    Logger.init()();
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_2282CC000, v4, v5, "(SpotlightDocumentTaggingUpdateHandler) Beginning handleDocumentUpdate", v6, 2u);
      MEMORY[0x22E2B117C](v6, -1, -1);
    }
    v7 = *(_QWORD *)(v0 + 168);
    v8 = *(_QWORD *)(v0 + 104);
    v9 = *(_QWORD *)(v0 + 112);
    v10 = *(_QWORD **)(v0 + 96);

    v11 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
    *(_QWORD *)(v0 + 184) = v11;
    v12 = v11(v7, v8);
    v13 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*v1 & *v10) + 0x68))(v12);
    *(_QWORD *)(v0 + 192) = v13;
    v14 = *(int **)((*v1 & *v13) + 0x70);
    v24 = (uint64_t (*)(void *))((char *)v14 + *v14);
    v15 = v3;
    v16 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 200) = v16;
    *v16 = v0;
    v16[1] = SpotlightDocumentTaggingUpdateHandler.handleDocumentUpdate(documentUpdate:searchableItem:isFile:);
    return v24(v3);
  }
  else
  {
    Logger.init()();
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v20 = 0;
      _os_log_impl(&dword_2282CC000, v18, v19, "There is unexpectedly no document to update", v20, 2u);
      MEMORY[0x22E2B117C](v20, -1, -1);
    }
    v22 = *(_QWORD *)(v0 + 112);
    v21 = *(_QWORD *)(v0 + 120);
    v23 = *(_QWORD *)(v0 + 104);

    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  void *v3;
  unint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void (*v54)(uint64_t, _QWORD);
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  Swift::Int v61;
  Swift::Int v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  int64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t (*v77)(void);
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  double v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  void *v98;
  uint64_t v99;
  _QWORD *v100;
  unint64_t v101;
  id v102;
  NSObject *v103;
  os_log_type_t v104;
  _BOOL4 v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  Swift::Int v118;
  Swift::Int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD **v127;
  _QWORD *v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t (*v131)(void);
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  double v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  _QWORD *v143;
  void *v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  id v148;
  NSObject *v149;
  os_log_type_t v150;
  _BOOL4 v151;
  void (*v152)(uint64_t, uint64_t);
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  _QWORD *v157;
  _QWORD *v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  _QWORD *v162;
  int *v163;
  _QWORD *v164;
  uint64_t (*v165)();
  int *v166;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  os_log_type_t type[8];
  void (*typea)(uint64_t, uint64_t);
  os_log_type_t typeb;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  void (*v182)(uint64_t, uint64_t);
  unint64_t v183;
  unint64_t v184;
  _QWORD *v185;
  os_log_type_t v186;
  uint64_t v187;
  NSObject *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  int *v192;
  unint64_t v193;

  v1 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v2 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 208)) + 0x98))();
  if (!v2 || (v3 = v2, v4 = (*(uint64_t (**)(void))((*v1 & *v2) + 0x68))(), v3, !v4))
  {
    Logger.init()();
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_2282CC000, v5, v6, "Received nil topics. Defaulting to empty list", v7, 2u);
      MEMORY[0x22E2B117C](v7, -1, -1);
    }
    v8 = *(void (**)(uint64_t, uint64_t))(v0 + 184);
    v9 = *(_QWORD *)(v0 + 160);
    v10 = *(_QWORD *)(v0 + 104);

    v8(v9, v10);
    swift_bridgeObjectRelease();
    v4 = MEMORY[0x24BEE4AF8];
  }
  *(_QWORD *)(v0 + 224) = v4;
  v11 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v12 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 208)) + 0xF8))();
  if (v12)
  {
    v13 = v12;
    v14 = (*(uint64_t (**)(void))((*v11 & *v12) + 0x60))();

  }
  else
  {
    Logger.init()();
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_2282CC000, v15, v16, "Received nil document classes. Defaulting to empty list", v17, 2u);
      MEMORY[0x22E2B117C](v17, -1, -1);
    }
    v18 = *(void (**)(uint64_t, uint64_t))(v0 + 184);
    v19 = *(_QWORD *)(v0 + 152);
    v20 = *(_QWORD *)(v0 + 104);

    v18(v19, v20);
    v14 = MEMORY[0x24BEE4AF8];
  }
  v21 = *(void **)(v0 + 80);
  v184 = v14;
  *(_QWORD *)(v0 + 232) = v14;
  v22 = *(void **)(v0 + 176);
  Logger.init()();
  v23 = v22;
  v24 = v21;
  v25 = v23;
  v26 = v24;
  v27 = Logger.logObject.getter();
  v28 = static os_log_type_t.debug.getter();
  v185 = (_QWORD *)v0;
  v183 = v4;
  if (os_log_type_enabled(v27, v28))
  {
    v186 = v28;
    v188 = v27;
    v29 = *(_QWORD **)(v0 + 176);
    v30 = *(_QWORD **)(v0 + 80);
    v31 = swift_slowAlloc();
    v180 = swift_slowAlloc();
    v193 = v180;
    *(_DWORD *)v31 = 136315394;
    v32 = (_QWORD *)MEMORY[0x24BEE4EA0];
    v33 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v30) + 0x88))();
    v34 = (*(uint64_t (**)(void))((*v32 & *v33) + 0x90))();
    v36 = v35;

    *(_QWORD *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v36, (uint64_t *)&v193);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v31 + 12) = 2080;
    (*(void (**)(void))((*MEMORY[0x24BEE4EA0] & *v29) + 0x88))();
    if (v37)
    {
      v38 = specialized Collection.prefix(_:)(256);
      v40 = v39;
      v42 = v41;
      v44 = v43;
      swift_bridgeObjectRelease();
    }
    else
    {
      v38 = MEMORY[0x22E2AFDA8](0x5F747865745F6F6ELL, 0xED0000646E756F66);
      v40 = v50;
      v42 = v51;
      v44 = v52;
    }
    v53 = *(void **)(v0 + 176);
    v54 = *(void (**)(uint64_t, _QWORD))(v0 + 184);
    *(_QWORD *)type = *(_QWORD *)(v0 + 104);
    v178 = *(_QWORD *)(v0 + 144);
    v55 = MEMORY[0x22E2AF988](v38, v40, v42, v44);
    v57 = v56;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v57, (uint64_t *)&v193);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_2282CC000, v188, v186, "(SpotlightDocumentTaggingUpdateHandler) For document %s, received content prefix %s", (uint8_t *)v31, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x22E2B117C](v180, -1, -1);
    MEMORY[0x22E2B117C](v31, -1, -1);

    v54(v178, *(_QWORD *)type);
    v4 = v183;
  }
  else
  {
    v45 = *(void **)(v0 + 176);
    v46 = *(void (**)(uint64_t, uint64_t))(v0 + 184);
    v47 = *(_QWORD *)(v0 + 144);
    v48 = *(_QWORD *)(v0 + 104);
    v49 = *(void **)(v0 + 80);

    v46(v47, v48);
  }
  v58 = v4 >> 62;
  if (!(v4 >> 62))
  {
    if (*(uint64_t *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10) >= 5)
      v59 = 5;
    else
      v59 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    goto LABEL_22;
  }
LABEL_86:
  swift_bridgeObjectRetain_n();
  v71 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v63 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v63 < 0)
  {
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    if (v63 < 0)
      v71 = v63;
    else
      v71 = v63 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n();
    v168 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v169 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v169 < 0)
      goto LABEL_104;
    if (v168 >= 5)
      v170 = 5;
    else
      v170 = v168;
    if (v168 >= 0)
      v117 = v170;
    else
      v117 = 5;
    swift_bridgeObjectRetain();
    v71 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v71 >= v117)
      goto LABEL_57;
    __break(1u);
LABEL_101:
    __break(1u);
LABEL_102:
    __break(1u);
    goto LABEL_103;
  }
  while (1)
  {
    if (v71 >= 5)
      v171 = 5;
    else
      v171 = v71;
    if (v71 >= 0)
      v59 = v171;
    else
      v59 = 5;
    swift_bridgeObjectRetain();
    v172 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v172 < v59)
      __break(1u);
    v0 = (uint64_t)v185;
    v4 = v183;
LABEL_22:
    if ((v4 & 0xC000000000000001) != 0 && v59 != 0)
    {
      type metadata accessor for DUTopicResult();
      v61 = 0;
      do
      {
        v62 = v61 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v61);
        v61 = v62;
      }
      while (v59 != v62);
    }
    if (v58)
    {
      swift_bridgeObjectRetain();
      v58 = _CocoaArrayWrapper.subscript.getter();
      v64 = v66;
      v63 = v67;
      v65 = v68;
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v63 = 0;
      v58 = v4 & 0xFFFFFFFFFFFFFF8;
      v64 = (v4 & 0xFFFFFFFFFFFFFF8) + 32;
      v65 = (2 * v59) | 1;
    }
    v69 = v65 >> 1;
    v70 = (v65 >> 1) - v63;
    if (__OFSUB__(v65 >> 1, v63))
      goto LABEL_88;
    if (v70)
    {
      v193 = MEMORY[0x24BEE4AF8];
      v71 = (uint64_t)&v193;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v70 & ~(v70 >> 63), 0);
      if (v70 < 0)
        goto LABEL_102;
      v189 = v193;
      if (v63 <= v69)
        v72 = v69;
      else
        v72 = v63;
      v58 = v72 - v63;
      v0 = v64 + 8 * v63;
      v73 = MEMORY[0x24BEE0D00];
      while (2)
      {
        if (!v58)
        {
          __break(1u);
          goto LABEL_85;
        }
        v74 = *(_QWORD **)v0;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        v75 = swift_allocObject();
        *(_OWORD *)(v75 + 16) = xmmword_2284C25C0;
        v76 = (_QWORD *)MEMORY[0x24BEE4EA0];
        v77 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v74) + 0x88);
        v78 = v74;
        v79 = v77();
        v81 = v80;
        *(_QWORD *)(v75 + 56) = v73;
        v82 = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v75 + 64) = v82;
        *(_QWORD *)(v75 + 32) = v79;
        *(_QWORD *)(v75 + 40) = v81;
        v83 = (_QWORD *)(*(uint64_t (**)(void))((*v76 & *v78) + 0xB8))();
        if (v83[2])
        {
          v84 = v83[4];
          v85 = v83[5];
          swift_bridgeObjectRetain();
          v86 = swift_bridgeObjectRelease();
          v87 = (_QWORD *)(v75 + 72);
          *(_QWORD *)(v75 + 96) = v73;
          *(_QWORD *)(v75 + 104) = v82;
          if (v85)
          {
            *v87 = v84;
            goto LABEL_44;
          }
        }
        else
        {
          v86 = swift_bridgeObjectRelease();
          v87 = (_QWORD *)(v75 + 72);
          *(_QWORD *)(v75 + 96) = v73;
          *(_QWORD *)(v75 + 104) = v82;
        }
        *v87 = 0;
        v85 = 0xE000000000000000;
LABEL_44:
        *(_QWORD *)(v75 + 80) = v85;
        v88 = (*(double (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v78) + 0xA0))(v86);
        *(_QWORD *)(v75 + 136) = MEMORY[0x24BEE13C8];
        *(_QWORD *)(v75 + 144) = MEMORY[0x24BEE1448];
        *(double *)(v75 + 112) = v88;
        v89 = String.init(format:_:)();
        v91 = v90;

        v92 = v189;
        v193 = v189;
        v94 = *(_QWORD *)(v189 + 16);
        v93 = *(_QWORD *)(v189 + 24);
        if (v94 >= v93 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v93 > 1, v94 + 1, 1);
          v92 = v193;
        }
        *(_QWORD *)(v92 + 16) = v94 + 1;
        v189 = v92;
        v95 = v92 + 16 * v94;
        *(_QWORD *)(v95 + 32) = v89;
        *(_QWORD *)(v95 + 40) = v91;
        --v58;
        v0 += 8;
        if (!--v70)
        {
          swift_unknownObjectRelease();
          v0 = (uint64_t)v185;
          v96 = v189;
          goto LABEL_49;
        }
        continue;
      }
    }
    swift_unknownObjectRelease();
    v96 = MEMORY[0x24BEE4AF8];
LABEL_49:
    v97 = (uint64_t *)(v0 + 48);
    v98 = *(void **)(v0 + 80);
    *(_QWORD *)(v0 + 16) = v96;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    v99 = BidirectionalCollection<>.joined(separator:)();
    v100 = (_QWORD *)v0;
    v58 = v101;
    swift_bridgeObjectRelease();
    Logger.init()();
    v102 = v98;
    swift_bridgeObjectRetain();
    v103 = Logger.logObject.getter();
    v104 = static os_log_type_t.debug.getter();
    v105 = os_log_type_enabled(v103, v104);
    v71 = *(_QWORD *)(v0 + 184);
    v106 = *(_QWORD *)(v0 + 136);
    v107 = v100[13];
    v108 = (_QWORD *)v100[10];
    if (v105)
    {
      v173 = v99;
      v109 = v100 + 7;
      v190 = v106;
      v110 = v97;
      v111 = swift_slowAlloc();
      v174 = swift_slowAlloc();
      v193 = v174;
      *(_DWORD *)v111 = 136315394;
      typea = (void (*)(uint64_t, uint64_t))v71;
      v179 = v107;
      v112 = (_QWORD *)MEMORY[0x24BEE4EA0];
      v113 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v108) + 0x88))();
      v114 = (*(uint64_t (**)(void))((*v112 & *v113) + 0x90))();
      v116 = v115;

      *v110 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v114, v116, (uint64_t *)&v193);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      *(_WORD *)(v111 + 12) = 2080;
      swift_bridgeObjectRetain();
      *v109 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v173, v58, (uint64_t *)&v193);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_2282CC000, v103, v104, "(SpotlightDocumentTaggingUpdateHandler) For document %s, received top topics %s", (uint8_t *)v111, 0x16u);
      v71 = v174;
      swift_arrayDestroy();
      MEMORY[0x22E2B117C](v174, -1, -1);
      MEMORY[0x22E2B117C](v111, -1, -1);

      typea(v190, v179);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      ((void (*)(uint64_t, uint64_t))v71)(v106, v107);
    }
    v63 = v184;
    v0 = v184 >> 62;
    if (v184 >> 62)
      goto LABEL_89;
    if (*(uint64_t *)((v184 & 0xFFFFFFFFFFFFF8) + 0x10) >= 5)
      v117 = 5;
    else
      v117 = *(_QWORD *)((v184 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
LABEL_57:
    if ((v63 & 0xC000000000000001) != 0 && v117)
    {
      v71 = type metadata accessor for DUCategoryResult();
      v118 = 0;
      do
      {
        v119 = v118 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v118);
        v118 = v119;
      }
      while (v117 != v119);
    }
    if (v0)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.subscript.getter();
      v121 = v122;
      v120 = v123;
      v71 = v124;
      swift_bridgeObjectRelease_n();
      v117 = (unint64_t)v71 >> 1;
    }
    else
    {
      v120 = 0;
      v121 = (v63 & 0xFFFFFFFFFFFFFF8) + 32;
    }
    v0 = v117 - v120;
    if (__OFSUB__(v117, v120))
      goto LABEL_101;
    if (!v0)
      break;
    v193 = MEMORY[0x24BEE4AF8];
    v71 = (uint64_t)&v193;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v0 & ~(v0 >> 63), 0);
    if ((v0 & 0x8000000000000000) == 0)
    {
      v58 = v193;
      if (v117 <= v120)
        v125 = v120;
      else
        v125 = v117;
      v126 = v125 - v120;
      v127 = (_QWORD **)(v121 + 8 * v120);
      while (v126)
      {
        v128 = *v127;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        v129 = swift_allocObject();
        *(_OWORD *)(v129 + 16) = xmmword_2284C0D00;
        v130 = (_QWORD *)MEMORY[0x24BEE4EA0];
        v131 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v128) + 0x60);
        v132 = v128;
        v133 = v131();
        v135 = v134;
        *(_QWORD *)(v129 + 56) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v129 + 64) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v129 + 32) = v133;
        *(_QWORD *)(v129 + 40) = v135;
        v136 = (*(double (**)(void))((*v130 & *v132) + 0x78))();
        *(_QWORD *)(v129 + 96) = MEMORY[0x24BEE13C8];
        *(_QWORD *)(v129 + 104) = MEMORY[0x24BEE1448];
        *(double *)(v129 + 72) = v136;
        v137 = String.init(format:_:)();
        v139 = v138;

        v193 = v58;
        v141 = *(_QWORD *)(v58 + 16);
        v140 = *(_QWORD *)(v58 + 24);
        if (v141 >= v140 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v140 > 1, v141 + 1, 1);
          v58 = v193;
        }
        *(_QWORD *)(v58 + 16) = v141 + 1;
        v142 = v58 + 16 * v141;
        *(_QWORD *)(v142 + 32) = v137;
        *(_QWORD *)(v142 + 40) = v139;
        --v126;
        ++v127;
        if (!--v0)
        {
          swift_unknownObjectRelease();
          goto LABEL_77;
        }
      }
LABEL_85:
      __break(1u);
      goto LABEL_86;
    }
LABEL_103:
    __break(1u);
LABEL_104:
    __break(1u);
  }
  swift_unknownObjectRelease();
  v58 = MEMORY[0x24BEE4AF8];
LABEL_77:
  v143 = v185;
  v144 = (void *)v185[10];
  v185[3] = v58;
  v145 = BidirectionalCollection<>.joined(separator:)();
  v147 = v146;
  swift_bridgeObjectRelease();
  Logger.init()();
  v148 = v144;
  swift_bridgeObjectRetain();
  v149 = Logger.logObject.getter();
  v150 = static os_log_type_t.debug.getter();
  v151 = os_log_type_enabled(v149, v150);
  v152 = (void (*)(uint64_t, uint64_t))v185[23];
  v153 = v185[16];
  v154 = v185[13];
  v155 = (_QWORD *)v185[10];
  if (v151)
  {
    v191 = v185[13];
    v156 = swift_slowAlloc();
    v181 = swift_slowAlloc();
    v193 = v181;
    *(_DWORD *)v156 = 136315394;
    v187 = v153;
    v157 = (_QWORD *)MEMORY[0x24BEE4EA0];
    v182 = v152;
    v158 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v155) + 0x88))();
    v159 = (*(uint64_t (**)(void))((*v157 & *v158) + 0x90))();
    typeb = v150;
    v161 = v160;

    v185[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v159, v161, (uint64_t *)&v193);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v143 = v185;
    swift_bridgeObjectRelease();

    *(_WORD *)(v156 + 12) = 2080;
    swift_bridgeObjectRetain();
    v185[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v145, v147, (uint64_t *)&v193);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_2282CC000, v149, typeb, "(SpotlightDocumentTaggingUpdateHandler) For document %s, received top categories %s", (uint8_t *)v156, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x22E2B117C](v181, -1, -1);
    MEMORY[0x22E2B117C](v156, -1, -1);

    v182(v187, v191);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    v152(v153, v154);
    v157 = (_QWORD *)MEMORY[0x24BEE4EA0];
  }
  v162 = *(_QWORD **)(v143[12]
                    + OBJC_IVAR____TtC21DocumentUnderstanding37SpotlightDocumentTaggingUpdateHandler_spotlightOutputSink);
  if (*((_BYTE *)v143 + 272) == 1)
  {
    v163 = *(int **)((*v157 & *v162) + 0x60);
    v192 = (int *)((char *)v163 + *v163);
    v164 = (_QWORD *)swift_task_alloc();
    v143[30] = v164;
    v165 = SpotlightDocumentTaggingUpdateHandler.handleDocumentUpdate(documentUpdate:searchableItem:isFile:);
  }
  else
  {
    v166 = *(int **)((*v157 & *v162) + 0x68);
    v192 = (int *)((char *)v166 + *v166);
    v164 = (_QWORD *)swift_task_alloc();
    v143[32] = v164;
    v165 = SpotlightDocumentTaggingUpdateHandler.handleDocumentUpdate(documentUpdate:searchableItem:isFile:);
  }
  *v164 = v143;
  v164[1] = v165;
  return ((uint64_t (*)(_QWORD, unint64_t, unint64_t, uint64_t))v192)(v143[11], v183, v184, 1);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 248) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 264) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 192);
  v2 = *(void **)(v0 + 176);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 192);
  v2 = *(void **)(v0 + 176);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 192);
  v2 = *(void **)(v0 + 176);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 176);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t SpotlightDocumentTaggingUpdateHandler.handleDocumentUpdate(documentUpdate:searchableItem:isFile:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 208) = a1;
  *(_QWORD *)(v3 + 216) = v1;
  swift_task_dealloc();
  if (!v1)

  return swift_task_switch();
}

id SpotlightDocumentTaggingUpdateHandler.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void SpotlightDocumentTaggingUpdateHandler.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SpotlightDocumentTaggingUpdateHandler.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SpotlightDocumentTaggingUpdateHandler();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t DUStructuredExtractionLocalImplementation.__allocating_init()()
{
  return swift_allocObject();
}

unint64_t static DUStructuredExtractionLocalImplementation.implementationID.getter()
{
  return 0xD00000000000002ALL;
}

uint64_t static DUStructuredExtractionLocalImplementation.specification.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for DUStructuredExtractionSpecification();
  result = swift_allocObject();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for DUStructuredExtractionSpecification;
  *a1 = result;
  return result;
}

void *static DUStructuredExtractionLocalImplementation.implementationAttributes.getter()
{
  return &outlined read-only object #0 of static DUStructuredExtractionLocalImplementation.implementationAttributes.getter;
}

uint64_t DUStructuredExtractionLocalImplementation.runTypedOnRequest(request:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[8] = a1;
  v2[9] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CalendarEvent?);
  v2[10] = swift_task_alloc();
  v3 = type metadata accessor for CalendarEvent(0);
  v2[11] = v3;
  v2[12] = *(_QWORD *)(v3 - 8);
  v2[13] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[14] = swift_task_alloc();
  v4 = type metadata accessor for DUStructuredExtractionResult(0);
  v2[15] = v4;
  v2[16] = *(_QWORD *)(v4 - 8);
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t DUStructuredExtractionLocalImplementation.runTypedOnRequest(request:)()
{
  char **v0;
  _QWORD *v1;
  void *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char **v7;
  unint64_t v8;
  _QWORD *v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  Swift::Int v19;
  id v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  char v27;
  void *v28;
  uint64_t *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t, char *);
  _QWORD *v42;
  _OWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  id v48;
  void *v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  void *v60;
  id v61;
  id v62;
  id v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  char isUniquelyReferenced_nonNull_native;
  char v70;
  unint64_t v71;
  uint64_t v72;
  _BOOL8 v73;
  uint64_t v74;
  char v75;
  unint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  id v84;
  void *v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  void *v93;
  uint64_t v94;
  id v95;
  _QWORD *v96;
  unint64_t v97;
  char v98;
  char v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  id v105;
  id v106;
  id v107;
  id v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  char v114;
  unint64_t v115;
  uint64_t v116;
  _BOOL8 v117;
  uint64_t v118;
  char v119;
  unint64_t v120;
  char v121;
  unint64_t v122;
  char v123;
  char v124;
  uint64_t *v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  id v129;
  id v130;
  id v131;
  id v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  char v138;
  unint64_t v139;
  uint64_t v140;
  _BOOL8 v141;
  uint64_t v142;
  char v143;
  unint64_t v144;
  char v145;
  unint64_t v146;
  char v147;
  char v148;
  uint64_t *v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  id v153;
  id v154;
  id v155;
  id v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char v161;
  char v162;
  unint64_t v163;
  uint64_t v164;
  _BOOL8 v165;
  uint64_t v166;
  char v167;
  unint64_t v168;
  char v169;
  unint64_t v170;
  char v171;
  char v172;
  uint64_t *v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  id v177;
  id v178;
  id v179;
  id v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char v185;
  char v186;
  unint64_t v187;
  uint64_t v188;
  _BOOL8 v189;
  uint64_t v190;
  char v191;
  unint64_t v192;
  char v193;
  unint64_t v194;
  char v195;
  char v196;
  uint64_t *v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  id v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v210;
  unint64_t v211;
  void *v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  uint64_t v218;
  id v219;
  void *v220;
  unint64_t v221;
  void *v222;
  char *v223;
  uint64_t *v224;
  int *v225;
  _OWORD *v226;
  void (*v227)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v228;
  uint64_t v229;
  char *v230;
  uint64_t v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  void *v237;
  char *v238;

  v1 = (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v0[8] + 136))();
  if (v1)
  {
    v2 = v1;
    v3 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v1) + 0xD8))();
    if (v3)
    {
      v4 = v3;
      v212 = v2;
      v217 = v3;
      v214 = v3 & 0xFFFFFFFFFFFFFF8;
      if (v3 >> 62)
        goto LABEL_181;
      v5 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v5)
      {
        while (1)
        {
          v6 = 0;
          v216 = v4 & 0xC000000000000001;
          v213 = v4 + 32;
          v226 = v0[18] + 32;
          v233 = MEMORY[0x24BEE4AF8];
          v223 = v0[16];
          v225 = (int *)v0[15];
          v230 = v0[12];
          v222 = (void *)*MEMORY[0x24BDD12B8];
          v218 = *MEMORY[0x24BE2B1E8];
          v7 = &selRef_e1946_;
          v215 = v5;
          v224 = (uint64_t *)v0;
          v238 = v0[18];
          while (1)
          {
            if (v216)
            {
              v8 = v6;
              v9 = (_QWORD *)MEMORY[0x22E2AFF34](v6, v4);
              v10 = __OFADD__(v8, 1);
              v11 = v8 + 1;
              if (v10)
                goto LABEL_169;
            }
            else
            {
              if (v6 >= *(_QWORD *)(v214 + 16))
                goto LABEL_170;
              v12 = v6;
              v9 = *(id *)(v213 + 8 * v6);
              v10 = __OFADD__(v12, 1);
              v11 = v12 + 1;
              if (v10)
                goto LABEL_169;
            }
            v221 = v11;
            v220 = v9;
            v13 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v9) + 0xB0))();
            if (v14)
              break;
LABEL_7:

            v6 = v221;
            v4 = v217;
            if (v221 == v215)
              goto LABEL_183;
          }
          v0[2] = (char *)v13;
          v0[3] = v14;
          v0[4] = (char *)10;
          v0[5] = (char *)0xE100000000000000;
          v0[6] = (char *)32;
          v0[7] = (char *)0xE100000000000000;
          v211 = lazy protocol witness table accessor for type String and conformance String();
          v210 = MEMORY[0x24BEE0D00];
          v15 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
          v17 = v16;
          swift_bridgeObjectRelease();
          v219 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE2B378]), sel_initWithScannerType_passiveIntent_, 0, 1, v210, v211, v211, v211);
          v18 = (void *)MEMORY[0x22E2AF8EC](v15, v17);
          v19 = (v17 & 0x1000000000000000) != 0
              ? String.UTF16View._foreignCount()()
              : String.UTF16View._nativeGetOffset(for:)();
          v20 = objc_msgSend((id)objc_opt_self(), sel_scanString_range_configuration_, v18, 0, v19, v219);

          type metadata accessor for DDScannerResult();
          v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          if (!(v21 >> 62))
            break;
          swift_bridgeObjectRetain();
          v22 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v22)
            goto LABEL_6;
LABEL_19:
          v23 = 0;
          v234 = v21 & 0xC000000000000001;
          v231 = v22;
          v232 = v21;
          while (1)
          {
            v24 = v234 ? (id)MEMORY[0x22E2AFF34](v23, v21) : *(id *)(v21 + 8 * v23 + 32);
            v25 = v24;
            v26 = v23 + 1;
            if (__OFADD__(v23, 1))
              break;
            objc_msgSend(v24, v7[222]);
            Range<>.init(_:in:)();
            if ((v27 & 1) == 0)
            {
              v235 = v23;
              v236 = v23 + 1;
              v28 = v25;
              v29 = (uint64_t *)v0[18];
              v30 = v0[11];
              v31 = String.subscript.getter();
              v32 = MEMORY[0x22E2AF988](v31);
              v34 = v33;
              swift_bridgeObjectRelease();
              v35 = objc_msgSend(v28, sel_type);
              v229 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              v37 = v36;

              v237 = v28;
              v0 = (char **)objc_msgSend(v28, sel_category);
              *((_QWORD *)v238 + 2) = 0;
              *((_QWORD *)v238 + 3) = 0xE000000000000000;
              *v226 = 0u;
              v226[1] = 0u;
              v226[2] = 0u;
              v226[3] = 0u;
              v38 = (char *)v29 + v225[10];
              v39 = type metadata accessor for URL();
              v227 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56);
              v228 = (uint64_t)v38;
              v227(v38, 1, 1, v39);
              *(uint64_t *)((char *)v29 + v225[11]) = 0;
              v40 = (uint64_t)v29 + v225[12];
              v41 = (void (*)(uint64_t, uint64_t, uint64_t, char *))*((_QWORD *)v230 + 7);
              v41(v40, 1, 1, v30);
              v42 = (uint64_t *)((char *)v29 + v225[13]);
              *v42 = 0;
              v42[1] = 0;
              v43 = (_OWORD *)((char *)v29 + v225[14]);
              *v43 = 0u;
              v43[1] = 0u;
              v44 = (uint64_t *)((char *)v29 + v225[15]);
              *v44 = 0;
              v44[1] = 0;
              *((_BYTE *)v29 + v225[16]) = 0;
              *v29 = v32;
              *((_QWORD *)v238 + 1) = v34;
              switch((int)v0)
              {
                case 1:
                  *((_QWORD *)v238 + 2) = 7107189;
                  *((_QWORD *)v238 + 3) = 0xE300000000000000;
                  if (!v218)
                  {
                    __break(1u);
                    JUMPOUT(0x228433D10);
                  }
                  v22 = v231;
                  v21 = v232;
                  v26 = v236;
                  if (v229 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v37 == v45)
                  {
                    swift_bridgeObjectRelease_n();
                    v46 = v237;
LABEL_49:
                    v84 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDC6CC0]), sel_initWithDDScannerResult_, v46);
                    v7 = &selRef_e1946_;
                    if (v84)
                    {
                      v85 = v84;
                      v86 = objc_msgSend(v84, sel_emailAddress);
                      v87 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                      v89 = v88;

                      *((_QWORD *)v238 + 10) = v87;
                      *((_QWORD *)v238 + 11) = v89;
                      v0 = (char **)v224;
                      goto LABEL_156;
                    }
                  }
                  else
                  {
                    v83 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    v46 = v237;
                    if ((v83 & 1) != 0)
                      goto LABEL_49;
                    v92 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDC6CD0]), sel_initWithDDScannerResult_, v237);
                    v7 = &selRef_e1946_;
                    if (v92)
                    {
                      v93 = v92;
                      v0 = (char **)v224;
                      v94 = v224[14];
                      v95 = objc_msgSend(v92, sel_URL);
                      static URL._unconditionallyBridgeFromObjectiveC(_:)();

                      v227((char *)v94, 0, 1, v39);
                      outlined assign with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v94, v228, &demangling cache variable for type metadata for URL?);
                      goto LABEL_156;
                    }
                  }
                  v0 = (char **)v224;
                  v101 = v224[18];

                  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v101, type metadata accessor for DUStructuredExtractionResult);
                  goto LABEL_67;
                case 2:
                  swift_bridgeObjectRelease();
                  *((_QWORD *)v238 + 2) = 0x656E6F6870;
                  *((_QWORD *)v238 + 3) = 0xE500000000000000;
                  v48 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDC6CD8]), sel_initWithDDScannerResult_, v237);
                  v22 = v231;
                  v21 = v232;
                  v26 = v236;
                  if (v48)
                  {
                    v49 = v48;
                    v50 = objc_msgSend(v48, sel_phoneNumber);
                    v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                    v53 = v52;

                    *((_QWORD *)v238 + 6) = v51;
                    *((_QWORD *)v238 + 7) = v53;
                    v54 = objc_msgSend(v49, sel_label);
                    v7 = &selRef_e1946_;
                    if (v54)
                    {
                      v55 = v54;
                      v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                      v58 = v57;

                    }
                    else
                    {

                      v56 = 0;
                      v58 = 0;
                    }
                    *((_QWORD *)v238 + 8) = v56;
                    *((_QWORD *)v238 + 9) = v58;
                    v0 = (char **)v224;
                    goto LABEL_156;
                  }
                  v0 = (char **)v224;
                  v90 = v224[18];

                  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v90, type metadata accessor for DUStructuredExtractionResult);
                  v7 = &selRef_e1946_;
LABEL_67:
                  v23 = v235;
                  goto LABEL_21;
                case 3:
                  swift_bridgeObjectRelease();
                  *((_QWORD *)v238 + 2) = 0x73736572646461;
                  *((_QWORD *)v238 + 3) = 0xE700000000000000;
                  v59 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDC6CE0]), sel_initWithDDScannerResult_, v237);
                  v22 = v231;
                  v21 = v232;
                  v23 = v235;
                  v26 = v236;
                  if (!v59)
                  {
                    v0 = (char **)v224;
                    v91 = v224[18];

                    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v91, type metadata accessor for DUStructuredExtractionResult);
                    v7 = &selRef_e1946_;
                    goto LABEL_21;
                  }
                  v60 = v59;
                  v61 = objc_msgSend(v59, sel_street);
                  if (!v61)
                  {
                    v68 = (_QWORD *)MEMORY[0x24BEE4B00];
                    goto LABEL_73;
                  }

                  v62 = v222;
                  v63 = objc_msgSend(v60, sel_street);
                  if (v63)
                  {
                    v64 = v63;
                    v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                    v67 = v66;

                    v68 = (_QWORD *)MEMORY[0x24BEE4B00];
                    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                    v71 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v62);
                    v72 = v68[2];
                    v73 = (v70 & 1) == 0;
                    v74 = v72 + v73;
                    if (__OFADD__(v72, v73))
                      goto LABEL_171;
                    v75 = v70;
                    if (v68[3] >= v74)
                    {
                      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
                      {
                        if ((v70 & 1) == 0)
                          goto LABEL_70;
                      }
                      else
                      {
                        specialized _NativeDictionary.copy()();
                        if ((v75 & 1) == 0)
                          goto LABEL_70;
                      }
                    }
                    else
                    {
                      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v74, isUniquelyReferenced_nonNull_native);
                      v76 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v62);
                      if ((v75 & 1) != (v77 & 1))
                        goto LABEL_167;
                      v71 = v76;
                      if ((v75 & 1) == 0)
                      {
LABEL_70:
                        v68[(v71 >> 6) + 8] |= 1 << v71;
                        *(_QWORD *)(v68[6] + 8 * v71) = v62;
                        v102 = (uint64_t *)(v68[7] + 16 * v71);
                        *v102 = v65;
                        v102[1] = v67;
                        v103 = v68[2];
                        v10 = __OFADD__(v103, 1);
                        v104 = v103 + 1;
                        if (v10)
                          goto LABEL_176;
                        v68[2] = v104;
                        v105 = v62;
                        goto LABEL_72;
                      }
                    }
                    v100 = (uint64_t *)(v68[7] + 16 * v71);
                    swift_bridgeObjectRelease();
                    *v100 = v65;
                    v100[1] = v67;
LABEL_72:
                    swift_bridgeObjectRelease();

                    v22 = v231;
                    v21 = v232;
                    goto LABEL_73;
                  }
                  v96 = (_QWORD *)MEMORY[0x24BEE4B00];
                  swift_bridgeObjectRetain();
                  v97 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v62);
                  v99 = v98;
                  swift_bridgeObjectRelease();
                  if ((v99 & 1) != 0)
                  {
                    v68 = v96;
                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                    {
                      specialized _NativeDictionary.copy()();
                      v68 = v96;
                    }

                    specialized _NativeDictionary._delete(at:)(v97, (uint64_t)v68);
                    swift_bridgeObjectRelease();

                    swift_bridgeObjectRelease();
                  }
                  else
                  {

                    v68 = v96;
                  }
LABEL_73:
                  v0 = &selRef_e1946_;
                  v106 = objc_msgSend(v60, sel_city);
                  if (!v106)
                    goto LABEL_88;

                  v107 = v222;
                  v108 = objc_msgSend(v60, sel_city);
                  if (v108)
                  {
                    v109 = v108;
                    v110 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                    v112 = v111;

                    v113 = swift_isUniquelyReferenced_nonNull_native();
                    v115 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v107);
                    v116 = v68[2];
                    v117 = (v114 & 1) == 0;
                    v118 = v116 + v117;
                    if (__OFADD__(v116, v117))
                      goto LABEL_172;
                    v119 = v114;
                    if (v68[3] >= v118)
                    {
                      if ((v113 & 1) != 0)
                      {
                        if ((v114 & 1) == 0)
                          goto LABEL_90;
                      }
                      else
                      {
                        specialized _NativeDictionary.copy()();
                        if ((v119 & 1) == 0)
                          goto LABEL_90;
                      }
                    }
                    else
                    {
                      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v118, v113);
                      v120 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v107);
                      if ((v119 & 1) != (v121 & 1))
                        goto LABEL_167;
                      v115 = v120;
                      if ((v119 & 1) == 0)
                      {
LABEL_90:
                        v68[(v115 >> 6) + 8] |= 1 << v115;
                        *(_QWORD *)(v68[6] + 8 * v115) = v107;
                        v126 = (uint64_t *)(v68[7] + 16 * v115);
                        *v126 = v110;
                        v126[1] = v112;
                        v127 = v68[2];
                        v10 = __OFADD__(v127, 1);
                        v128 = v127 + 1;
                        if (v10)
                          goto LABEL_177;
                        v68[2] = v128;
                        v129 = v107;
                        goto LABEL_92;
                      }
                    }
                    v125 = (uint64_t *)(v68[7] + 16 * v115);
                    swift_bridgeObjectRelease();
                    *v125 = v110;
                    v125[1] = v112;
LABEL_92:
                    swift_bridgeObjectRelease();

                    v0 = &selRef_e1946_;
                    v22 = v231;
                    v21 = v232;
                    goto LABEL_93;
                  }
                  swift_bridgeObjectRetain();
                  v122 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v107);
                  v124 = v123;
                  swift_bridgeObjectRelease();
                  if ((v124 & 1) != 0)
                  {
                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                      specialized _NativeDictionary.copy()();

                    specialized _NativeDictionary._delete(at:)(v122, (uint64_t)v68);
                    swift_bridgeObjectRelease();

                    swift_bridgeObjectRelease();
                  }
                  else
                  {

                  }
LABEL_88:
                  v0 = &selRef_e1946_;
LABEL_93:
                  v130 = objc_msgSend(v60, v0[225]);
                  if (!v130)
                    goto LABEL_108;

                  v131 = v222;
                  v132 = objc_msgSend(v60, v0[225]);
                  if (v132)
                  {
                    v133 = v132;
                    v134 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                    v136 = v135;

                    v137 = swift_isUniquelyReferenced_nonNull_native();
                    v139 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v131);
                    v140 = v68[2];
                    v141 = (v138 & 1) == 0;
                    v142 = v140 + v141;
                    if (__OFADD__(v140, v141))
                      goto LABEL_173;
                    v143 = v138;
                    if (v68[3] >= v142)
                    {
                      if ((v137 & 1) != 0)
                      {
                        if ((v138 & 1) == 0)
                          goto LABEL_110;
                      }
                      else
                      {
                        specialized _NativeDictionary.copy()();
                        if ((v143 & 1) == 0)
                          goto LABEL_110;
                      }
                    }
                    else
                    {
                      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v142, v137);
                      v144 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v131);
                      if ((v143 & 1) != (v145 & 1))
                        goto LABEL_167;
                      v139 = v144;
                      if ((v143 & 1) == 0)
                      {
LABEL_110:
                        v68[(v139 >> 6) + 8] |= 1 << v139;
                        *(_QWORD *)(v68[6] + 8 * v139) = v131;
                        v150 = (uint64_t *)(v68[7] + 16 * v139);
                        *v150 = v134;
                        v150[1] = v136;
                        v151 = v68[2];
                        v10 = __OFADD__(v151, 1);
                        v152 = v151 + 1;
                        if (v10)
                          goto LABEL_178;
                        v68[2] = v152;
                        v153 = v131;
                        goto LABEL_112;
                      }
                    }
                    v149 = (uint64_t *)(v68[7] + 16 * v139);
                    swift_bridgeObjectRelease();
                    *v149 = v134;
                    v149[1] = v136;
LABEL_112:
                    swift_bridgeObjectRelease();

                    v0 = &selRef_e1946_;
                    v22 = v231;
                    v21 = v232;
                    goto LABEL_113;
                  }
                  swift_bridgeObjectRetain();
                  v146 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v131);
                  v148 = v147;
                  swift_bridgeObjectRelease();
                  if ((v148 & 1) != 0)
                  {
                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                      specialized _NativeDictionary.copy()();

                    specialized _NativeDictionary._delete(at:)(v146, (uint64_t)v68);
                    swift_bridgeObjectRelease();

                    swift_bridgeObjectRelease();
                  }
                  else
                  {

                  }
LABEL_108:
                  v0 = &selRef_e1946_;
LABEL_113:
                  v154 = objc_msgSend(v60, v0[226]);
                  if (!v154)
                    goto LABEL_128;

                  v155 = v222;
                  v156 = objc_msgSend(v60, v0[226]);
                  if (v156)
                  {
                    v157 = v156;
                    v158 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                    v160 = v159;

                    v161 = swift_isUniquelyReferenced_nonNull_native();
                    v163 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v155);
                    v164 = v68[2];
                    v165 = (v162 & 1) == 0;
                    v166 = v164 + v165;
                    if (__OFADD__(v164, v165))
                      goto LABEL_174;
                    v167 = v162;
                    if (v68[3] >= v166)
                    {
                      if ((v161 & 1) != 0)
                      {
                        if ((v162 & 1) == 0)
                          goto LABEL_130;
                      }
                      else
                      {
                        specialized _NativeDictionary.copy()();
                        if ((v167 & 1) == 0)
                          goto LABEL_130;
                      }
                    }
                    else
                    {
                      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v166, v161);
                      v168 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v155);
                      if ((v167 & 1) != (v169 & 1))
                        goto LABEL_167;
                      v163 = v168;
                      if ((v167 & 1) == 0)
                      {
LABEL_130:
                        v68[(v163 >> 6) + 8] |= 1 << v163;
                        *(_QWORD *)(v68[6] + 8 * v163) = v155;
                        v174 = (uint64_t *)(v68[7] + 16 * v163);
                        *v174 = v158;
                        v174[1] = v160;
                        v175 = v68[2];
                        v10 = __OFADD__(v175, 1);
                        v176 = v175 + 1;
                        if (v10)
                          goto LABEL_179;
                        v68[2] = v176;
                        v177 = v155;
                        goto LABEL_132;
                      }
                    }
                    v173 = (uint64_t *)(v68[7] + 16 * v163);
                    swift_bridgeObjectRelease();
                    *v173 = v158;
                    v173[1] = v160;
LABEL_132:
                    swift_bridgeObjectRelease();

                    v0 = &selRef_e1946_;
                    v22 = v231;
                    v21 = v232;
                    goto LABEL_133;
                  }
                  swift_bridgeObjectRetain();
                  v170 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v155);
                  v172 = v171;
                  swift_bridgeObjectRelease();
                  if ((v172 & 1) != 0)
                  {
                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                      specialized _NativeDictionary.copy()();

                    specialized _NativeDictionary._delete(at:)(v170, (uint64_t)v68);
                    swift_bridgeObjectRelease();

                    swift_bridgeObjectRelease();
                  }
                  else
                  {

                  }
LABEL_128:
                  v0 = &selRef_e1946_;
LABEL_133:
                  v178 = objc_msgSend(v60, v0[227]);
                  if (!v178)
                  {
                    swift_bridgeObjectRelease();

                    goto LABEL_155;
                  }

                  v179 = v222;
                  v180 = objc_msgSend(v60, v0[227]);
                  if (v180)
                  {
                    v181 = v180;
                    v182 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                    v184 = v183;

                    v185 = swift_isUniquelyReferenced_nonNull_native();
                    v187 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v179);
                    v188 = v68[2];
                    v189 = (v186 & 1) == 0;
                    v190 = v188 + v189;
                    if (__OFADD__(v188, v189))
                      goto LABEL_175;
                    v191 = v186;
                    if (v68[3] >= v190)
                    {
                      if ((v185 & 1) != 0)
                      {
                        if ((v186 & 1) == 0)
                          goto LABEL_151;
                      }
                      else
                      {
                        specialized _NativeDictionary.copy()();
                        if ((v191 & 1) == 0)
                          goto LABEL_151;
                      }
                    }
                    else
                    {
                      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v190, v185);
                      v192 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v179);
                      if ((v191 & 1) != (v193 & 1))
                      {
LABEL_167:
                        type metadata accessor for NSTextCheckingKey(0);
                        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                      }
                      v187 = v192;
                      if ((v191 & 1) == 0)
                      {
LABEL_151:
                        v68[(v187 >> 6) + 8] |= 1 << v187;
                        *(_QWORD *)(v68[6] + 8 * v187) = v179;
                        v198 = (uint64_t *)(v68[7] + 16 * v187);
                        *v198 = v182;
                        v198[1] = v184;
                        v199 = v68[2];
                        v10 = __OFADD__(v199, 1);
                        v200 = v199 + 1;
                        if (v10)
                          goto LABEL_180;
                        v68[2] = v200;
                        v201 = v179;
                        goto LABEL_153;
                      }
                    }
                    v197 = (uint64_t *)(v68[7] + 16 * v187);
                    swift_bridgeObjectRelease();
                    *v197 = v182;
                    v197[1] = v184;
LABEL_153:
                    swift_bridgeObjectRelease();

                    v22 = v231;
                    v21 = v232;
                    goto LABEL_154;
                  }
                  swift_bridgeObjectRetain();
                  v194 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v179);
                  v196 = v195;
                  swift_bridgeObjectRelease();
                  if ((v196 & 1) != 0)
                  {
                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                      specialized _NativeDictionary.copy()();

                    specialized _NativeDictionary._delete(at:)(v194, (uint64_t)v68);
                    swift_bridgeObjectRelease();

                    swift_bridgeObjectRelease();
                  }
                  else
                  {

                  }
LABEL_154:
                  swift_bridgeObjectRelease();
LABEL_155:
                  v0 = (char **)v224;
                  v7 = &selRef_e1946_;
LABEL_156:
                  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v0[18], (uint64_t)v0[17], type metadata accessor for DUStructuredExtractionResult);
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
                    v202 = v233;
                  else
                    v202 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v233 + 16) + 1, 1, v233);
                  v23 = v235;
                  v204 = *(_QWORD *)(v202 + 16);
                  v203 = *(_QWORD *)(v202 + 24);
                  if (v204 >= v203 >> 1)
                    v202 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v203 > 1, v204 + 1, 1, v202);
                  v205 = (uint64_t)v0[17];
                  v206 = (uint64_t)v0[18];
                  *(_QWORD *)(v202 + 16) = v204 + 1;
                  v233 = v202;
                  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v205, v202+ ((v223[80] + 32) & ~(unint64_t)v223[80])+ *((_QWORD *)v223 + 9) * v204, type metadata accessor for DUStructuredExtractionResult);

                  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v206, type metadata accessor for DUStructuredExtractionResult);
                  v26 = v236;
                  goto LABEL_21;
                case 4:
                  v0 = (char **)v224;
                  v78 = v224[10];
                  v79 = v224[11];
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRelease();
                  strcpy(v238 + 16, "calendarEvent");
                  *((_WORD *)v238 + 15) = -4864;
                  DUStructuredExtractionLocalImplementation.processCalendarResult(ddScannerResult:resultString:)(v237, v32, v34, v78);
                  swift_bridgeObjectRelease();
                  if ((*((unsigned int (**)(uint64_t, uint64_t, uint64_t))v230 + 6))(v78, 1, v79) != 1)
                  {
                    v81 = v224[13];
                    v82 = v224[11];
                    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v224[10], v81, type metadata accessor for CalendarEvent);
                    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v40, &demangling cache variable for type metadata for CalendarEvent?);
                    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v81, v40, type metadata accessor for CalendarEvent);
                    v41(v40, 0, 1, (char *)v82);
                    v7 = &selRef_e1946_;
                    v22 = v231;
                    v21 = v232;
                    goto LABEL_156;
                  }
                  v47 = v224[18];
                  v80 = v224[10];

                  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v80, &demangling cache variable for type metadata for CalendarEvent?);
LABEL_46:
                  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v47, type metadata accessor for DUStructuredExtractionResult);
                  v7 = &selRef_e1946_;
                  v22 = v231;
                  v21 = v232;
                  v23 = v235;
                  v26 = v236;
                  goto LABEL_21;
                default:
                  v0 = (char **)v224;
                  v47 = v224[18];
                  swift_bridgeObjectRelease();

                  goto LABEL_46;
              }
            }

LABEL_21:
            ++v23;
            if (v26 == v22)
              goto LABEL_6;
          }
          __break(1u);
LABEL_169:
          __break(1u);
LABEL_170:
          __break(1u);
LABEL_171:
          __break(1u);
LABEL_172:
          __break(1u);
LABEL_173:
          __break(1u);
LABEL_174:
          __break(1u);
LABEL_175:
          __break(1u);
LABEL_176:
          __break(1u);
LABEL_177:
          __break(1u);
LABEL_178:
          __break(1u);
LABEL_179:
          __break(1u);
LABEL_180:
          __break(1u);
LABEL_181:
          swift_bridgeObjectRetain();
          v5 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          v4 = v217;
          if (!v5)
            goto LABEL_182;
        }
        v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v22)
          goto LABEL_19;
LABEL_6:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        goto LABEL_7;
      }
LABEL_182:
      v233 = MEMORY[0x24BEE4AF8];
LABEL_183:
      swift_bridgeObjectRelease();
      v2 = v212;

      v207 = v233;
    }
    else
    {

      v207 = MEMORY[0x24BEE4AF8];
    }
  }
  else
  {
    v2 = 0;
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v207 = swift_allocError();
    *(_QWORD *)v208 = 0xD000000000000015;
    *(_QWORD *)(v208 + 8) = 0x80000002284DB0D0;
    *(_BYTE *)(v208 + 16) = 0;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return ((uint64_t (*)(uint64_t, BOOL))v0[1])(v207, v2 == 0);
}

uint64_t DUStructuredExtractionLocalImplementation.processCalendarResult(ddScannerResult:resultString:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  char v42;
  id v43;
  void *v44;
  id v45;
  uint64_t v46;
  void *v47;
  _BYTE *v48;
  uint64_t v49;
  void (*v50)(_BYTE *, uint64_t, uint64_t);
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v53)(uint64_t, uint64_t, uint64_t);
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t result;
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  void (*v77)(unint64_t, _QWORD, uint64_t);
  uint64_t v78;
  BOOL *v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  id v97;
  void *v98;
  void (*v99)(uint64_t, _BYTE *, uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  BOOL *v103;
  char v104;
  _BYTE *v105;
  uint64_t v106;
  id v107;
  void *v108;
  _BYTE *v109;
  uint64_t v110;
  _BYTE *v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v115;
  void *v116;
  _BYTE *v117;
  uint64_t v118;
  void (*v119)(_BYTE *, uint64_t, uint64_t);
  int v120;
  uint64_t v121;
  _BYTE *v122;
  uint64_t v123;
  _BYTE *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  id v128;
  uint64_t v129;
  void *v130;
  _BYTE *v131;
  _BYTE *v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  void (*v146)(unint64_t, _QWORD, uint64_t);
  void (*v147)(_BYTE *, uint64_t);
  char v148;
  _BYTE v149[12];
  int v150;
  uint64_t (*v151)(uint64_t, uint64_t, uint64_t);
  void (*v152)(_BYTE *, uint64_t, uint64_t);
  void (*v153)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _BYTE *v157;
  _BYTE *v158;
  _BYTE *v159;
  _BYTE *v160;
  _BYTE *v161;
  _BYTE *v162;
  uint64_t v163;
  uint64_t v164;
  _BYTE *v165;
  id v166;
  _BYTE *v167;
  BOOL *v168;
  _BYTE *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _BYTE *v173;
  _BYTE *v174;
  _BYTE *v175;
  uint64_t v176;
  uint64_t v177;
  _BYTE *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v159 = &v149[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v9);
  v165 = &v149[-v11];
  v12 = type metadata accessor for CalendarEvent(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v168 = &v149[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v170 = type metadata accessor for DateComponents();
  v177 = *(_QWORD *)(v170 - 8);
  MEMORY[0x24BDAC7A8](v170);
  v174 = &v149[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v157 = &v149[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = MEMORY[0x24BDAC7A8](v17);
  v161 = &v149[-v20];
  MEMORY[0x24BDAC7A8](v19);
  v169 = &v149[-v21];
  v22 = type metadata accessor for TimeZone();
  v171 = *(_QWORD *)(v22 - 8);
  v172 = v22;
  v23 = MEMORY[0x24BDAC7A8](v22);
  v167 = &v149[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v23);
  v158 = &v149[-v25];
  v26 = type metadata accessor for Calendar();
  v163 = *(_QWORD *)(v26 - 8);
  v164 = v26;
  MEMORY[0x24BDAC7A8](v26);
  v178 = &v149[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v29 = MEMORY[0x24BDAC7A8](v28);
  v162 = &v149[-((v30 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v29);
  v32 = &v149[-v31];
  v176 = type metadata accessor for Date();
  v179 = *(_QWORD *)(v176 - 8);
  v33 = MEMORY[0x24BDAC7A8](v176);
  v160 = &v149[-((v34 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v35 = MEMORY[0x24BDAC7A8](v33);
  v173 = &v149[-v36];
  MEMORY[0x24BDAC7A8](v35);
  v175 = &v149[-v37];
  v38 = type metadata accessor for CharacterSet();
  v39 = *(_QWORD *)(v38 - 8);
  MEMORY[0x24BDAC7A8](v38);
  v41 = &v149[-((v40 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v180 = a2;
  v181 = a3;
  static CharacterSet.decimalDigits.getter();
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.rangeOfCharacter(from:options:range:)();
  LOBYTE(a3) = v42;
  (*(void (**)(_BYTE *, uint64_t))(v39 + 8))(v41, v38);
  if ((a3 & 1) != 0)
  {
    v63 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
    v64 = a4;
LABEL_12:
    v65 = v12;
    return v63(v64, 1, 1, v65);
  }
  v156 = a4;
  v43 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDC6CB8]), sel_initWithDDScannerResult_, a1);
  if (!v43)
  {
    v63 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
    v64 = v156;
    goto LABEL_12;
  }
  v44 = v43;
  v45 = objc_msgSend(v43, sel_startDate);
  v46 = v12;
  if (!v45)
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v179 + 56))(v32, 1, 1, v176);
    goto LABEL_14;
  }
  v47 = v45;
  v48 = v173;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v49 = v179;
  v50 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v179 + 32);
  v51 = v176;
  v50(v32, (uint64_t)v48, v176);
  v52 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v49 + 56);
  v52((uint64_t)v32, 0, 1, v51);
  v53 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v49 + 48);
  if (v53((uint64_t)v32, 1, v51) == 1)
  {
LABEL_14:

    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v32, &demangling cache variable for type metadata for Date?);
    v63 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
    v64 = v156;
    v65 = v46;
    return v63(v64, 1, 1, v65);
  }
  v151 = v53;
  v153 = v52;
  v154 = v13;
  v155 = v46;
  v152 = v50;
  v50(v175, (uint64_t)v32, v51);
  v54 = objc_msgSend(a1, sel_type);
  v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v57 = v56;

  DUStructuredExtractionLocalImplementation.getAllSubresultTypes(ddScannerResult:)(a1);
  v59 = v58;
  result = *MEMORY[0x24BE2B228];
  if (!*MEMORY[0x24BE2B228])
  {
    __break(1u);
    goto LABEL_82;
  }
  if (v55 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v57 == v61)
    goto LABEL_8;
  v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v66 & 1) == 0)
  {
    result = *MEMORY[0x24BE2B1E0];
    if (!*MEMORY[0x24BE2B1E0])
    {
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
      goto LABEL_85;
    }
    if (v55 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v57 != v134)
    {
      v135 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v135 & 1) != 0)
        goto LABEL_17;
      result = *MEMORY[0x24BE2B220];
      if (!*MEMORY[0x24BE2B220])
      {
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
        return result;
      }
      if (v55 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v57 != v136)
      {
        LODWORD(v62) = _stringCompareWithSmolCheck(_:_:expecting:)();
        goto LABEL_9;
      }
    }
LABEL_8:
    LODWORD(v62) = 1;
LABEL_9:
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
LABEL_17:
  LODWORD(v62) = 1;
LABEL_18:
  result = *MEMORY[0x24BE2B1D8];
  if (!*MEMORY[0x24BE2B1D8])
  {
LABEL_82:
    __break(1u);
    goto LABEL_83;
  }
  v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v166 = v44;
  if (v55 == v67 && v57 == v68)
    goto LABEL_21;
  v69 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v69 & 1) != 0)
    goto LABEL_23;
  result = *MEMORY[0x24BE2B1E0];
  if (!*MEMORY[0x24BE2B1E0])
    goto LABEL_84;
  if (v55 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v57 == v137)
  {
LABEL_21:
    swift_bridgeObjectRelease();
LABEL_23:
    swift_bridgeObjectRelease();
LABEL_24:
    v70 = 1;
    if ((v62 & 1) == 0)
    {
      v78 = MEMORY[0x24BEE4B08];
      v80 = v167;
      v79 = v168;
      v81 = v177;
      v82 = v171;
      goto LABEL_28;
    }
    v150 = v62;
LABEL_26:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>);
    v71 = type metadata accessor for Calendar.Component();
    v72 = *(_QWORD *)(v71 - 8);
    v73 = *(_QWORD *)(v72 + 72);
    v74 = (*(unsigned __int8 *)(v72 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80);
    v75 = swift_allocObject();
    *(_OWORD *)(v75 + 16) = xmmword_2284C25C0;
    v76 = v75 + v74;
    v77 = *(void (**)(unint64_t, _QWORD, uint64_t))(v72 + 104);
    v77(v76, *MEMORY[0x24BDCF230], v71);
    v77(v76 + v73, *MEMORY[0x24BDCF258], v71);
    v77(v76 + 2 * v73, *MEMORY[0x24BDCF260], v71);
    v78 = specialized Set.init(_nonEmptyArrayLiteral:)(v75);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    v80 = v167;
    v79 = v168;
    v81 = v177;
    v82 = v171;
    LOBYTE(v62) = v150;
LABEL_28:
    if ((specialized Sequence<>.contains(_:)(0x65626D754E796144, 0xE900000000000072, v59) & 1) != 0
      || (specialized Sequence<>.contains(_:)(0x6D754E68746E6F4DLL, 0xEB00000000726562, v59) & 1) != 0
      || (specialized Sequence<>.contains(_:)(0x626D754E72616559, 0xEA00000000007265, v59) & 1) != 0)
    {
      if ((specialized Sequence<>.contains(_:)(0x65626D754E796144, 0xE900000000000072, v59) & 1) != 0)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>);
        v83 = type metadata accessor for Calendar.Component();
        v84 = *(_QWORD *)(v83 - 8);
        v85 = (*(unsigned __int8 *)(v84 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80);
        v86 = swift_allocObject();
        *(_OWORD *)(v86 + 16) = xmmword_2284C1EE0;
        (*(void (**)(unint64_t, _QWORD, uint64_t))(v84 + 104))(v86 + v85, *MEMORY[0x24BDCF220], v83);
        v78 = specialized Set.union<A>(_:)(v86, v78);
        swift_setDeallocating();
        swift_arrayDestroy();
        swift_deallocClassInstance();
      }
      if ((specialized Sequence<>.contains(_:)(0x6D754E68746E6F4DLL, 0xEB00000000726562, v59) & 1) != 0)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>);
        v87 = type metadata accessor for Calendar.Component();
        v88 = *(_QWORD *)(v87 - 8);
        v89 = (*(unsigned __int8 *)(v88 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80);
        v90 = swift_allocObject();
        *(_OWORD *)(v90 + 16) = xmmword_2284C1EE0;
        (*(void (**)(unint64_t, _QWORD, uint64_t))(v88 + 104))(v90 + v89, *MEMORY[0x24BDCF250], v87);
        v78 = specialized Set.union<A>(_:)(v90, v78);
        swift_setDeallocating();
        swift_arrayDestroy();
        swift_deallocClassInstance();
      }
      v81 = v177;
      v91 = (uint64_t)v169;
      v82 = v171;
      v92 = specialized Sequence<>.contains(_:)(0x626D754E72616559, 0xEA00000000007265, v59);
      swift_bridgeObjectRelease();
      if ((v92 & 1) != 0)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>);
        v93 = type metadata accessor for Calendar.Component();
        v94 = *(_QWORD *)(v93 - 8);
        v95 = (*(unsigned __int8 *)(v94 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80);
        v96 = swift_allocObject();
        *(_OWORD *)(v96 + 16) = xmmword_2284C1EE0;
        (*(void (**)(unint64_t, _QWORD, uint64_t))(v94 + 104))(v96 + v95, *MEMORY[0x24BDCF240], v93);
        v78 = specialized Set.union<A>(_:)(v96, v78);
        swift_setDeallocating();
LABEL_37:
        swift_arrayDestroy();
        swift_deallocClassInstance();
        v81 = v177;
        v91 = (uint64_t)v169;
        v82 = v171;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      if (v70)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>);
        v140 = type metadata accessor for Calendar.Component();
        v141 = *(_QWORD *)(v140 - 8);
        v142 = *(_QWORD *)(v141 + 72);
        v143 = (*(unsigned __int8 *)(v141 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v141 + 80);
        v144 = swift_allocObject();
        *(_OWORD *)(v144 + 16) = xmmword_2284C25C0;
        v145 = v144 + v143;
        v79 = v168;
        v146 = *(void (**)(unint64_t, _QWORD, uint64_t))(v141 + 104);
        v146(v145, *MEMORY[0x24BDCF240], v140);
        v146(v145 + v142, *MEMORY[0x24BDCF250], v140);
        v80 = v167;
        v146(v145 + 2 * v142, *MEMORY[0x24BDCF220], v140);
        v78 = specialized Set.union<A>(_:)(v144, v78);
        swift_setDeallocating();
        goto LABEL_37;
      }
      v91 = (uint64_t)v169;
    }
    static Calendar.current.getter();
    v97 = objc_msgSend(v166, sel_startTimeZone);
    v171 = v78;
    if (v97)
    {
      v98 = v97;
      static TimeZone._unconditionallyBridgeFromObjectiveC(_:)();

      v99 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v82 + 32);
      v100 = v172;
      v99(v91, v80, v172);
      v169 = *(_BYTE **)(v82 + 56);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v169)(v91, 0, 1, v100);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v82 + 48))(v91, 1, v100) != 1)
      {
        v103 = v79;
        v104 = v62;
        v62 = v172;
        v105 = v158;
        v99((uint64_t)v158, (_BYTE *)v91, v172);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v82 + 16))(v80, v105, v62);
        Calendar.timeZone.setter();
        v106 = v62;
        LOBYTE(v62) = v104;
        v79 = v103;
        (*(void (**)(_BYTE *, uint64_t))(v82 + 8))(v105, v106);
        v101 = (uint64_t)v165;
        v102 = v170;
LABEL_44:
        Calendar.dateComponents(_:from:)();
        v107 = objc_msgSend(v166, sel_startTimeZone);
        if (v107)
        {
          v108 = v107;
          v109 = v161;
          static TimeZone._unconditionallyBridgeFromObjectiveC(_:)();

          v110 = 0;
        }
        else
        {
          v110 = 1;
          v109 = v161;
        }
        ((void (*)(_BYTE *, uint64_t, uint64_t, uint64_t))v169)(v109, v110, 1, v172);
        v111 = v174;
        DateComponents.timeZone.setter();
        v112 = v155;
        (*(void (**)(BOOL *, _BYTE *, uint64_t))(v81 + 16))(&v79[*(int *)(v155 + 20)], v111, v102);
        v113 = (uint64_t)&v79[*(int *)(v112 + 24)];
        v114 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v81 + 56);
        v114(v113, 1, 1, v102);
        *v79 = (v62 & 1) == 0;
        v114(v101, 1, 1, v102);
        v115 = objc_msgSend(v166, sel_endDate);
        if (v115)
        {
          v116 = v115;
          v117 = v173;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          v118 = (uint64_t)v162;
          v119 = v152;
          v152(v162, (uint64_t)v117, v51);
          v153(v118, 0, 1, v51);
          v120 = v151(v118, 1, v51);
          v121 = v156;
          if (v120 != 1)
          {
            v122 = v160;
            v119(v160, v118, v51);
            v123 = v51;
            v124 = v178;
            v125 = (uint64_t)v159;
            Calendar.dateComponents(_:from:)();
            swift_bridgeObjectRelease();
            v126 = v170;
            v114(v125, 0, 1, v170);
            outlined assign with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v125, v101, &demangling cache variable for type metadata for DateComponents?);
            v127 = v177;
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v177 + 48))(v101, 1, v126))
            {
              v128 = objc_msgSend(v166, sel_endTimeZone);
              v129 = v172;
              if (v128)
              {
                v130 = v128;
                v131 = v157;
                static TimeZone._unconditionallyBridgeFromObjectiveC(_:)();

                v132 = v131;
                v133 = 0;
              }
              else
              {
                v133 = 1;
                v132 = v157;
              }
              ((void (*)(_BYTE *, uint64_t, uint64_t, uint64_t))v169)(v132, v133, 1, v129);
              DateComponents.timeZone.setter();
              v124 = v178;
              v123 = v176;
              v122 = v160;
            }

            v147 = *(void (**)(_BYTE *, uint64_t))(v179 + 8);
            v147(v122, v123);
            (*(void (**)(_BYTE *, uint64_t))(v127 + 8))(v174, v126);
            (*(void (**)(_BYTE *, uint64_t))(v163 + 8))(v124, v164);
            v147(v175, v123);
            outlined assign with copy of DateComponents?(v101, v113);
            v112 = v155;
            v79 = v168;
            goto LABEL_76;
          }
        }
        else
        {
          v118 = (uint64_t)v162;
          v153((uint64_t)v162, 1, 1, v51);
          v121 = v156;
        }
        swift_bridgeObjectRelease();

        (*(void (**)(_BYTE *, uint64_t))(v177 + 8))(v174, v170);
        (*(void (**)(_BYTE *, uint64_t))(v163 + 8))(v178, v164);
        (*(void (**)(_BYTE *, uint64_t))(v179 + 8))(v175, v51);
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v118, &demangling cache variable for type metadata for Date?);
LABEL_76:
        outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v79, v121, type metadata accessor for CalendarEvent);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v154 + 56))(v121, 0, 1, v112);
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v101, &demangling cache variable for type metadata for DateComponents?);
        return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v79, type metadata accessor for CalendarEvent);
      }
    }
    else
    {
      v169 = *(_BYTE **)(v82 + 56);
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v169)(v91, 1, 1, v172);
    }
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v91, &demangling cache variable for type metadata for TimeZone?);
    v101 = (uint64_t)v165;
    v102 = v170;
    goto LABEL_44;
  }
  v138 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v138 & 1) != 0)
    goto LABEL_23;
  result = *MEMORY[0x24BE2B1D0];
  if (!*MEMORY[0x24BE2B1D0])
    goto LABEL_86;
  if (v55 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v57 == v139)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_24;
  }
  v148 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v148 & 1) != 0)
    goto LABEL_24;
  if ((v62 & 1) != 0)
  {
    v150 = v62;
    v70 = 0;
    goto LABEL_26;
  }
  (*(void (**)(_BYTE *, uint64_t))(v179 + 8))(v175, v51);
  swift_bridgeObjectRelease();

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v154 + 56))(v156, 1, 1, v155);
}

void DUStructuredExtractionLocalImplementation.getAllSubresultTypes(ddScannerResult:)(void *a1)
{
  id v1;
  void *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;

  v17 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v1 = objc_msgSend(a1, sel_subResults);
  if (!v1)
    return;
  v2 = v1;
  type metadata accessor for DDScannerResult();
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v3 >> 62))
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v4)
      goto LABEL_4;
LABEL_16:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  v4 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v4)
    goto LABEL_16;
LABEL_4:
  if (v4 < 1)
  {
    __break(1u);
  }
  else
  {
    v5 = 0;
    do
    {
      if ((v3 & 0xC000000000000001) != 0)
        v6 = (id)MEMORY[0x22E2AFF34](v5, v3);
      else
        v6 = *(id *)(v3 + 8 * v5 + 32);
      v7 = v6;
      v8 = objc_msgSend(v6, sel_type);
      v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v11 = v10;

      v12 = v17;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
      v14 = v12[2];
      v13 = v12[3];
      if (v14 >= v13 >> 1)
        v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, v12);
      ++v5;
      v12[2] = v14 + 1;
      v15 = &v12[2 * v14];
      v15[4] = v9;
      v15[5] = v11;
      v17 = v12;
      v16 = DUStructuredExtractionLocalImplementation.getAllSubresultTypes(ddScannerResult:)(v7);
      specialized Array.append<A>(contentsOf:)(v16);

    }
    while (v4 != v5);
    swift_bridgeObjectRelease();
  }
}

uint64_t DUStructuredExtractionLocalImplementation.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t DUStructuredExtractionLocalImplementation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t DUStructuredExtractionLocalImplementation.init()()
{
  uint64_t v0;

  return v0;
}

unint64_t protocol witness for static DUProcessingPhaseImplementation.implementationID.getter in conformance DUStructuredExtractionLocalImplementation()
{
  return 0xD00000000000002ALL;
}

void *protocol witness for static DUProcessingPhaseImplementation.implementationAttributes.getter in conformance DUStructuredExtractionLocalImplementation()
{
  return &outlined read-only object #0 of protocol witness for static DUProcessingPhaseImplementation.implementationAttributes.getter in conformance DUStructuredExtractionLocalImplementation;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = v1;
  swift_bridgeObjectRetain();
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v2;
  v10 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    v7 = v10;
  }

  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 16 * v4);
  specialized _NativeDictionary._delete(at:)(v4, v7);
  *v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  double result;
  uint64_t v13;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    v13 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v11 = v13;
    }
    swift_bridgeObjectRelease();
    outlined init with take of Result<Any?, Error>(*(_QWORD *)(v11 + 56) + 40 * v8, a3);
    specialized _NativeDictionary._delete(at:)(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_BYTE *)(a3 + 32) = -1;
  }
  return result;
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  id v10;
  Swift::Int v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(void **)(*(_QWORD *)(a2 + 48) + 8 * v6);
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        Hasher.init(_seed:)();
        v10 = v9;
        String.hash(into:)();
        v11 = Hasher._finalize()();

        result = swift_bridgeObjectRelease();
        v12 = v11 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8)
            goto LABEL_5;
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          v13 = *(_QWORD *)(a2 + 48);
          v14 = (_QWORD *)(v13 + 8 * v3);
          v15 = (_QWORD *)(v13 + 8 * v6);
          if (v3 != v6 || v14 >= v15 + 1)
            *v14 = *v15;
          v16 = *(_QWORD *)(a2 + 56);
          v17 = (_OWORD *)(v16 + 16 * v3);
          v18 = (_OWORD *)(v16 + 16 * v6);
          if (v3 != v6 || (v3 = v6, v17 >= v18 + 1))
          {
            *v17 = *v18;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v20 = *v19;
    v21 = (-1 << v3) - 1;
  }
  else
  {
    v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    v21 = *v19;
    v20 = (-1 << result) - 1;
  }
  *v19 = v21 & v20;
  v22 = *(_QWORD *)(a2 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  Swift::Int v11;
  unint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  unint64_t v17;
  __int128 *v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v11 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v12 = v11 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8)
            goto LABEL_5;
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          v13 = *(_QWORD *)(a2 + 48);
          v14 = (_OWORD *)(v13 + 16 * v3);
          v15 = (_OWORD *)(v13 + 16 * v6);
          if (v3 != v6 || v14 >= v15 + 1)
            *v14 = *v15;
          v16 = *(_QWORD *)(a2 + 56);
          v17 = v16 + 40 * v3;
          v18 = (__int128 *)(v16 + 40 * v6);
          if (40 * v3 < (uint64_t)(40 * v6) || v17 >= (unint64_t)v18 + 40 || (v19 = v3 == v6, v3 = v6, !v19))
          {
            v9 = *v18;
            v10 = v18[1];
            *(_QWORD *)(v17 + 32) = *((_QWORD *)v18 + 4);
            *(_OWORD *)v17 = v9;
            *(_OWORD *)(v17 + 16) = v10;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v9 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_QWORD *)(v14 + 8 * v3);
          v16 = (_QWORD *)(v14 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t type metadata accessor for DUStructuredExtractionLocalImplementation()
{
  return objc_opt_self();
}

const char *FrozenNLEmbeddingVectorRetrieval.metadataRecordIDKey.unsafeMutableAddressor()
{
  return "record_id";
}

uint64_t static FrozenNLEmbeddingVectorRetrieval.metadataRecordIDKey.getter()
{
  return 0x695F64726F636572;
}

const char *FrozenNLEmbeddingVectorRetrieval.metadataRecordDataKey.unsafeMutableAddressor()
{
  return "record_data";
}

uint64_t static FrozenNLEmbeddingVectorRetrieval.metadataRecordDataKey.getter()
{
  return 0x645F64726F636572;
}

uint64_t FrozenNLEmbeddingVectorRetrieval.embeddingMetadata.getter()
{
  return swift_bridgeObjectRetain();
}

id @nonobjc NLEmbedding.__allocating_init(contentsOf:)(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  id v8;
  id v9;
  uint64_t v10;
  id v12;
  NSURL *v13;

  v13 = (NSURL *)*MEMORY[0x24BDAC8D0];
  URL._bridgeToObjectiveC()(v13);
  v3 = v2;
  v12 = 0;
  v4 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_embeddingWithContentsOfURL_error_, v2, &v12);

  v5 = v12;
  if (v4)
  {
    v6 = type metadata accessor for URL();
    v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
    v8 = v5;
    v7(a1, v6);
  }
  else
  {
    v9 = v12;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    v10 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(a1, v10);
  }
  return v4;
}

uint64_t FrozenNLEmbeddingVectorRetrieval.fetchNeighborsForVector(vector:distanceLimit:countLimit:)(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  float *v3;
  unint64_t v4;
  float v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  v9 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v2 = a1;
    v8 = MEMORY[0x24BEE4AF8];
    a1 = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v3 = (float *)(v2 + 32);
    v4 = *(_QWORD *)(v8 + 16);
    do
    {
      v5 = *v3;
      v6 = *(_QWORD *)(v8 + 24);
      if (v4 >= v6 >> 1)
        a1 = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v4 + 1, 1);
      *(_QWORD *)(v8 + 16) = v4 + 1;
      *(double *)(v8 + 8 * v4 + 32) = v5;
      ++v3;
      ++v4;
      --v1;
    }
    while (v1);
  }
  MEMORY[0x24BDAC7A8](a1);
  NLEmbedding.enumerateNeighbors(for:maximumCount:distanceType:using:)();
  swift_bridgeObjectRelease();
  return v9;
}

BOOL closure #2 in FrozenNLEmbeddingVectorRetrieval.fetchNeighborsForVector(vector:distanceLimit:countLimit:)(uint64_t a1, uint64_t a2, double a3, float a4, uint64_t a5, uint64_t a6, _QWORD **a7)
{
  float v8;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v21;
  unint64_t v22;
  float *v23;

  v8 = a3;
  if (v8 <= a4)
  {
    v13 = *(_QWORD *)(a6 + 16);
    swift_bridgeObjectRetain();
    if (v13)
    {
      swift_bridgeObjectRetain();
      v14 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
      if ((v15 & 1) != 0)
      {
        v16 = (uint64_t *)(*(_QWORD *)(a6 + 56) + 16 * v14);
        v17 = *v16;
        v18 = v16[1];
        outlined copy of Data?(*v16, v18);
      }
      else
      {
        v17 = 0;
        v18 = 0xF000000000000000;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      v17 = 0;
      v18 = 0xF000000000000000;
    }
    v19 = *a7;
    swift_bridgeObjectRetain();
    outlined copy of Data?(v17, v18);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a7 = v19;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
      *a7 = v19;
    }
    v22 = v19[2];
    v21 = v19[3];
    if (v22 >= v21 >> 1)
    {
      v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v22 + 1, 1, v19);
      *a7 = v19;
    }
    v19[2] = v22 + 1;
    v23 = (float *)&v19[5 * v22];
    *((_QWORD *)v23 + 4) = a1;
    *((_QWORD *)v23 + 5) = a2;
    *((_QWORD *)v23 + 6) = v17;
    *((_QWORD *)v23 + 7) = v18;
    v23[16] = v8;
    swift_bridgeObjectRelease();
    outlined consume of Data?(v17, v18);
  }
  return v8 <= a4;
}

uint64_t static FrozenNLEmbeddingVectorRetrieval.writeMetadataPlistForRecords(records:destinationURL:)(uint64_t a1)
{
  int64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t inited;
  uint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  Class isa;
  id v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v36 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v3 = 0;
    v33 = a1 + 32;
    do
    {
      v4 = (uint64_t *)(v33 + 40 * v3);
      v5 = *v4;
      v6 = v4[1];
      v7 = v4[3];
      v8 = v4[4];
      if (v8 >> 60 != 15)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_2284C0D00;
        *(_QWORD *)(inited + 32) = 0x695F64726F636572;
        *(_QWORD *)(inited + 40) = 0xE900000000000064;
        *(_QWORD *)(inited + 48) = v5;
        *(_QWORD *)(inited + 56) = v6;
        *(_QWORD *)(inited + 64) = 0x645F64726F636572;
        *(_QWORD *)(inited + 72) = 0xEB00000000617461;
        __asm { BR              X9 }
      }
      v34 = v3;
      v37 = 0x695F64726F636572;
      v38 = 0xE900000000000064;
      v39 = v5;
      v40 = v6;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
      v9 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
      v10 = v8;
      v11 = v40;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data?(v7, v10);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v12 = specialized __RawDictionaryStorage.find<A>(_:)(0x695F64726F636572, 0xE900000000000064);
      if ((v13 & 1) != 0)
      {
        __break(1u);
LABEL_17:
        __break(1u);
        JUMPOUT(0x22843640CLL);
      }
      v9[(v12 >> 6) + 8] |= 1 << v12;
      v14 = (_QWORD *)(v9[6] + 16 * v12);
      *v14 = 0x695F64726F636572;
      v14[1] = 0xE900000000000064;
      v15 = (_QWORD *)(v9[7] + 16 * v12);
      *v15 = v5;
      v15[1] = v11;
      v16 = v9[2];
      v17 = __OFADD__(v16, 1);
      v18 = v16 + 1;
      if (v17)
        goto LABEL_17;
      v9[2] = v18;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, String));
      swift_arrayDestroy();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      outlined consume of Data?(v7, v10);
      v20 = v36;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v36 + 16) + 1, 1);
        v20 = v36;
      }
      v23 = *(_QWORD *)(v20 + 16);
      v22 = *(_QWORD *)(v20 + 24);
      if (v23 >= v22 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
        v20 = v36;
      }
      ++v3;
      *(_QWORD *)(v20 + 16) = v23 + 1;
      *(_QWORD *)(v20 + 8 * v23 + 32) = v9;
    }
    while (v34 + 1 != v1);
  }
  v24 = (void *)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v35 = 0;
  v26 = objc_msgSend(v24, sel_dataWithPropertyList_format_options_error_, isa, 100, 0, &v35);

  v27 = v35;
  if (v26)
  {
    v28 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v30 = v29;

    Data.write(to:options:)();
    return outlined consume of Data._Representation(v28, v30);
  }
  else
  {
    v32 = v27;
    _convertNSErrorToError(_:)();

    return swift_willThrow();
  }
}

uint64_t static FrozenNLEmbeddingVectorRetrieval.writeEmbeddingtoolFileForRecords(records:destinationURL:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  int64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v5 = type metadata accessor for String.Encoding();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = MEMORY[0x24BEE4AF8];
  if (v9)
  {
    v48 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    v49 = a2;
    v50 = v6;
    v51 = v2;
    v52 = v5;
    v63 = MEMORY[0x24BEE4AF8];
    v55 = v9;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
    v11 = 0;
    v10 = v63;
    v54 = a1 + 32;
    v53 = xmmword_2284C0D00;
    v62 = xmmword_2284C1EE0;
    do
    {
      v61 = v11;
      v12 = (uint64_t *)(v54 + 40 * v11);
      v13 = v12[1];
      v14 = v12[2];
      v15 = v12[3];
      v16 = v12[4];
      v17 = *(_QWORD *)(v14 + 16);
      v59 = *v12;
      v60 = v16;
      if (v17)
      {
        v58 = v10;
        v56 = v13;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v57 = v15;
        outlined copy of Data?(v15, v16);
        v65 = MEMORY[0x24BEE4AF8];
        swift_bridgeObjectRetain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17, 0);
        v18 = MEMORY[0x24BEE14E8];
        v19 = 0;
        v20 = v65;
        do
        {
          v21 = *(_DWORD *)(v14 + 4 * v19 + 32);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
          v22 = swift_allocObject();
          *(_OWORD *)(v22 + 16) = v62;
          *(_QWORD *)(v22 + 56) = v18;
          *(_QWORD *)(v22 + 64) = MEMORY[0x24BEE1568];
          *(_DWORD *)(v22 + 32) = v21;
          v23 = String.init(format:_:)();
          v25 = v24;
          v65 = v20;
          v27 = *(_QWORD *)(v20 + 16);
          v26 = *(_QWORD *)(v20 + 24);
          if (v27 >= v26 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
            v18 = MEMORY[0x24BEE14E8];
            v20 = v65;
          }
          ++v19;
          *(_QWORD *)(v20 + 16) = v27 + 1;
          v28 = v20 + 16 * v27;
          *(_QWORD *)(v28 + 32) = v23;
          *(_QWORD *)(v28 + 40) = v25;
        }
        while (v17 != v19);
        swift_bridgeObjectRelease();
        v15 = v57;
        v29 = v58;
        v30 = v56;
      }
      else
      {
        v29 = v10;
        v30 = v13;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Data?(v15, v16);
        v20 = MEMORY[0x24BEE4AF8];
      }
      v65 = v20;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      v31 = BidirectionalCollection<>.joined(separator:)();
      v33 = v32;
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v34 = swift_allocObject();
      *(_OWORD *)(v34 + 16) = v53;
      v35 = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v34 + 56) = MEMORY[0x24BEE0D00];
      v36 = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v34 + 32) = v59;
      *(_QWORD *)(v34 + 40) = v30;
      *(_QWORD *)(v34 + 96) = v35;
      *(_QWORD *)(v34 + 104) = v36;
      *(_QWORD *)(v34 + 64) = v36;
      *(_QWORD *)(v34 + 72) = v31;
      *(_QWORD *)(v34 + 80) = v33;
      swift_bridgeObjectRetain();
      v37 = String.init(format:_:)();
      v39 = v38;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Data?(v15, v60);
      v63 = v29;
      v41 = *(_QWORD *)(v29 + 16);
      v40 = *(_QWORD *)(v29 + 24);
      v10 = v29;
      if (v41 >= v40 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1, v41 + 1, 1);
        v10 = v63;
      }
      v11 = v61 + 1;
      *(_QWORD *)(v10 + 16) = v41 + 1;
      v42 = v10 + 16 * v41;
      *(_QWORD *)(v42 + 32) = v37;
      *(_QWORD *)(v42 + 40) = v39;
    }
    while (v11 != v55);
    v5 = v52;
    v6 = v50;
    v8 = v48;
  }
  v63 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v43 = BidirectionalCollection<>.joined(separator:)();
  v45 = v44;
  swift_bridgeObjectRelease();
  v63 = v43;
  v64 = v45;
  static String.Encoding.utf8.getter();
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.write(to:atomically:encoding:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for VectorRetrieval.fetchNeighborsForVector(vector:distanceLimit:countLimit:) in conformance FrozenNLEmbeddingVectorRetrieval(uint64_t a1)
{
  return FrozenNLEmbeddingVectorRetrieval.fetchNeighborsForVector(vector:distanceLimit:countLimit:)(a1);
}

uint64_t specialized closure #1 in String.init<A, B>(decoding:as:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = static String._fromUTF8Repairing(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t specialized FrozenNLEmbeddingVectorRetrieval.init(embeddingAssetURL:embeddingMetadataURL:)(char *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t);
  char *v41;
  char *v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t result;
  id v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  id v55;
  id v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  _QWORD *v60;
  id v61;
  uint64_t v62;
  _QWORD *v63;
  char *v64;
  void (*v65)(uint64_t, uint64_t);
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  void *v69;
  Class isa;
  id v71;
  id v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  void (*v80)(char *, uint64_t, uint64_t);
  char *v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char v88;
  NSObject *v89;
  os_log_type_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  NSObject *v99;
  os_log_type_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  char isUniquelyReferenced_nonNull_native;
  char v112;
  unint64_t v113;
  uint64_t v114;
  _BOOL8 v115;
  uint64_t v116;
  char v117;
  unint64_t v118;
  char v119;
  _QWORD *v120;
  char *v121;
  NSObject *v122;
  os_log_type_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  BOOL v136;
  uint64_t v137;
  id v138;
  void *v139;
  uint64_t v140;
  char *v141;
  char *v142;
  NSObject *v143;
  uint64_t v144;
  os_log_type_t v145;
  uint8_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  void (*v151)(char *, uint64_t);
  char *v152;
  uint64_t v153;
  void (*v154)(char *, uint64_t);
  char *v155;
  NSObject *v156;
  os_log_type_t v157;
  BOOL v158;
  id v159;
  uint8_t *v160;
  uint64_t v161;
  char *v162;
  void (*v163)(uint64_t, uint64_t);
  uint64_t v164;
  id v165;
  uint64_t v166;
  unint64_t v167;
  char *v168;
  id v169;
  char *v170;
  char *v171;
  uint64_t v172;
  char *v173;
  __int128 v174;
  char *v175;
  char *v176;
  char *v177;
  char *v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  void (*v189)(char *, uint64_t, uint64_t);
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  __int128 v194;
  __int128 v195;
  uint64_t v196;

  v186 = a2;
  v196 = *MEMORY[0x24BDAC8D0];
  v182 = type metadata accessor for String.Encoding();
  v172 = *(_QWORD *)(v182 - 8);
  MEMORY[0x24BDAC7A8](v182);
  v171 = (char *)&v164 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Logger();
  v187 = *(_QWORD *)(v4 - 8);
  v188 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v178 = (char *)&v164 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v183 = (char *)&v164 - v8;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v180 = (char *)&v164 - v10;
  v11 = MEMORY[0x24BDAC7A8](v9);
  v179 = (char *)&v164 - v12;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v177 = (char *)&v164 - v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v173 = (char *)&v164 - v16;
  MEMORY[0x24BDAC7A8](v15);
  *(_QWORD *)&v174 = (char *)&v164 - v17;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v18);
  v184 = (uint64_t)&v164 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for URL();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v189 = (void (*)(char *, uint64_t, uint64_t))((char *)&v164 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v24 = MEMORY[0x24BDAC7A8](v22);
  v175 = (char *)&v164 - v25;
  v26 = MEMORY[0x24BDAC7A8](v24);
  v176 = (char *)&v164 - v27;
  v28 = MEMORY[0x24BDAC7A8](v26);
  v30 = (char *)&v164 - v29;
  v31 = MEMORY[0x24BDAC7A8](v28);
  v33 = (char *)&v164 - v32;
  v34 = MEMORY[0x24BDAC7A8](v31);
  v36 = (char *)&v164 - v35;
  MEMORY[0x24BDAC7A8](v34);
  v38 = (char *)&v164 - v37;
  type metadata accessor for NLEmbedding();
  v39 = v21;
  v40 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  v41 = a1;
  v42 = a1;
  v43 = v20;
  v40(v38, (uint64_t)v42, v20);
  v44 = @nonobjc NLEmbedding.__allocating_init(contentsOf:)((uint64_t)v38);
  v168 = v33;
  v170 = v30;
  v189 = v40;
  v183 = v36;
  v185 = v41;
  v45 = v186;
  v46 = v184;
  outlined init with copy of URL?(v186, v184);
  v47 = v39;
  v48 = v43;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v46, 1, v43) == 1)
  {
    v169 = v44;
    v49 = v44;
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v46, &demangling cache variable for type metadata for URL?);
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v45, &demangling cache variable for type metadata for URL?);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v185, v43);

    return (uint64_t)v169;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v39 + 32))(v183, v46, v43);
  v51 = v44;
  v52 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v193 = (_QWORD *)v52;
  v53 = Data.init(contentsOf:options:)();
  v181 = v43;
  v169 = v44;
  v192 = 100;
  v66 = v53;
  v68 = v67;
  v69 = (void *)objc_opt_self();
  isa = Data._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&v194 = 0;
  v71 = objc_msgSend(v69, sel_propertyListWithData_options_format_error_, isa, 0, &v192, &v194);

  if (v71)
  {
    v166 = v66;
    v167 = v68;
    v72 = (id)v194;
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v165 = v51;
      v74 = *(_QWORD *)(v190 + 16);
      if (!v74)
      {
        swift_bridgeObjectRelease();
LABEL_61:
        v155 = v173;
        Logger.init()();
        swift_bridgeObjectRetain();
        v156 = Logger.logObject.getter();
        v157 = static os_log_type_t.info.getter();
        v158 = os_log_type_enabled(v156, v157);
        v159 = v165;
        if (v158)
        {
          v160 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)v160 = 134217984;
          *(_QWORD *)&v194 = *(_QWORD *)(v52 + 16);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_2282CC000, v156, v157, "Done constructing embedding metadata dictionary from plist.  Found %ld items", v160, 0xCu);
          MEMORY[0x22E2B117C](v160, -1, -1);
          outlined consume of Data._Representation(v166, v167);
        }
        else
        {
          outlined consume of Data._Representation(v166, v167);
          swift_bridgeObjectRelease();
        }
        v161 = v186;
        v162 = v183;

        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v161, &demangling cache variable for type metadata for URL?);
        v163 = *(void (**)(uint64_t, uint64_t))(v47 + 8);
        v163((uint64_t)v185, v48);
        (*(void (**)(char *, uint64_t))(v187 + 8))(v155, v188);
        v163((uint64_t)v162, v48);
        swift_beginAccess();

        return (uint64_t)v169;
      }
      v184 = v47;
      v168 = (char *)v190;
      v75 = v190 + 32;
      v178 = (char *)(MEMORY[0x24BEE4AD8] + 8);
      *(_QWORD *)&v73 = 136315138;
      v174 = v73;
      v76 = v182;
      v77 = v179;
      v78 = v180;
      v79 = v177;
      v80 = v189;
      v81 = v170;
      while (1)
      {
        outlined init with copy of Any(v75, (uint64_t)&v194);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
        if ((swift_dynamicCast() & 1) == 0)
        {
          Logger.init()();
          v80(v81, (uint64_t)v185, v48);
          v89 = Logger.logObject.getter();
          v90 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v89, v90))
          {
            v91 = swift_slowAlloc();
            v92 = swift_slowAlloc();
            *(_QWORD *)&v194 = v92;
            *(_DWORD *)v91 = v174;
            v93 = URL.absoluteString.getter();
            *(_QWORD *)(v91 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v93, v94, (uint64_t *)&v194);
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v184 + 8))(v81, v181);
            _os_log_impl(&dword_2282CC000, v89, v90, "Encountered a malformed metadata record while parsing %s.  Skipping", (uint8_t *)v91, 0xCu);
            swift_arrayDestroy();
            v95 = v92;
            v48 = v181;
            MEMORY[0x22E2B117C](v95, -1, -1);
            v96 = v91;
            v78 = v180;
            MEMORY[0x22E2B117C](v96, -1, -1);
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v184 + 8))(v81, v48);
          }

          (*(void (**)(char *, uint64_t))(v187 + 8))(v79, v188);
          v76 = v182;
          v77 = v179;
          goto LABEL_18;
        }
        v82 = v190;
        if (!*(_QWORD *)(v190 + 16)
          || (v83 = specialized __RawDictionaryStorage.find<A>(_:)(0x695F64726F636572, 0xE900000000000064),
              (v84 & 1) == 0)
          || (outlined init with copy of Any(*(_QWORD *)(v82 + 56) + 32 * v83, (uint64_t)&v194),
              (swift_dynamicCast() & 1) == 0))
        {
          swift_bridgeObjectRelease();
          Logger.init()();
          v97 = v176;
          v189(v176, (uint64_t)v185, v48);
          v98 = v77;
          v99 = Logger.logObject.getter();
          v100 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v99, v100))
          {
            v101 = swift_slowAlloc();
            v102 = swift_slowAlloc();
            *(_QWORD *)&v194 = v102;
            *(_DWORD *)v101 = v174;
            v103 = URL.absoluteString.getter();
            *(_QWORD *)(v101 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v103, v104, (uint64_t *)&v194);
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v184 + 8))(v97, v181);
            _os_log_impl(&dword_2282CC000, v99, v100, "Encountered a malformed metadata record while parsing %s.  Skipping", (uint8_t *)v101, 0xCu);
            swift_arrayDestroy();
            v105 = v102;
            v48 = v181;
            MEMORY[0x22E2B117C](v105, -1, -1);
            v106 = v101;
            v76 = v182;
            MEMORY[0x22E2B117C](v106, -1, -1);
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v184 + 8))(v97, v48);
          }

          (*(void (**)(char *, uint64_t))(v187 + 8))(v98, v188);
          v78 = v180;
          v77 = v98;
          v79 = v177;
          v80 = v189;
          goto LABEL_32;
        }
        v86 = v190;
        v85 = v191;
        if (*(_QWORD *)(v82 + 16)
          && (v87 = specialized __RawDictionaryStorage.find<A>(_:)(0x645F64726F636572, 0xEB00000000617461),
              (v88 & 1) != 0))
        {
          outlined init with copy of Any(*(_QWORD *)(v82 + 56) + 32 * v87, (uint64_t)&v194);
        }
        else
        {
          v194 = 0u;
          v195 = 0u;
        }
        swift_bridgeObjectRelease();
        if (!*((_QWORD *)&v195 + 1))
        {
          swift_bridgeObjectRelease();
          outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)&v194, &demangling cache variable for type metadata for Any?);
LABEL_43:
          v121 = v175;
          Logger.init()();
          v80(v121, (uint64_t)v185, v48);
          v122 = Logger.logObject.getter();
          v123 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v122, v123))
          {
            v124 = swift_slowAlloc();
            v125 = swift_slowAlloc();
            *(_QWORD *)&v194 = v125;
            *(_DWORD *)v124 = v174;
            v126 = URL.absoluteString.getter();
            *(_QWORD *)(v124 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v126, v127, (uint64_t *)&v194);
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v184 + 8))(v121, v181);
            _os_log_impl(&dword_2282CC000, v122, v123, "Encountered a malformed metadata record while parsing %s.  Skipping", (uint8_t *)v124, 0xCu);
            swift_arrayDestroy();
            v128 = v125;
            v48 = v181;
            MEMORY[0x22E2B117C](v128, -1, -1);
            v129 = v124;
            v78 = v180;
            MEMORY[0x22E2B117C](v129, -1, -1);
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v184 + 8))(v121, v48);
          }

          (*(void (**)(char *, uint64_t))(v187 + 8))(v78, v188);
          v76 = v182;
          goto LABEL_54;
        }
        if ((swift_dynamicCast() & 1) == 0)
        {
          swift_bridgeObjectRelease();
          goto LABEL_43;
        }
        v107 = v171;
        static String.Encoding.utf8.getter();
        v108 = String.data(using:allowLossyConversion:)();
        v164 = v109;
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v172 + 8))(v107, v76);
        v110 = v193;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)&v194 = v110;
        v113 = specialized __RawDictionaryStorage.find<A>(_:)(v86, v85);
        v114 = v110[2];
        v115 = (v112 & 1) == 0;
        v116 = v114 + v115;
        if (__OFADD__(v114, v115))
        {
          __break(1u);
LABEL_66:
          __break(1u);
        }
        v117 = v112;
        if (v110[3] >= v116)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            v120 = (_QWORD *)v194;
            if ((v112 & 1) == 0)
              goto LABEL_51;
          }
          else
          {
            specialized _NativeDictionary.copy()();
            v120 = (_QWORD *)v194;
            if ((v117 & 1) == 0)
              goto LABEL_51;
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v116, isUniquelyReferenced_nonNull_native);
          v118 = specialized __RawDictionaryStorage.find<A>(_:)(v86, v85);
          if ((v117 & 1) != (v119 & 1))
          {
            result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return result;
          }
          v113 = v118;
          v120 = (_QWORD *)v194;
          if ((v117 & 1) == 0)
          {
LABEL_51:
            v120[(v113 >> 6) + 8] |= 1 << v113;
            v132 = (uint64_t *)(v120[6] + 16 * v113);
            *v132 = v86;
            v132[1] = v85;
            v133 = (uint64_t *)(v120[7] + 16 * v113);
            v134 = v164;
            *v133 = v108;
            v133[1] = v134;
            v135 = v120[2];
            v136 = __OFADD__(v135, 1);
            v137 = v135 + 1;
            if (v136)
              goto LABEL_66;
            v120[2] = v137;
            swift_bridgeObjectRetain();
            goto LABEL_53;
          }
        }
        v130 = v120[7] + 16 * v113;
        outlined consume of Data?(*(_QWORD *)v130, *(_QWORD *)(v130 + 8));
        v131 = v164;
        *(_QWORD *)v130 = v108;
        *(_QWORD *)(v130 + 8) = v131;
LABEL_53:
        v48 = v181;
        v76 = v182;
        v78 = v180;
        v80 = v189;
        v193 = v120;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_54:
        v77 = v179;
LABEL_32:
        v81 = v170;
LABEL_18:
        v75 += 32;
        if (!--v74)
        {
          swift_bridgeObjectRelease();
          v52 = (unint64_t)v193;
          v47 = v184;
          goto LABEL_61;
        }
      }
    }

    swift_bridgeObjectRelease();
    v140 = v174;
    Logger.init()();
    v141 = v168;
    v142 = v185;
    v189(v168, (uint64_t)v185, v48);
    v143 = Logger.logObject.getter();
    v144 = v48;
    v145 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v143, v145))
    {
      v146 = (uint8_t *)swift_slowAlloc();
      v147 = swift_slowAlloc();
      v165 = v51;
      v148 = v147;
      *(_QWORD *)&v194 = v147;
      *(_DWORD *)v146 = 136315138;
      v149 = URL.absoluteString.getter();
      v190 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v149, v150, (uint64_t *)&v194);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v151 = *(void (**)(char *, uint64_t))(v47 + 8);
      v152 = v141;
      v153 = v181;
      v151(v152, v181);
      _os_log_impl(&dword_2282CC000, v143, v145, "Could not read metadata array while parsing %s", v146, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22E2B117C](v148, -1, -1);
      MEMORY[0x22E2B117C](v146, -1, -1);
      outlined consume of Data._Representation(v166, v167);

      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v186, &demangling cache variable for type metadata for URL?);
      v151(v185, v153);
      (*(void (**)(uint64_t, uint64_t))(v187 + 8))(v140, v188);
      v151(v183, v153);

      return 0;
    }
    outlined consume of Data._Representation(v166, v167);

    v154 = *(void (**)(char *, uint64_t))(v47 + 8);
    v154(v141, v144);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v186, &demangling cache variable for type metadata for URL?);
    v154(v142, v144);
    (*(void (**)(uint64_t, uint64_t))(v187 + 8))(v140, v188);
    v154(v183, v144);
  }
  else
  {
    v138 = (id)v194;

    swift_bridgeObjectRelease();
    v139 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    outlined consume of Data._Representation(v66, v68);
    v54 = v178;
    Logger.init()();
    v55 = v139;
    v56 = v139;
    v57 = Logger.logObject.getter();
    v58 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v57, v58))
    {
      v59 = (uint8_t *)swift_slowAlloc();
      v60 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v59 = 138412290;
      v61 = v139;
      v62 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)&v194 = v62;
      v48 = v181;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v60 = v62;

      _os_log_impl(&dword_2282CC000, v57, v58, "Encountered an error reading embedding metadata plist: %@", v59, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      v63 = v60;
      v54 = v178;
      MEMORY[0x22E2B117C](v63, -1, -1);
      MEMORY[0x22E2B117C](v59, -1, -1);

    }
    else
    {

    }
    v64 = v185;

    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v186, &demangling cache variable for type metadata for URL?);
    v65 = *(void (**)(uint64_t, uint64_t))(v47 + 8);
    v65((uint64_t)v64, v48);
    (*(void (**)(char *, uint64_t))(v187 + 8))(v54, v188);
    v65((uint64_t)v183, v48);
  }

  return 0;
}

BOOL partial apply for closure #2 in FrozenNLEmbeddingVectorRetrieval.fetchNeighborsForVector(vector:distanceLimit:countLimit:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;

  return closure #2 in FrozenNLEmbeddingVectorRetrieval.fetchNeighborsForVector(vector:distanceLimit:countLimit:)(a1, a2, a3, *(float *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD ***)(v3 + 40));
}

_QWORD *initializeBufferWithCopyOfBuffer for FrozenNLEmbeddingVectorRetrieval(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for FrozenNLEmbeddingVectorRetrieval(id *a1)
{

  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for FrozenNLEmbeddingVectorRetrieval(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

id *assignWithTake for FrozenNLEmbeddingVectorRetrieval(id *a1, _OWORD *a2)
{

  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for FrozenNLEmbeddingVectorRetrieval()
{
  return &type metadata for FrozenNLEmbeddingVectorRetrieval;
}

unint64_t type metadata accessor for NLEmbedding()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NLEmbedding;
  if (!lazy cache variable for type metadata for NLEmbedding)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NLEmbedding);
  }
  return result;
}

__n128 FeatureProviderWithMask.init(embedding:attentionMask:tokenized:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __n128 result;
  __int128 v8;
  __int128 v9;
  _OWORD v10[3];

  outlined init with take of TokenizerOutput?(a3, (uint64_t)v10);
  result = (__n128)v10[0];
  v8 = v10[1];
  v9 = v10[2];
  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = a2;
  *(__n128 *)(a4 + 16) = result;
  *(_OWORD *)(a4 + 32) = v8;
  *(_OWORD *)(a4 + 48) = v9;
  return result;
}

double FeatureProviderWithMask.init(embedding:attentionMask:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double result;

  *(_QWORD *)a3 = a1;
  *(_QWORD *)(a3 + 8) = a2;
  result = 0.0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  return result;
}

uint64_t FeatureProviderWithMask.embedding.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t FeatureProviderWithMask.embedding.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_unknownObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*FeatureProviderWithMask.embedding.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t FeatureProviderWithMask.attentionMask.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FeatureProviderWithMask.attentionMask.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*FeatureProviderWithMask.attentionMask.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t FeatureProviderWithMask.tokenized.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of TokenizerOutput?(v1 + 16, a1);
}

uint64_t outlined init with copy of TokenizerOutput?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenizerOutput?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t FeatureProviderWithMask.tokenized.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of TokenizerOutput?(a1, v1 + 16);
}

uint64_t outlined assign with take of TokenizerOutput?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenizerOutput?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*FeatureProviderWithMask.tokenized.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t destroy for FeatureProviderWithMask(uint64_t a1)
{
  uint64_t result;

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *initializeWithCopy for FeatureProviderWithMask(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v6 = a2 + 2;
  v5 = a2[2];
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  if (v5)
  {
    v7 = a2[3];
    v8 = a2[4];
    a1[2] = v5;
    a1[3] = v7;
    v10 = a2[5];
    v9 = a2[6];
    a1[4] = v8;
    a1[5] = v10;
    v11 = a2[7];
    a1[6] = v9;
    a1[7] = v11;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v12 = v6[1];
    *((_OWORD *)a1 + 1) = *v6;
    *((_OWORD *)a1 + 2) = v12;
    *((_OWORD *)a1 + 3) = v6[2];
  }
  return a1;
}

_QWORD *assignWithCopy for FeatureProviderWithMask(_QWORD *a1, _QWORD *a2)
{
  _OWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a1 + 2;
  v6 = a2 + 2;
  v5 = a2[2];
  if (a1[2])
  {
    if (v5)
    {
      a1[2] = v5;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[4] = a2[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[5] = a2[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[6] = a2[6];
      a1[7] = a2[7];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of TokenizerOutput((uint64_t)(a1 + 2));
      v8 = *((_OWORD *)a2 + 2);
      v7 = *((_OWORD *)a2 + 3);
      *v4 = *v6;
      *((_OWORD *)a1 + 2) = v8;
      *((_OWORD *)a1 + 3) = v7;
    }
  }
  else if (v5)
  {
    a1[2] = v5;
    a1[3] = a2[3];
    a1[4] = a2[4];
    a1[5] = a2[5];
    a1[6] = a2[6];
    a1[7] = a2[7];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v9 = *v6;
    v10 = *((_OWORD *)a2 + 3);
    *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
    *((_OWORD *)a1 + 3) = v10;
    *v4 = v9;
  }
  return a1;
}

uint64_t outlined destroy of TokenizerOutput(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BEB6C90] - 8) + 8))();
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for FeatureProviderWithMask(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_5;
  if (!v4)
  {
    outlined destroy of TokenizerOutput(a1 + 16);
LABEL_5:
    v6 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v6;
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    return a1;
  }
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FeatureProviderWithMask(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FeatureProviderWithMask(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FeatureProviderWithMask()
{
  return &type metadata for FeatureProviderWithMask;
}

uint64_t DUDocumentAttribute.__allocating_init<A>(proto:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char v16;
  void (*v17)(char *, uint64_t, uint64_t, int *);
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t (*v32)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t);
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute?);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (int *)type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute();
  v13 = *((_QWORD *)v12 - 1);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a2);
  v16 = swift_dynamicCast();
  v17 = *(void (**)(char *, uint64_t, uint64_t, int *))(v13 + 56);
  if ((v16 & 1) != 0)
  {
    v17(v8, 0, 1, v12);
    outlined init with take of DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute((uint64_t)v8, (uint64_t)v15);
    v18 = &v15[v12[5]];
    v19 = *((_QWORD *)v18 + 1);
    if (v19)
    {
      v20 = *(_QWORD *)v18;
      v39 = v19;
      v40 = v20;
    }
    else
    {
      v39 = 0xE000000000000000;
      v40 = 0;
    }
    v22 = &v15[v12[6]];
    v23 = *((_QWORD *)v22 + 1);
    if (v23)
    {
      v24 = *(_QWORD *)v22;
      v37 = v23;
      v38 = v24;
    }
    else
    {
      v37 = 0xE000000000000000;
      v38 = 0;
    }
    v25 = &v15[v12[7]];
    v26 = *((_QWORD *)v25 + 1);
    if (v26)
    {
      v27 = *(_QWORD *)v25;
      v35 = v26;
      v36 = v27;
    }
    else
    {
      v35 = 0xE000000000000000;
      v36 = 0;
    }
    v28 = &v15[v12[8]];
    v29 = *((_QWORD *)v28 + 1);
    v41 = a1;
    if (v29)
    {
      v30 = *(_QWORD *)v28;
      v31 = v29;
    }
    else
    {
      v30 = 0;
      v31 = 0xE000000000000000;
    }
    v32 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t))(v2 + 208);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v21 = v32(v40, v39, v38, v37, v36, v35, v30, v31);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v41, a2);
    outlined destroy of DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute((uint64_t)v15);
  }
  else
  {
    v17(v8, 1, 1, v12);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, a2);
    outlined destroy of DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute?((uint64_t)v8);
    return 0;
  }
  return v21;
}

uint64_t outlined destroy of DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t DUDocumentAttribute.attributeNamespace.getter()
{
  return PoemMessage.path.getter(&OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentAttribute_attributeNamespace);
}

uint64_t DUDocumentAttribute.attributeNamespace.setter(uint64_t a1, uint64_t a2)
{
  return PoemMessage.path.setter(a1, a2, &OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentAttribute_attributeNamespace);
}

uint64_t (*DUDocumentAttribute.attributeNamespace.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUDocumentAttribute.attributeType.getter()
{
  return PoemMessage.path.getter(&OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentAttribute_attributeType);
}

uint64_t DUDocumentAttribute.attributeType.setter(uint64_t a1, uint64_t a2)
{
  return PoemMessage.path.setter(a1, a2, &OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentAttribute_attributeType);
}

uint64_t (*DUDocumentAttribute.attributeType.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUDocumentAttribute.attributeID.getter()
{
  return PoemMessage.path.getter(&OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentAttribute_attributeID);
}

uint64_t DUDocumentAttribute.attributeID.setter(uint64_t a1, uint64_t a2)
{
  return PoemMessage.path.setter(a1, a2, &OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentAttribute_attributeID);
}

uint64_t (*DUDocumentAttribute.attributeID.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryConfidence.modify;
}

uint64_t DUDocumentAttribute.displayName.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentAttribute_displayName);
  swift_beginAccess();
  v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t DUDocumentAttribute.displayName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentAttribute_displayName);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*DUDocumentAttribute.displayName.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

char *DUDocumentAttribute.supportsSecureCoding.unsafeMutableAddressor()
{
  return &static DUDocumentAttribute.supportsSecureCoding;
}

uint64_t static DUDocumentAttribute.supportsSecureCoding.getter()
{
  swift_beginAccess();
  return static DUDocumentAttribute.supportsSecureCoding;
}

uint64_t static DUDocumentAttribute.supportsSecureCoding.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  static DUDocumentAttribute.supportsSecureCoding = a1;
  return result;
}

uint64_t (*static DUDocumentAttribute.supportsSecureCoding.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

id DUDocumentAttribute.__allocating_init(attributeNamespace:attributeType:attributeID:displayName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  objc_class *v8;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  objc_super v23;

  v16 = (char *)objc_allocWithZone(v8);
  v17 = &v16[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentAttribute_displayName];
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = 0;
  v18 = &v16[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentAttribute_attributeNamespace];
  *(_QWORD *)v18 = a1;
  *((_QWORD *)v18 + 1) = a2;
  v19 = &v16[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentAttribute_attributeType];
  *(_QWORD *)v19 = a3;
  *((_QWORD *)v19 + 1) = a4;
  v20 = &v16[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentAttribute_attributeID];
  *(_QWORD *)v20 = a5;
  *((_QWORD *)v20 + 1) = a6;
  swift_beginAccess();
  *(_QWORD *)v17 = a7;
  *((_QWORD *)v17 + 1) = a8;
  swift_bridgeObjectRelease();
  v23.receiver = v16;
  v23.super_class = v8;
  return objc_msgSendSuper2(&v23, sel_init);
}

id DUDocumentAttribute.init(attributeNamespace:attributeType:attributeID:displayName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  objc_super v16;

  v11 = &v8[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentAttribute_displayName];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  v12 = &v8[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentAttribute_attributeNamespace];
  *(_QWORD *)v12 = a1;
  *((_QWORD *)v12 + 1) = a2;
  v13 = &v8[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentAttribute_attributeType];
  *(_QWORD *)v13 = a3;
  *((_QWORD *)v13 + 1) = a4;
  v14 = &v8[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentAttribute_attributeID];
  *(_QWORD *)v14 = a5;
  *((_QWORD *)v14 + 1) = a6;
  swift_beginAccess();
  *(_QWORD *)v11 = a7;
  *((_QWORD *)v11 + 1) = a8;
  swift_bridgeObjectRelease();
  v16.receiver = v8;
  v16.super_class = (Class)type metadata accessor for DUDocumentAttribute();
  return objc_msgSendSuper2(&v16, sel_init);
}

uint64_t type metadata accessor for DUDocumentAttribute()
{
  return objc_opt_self();
}

uint64_t DUDocumentAttribute.protoRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  int *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  UnknownStorage.init()();
  v3 = (int *)type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute();
  v4 = (_QWORD *)(a1 + v3[5]);
  *v4 = 0;
  v4[1] = 0;
  v5 = (_QWORD *)(a1 + v3[6]);
  *v5 = 0;
  v5[1] = 0;
  v6 = (_QWORD *)(a1 + v3[7]);
  *v6 = 0;
  v6[1] = 0;
  v7 = (uint64_t *)(a1 + v3[8]);
  *v7 = 0;
  v7[1] = 0;
  v8 = (_QWORD *)MEMORY[0x24BEE4EA0];
  *v4 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v1) + 0x70))();
  v4[1] = v9;
  *v5 = (*(uint64_t (**)(void))((*v8 & *v1) + 0x88))();
  v5[1] = v10;
  *v6 = (*(uint64_t (**)(void))((*v8 & *v1) + 0xA0))();
  v6[1] = v11;
  result = (*(uint64_t (**)(void))((*v8 & *v1) + 0xB8))();
  if (v13)
  {
    *v7 = result;
    v7[1] = v13;
  }
  return result;
}

uint64_t DUDocumentAttribute.copy(with:)@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  uint64_t result;
  uint64_t v9;

  v3 = type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute();
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0xE0))(v4);
  v7 = specialized DUDocumentAttribute.__allocating_init<A>(proto:)((uint64_t)v6);
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DUDocumentAttribute?);
  a1[3] = result;
  *a1 = v7;
  return result;
}

Swift::Void __swiftcall DUDocumentAttribute.encode(with:)(NSCoder with)
{
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;

  type metadata accessor for DUDocumentAttribute();
  lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DUDocumentAttribute and conformance DUDocumentAttribute, v2, (uint64_t (*)(uint64_t))type metadata accessor for DUDocumentAttribute, (uint64_t)&protocol conformance descriptor for DUDocumentAttribute);
  v3 = (void *)DUProtobufEncodableProtocol.serializedData()();
  if (v3)
  {
    v4 = v3;
    v5 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000016, 0x80000002284DABA0);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v4, v5);

  }
}

uint64_t DUDocumentAttribute.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return DUDocumentAttribute.init(coder:)(a1);
}

uint64_t DUDocumentAttribute.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  swift_getObjectType();
  type metadata accessor for NSData();
  v3 = v1;
  if (!NSCoder.decodeObject<A>(of:forKey:)())
  {

    goto LABEL_5;
  }
  swift_getObjectType();

  lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DUDocumentAttribute and conformance DUDocumentAttribute, v4, (uint64_t (*)(uint64_t))type metadata accessor for DUDocumentAttribute, (uint64_t)&protocol conformance descriptor for DUDocumentAttribute);
  DUProtobufEncodableProtocol.init(serializedData:)();

  v5 = v7;
  if (!v7)
  {
LABEL_5:
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v5;
}

id DUDocumentAttribute.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void DUDocumentAttribute.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id DUDocumentAttribute.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DUDocumentAttribute();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t associated type witness table accessor for DUProtobufEncodableProtocol.ProtobufType : Message in DUDocumentAttribute()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for DUProtobufEncodableProtocol.protoRepresentation.getter in conformance DUDocumentAttribute()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **v0) + 0xE0))();
}

uint64_t protocol witness for DUProtobufEncodableProtocol.init(proto:) in conformance DUDocumentAttribute@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 216);
  v6 = type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute();
  v7 = lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute and conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute, 255, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute);
  result = v5(a1, v6, v7);
  *a2 = result;
  return result;
}

uint64_t sub_228439250()
{
  return lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute and conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute, 255, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute);
}

id DURawDocument.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t DURawDocument.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return DURawDocument.init(coder:)(a1);
}

char *DURawDocument.__allocating_init<A>(proto:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  objc_class *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  char *v34;
  char v35;
  void (*v36)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  char *v38;
  _QWORD *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  char *v100;
  uint64_t v101;
  char *v102;
  void **v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  void **v112;
  void *v113;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData?);
  MEMORY[0x24BDAC7A8](v6);
  v129 = (uint64_t)&v115 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData();
  v126 = *(_QWORD *)(v8 - 8);
  v127 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v128 = (char *)&v115 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement();
  v119 = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v118 = (char *)&v115 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v115 - v13;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData?);
  MEMORY[0x24BDAC7A8](v15);
  v125 = (uint64_t)&v115 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData();
  v122 = *(_QWORD *)(v17 - 8);
  v123 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v124 = (uint64_t *)((char *)&v115 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v19);
  v121 = (char *)&v115 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v21);
  v120 = (char *)&v115 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
  v24 = MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)&v115 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v29 = (char *)&v115 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0);
  v31 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v130 = (uint64_t)&v115 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = objc_msgSend(objc_allocWithZone(v3), sel_init);
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v29, a1, a2);
  v34 = (char *)v33;
  v35 = swift_dynamicCast();
  v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56);
  if ((v35 & 1) != 0)
  {
    v115 = v27;
    v116 = a1;
    v117 = a2;
    v36(v26, 0, 1, v30);
    v37 = v130;
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v26, v130, type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document);
    v38 = (char *)*(int *)(v30 + 20);
    v39 = *(_QWORD **)&v38[v37];
    swift_beginAccess();
    v40 = v34;
    v42 = v39[2];
    v41 = v39[3];
    v43 = &v40[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_headline];
    swift_beginAccess();
    *(_QWORD *)v43 = v42;
    *((_QWORD *)v43 + 1) = v41;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v45 = v39[4];
    v44 = v39[5];
    v46 = &v40[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_subHeadline];
    swift_beginAccess();
    *(_QWORD *)v46 = v45;
    *((_QWORD *)v46 + 1) = v44;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v48 = v39[6];
    v47 = v39[7];
    v49 = &v40[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_version];
    swift_beginAccess();
    *(_QWORD *)v49 = v48;
    *((_QWORD *)v49 + 1) = v47;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v51 = v39[8];
    v50 = v39[9];
    v52 = &v40[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_creator];
    swift_beginAccess();
    *(_QWORD *)v52 = v51;
    *((_QWORD *)v52 + 1) = v50;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v54 = v39[10];
    v53 = v39[11];
    v55 = &v40[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_abstract];
    swift_beginAccess();
    *(_QWORD *)v55 = v54;
    *((_QWORD *)v55 + 1) = v53;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v57 = v39[12];
    v56 = v39[13];
    v58 = &v40[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_comment];
    swift_beginAccess();
    *(_QWORD *)v58 = v57;
    *((_QWORD *)v58 + 1) = v56;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v60 = v39[14];
    v59 = v39[15];
    v61 = &v40[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_text];
    swift_beginAccess();
    *(_QWORD *)v61 = v60;
    *((_QWORD *)v61 + 1) = v59;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v63 = v39[16];
    v62 = v39[17];
    v64 = &v40[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_inLanguage];
    swift_beginAccess();
    *(_QWORD *)v64 = v63;
    *((_QWORD *)v64 + 1) = v62;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v65 = v39[18];
    v66 = &v40[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_keywords];
    swift_beginAccess();
    *(_QWORD *)v66 = v65;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v68 = v39[19];
    v67 = v39[20];
    v69 = &v40[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_identifier];
    swift_beginAccess();
    *(_QWORD *)v69 = v68;
    *((_QWORD *)v69 + 1) = v67;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    swift_bridgeObjectRetain();
    v70 = (uint64_t)v120;
    URL.init(string:)();
    swift_bridgeObjectRelease();
    v71 = (uint64_t)&v40[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_url];
    swift_beginAccess();
    outlined assign with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v70, v71, &demangling cache variable for type metadata for URL?);
    swift_endAccess();
    v72 = v130;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    URL.init(string:)();
    swift_bridgeObjectRelease();
    v73 = (uint64_t)&v40[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_thumbnailUrl];
    swift_beginAccess();
    outlined assign with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v70, v73, &demangling cache variable for type metadata for URL?);
    swift_endAccess();
    swift_beginAccess();
    swift_bridgeObjectRetain();
    URL.init(string:)();
    swift_bridgeObjectRelease();
    v74 = (uint64_t)&v40[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_significantLink];
    swift_beginAccess();
    outlined assign with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v70, v74, &demangling cache variable for type metadata for URL?);
    swift_endAccess();
    swift_beginAccess();
    v75 = (uint64_t)v121;
    Date.init(timeIntervalSinceReferenceDate:)();
    v76 = type metadata accessor for Date();
    v77 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 56);
    v77(v75, 0, 1, v76);
    v78 = (uint64_t)&v40[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_dateCreated];
    swift_beginAccess();
    outlined assign with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v75, v78, &demangling cache variable for type metadata for Date?);
    swift_endAccess();
    swift_beginAccess();
    Date.init(timeIntervalSinceReferenceDate:)();
    v77(v75, 0, 1, v76);
    v120 = v40;
    v79 = (uint64_t)&v40[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_dateModified];
    swift_beginAccess();
    outlined assign with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v75, v79, &demangling cache variable for type metadata for Date?);
    swift_endAccess();
    v80 = *(_QWORD *)&v38[v72];
    swift_beginAccess();
    v81 = *(_QWORD *)(v80 + 232);
    v131 = MEMORY[0x24BEE4AF8];
    v82 = *(_QWORD *)(v81 + 16);
    if (v82)
    {
      v121 = v38;
      v83 = v81 + ((*(unsigned __int8 *)(v119 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v119 + 80));
      v84 = *(_QWORD *)(v119 + 72);
      v119 = v81;
      swift_bridgeObjectRetain();
      v85 = (uint64_t)v118;
      do
      {
        outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v83, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement);
        outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v14, v85, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement);
        v86 = specialized DUDocumentUIElement.__allocating_init<A>(proto:)(v85);
        v87 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement);
        if (v86)
        {
          MEMORY[0x22E2AFAFC](v87);
          if (*(_QWORD *)((v131 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v131 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        v83 += v84;
        --v82;
      }
      while (v82);
      v89 = v131;
      v90 = v130;
      v38 = v121;
    }
    else
    {
      v90 = v72;
      swift_bridgeObjectRetain();
      v89 = MEMORY[0x24BEE4AF8];
    }
    swift_bridgeObjectRelease();
    v88 = v120;
    v91 = &v120[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_documentUIElements];
    swift_beginAccess();
    *(_QWORD *)v91 = v89;
    swift_bridgeObjectRelease();
    v92 = *(_QWORD *)&v38[v90]
        + OBJC_IVAR____TtCV21DocumentUnderstanding53DocumentUnderstanding_DocumentRepresentation_DocumentP33_B25D73F1E23932B4C52C7495EED50DAA13_StorageClass__documentHtmldata;
    swift_beginAccess();
    v93 = v125;
    outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v92, v125, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData?);
    v94 = v123;
    v95 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v122 + 48))(v93, 1, v123);
    v96 = v116;
    v97 = v128;
    v98 = v126;
    v99 = v124;
    if (v95 == 1)
    {
      *v124 = 0;
      v99[1] = 0xE000000000000000;
      UnknownStorage.init()();
      v100 = (char *)v99 + *(int *)(v94 + 24);
      v101 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v101 - 8) + 56))(v100, 1, 1, v101);
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v93, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData?);
    }
    else
    {
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v93, (uint64_t)v124, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData);
    }
    v102 = specialized DUDocumentHTMLData.__allocating_init<A>(proto:)((uint64_t)v99);
    v103 = (void **)&v88[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_documentHTMLData];
    swift_beginAccess();
    v104 = *v103;
    *v103 = v102;

    v105 = *(_QWORD *)&v38[v90]
         + OBJC_IVAR____TtCV21DocumentUnderstanding53DocumentUnderstanding_DocumentRepresentation_DocumentP33_B25D73F1E23932B4C52C7495EED50DAA13_StorageClass__documentMessageData;
    swift_beginAccess();
    v106 = v105;
    v107 = v129;
    outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v106, v129, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v98 + 48))(v107, 1, v127) == 1)
    {
      *v97 = 0;
      v97[1] = 0xE000000000000000;
      v97[2] = 0;
      v97[3] = 0xE000000000000000;
      v108 = MEMORY[0x24BEE4AF8];
      v97[4] = MEMORY[0x24BEE4AF8];
      v97[5] = v108;
      v97[6] = 0;
      v97[7] = 0xE000000000000000;
      v97[8] = 0;
      v97[9] = 0xE000000000000000;
      UnknownStorage.init()();
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v107, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData?);
    }
    else
    {
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v107, (uint64_t)v97, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData);
    }
    v109 = v117;
    v110 = v115;
    v111 = specialized DUDocumentMessageData.__allocating_init<A>(proto:)((uint64_t)v97);
    (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v96, v109);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v90, type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document);
    v112 = (void **)&v88[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_documentMessageData];
    swift_beginAccess();
    v113 = *v112;
    *v112 = v111;

  }
  else
  {
    v36(v26, 1, 1, v30);

    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(a1, a2);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v26, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
    return 0;
  }
  return v88;
}

uint64_t DURawDocument.headline.getter()
{
  return PoemMessage.path.getter(&OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_headline);
}

uint64_t DURawDocument.headline.setter(uint64_t a1, uint64_t a2)
{
  return PoemMessage.path.setter(a1, a2, &OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_headline);
}

uint64_t (*DURawDocument.headline.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DURawDocument.subHeadline.getter()
{
  return PoemMessage.path.getter(&OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_subHeadline);
}

uint64_t DURawDocument.subHeadline.setter(uint64_t a1, uint64_t a2)
{
  return PoemMessage.path.setter(a1, a2, &OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_subHeadline);
}

uint64_t (*DURawDocument.subHeadline.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DURawDocument.version.getter()
{
  return PoemMessage.path.getter(&OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_version);
}

uint64_t DURawDocument.version.setter(uint64_t a1, uint64_t a2)
{
  return PoemMessage.path.setter(a1, a2, &OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_version);
}

uint64_t (*DURawDocument.version.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DURawDocument.creator.getter()
{
  return PoemMessage.path.getter(&OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_creator);
}

uint64_t DURawDocument.creator.setter(uint64_t a1, uint64_t a2)
{
  return PoemMessage.path.setter(a1, a2, &OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_creator);
}

uint64_t (*DURawDocument.creator.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DURawDocument.abstract.getter()
{
  return PoemMessage.path.getter(&OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_abstract);
}

uint64_t DURawDocument.abstract.setter(uint64_t a1, uint64_t a2)
{
  return PoemMessage.path.setter(a1, a2, &OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_abstract);
}

uint64_t (*DURawDocument.abstract.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DURawDocument.comment.getter()
{
  return PoemMessage.path.getter(&OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_comment);
}

uint64_t DURawDocument.comment.setter(uint64_t a1, uint64_t a2)
{
  return PoemMessage.path.setter(a1, a2, &OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_comment);
}

uint64_t (*DURawDocument.comment.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DURawDocument.text.getter()
{
  return PoemMessage.path.getter(&OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_text);
}

uint64_t DURawDocument.text.setter(uint64_t a1, uint64_t a2)
{
  return PoemMessage.path.setter(a1, a2, &OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_text);
}

uint64_t (*DURawDocument.text.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DURawDocument.inLanguage.getter()
{
  return PoemMessage.path.getter(&OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_inLanguage);
}

uint64_t DURawDocument.inLanguage.setter(uint64_t a1, uint64_t a2)
{
  return PoemMessage.path.setter(a1, a2, &OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_inLanguage);
}

uint64_t (*DURawDocument.inLanguage.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DURawDocument.keywords.getter()
{
  return PoemMessage.sender.getter();
}

uint64_t DURawDocument.keywords.setter(uint64_t a1)
{
  return PoemMessage.sender.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_keywords);
}

uint64_t (*DURawDocument.keywords.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DURawDocument.identifier.getter()
{
  return PoemMessage.path.getter(&OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_identifier);
}

uint64_t DURawDocument.identifier.setter(uint64_t a1, uint64_t a2)
{
  return PoemMessage.path.setter(a1, a2, &OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_identifier);
}

uint64_t (*DURawDocument.identifier.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryConfidence.modify;
}

uint64_t DURawDocument.url.getter@<X0>(uint64_t a1@<X8>)
{
  return DUDocumentUpdate.associatedFileURL.getter(&OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_url, &demangling cache variable for type metadata for URL?, a1);
}

uint64_t DURawDocument.url.setter(uint64_t a1)
{
  return DUDocumentUpdate.associatedFileURL.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_url, &demangling cache variable for type metadata for URL?);
}

uint64_t (*DURawDocument.url.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DURawDocument.thumbnailUrl.getter@<X0>(uint64_t a1@<X8>)
{
  return DUDocumentUpdate.associatedFileURL.getter(&OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_thumbnailUrl, &demangling cache variable for type metadata for URL?, a1);
}

uint64_t DURawDocument.thumbnailUrl.setter(uint64_t a1)
{
  return DUDocumentUpdate.associatedFileURL.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_thumbnailUrl, &demangling cache variable for type metadata for URL?);
}

uint64_t (*DURawDocument.thumbnailUrl.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DURawDocument.significantLink.getter@<X0>(uint64_t a1@<X8>)
{
  return DUDocumentUpdate.associatedFileURL.getter(&OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_significantLink, &demangling cache variable for type metadata for URL?, a1);
}

uint64_t DURawDocument.significantLink.setter(uint64_t a1)
{
  return DUDocumentUpdate.associatedFileURL.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_significantLink, &demangling cache variable for type metadata for URL?);
}

uint64_t (*DURawDocument.significantLink.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DURawDocument.dateCreated.getter@<X0>(uint64_t a1@<X8>)
{
  return DUDocumentUpdate.associatedFileURL.getter(&OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_dateCreated, &demangling cache variable for type metadata for Date?, a1);
}

uint64_t DURawDocument.dateCreated.setter(uint64_t a1)
{
  return DUDocumentUpdate.associatedFileURL.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_dateCreated, &demangling cache variable for type metadata for Date?);
}

uint64_t (*DURawDocument.dateCreated.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DURawDocument.dateModified.getter@<X0>(uint64_t a1@<X8>)
{
  return DUDocumentUpdate.associatedFileURL.getter(&OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_dateModified, &demangling cache variable for type metadata for Date?, a1);
}

uint64_t DURawDocument.dateModified.setter(uint64_t a1)
{
  return DUDocumentUpdate.associatedFileURL.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_dateModified, &demangling cache variable for type metadata for Date?);
}

uint64_t (*DURawDocument.dateModified.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

void *DURawDocument.documentMessageData.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_documentMessageData);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void DURawDocument.documentMessageData.setter(void *a1)
{
  DUResponse.topics.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_documentMessageData);
}

uint64_t (*DURawDocument.documentMessageData.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DURawDocument.documentUIElements.getter()
{
  return PoemMessage.sender.getter();
}

uint64_t DURawDocument.documentUIElements.setter(uint64_t a1)
{
  return PoemMessage.sender.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_documentUIElements);
}

uint64_t (*DURawDocument.documentUIElements.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

void *DURawDocument.documentHTMLData.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_documentHTMLData);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void DURawDocument.documentHTMLData.setter(void *a1)
{
  DUResponse.topics.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_documentHTMLData);
}

uint64_t (*DURawDocument.documentHTMLData.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

id DURawDocument.init()()
{
  char *v0;
  char *v1;
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t, uint64_t);
  char *v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t, uint64_t);
  objc_super v17;

  v1 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_headline];
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0;
  v2 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_subHeadline];
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  v3 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_version];
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;
  v4 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_creator];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_abstract];
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  v6 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_comment];
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  v7 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_text];
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  v8 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_inLanguage];
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_keywords] = 0;
  v9 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_identifier];
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  v10 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_url];
  v11 = type metadata accessor for URL();
  v12 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
  v12(v10, 1, 1, v11);
  v12(&v0[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_thumbnailUrl], 1, 1, v11);
  v12(&v0[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_significantLink], 1, 1, v11);
  v13 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_dateCreated];
  v14 = type metadata accessor for Date();
  v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56);
  v15(v13, 1, 1, v14);
  v15(&v0[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_dateModified], 1, 1, v14);
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_documentMessageData] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_documentUIElements] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_documentHTMLData] = 0;
  v17.receiver = v0;
  v17.super_class = (Class)type metadata accessor for DURawDocument();
  return objc_msgSendSuper2(&v17, sel_init);
}

Swift::Void __swiftcall DURawDocument.encode(with:)(NSCoder with)
{
  void *v2;
  id v3;
  void *v4;

  type metadata accessor for DURawDocument();
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DURawDocument and conformance DURawDocument, (uint64_t (*)(uint64_t))type metadata accessor for DURawDocument, (uint64_t)&protocol conformance descriptor for DURawDocument);
  v2 = (void *)DUProtobufEncodableProtocol.serializedData()();
  if (v2)
  {
    v3 = v2;
    v4 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000016, 0x80000002284DABA0);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v3, v4);

  }
}

uint64_t DURawDocument.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  uint64_t v6;

  swift_getObjectType();
  type metadata accessor for NSData();
  v3 = v1;
  if (!NSCoder.decodeObject<A>(of:forKey:)())
  {

    goto LABEL_5;
  }
  swift_getObjectType();

  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DURawDocument and conformance DURawDocument, (uint64_t (*)(uint64_t))type metadata accessor for DURawDocument, (uint64_t)&protocol conformance descriptor for DURawDocument);
  DUProtobufEncodableProtocol.init(serializedData:)();

  v4 = v6;
  if (!v6)
  {
LABEL_5:
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v4;
}

uint64_t type metadata accessor for DURawDocument()
{
  uint64_t result;

  result = type metadata singleton initialization cache for DURawDocument;
  if (!type metadata singleton initialization cache for DURawDocument)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t DURawDocument.copy(with:)@<X0>(char **a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t result;
  uint64_t v9;

  v3 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0x2B0))(v4);
  v7 = specialized DURawDocument.__allocating_init<A>(proto:)((uint64_t)v6);
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DURawDocument?);
  a1[3] = (char *)result;
  *a1 = v7;
  return result;
}

uint64_t DURawDocument.isEqual(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  _BYTE *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t (*v54)(void);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(void);
  uint64_t v59;
  uint64_t v60;
  char v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  _QWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int (*v118)(uint64_t, uint64_t, uint64_t);
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _BYTE *v122;
  void (*v123)(_BYTE *, uint64_t);
  _QWORD *v124;
  _BYTE *v125;
  uint64_t v126;
  _BYTE *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _BYTE *v132;
  _BYTE *v133;
  char v134;
  void (*v135)(_BYTE *, uint64_t);
  _QWORD *v136;
  _BYTE *v137;
  uint64_t v138;
  _BYTE *v139;
  _BYTE *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _BYTE *v145;
  _BYTE *v146;
  char v147;
  void (*v148)(_BYTE *, uint64_t);
  _QWORD *v149;
  _BYTE *v150;
  uint64_t v151;
  _BYTE *v152;
  _BYTE *v153;
  uint64_t v154;
  unsigned int (*v155)(uint64_t, uint64_t, uint64_t);
  uint64_t v156;
  uint64_t v157;
  _BYTE *v158;
  uint64_t v159;
  _BYTE *v160;
  char v161;
  void (*v162)(_BYTE *, uint64_t);
  _QWORD *v163;
  _BYTE *v164;
  uint64_t v165;
  _BYTE *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _BYTE *v171;
  uint64_t v172;
  _BYTE *v173;
  char v174;
  void (*v175)(_BYTE *, uint64_t);
  _QWORD *v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unsigned __int8 v181;
  _QWORD *v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  id v186;
  char v187;
  _QWORD *v189;
  uint64_t v190;
  void *v191;
  id v192;
  _BYTE v193[4];
  int v194;
  _BYTE *v195;
  uint64_t v196;
  uint64_t v197;
  _QWORD *v198;
  _QWORD *v199;
  _BYTE *v200;
  _BYTE *v201;
  _BYTE *v202;
  _BYTE *v203;
  _BYTE *v204;
  uint64_t v205;
  _BYTE *v206;
  _BYTE *v207;
  _BYTE *v208;
  _BYTE *v209;
  _BYTE *v210;
  _BYTE *v211;
  _BYTE *v212;
  _BYTE *v213;
  _BYTE *v214;
  _BYTE *v215;
  _BYTE *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  _QWORD *v220;
  _BYTE v221[24];
  uint64_t v222;

  v3 = type metadata accessor for Date();
  v205 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v200 = &v193[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Date?, Date?));
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = &v193[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v6);
  v208 = &v193[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v201 = &v193[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = MEMORY[0x24BDAC7A8](v11);
  v202 = &v193[-v14];
  v15 = MEMORY[0x24BDAC7A8](v13);
  v203 = &v193[-v16];
  v17 = MEMORY[0x24BDAC7A8](v15);
  v204 = &v193[-v18];
  v19 = MEMORY[0x24BDAC7A8](v17);
  v206 = &v193[-v20];
  MEMORY[0x24BDAC7A8](v19);
  v207 = &v193[-v21];
  v22 = type metadata accessor for URL();
  v218 = *(_QWORD *)(v22 - 8);
  v219 = v22;
  MEMORY[0x24BDAC7A8](v22);
  v214 = &v193[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v217 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL?, URL?));
  v24 = MEMORY[0x24BDAC7A8](v217);
  v212 = &v193[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v26 = MEMORY[0x24BDAC7A8](v24);
  v216 = &v193[-v27];
  MEMORY[0x24BDAC7A8](v26);
  v29 = &v193[-v28];
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v31 = MEMORY[0x24BDAC7A8](v30);
  v209 = &v193[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v33 = MEMORY[0x24BDAC7A8](v31);
  v210 = &v193[-v34];
  v35 = MEMORY[0x24BDAC7A8](v33);
  v211 = &v193[-v36];
  v37 = MEMORY[0x24BDAC7A8](v35);
  v213 = &v193[-v38];
  v39 = MEMORY[0x24BDAC7A8](v37);
  v41 = &v193[-v40];
  v42 = MEMORY[0x24BDAC7A8](v39);
  v215 = &v193[-v43];
  v44 = MEMORY[0x24BDAC7A8](v42);
  v46 = &v193[-v45];
  v47 = MEMORY[0x24BDAC7A8](v44);
  v49 = &v193[-v48];
  MEMORY[0x24BDAC7A8](v47);
  v51 = &v193[-v50];
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(a1, (uint64_t)v221, &demangling cache variable for type metadata for Any?);
  if (v222)
  {
    type metadata accessor for DURawDocument();
    if ((swift_dynamicCast() & 1) != 0)
    {
      v196 = v5;
      v195 = v8;
      v197 = v3;
      v52 = v220;
      v53 = (_QWORD *)MEMORY[0x24BEE4EA0];
      v54 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v1) + 0xE0);
      v198 = v1;
      v55 = v54();
      v57 = v56;
      v58 = *(uint64_t (**)(void))((*v53 & *v52) + 0xE0);
      v199 = v52;
      v59 = v58();
      if (v57)
      {
        if (!v60)
          goto LABEL_80;
        if (v55 == v59 && v57 == v60)
        {
          swift_bridgeObjectRelease();
          v59 = swift_bridgeObjectRelease();
        }
        else
        {
          v61 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          v59 = swift_bridgeObjectRelease();
          if ((v61 & 1) == 0)
            goto LABEL_125;
        }
      }
      else if (v60)
      {
        goto LABEL_80;
      }
      v62 = (_QWORD *)MEMORY[0x24BEE4EA0];
      v63 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v198) + 0xF8))(v59);
      v65 = v64;
      v66 = (*(uint64_t (**)(void))((*v62 & *v199) + 0xF8))();
      if (v65)
      {
        if (!v67)
          goto LABEL_80;
        if (v63 == v66 && v65 == v67)
        {
          swift_bridgeObjectRelease();
          v66 = swift_bridgeObjectRelease();
        }
        else
        {
          v68 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          v66 = swift_bridgeObjectRelease();
          if ((v68 & 1) == 0)
            goto LABEL_125;
        }
      }
      else if (v67)
      {
        goto LABEL_80;
      }
      v69 = (*(uint64_t (**)(uint64_t))((*v62 & *v198) + 0x110))(v66);
      v71 = v70;
      v72 = (*(uint64_t (**)(void))((*v62 & *v199) + 0x110))();
      if (v71)
      {
        if (!v73)
          goto LABEL_80;
        if (v69 == v72 && v71 == v73)
        {
          swift_bridgeObjectRelease();
          v72 = swift_bridgeObjectRelease();
        }
        else
        {
          v74 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          v72 = swift_bridgeObjectRelease();
          if ((v74 & 1) == 0)
            goto LABEL_125;
        }
      }
      else if (v73)
      {
        goto LABEL_80;
      }
      v75 = (*(uint64_t (**)(uint64_t))((*v62 & *v198) + 0x128))(v72);
      v77 = v76;
      v78 = (*(uint64_t (**)(void))((*v62 & *v199) + 0x128))();
      if (v77)
      {
        if (!v79)
          goto LABEL_80;
        if (v75 == v78 && v77 == v79)
        {
          swift_bridgeObjectRelease();
          v78 = swift_bridgeObjectRelease();
        }
        else
        {
          v80 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          v78 = swift_bridgeObjectRelease();
          if ((v80 & 1) == 0)
            goto LABEL_125;
        }
      }
      else if (v79)
      {
        goto LABEL_80;
      }
      v81 = (*(uint64_t (**)(uint64_t))((*v62 & *v198) + 0x140))(v78);
      v83 = v82;
      v84 = (*(uint64_t (**)(void))((*v62 & *v199) + 0x140))();
      if (v83)
      {
        if (!v85)
          goto LABEL_80;
        if (v81 == v84 && v83 == v85)
        {
          swift_bridgeObjectRelease();
          v84 = swift_bridgeObjectRelease();
        }
        else
        {
          v86 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          v84 = swift_bridgeObjectRelease();
          if ((v86 & 1) == 0)
            goto LABEL_125;
        }
      }
      else if (v85)
      {
        goto LABEL_80;
      }
      v87 = (*(uint64_t (**)(uint64_t))((*v62 & *v198) + 0x158))(v84);
      v89 = v88;
      v90 = (*(uint64_t (**)(void))((*v62 & *v199) + 0x158))();
      if (v89)
      {
        if (!v91)
          goto LABEL_80;
        if (v87 == v90 && v89 == v91)
        {
          swift_bridgeObjectRelease();
          v90 = swift_bridgeObjectRelease();
        }
        else
        {
          v92 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          v90 = swift_bridgeObjectRelease();
          if ((v92 & 1) == 0)
            goto LABEL_125;
        }
      }
      else if (v91)
      {
        goto LABEL_80;
      }
      v93 = (*(uint64_t (**)(uint64_t))((*v62 & *v198) + 0x170))(v90);
      v95 = v94;
      v96 = (*(uint64_t (**)(void))((*v62 & *v199) + 0x170))();
      if (v95)
      {
        if (!v97)
          goto LABEL_80;
        if (v93 == v96 && v95 == v97)
        {
          swift_bridgeObjectRelease();
          v96 = swift_bridgeObjectRelease();
        }
        else
        {
          v98 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          v96 = swift_bridgeObjectRelease();
          if ((v98 & 1) == 0)
            goto LABEL_125;
        }
      }
      else if (v97)
      {
        goto LABEL_80;
      }
      v99 = (*(uint64_t (**)(uint64_t))((*v62 & *v198) + 0x188))(v96);
      v101 = v100;
      v102 = (*(uint64_t (**)(void))((*v62 & *v199) + 0x188))();
      if (v101)
      {
        if (!v103)
          goto LABEL_80;
        if (v99 == v102 && v101 == v103)
        {
          swift_bridgeObjectRelease();
          v102 = swift_bridgeObjectRelease();
        }
        else
        {
          v104 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          v102 = swift_bridgeObjectRelease();
          if ((v104 & 1) == 0)
            goto LABEL_125;
        }
      }
      else if (v103)
      {
        goto LABEL_80;
      }
      v105 = (_QWORD *)MEMORY[0x24BEE4EA0];
      v106 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v198) + 0x1A0))(v102);
      v107 = (_QWORD *)(*(uint64_t (**)(void))((*v105 & *v199) + 0x1A0))();
      if (v106)
      {
        if (!v107)
          goto LABEL_80;
        v108 = specialized static Array<A>.== infix(_:_:)(v106, v107);
        swift_bridgeObjectRelease();
        v107 = (_QWORD *)swift_bridgeObjectRelease();
        if ((v108 & 1) == 0)
          goto LABEL_125;
      }
      else if (v107)
      {
        goto LABEL_80;
      }
      v109 = (*(uint64_t (**)(_QWORD *))((*v62 & *v198) + 0x1B8))(v107);
      v111 = v110;
      v112 = (*(uint64_t (**)(void))((*v62 & *v199) + 0x1B8))();
      if (v111)
      {
        if (v113)
        {
          if (v109 == v112 && v111 == v113)
          {
            swift_bridgeObjectRelease();
            v112 = swift_bridgeObjectRelease();
          }
          else
          {
            v114 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            v112 = swift_bridgeObjectRelease();
            if ((v114 & 1) == 0)
              goto LABEL_125;
          }
LABEL_82:
          v115 = (_QWORD *)MEMORY[0x24BEE4EA0];
          v116 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v198) + 0x1D0))(v112);
          (*(void (**)(uint64_t))((*v115 & *v199) + 0x1D0))(v116);
          v117 = (uint64_t)&v29[*(int *)(v217 + 48)];
          outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v51, (uint64_t)v29, &demangling cache variable for type metadata for URL?);
          outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v49, v117, &demangling cache variable for type metadata for URL?);
          v118 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v218 + 48);
          if (v118((uint64_t)v29, 1, v219) == 1)
          {
            outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v49, &demangling cache variable for type metadata for URL?);
            outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v51, &demangling cache variable for type metadata for URL?);
            if (v118(v117, 1, v219) == 1)
            {
              v119 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v29, &demangling cache variable for type metadata for URL?);
              goto LABEL_89;
            }
          }
          else
          {
            outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v29, (uint64_t)v46, &demangling cache variable for type metadata for URL?);
            if (v118(v117, 1, v219) != 1)
            {
              v120 = v218;
              v121 = v219;
              v122 = v214;
              (*(void (**)(_BYTE *, uint64_t, uint64_t))(v218 + 32))(v214, v117, v219);
              lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB00]);
              v194 = dispatch thunk of static Equatable.== infix(_:_:)();
              v123 = *(void (**)(_BYTE *, uint64_t))(v120 + 8);
              v123(v122, v121);
              outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v49, &demangling cache variable for type metadata for URL?);
              outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v51, &demangling cache variable for type metadata for URL?);
              v123(v46, v121);
              v119 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v29, &demangling cache variable for type metadata for URL?);
              if ((v194 & 1) == 0)
                goto LABEL_125;
LABEL_89:
              v124 = (_QWORD *)MEMORY[0x24BEE4EA0];
              v125 = v215;
              v126 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v198) + 0x1E8))(v119);
              (*(void (**)(uint64_t))((*v124 & *v199) + 0x1E8))(v126);
              v127 = v216;
              v128 = (uint64_t)&v216[*(int *)(v217 + 48)];
              outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v125, (uint64_t)v216, &demangling cache variable for type metadata for URL?);
              outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v41, v128, &demangling cache variable for type metadata for URL?);
              if (v118((uint64_t)v127, 1, v219) == 1)
              {
                outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v41, &demangling cache variable for type metadata for URL?);
                outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v215, &demangling cache variable for type metadata for URL?);
                if (v118(v128, 1, v219) == 1)
                {
                  v129 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v216, &demangling cache variable for type metadata for URL?);
                  goto LABEL_96;
                }
              }
              else
              {
                outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v216, (uint64_t)v213, &demangling cache variable for type metadata for URL?);
                if (v118(v128, 1, v219) != 1)
                {
                  v130 = v218;
                  v131 = v219;
                  v132 = v214;
                  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v218 + 32))(v214, v128, v219);
                  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB00]);
                  v133 = v213;
                  v134 = dispatch thunk of static Equatable.== infix(_:_:)();
                  v135 = *(void (**)(_BYTE *, uint64_t))(v130 + 8);
                  v135(v132, v131);
                  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v41, &demangling cache variable for type metadata for URL?);
                  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v215, &demangling cache variable for type metadata for URL?);
                  v135(v133, v131);
                  v129 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v216, &demangling cache variable for type metadata for URL?);
                  if ((v134 & 1) == 0)
                    goto LABEL_125;
LABEL_96:
                  v136 = (_QWORD *)MEMORY[0x24BEE4EA0];
                  v137 = v211;
                  v138 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v198) + 0x200))(v129);
                  v139 = v210;
                  (*(void (**)(uint64_t))((*v136 & *v199) + 0x200))(v138);
                  v140 = v212;
                  v141 = (uint64_t)&v212[*(int *)(v217 + 48)];
                  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v137, (uint64_t)v212, &demangling cache variable for type metadata for URL?);
                  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v139, v141, &demangling cache variable for type metadata for URL?);
                  if (v118((uint64_t)v140, 1, v219) == 1)
                  {
                    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v210, &demangling cache variable for type metadata for URL?);
                    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v211, &demangling cache variable for type metadata for URL?);
                    if (v118(v141, 1, v219) == 1)
                    {
                      v142 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v212, &demangling cache variable for type metadata for URL?);
                      goto LABEL_103;
                    }
                  }
                  else
                  {
                    outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v212, (uint64_t)v209, &demangling cache variable for type metadata for URL?);
                    if (v118(v141, 1, v219) != 1)
                    {
                      v143 = v218;
                      v144 = v219;
                      v145 = v214;
                      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v218 + 32))(v214, v141, v219);
                      lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB00]);
                      v146 = v209;
                      v147 = dispatch thunk of static Equatable.== infix(_:_:)();
                      v148 = *(void (**)(_BYTE *, uint64_t))(v143 + 8);
                      v148(v145, v144);
                      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v210, &demangling cache variable for type metadata for URL?);
                      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v211, &demangling cache variable for type metadata for URL?);
                      v148(v146, v144);
                      v142 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v212, &demangling cache variable for type metadata for URL?);
                      if ((v147 & 1) == 0)
                        goto LABEL_125;
LABEL_103:
                      v149 = (_QWORD *)MEMORY[0x24BEE4EA0];
                      v150 = v207;
                      v151 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v198) + 0x218))(v142);
                      v152 = v206;
                      (*(void (**)(uint64_t))((*v149 & *v199) + 0x218))(v151);
                      v153 = v208;
                      v154 = (uint64_t)&v208[*(int *)(v196 + 48)];
                      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v150, (uint64_t)v208, &demangling cache variable for type metadata for Date?);
                      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v152, v154, &demangling cache variable for type metadata for Date?);
                      v155 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v205 + 48);
                      if (v155((uint64_t)v153, 1, v197) == 1)
                      {
                        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v206, &demangling cache variable for type metadata for Date?);
                        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v207, &demangling cache variable for type metadata for Date?);
                        if (v155(v154, 1, v197) == 1)
                        {
                          v156 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v208, &demangling cache variable for type metadata for Date?);
LABEL_110:
                          v163 = (_QWORD *)MEMORY[0x24BEE4EA0];
                          v164 = v203;
                          v165 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v198) + 0x230))(v156);
                          v166 = v202;
                          (*(void (**)(uint64_t))((*v163 & *v199) + 0x230))(v165);
                          v167 = (uint64_t)v195;
                          v168 = (uint64_t)&v195[*(int *)(v196 + 48)];
                          outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v164, (uint64_t)v195, &demangling cache variable for type metadata for Date?);
                          outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v166, v168, &demangling cache variable for type metadata for Date?);
                          if (v155(v167, 1, v197) == 1)
                          {
                            outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v202, &demangling cache variable for type metadata for Date?);
                            outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v203, &demangling cache variable for type metadata for Date?);
                            if (v155(v168, 1, v197) == 1)
                            {
                              v169 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v195, &demangling cache variable for type metadata for Date?);
                              goto LABEL_117;
                            }
                            goto LABEL_115;
                          }
                          outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v195, (uint64_t)v201, &demangling cache variable for type metadata for Date?);
                          if (v155(v168, 1, v197) == 1)
                          {
                            outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v202, &demangling cache variable for type metadata for Date?);
                            outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v203, &demangling cache variable for type metadata for Date?);
                            (*(void (**)(_BYTE *, uint64_t))(v205 + 8))(v201, v197);
LABEL_115:
                            outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v195, &demangling cache variable for type metadata for (Date?, Date?));
                            goto LABEL_125;
                          }
                          v170 = v205;
                          v171 = v200;
                          v172 = v197;
                          (*(void (**)(_BYTE *, uint64_t, uint64_t))(v205 + 32))(v200, v168, v197);
                          lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE958]);
                          v173 = v201;
                          v174 = dispatch thunk of static Equatable.== infix(_:_:)();
                          v175 = *(void (**)(_BYTE *, uint64_t))(v170 + 8);
                          v175(v171, v172);
                          outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v202, &demangling cache variable for type metadata for Date?);
                          outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v203, &demangling cache variable for type metadata for Date?);
                          v175(v173, v172);
                          v169 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v195, &demangling cache variable for type metadata for Date?);
                          if ((v174 & 1) != 0)
                          {
LABEL_117:
                            v176 = (_QWORD *)MEMORY[0x24BEE4EA0];
                            v177 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v198) + 0x260))(v169);
                            v178 = (*(uint64_t (**)(void))((*v176 & *v199) + 0x260))();
                            v179 = v178;
                            if (v177)
                            {
                              if (v178)
                              {
                                v180 = swift_bridgeObjectRetain();
                                v181 = specialized static Array<A>.== infix(_:_:)(v180, v179);
                                swift_bridgeObjectRelease_n();
                                v178 = swift_bridgeObjectRelease();
                                if ((v181 & 1) == 0)
                                  goto LABEL_125;
LABEL_122:
                                v182 = (_QWORD *)MEMORY[0x24BEE4EA0];
                                v183 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v198)
                                                                                  + 0x278))(v178);
                                v184 = (*(uint64_t (**)(void))((*v182 & *v199) + 0x278))();
                                v185 = v184;
                                if (v183)
                                {
                                  if (!v184)
                                  {

                                    return v185 & 1;
                                  }
                                  type metadata accessor for DUDocumentHTMLData();
                                  v186 = v183;
                                  v187 = static NSObject.== infix(_:_:)();

                                  if ((v187 & 1) == 0)
                                    goto LABEL_125;
                                }
                                else if (v184)
                                {
LABEL_133:

                                  goto LABEL_126;
                                }
                                v189 = (_QWORD *)MEMORY[0x24BEE4EA0];
                                v185 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v198) + 0x248))();
                                v190 = (*(uint64_t (**)(void))((*v189 & *v199) + 0x248))();
                                v191 = (void *)v190;
                                if (!v185)
                                {

                                  if (!v191)
                                  {
                                    LOBYTE(v185) = 1;
                                    return v185 & 1;
                                  }

                                  goto LABEL_126;
                                }
                                if (v190)
                                {
                                  type metadata accessor for DUDocumentMessageData();
                                  v192 = (id)v185;
                                  LOBYTE(v185) = static NSObject.== infix(_:_:)();

                                  return v185 & 1;
                                }
                                goto LABEL_133;
                              }
                            }
                            else if (!v178)
                            {
                              goto LABEL_122;
                            }
                            goto LABEL_80;
                          }
LABEL_125:

                          goto LABEL_126;
                        }
                      }
                      else
                      {
                        outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v208, (uint64_t)v204, &demangling cache variable for type metadata for Date?);
                        if (v155(v154, 1, v197) != 1)
                        {
                          v157 = v205;
                          v158 = v200;
                          v159 = v197;
                          (*(void (**)(_BYTE *, uint64_t, uint64_t))(v205 + 32))(v200, v154, v197);
                          lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE958]);
                          v160 = v204;
                          v161 = dispatch thunk of static Equatable.== infix(_:_:)();
                          v162 = *(void (**)(_BYTE *, uint64_t))(v157 + 8);
                          v162(v158, v159);
                          outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v206, &demangling cache variable for type metadata for Date?);
                          outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v207, &demangling cache variable for type metadata for Date?);
                          v162(v160, v159);
                          v156 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v208, &demangling cache variable for type metadata for Date?);
                          if ((v161 & 1) == 0)
                            goto LABEL_125;
                          goto LABEL_110;
                        }
                        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v206, &demangling cache variable for type metadata for Date?);
                        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v207, &demangling cache variable for type metadata for Date?);
                        (*(void (**)(_BYTE *, uint64_t))(v205 + 8))(v204, v197);
                      }
                      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v208, &demangling cache variable for type metadata for (Date?, Date?));
                      goto LABEL_125;
                    }
                    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v210, &demangling cache variable for type metadata for URL?);
                    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v211, &demangling cache variable for type metadata for URL?);
                    (*(void (**)(_BYTE *, uint64_t))(v218 + 8))(v209, v219);
                  }
                  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v212, &demangling cache variable for type metadata for (URL?, URL?));
                  goto LABEL_125;
                }
                outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v41, &demangling cache variable for type metadata for URL?);
                outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v215, &demangling cache variable for type metadata for URL?);
                (*(void (**)(_BYTE *, uint64_t))(v218 + 8))(v213, v219);
              }
              outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v216, &demangling cache variable for type metadata for (URL?, URL?));
              goto LABEL_125;
            }
            outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v49, &demangling cache variable for type metadata for URL?);
            outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v51, &demangling cache variable for type metadata for URL?);
            (*(void (**)(_BYTE *, uint64_t))(v218 + 8))(v46, v219);
          }
          outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v29, &demangling cache variable for type metadata for (URL?, URL?));
          goto LABEL_125;
        }
      }
      else if (!v113)
      {
        goto LABEL_82;
      }
LABEL_80:

      swift_bridgeObjectRelease();
    }
  }
  else
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v221, &demangling cache variable for type metadata for Any?);
  }
LABEL_126:
  LOBYTE(v185) = 0;
  return v185 & 1;
}

uint64_t DURawDocument.protoRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t (*v55)(uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int (*v125)(uint64_t, uint64_t, uint64_t);
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t (*v155)(uint64_t, uint64_t, uint64_t);
  int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t result;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  _QWORD *v178;
  void *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  _QWORD *v188;
  void *v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  void (*v193)(uint64_t, _QWORD, uint64_t, uint64_t);
  int v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  _QWORD *v205;
  void *v206;
  uint64_t v207;
  int v208;
  uint64_t v209;
  void (*v210)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v211;
  _QWORD *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  char *v226;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  char *v230;
  uint64_t v231;
  char *v232;
  char *v233;
  char *v234;
  char *v235;
  char *v236;
  char *v237;
  char *v238;
  char *v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  _QWORD *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  char *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v220 = (uint64_t)&v217 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v219 = (uint64_t)&v217 - v8;
  MEMORY[0x24BDAC7A8](v7);
  v230 = (char *)&v217 - v9;
  v231 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData();
  v229 = *(_QWORD *)(v231 - 8);
  v10 = MEMORY[0x24BDAC7A8](v231);
  v223 = (uint64_t)&v217 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v226 = (char *)&v217 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v224 = (uint64_t)&v217 - v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData?);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v218 = (uint64_t)&v217 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v217 = (uint64_t)&v217 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v228 = (char *)&v217 - v20;
  v241 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData();
  v227 = *(_QWORD *)(v241 - 8);
  v21 = MEMORY[0x24BDAC7A8](v241);
  v221 = (uint64_t)&v217 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x24BDAC7A8](v21);
  v225 = (char *)&v217 - v24;
  MEMORY[0x24BDAC7A8](v23);
  v222 = (uint64_t)&v217 - v25;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement?);
  MEMORY[0x24BDAC7A8](v26);
  v251 = (uint64_t)&v217 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v250 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement();
  v252 = *(_QWORD *)(v250 - 8);
  v28 = MEMORY[0x24BDAC7A8](v250);
  v249 = (uint64_t)&v217 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = MEMORY[0x24BDAC7A8](v28);
  v248 = (char *)&v217 - v31;
  MEMORY[0x24BDAC7A8](v30);
  v244 = (uint64_t)&v217 - v32;
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v34 = MEMORY[0x24BDAC7A8](v33);
  v247 = (char *)&v217 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v34);
  v238 = (char *)&v217 - v36;
  v246 = type metadata accessor for Date();
  v243 = *(_QWORD **)(v246 - 8);
  v37 = MEMORY[0x24BDAC7A8](v246);
  v240 = (char *)&v217 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v37);
  v239 = (char *)&v217 - v39;
  v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v41 = MEMORY[0x24BDAC7A8](v40);
  v236 = (char *)&v217 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = MEMORY[0x24BDAC7A8](v41);
  v234 = (char *)&v217 - v44;
  MEMORY[0x24BDAC7A8](v43);
  v232 = (char *)&v217 - v45;
  v46 = type metadata accessor for URL();
  v47 = *(_QWORD *)(v46 - 8);
  v48 = MEMORY[0x24BDAC7A8](v46);
  v237 = (char *)&v217 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = MEMORY[0x24BDAC7A8](v48);
  v235 = (char *)&v217 - v51;
  MEMORY[0x24BDAC7A8](v50);
  v233 = (char *)&v217 - v52;
  UnknownStorage.init()();
  v53 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0) + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a1 + v53) = static DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.defaultInstance;
  v54 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v55 = *(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0xE0);
  v56 = swift_retain();
  v57 = v55(v56);
  v242 = a1;
  if (v58)
  {
    v59 = v57;
    v60 = v58;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
      swift_allocObject();
      v61 = (_QWORD *)swift_retain();
      a1 = v242;
      *(_QWORD *)(a1 + v53) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v61);
      swift_release();
    }
    v62 = *(_QWORD *)(a1 + v53);
    swift_beginAccess();
    *(_QWORD *)(v62 + 16) = v59;
    *(_QWORD *)(v62 + 24) = v60;
    v57 = swift_bridgeObjectRelease();
  }
  v245 = v53;
  v63 = (*(uint64_t (**)(uint64_t))((*v54 & *v2) + 0xF8))(v57);
  if (v64)
  {
    v65 = v63;
    v66 = v64;
    v67 = v245;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
      swift_allocObject();
      v68 = (_QWORD *)swift_retain();
      a1 = v242;
      *(_QWORD *)(a1 + v67) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v68);
      swift_release();
    }
    v69 = *(_QWORD *)(a1 + v67);
    swift_beginAccess();
    *(_QWORD *)(v69 + 32) = v65;
    *(_QWORD *)(v69 + 40) = v66;
    v63 = swift_bridgeObjectRelease();
  }
  v70 = (*(uint64_t (**)(uint64_t))((*v54 & *v2) + 0x110))(v63);
  if (v71)
  {
    v72 = v70;
    v73 = v71;
    v74 = v245;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
      swift_allocObject();
      v75 = (_QWORD *)swift_retain();
      a1 = v242;
      *(_QWORD *)(a1 + v74) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v75);
      swift_release();
    }
    v76 = *(_QWORD *)(a1 + v74);
    swift_beginAccess();
    *(_QWORD *)(v76 + 48) = v72;
    *(_QWORD *)(v76 + 56) = v73;
    v70 = swift_bridgeObjectRelease();
  }
  v77 = (*(uint64_t (**)(uint64_t))((*v54 & *v2) + 0x128))(v70);
  if (v78)
  {
    v79 = v77;
    v80 = v78;
    v81 = v245;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
      swift_allocObject();
      v82 = (_QWORD *)swift_retain();
      a1 = v242;
      *(_QWORD *)(a1 + v81) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v82);
      swift_release();
    }
    v83 = *(_QWORD *)(a1 + v81);
    swift_beginAccess();
    *(_QWORD *)(v83 + 64) = v79;
    *(_QWORD *)(v83 + 72) = v80;
    v77 = swift_bridgeObjectRelease();
  }
  v84 = (*(uint64_t (**)(uint64_t))((*v54 & *v2) + 0x140))(v77);
  if (v85)
  {
    v86 = v84;
    v87 = v85;
    v88 = v245;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
      swift_allocObject();
      v89 = (_QWORD *)swift_retain();
      a1 = v242;
      *(_QWORD *)(a1 + v88) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v89);
      swift_release();
    }
    v90 = *(_QWORD *)(a1 + v88);
    swift_beginAccess();
    *(_QWORD *)(v90 + 80) = v86;
    *(_QWORD *)(v90 + 88) = v87;
    v84 = swift_bridgeObjectRelease();
  }
  v91 = (*(uint64_t (**)(uint64_t))((*v54 & *v2) + 0x158))(v84);
  if (v92)
  {
    v93 = v91;
    v94 = v92;
    v95 = v245;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
      swift_allocObject();
      v96 = (_QWORD *)swift_retain();
      a1 = v242;
      *(_QWORD *)(a1 + v95) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v96);
      swift_release();
    }
    v97 = *(_QWORD *)(a1 + v95);
    swift_beginAccess();
    *(_QWORD *)(v97 + 96) = v93;
    *(_QWORD *)(v97 + 104) = v94;
    v91 = swift_bridgeObjectRelease();
  }
  v98 = (*(uint64_t (**)(uint64_t))((*v54 & *v2) + 0x170))(v91);
  if (v99)
  {
    v100 = v98;
    v101 = v99;
    v102 = v245;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
      swift_allocObject();
      v103 = (_QWORD *)swift_retain();
      a1 = v242;
      *(_QWORD *)(a1 + v102) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v103);
      swift_release();
    }
    v104 = *(_QWORD *)(a1 + v102);
    swift_beginAccess();
    *(_QWORD *)(v104 + 112) = v100;
    *(_QWORD *)(v104 + 120) = v101;
    v98 = swift_bridgeObjectRelease();
  }
  v105 = (*(uint64_t (**)(uint64_t))((*v54 & *v2) + 0x188))(v98);
  if (v106)
  {
    v107 = v105;
    v108 = v106;
    v109 = v245;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
      swift_allocObject();
      v110 = (_QWORD *)swift_retain();
      a1 = v242;
      *(_QWORD *)(a1 + v109) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v110);
      swift_release();
    }
    v111 = *(_QWORD *)(a1 + v109);
    swift_beginAccess();
    *(_QWORD *)(v111 + 128) = v107;
    *(_QWORD *)(v111 + 136) = v108;
    v105 = swift_bridgeObjectRelease();
  }
  v112 = (*(uint64_t (**)(uint64_t))((*v54 & *v2) + 0x1A0))(v105);
  if (v112)
  {
    v113 = v112;
    v114 = v245;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
      swift_allocObject();
      v115 = (_QWORD *)swift_retain();
      v114 = v245;
      *(_QWORD *)(a1 + v114) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v115);
      swift_release();
    }
    v116 = *(_QWORD *)(a1 + v114);
    swift_beginAccess();
    *(_QWORD *)(v116 + 144) = v113;
    swift_bridgeObjectRelease();
    v54 = (_QWORD *)MEMORY[0x24BEE4EA0];
  }
  v117 = (*(uint64_t (**)(void))((*v54 & *v2) + 0x1B8))();
  if (v118)
  {
    v119 = v117;
    v120 = v118;
    v121 = v245;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
      swift_allocObject();
      v122 = (_QWORD *)swift_retain();
      a1 = v242;
      *(_QWORD *)(a1 + v121) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v122);
      swift_release();
    }
    v123 = *(_QWORD *)(a1 + v121);
    swift_beginAccess();
    *(_QWORD *)(v123 + 152) = v119;
    *(_QWORD *)(v123 + 160) = v120;
    v117 = swift_bridgeObjectRelease();
  }
  v124 = (uint64_t)v232;
  (*(void (**)(uint64_t))((*v54 & *v2) + 0x1D0))(v117);
  v125 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48);
  if (v125(v124, 1, v46) == 1)
  {
    v126 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v124, &demangling cache variable for type metadata for URL?);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v47 + 32))(v233, v124, v46);
    v127 = URL.absoluteString.getter();
    v129 = v128;
    v130 = v245;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
      swift_allocObject();
      v131 = (_QWORD *)swift_retain();
      a1 = v242;
      *(_QWORD *)(a1 + v130) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v131);
      swift_release();
    }
    v132 = *(_QWORD *)(a1 + v130);
    swift_beginAccess();
    *(_QWORD *)(v132 + 168) = v127;
    *(_QWORD *)(v132 + 176) = v129;
    swift_bridgeObjectRelease();
    v126 = (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v233, v46);
    v54 = (_QWORD *)MEMORY[0x24BEE4EA0];
  }
  v133 = (uint64_t)v234;
  (*(void (**)(uint64_t))((*v54 & *v2) + 0x1E8))(v126);
  if (v125(v133, 1, v46) == 1)
  {
    v134 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v133, &demangling cache variable for type metadata for URL?);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v47 + 32))(v235, v133, v46);
    v135 = URL.absoluteString.getter();
    v137 = v136;
    v138 = v245;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
      swift_allocObject();
      v139 = (_QWORD *)swift_retain();
      a1 = v242;
      *(_QWORD *)(a1 + v138) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v139);
      swift_release();
    }
    v140 = *(_QWORD *)(a1 + v138);
    swift_beginAccess();
    *(_QWORD *)(v140 + 184) = v135;
    *(_QWORD *)(v140 + 192) = v137;
    swift_bridgeObjectRelease();
    v134 = (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v235, v46);
    v54 = (_QWORD *)MEMORY[0x24BEE4EA0];
  }
  v141 = (uint64_t)v247;
  v142 = (uint64_t)v236;
  (*(void (**)(uint64_t))((*v54 & *v2) + 0x200))(v134);
  if (v125(v142, 1, v46) == 1)
  {
    v143 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v142, &demangling cache variable for type metadata for URL?);
    v144 = v246;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v47 + 32))(v237, v142, v46);
    v145 = URL.absoluteString.getter();
    v147 = v146;
    v148 = v245;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v144 = v246;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
      swift_allocObject();
      v150 = (_QWORD *)swift_retain();
      a1 = v242;
      *(_QWORD *)(a1 + v148) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v150);
      swift_release();
    }
    v151 = *(_QWORD *)(a1 + v148);
    swift_beginAccess();
    *(_QWORD *)(v151 + 200) = v145;
    *(_QWORD *)(v151 + 208) = v147;
    swift_bridgeObjectRelease();
    v143 = (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v237, v46);
    v54 = (_QWORD *)MEMORY[0x24BEE4EA0];
    v141 = (uint64_t)v247;
  }
  v152 = v238;
  (*(void (**)(uint64_t))((*v54 & *v2) + 0x218))(v143);
  v153 = (uint64_t)v152;
  v154 = v243;
  v155 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v243[6];
  v156 = v155(v153, 1, v144);
  v157 = v241;
  if (v156 == 1)
  {
    v158 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v153, &demangling cache variable for type metadata for Date?);
  }
  else
  {
    ((void (*)(char *, uint64_t, uint64_t))v154[4])(v239, v153, v144);
    Date.timeIntervalSinceReferenceDate.getter();
    v160 = v159;
    v161 = v245;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
      swift_allocObject();
      v162 = (_QWORD *)swift_retain();
      v141 = (uint64_t)v247;
      *(_QWORD *)(a1 + v161) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v162);
      swift_release();
    }
    v163 = *(_QWORD *)(a1 + v161);
    swift_beginAccess();
    *(_QWORD *)(v163 + 216) = v160;
    v158 = ((uint64_t (*)(char *, uint64_t))v154[1])(v239, v144);
    v54 = (_QWORD *)MEMORY[0x24BEE4EA0];
  }
  (*(void (**)(uint64_t))((*v54 & *v2) + 0x230))(v158);
  if (v155(v141, 1, v144) == 1)
  {
    v164 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v141, &demangling cache variable for type metadata for Date?);
    v165 = v245;
  }
  else
  {
    ((void (*)(char *, uint64_t, uint64_t))v154[4])(v240, v141, v144);
    Date.timeIntervalSinceReferenceDate.getter();
    v167 = v166;
    v165 = v245;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
      swift_allocObject();
      v168 = (_QWORD *)swift_retain();
      *(_QWORD *)(a1 + v165) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v168);
      swift_release();
    }
    v169 = *(_QWORD *)(a1 + v165);
    swift_beginAccess();
    *(_QWORD *)(v169 + 224) = v167;
    v164 = ((uint64_t (*)(char *, uint64_t))v154[1])(v240, v144);
  }
  v170 = (*(uint64_t (**)(uint64_t))((*v54 & *v2) + 0x260))(v164);
  if (v170)
  {
    v171 = v170;
    if (v170 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v172 = result;
      if (result)
        goto LABEL_71;
    }
    else
    {
      v172 = *(_QWORD *)((v170 & 0xFFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v172)
      {
LABEL_71:
        if (v172 < 1)
        {
          __break(1u);
          return result;
        }
        v174 = 0;
        v247 = (char *)(v171 & 0xC000000000000001);
        v175 = MEMORY[0x24BEE4AF8];
        v243 = v2;
        v246 = v171;
        v176 = v250;
        do
        {
          v177 = v2;
          if (v247)
            v178 = (_QWORD *)MEMORY[0x22E2AFF34](v174, v171);
          else
            v178 = *(id *)(v171 + 8 * v174 + 32);
          v179 = v178;
          v180 = (uint64_t)v248;
          (*(void (**)(void))((*MEMORY[0x24BEE4EA0] & *v178) + 0x1F0))();
          v181 = v251;
          outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v180, v251, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement);
          v182 = v252;
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v252 + 56))(v181, 0, 1, v176);

          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v182 + 48))(v181, 1, v176) == 1)
          {
            outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v181, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement?);
            v2 = v177;
            v171 = v246;
          }
          else
          {
            v183 = v244;
            outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v181, v244, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement);
            outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v183, v249, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v175 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v175 + 16) + 1, 1, v175);
            v171 = v246;
            v185 = *(_QWORD *)(v175 + 16);
            v184 = *(_QWORD *)(v175 + 24);
            if (v185 >= v184 >> 1)
              v175 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v184 > 1, v185 + 1, 1, v175);
            *(_QWORD *)(v175 + 16) = v185 + 1;
            outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v249, v175+ ((*(unsigned __int8 *)(v252 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v252 + 80))+ *(_QWORD *)(v252 + 72) * v185, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement);
            v2 = v243;
          }
          ++v174;
        }
        while (v172 != v174);
        goto LABEL_86;
      }
    }
    v175 = MEMORY[0x24BEE4AF8];
LABEL_86:
    swift_bridgeObjectRelease_n();
    a1 = v242;
    v165 = v245;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
      swift_allocObject();
      v186 = (_QWORD *)swift_retain();
      *(_QWORD *)(a1 + v165) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v186);
      swift_release();
    }
    v187 = *(_QWORD *)(a1 + v165);
    swift_beginAccess();
    *(_QWORD *)(v187 + 232) = v175;
    swift_bridgeObjectRelease();
    v157 = v241;
    v54 = (_QWORD *)MEMORY[0x24BEE4EA0];
  }
  v188 = (_QWORD *)(*(uint64_t (**)(void))((*v54 & *v2) + 0x278))();
  if (!v188)
  {
    v190 = (uint64_t)v228;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v227 + 56))(v228, 1, 1, v157);
    v195 = v231;
    goto LABEL_95;
  }
  v189 = v188;
  (*(void (**)(void))((*v54 & *v188) + 0xB0))();

  v190 = (uint64_t)v228;
  v191 = swift_dynamicCast();
  v192 = v227;
  v193 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v227 + 56);
  v193(v190, v191 ^ 1u, 1, v157);
  v194 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v192 + 48))(v190, 1, v157);
  v195 = v231;
  if (v194 == 1)
  {
LABEL_95:
    v203 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v190, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData?);
    goto LABEL_96;
  }
  v196 = v222;
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v190, v222, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData);
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v196, v221, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
    swift_allocObject();
    v197 = (_QWORD *)swift_retain();
    *(_QWORD *)(a1 + v165) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v197);
    swift_release();
  }
  v198 = *(_QWORD *)(a1 + v165);
  v199 = v217;
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v221, v217, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData);
  v193(v199, 0, 1, v157);
  v200 = v218;
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v199, v218, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData?);
  v201 = v198
       + OBJC_IVAR____TtCV21DocumentUnderstanding53DocumentUnderstanding_DocumentRepresentation_DocumentP33_B25D73F1E23932B4C52C7495EED50DAA13_StorageClass__documentHtmldata;
  swift_beginAccess();
  swift_retain();
  v202 = v201;
  v165 = v245;
  outlined assign with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v200, v202, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData?);
  swift_endAccess();
  swift_release();
  v203 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v222, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData);
LABEL_96:
  v204 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v205 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v2) + 0x248))(v203);
  if (!v205)
  {
    v207 = (uint64_t)v230;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v229 + 56))(v230, 1, 1, v195);
    return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v207, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData?);
  }
  v206 = v205;
  (*(void (**)(void))((*v204 & *v205) + 0x130))();

  v207 = (uint64_t)v230;
  v208 = swift_dynamicCast();
  v209 = v229;
  v210 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v229 + 56);
  v210(v207, v208 ^ 1u, 1, v195);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v209 + 48))(v207, 1, v195) == 1)
    return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v207, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData?);
  v211 = v224;
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v207, v224, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData);
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v211, v223, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document._StorageClass(0);
    swift_allocObject();
    v212 = (_QWORD *)swift_retain();
    *(_QWORD *)(a1 + v165) = DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.init(copying:)(v212);
    swift_release();
  }
  v213 = *(_QWORD *)(a1 + v165);
  v214 = v219;
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v223, v219, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData);
  v210(v214, 0, 1, v195);
  v215 = v220;
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v214, v220, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData?);
  v216 = v213
       + OBJC_IVAR____TtCV21DocumentUnderstanding53DocumentUnderstanding_DocumentRepresentation_DocumentP33_B25D73F1E23932B4C52C7495EED50DAA13_StorageClass__documentMessageData;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v215, v216, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData?);
  swift_endAccess();
  swift_release();
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v224, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData);
}

id DURawDocument.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DURawDocument();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for DUProtobufEncodableProtocol.protoRepresentation.getter in conformance DURawDocument()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **v0) + 0x2B0))();
}

uint64_t protocol witness for DUProtobufEncodableProtocol.init(proto:) in conformance DURawDocument@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 680);
  v6 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0);
  v7 = lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity((unint64_t *)&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_Document and conformance DocumentUnderstanding_DocumentRepresentation_Document, type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_Document);
  result = v5(a1, v6, v7);
  *a2 = result;
  return result;
}

uint64_t associated type witness table accessor for DUProtobufEncodableProtocol.ProtobufType : Message in DURawDocument()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t ObjC metadata update function for DURawDocument()
{
  return type metadata accessor for DURawDocument();
}

void type metadata completion function for DURawDocument()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent?(319, (unint64_t *)&lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent?(319, (unint64_t *)&lazy cache variable for type metadata for Date?, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t sub_22843E2B8()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity((unint64_t *)&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_Document and conformance DocumentUnderstanding_DocumentRepresentation_Document, type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_Document);
}

uint64_t DUFoundInEventsPostprocessing.__allocating_init(engineConfiguration:)(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySSSiG_SSs5NeverOTg5144_s21DocumentUnderstanding29DUFoundInEventsPostprocessingC25getMostFrequentCandidates16candidateToCountSaySSGSDySSSiG_tFS2S3key_Si5valuet_tXEfU0_Tf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (!v1)
    return v2;
  v26 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  v2 = v26;
  result = specialized Dictionary.Values.startIndex.getter(a1);
  v6 = result;
  v7 = 0;
  v8 = a1 + 64;
  v22 = v1;
  v23 = v5;
  v24 = a1 + 64;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(a1 + 32))
  {
    v11 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(a1 + 36) != v5)
      goto LABEL_24;
    v12 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v6);
    v13 = v12[1];
    v25 = *v12;
    v15 = *(_QWORD *)(v26 + 16);
    v14 = *(_QWORD *)(v26 + 24);
    result = swift_bridgeObjectRetain();
    if (v15 >= v14 >> 1)
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
    *(_QWORD *)(v26 + 16) = v15 + 1;
    v16 = v26 + 16 * v15;
    *(_QWORD *)(v16 + 32) = v25;
    *(_QWORD *)(v16 + 40) = v13;
    v9 = 1 << *(_BYTE *)(a1 + 32);
    if (v6 >= v9)
      goto LABEL_25;
    v8 = a1 + 64;
    v17 = *(_QWORD *)(v24 + 8 * v11);
    if ((v17 & (1 << v6)) == 0)
      goto LABEL_26;
    v5 = v23;
    if (*(_DWORD *)(a1 + 36) != v23)
      goto LABEL_27;
    v18 = v17 & (-2 << (v6 & 0x3F));
    if (v18)
    {
      v9 = __clz(__rbit64(v18)) | v6 & 0xFFFFFFFFFFFFFFC0;
      v10 = v22;
    }
    else
    {
      v19 = v11 + 1;
      v20 = (unint64_t)(v9 + 63) >> 6;
      v10 = v22;
      if (v11 + 1 < v20)
      {
        v21 = *(_QWORD *)(v24 + 8 * v19);
        if (v21)
        {
LABEL_20:
          v9 = __clz(__rbit64(v21)) + (v19 << 6);
        }
        else
        {
          while (v20 - 2 != v11)
          {
            v21 = *(_QWORD *)(a1 + 80 + 8 * v11++);
            if (v21)
            {
              v19 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    ++v7;
    v6 = v9;
    if (v7 == v10)
      return v2;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t DUFoundInEventsPostprocessing.init(engineConfiguration:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

uint64_t DUFoundInEventsPostprocessing.simpleCandidateResolutionForModelOutput(modelOutput:type:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  NSObject *v11;
  NSObject *v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  os_log_type_t v20;
  uint8_t *v21;
  NSObject *v22;
  NSObject *v23;
  uint64_t v24;
  char v25;
  BOOL v26;
  unint64_t v27;
  char v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  NSObject *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  uint64_t v55;
  os_log_type_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  NSObject *v63;
  unint64_t v64;
  NSObject *v65;
  Swift::String v66;
  Swift::Bool v67;
  Swift::String v68;
  Swift::Bool v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v7 = type metadata accessor for CharacterSet();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(NSObject **)(v3 + 16);
  if (!v11)
  {
    if (one-time initialization token for standard != -1)
      swift_once();
    v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.standard);
    v11 = Logger.logObject.getter();
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v21 = 0;
      _os_log_impl(&dword_2282CC000, v11, v20, "Unable to load engine configuration", v21, 2u);
      MEMORY[0x22E2B117C](v21, -1, -1);
    }
    goto LABEL_32;
  }
  v72 = v8;
  if (a2 == 0x7461767265736572 && a3 == 0xED000064496E6F69
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v12 = v11;
    v13 = 0x80000002284E1F70;
    v14 = 0x80000002284E1F70 == 0x80000002284E1EB0;
    v15 = 0xD00000000000001ALL;
    v16 = 0xE400000000000000;
    v17 = 1;
    v18 = 1701998435;
    goto LABEL_21;
  }
  if (a2 == 0x7461767265736572 && a3 == 0xEF656D614E6E6F69
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v18 = 0x656C746974;
    v22 = v11;
    v17 = 0;
    v13 = 0x80000002284E1F50;
    v14 = 0x80000002284E1F50 == 0x80000002284E1EB0;
    v16 = 0xE500000000000000;
LABEL_14:
    v15 = 0xD000000000000011;
    goto LABEL_21;
  }
  if (a2 == 0xD000000000000013 && a3 == 0x80000002284D9F50
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v18 = 0x656C746974;
    v23 = v11;
    v13 = 0x80000002284E1F30;
    v14 = 0x80000002284E1F30 == 0x80000002284E1EB0;
    v15 = 0xD00000000000001CLL;
LABEL_19:
    v16 = 0xE500000000000000;
LABEL_20:
    v17 = 1;
    goto LABEL_21;
  }
  if (a2 == 0x6D614E7473657567 && a3 == 0xE900000000000065
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v18 = 0x656C746974;
    v54 = v11;
    v17 = 0;
    v13 = 0x80000002284E1EB0;
    v16 = 0xE500000000000000;
    v14 = 1;
    goto LABEL_14;
  }
  if (a2 == 0x6369546569766F6DLL && a3 == 0xEF656D614E74656BLL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v18 = 0x656C746974;
    v63 = v11;
    v13 = 0x80000002284E1F10;
    v14 = 0x80000002284E1F10 == 0x80000002284E1EB0;
    v15 = 0xD000000000000018;
    goto LABEL_19;
  }
  v74 = a2;
  v75 = a3;
  v64 = lazy protocol witness table accessor for type String and conformance String();
  v65 = v11;
  v66._countAndFlagsBits = 0x6563616C50;
  v66._object = (void *)0xE500000000000000;
  v71 = v64;
  v67 = StringProtocol.contains(_:)(v66);
  v13 = 0xE000000000000000;
  v14 = 0x80000002284E1EB0 == 0xE000000000000000;
  if (v67)
  {
    v74 = a2;
    v75 = a3;
    v68._countAndFlagsBits = 6581861;
    v68._object = (void *)0xE300000000000000;
    v69 = StringProtocol.contains(_:)(v68);
    v15 = 0xD00000000000001BLL;
    v14 = 0x80000002284E1EF0 == 0x80000002284E1EB0;
    if (v69)
      v15 = 0xD000000000000019;
    else
      v14 = 0x80000002284E1ED0 == 0x80000002284E1EB0;
    if (v69)
      v13 = 0x80000002284E1EF0;
    else
      v13 = 0x80000002284E1ED0;
    v16 = 0xE800000000000000;
    v18 = 0x6E6F697461636F6CLL;
    goto LABEL_20;
  }
  v15 = 0;
  v18 = 0;
  v17 = 1;
  v16 = 0xE000000000000000;
LABEL_21:
  v24 = a1[4];
  if (!*(_QWORD *)(v24 + 16))
  {
LABEL_27:
    swift_bridgeObjectRelease();
    if (one-time initialization token for standard != -1)
      swift_once();
    v42 = type metadata accessor for Logger();
    __swift_project_value_buffer(v42, (uint64_t)static Logger.standard);
    swift_bridgeObjectRetain();
    v43 = Logger.logObject.getter();
    v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc();
      v46 = swift_slowAlloc();
      v74 = v46;
      *(_DWORD *)v45 = 136315138;
      swift_bridgeObjectRetain();
      v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v16, &v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_2282CC000, v43, v44, "DUFoundInEventsPostprocessing: Model Output not found for %s!", v45, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22E2B117C](v46, -1, -1);
      MEMORY[0x22E2B117C](v45, -1, -1);

      return 0;
    }

    swift_bridgeObjectRelease_n();
LABEL_32:

    return 0;
  }
  v70 = v7;
  v71 = v15;
  v25 = v17;
  v26 = v14;
  swift_bridgeObjectRetain();
  v27 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v16);
  if ((v28 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  v29 = *(_QWORD **)(*(_QWORD *)(v24 + 56) + 8 * v27);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease_n();
  v30 = v71;
  if ((specialized Sequence<>.contains(_:)(v71, v13, v29) & 1) == 0)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  v31 = a1[7];
  v32 = v11;
  v33 = v30;
  v34 = v32;
  v35 = (void *)specialized DUFoundInEventsPostprocessing.tokenIndexesForModelOutput(output:label:engineConfig:)((uint64_t)v29, v33, v13, v11);

  swift_bridgeObjectRelease();
  v36 = specialized DUFoundInEventsPostprocessing.candidatesForTaggedCharacterRanges(taggedCharacterRanges:labelTokenIndexes:plainText:)(v31, v35, *a1, a1[1]);
  v37 = DUFoundInEventsPostprocessing.resolveCandidates(finalCandidates:)(v36);
  if (!v38)
  {
    if (v25 & 1 | !v26 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      if (one-time initialization token for standard != -1)
        swift_once();
      v55 = type metadata accessor for Logger();
      __swift_project_value_buffer(v55, (uint64_t)static Logger.standard);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v49 = Logger.logObject.getter();
      v56 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v49, v56))
      {
        v57 = swift_slowAlloc();
        v72 = swift_slowAlloc();
        v74 = v72;
        *(_DWORD *)v57 = 136315394;
        swift_bridgeObjectRetain();
        v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, v13, &v74);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v57 + 12) = 2080;
        v58 = swift_bridgeObjectRetain();
        v59 = MEMORY[0x22E2AFB2C](v58, MEMORY[0x24BEE0D00]);
        v61 = v60;
        swift_bridgeObjectRelease();
        v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v61, &v74);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_2282CC000, v49, v56, "DUFoundInEventsPostprocessing: Could not resolve a final candidate for %s from %s", (uint8_t *)v57, 0x16u);
        v62 = v72;
        swift_arrayDestroy();
        MEMORY[0x22E2B117C](v62, -1, -1);
        MEMORY[0x22E2B117C](v57, -1, -1);

        return 0;
      }
    }
    else
    {
      if (one-time initialization token for standard != -1)
        swift_once();
      v48 = type metadata accessor for Logger();
      __swift_project_value_buffer(v48, (uint64_t)static Logger.standard);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v49 = Logger.logObject.getter();
      v50 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v49, v50))
      {
        v51 = swift_slowAlloc();
        v52 = swift_slowAlloc();
        v74 = v52;
        *(_DWORD *)v51 = 136315394;
        swift_bridgeObjectRetain();
        v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, v13, &v74);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v51 + 12) = 2048;
        v53 = *(_QWORD *)(v36 + 16);
        swift_bridgeObjectRelease();
        v73 = v53;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_2282CC000, v49, v50, "DUFoundInEventsPostprocessing: Could not resolve a final candidate for %s in %ld candidates", (uint8_t *)v51, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x22E2B117C](v52, -1, -1);
        MEMORY[0x22E2B117C](v51, -1, -1);

        return 0;
      }
    }

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    return 0;
  }
  v39 = v37;
  v40 = v38;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  CharacterSet.init(charactersIn:)();
  v74 = v39;
  v75 = v40;
  lazy protocol witness table accessor for type String and conformance String();
  v41 = StringProtocol.trimmingCharacters(in:)();
  (*(void (**)(char *, uint64_t))(v72 + 8))(v10, v70);

  swift_bridgeObjectRelease();
  return v41;
}

uint64_t DUFoundInEventsPostprocessing.addressValuesForModelOutput(modelOutput:startAddress:)(uint64_t *a1, char a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v27;

  v3 = *(void **)(v2 + 16);
  if (!v3)
  {
    if (one-time initialization token for standard != -1)
      swift_once();
    v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.standard);
    v9 = Logger.logObject.getter();
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v25 = 0;
      _os_log_impl(&dword_2282CC000, v9, v24, "Unable to load engine configuration", v25, 2u);
      MEMORY[0x22E2B117C](v25, -1, -1);
    }
    goto LABEL_21;
  }
  if ((a2 & 1) != 0)
    v5 = 0xD00000000000001DLL;
  else
    v5 = 0xD00000000000001BLL;
  if ((a2 & 1) != 0)
    v6 = 0x80000002284E1FB0;
  else
    v6 = 0x80000002284E1F90;
  v7 = a1[4];
  v8 = *(_QWORD *)(v7 + 16);
  v9 = v3;
  if (!v8
    || (v10 = specialized __RawDictionaryStorage.find<A>(_:)(0x6E6F697461636F6CLL, 0xE800000000000000), (v11 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for standard != -1)
      swift_once();
    v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.standard);
    v19 = Logger.logObject.getter();
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc();
      v22 = swift_slowAlloc();
      v27 = v22;
      *(_DWORD *)v21 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x6E6F697461636F6CLL, 0xE800000000000000, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_2282CC000, v19, v20, "Model Output not found for %s!", v21, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22E2B117C](v22, -1, -1);
      MEMORY[0x22E2B117C](v21, -1, -1);

      return 0;
    }

LABEL_21:
    return 0;
  }
  if ((specialized Sequence<>.contains(_:)(v5, v6, *(_QWORD **)(*(_QWORD *)(v7 + 56) + 8 * v10)) & 1) != 0)
  {
    v12 = a1[7];
    v13 = v9;
    v14 = swift_bridgeObjectRetain();
    v15 = (void *)specialized DUFoundInEventsPostprocessing.tokenIndexesForModelOutput(output:label:engineConfig:)(v14, v5, v6, v3);

    swift_bridgeObjectRelease();
    specialized DUFoundInEventsPostprocessing.addressCandidatesForTaggedCharacterRanges(taggedCharacterRanges:labelTokenIndexes:plainText:dataDetectorMatches:label:)(v12, v15, *a1, a1[1], a1[2]);
    v17 = v16;

    swift_bridgeObjectRelease();
  }
  else
  {

    swift_bridgeObjectRelease();
    return 0;
  }
  return v17;
}

uint64_t DUFoundInEventsPostprocessing.dateStringForModelOutput(modelOutput:startDate:)(_QWORD *a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  id v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  void (*v65)(char *, char *, uint64_t);
  char *v66;
  void (*v67)(char *, char *, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t (*v70)(uint64_t, uint64_t, uint64_t);
  int v71;
  char v72;
  char v73;
  char v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  uint64_t v87;
  uint64_t v88;

  v5 = type metadata accessor for DateComponents();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v77 - v10;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v77 - v17;
  v19 = MEMORY[0x24BDAC7A8](v16);
  v21 = (char *)&v77 - v20;
  MEMORY[0x24BDAC7A8](v19);
  v26 = *(void **)(v2 + 16);
  if (!v26)
  {
    if (one-time initialization token for standard != -1)
      swift_once();
    v50 = type metadata accessor for Logger();
    __swift_project_value_buffer(v50, (uint64_t)static Logger.standard);
    v51 = Logger.logObject.getter();
    v52 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v51, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v53 = 0;
      _os_log_impl(&dword_2282CC000, v51, v52, "Unable to load engine configuration", v53, 2u);
      MEMORY[0x22E2B117C](v53, -1, -1);
    }

    return 0;
  }
  v79 = v11;
  v80 = v25;
  v84 = (uint64_t)&v77 - v22;
  v85 = v6;
  v81 = v24;
  v82 = v23;
  v83 = v5;
  if ((a2 & 1) != 0)
    v27 = 0xD00000000000001ALL;
  else
    v27 = 0xD000000000000018;
  if ((a2 & 1) != 0)
    v28 = 0x80000002284E1FF0;
  else
    v28 = 0x80000002284E1FD0;
  v29 = a1[4];
  v30 = *(_QWORD *)(v29 + 16);
  v86 = v26;
  if (!v30
    || (v31 = specialized __RawDictionaryStorage.find<A>(_:)(1701669236, 0xE400000000000000), (v32 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for standard != -1)
      swift_once();
    v44 = type metadata accessor for Logger();
    __swift_project_value_buffer(v44, (uint64_t)static Logger.standard);
    v45 = Logger.logObject.getter();
    v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc();
      v48 = swift_slowAlloc();
      v88 = v48;
      *(_DWORD *)v47 = 136315138;
      v87 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(1701669236, 0xE400000000000000, &v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_2282CC000, v45, v46, "Model Output not found for %s!", v47, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22E2B117C](v48, -1, -1);
      MEMORY[0x22E2B117C](v47, -1, -1);

      return 0;
    }

    return 0;
  }
  if ((specialized Sequence<>.contains(_:)(v27, v28, *(_QWORD **)(*(_QWORD *)(v29 + 56) + 8 * v31)) & 1) == 0)
  {

    swift_bridgeObjectRelease();
    return 0;
  }
  v78 = (void *)a1[7];
  v33 = v86;
  v34 = swift_bridgeObjectRetain();
  v35 = (void *)specialized DUFoundInEventsPostprocessing.tokenIndexesForModelOutput(output:label:engineConfig:)(v34, v27, v28, v26);
  v86 = v33;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v36 = a1[2];
  v37 = (uint64_t)v78;
  v78 = v35;
  v38 = specialized DUFoundInEventsPostprocessing.dateComponentsForTaggedCharacterRanges(taggedCharacterRanges:labelTokenIndexes:dataDetectorMatches:startDate:)(v37, v35, v36, a2 & 1);
  v39 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v85 + 56);
  v40 = v83;
  v39(v84, 1, 1, v83);
  v41 = *(_QWORD *)(v38 + 16);
  if (v41)
  {
    if (v41 == 1)
    {
      v42 = v85;
      (*(void (**)(char *, unint64_t, uint64_t))(v85 + 16))(v21, v38 + ((*(unsigned __int8 *)(v85 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80)), v40);
      v39((uint64_t)v21, 0, 1, v40);
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v21, 1, v40) == 1)
      {
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v21, &demangling cache variable for type metadata for DateComponents?);
        v43 = v84;
      }
      else
      {
        v65 = *(void (**)(char *, char *, uint64_t))(v42 + 32);
        v66 = v79;
        v65(v79, v21, v40);
        v43 = v84;
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v84, &demangling cache variable for type metadata for DateComponents?);
        v65((char *)v43, v66, v40);
        v39(v43, 0, 1, v40);
      }
      goto LABEL_38;
    }
    DUFoundInEventsPostprocessing.mergeDateComponents(dateComponentsArray:)(v38, (uint64_t)v18);
    v55 = v85;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v85 + 48))(v18, 1, v40) != 1)
    {
      swift_bridgeObjectRelease();
      v67 = *(void (**)(char *, char *, uint64_t))(v55 + 32);
      v67(v9, v18, v40);
      v43 = v84;
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v84, &demangling cache variable for type metadata for DateComponents?);
      v67((char *)v43, v9, v40);
      v39(v43, 0, 1, v40);
      v68 = v81;
      v42 = v55;
      goto LABEL_39;
    }
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v18, &demangling cache variable for type metadata for DateComponents?);
    if (one-time initialization token for standard != -1)
      swift_once();
    v56 = type metadata accessor for Logger();
    __swift_project_value_buffer(v56, (uint64_t)static Logger.standard);
    swift_bridgeObjectRetain();
    v57 = Logger.logObject.getter();
    v58 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v57, v58))
    {
      v59 = (uint8_t *)swift_slowAlloc();
      v60 = swift_slowAlloc();
      v88 = v60;
      *(_DWORD *)v59 = 136315138;
      v61 = swift_bridgeObjectRetain();
      v62 = MEMORY[0x22E2AFB2C](v61, v40);
      v64 = v63;
      swift_bridgeObjectRelease();
      v87 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v64, &v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      v40 = v83;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2282CC000, v57, v58, "Could not resolve a final candidate from %s", v59, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22E2B117C](v60, -1, -1);
      MEMORY[0x22E2B117C](v59, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v43 = v84;
  v42 = v85;
LABEL_38:
  v68 = v81;
LABEL_39:
  v69 = v80;
  outlined init with copy of DateComponents?(v43, v80);
  v70 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v42 + 48);
  v71 = v70(v69, 1, v40);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v69, &demangling cache variable for type metadata for DateComponents?);
  if (v71 == 1
    || v70(v43, 1, v40)
    || (DateComponents.day.getter(), (v72 & 1) != 0)
    || v70(v43, 1, v40)
    || (DateComponents.month.getter(), (v73 & 1) != 0)
    || v70(v43, 1, v40)
    || (DateComponents.year.getter(), (v74 & 1) != 0))
  {
    v39(v68, 1, 1, v40);
  }
  else
  {
    outlined init with copy of DateComponents?(v43, v68);
  }
  v75 = v78;
  outlined assign with take of DateComponents?(v68, v43);
  v76 = v82;
  outlined init with copy of DateComponents?(v43, v82);
  v49 = specialized DUFoundInEventsPostprocessing.schemaStringForDateComponents(dateComponents:)(v76);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v76, &demangling cache variable for type metadata for DateComponents?);

  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v43, &demangling cache variable for type metadata for DateComponents?);
  return v49;
}

uint64_t DUFoundInEventsPostprocessing.mergeDateComponents(dateComponentsArray:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  void (*v38)(unint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  __int128 v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t result;
  int64_t v60;
  unint64_t v61;
  unint64_t v62;
  int64_t v63;
  unint64_t v64;
  int64_t v65;
  void (*v66)(char *, unint64_t, uint64_t);
  void (*v67)(char *, char *, uint64_t);
  uint64_t v68;
  char v69;
  uint64_t v70;
  char v71;
  char v72;
  uint64_t v73;
  char v74;
  char *v75;
  char *v76;
  char *v77;
  char v78;
  void (*v79)(char *, uint64_t);
  char v80;
  char v81;
  void (*v82)(char *, uint64_t);
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t (*v92)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  char *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  int64_t v107;
  uint64_t v108;
  char *v109;
  void (*v110)(char *, char *, uint64_t);
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  unsigned int (*v115)(char *, uint64_t, uint64_t);
  char *v116;
  void (*v117)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v118;
  char *v119;
  char *v120;
  void (*v121)(char *, char *, uint64_t);
  uint64_t v122;
  uint64_t v123;

  v98 = a2;
  v3 = type metadata accessor for Calendar.Component();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v104 = (char *)&v94 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v94 - v7;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v113 = (char *)&v94 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v101 = (char *)&v94 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v94 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Calendar?);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v94 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for DateComponents();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v103 = (char *)&v94 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x24BDAC7A8](v21);
  v112 = (char *)&v94 - v24;
  v25 = MEMORY[0x24BDAC7A8](v23);
  v119 = (char *)&v94 - v26;
  v27 = MEMORY[0x24BDAC7A8](v25);
  v120 = (char *)&v94 - v28;
  MEMORY[0x24BDAC7A8](v27);
  v30 = (char *)&v94 - v29;
  v31 = type metadata accessor for Calendar();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v18, 1, 1, v31);
  v32 = type metadata accessor for TimeZone();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v15, 1, 1, v32);
  v116 = v30;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>);
  v33 = *(_QWORD *)(v4 + 72);
  v34 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_2284C2A60;
  v36 = v35 + v34;
  v37 = *MEMORY[0x24BDCF250];
  v122 = v4;
  v38 = *(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 104);
  v38(v36, v37, v3);
  v38(v36 + v33, *MEMORY[0x24BDCF240], v3);
  v38(v36 + 2 * v33, *MEMORY[0x24BDCF220], v3);
  v38(v36 + 3 * v33, *MEMORY[0x24BDCF230], v3);
  v38(v36 + 4 * v33, *MEMORY[0x24BDCF258], v3);
  v114 = v33;
  v38(v36 + 5 * v33, *MEMORY[0x24BDCF288], v3);
  v39 = v3;
  v40 = specialized Set.init(_nonEmptyArrayLiteral:)(v35);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  v41 = *(_QWORD *)(a1 + 16);
  v118 = v20;
  v96 = v41;
  v97 = a1;
  if (!v41)
  {
    v117 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v118 + 56);
    swift_bridgeObjectRetain();
    v47 = v116;
    goto LABEL_46;
  }
  v42 = a1 + ((*(unsigned __int8 *)(v118 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v118 + 80));
  v43 = *(_QWORD *)(v118 + 72);
  v44 = *(void (**)(char *, char *, uint64_t))(v118 + 16);
  v106 = v40 + 56;
  swift_bridgeObjectRetain();
  v45 = 0;
  *(_QWORD *)&v46 = 136315138;
  v100 = v46;
  v99 = MEMORY[0x24BEE4AD8] + 8;
  v47 = v116;
  v109 = v8;
  v48 = v119;
  v49 = v40;
  v50 = v42;
  v105 = v39;
  v111 = v49;
  v102 = v42;
  v94 = v43;
  v121 = v44;
  while (2)
  {
    v51 = (char *)(v50 + v43 * v45);
    v52 = v101;
    v53 = v45;
    v44(v101, v51, v19);
    v54 = v118;
    v117 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v118 + 56);
    v117(v52, 0, 1, v19);
    v115 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48);
    if (v115(v52, 1, v19) == 1)
    {
      v92 = (uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v117;
      goto LABEL_47;
    }
    v95 = v53 + 1;
    v55 = v118;
    v110 = *(void (**)(char *, char *, uint64_t))(v118 + 32);
    v110(v120, v52, v19);
    v56 = 1 << *(_BYTE *)(v49 + 32);
    if (v56 < 64)
      v57 = ~(-1 << v56);
    else
      v57 = -1;
    v58 = v57 & *(_QWORD *)(v49 + 56);
    v107 = (unint64_t)(v56 + 63) >> 6;
    result = swift_bridgeObjectRetain();
    v60 = 0;
    if (v58)
    {
LABEL_8:
      v61 = __clz(__rbit64(v58));
      v58 &= v58 - 1;
      v62 = v61 | (v60 << 6);
      goto LABEL_23;
    }
    while (1)
    {
      v63 = v60 + 1;
      if (__OFADD__(v60, 1))
      {
        __break(1u);
LABEL_50:
        __break(1u);
        return result;
      }
      v50 = v102;
      if (v63 >= v107)
        goto LABEL_42;
      v64 = *(_QWORD *)(v106 + 8 * v63);
      ++v60;
      if (!v64)
      {
        v60 = v63 + 1;
        if (v63 + 1 >= v107)
          goto LABEL_42;
        v64 = *(_QWORD *)(v106 + 8 * v60);
        if (!v64)
        {
          v60 = v63 + 2;
          if (v63 + 2 >= v107)
            goto LABEL_42;
          v64 = *(_QWORD *)(v106 + 8 * v60);
          if (!v64)
            break;
        }
      }
LABEL_22:
      v58 = (v64 - 1) & v64;
      v62 = __clz(__rbit64(v64)) + (v60 << 6);
LABEL_23:
      v66 = *(void (**)(char *, unint64_t, uint64_t))(v122 + 16);
      v66(v8, *(_QWORD *)(v49 + 48) + v62 * v114, v39);
      v67 = v121;
      v121(v48, v47, v19);
      v68 = DateComponents.value(for:)();
      if ((v69 & 1) != 0)
        goto LABEL_38;
      v108 = v68;
      v67(v112, v48, v19);
      v70 = DateComponents.value(for:)();
      v72 = v71;
      v73 = DateComponents.value(for:)();
      if ((v72 & 1) != 0)
      {
        v78 = v74 & 1;
      }
      else
      {
        if ((v74 & 1) != 0)
        {
          v75 = v103;
          v76 = v112;
          v121(v103, v112, v19);
          v77 = v104;
          v39 = v105;
          v66(v104, (unint64_t)v8, v105);
          goto LABEL_31;
        }
        v78 = v70 == v73;
      }
      v39 = v105;
      v77 = v104;
      v75 = v103;
      v76 = v112;
      v121(v103, v112, v19);
      v66(v77, (unint64_t)v109, v39);
      if ((v78 & 1) != 0)
      {
        (*(void (**)(char *, uint64_t))(v122 + 8))(v77, v39);
        v79 = *(void (**)(char *, uint64_t))(v118 + 8);
        v79(v75, v19);
        v79(v76, v19);
LABEL_37:
        v8 = v109;
        v48 = v119;
        DateComponents.setValue(_:for:)();
        v67 = v121;
LABEL_38:
        v90 = (uint64_t)v113;
        v67(v113, v48, v19);
        v117((char *)v90, 0, 1, v19);
        v55 = v118;
        v91 = v48;
        v82 = *(void (**)(char *, uint64_t))(v118 + 8);
        v47 = v116;
        goto LABEL_39;
      }
LABEL_31:
      DateComponents.value(for:)();
      v81 = v80;
      (*(void (**)(char *, uint64_t))(v122 + 8))(v77, v39);
      v55 = v118;
      v82 = *(void (**)(char *, uint64_t))(v118 + 8);
      v82(v75, v19);
      v82(v76, v19);
      if ((v81 & 1) != 0)
        goto LABEL_37;
      if (one-time initialization token for standard != -1)
        swift_once();
      v83 = type metadata accessor for Logger();
      __swift_project_value_buffer(v83, (uint64_t)static Logger.standard);
      v84 = Logger.logObject.getter();
      v85 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v84, v85))
      {
        v86 = swift_slowAlloc();
        v87 = swift_slowAlloc();
        v123 = v87;
        *(_DWORD *)v86 = v100;
        swift_beginAccess();
        v88 = DateComponents.description.getter();
        *(_QWORD *)(v86 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v88, v89, &v123);
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_2282CC000, v84, v85, "Conflict detected when merging component into %s", (uint8_t *)v86, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x22E2B117C](v87, -1, -1);
        MEMORY[0x22E2B117C](v86, -1, -1);
      }

      v39 = v105;
      v90 = (uint64_t)v113;
      v47 = v116;
      v8 = v109;
      v117(v113, 1, 1, v19);
      v91 = v119;
LABEL_39:
      v82(v91, v19);
      (*(void (**)(char *, uint64_t))(v122 + 8))(v8, v39);
      v82(v47, v19);
      if (v115((char *)v90, 1, v19) == 1)
      {
        swift_bridgeObjectRelease();
        swift_release();
        v82(v120, v19);
        swift_bridgeObjectRelease();
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v90, &demangling cache variable for type metadata for DateComponents?);
        return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v117)(v98, 1, 1, v19);
      }
      result = ((uint64_t (*)(char *, uint64_t, uint64_t))v110)(v47, v90, v19);
      v48 = v119;
      v49 = v111;
      if (v58)
        goto LABEL_8;
    }
    v65 = v63 + 3;
    if (v65 < v107)
    {
      v64 = *(_QWORD *)(v106 + 8 * v65);
      if (!v64)
      {
        while (1)
        {
          v60 = v65 + 1;
          if (__OFADD__(v65, 1))
            goto LABEL_50;
          if (v60 >= v107)
            goto LABEL_42;
          v64 = *(_QWORD *)(v106 + 8 * v60);
          ++v65;
          if (v64)
            goto LABEL_22;
        }
      }
      v60 = v65;
      goto LABEL_22;
    }
LABEL_42:
    swift_release();
    (*(void (**)(char *, uint64_t))(v55 + 8))(v120, v19);
    v45 = v95;
    v43 = v94;
    v44 = v121;
    if (v95 != v96)
      continue;
    break;
  }
LABEL_46:
  v92 = (uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v117;
  v117(v101, 1, 1, v19);
LABEL_47:
  v93 = v98;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, char *, uint64_t))(v118 + 32))(v93, v47, v19);
  return v92(v93, 0, 1, v19);
}

uint64_t closure #1 in DUFoundInEventsPostprocessing.dateComponentsForTaggedCharacterRanges(taggedCharacterRanges:labelTokenIndexes:dataDetectorMatches:startDate:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, unint64_t *a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int *v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  BOOL v27;
  unint64_t v28;
  NSRange v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  NSUInteger v35;
  char *v36;
  NSUInteger v37;
  NSUInteger v38;
  uint64_t v39;
  unsigned int (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  void (*v44)(char *, uint64_t, uint64_t);
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t *v53;
  void (*v54)(unint64_t, char *, uint64_t);
  uint64_t v55;
  char *v56;
  char *v57;
  NSUInteger length;
  NSUInteger location;
  int v60;
  _QWORD *v61;
  NSRange v62;
  NSRange v63;

  v53 = a7;
  v60 = a6;
  v11 = type metadata accessor for DateComponents();
  v61 = *(_QWORD **)(v11 - 8);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v57 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v56 = (char *)&v52 - v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v55 = (uint64_t)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v52 - v18;
  v20 = (int *)type metadata accessor for FoundInEventDataDetectorsOutput();
  v21 = *((_QWORD *)v20 - 1);
  result = MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v52 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_32;
  }
  v25 = *(_QWORD *)(a4 + 16);
  if (v25 <= a1)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v26 = a1 + a2;
  if (__OFADD__(a1, a2))
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v27 = __OFSUB__(v26, 1);
  v28 = v26 - 1;
  if (v27)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v28 >= v25)
  {
LABEL_35:
    __break(1u);
    return result;
  }
  v29 = NSUnionRange(*(NSRange *)(a4 + 32 + 16 * a1), *(NSRange *)(a4 + 32 + 16 * v28));
  length = v29.length;
  location = v29.location;
  result = a5;
  v30 = *(_QWORD *)(a5 + 16);
  if (!v30)
    return result;
  v31 = result + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
  v32 = *(_QWORD *)(v21 + 72);
  v52 = result;
  swift_bridgeObjectRetain();
  do
  {
    outlined init with copy of FoundInEventDataDetectorsOutput(v31, (uint64_t)v24);
    if (v24[v20[8]] != 5)
    {
      outlined destroy of FoundInEventDataDetectorsOutput((uint64_t)v24);
      goto LABEL_9;
    }
    v33 = v20[20];
    v34 = &v24[v20[19]];
    if (v34[8])
      v35 = 0;
    else
      v35 = *(_QWORD *)v34;
    v36 = &v24[v33];
    v37 = *(_QWORD *)&v24[v33];
    if (v36[8])
      v38 = 0;
    else
      v38 = v37;
    v39 = (uint64_t)v24;
    if ((v60 & 1) == 0)
      v39 = (uint64_t)&v24[v20[6]];
    outlined init with copy of DateComponents?(v39, (uint64_t)v19);
    v40 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v61[6];
    if (v40((uint64_t)v19, 1, v11) != 1)
    {
      v62.length = length;
      v62.location = location;
      v63.location = v35;
      v63.length = v38;
      if ((uint64_t)NSIntersectionRange(v62, v63).length >= 1)
      {
        v41 = v55;
        outlined init with copy of DateComponents?((uint64_t)v19, v55);
        if (v40(v41, 1, v11) == 1)
        {
          outlined destroy of FoundInEventDataDetectorsOutput((uint64_t)v24);
          outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v19, &demangling cache variable for type metadata for DateComponents?);
          outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v41, &demangling cache variable for type metadata for DateComponents?);
          goto LABEL_9;
        }
        v42 = v41;
        v43 = v61;
        v44 = (void (*)(char *, uint64_t, uint64_t))v61[4];
        v45 = v56;
        v44(v56, v42, v11);
        ((void (*)(char *, char *, uint64_t))v43[2])(v57, v45, v11);
        v46 = v53;
        v47 = *v53;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *v46 = v47;
        v54 = (void (*)(unint64_t, char *, uint64_t))v44;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v47 + 16) + 1, 1, v47);
          *v53 = v47;
        }
        v50 = *(_QWORD *)(v47 + 16);
        v49 = *(_QWORD *)(v47 + 24);
        if (v50 >= v49 >> 1)
        {
          v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v49 > 1, v50 + 1, 1, v47);
          *v53 = v47;
        }
        *(_QWORD *)(v47 + 16) = v50 + 1;
        v51 = v61;
        v54(v47+ ((*((unsigned __int8 *)v51 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v51 + 80))+ v61[9] * v50, v57, v11);
        ((void (*)(char *, uint64_t))v51[1])(v56, v11);
      }
    }
    outlined destroy of FoundInEventDataDetectorsOutput((uint64_t)v24);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v19, &demangling cache variable for type metadata for DateComponents?);
LABEL_9:
    v31 += v32;
    --v30;
  }
  while (v30);
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in DUFoundInEventsPostprocessing.addressCandidatesForTaggedCharacterRanges(taggedCharacterRanges:labelTokenIndexes:plainText:dataDetectorMatches:label:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  NSRange v15;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  Swift::Int v27;
  Swift::Int v28;
  Swift::Int v29;
  Swift::Int v30;

  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 <= a1)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v11 = a1 + a2;
  if (__OFADD__(a1, a2))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v12 = __OFSUB__(v11, 1);
  v13 = v11 - 1;
  if (v12)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v13 >= v10)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
    *v8 = v9;
    goto LABEL_8;
  }
  v8 = a7;
  v15 = NSUnionRange(*(NSRange *)(a4 + 32 + 16 * a1), *(NSRange *)(a4 + 32 + 16 * v13));
  v7 = specialized DUFoundInEventsPostprocessing.getComponentResultsForAddress(dataDetectorMatches:resultRange:)(a6, v15.location, v15.length);
  if (!*(_QWORD *)(v7 + 16))
  {
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  v9 = (_QWORD *)*v8;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v8 = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_20;
LABEL_8:
  v18 = v9[2];
  v17 = v9[3];
  if (v18 >= v17 >> 1)
  {
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, v9);
    *v8 = v9;
  }
  v9[2] = v18 + 1;
  v9[v18 + 4] = v7;
LABEL_12:
  result = Range<>.init(_:in:)();
  if ((v20 & 1) == 0)
  {
    v21 = String.subscript.getter();
    v22 = MEMORY[0x22E2AF988](v21);
    v24 = v23;
    swift_bridgeObjectRelease();
    v25 = (void *)MEMORY[0x22E2AF8EC](v22, v24);
    swift_bridgeObjectRelease();
    v26 = (id)_PASCollapseWhitespaceAndStrip();

    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v29 = v28;

    specialized Set._Variant.insert(_:)(&v30, v27, v29);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #1 in DUFoundInEventsPostprocessing.candidatesForTaggedCharacterRanges(taggedCharacterRanges:labelTokenIndexes:plainText:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, uint64_t *a7)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t result;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;

  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v11 <= a1)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v12 = a1 + a2;
  if (__OFADD__(a1, a2))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v13 = __OFSUB__(v12, 1);
  v14 = v12 - 1;
  if (v13)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v14 >= v11)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
    v10 = (_QWORD *)result;
    *v7 = result;
    goto LABEL_17;
  }
  v7 = a7;
  NSUnionRange(*(NSRange *)(a4 + 32 + 16 * a1), *(NSRange *)(a4 + 32 + 16 * v14));
  result = Range<>.init(_:in:)();
  if ((v19 & 1) != 0)
    return result;
  v20 = specialized String.UTF8View.subscript.getter(result, v18, a5, a6);
  v22 = v21;
  v24 = v23;
  v26 = v25;
  swift_bridgeObjectRetain();
  v27 = MEMORY[0x22E2AFAB4](v20, v22, v24, v26);
  if (v28)
    v29 = v27;
  else
    v29 = 0;
  if (v28)
    v30 = v28;
  else
    v30 = 0xE000000000000000;
  v31 = HIBYTE(v30) & 0xF;
  if ((v30 & 0x2000000000000000) == 0)
    v31 = v29 & 0xFFFFFFFFFFFFLL;
  if (!v31)
    return swift_bridgeObjectRelease();
  v32 = String.init<A>(_:)();
  v33 = (void *)MEMORY[0x22E2AF8EC](v32);
  swift_bridgeObjectRelease();
  v34 = (id)_PASCollapseWhitespaceAndStrip();

  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = v35;

  v10 = (_QWORD *)*v7;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v7 = (uint64_t)v10;
  if ((result & 1) == 0)
    goto LABEL_27;
LABEL_17:
  v37 = v10[2];
  v36 = v10[3];
  if (v37 >= v36 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v36 > 1), v37 + 1, 1, v10);
    v10 = (_QWORD *)result;
    *v7 = result;
  }
  v10[2] = v37 + 1;
  v38 = &v10[2 * v37];
  v38[4] = v8;
  v38[5] = v9;
  return result;
}

uint64_t DUFoundInEventsPostprocessing.pruneCandidates(candidates:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  int64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4AF8];
  v24 = a1 + 32;
  result = swift_bridgeObjectRetain();
  v3 = 0;
  v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    v5 = (uint64_t *)(v24 + 16 * v3);
    v7 = *v5;
    v6 = v5[1];
    v8 = v4[2];
    if (!v8)
    {
LABEL_35:
      swift_bridgeObjectRetain();
LABEL_36:
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
        v4 = (_QWORD *)result;
      }
      v22 = v4[2];
      v21 = v4[3];
      if (v22 >= v21 >> 1)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v22 + 1, 1, v4);
        v4 = (_QWORD *)result;
      }
      v4[2] = v22 + 1;
      v23 = &v4[2 * v22];
      v23[4] = v7;
      v23[5] = v6;
      goto LABEL_3;
    }
    v9 = v8 - 1;
    v10 = (unint64_t)(v8 - 1) >> 1;
    if (v10 >= (unint64_t)v8)
      goto LABEL_47;
    v11 = v4 + 4;
    v12 = &v4[2 * v10 + 4];
    result = *v12;
    if (*v12 != v7 || v12[1] != v6)
    {
      result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0)
        break;
    }
LABEL_11:
    if (v10 >= v8)
      goto LABEL_48;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    if (StringProtocol.caseInsensitiveCompare<A>(_:)())
      goto LABEL_36;
    result = swift_bridgeObjectRelease();
LABEL_3:
    if (++v3 == v1)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v4;
    }
  }
  v14 = 0;
  while (v10 < v8)
  {
    v15 = &v11[2 * v10];
    v16 = v7 == *v15 && v6 == v15[1];
    if (v16 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) == 0))
      v14 = v10 + 1;
    else
      v9 = v10 - 1;
    v17 = v14 + v9;
    if (__OFADD__(v14, v9))
      goto LABEL_45;
    if (v17 >= 0)
      v18 = v14 + v9;
    else
      v18 = v17 + 1;
    if (v17 < -1)
      goto LABEL_46;
    v10 = v18 >> 1;
    if (v18 >> 1 >= v8)
      goto LABEL_46;
    v19 = &v11[2 * v10];
    result = *v19;
    if (*v19 == v7 && v19[1] == v6)
      goto LABEL_11;
    result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if ((result & 1) != 0)
      goto LABEL_11;
    if (v9 < v14)
      goto LABEL_35;
  }
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

uint64_t DUFoundInEventsPostprocessing.getCandidateToCount(candidates:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4B00];
  v2 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
  v3 = (_QWORD *)MEMORY[0x24BEE4B00];
  while (1)
  {
    v5 = *(v2 - 1);
    v4 = *v2;
    v6 = v3[2];
    swift_bridgeObjectRetain();
    if (!v6 || (v7 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v4), (v8 & 1) == 0))
    {
      v10 = 1;
      goto LABEL_11;
    }
    v9 = *(_QWORD *)(v3[7] + 8 * v7);
    v10 = v9 + 1;
    if (__OFADD__(v9, 1))
      break;
LABEL_11:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v13 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v4);
    v14 = v3[2];
    v15 = (v12 & 1) == 0;
    v16 = v14 + v15;
    if (__OFADD__(v14, v15))
      goto LABEL_25;
    v17 = v12;
    if (v3[3] >= v16)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v12 & 1) != 0)
          goto LABEL_3;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if ((v17 & 1) != 0)
          goto LABEL_3;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, isUniquelyReferenced_nonNull_native);
      v18 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v4);
      if ((v17 & 1) != (v19 & 1))
        goto LABEL_27;
      v13 = v18;
      if ((v17 & 1) != 0)
      {
LABEL_3:
        *(_QWORD *)(v3[7] + 8 * v13) = v10;
        goto LABEL_4;
      }
    }
    v3[(v13 >> 6) + 8] |= 1 << v13;
    v20 = (uint64_t *)(v3[6] + 16 * v13);
    *v20 = v5;
    v20[1] = v4;
    *(_QWORD *)(v3[7] + 8 * v13) = v10;
    v21 = v3[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_26;
    v3[2] = v23;
    swift_bridgeObjectRetain();
LABEL_4:
    v2 += 2;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!--v1)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v3;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t DUFoundInEventsPostprocessing.getMostFrequentCandidates(candidateToCount:)()
{
  uint64_t v0;
  unint64_t *v1;
  char v2;
  char v3;
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;

  v0 = swift_bridgeObjectRetain();
  v1 = (unint64_t *)specialized Sequence<>.max()(v0);
  v3 = v2;
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
    v1 = 0;
  v4 = swift_bridgeObjectRetain();
  v5 = specialized _NativeDictionary.filter(_:)(v4, v1);
  swift_bridgeObjectRelease();
  v6 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySSSiG_SSs5NeverOTg5144_s21DocumentUnderstanding29DUFoundInEventsPostprocessingC25getMostFrequentCandidates16candidateToCountSaySSGSDySSSiG_tFS2S3key_Si5valuet_tXEfU0_Tf1cn_n((uint64_t)v5);
  swift_release();
  return v6;
}

Swift::String_optional __swiftcall DUFoundInEventsPostprocessing.finalCandidateForMultiple(candidates:)(Swift::OpaquePointer candidates)
{
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  Swift::String_optional result;

  (*(void (**)(void *))(*(_QWORD *)v1 + 272))(candidates._rawValue);
  v2 = (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v1 + 280))();
  swift_bridgeObjectRelease();
  v3 = v2[2];
  if (v3 < 2)
  {
    if (!v3)
    {
      swift_bridgeObjectRelease();
      v4 = 0;
      v6 = 0;
      goto LABEL_7;
    }
    v4 = v2[4];
    v6 = (void *)v2[5];
    swift_bridgeObjectRetain();
  }
  else
  {
    v4 = specialized DUFoundInEventsPostprocessing.getLongestCandidate(candidates:)((uint64_t)v2);
    v6 = v5;
  }
  swift_bridgeObjectRelease();
LABEL_7:
  v7 = v4;
  v8 = v6;
  result.value._object = v8;
  result.value._countAndFlagsBits = v7;
  return result;
}

uint64_t DUFoundInEventsPostprocessing.resolveCandidates(finalCandidates:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    if (one-time initialization token for standard != -1)
      swift_once();
    v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.standard);
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_2282CC000, v5, v6, "DUFoundInEventsPostprocessing: No finalCandidates.", v7, 2u);
      MEMORY[0x22E2B117C](v7, -1, -1);
    }

    return 0;
  }
  if (v2 != 1)
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 296))(a1);
    if (v9)
      return v8;
    if (one-time initialization token for standard != -1)
      swift_once();
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.standard);
    swift_bridgeObjectRetain();
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v14 = 134217984;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2282CC000, v12, v13, "DUFoundInEventsPostprocessing: Unable to find most frequent longest candidate from %ld candidates", v14, 0xCu);
      MEMORY[0x22E2B117C](v14, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease();
    }
    return 0;
  }
  v3 = *(_QWORD *)(a1 + 32);
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t DUFoundInEventsPostprocessing.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t DUFoundInEventsPostprocessing.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

unint64_t *specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe, unint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  unint64_t v6;
  size_t v7;
  unint64_t *v8;
  void *v9;
  _QWORD v11[2];

  v4 = isStackAllocationSafe;
  v11[1] = *MEMORY[0x24BDAC8D0];
  v5 = *(_BYTE *)(isStackAllocationSafe + 32);
  v6 = (unint64_t)((1 << v5) + 63) >> 6;
  v7 = 8 * v6;
  if ((v5 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    bzero((char *)v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    v8 = specialized closure #1 in _NativeDictionary.filter(_:)((_QWORD *)((char *)v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, v4, (uint64_t)a2);
    if (v2)
      swift_willThrow();
    else
      return v8;
  }
  else
  {
    v9 = (void *)swift_slowAlloc();
    bzero(v9, v7);
    a2 = specialized closure #1 in _NativeDictionary.filter(_:)((unint64_t *)v9, v6, v4, (uint64_t)a2);
    MEMORY[0x22E2B117C](v9, -1, -1);
  }
  return a2;
}

unint64_t *specialized closure #1 in _NativeDictionary.filter(_:)(unint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;

  v5 = 0;
  v6 = 0;
  v7 = a3 + 64;
  v8 = 1 << *(_BYTE *)(a3 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a3 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v6 << 6);
      goto LABEL_5;
    }
    v14 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v14 >= v11)
      return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v5, a3);
    v15 = *(_QWORD *)(v7 + 8 * v14);
    ++v6;
    if (!v15)
    {
      v6 = v14 + 1;
      if (v14 + 1 >= v11)
        return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v5, a3);
      v15 = *(_QWORD *)(v7 + 8 * v6);
      if (!v15)
      {
        v6 = v14 + 2;
        if (v14 + 2 >= v11)
          return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v5, a3);
        v15 = *(_QWORD *)(v7 + 8 * v6);
        if (!v15)
          break;
      }
    }
LABEL_20:
    v10 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v6 << 6);
LABEL_5:
    if (*(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v13) == a4)
    {
      *(unint64_t *)((char *)result + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      if (__OFADD__(v5++, 1))
      {
        __break(1u);
        return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v5, a3);
      }
    }
  }
  v16 = v14 + 3;
  if (v16 >= v11)
    return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v5, a3);
  v15 = *(_QWORD *)(v7 + 8 * v16);
  if (v15)
  {
    v6 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    v6 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v6 >= v11)
      return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v5, a3);
    v15 = *(_QWORD *)(v7 + 8 * v6);
    ++v16;
    if (v15)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.extractDictionary(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v31;

  if (!a3)
    return MEMORY[0x24BEE4B00];
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Int>);
  result = static _DictionaryStorage.allocate(capacity:)();
  v8 = result;
  v31 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 64;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
    }
    else
    {
      v14 = v10 + 1;
      if (__OFADD__(v10, 1))
        goto LABEL_40;
      if (v14 >= v31)
        return v8;
      v15 = a1[v14];
      ++v10;
      if (!v15)
      {
        v10 = v14 + 1;
        if (v14 + 1 >= v31)
          return v8;
        v15 = a1[v10];
        if (!v15)
        {
          v10 = v14 + 2;
          if (v14 + 2 >= v31)
            return v8;
          v15 = a1[v10];
          if (!v15)
          {
            v16 = v14 + 3;
            if (v16 >= v31)
              return v8;
            v15 = a1[v16];
            if (!v15)
            {
              while (1)
              {
                v10 = v16 + 1;
                if (__OFADD__(v16, 1))
                  goto LABEL_41;
                if (v10 >= v31)
                  return v8;
                v15 = a1[v10];
                ++v16;
                if (v15)
                  goto LABEL_24;
              }
            }
            v10 = v16;
          }
        }
      }
LABEL_24:
      v9 = (v15 - 1) & v15;
      v13 = __clz(__rbit64(v15)) + (v10 << 6);
    }
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v19 = *v17;
    v18 = v17[1];
    v20 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v13);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    result = Hasher._finalize()();
    v21 = -1 << *(_BYTE *)(v8 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v11 + 8 * (v22 >> 6))) != 0)
    {
      v24 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v11 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v27 = v23 == v26;
        if (v23 == v26)
          v23 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v23);
      }
      while (v28 == -1);
      v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }
    *(_QWORD *)(v11 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    v29 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v24);
    *v29 = v19;
    v29[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v24) = v20;
    ++*(_QWORD *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    if (!v5)
      return v8;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t specialized DUFoundInEventsPostprocessing.tokenIndexesForModelOutput(output:label:engineConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t *i;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t result;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  _OWORD v24[2];
  __int128 v25;
  __int128 v26;

  v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1698]), sel_init);
  if (!a4)
  {
    v25 = 0u;
    v26 = 0u;
LABEL_12:
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)&v25, &demangling cache variable for type metadata for Any?);
    goto LABEL_13;
  }
  *(_QWORD *)&v24[0] = 0xD00000000000001ELL;
  *((_QWORD *)&v24[0] + 1) = 0x80000002284E2090;
  v8 = objc_msgSend(a4, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();
  if (v8)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v24, 0, sizeof(v24));
  }
  outlined init with take of Any?((uint64_t)v24, (uint64_t)&v25);
  if (!*((_QWORD *)&v26 + 1))
    goto LABEL_12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Int]);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_13;
  v9 = *(_QWORD *)&v24[0];
  if (!*(_QWORD *)(*(_QWORD *)&v24[0] + 16))
    goto LABEL_31;
  swift_bridgeObjectRetain();
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v11 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_31:
    swift_bridgeObjectRelease();
LABEL_13:
    v22 = 0;
    v12 = *(_QWORD *)(a1 + 16);
    if (!v12)
      return (uint64_t)v7;
    goto LABEL_14;
  }
  v22 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(a1 + 16);
  if (!v12)
    return (uint64_t)v7;
LABEL_14:
  v13 = __OFADD__(v22, 1);
  v21 = v13;
  swift_bridgeObjectRetain();
  v14 = 0;
  for (i = (uint64_t *)(a1 + 40); ; i += 2)
  {
    v16 = *(i - 1);
    v17 = *i;
    swift_bridgeObjectRetain();
    v18 = objc_msgSend(v7, sel_lastIndex);
    *(_QWORD *)&v25 = v16;
    *((_QWORD *)&v25 + 1) = v17;
    *(_QWORD *)&v24[0] = a2;
    *((_QWORD *)&v24[0] + 1) = a3;
    lazy protocol witness table accessor for type String and conformance String();
    LOBYTE(v16) = StringProtocol.contains<A>(_:)();
    swift_bridgeObjectRelease();
    if ((v16 & 1) == 0)
      goto LABEL_19;
    if (v22 >= 1)
    {
      result = NSNotFound.getter();
      if (v18 != (id)result)
        break;
    }
LABEL_18:
    objc_msgSend(v7, sel_addIndex_, v14);
LABEL_19:
    if (v12 == ++v14)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v7;
    }
  }
  v20 = v14 - (_QWORD)v18;
  if (!__OFSUB__(v14, v18))
  {
    if (v20 >= 2)
    {
      if (v21)
        goto LABEL_33;
      if (v22 + 1 >= (unint64_t)v20)
        objc_msgSend(v7, sel_addIndexesInRange_, v18);
    }
    goto LABEL_18;
  }
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t specialized DUFoundInEventsPostprocessing.candidatesForTaggedCharacterRanges(taggedCharacterRanges:labelTokenIndexes:plainText:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t result;
  uint64_t v12;
  _QWORD aBlock[6];
  uint64_t v14;

  v14 = MEMORY[0x24BEE4AF8];
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = a1;
  v8[3] = a3;
  v8[4] = a4;
  v8[5] = &v14;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = partial apply for closure #1 in DUFoundInEventsPostprocessing.candidatesForTaggedCharacterRanges(taggedCharacterRanges:labelTokenIndexes:plainText:);
  *(_QWORD *)(v9 + 24) = v8;
  aBlock[4] = thunk for @callee_guaranteed (@guaranteed _PASSqliteStatement) -> ()partial apply;
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>?) -> ();
  aBlock[3] = &block_descriptor_23;
  v10 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  objc_msgSend(a2, sel_enumerateRangesUsingBlock_, v10);
  _Block_release(v10);
  LOBYTE(a2) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((a2 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v12 = v14;
    swift_release();
    return v12;
  }
  return result;
}

uint64_t specialized DUFoundInEventsPostprocessing.getLongestCandidate(candidates:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v3 = swift_bridgeObjectRetain() + 40;
  v4 = 0x8000000000000000;
  v5 = v1;
  do
  {
    swift_bridgeObjectRetain();
    v6 = String.count.getter();
    swift_bridgeObjectRelease();
    if (v6 > v4)
      v4 = v6;
    v3 += 16;
    --v5;
  }
  while (v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v7 = (uint64_t *)(a1 + 40);
  v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
  do
  {
    v10 = *(v7 - 1);
    v9 = *v7;
    swift_bridgeObjectRetain();
    if (String.count.getter() == v4)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1);
      v12 = v8[2];
      v11 = v8[3];
      if (v12 >= v11 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
      v8[2] = v12 + 1;
      v13 = &v8[2 * v12];
      v13[4] = v10;
      v13[5] = v9;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v7 += 2;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  if (v8[2] != 1)
  {
    swift_release();
    return 0;
  }
  v14 = v8[4];
  swift_bridgeObjectRetain();
  swift_release();
  return v14;
}

uint64_t specialized DUFoundInEventsPostprocessing.mergeAddressComponents(addressComponents:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  int64_t v27;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  char v37;
  uint64_t *v38;
  _QWORD *v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  unint64_t v50;

  v44 = *(_QWORD *)(a1 + 16);
  if (!v44)
    return MEMORY[0x24BEE4B00];
  v1 = a1 + 32;
  swift_bridgeObjectRetain();
  v2 = 0;
  v3 = (_QWORD *)MEMORY[0x24BEE4B00];
  v46 = v1;
  while (2)
  {
    v4 = *(_QWORD *)(v1 + 8 * v2);
    v45 = v2 + 1;
    v47 = v4 + 64;
    v5 = 1 << *(_BYTE *)(v4 + 32);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v4 + 64);
    v48 = (unint64_t)(v5 + 63) >> 6;
    v49 = *(_QWORD *)(v1 + 8 * v2);
    swift_bridgeObjectRetain();
    v8 = 0;
    while (1)
    {
      if (v7)
      {
        v10 = __clz(__rbit64(v7));
        v11 = (v7 - 1) & v7;
        v12 = v10 | (v8 << 6);
        goto LABEL_25;
      }
      v13 = v8 + 1;
      if (__OFADD__(v8, 1))
        goto LABEL_53;
      v1 = v46;
      if (v13 >= v48)
        break;
      v14 = *(_QWORD *)(v47 + 8 * v13);
      ++v8;
      if (!v14)
      {
        v8 = v13 + 1;
        if (v13 + 1 >= v48)
          break;
        v14 = *(_QWORD *)(v47 + 8 * v8);
        if (!v14)
        {
          v8 = v13 + 2;
          if (v13 + 2 >= v48)
            break;
          v14 = *(_QWORD *)(v47 + 8 * v8);
          if (!v14)
          {
            v15 = v13 + 3;
            if (v15 >= v48)
              break;
            v14 = *(_QWORD *)(v47 + 8 * v15);
            if (!v14)
            {
              while (1)
              {
                v8 = v15 + 1;
                if (__OFADD__(v15, 1))
                  goto LABEL_54;
                if (v8 >= v48)
                  goto LABEL_44;
                v14 = *(_QWORD *)(v47 + 8 * v8);
                ++v15;
                if (v14)
                  goto LABEL_24;
              }
            }
            v8 = v15;
          }
        }
      }
LABEL_24:
      v11 = (v14 - 1) & v14;
      v12 = __clz(__rbit64(v14)) + (v8 << 6);
LABEL_25:
      v16 = 16 * v12;
      v17 = (uint64_t *)(*(_QWORD *)(v49 + 48) + v16);
      v19 = *v17;
      v18 = v17[1];
      v20 = (uint64_t *)(*(_QWORD *)(v49 + 56) + v16);
      v21 = *v20;
      v22 = v20[1];
      v23 = v3[2];
      swift_bridgeObjectRetain();
      if (!v23)
      {
        swift_bridgeObjectRetain();
        goto LABEL_33;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized __RawDictionaryStorage.find<A>(_:)(v19, v18);
      if ((v24 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_33;
      }
      swift_bridgeObjectRelease();
      if (!v3[2])
      {
        swift_bridgeObjectRelease();
LABEL_49:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        return 0;
      }
      swift_bridgeObjectRetain();
      specialized __RawDictionaryStorage.find<A>(_:)(v19, v18);
      if ((v25 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_49;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type String and conformance String();
      v26 = StringProtocol.caseInsensitiveCompare<A>(_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v26)
        goto LABEL_49;
LABEL_33:
      v50 = v11;
      v27 = v8;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v29 = v19;
      v31 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v18);
      v32 = v3[2];
      v33 = (v30 & 1) == 0;
      v34 = v32 + v33;
      if (__OFADD__(v32, v33))
      {
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      v35 = v30;
      if (v3[3] >= v34)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          if ((v30 & 1) != 0)
            goto LABEL_7;
        }
        else
        {
          specialized _NativeDictionary.copy()();
          if ((v35 & 1) != 0)
            goto LABEL_7;
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v34, isUniquelyReferenced_nonNull_native);
        v36 = specialized __RawDictionaryStorage.find<A>(_:)(v29, v18);
        if ((v35 & 1) != (v37 & 1))
          goto LABEL_55;
        v31 = v36;
        if ((v35 & 1) != 0)
        {
LABEL_7:
          v9 = (_QWORD *)(v3[7] + 16 * v31);
          swift_bridgeObjectRelease();
          *v9 = v21;
          v9[1] = v22;
          goto LABEL_8;
        }
      }
      v3[(v31 >> 6) + 8] |= 1 << v31;
      v38 = (uint64_t *)(v3[6] + 16 * v31);
      *v38 = v29;
      v38[1] = v18;
      v39 = (_QWORD *)(v3[7] + 16 * v31);
      *v39 = v21;
      v39[1] = v22;
      v40 = v3[2];
      v41 = __OFADD__(v40, 1);
      v42 = v40 + 1;
      if (v41)
        goto LABEL_52;
      v3[2] = v42;
      swift_bridgeObjectRetain();
LABEL_8:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v8 = v27;
      v7 = v50;
    }
LABEL_44:
    swift_release();
    v2 = v45;
    if (v45 != v44)
      continue;
    break;
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v3;
}

unint64_t specialized DUFoundInEventsPostprocessing.addressCandidatesForTaggedCharacterRanges(taggedCharacterRanges:labelTokenIndexes:plainText:dataDetectorMatches:label:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint8_t *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v43;
  _QWORD aBlock[6];
  uint64_t v45;
  uint64_t v46;

  v6 = v5;
  v12 = MEMORY[0x24BEE4AF8];
  v13 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v45 = v12;
  v46 = MEMORY[0x24BEE4B08];
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = a1;
  v14[3] = v6;
  v14[4] = a5;
  v14[5] = &v45;
  v14[6] = a3;
  v14[7] = a4;
  v14[8] = &v46;
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = partial apply for closure #1 in DUFoundInEventsPostprocessing.addressCandidatesForTaggedCharacterRanges(taggedCharacterRanges:labelTokenIndexes:plainText:dataDetectorMatches:label:);
  *(_QWORD *)(v15 + 24) = v14;
  aBlock[4] = thunk for @callee_guaranteed (@guaranteed _PASSqliteStatement) -> ()partial apply;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>?) -> ();
  aBlock[3] = &block_descriptor_13_1;
  v16 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  objc_msgSend(a2, sel_enumerateRangesUsingBlock_, v16);
  _Block_release(v16);
  LOBYTE(a2) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((a2 & 1) != 0)
  {
    __break(1u);
LABEL_30:
    swift_once();
    goto LABEL_13;
  }
  v17 = *(_QWORD *)(v45 + 16);
  if (!v17)
    goto LABEL_8;
  if (v17 == 1)
  {
    v18 = *(_QWORD *)(v45 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v13 = v18;
    if (!*(_QWORD *)(v18 + 16))
      goto LABEL_9;
    goto LABEL_28;
  }
  v19 = swift_bridgeObjectRetain();
  v20 = specialized DUFoundInEventsPostprocessing.mergeAddressComponents(addressComponents:)(v19);
  swift_bridgeObjectRelease();
  if (v20)
  {
    swift_bridgeObjectRelease();
    v13 = v20;
LABEL_8:
    if (!*(_QWORD *)(v13 + 16))
      goto LABEL_9;
    goto LABEL_28;
  }
  if (one-time initialization token for standard != -1)
    goto LABEL_30;
LABEL_13:
  v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)static Logger.standard);
  v23 = Logger.logObject.getter();
  v24 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v25 = 0;
    _os_log_impl(&dword_2282CC000, v23, v24, "Failed to merge address components successfully", v25, 2u);
    MEMORY[0x22E2B117C](v25, -1, -1);
  }

  if (!*(_QWORD *)(v13 + 16))
  {
LABEL_9:
    v21 = *(_QWORD *)(v46 + 16);
    if (v21)
    {
      if (v21 == 1)
      {
        specialized Collection.first.getter(v46);
        goto LABEL_28;
      }
      v31 = swift_bridgeObjectRetain();
      v32 = specialized _copyCollectionToContiguousArray<A>(_:)(v31);
      swift_bridgeObjectRelease();
      (*(void (**)(_QWORD *))(*(_QWORD *)v6 + 296))(v32);
      v34 = v33;
      swift_release();
      if (v34)
        goto LABEL_28;
      if (one-time initialization token for standard != -1)
        swift_once();
      v35 = type metadata accessor for Logger();
      __swift_project_value_buffer(v35, (uint64_t)static Logger.standard);
      v27 = Logger.logObject.getter();
      v36 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v27, v36))
      {
LABEL_27:

        goto LABEL_28;
      }
      v37 = (uint8_t *)swift_slowAlloc();
      v38 = swift_slowAlloc();
      v43 = v38;
      *(_DWORD *)v37 = 136315138;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v39 = Set.description.getter();
      v41 = v40;
      swift_bridgeObjectRelease();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v41, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2282CC000, v27, v36, "Unable to obtain final candidate in group of %s", v37, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22E2B117C](v38, -1, -1);
      v30 = v37;
    }
    else
    {
      if (one-time initialization token for standard != -1)
        swift_once();
      v26 = type metadata accessor for Logger();
      __swift_project_value_buffer(v26, (uint64_t)static Logger.standard);
      v27 = Logger.logObject.getter();
      v28 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v27, v28))
        goto LABEL_27;
      v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v29 = 0;
      _os_log_impl(&dword_2282CC000, v27, v28, "There were no final candidates to be found...", v29, 2u);
      v30 = v29;
    }
    MEMORY[0x22E2B117C](v30, -1, -1);
    goto LABEL_27;
  }
LABEL_28:
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t specialized DUFoundInEventsPostprocessing.dateComponentsForTaggedCharacterRanges(taggedCharacterRanges:labelTokenIndexes:dataDetectorMatches:startDate:)(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t result;
  uint64_t v12;
  _QWORD aBlock[6];
  uint64_t v14;

  v14 = MEMORY[0x24BEE4AF8];
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a3;
  *(_BYTE *)(v8 + 32) = a4;
  *(_QWORD *)(v8 + 40) = &v14;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = partial apply for closure #1 in DUFoundInEventsPostprocessing.dateComponentsForTaggedCharacterRanges(taggedCharacterRanges:labelTokenIndexes:dataDetectorMatches:startDate:);
  *(_QWORD *)(v9 + 24) = v8;
  aBlock[4] = partial apply for thunk for @callee_guaranteed (@unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>?) -> ();
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>?) -> ();
  aBlock[3] = &block_descriptor_12;
  v10 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  objc_msgSend(a2, sel_enumerateRangesUsingBlock_, v10);
  _Block_release(v10);
  LOBYTE(a2) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((a2 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v12 = v14;
    swift_release();
    return v12;
  }
  return result;
}

uint64_t specialized DUFoundInEventsPostprocessing.schemaStringForDateComponents(dateComponents:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void (*v37)(char *, char *, uint64_t);
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, uint64_t, uint64_t);
  int v44;
  id v45;
  char v46;
  char v47;
  void (*v48)(char *, char *, uint64_t);
  char *v49;
  int v50;
  id v51;
  char *v52;
  Class v53;
  char v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  char *v57;
  char v58;
  char v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  Class v63;
  id v64;
  void *v65;
  Class isa;
  id v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v71 = (char *)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v72 = (char *)&v68 - v5;
  v6 = type metadata accessor for Calendar();
  v73 = *(_QWORD *)(v6 - 8);
  v74 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v9);
  v75 = (char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v68 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DateComponents();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v68 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x24BDAC7A8](v20);
  v25 = (char *)&v68 - v24;
  MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)&v68 - v26;
  v28 = a1;
  v30 = v29;
  outlined init with copy of DateComponents?(v28, (uint64_t)v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v30) == 1)
  {
    v31 = &demangling cache variable for type metadata for DateComponents?;
    v32 = (uint64_t)v17;
LABEL_5:
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v32, v31);
    return 0;
  }
  v69 = v25;
  v70 = v22;
  v33 = (uint64_t)v72;
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v27, v17, v30);
  static Calendar.current.getter();
  v34 = v75;
  Calendar.date(from:)();
  (*(void (**)(char *, uint64_t))(v73 + 8))(v8, v74);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v34, 1, v11) == 1)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v27, v30);
    v31 = &demangling cache variable for type metadata for Date?;
    v32 = (uint64_t)v34;
    goto LABEL_5;
  }
  v73 = v12;
  v74 = v30;
  v37 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v38 = v14;
  v39 = v14;
  v40 = v11;
  v37(v39, v34, v11);
  DateComponents.timeZone.getter();
  v41 = type metadata accessor for TimeZone();
  v42 = *(_QWORD *)(v41 - 8);
  v43 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v42 + 48);
  v44 = v43(v33, 1, v41);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v33, &demangling cache variable for type metadata for TimeZone?);
  if (v44 == 1)
  {
    v45 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1500]), sel_init);
    DateComponents.hour.getter();
    v47 = v46;
    v48 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
    v49 = v69;
    v48(v69, v27, v74);
    if ((v47 & 1) != 0)
    {
      DateComponents.minute.getter();
      v50 = v54 & 1;
    }
    else
    {
      v50 = 0;
    }
    v55 = *(void (**)(char *, uint64_t))(v19 + 8);
    v56 = v74;
    v55(v49, v74);
    v57 = v70;
    v48(v70, v27, v56);
    if (v50)
    {
      DateComponents.second.getter();
      v59 = v58;
      v55(v57, v56);
      v60 = v40;
      if ((v59 & 1) != 0)
      {
        v61 = 0x2D4D4D2D79797979;
        v62 = 0xEA00000000006464;
LABEL_20:
        v65 = (void *)MEMORY[0x22E2AF8EC](v61, v62);
        objc_msgSend(v45, sel_setDateFormat_, v65);

        isa = Date._bridgeToObjectiveC()().super.isa;
        v67 = objc_msgSend(v45, sel_stringFromDate_, isa);

        v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        (*(void (**)(char *, uint64_t))(v73 + 8))(v38, v60);
        v55(v27, v74);
        return v35;
      }
    }
    else
    {
      v55(v57, v56);
      v60 = v40;
    }
    v62 = 0x80000002284E2070;
    v61 = 0xD000000000000015;
    goto LABEL_20;
  }
  v51 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD15D0]), sel_init);
  v52 = v71;
  DateComponents.timeZone.getter();
  if (v43((uint64_t)v52, 1, v41) == 1)
  {
    v53 = 0;
  }
  else
  {
    v53 = TimeZone._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v42 + 8))(v52, v41);
  }
  objc_msgSend(v51, sel_setTimeZone_, v53);

  v63 = Date._bridgeToObjectiveC()().super.isa;
  v64 = objc_msgSend(v51, sel_stringFromDate_, v63);

  v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  (*(void (**)(char *, uint64_t))(v73 + 8))(v38, v40);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v27, v74);
  return v35;
}

unint64_t specialized DUFoundInEventsPostprocessing.detectEventPolarity(modelOutput:)(uint64_t a1)
{
  uint64_t v1;
  unint64_t result;
  char v3;
  _QWORD *v4;
  char v6;

  v1 = *(_QWORD *)(a1 + 24);
  if (!*(_QWORD *)(v1 + 16))
    return 2;
  result = specialized __RawDictionaryStorage.find<A>(_:)(0x79746972616C6F70, 0xE800000000000000);
  if ((v3 & 1) == 0)
    return 2;
  v4 = *(_QWORD **)(*(_QWORD *)(v1 + 56) + 8 * result);
  if (v4[2])
  {
    if (v4[4] == 0x544E455645 && v4[5] == 0xE500000000000000)
      v6 = 1;
    else
      v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    return v6 & 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t outlined init with copy of DateComponents?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of DateComponents?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for DUFoundInEventsPostprocessing()
{
  return objc_opt_self();
}

uint64_t sub_2284435B0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DUFoundInEventsPostprocessing.dateComponentsForTaggedCharacterRanges(taggedCharacterRanges:labelTokenIndexes:dataDetectorMatches:startDate:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in DUFoundInEventsPostprocessing.dateComponentsForTaggedCharacterRanges(taggedCharacterRanges:labelTokenIndexes:dataDetectorMatches:startDate:)(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(unsigned __int8 *)(v3 + 32), *(unint64_t **)(v3 + 40));
}

uint64_t sub_2284435EC()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

uint64_t sub_228443614()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DUFoundInEventsPostprocessing.addressCandidatesForTaggedCharacterRanges(taggedCharacterRanges:labelTokenIndexes:plainText:dataDetectorMatches:label:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in DUFoundInEventsPostprocessing.addressCandidatesForTaggedCharacterRanges(taggedCharacterRanges:labelTokenIndexes:plainText:dataDetectorMatches:label:)(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD **)(v3 + 40));
}

uint64_t sub_228443680()
{
  return swift_deallocObject();
}

unint64_t specialized DUFoundInEventsPostprocessing.getComponentResultsForAddress(dataDetectorMatches:resultRange:)(uint64_t a1, NSUInteger a2, NSUInteger a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  NSRange v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  void *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char *v62;
  id v63;
  NSObject *v64;
  os_log_type_t v65;
  uint64_t v66;
  int64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char isUniquelyReferenced_nonNull_native;
  char v77;
  unint64_t v78;
  uint64_t v79;
  _BOOL8 v80;
  uint64_t v81;
  char v82;
  unint64_t v83;
  char v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t *v87;
  _QWORD *v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  _QWORD v92[2];
  NSRange v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  int64_t v103;
  uint64_t v104;
  uint64_t v105;
  int64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;

  v93.length = a3;
  v93.location = a2;
  v4 = type metadata accessor for Logger();
  v108 = *(_QWORD *)(v4 - 8);
  v109 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v92 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = (int *)type metadata accessor for FoundInEventDataDetectorsOutput();
  v7 = *((_QWORD *)v98 - 1);
  MEMORY[0x24BDAC7A8](v98);
  v94 = (char *)v92 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v97 = *(_QWORD *)(a1 + 16);
  if (!v97)
    return result;
  v104 = result;
  v96 = a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  v95 = *(_QWORD *)(v7 + 72);
  v10 = *MEMORY[0x24BDD12C0];
  v113 = *MEMORY[0x24BDD12B8];
  v112 = *MEMORY[0x24BDD1288];
  v111 = *MEMORY[0x24BDD12B0];
  v110 = *MEMORY[0x24BDD1290];
  v92[1] = a1;
  swift_bridgeObjectRetain();
  v11 = 0;
  *(_QWORD *)&v12 = 136315138;
  v102 = v12;
  v101 = MEMORY[0x24BEE4AD8] + 8;
  v107 = v6;
  v13 = (uint64_t)v94;
  v100 = v10;
  while (1)
  {
    v99 = v11;
    outlined init with copy of FoundInEventDataDetectorsOutput(v96 + v95 * v11, v13);
    if (*(_BYTE *)(v13 + v98[8]) != 4)
      goto LABEL_5;
    v114 = *(_QWORD *)(v13 + v98[17]);
    if (!v114)
      goto LABEL_5;
    v15 = v98[19];
    v16 = v13 + v98[20];
    v17 = *(unsigned __int8 *)(v16 + 8);
    v18 = *(_QWORD *)v16;
    v19.length = v17 ? 0 : v18;
    v19.location = *(_BYTE *)(v13 + v15 + 8) ? 0 : *(_QWORD *)(v13 + v15);
    if ((uint64_t)NSIntersectionRange(v93, v19).length >= 1)
      break;
LABEL_4:
    v13 = (uint64_t)v94;
LABEL_5:
    v14 = v99 + 1;
    outlined destroy of FoundInEventDataDetectorsOutput(v13);
    v11 = v14;
    if (v14 == v97)
    {
      swift_bridgeObjectRelease();
      return v104;
    }
  }
  v20 = *(_QWORD *)(v114 + 64);
  v105 = v114 + 64;
  v21 = 1 << *(_BYTE *)(v114 + 32);
  if (v21 < 64)
    v22 = ~(-1 << v21);
  else
    v22 = -1;
  v23 = v22 & v20;
  v106 = (unint64_t)(v21 + 63) >> 6;
  swift_bridgeObjectRetain();
  v24 = 0;
  while (v23)
  {
    while (1)
    {
      v25 = __clz(__rbit64(v23));
      v23 &= v23 - 1;
      v26 = v25 | (v24 << 6);
LABEL_37:
      v30 = *(void **)(*(_QWORD *)(v114 + 48) + 8 * v26);
      v31 = (uint64_t *)(*(_QWORD *)(v114 + 56) + 16 * v26);
      v33 = *v31;
      v32 = v31[1];
      v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v36 = v35;
      if (v34 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v36 == v37)
      {
        v103 = v24;
        v72 = v30;
        swift_bridgeObjectRetain();

        v73 = 0x6F436C6174736F70;
        v74 = 0xEA00000000006564;
LABEL_67:
        swift_bridgeObjectRelease_n();
        goto LABEL_68;
      }
      v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v40 = v30;
      swift_bridgeObjectRetain();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v39 & 1) == 0)
        break;
      v103 = v24;
      v73 = 0x6F436C6174736F70;
      v74 = 0xEA00000000006564;
LABEL_68:
      v75 = v104;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v115 = (_QWORD *)v75;
      v78 = specialized __RawDictionaryStorage.find<A>(_:)(v73, v74);
      v79 = *(_QWORD *)(v75 + 16);
      v80 = (v77 & 1) == 0;
      v81 = v79 + v80;
      if (__OFADD__(v79, v80))
        goto LABEL_84;
      v82 = v77;
      if (*(_QWORD *)(v75 + 24) >= v81)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          specialized _NativeDictionary.copy()();
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v81, isUniquelyReferenced_nonNull_native);
        v83 = specialized __RawDictionaryStorage.find<A>(_:)(v73, v74);
        if ((v82 & 1) != (v84 & 1))
          goto LABEL_87;
        v78 = v83;
      }
      v24 = v103;
      v85 = v115;
      v104 = (uint64_t)v115;
      if ((v82 & 1) != 0)
      {
        v86 = (_QWORD *)(v115[7] + 16 * v78);
        swift_bridgeObjectRelease();
        *v86 = v33;
        v86[1] = v32;
      }
      else
      {
        v115[(v78 >> 6) + 8] |= 1 << v78;
        v87 = (uint64_t *)(v85[6] + 16 * v78);
        *v87 = v73;
        v87[1] = v74;
        v88 = (_QWORD *)(v85[7] + 16 * v78);
        *v88 = v33;
        v88[1] = v32;
        v89 = v85[2];
        v90 = __OFADD__(v89, 1);
        v91 = v89 + 1;
        if (v90)
          goto LABEL_85;
        v85[2] = v91;
        swift_bridgeObjectRetain();
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!v23)
        goto LABEL_23;
    }
    v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v43 = v42;
    if (v41 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v43 == v44)
    {
      v103 = v24;
      v73 = 0x6441746565727473;
      v74 = 0xED00007373657264;
      goto LABEL_67;
    }
    v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v46 & 1) != 0)
    {
      v103 = v24;
      v73 = 0x6441746565727473;
      v74 = 0xED00007373657264;
      goto LABEL_68;
    }
    v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v49 = v48;
    if (v47 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v49 == v50)
    {
      v103 = v24;
      v73 = 0x4C73736572646461;
      v74 = 0xEF7974696C61636FLL;
      goto LABEL_67;
    }
    v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v51 & 1) != 0)
    {
      v103 = v24;
      v73 = 0x4C73736572646461;
      v74 = 0xEF7974696C61636FLL;
      goto LABEL_68;
    }
    v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v54 = v53;
    if (v52 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v54 == v55)
    {
      v103 = v24;
      v73 = 0x5273736572646461;
      v74 = 0xED00006E6F696765;
      goto LABEL_67;
    }
    v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v56 & 1) != 0)
    {
      v103 = v24;
      v73 = 0x5273736572646461;
      v74 = 0xED00006E6F696765;
      goto LABEL_68;
    }
    v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v59 = v58;
    if (v57 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v59 == v60)
    {
      v103 = v24;
      v74 = 0xE700000000000000;
      v73 = 0x7972746E756F43;
      goto LABEL_67;
    }
    v61 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v61 & 1) != 0)
    {
      v103 = v24;
      v74 = 0xE700000000000000;
      v73 = 0x7972746E756F43;
      goto LABEL_68;
    }
    swift_bridgeObjectRelease();
    v62 = v107;
    Logger.init()();
    v63 = v40;
    v64 = Logger.logObject.getter();
    v65 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v64, v65))
    {
      v66 = swift_slowAlloc();
      v67 = v24;
      v68 = swift_slowAlloc();
      v115 = (_QWORD *)v68;
      *(_DWORD *)v66 = v102;
      v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(_QWORD *)(v66 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v70, (uint64_t *)&v115);

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2282CC000, v64, v65, "DUFoundInEventPostprocessing: unknown address component key: %s", (uint8_t *)v66, 0xCu);
      swift_arrayDestroy();
      v71 = v68;
      v24 = v67;
      MEMORY[0x22E2B117C](v71, -1, -1);
      MEMORY[0x22E2B117C](v66, -1, -1);

    }
    else
    {

    }
    (*(void (**)(char *, uint64_t))(v108 + 8))(v62, v109);
  }
LABEL_23:
  v27 = v24 + 1;
  if (!__OFADD__(v24, 1))
  {
    if (v27 < v106)
    {
      v28 = *(_QWORD *)(v105 + 8 * v27);
      ++v24;
      if (v28)
        goto LABEL_36;
      v24 = v27 + 1;
      if (v27 + 1 < v106)
      {
        v28 = *(_QWORD *)(v105 + 8 * v24);
        if (v28)
          goto LABEL_36;
        v24 = v27 + 2;
        if (v27 + 2 < v106)
        {
          v28 = *(_QWORD *)(v105 + 8 * v24);
          if (v28)
            goto LABEL_36;
          v29 = v27 + 3;
          if (v29 < v106)
          {
            v28 = *(_QWORD *)(v105 + 8 * v29);
            if (v28)
            {
              v24 = v29;
LABEL_36:
              v23 = (v28 - 1) & v28;
              v26 = __clz(__rbit64(v28)) + (v24 << 6);
              goto LABEL_37;
            }
            while (1)
            {
              v24 = v29 + 1;
              if (__OFADD__(v29, 1))
                goto LABEL_86;
              if (v24 >= v106)
                break;
              v28 = *(_QWORD *)(v105 + 8 * v24);
              ++v29;
              if (v28)
                goto LABEL_36;
            }
          }
        }
      }
    }
    swift_release();
    goto LABEL_4;
  }
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_228443FEC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DUFoundInEventsPostprocessing.candidatesForTaggedCharacterRanges(taggedCharacterRanges:labelTokenIndexes:plainText:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in DUFoundInEventsPostprocessing.candidatesForTaggedCharacterRanges(taggedCharacterRanges:labelTokenIndexes:plainText:)(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(uint64_t **)(v3 + 40));
}

uint64_t sub_228444024()
{
  return swift_deallocObject();
}

uint64_t specialized String.UTF8View.subscript.getter(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = a2;
  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((a2 & 0xC) == 4 << v8)
  {
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(a2, a3, a4);
    v6 = result;
  }
  if ((v7 & 0xC) == v9)
  {
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(v7, a3, a4);
    v7 = result;
  }
  v10 = a3 & 0xFFFFFFFFFFFFLL;
  if ((a4 & 0x2000000000000000) != 0)
    v10 = HIBYTE(a4) & 0xF;
  if (v6 >> 14 <= 4 * v10 && v6 >> 14 >= v7 >> 14)
    return v7;
  __break(1u);
  return result;
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *DUDocumentGlobals.defaultMaxLength.unsafeMutableAddressor()
{
  return &static DUDocumentGlobals.defaultMaxLength;
}

const char *DUDocumentCategory.ticket.unsafeMutableAddressor()
{
  return "ticket";
}

const char *DUDocumentCategory.receipt.unsafeMutableAddressor()
{
  return "receipt";
}

const char *DUDocumentCategory.taxForm.unsafeMutableAddressor()
{
  return "taxForm";
}

const char *DUDocumentCategory.form.unsafeMutableAddressor()
{
  return "form";
}

const char *DUDocumentCategory.identification.unsafeMutableAddressor()
{
  return "identification";
}

const char *DUDocumentCategory.book.unsafeMutableAddressor()
{
  return "book";
}

const char *DUDocumentCategory.recipe.unsafeMutableAddressor()
{
  return "recipe";
}

const char *DUDocumentCategory.medical.unsafeMutableAddressor()
{
  return "medical";
}

const char *DUStructuredExtractionType.title.unsafeMutableAddressor()
{
  return "title";
}

const char *DUStructuredExtractionType.liveText.unsafeMutableAddressor()
{
  return "liveText";
}

const char *DUStructuredExtractionType.person.unsafeMutableAddressor()
{
  return "person";
}

void *DUStructuredExtractionType.url.unsafeMutableAddressor()
{
  return &static DUStructuredExtractionType.url;
}

const char *DUStructuredExtractionType.phone.unsafeMutableAddressor()
{
  return "phone";
}

const char *DUStructuredExtractionType.address.unsafeMutableAddressor()
{
  return "address";
}

const char *DUStructuredExtractionType.calendarEvent.unsafeMutableAddressor()
{
  return "calendarEvent";
}

const char *DUStructuredExtractionType.hmHome.unsafeMutableAddressor()
{
  return "hmHome";
}

const char *DUStructuredExtractionType.hmRoom.unsafeMutableAddressor()
{
  return "hmRoom";
}

const char *DUStructuredExtractionType.hmAccessory.unsafeMutableAddressor()
{
  return "hmAccessory";
}

void *DUDocumentGlobals.warningMaxLength.unsafeMutableAddressor()
{
  return &static DUDocumentGlobals.warningMaxLength;
}

void *DUDocumentGlobals.noMaxLength.unsafeMutableAddressor()
{
  return &static DUDocumentGlobals.noMaxLength;
}

void *DUDocumentGlobals.htmlStringMaxLength.unsafeMutableAddressor()
{
  return &static DUDocumentGlobals.htmlStringMaxLength;
}

uint64_t static DUDocumentCategory.ticket.getter()
{
  return 0x74656B636974;
}

uint64_t static DUDocumentCategory.receipt.getter()
{
  return 0x74706965636572;
}

uint64_t static DUDocumentCategory.taxForm.getter()
{
  return 0x6D726F46786174;
}

uint64_t static DUDocumentCategory.form.getter()
{
  return 1836216166;
}

uint64_t static DUDocumentCategory.identification.getter()
{
  return 0x696669746E656469;
}

uint64_t static DUDocumentCategory.book.getter()
{
  return 1802465122;
}

const char *DUDocumentCategory.worksheet.unsafeMutableAddressor()
{
  return "worksheet";
}

uint64_t static DUDocumentCategory.worksheet.getter()
{
  return 0x656568736B726F77;
}

uint64_t static DUDocumentCategory.recipe.getter()
{
  return 0x657069636572;
}

uint64_t static DUDocumentCategory.medical.getter()
{
  return 0x6C61636964656DLL;
}

const char *DUDocumentCategory.presentation.unsafeMutableAddressor()
{
  return "presentation";
}

uint64_t static DUDocumentCategory.presentation.getter()
{
  return 0x61746E6573657270;
}

id DUDocumentCategory.init()()
{
  return DUDocumentCategory.init()(type metadata accessor for DUDocumentCategory);
}

uint64_t type metadata accessor for DUDocumentCategory()
{
  return objc_opt_self();
}

id DUDocumentCategory.__deallocating_deinit()
{
  return DUGlobalTopicSetIdentifier.__deallocating_deinit(type metadata accessor for DUDocumentCategory);
}

uint64_t static DUStructuredExtractionType.title.getter()
{
  return 0x656C746974;
}

uint64_t static DUStructuredExtractionType.phone.getter()
{
  return 0x656E6F6870;
}

uint64_t static DUStructuredExtractionType.url.getter()
{
  return 7107189;
}

uint64_t static DUStructuredExtractionType.address.getter()
{
  return 0x73736572646461;
}

uint64_t static DUStructuredExtractionType.calendarEvent.getter()
{
  return 0x7261646E656C6163;
}

uint64_t static DUStructuredExtractionType.liveText.getter()
{
  return 0x747865546576696CLL;
}

uint64_t static DUStructuredExtractionType.person.getter()
{
  return 0x6E6F73726570;
}

uint64_t static DUStructuredExtractionType.hmHome.getter()
{
  return 0x656D6F486D68;
}

uint64_t static DUStructuredExtractionType.hmRoom.getter()
{
  return 0x6D6F6F526D68;
}

uint64_t static DUStructuredExtractionType.hmAccessory.getter()
{
  return 0x7373656363416D68;
}

id DUStructuredExtractionType.init()()
{
  return DUDocumentCategory.init()(type metadata accessor for DUStructuredExtractionType);
}

uint64_t type metadata accessor for DUStructuredExtractionType()
{
  return objc_opt_self();
}

id DUStructuredExtractionType.__deallocating_deinit()
{
  return DUGlobalTopicSetIdentifier.__deallocating_deinit(type metadata accessor for DUStructuredExtractionType);
}

uint64_t static DUDocumentGlobals.defaultMaxLength.getter()
{
  return 5120;
}

uint64_t static DUDocumentGlobals.htmlStringMaxLength.getter()
{
  return 100000;
}

uint64_t static DUDocumentGlobals.warningMaxLength.getter()
{
  return 100000;
}

uint64_t static DUDocumentGlobals.noMaxLength.getter()
{
  return 0;
}

id DUDocumentGlobals.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id DUDocumentGlobals.init()()
{
  return DUDocumentCategory.init()(type metadata accessor for DUDocumentGlobals);
}

id DUDocumentCategory.init()(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t type metadata accessor for DUDocumentGlobals()
{
  return objc_opt_self();
}

id @objc DUDocumentCategory.init()(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  objc_super v4;

  v4.receiver = a1;
  v4.super_class = (Class)a3();
  return objc_msgSendSuper2(&v4, sel_init);
}

id DUDocumentGlobals.__deallocating_deinit()
{
  return DUGlobalTopicSetIdentifier.__deallocating_deinit(type metadata accessor for DUDocumentGlobals);
}

sentencepiece::ModelInterface *sentencepiece::ModelInterface::ModelInterface(sentencepiece::ModelInterface *this, const sentencepiece::ModelProto *a2)
{
  *(_QWORD *)this = off_24F0FD488;
  *((_QWORD *)this + 1) = (char *)a2 + 16;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = &off_24F0FD588;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = &off_24F0FD588;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 22) = 0;
  sentencepiece::util::Status::Status((_QWORD *)this + 12);
  return this;
}

void sub_2284449A0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t **v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v6 = v3;
  v1[7] = v6;
  *v5 = 0;
  v5[1] = 0;
  v8 = v1[10];
  if (v8)
  {
    MEMORY[0x22E2B0780](v8, 0x1000C8052888210);
    v1[10] = 0;
  }
  v1[3] = &off_24F0FD588;
  *v4 = 0;
  v4[1] = 0;
  v9 = v1[6];
  if (v9)
  {
    MEMORY[0x22E2B0780](v9, 0x1000C8052888210);
    v1[6] = 0;
  }
  std::unique_ptr<sentencepiece::normalizer::PrefixMatcher>::reset[abi:ne180100](v2, 0);
  _Unwind_Resume(a1);
}

_QWORD *Darts::DoubleArrayImpl<void,void,int,void>::~DoubleArrayImpl(_QWORD *a1)
{
  uint64_t v2;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24F0FD588;
  v2 = a1[3];
  if (v2)
  {
    MEMORY[0x22E2B0780](v2, 0x1000C8052888210);
    a1[3] = 0;
  }
  return a1;
}

uint64_t sentencepiece::ModelInterface::ModelInterface(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  uint64_t *v7;
  _DWORD *v9;

  *(_QWORD *)a1 = off_24F0FD488;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = &off_24F0FD588;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = &off_24F0FD588;
  *(_QWORD *)(a1 + 64) = 0;
  v7 = (uint64_t *)(a1 + 96);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  sentencepiece::util::Status::Status((_QWORD *)(a1 + 96));
  sentencepiece::ModelInterface::InitFromMMappedFile(a1, a3, a4, (sentencepiece::util::Status *)&v9);
  sentencepiece::util::Status::operator=(v7, &v9);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v9);
  return a1;
}

void sub_228444B20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t **v3;
  sentencepiece::util::Status *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  va_list va;

  va_start(va, a2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)va);
  sentencepiece::util::Status::~Status(v4);
  v2[7] = v6;
  *v7 = 0;
  v7[1] = 0;
  v9 = v2[10];
  if (v9)
  {
    MEMORY[0x22E2B0780](v9, 0x1000C8052888210);
    v2[10] = 0;
  }
  v2[3] = v6;
  *v5 = 0;
  v5[1] = 0;
  v10 = v2[6];
  if (v10)
  {
    MEMORY[0x22E2B0780](v10, 0x1000C8052888210);
    v2[6] = 0;
  }
  std::unique_ptr<sentencepiece::normalizer::PrefixMatcher>::reset[abi:ne180100](v3, 0);
  _Unwind_Resume(a1);
}

void sentencepiece::ModelInterface::InitFromMMappedFile(uint64_t a1@<X0>, _DWORD *a2@<X1>, unint64_t a3@<X2>, sentencepiece::util::Status *a4@<X8>)
{
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  sentencepiece::mmap_util *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  _DWORD *v23;
  _QWORD v24[33];
  uint64_t *v25;
  unsigned int v26;
  _DWORD *v27;
  unint64_t v28;

  v27 = a2;
  v28 = a3;
  sentencepiece::mmap_util::DecodePrefix<int>(a2, a3, (_DWORD *)(a1 + 88), a4);
  if (!*(_QWORD *)a4)
  {
    sentencepiece::util::Status::~Status(a4);
    sentencepiece::mmap_util::RemovePrefix(&v27, 4uLL, a4);
    if (!*(_QWORD *)a4)
    {
      sentencepiece::util::Status::~Status(a4);
      sentencepiece::mmap_util::DecodePrefix<int>(v27, v28, (_DWORD *)(a1 + 92), a4);
      if (!*(_QWORD *)a4)
      {
        sentencepiece::util::Status::~Status(a4);
        sentencepiece::mmap_util::RemovePrefix(&v27, 4uLL, a4);
        if (!*(_QWORD *)a4)
        {
          sentencepiece::util::Status::~Status(a4);
          v26 = 0;
          sentencepiece::mmap_util::DecodePrefix<unsigned int>(v27, v28, &v26, a4);
          if (!*(_QWORD *)a4)
          {
            sentencepiece::util::Status::~Status(a4);
            sentencepiece::mmap_util::RemovePrefix(&v27, 4uLL, a4);
            if (!*(_QWORD *)a4)
            {
              sentencepiece::util::Status::~Status(a4);
              v6 = v26;
              if (v28 < v26)
                v6 = v28;
              v23 = v27;
              v24[0] = v6;
              absl::make_unique<sentencepiece::normalizer::PrefixMatcher,std::string_view>(&v23, (uint64_t *)&v25);
              v7 = v25;
              v25 = 0;
              std::unique_ptr<sentencepiece::normalizer::PrefixMatcher>::reset[abi:ne180100]((uint64_t **)(a1 + 16), v7);
              std::unique_ptr<sentencepiece::normalizer::PrefixMatcher>::reset[abi:ne180100](&v25, 0);
              v8 = sentencepiece::mmap_util::RoundUp((sentencepiece::mmap_util *)v26, 4uLL);
              sentencepiece::mmap_util::RemovePrefix(&v27, v8, a4);
              if (!*(_QWORD *)a4)
              {
                sentencepiece::util::Status::~Status(a4);
                LODWORD(v25) = 0;
                sentencepiece::mmap_util::DecodePrefix<unsigned int>(v27, v28, &v25, a4);
                if (!*(_QWORD *)a4)
                {
                  sentencepiece::util::Status::~Status(a4);
                  sentencepiece::mmap_util::RemovePrefix(&v27, 4uLL, a4);
                  if (!*(_QWORD *)a4)
                  {
                    sentencepiece::util::Status::~Status(a4);
                    v9 = (sentencepiece::mmap_util *)v25;
                    if (!(_DWORD)v25)
                    {
                      LODWORD(v23) = 13;
                      v11 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(", 1);
                      std::ostream::operator<<();
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)") [", 3);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(pieces_blob_size) > (0)", 24);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"] ", 2);
                      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v23, (uint64_t)a4);
                      goto LABEL_18;
                    }
                    if (v28 < v25)
                    {
                      LODWORD(v23) = 13;
                      v10 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(", 1);
                      std::ostream::operator<<();
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)") [", 3);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(blob.size()) >= (pieces_blob_size)", 35);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"] ", 2);
                      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v23, (uint64_t)a4);
LABEL_18:
                      sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&v23);
                      return;
                    }
                    if ((v25 & 3) != 0)
                    {
                      LODWORD(v23) = 13;
                      v12 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(", 1);
                      std::ostream::operator<<();
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)") [", 3);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(pieces_blob_size % pieces_.unit_size()) == (0)", 47);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"] ", 2);
                      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v23, (uint64_t)a4);
                      goto LABEL_18;
                    }
                    v13 = v27;
                    v14 = v25 >> 2;
                    *(_QWORD *)(a1 + 32) = 0;
                    *(_QWORD *)(a1 + 40) = 0;
                    if (*(_QWORD *)(a1 + 48))
                    {
                      MEMORY[0x22E2B0780](*(_QWORD *)(a1 + 48), 0x1000C8052888210);
                      *(_QWORD *)(a1 + 48) = 0;
                      v9 = (sentencepiece::mmap_util *)v25;
                    }
                    *(_QWORD *)(a1 + 32) = v14;
                    *(_QWORD *)(a1 + 40) = v13;
                    v15 = sentencepiece::mmap_util::RoundUp(v9, 4uLL);
                    sentencepiece::mmap_util::RemovePrefix(&v27, v15, a4);
                    if (!*(_QWORD *)a4)
                    {
                      sentencepiece::util::Status::~Status(a4);
                      v22 = 0;
                      sentencepiece::mmap_util::DecodePrefix<unsigned int>(v27, v28, &v22, a4);
                      if (!*(_QWORD *)a4)
                      {
                        sentencepiece::util::Status::~Status(a4);
                        sentencepiece::mmap_util::RemovePrefix(&v27, 4uLL, a4);
                        if (!*(_QWORD *)a4)
                        {
                          sentencepiece::util::Status::~Status(a4);
                          if (!v22)
                          {
                            LODWORD(v23) = 13;
                            v17 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(", 1);
                            std::ostream::operator<<();
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)") [", 3);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(reserved_id_map_size) > (0)", 28);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"] ", 2);
                            sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v23, (uint64_t)a4);
                            goto LABEL_18;
                          }
                          if (v28 < v22)
                          {
                            LODWORD(v23) = 13;
                            v16 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(", 1);
                            std::ostream::operator<<();
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)") [", 3);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(blob.size()) >= (reserved_id_map_size)", 39);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"] ", 2);
                            sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v23, (uint64_t)a4);
                            goto LABEL_18;
                          }
                          if ((v22 & 3) != 0)
                          {
                            LODWORD(v23) = 13;
                            v18 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(", 1);
                            std::ostream::operator<<();
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)") [", 3);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(reserved_id_map_size % reserved_id_map_.unit_size()) == (0)", 60);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"] ", 2);
                            sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v23, (uint64_t)a4);
                            goto LABEL_18;
                          }
                          v19 = v27;
                          v20 = v22 >> 2;
                          *(_QWORD *)(a1 + 64) = 0;
                          *(_QWORD *)(a1 + 72) = 0;
                          v21 = *(_QWORD *)(a1 + 80);
                          if (v21)
                          {
                            MEMORY[0x22E2B0780](v21, 0x1000C8052888210);
                            *(_QWORD *)(a1 + 80) = 0;
                          }
                          *(_QWORD *)(a1 + 64) = v20;
                          *(_QWORD *)(a1 + 72) = v19;
                          sentencepiece::util::Status::Status(a4);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_2284451F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)va);
  _Unwind_Resume(a1);
}

_QWORD *sentencepiece::mmap_util::DecodePrefix<int>@<X0>(_DWORD *a1@<X0>, unint64_t a2@<X1>, _DWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v6;
  unsigned int v7;
  _QWORD v8[11];
  char v9;
  uint64_t v10;

  if (a2 <= 3)
  {
    v7 = 13;
    v6 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.h", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"string.size() >= sizeof(T)", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"] ", 2);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v7, (uint64_t)a4);
    v8[0] = *MEMORY[0x24BEDB800];
    *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v8[1] = MEMORY[0x24BEDB848] + 16;
    if (v9 < 0)
      operator delete((void *)v8[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (_QWORD *)MEMORY[0x22E2B0750](&v10);
  }
  else
  {
    *a3 = *a1;
    return sentencepiece::util::Status::Status(a4);
  }
}

void sub_22844538C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sentencepiece::mmap_util::DecodePrefix<unsigned int>@<X0>(_DWORD *a1@<X0>, unint64_t a2@<X1>, _DWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v6;
  unsigned int v7;
  _QWORD v8[11];
  char v9;
  uint64_t v10;

  if (a2 <= 3)
  {
    v7 = 13;
    v6 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.h", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"string.size() >= sizeof(T)", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"] ", 2);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v7, (uint64_t)a4);
    v8[0] = *MEMORY[0x24BEDB800];
    *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v8[1] = MEMORY[0x24BEDB848] + 16;
    if (v9 < 0)
      operator delete((void *)v8[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (_QWORD *)MEMORY[0x22E2B0750](&v10);
  }
  else
  {
    *a3 = *a1;
    return sentencepiece::util::Status::Status(a4);
  }
}

void sub_2284454F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

uint64_t absl::make_unique<sentencepiece::normalizer::PrefixMatcher,std::string_view>@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = sentencepiece::normalizer::PrefixMatcher::PrefixMatcher(v4, *a1, a1[1]);
  *a2 = v4;
  return result;
}

void sub_228445560(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2B07A4](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  void **v4;
  unint64_t v5;
  void *__p[2];
  unsigned __int8 v7;

  v3 = *a1;
  std::stringbuf::str();
  if ((v7 & 0x80u) == 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if ((v7 & 0x80u) == 0)
    v5 = v7;
  else
    v5 = (unint64_t)__p[1];
  sentencepiece::util::Status::Status(a2, v3, v4, v5);
  if ((char)v7 < 0)
    operator delete(__p[0]);
}

void sub_2284455F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::util::StatusBuilder::~StatusBuilder(sentencepiece::util::StatusBuilder *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *((_QWORD *)this + 1) = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24) + 8) = *(_QWORD *)(v2 + 24);
  *((_QWORD *)this + 2) = MEMORY[0x24BEDB848] + 16;
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22E2B0750]((char *)this + 120);
}

void **sentencepiece::ModelInterface::model_proto(sentencepiece::ModelInterface *this)
{
  void **v1;
  void **result;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char v8;

  v1 = (void **)*((_QWORD *)this + 1);
  if (!v1 || (v3 = *v1, result = v1 - 2, v3 != &unk_24F0FE408))
  {
    v8 = 1;
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"model_interface.cc", 18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"(", 1);
    v5 = (_QWORD *)std::ostream::operator<<();
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)") [", 3);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(model_proto = dynamic_cast<const ModelProto *>(model_proto_))", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"] ", 2);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v8);
    return 0;
  }
  return result;
}

void sub_22844574C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a13);
  _Unwind_Resume(a1);
}

void sentencepiece::ModelInterface::~ModelInterface(sentencepiece::ModelInterface *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_24F0FD488;
  sentencepiece::util::Status::~Status((sentencepiece::ModelInterface *)((char *)this + 96));
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 7) = &off_24F0FD588;
  v2 = *((_QWORD *)this + 10);
  if (v2)
  {
    MEMORY[0x22E2B0780](v2, 0x1000C8052888210);
    *((_QWORD *)this + 10) = 0;
  }
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = &off_24F0FD588;
  v3 = *((_QWORD *)this + 6);
  if (v3)
  {
    MEMORY[0x22E2B0780](v3, 0x1000C8052888210);
    *((_QWORD *)this + 6) = 0;
  }
  std::unique_ptr<sentencepiece::normalizer::PrefixMatcher>::reset[abi:ne180100]((uint64_t **)this + 2, 0);
}

const char *sentencepiece::ModelInterface::unk_piece(sentencepiece::ModelInterface *this)
{
  uint64_t v2;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
  if (v2)
    return (const char *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
  else
    return "<unk>";
}

const char *sentencepiece::ModelInterface::bos_piece(sentencepiece::ModelInterface *this)
{
  uint64_t v2;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  if (v2)
    return (const char *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  else
    return "<s>";
}

const char *sentencepiece::ModelInterface::eos_piece(sentencepiece::ModelInterface *this)
{
  uint64_t v2;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 48))(*((_QWORD *)this + 1));
  if (v2)
    return (const char *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 48))(*((_QWORD *)this + 1));
  else
    return "</s>";
}

const char *sentencepiece::ModelInterface::pad_piece(sentencepiece::ModelInterface *this)
{
  uint64_t v2;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1));
  if (v2)
    return (const char *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1));
  else
    return "<pad>";
}

uint64_t sentencepiece::ModelInterface::PieceToId(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t result;
  unsigned int v7;

  v7 = 0;
  Darts::DoubleArrayImpl<void,void,int,void>::exactMatchSearch<int>(a1 + 56, a2, (int *)&v7, a3, 0);
  result = v7;
  if (v7 == -1)
  {
    Darts::DoubleArrayImpl<void,void,int,void>::exactMatchSearch<int>(a1 + 24, a2, (int *)&v7, a3, 0);
    result = v7;
    if (v7 == -1)
      return *(unsigned int *)(a1 + 88);
  }
  return result;
}

uint64_t Darts::DoubleArrayImpl<void,void,int,void>::exactMatchSearch<int>(uint64_t result, _BYTE *a2, int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned __int8 *v9;
  int v10;
  int v11;

  v5 = *(_QWORD *)(result + 16);
  v6 = *(_DWORD *)(v5 + 4 * a5);
  if (a4)
  {
    while (1)
    {
      v7 = *a2++;
      a5 ^= (v6 >> 10 << ((v6 >> 6) & 8)) ^ v7;
      v6 = *(_DWORD *)(v5 + 4 * a5);
      if ((v6 & 0x800000FF) != v7)
        break;
      if (!--a4)
        goto LABEL_9;
    }
  }
  else
  {
    v8 = *a2;
    if (*a2)
    {
      v9 = a2 + 1;
      while (1)
      {
        a5 ^= (v6 >> 10 << ((v6 >> 6) & 8)) ^ v8;
        v6 = *(_DWORD *)(v5 + 4 * a5);
        if ((v6 & 0x800000FF) != v8)
          break;
        v10 = *v9++;
        v8 = v10;
        if (!v10)
          goto LABEL_9;
      }
    }
    else
    {
LABEL_9:
      if ((v6 & 0x100) != 0)
      {
        v11 = *(_DWORD *)(v5 + 4 * (a5 ^ (v6 >> 10 << ((v6 >> 6) & 8)))) & 0x7FFFFFFF;
        goto LABEL_12;
      }
    }
  }
  v11 = -1;
LABEL_12:
  *a3 = v11;
  return result;
}

uint64_t sentencepiece::ModelInterface::LookupPredictive@<X0>(sentencepiece::logging *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char v10;

  if ((int)sentencepiece::logging::GetMinLogLevel(a1) <= 2)
  {
    v10 = 0;
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"model_interface.cc", 18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(", 1);
    v4 = (_QWORD *)std::ostream::operator<<();
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)") ", 2);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"LOG(", 4);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"ERROR", 5);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Not implemented.", 16);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v10);
  }
  return sentencepiece::util::Status::Status(a2, 12, "Not implemented.", 16);
}

{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char v10;

  if ((int)sentencepiece::logging::GetMinLogLevel(a1) <= 2)
  {
    v10 = 0;
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"model_interface.cc", 18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(", 1);
    v4 = (_QWORD *)std::ostream::operator<<();
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)") ", 2);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"LOG(", 4);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"ERROR", 5);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Not implemented.", 16);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v10);
  }
  return sentencepiece::util::Status::Status(a2, 12, "Not implemented.", 16);
}

void sub_228445B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a13);
  _Unwind_Resume(a1);
}

void sub_228445C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a13);
  _Unwind_Resume(a1);
}

void sentencepiece::ModelInterface::InitializePieces(sentencepiece::ModelInterface *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  BOOL v12;
  uint64_t **v13;
  unint64_t v14;
  char v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  size_t v22;
  void *v23;
  unsigned int v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  size_t v30;
  __int128 *v31;
  const void *v32;
  const char *v33;
  size_t v34;
  void *v35;
  std::string *v36;
  __int128 v37;
  const char *v38;
  std::string *v39;
  __int128 v40;
  size_t v41;
  std::string v42;
  _DWORD *v43;
  void *__p;
  unint64_t v45;
  uint64_t *v46;
  _QWORD *v47[2];
  _QWORD **v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD **v51;
  _QWORD *v52;
  uint64_t v53;
  __int128 v54;
  int64_t v55;

  v52 = 0;
  v53 = 0;
  v50 = 0;
  v51 = &v52;
  v48 = &v49;
  v49 = 0;
  *((_DWORD *)this + 22) = -1;
  v47[0] = 0;
  v47[1] = 0;
  v46 = (uint64_t *)v47;
  LOBYTE(v54) = 0;
  std::vector<BOOL>::vector(&__p, 0x100uLL, (unsigned __int8 *)&v54);
  v2 = *((_QWORD *)this + 1);
  if (v2)
    v3 = v2 - 16;
  else
    v3 = 0;
  if (*(int *)(v3 + 64) < 1)
  {
LABEL_38:
    if (*((_DWORD *)this + 22) == -1)
    {
      sentencepiece::util::Status::Status(&v54, 13, "unk is not defined.", 19);
      sentencepiece::util::Status::operator=((uint64_t *)this + 12, (_DWORD **)&v54);
    }
    else
    {
      v25 = *(_BYTE **)(v3 + 80);
      if (!v25)
        v25 = &sentencepiece::_TrainerSpec_default_instance_;
      if (!v25[248]
        || (*(_QWORD *)&v54 = __p,
            DWORD2(v54) = 0,
            std::__find_BOOL[abi:ne180100]<false,std::vector<BOOL>,false>((uint64_t)&v54, v45, (uint64_t)&v42),
            v42.__r_.__value_.__l.__data_ == (char *)__p + 8 * (v45 >> 6))
        && LODWORD(v42.__r_.__value_.__r.__words[1]) == (v45 & 0x3F))
      {
        if (!v53
          || (sentencepiece::BuildTrie((_QWORD *)this + 3, &v51, (int *)this + 23, &v54),
              sentencepiece::util::Status::operator=((uint64_t *)this + 12, (_DWORD **)&v54),
              sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v54),
              (*(void (**)(__int128 *__return_ptr, sentencepiece::ModelInterface *))(*(_QWORD *)this + 16))(&v54, this), v26 = v54, sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v54), !v26))
        {
          if (!v50
            || (sentencepiece::BuildTrie((_QWORD *)this + 7, &v48, 0, &v54),
                sentencepiece::util::Status::operator=((uint64_t *)this + 12, (_DWORD **)&v54),
                sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v54),
                (*(void (**)(__int128 *__return_ptr, sentencepiece::ModelInterface *))(*(_QWORD *)this + 16))(&v54, this), v27 = v54, sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v54), !v27))
          {
            absl::make_unique<sentencepiece::normalizer::PrefixMatcher,std::set<std::string_view> &>((uint64_t)&v46, (uint64_t *)&v54);
            v28 = (uint64_t *)v54;
            *(_QWORD *)&v54 = 0;
            std::unique_ptr<sentencepiece::normalizer::PrefixMatcher>::reset[abi:ne180100]((uint64_t **)this + 2, v28);
            std::unique_ptr<sentencepiece::normalizer::PrefixMatcher>::reset[abi:ne180100]((uint64_t **)&v54, 0);
          }
        }
        goto LABEL_69;
      }
      sentencepiece::util::Status::operator=((uint64_t *)this + 12, (_DWORD **)&v54);
    }
LABEL_68:
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v54);
    goto LABEL_69;
  }
  v4 = 0;
  while (1)
  {
    v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>(v3 + 56, v4);
    v6 = v5;
    v7 = *(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFFFFELL;
    v8 = *(unsigned __int8 *)(v7 + 23);
    if (*(char *)(v7 + 23) < 0)
    {
      if (!*(_QWORD *)(v7 + 8))
      {
LABEL_50:
        sentencepiece::util::Status::Status(&v54, 13, "piece must not be empty.", 24);
        sentencepiece::util::Status::operator=((uint64_t *)this + 12, (_DWORD **)&v54);
        goto LABEL_68;
      }
    }
    else if (!*(_BYTE *)(v7 + 23))
    {
      goto LABEL_50;
    }
    v9 = *(_DWORD *)(v5 + 60);
    v10 = v9 > 5;
    v11 = (1 << v9) & 0x32;
    v12 = v10 || v11 == 0;
    v13 = (uint64_t **)(v12 ? &v48 : &v51);
    if ((v8 & 0x80) != 0)
    {
      v14 = *(_QWORD *)v7;
      v8 = *(_QWORD *)(v7 + 8);
    }
    else
    {
      v14 = v7;
    }
    *(_QWORD *)&v54 = v14;
    *((_QWORD *)&v54 + 1) = v8;
    LODWORD(v55) = v4;
    std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__emplace_unique_key_args<std::string_view,std::pair<std::string_view const,int> const&>(v13, (uint64_t)&v54, (uint64_t)&v54);
    if ((v15 & 1) == 0)
      break;
    v16 = *(_DWORD *)(v6 + 60);
    if (v16 == 4)
    {
      v17 = *(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v17 + 23) < 0)
      {
        v19 = *(_QWORD *)v17;
        v18 = *(_QWORD *)(v17 + 8);
      }
      else
      {
        v18 = *(unsigned __int8 *)(v17 + 23);
        v19 = *(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
      }
      *(_QWORD *)&v54 = v19;
      *((_QWORD *)&v54 + 1) = v18;
      std::__tree<std::string_view>::__emplace_unique_key_args<std::string_view,std::string_view>(&v46, (uint64_t)&v54, &v54);
      v16 = *(_DWORD *)(v6 + 60);
    }
    if (v16 == 6)
    {
      v20 = *(_BYTE **)(v3 + 80);
      if (!v20)
        v20 = &sentencepiece::_TrainerSpec_default_instance_;
      if (!v20[248])
      {
        std::operator+<char>();
        v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        v55 = v36->__r_.__value_.__r.__words[2];
        v54 = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        if (v55 >= 0)
          v38 = (const char *)&v54;
        else
          v38 = (const char *)v54;
LABEL_78:
        v41 = strlen(v38);
        sentencepiece::util::Status::Status(&v43, 13, v38, v41);
        sentencepiece::util::Status::operator=((uint64_t *)this + 12, &v43);
        sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v43);
        if (SHIBYTE(v55) < 0)
          operator delete((void *)v54);
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        {
          v35 = (void *)v42.__r_.__value_.__r.__words[0];
          goto LABEL_82;
        }
        goto LABEL_69;
      }
      v21 = *(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v21 + 23) < 0)
      {
        v23 = *(void **)v21;
        v22 = *(_QWORD *)(v21 + 8);
      }
      else
      {
        v22 = *(unsigned __int8 *)(v21 + 23);
        v23 = (void *)(*(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL);
      }
      v24 = sentencepiece::PieceToByte(v23, v22);
      if ((v24 & 0x80000000) != 0)
      {
        std::operator+<char>();
        v39 = std::string::append(&v42, " is invalid.");
        v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v55 = v39->__r_.__value_.__r.__words[2];
        v54 = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        if (v55 >= 0)
          v38 = (const char *)&v54;
        else
          v38 = (const char *)v54;
        goto LABEL_78;
      }
      *(_QWORD *)((char *)__p + (((unint64_t)v24 >> 3) & 0x1FFFFFF8)) |= 1 << v24;
    }
    else if (v16 == 2)
    {
      if ((*((_DWORD *)this + 22) & 0x80000000) == 0)
      {
        sentencepiece::util::Status::Status(&v54, 13, "unk is already defined.", 23);
        sentencepiece::util::Status::operator=((uint64_t *)this + 12, (_DWORD **)&v54);
        goto LABEL_68;
      }
      *((_DWORD *)this + 22) = v4;
    }
    if (++v4 >= *(_DWORD *)(v3 + 64))
      goto LABEL_38;
  }
  v29 = *(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v29 + 23) >= 0)
    v30 = *(unsigned __int8 *)(v29 + 23);
  else
    v30 = *(_QWORD *)(v29 + 8);
  v31 = &v54;
  std::string::basic_string[abi:ne180100]((uint64_t)&v54, v30 + 20);
  if (v55 < 0)
    v31 = (__int128 *)v54;
  if (v30)
  {
    if (*(char *)(v29 + 23) >= 0)
      v32 = (const void *)v29;
    else
      v32 = *(const void **)v29;
    memmove(v31, v32, v30);
  }
  strcpy((char *)v31 + v30, " is already defined.");
  if (v55 >= 0)
    v33 = (const char *)&v54;
  else
    v33 = (const char *)v54;
  v34 = strlen(v33);
  sentencepiece::util::Status::Status(&v42, 13, v33, v34);
  sentencepiece::util::Status::operator=((uint64_t *)this + 12, &v42);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v42);
  if (SHIBYTE(v55) < 0)
  {
    v35 = (void *)v54;
LABEL_82:
    operator delete(v35);
  }
LABEL_69:
  if (__p)
    operator delete(__p);
  std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::destroy((uint64_t)&v46, v47[0]);
  std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::destroy((uint64_t)&v48, v49);
  std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::destroy((uint64_t)&v51, v52);
}

void sub_22844625C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, char a19, _QWORD *a20,uint64_t a21,char a22,_QWORD *a23,uint64_t a24,char a25,_QWORD *a26)
{
  uint64_t v26;

  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&a15);
  if (*(char *)(v26 - 89) < 0)
    operator delete(*(void **)(v26 - 112));
  if (a14 < 0)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::destroy((uint64_t)&a19, a20);
  std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::destroy((uint64_t)&a22, a23);
  std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::destroy((uint64_t)&a25, a26);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::PieceToByte(void *__src, size_t __len)
{
  unsigned __int8 v4;
  _QWORD *v5;
  void **v6;
  size_t v7;
  size_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  void *__dst[2];
  unint64_t v13;

  {
    sentencepiece::PieceToByte(std::string_view)::kMap = sentencepiece::PieceToByte(std::string_view)::$_0::operator()();
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = (_QWORD *)sentencepiece::PieceToByte(std::string_view)::kMap;
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = (void **)operator new(v7 + 1);
    __dst[1] = (void *)__len;
    v13 = v8 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_9;
  }
  HIBYTE(v13) = __len;
  v6 = __dst;
  if (__len)
LABEL_9:
    memmove(v6, __src, __len);
  *((_BYTE *)v6 + __len) = 0;
  v9 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(v5, (unsigned __int8 *)__dst);
  v10 = v9;
  if (SHIBYTE(v13) < 0)
  {
    operator delete(__dst[0]);
    if (v10)
      return v10[40];
  }
  else if (v9)
  {
    return v10[40];
  }
  return 0xFFFFFFFFLL;
}

void sub_228446490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void sentencepiece::BuildTrie(_QWORD *a1@<X0>, _QWORD *a2@<X1>, int *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  int v26;
  _QWORD *v27;
  _QWORD *v28;
  BOOL v29;
  _QWORD *v30;
  char *v31;
  unint64_t v32;
  _DWORD *v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  char *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  char *v47;
  int v48;
  _QWORD *v49;
  _QWORD *v50;
  void *v55;
  _BYTE *v56;
  void *__p;
  char *v58;
  char *v59;
  void *v60;
  char *v61;
  char *v62;

  if (a2[2])
  {
    v60 = 0;
    v61 = 0;
    v62 = 0;
    __p = 0;
    v58 = 0;
    v59 = 0;
    v5 = a2 + 1;
    v4 = (_QWORD *)*a2;
    do
    {
      v6 = v4[4];
      v7 = v61;
      if (v61 >= v62)
      {
        v9 = (v61 - (_BYTE *)v60) >> 3;
        if ((unint64_t)(v9 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v10 = (v62 - (_BYTE *)v60) >> 2;
        if (v10 <= v9 + 1)
          v10 = v9 + 1;
        if ((unint64_t)(v62 - (_BYTE *)v60) >= 0x7FFFFFFFFFFFFFF8)
          v11 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v11 = v10;
        if (v11)
          v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v62, v11);
        else
          v12 = 0;
        v13 = &v12[8 * v9];
        *(_QWORD *)v13 = v6;
        v8 = v13 + 8;
        v15 = (char *)v60;
        v14 = v61;
        if (v61 != v60)
        {
          do
          {
            v16 = *((_QWORD *)v14 - 1);
            v14 -= 8;
            *((_QWORD *)v13 - 1) = v16;
            v13 -= 8;
          }
          while (v14 != v15);
          v14 = (char *)v60;
        }
        v60 = v13;
        v61 = v8;
        v62 = &v12[8 * v11];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *(_QWORD *)v61 = v6;
        v8 = v7 + 8;
      }
      v61 = v8;
      v17 = v58;
      if (v58 >= v59)
      {
        v19 = (char *)__p;
        v20 = (v58 - (_BYTE *)__p) >> 2;
        v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v22 = v59 - (_BYTE *)__p;
        if ((v59 - (_BYTE *)__p) >> 1 > v21)
          v21 = v22 >> 1;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
          v23 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v23 = v21;
        if (v23)
        {
          v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v59, v23);
          v19 = (char *)__p;
          v17 = v58;
        }
        else
        {
          v24 = 0;
        }
        v25 = &v24[4 * v20];
        *(_DWORD *)v25 = *((_DWORD *)v4 + 12);
        v18 = v25 + 4;
        while (v17 != v19)
        {
          v26 = *((_DWORD *)v17 - 1);
          v17 -= 4;
          *((_DWORD *)v25 - 1) = v26;
          v25 -= 4;
        }
        __p = v25;
        v58 = v18;
        v59 = &v24[4 * v23];
        if (v19)
          operator delete(v19);
      }
      else
      {
        *(_DWORD *)v58 = *((_DWORD *)v4 + 12);
        v18 = v17 + 4;
      }
      v58 = v18;
      v27 = (_QWORD *)v4[1];
      if (v27)
      {
        do
        {
          v28 = v27;
          v27 = (_QWORD *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = (_QWORD *)v4[2];
          v29 = *v28 == (_QWORD)v4;
          v4 = v28;
        }
        while (!v29);
      }
      v4 = v28;
    }
    while (v28 != v5);
    if (Darts::DoubleArrayImpl<void,void,int,void>::build(a1, (v61 - (_BYTE *)v60) >> 3, (unint64_t)v60, 0, (unint64_t)__p, 0))
    {
      sentencepiece::util::Status::Status(a4, 13, "cannot build double-array.", 26);
    }
    else if (a3)
    {
      std::vector<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type,std::allocator<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>>::vector(&v55, 0x400uLL);
      *a3 = 0;
      v30 = (_QWORD *)*a2;
      if ((_QWORD *)*a2 == v5)
        goto LABEL_81;
      v31 = (char *)v55;
      v32 = (v56 - (_BYTE *)v55) >> 4;
      v33 = (_DWORD *)a1[2];
      do
      {
        v34 = (_BYTE *)v30[4];
        v35 = v30[5];
        v36 = (*v33 >> 10 << ((*v33 >> 6) & 8));
        if (v35)
        {
          v37 = 0;
          v38 = 0;
          do
          {
            v39 = v34[v37];
            v40 = v36 ^ v39;
            v41 = v33[v40];
            if ((v41 & 0x800000FF) != (_DWORD)v39)
              break;
            v36 = v40 ^ (v41 >> 10 << ((v41 >> 6) & 8));
            if ((v41 & 0x100) != 0)
            {
              if (v38 < v32)
              {
                v42 = &v31[16 * v38];
                *(_DWORD *)v42 = v33[v36] & 0x7FFFFFFF;
                *((_QWORD *)v42 + 1) = v37 + 1;
              }
              ++v38;
            }
            ++v37;
          }
          while (v35 != v37);
        }
        else
        {
          v43 = *v34;
          if (*v34)
          {
            v38 = 0;
            v44 = 1;
            do
            {
              v45 = v36 ^ v43;
              v46 = v33[v45];
              if ((v46 & 0x800000FF) != v43)
                break;
              v36 = v45 ^ (v46 >> 10 << ((v46 >> 6) & 8));
              if ((v46 & 0x100) != 0)
              {
                if (v38 < v32)
                {
                  v47 = &v31[16 * v38];
                  *(_DWORD *)v47 = v33[v36] & 0x7FFFFFFF;
                  *((_QWORD *)v47 + 1) = v44;
                }
                ++v38;
              }
              v43 = v34[v44++];
            }
            while (v43);
          }
          else
          {
            LODWORD(v38) = 0;
          }
        }
        v48 = *a3;
        if (*a3 <= (int)v38)
          v48 = v38;
        *a3 = v48;
        v49 = (_QWORD *)v30[1];
        if (v49)
        {
          do
          {
            v50 = v49;
            v49 = (_QWORD *)*v49;
          }
          while (v49);
        }
        else
        {
          do
          {
            v50 = (_QWORD *)v30[2];
            v29 = *v50 == (_QWORD)v30;
            v30 = v50;
          }
          while (!v29);
        }
        v30 = v50;
      }
      while (v50 != v5);
      if (!v48)
LABEL_81:
        sentencepiece::util::Status::Status(a4, 13, "no entry is found in the trie.", 30);
      else
        sentencepiece::util::Status::Status(a4);
      if (v55)
      {
        v56 = v55;
        operator delete(v55);
      }
    }
    else
    {
      sentencepiece::util::Status::Status(a4);
    }
    if (__p)
    {
      v58 = (char *)__p;
      operator delete(__p);
    }
    if (v60)
    {
      v61 = (char *)v60;
      operator delete(v60);
    }
  }
  else
  {
    sentencepiece::util::Status::Status(a4, 13, "no pieces are loaded.", 21);
  }
}

void sub_228446938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  if (a17)
    operator delete(a17);
  if (a20)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

uint64_t absl::make_unique<sentencepiece::normalizer::PrefixMatcher,std::set<std::string_view> &>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = sentencepiece::normalizer::PrefixMatcher::PrefixMatcher(v4, a1);
  *a2 = v4;
  return result;
}

void sub_2284469E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2B07A4](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void sentencepiece::ModelInterface::MemoryMappableString(sentencepiece::ModelInterface *this@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  std::string::size_type size;
  std::string *v7;
  std::string *v8;
  std::string::size_type v9;
  int v10;
  int v11;
  int v12;
  std::string *p_p;
  std::string *v14;
  std::string::size_type v15;
  std::string *v16;
  std::string::size_type v17;
  const std::string::value_type *v18;
  uint64_t v19;
  std::string::size_type v20;
  std::string *v21;
  std::string *v22;
  std::string::size_type v23;
  uint64_t v24;
  const std::string::value_type *v25;
  char *v26;
  std::string::size_type v27;
  std::string *v28;
  std::string *v29;
  std::string::size_type v30;
  std::string __p;
  std::string v32;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  memset(&v32, 0, sizeof(v32));
  std::string::resize(&v32, 4uLL, 0);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v32;
  else
    v4 = (std::string *)v32.__r_.__value_.__r.__words[0];
  LODWORD(v4->__r_.__value_.__l.__data_) = *((_DWORD *)this + 22);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &v32;
  else
    v5 = (std::string *)v32.__r_.__value_.__r.__words[0];
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  else
    size = v32.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v5, size);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  memset(&v32, 0, sizeof(v32));
  std::string::resize(&v32, 4uLL, 0);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v32;
  else
    v7 = (std::string *)v32.__r_.__value_.__r.__words[0];
  LODWORD(v7->__r_.__value_.__l.__data_) = *((_DWORD *)this + 23);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v32;
  else
    v8 = (std::string *)v32.__r_.__value_.__r.__words[0];
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  else
    v9 = v32.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v8, v9);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  sentencepiece::normalizer::PrefixMatcher::MemoryMappableString(*((sentencepiece::normalizer::PrefixMatcher **)this + 2), &v32);
  v10 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  v11 = v32.__r_.__value_.__r.__words[1];
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  if ((v10 & 0x80u) == 0)
    v12 = v10;
  else
    v12 = v11;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  LODWORD(p_p->__r_.__value_.__l.__data_) = v12;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &__p;
  else
    v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v15 = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v14, v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = &v32;
  else
    v16 = (std::string *)v32.__r_.__value_.__r.__words[0];
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  else
    v17 = v32.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v16, v17);
  sentencepiece::mmap_util::Padding(a2);
  v19 = *((_QWORD *)this + 4);
  v18 = (const std::string::value_type *)*((_QWORD *)this + 5);
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  v20 = 4 * v19;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = &__p;
  else
    v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
  LODWORD(v21->__r_.__value_.__l.__data_) = v20;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &__p;
  else
    v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v23 = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v22, v23);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::append(a2, v18, v20);
  sentencepiece::mmap_util::Padding(a2);
  v26 = (char *)this + 64;
  v24 = *((_QWORD *)this + 8);
  v25 = (const std::string::value_type *)*((_QWORD *)v26 + 1);
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  v27 = 4 * v24;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v28 = &__p;
  else
    v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
  LODWORD(v28->__r_.__value_.__l.__data_) = v27;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = &__p;
  else
    v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v30 = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v29, v30);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::append(a2, v25, v27);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
}

void sub_228446CC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a20 < 0)
    operator delete(__p);
  if (*(char *)(v20 + 23) < 0)
    operator delete(*(void **)v20);
  _Unwind_Resume(exception_object);
}

void sentencepiece::SplitIntoWords(unsigned __int8 *__s1@<X0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, unsigned __int8 ***a5@<X8>)
{
  unsigned __int8 *v6;
  unsigned __int8 *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 **v13;
  char *v14;
  char *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  unsigned __int8 **v26;
  char *v27;
  char *v28;
  unsigned __int8 **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  unsigned __int8 **v36;
  char *v37;
  char *v38;
  unsigned __int8 **v39;
  unsigned __int8 **v40;
  int v41;
  _QWORD *v42;
  unsigned __int8 *v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  unsigned __int8 **v54;
  char *v55;
  char *v56;
  unsigned __int8 **v57;

  v6 = __s1;
  v8 = &__s1[a2];
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if ((a3 & 1) == 0)
  {
    if (a2 < 1)
      return;
    v40 = 0;
    v41 = 0;
    v42 = a5 + 2;
    v43 = __s1;
    while (1)
    {
      v44 = asc_2284E2628[(unint64_t)*v43 >> 4];
      if ((int)v8 - (int)v43 < v44)
        v44 = (_DWORD)v8 - (_DWORD)v43;
      v45 = v44;
      if (v44 == 3)
      {
        v46 = memcmp(v43, "▁", 3uLL);
        v47 = v46 == 0;
        if (v43 == v6)
          goto LABEL_62;
        if ((v41 & a4 & 1) == 0 && !v46)
        {
          v47 = 1;
LABEL_62:
          if ((unint64_t)v40 >= *v42)
          {
            v48 = ((char *)v40 - (char *)*a5) >> 4;
            if ((unint64_t)(v48 + 1) >> 60)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v49 = *v42 - (_QWORD)*a5;
            v50 = v49 >> 3;
            if (v49 >> 3 <= (unint64_t)(v48 + 1))
              v50 = v48 + 1;
            if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF0)
              v51 = 0xFFFFFFFFFFFFFFFLL;
            else
              v51 = v50;
            v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string_view>>((uint64_t)(a5 + 2), v51);
            v54 = (unsigned __int8 **)&v52[16 * v48];
            *v54 = v43;
            v54[1] = 0;
            v56 = (char *)*a5;
            v55 = (char *)a5[1];
            v57 = v54;
            if (v55 != (char *)*a5)
            {
              do
              {
                *((_OWORD *)v57 - 1) = *((_OWORD *)v55 - 1);
                v57 -= 2;
                v55 -= 16;
              }
              while (v55 != v56);
              v55 = (char *)*a5;
            }
            v40 = v54 + 2;
            *a5 = v57;
            a5[1] = v54 + 2;
            a5[2] = (unsigned __int8 **)&v52[16 * v53];
            if (v55)
              operator delete(v55);
          }
          else
          {
            *v40 = v43;
            v40[1] = 0;
            v40 += 2;
          }
          a5[1] = v40;
          goto LABEL_76;
        }
        if ((v41 & 1) != 0)
        {
          v47 = v41 & (v46 == 0);
          goto LABEL_76;
        }
      }
      else if (v43 == v6)
      {
        v47 = 0;
        goto LABEL_62;
      }
      v47 = 0;
LABEL_76:
      *(v40 - 1) += v45;
      v43 += v45;
      v41 = v47;
      if (v43 >= v8)
        return;
    }
  }
  if (a2 >= 1)
  {
    v9 = a5 + 2;
    v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::string_view>>((uint64_t)(a5 + 2), 1uLL);
    v12 = (unsigned __int8 **)&v10[2 * v11];
    *v10 = v6;
    v10[1] = 0;
    v13 = (unsigned __int8 **)(v10 + 2);
    v15 = (char *)*a5;
    v14 = (char *)a5[1];
    if (v14 != (char *)*a5)
    {
      do
      {
        *((_OWORD *)v10 - 1) = *((_OWORD *)v14 - 1);
        v10 -= 2;
        v14 -= 16;
      }
      while (v14 != v15);
      v14 = (char *)*a5;
    }
    *a5 = (unsigned __int8 **)v10;
    a5[1] = v13;
    a5[2] = v12;
    if (v14)
      operator delete(v14);
    v16 = 0;
    a5[1] = v13;
    do
    {
      v17 = asc_2284E2628[(unint64_t)*v6 >> 4];
      if ((int)v8 - (int)v6 < v17)
        v17 = (_DWORD)v8 - (_DWORD)v6;
      v18 = v17;
      if (v17 == 3)
      {
        v19 = memcmp(v6, "▁", 3uLL) == 0;
        if (v19)
          goto LABEL_18;
      }
      else
      {
        v19 = 0;
      }
      if ((v16 & a4) != 0)
      {
        if ((unint64_t)v13 >= *v9)
        {
          v20 = ((char *)v13 - (char *)*a5) >> 4;
          if ((unint64_t)(v20 + 1) >> 60)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v21 = *v9 - (_QWORD)*a5;
          v22 = v21 >> 3;
          if (v21 >> 3 <= (unint64_t)(v20 + 1))
            v22 = v20 + 1;
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
            v23 = 0xFFFFFFFFFFFFFFFLL;
          else
            v23 = v22;
          v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string_view>>((uint64_t)(a5 + 2), v23);
          v26 = (unsigned __int8 **)&v24[16 * v20];
          *v26 = v6;
          v26[1] = 0;
          v28 = (char *)*a5;
          v27 = (char *)a5[1];
          v29 = v26;
          if (v27 != (char *)*a5)
          {
            do
            {
              *((_OWORD *)v29 - 1) = *((_OWORD *)v27 - 1);
              v29 -= 2;
              v27 -= 16;
            }
            while (v27 != v28);
            v27 = (char *)*a5;
          }
          v13 = v26 + 2;
          *a5 = v29;
          a5[1] = v26 + 2;
          a5[2] = (unsigned __int8 **)&v24[16 * v25];
          if (v27)
            operator delete(v27);
        }
        else
        {
          *v13 = v6;
          v13[1] = 0;
          v13 += 2;
        }
        v16 = 0;
        a5[1] = v13;
        goto LABEL_31;
      }
LABEL_18:
      v16 = v19;
LABEL_31:
      *(v13 - 1) += v18;
      v6 += v18;
      if (v6 < v8 && v19 && (a4 & 1) == 0)
      {
        if ((unint64_t)v13 >= *v9)
        {
          v30 = ((char *)v13 - (char *)*a5) >> 4;
          if ((unint64_t)(v30 + 1) >> 60)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v31 = *v9 - (_QWORD)*a5;
          v32 = v31 >> 3;
          if (v31 >> 3 <= (unint64_t)(v30 + 1))
            v32 = v30 + 1;
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0)
            v33 = 0xFFFFFFFFFFFFFFFLL;
          else
            v33 = v32;
          v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string_view>>((uint64_t)(a5 + 2), v33);
          v36 = (unsigned __int8 **)&v34[16 * v30];
          *v36 = v6;
          v36[1] = 0;
          v38 = (char *)*a5;
          v37 = (char *)a5[1];
          v39 = v36;
          if (v37 != (char *)*a5)
          {
            do
            {
              *((_OWORD *)v39 - 1) = *((_OWORD *)v37 - 1);
              v39 -= 2;
              v37 -= 16;
            }
            while (v37 != v38);
            v37 = (char *)*a5;
          }
          v13 = v36 + 2;
          *a5 = v39;
          a5[1] = v36 + 2;
          a5[2] = (unsigned __int8 **)&v34[16 * v35];
          if (v37)
            operator delete(v37);
        }
        else
        {
          *v13 = v6;
          v13[1] = 0;
          v13 += 2;
        }
        a5[1] = v13;
      }
    }
    while (v6 < v8);
  }
}

void sub_228447184(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sentencepiece::ByteToPiece@<X0>(sentencepiece *this@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3;

  v3 = this;
  return absl::StrFormat<unsigned char>("<0x%02X>", &v3, a2);
}

uint64_t absl::StrFormat<unsigned char>@<X0>(char *__format@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  char *v8;

  v6 = snprintf(0, 0, __format, *a2);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  std::string::resize((std::string *)a3, v6, 0);
  v7 = *(unsigned __int8 *)(a3 + 23);
  if ((v7 & 0x80u) == 0)
    v8 = (char *)a3;
  else
    v8 = *(char **)a3;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a3 + 8);
  return snprintf(v8, v7 + 1, __format, *a2);
}

void sub_228447274(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sentencepiece::PieceToByte(std::string_view)::$_0::operator()()
{
  uint64_t v0;
  int v1;
  void *__p[2];
  char v4;
  void **v5;

  v0 = operator new();
  v1 = 0;
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_DWORD *)(v0 + 32) = 1065353216;
  do
  {
    LOBYTE(v5) = v1;
    absl::StrFormat<unsigned char>("<0x%02X>", (unsigned __int8 *)&v5, (uint64_t)__p);
    v5 = __p;
    *((_BYTE *)std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v5)+ 40) = v1;
    if (v4 < 0)
      operator delete(__p[0]);
    ++v1;
  }
  while (v1 != 256);
  return v0;
}

void sub_228447358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Darts::DoubleArrayImpl<void,void,int,void>::build(_QWORD *a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, void (*a6)(unint64_t, uint64_t))
{
  uint64_t v9;
  size_t v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  int *v14;
  _DWORD *v15;
  int v16;
  uint64_t v17;
  void (*v19)(unint64_t, uint64_t);
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int v24;
  unint64_t v25[4];

  v25[0] = a2;
  v25[1] = a3;
  v25[2] = a4;
  v25[3] = a5;
  v19 = a6;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0;
  Darts::Details::DoubleArrayBuilder::build<int>(&v19, v25);
  v9 = *((_QWORD *)&v20 + 1);
  v10 = 4 * *((_QWORD *)&v20 + 1);
  v11 = (_DWORD *)operator new[]();
  v12 = v11;
  if (v9)
    bzero(v11, v10);
  v13 = *((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v14 = (int *)v20;
    v15 = v12;
    do
    {
      v16 = *v14++;
      *v15++ = v16;
      --v13;
    }
    while (v13);
  }
  a1[1] = 0;
  a1[2] = 0;
  v17 = a1[3];
  if (v17)
  {
    MEMORY[0x22E2B0780](v17, 0x1000C8052888210);
    a1[3] = 0;
  }
  a1[1] = v9;
  a1[2] = v12;
  a1[3] = v12;
  if (a6)
    a6(a2 + 1, a2 + 1);
  Darts::Details::DoubleArrayBuilder::~DoubleArrayBuilder((Darts::Details::DoubleArrayBuilder *)&v19);
  return 0;
}

void sub_228447484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Darts::Details::DoubleArrayBuilder::~DoubleArrayBuilder((Darts::Details::DoubleArrayBuilder *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::ModelInterface::status@<X0>(sentencepiece::ModelInterface *this@<X0>, sentencepiece::util::Status *a2@<X8>)
{
  return sentencepiece::util::Status::Status(a2, (sentencepiece::ModelInterface *)((char *)this + 96));
}

uint64_t sentencepiece::ModelInterface::prefix_matcher(sentencepiece::ModelInterface *this)
{
  return *((_QWORD *)this + 2);
}

void sentencepiece::ModelInterface::NBestEncode(sentencepiece::logging *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char v9;

  if ((int)sentencepiece::logging::GetMinLogLevel(a1) <= 2)
  {
    v9 = 0;
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"model_interface.h", 17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(", 1);
    v4 = (_QWORD *)std::ostream::operator<<();
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)") ", 2);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"LOG(", 4);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"ERROR", 5);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Not implemented.", 16);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v9);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

void sub_228447574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a13);
  _Unwind_Resume(a1);
}

void sentencepiece::ModelInterface::SampleEncode(sentencepiece::logging *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char v9;

  if ((int)sentencepiece::logging::GetMinLogLevel(a1) <= 2)
  {
    v9 = 0;
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"model_interface.h", 17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(", 1);
    v4 = (_QWORD *)std::ostream::operator<<();
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)") ", 2);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"LOG(", 4);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"ERROR", 5);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Not implemented.", 16);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v9);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

void sub_22844764C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a13);
  _Unwind_Resume(a1);
}

void sentencepiece::ModelInterface::SampleEncodeAndScore(sentencepiece::logging *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  void *__p;
  void *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if ((int)sentencepiece::logging::GetMinLogLevel(a1) <= 2)
  {
    LOBYTE(__p) = 0;
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"model_interface.h", 17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(", 1);
    v4 = (_QWORD *)std::ostream::operator<<();
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)") ", 2);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"LOG(", 4);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"ERROR", 5);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Not implemented.", 16);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&__p);
  }
  __p = 0;
  v11 = 0;
  v13 = 0;
  v12 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v9 = (char *)operator new(0x20uLL);
  *a2 = v9;
  a2[1] = v9;
  a2[2] = v9 + 32;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float> const*,std::pair<std::vector<std::pair<std::string_view,int>>,float> const*,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v14, (uint64_t)v9);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_2284477A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = v14;
  *(_QWORD *)(v13 + 8) = v15;
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

float sentencepiece::ModelInterface::CalculateEntropy(sentencepiece::logging *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  char v8;

  if ((int)sentencepiece::logging::GetMinLogLevel(a1) <= 2)
  {
    v8 = 0;
    v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"model_interface.h", 17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"(", 1);
    v2 = (_QWORD *)std::ostream::operator<<();
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)") ", 2);
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"LOG(", 4);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"ERROR", 5);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)") ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Not implemented.", 16);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v8);
  }
  return 0.0;
}

void sub_2284478A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a13);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::ModelInterface::IsSampleEncodeAvailable(sentencepiece::ModelInterface *this)
{
  return 0;
}

uint64_t sentencepiece::ModelInterface::IsNBestEncodeAvailable(sentencepiece::ModelInterface *this)
{
  return 0;
}

uint64_t sentencepiece::ModelInterface::IsSampleEncodeAndScoreAvailable(sentencepiece::ModelInterface *this)
{
  return 0;
}

uint64_t sentencepiece::ModelInterface::IsCalculateEntropyAvailable(sentencepiece::ModelInterface *this)
{
  return 0;
}

uint64_t sentencepiece::ModelInterface::IdToPiece(sentencepiece::ModelInterface *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 88))(*((_QWORD *)this + 1));
}

uint64_t sentencepiece::ModelInterface::GetPieceSize(sentencepiece::ModelInterface *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t sentencepiece::ModelInterface::GetScore(sentencepiece::ModelInterface *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
}

uint64_t sentencepiece::ModelInterface::IsUnknown(sentencepiece::ModelInterface *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 112))(*((_QWORD *)this + 1));
}

uint64_t sentencepiece::ModelInterface::IsControl(sentencepiece::ModelInterface *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 120))(*((_QWORD *)this + 1));
}

uint64_t sentencepiece::ModelInterface::IsUnused(sentencepiece::ModelInterface *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 128))(*((_QWORD *)this + 1));
}

uint64_t sentencepiece::ModelInterface::IsUserDefined(sentencepiece::ModelInterface *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 136))(*((_QWORD *)this + 1));
}

uint64_t sentencepiece::ModelInterface::IsByte(sentencepiece::ModelInterface *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 144))(*((_QWORD *)this + 1));
}

uint64_t sentencepiece::ModelInterface::ByteFallbackEnabled(sentencepiece::ModelInterface *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
  return result;
}

BOOL sentencepiece::ModelInterface::VerifyOutputsEquivalent(int a1, void *__s1, size_t a3, void *__s2, uint64_t a5)
{
  return a3 == a5 && memcmp(__s1, __s2, a3) == 0;
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x24BEDB870];
  v3 = MEMORY[0x24BEDB870] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x24BEDB870] + 64;
  v4 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v5 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_228447A74(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x22E2B0750](v1);
  _Unwind_Resume(a1);
}

void sentencepiece::error::Die::~Die(sentencepiece::error::Die *this)
{
  const std::locale::facet *v2;
  sentencepiece::error *v3;
  std::locale v4;

  std::ios_base::getloc((const std::ios_base *)(MEMORY[0x24BEDB310] + *(_QWORD *)(*MEMORY[0x24BEDB310] - 24)));
  v2 = std::locale::use_facet(&v4, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  v3 = (sentencepiece::error *)std::ostream::flush();
  if (*(_BYTE *)this)
    sentencepiece::error::Abort(v3);
}

void sub_228447B34(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  __clang_call_terminate(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_228447C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  void *i;
  unint64_t v16;
  _QWORD *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(void **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, (unsigned __int8 *)i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  v18 = *a4;
  v19 = **a4;
  *((_QWORD *)i + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)i + 1) = v19;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = 0;
  *((_BYTE *)i + 40) = 0;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::__rehash<true>(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v27)
  {
    *(_QWORD *)i = *v27;
LABEL_38:
    *v27 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *v17;
  *v17 = i;
  *(_QWORD *)(v26 + 8 * v4) = v17;
  if (*(_QWORD *)i)
  {
    v28 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11)
        v28 %= v11;
    }
    else
    {
      v28 &= v11 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*v8;
  return i;
}

void sub_228447E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned char>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v5;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      v11 = v7 + v9;
      v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      v14 = v8 + a3 + v7 + v4;
      v15 = v14 + v5;
      v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v18 = v17 + v6 + v9;
      v19 = __ROR8__(v18, 44);
      v20 = v18 + v10;
      v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      v23 = *a2;
      v22 = a2 + 4;
      v24 = v23 - 0x4B6D499041670D8DLL * v5;
      v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v26 = *(v22 - 3);
        v27 = v24 + v15 + v11 + v26;
        v28 = v22[2];
        v29 = v22[3];
        v30 = v22[1];
        v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        v31 = v13 + v20;
        v32 = *(v22 - 2);
        v33 = *(v22 - 1);
        v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        v35 = v34 + v20 + v33;
        v36 = v34 + v26 + v32;
        v15 = v36 + v33;
        v37 = __ROR8__(v36, 44) + v34;
        v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        v16 = v37 + __ROR8__(v35 + v38, 21);
        v39 = v24 + v21 + *v22;
        v20 = v39 + v30 + v28 + v29;
        v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        v13 = v38;
        v25 += 64;
      }
      while (v25);
      v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 < 9)
  {
    if (a2 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[1];
  v3 = 0xB492B66FBE98F273 * *a1;
  v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8);
  v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)((char *)a1 + a2 - 16);
  v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  v5 = a1[2];
  v4 = a1[3];
  v6 = __ROR8__(v3 + v4, 52);
  v7 = v3 + a1[1];
  v8 = __ROR8__(v7, 7);
  v9 = v7 + v5;
  v10 = *(_QWORD *)((char *)a1 + a2 - 32) + v5;
  v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  v12 = *(_QWORD *)((char *)a1 + a2 - 24) + v10 + v2;
  v13 = 0xC3A5C85C97CB3127 * (v12 + *(_QWORD *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t std::equal_to<std::string>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t result;

  v3 = a3;
  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = a3[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a3 + 1);
  if (v5 != v6)
    return 0;
  if (v7 < 0)
    v3 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)a2, v3, *((_QWORD *)a2 + 1)) == 0;
  if (!a2[23])
    return 1;
  v8 = v4 - 1;
  do
  {
    v10 = *a2++;
    v9 = v10;
    v12 = *v3++;
    v11 = v12;
    v14 = v8-- != 0;
    result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned char>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float> const*,std::pair<std::vector<std::pair<std::string_view,int>>,float> const*,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      std::vector<std::pair<std::string_view,int>>::__init_with_size[abi:ne180100]<std::pair<std::string_view,int>*,std::pair<std::string_view,int>*>((char *)v4, *(__int128 **)v6, *(__int128 **)(v6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3));
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 24);
      v4 = v11 + 32;
      v11 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_228448730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<std::string_view,int>>::__init_with_size[abi:ne180100]<std::pair<std::string_view,int>*,std::pair<std::string_view,int>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<std::string_view,int>>::__vallocate[abi:ne180100](result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2;
      *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v7 = v8;
      v7 += 24;
      a2 = (__int128 *)((char *)a2 + 24);
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_2284487A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<std::string_view,int>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string_view,int>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string_view,int>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  if (v1 != v2)
  {
    v3 = **(_QWORD **)(a1 + 16);
    do
    {
      v5 = *(void **)(v3 - 32);
      v3 -= 32;
      v4 = v5;
      if (v5)
      {
        *(_QWORD *)(v1 - 24) = v4;
        operator delete(v4);
      }
      v1 = v3;
    }
    while (v3 != v2);
  }
}

void std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 32);
      v4 -= 32;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 24) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void Darts::DoubleArrayImpl<void,void,int,void>::~DoubleArrayImpl(_QWORD *a1)
{
  uint64_t v2;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24F0FD588;
  v2 = a1[3];
  if (v2)
  {
    MEMORY[0x22E2B0780](v2, 0x1000C8052888210);
    a1[3] = 0;
  }
  JUMPOUT(0x22E2B07A4);
}

uint64_t **std::unique_ptr<sentencepiece::normalizer::PrefixMatcher>::reset[abi:ne180100](uint64_t **result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    JUMPOUT(0x22E2B07A4);
  }
  return result;
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x22E2B0618](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x22E2B0624](v13);
  return a1;
}

void sub_228448B2C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x22E2B0624](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x228448B0CLL);
}

void sub_228448B74(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_228448CA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

void std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

_QWORD *std::vector<BOOL>::vector(_QWORD *a1, unint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  int v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    v6 = *a3;
    v7 = a1[1];
    v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        v13 = *a1 + 8 * (v7 >> 6);
        v14 = v7 & 0x3F;
        if (v6)
          std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v13, a2);
        else
          std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v13, a2);
        return a1;
      }
    }
    else
    {
      v9 = v8 - 1;
    }
    v10 = v9 >> 6;
    if (v8 >= 0x41)
      v11 = v10;
    else
      v11 = 0;
    *(_QWORD *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  void *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

_QWORD *std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v3 = result;
  v4 = *((_DWORD *)result + 2);
  v5 = (_QWORD *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    v2 = a2 - v6;
    *result = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    result = memset(v5, 255, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    v2 = a2 - v6;
    *(_QWORD *)a1 = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    bzero(v5, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *(_QWORD *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

_OWORD *std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__emplace_unique_key_args<std::string_view,std::pair<std::string_view const,int> const&>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__find_equal<std::string_view>((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

_QWORD *std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__find_equal<std::string_view>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = v4;
        v9 = (uint64_t)(v4 + 4);
        if (!std::less<std::string_view>::operator()[abi:ne180100](v7, a3, (uint64_t)(v4 + 4)))
          break;
        v4 = (_QWORD *)*v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!std::less<std::string_view>::operator()[abi:ne180100](v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = (_QWORD *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t *std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t std::less<std::string_view>::operator()[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v3;
  size_t v4;
  const void *v5;
  size_t v6;
  size_t v7;
  int v8;
  unsigned int v9;

  v3 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(const void **)a3;
  v6 = *(_QWORD *)(a3 + 8);
  if (v6 >= v4)
    v7 = v4;
  else
    v7 = *(_QWORD *)(a3 + 8);
  v8 = memcmp(v3, v5, v7);
  if (v4 < v6)
    v9 = -1;
  else
    v9 = 1;
  if (v4 == v6)
    v9 = 0;
  if (v8)
    v9 = v8;
  return v9 >> 31;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

uint64_t *std::__tree<std::string_view>::__emplace_unique_key_args<std::string_view,std::string_view>(uint64_t **a1, uint64_t a2, _OWORD *a3)
{
  void **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__find_equal<std::string_view>((uint64_t)a1, &v9, a2);
  v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v6 + 2) = *a3;
    std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__insert_node_at(a1, v9, v7, v6);
  }
  return v6;
}

uint64_t std::__find_BOOL[abi:ne180100]<false,std::vector<BOOL>,false>@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = *(unsigned int *)(result + 8);
  v4 = *(_QWORD **)result;
  if (!(_DWORD)v3)
    goto LABEL_9;
  v5 = (64 - v3);
  if (v5 >= a2)
    v6 = a2;
  else
    v6 = (64 - v3);
  if (((0xFFFFFFFFFFFFFFFFLL >> (64 - v3 - v6)) & (-1 << v3) & ~*v4) != 0)
  {
    v7 = __rbit64((0xFFFFFFFFFFFFFFFFLL >> (64 - v3 - v6)) & (-1 << v3) & ~*v4);
LABEL_22:
    *(_QWORD *)a3 = v4;
    *(_DWORD *)(a3 + 8) = __clz(v7);
    return result;
  }
  if (v5 < a2)
  {
    a2 -= v6;
    *(_QWORD *)result = ++v4;
LABEL_9:
    if (a2 < 0x40)
    {
LABEL_12:
      if (!a2 || (v8 = (0xFFFFFFFFFFFFFFFFLL >> -(char)a2) & ~*v4) == 0)
      {
        *(_QWORD *)a3 = v4;
        *(_DWORD *)(a3 + 8) = a2;
        return result;
      }
    }
    else
    {
      while (*v4 == -1)
      {
        *(_QWORD *)result = ++v4;
        a2 -= 64;
        if (a2 <= 0x3F)
          goto LABEL_12;
      }
      v8 = ~*v4;
    }
    v7 = __rbit64(v8);
    goto LABEL_22;
  }
  v9 = v3 + a2 - 63;
  if (v9 < 0)
    v9 = v3 + a2;
  v10 = v9 >> 6;
  v11 = (v3 + a2) >> 6;
  if ((a2 & 0x8000000000000000) != 0)
    v11 = v10;
  *(_QWORD *)a3 = &v4[v11];
  *(_DWORD *)(a3 + 8) = ((_BYTE)v3 + (_BYTE)a2) & 0x3F;
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string_view>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v6 == v13)
      {
        if ((std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

void Darts::Details::DoubleArrayBuilder::build<int>(void (**a1)(unint64_t, uint64_t), unint64_t *a2)
{
  _OWORD v3[3];
  _OWORD v4[6];
  _OWORD v5[3];
  uint64_t v6;

  if (a2[3])
  {
    v6 = 0;
    memset(v5, 0, sizeof(v5));
    memset(v4, 0, sizeof(v4));
    memset(v3, 0, sizeof(v3));
    Darts::Details::DoubleArrayBuilder::build_dawg<int>(a1, a2, (Darts::Details::DawgBuilder *)v3);
    Darts::Details::DoubleArrayBuilder::build_from_dawg((Darts::Details::DoubleArrayBuilder *)a1, (const Darts::Details::DawgBuilder *)v3);
    Darts::Details::AutoPool<Darts::Details::DawgNode>::clear((uint64_t *)v3);
    Darts::Details::AutoPool<Darts::Details::DawgUnit>::clear((uint64_t *)&v3[1] + 1);
    Darts::Details::AutoPool<unsigned char>::clear((uint64_t *)v4);
    Darts::Details::BitVector::clear((Darts::Details::BitVector *)((char *)&v4[1] + 8));
    Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)&v4[4] + 1);
    Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)v5);
    Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)&v5[1] + 1);
    v6 = 0;
    Darts::Details::DawgBuilder::~DawgBuilder((Darts::Details::DawgBuilder *)v3);
  }
  else
  {
    Darts::Details::DoubleArrayBuilder::build_from_keyset<int>((uint64_t)a1, a2);
  }
}

void sub_2284497A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Darts::Details::DawgBuilder::~DawgBuilder((Darts::Details::DawgBuilder *)&a9);
  _Unwind_Resume(a1);
}

uint64_t *Darts::Details::AutoPool<unsigned char>::~AutoPool(uint64_t *a1)
{
  Darts::Details::AutoPool<unsigned char>::clear(a1);
  if (*a1)
  {
    MEMORY[0x22E2B0780](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t Darts::Details::AutoPool<unsigned char>::clear(uint64_t *a1)
{
  uint64_t result;

  Darts::Details::AutoPool<unsigned char>::resize(a1, 0);
  result = *a1;
  if (*a1)
  {
    result = MEMORY[0x22E2B0780](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

uint64_t *Darts::Details::AutoPool<unsigned char>::resize(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = result;
  v4 = result[1];
  if (v4 > a2)
  {
    result[1] = a2;
    v4 = a2;
  }
  if (result[2] < a2)
  {
    result = (uint64_t *)Darts::Details::AutoPool<unsigned char>::resize_buf(result, a2);
    v4 = v3[1];
  }
  if (v4 < a2)
    v3[1] = a2;
  return result;
}

uint64_t Darts::Details::AutoPool<unsigned char>::resize_buf(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t i;

  if (a2 >= 2 * a1[2])
  {
    v4 = a2;
  }
  else
  {
    v3 = 1;
    do
    {
      v4 = v3;
      v3 *= 2;
    }
    while (v4 < a2);
  }
  v5 = operator new[]();
  result = *a1;
  v7 = a1[1];
  if (v7)
  {
    for (i = 0; i != v7; ++i)
      *(_BYTE *)(v5 + i) = *(_BYTE *)(result + i);
    *a1 = v5;
    a1[2] = v4;
LABEL_11:
    JUMPOUT(0x22E2B0780);
  }
  *a1 = v5;
  a1[2] = v4;
  if (result)
    goto LABEL_11;
  return result;
}

void Darts::Details::Exception::~Exception(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x22E2B07A4);
}

const char *Darts::Details::Exception::what(Darts::Details::Exception *this)
{
  if (*((_QWORD *)this + 1))
    return (const char *)*((_QWORD *)this + 1);
  else
    return "";
}

uint64_t *Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::~AutoPool(uint64_t *a1)
{
  Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::clear(a1);
  if (*a1)
  {
    MEMORY[0x22E2B0780](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::clear(uint64_t *a1)
{
  uint64_t result;

  Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::resize(a1, 0);
  result = *a1;
  if (*a1)
  {
    result = MEMORY[0x22E2B0780](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v4;

  v4 = a1[1];
  if (v4 > a2)
  {
    a1[1] = a2;
    v4 = a2;
  }
  if (a1[2] < a2)
  {
    Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::resize_buf(a1, a2);
    v4 = a1[1];
  }
  if (a2 > v4)
  {
    bzero((void *)(*a1 + 4 * v4), 4 * (a2 - v4));
    a1[1] = a2;
  }
}

uint64_t Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::resize_buf(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t i;

  if (a2 >= 2 * a1[2])
  {
    v4 = a2;
  }
  else
  {
    v3 = 1;
    do
    {
      v4 = v3;
      v3 *= 2;
    }
    while (v4 < a2);
  }
  v5 = operator new[]();
  result = *a1;
  v7 = a1[1];
  if (v7)
  {
    for (i = 0; i != v7; ++i)
      *(_DWORD *)(v5 + 4 * i) = *(_DWORD *)(result + 4 * i);
    *a1 = v5;
    a1[2] = v4;
LABEL_11:
    JUMPOUT(0x22E2B0780);
  }
  *a1 = v5;
  a1[2] = v4;
  if (result)
    goto LABEL_11;
  return result;
}

uint64_t Darts::Details::DoubleArrayBuilder::build_dawg<int>(void (**a1)(unint64_t, uint64_t), unint64_t *a2, Darts::Details::DawgBuilder *this)
{
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  unint64_t v11;
  int v12;
  int *v13;
  char v14;
  int v15;
  int v16;

  Darts::Details::DawgBuilder::init(this);
  if (*a2)
  {
    v6 = 0;
    do
    {
      v7 = a2[2];
      v8 = *(const char **)(a2[1] + 8 * v6);
      if (v7)
      {
        v9 = *(_QWORD *)(v7 + 8 * v6);
      }
      else
      {
        while (v8[v7++])
          ;
        v9 = v7 - 1;
      }
      v11 = a2[3];
      if (v11)
        v12 = *(_DWORD *)(v11 + 4 * v6);
      else
        v12 = v6;
      Darts::Details::DawgBuilder::insert(this, v8, v9, v12);
      ++v6;
      if (*a1)
        (*a1)(v6, *a2 + 1);
    }
    while (v6 < *a2);
  }
  Darts::Details::DawgBuilder::flush((uint64_t)this, 0);
  v13 = *(int **)this;
  v14 = *(_BYTE *)(*(_QWORD *)this + 8);
  v15 = **(_DWORD **)this;
  if (v14)
    v16 = (2 * *((unsigned __int8 *)v13 + 9)) | (4 * v15);
  else
    v16 = 2 * v15;
  **((_DWORD **)this + 3) = v16 | *((unsigned __int8 *)v13 + 10);
  **((_BYTE **)this + 6) = v14;
  Darts::Details::AutoPool<Darts::Details::DawgNode>::clear((uint64_t *)this);
  Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)this + 15);
  Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)this + 18);
  Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)this + 21);
  return Darts::Details::BitVector::build((Darts::Details::DawgBuilder *)((char *)this + 72));
}

uint64_t Darts::Details::DoubleArrayBuilder::build_from_dawg(Darts::Details::DoubleArrayBuilder *this, const Darts::Details::DawgBuilder *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  int v17;
  unint64_t v18;
  int v19;
  int v20;
  int v21;
  unint64_t v22;
  char v23;
  int j;
  int *v25;
  _DWORD *v26;
  uint64_t v27;
  unsigned int v28;
  int *v29;
  int v30;
  uint64_t result;
  uint64_t v32;

  v4 = *((_QWORD *)a2 + 4);
  v5 = 1;
  do
  {
    v6 = v5;
    v5 *= 2;
  }
  while (v6 < v4);
  v7 = (unsigned int **)((char *)this + 8);
  if (*((_QWORD *)this + 3) < v6)
    Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::resize_buf((uint64_t *)this + 1, v6);
  v8 = operator new[]();
  v9 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = v8;
  if (v9)
    MEMORY[0x22E2B0780](v9, 0x1000C8052888210);
  v10 = *((_QWORD *)a2 + 13);
  if (v10)
    bzero(*((void **)this + 8), 4 * v10);
  v11 = operator new[]();
  for (i = 0; i != 49152; i += 12)
  {
    v13 = v11 + i;
    *(_WORD *)(v13 + 8) = 0;
    *(_QWORD *)v13 = 0;
  }
  v14 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v11;
  if (v14)
    MEMORY[0x22E2B0780](v14, 0x1000C80CBA68D63);
  if (!*((_QWORD *)this + 2))
    Darts::Details::DoubleArrayBuilder::expand_units(this);
  v15 = (int *)*((_QWORD *)this + 4);
  v16 = v15[1];
  if (!*((_DWORD *)this + 18))
  {
    *((_DWORD *)this + 18) = v16;
    if (!v16)
      *((_DWORD *)this + 18) = *((_QWORD *)this + 2);
  }
  v17 = *v15;
  v15[3 * (*v15 & 0xFFF) + 1] = v16;
  v15[3 * (v15[1] & 0xFFF)] = v17;
  *((_WORD *)v15 + 4) = 257;
  **v7 = **v7 & 0x80000100 | 0x400;
  if (**((_DWORD **)a2 + 3) >= 4u)
  {
    Darts::Details::DoubleArrayBuilder::build_from_dawg(this, a2, 0, 0);
    v15 = (int *)*((_QWORD *)this + 4);
  }
  v18 = *((_QWORD *)this + 2) >> 8;
  if (v18 <= 0x10)
    v19 = 0;
  else
    v19 = v18 - 16;
  v32 = *((_QWORD *)this + 2) >> 8;
  if (v19 != (_DWORD)v18)
  {
    v20 = v19 << 8;
    do
    {
      v21 = 0;
      v22 = (v19 << 8);
      while (1)
      {
        v23 = v20 + v21;
        if (!BYTE1(v15[3 * ((v20 + v21) & 0xFFF) + 2]))
          break;
        if (++v21 == 256)
        {
          v23 = 0;
          break;
        }
      }
      for (j = 0; j != 256; ++j)
      {
        if (!LOBYTE(v15[3 * (v22 & 0xFFF) + 2]))
        {
          if (*((_QWORD *)this + 2) <= v22)
          {
            Darts::Details::DoubleArrayBuilder::expand_units(this);
            v15 = (int *)*((_QWORD *)this + 4);
          }
          v25 = &v15[3 * (v22 & 0xFFF)];
          v28 = v25[1];
          v26 = v25 + 1;
          v27 = v28;
          if (v22 == *((_DWORD *)this + 18))
          {
            *((_DWORD *)this + 18) = v27;
            if (v22 == v27)
              *((_DWORD *)this + 18) = *((_QWORD *)this + 2);
          }
          v29 = &v15[3 * (v22 & 0xFFF)];
          v30 = *v29;
          v15[3 * (v30 & 0xFFF) + 1] = v27;
          v15[3 * (*v26 & 0xFFF)] = v30;
          *((_BYTE *)v29 + 8) = 1;
          LOBYTE((*v7)[v22]) = v23 ^ (v20 + j);
        }
        ++v22;
      }
      ++v19;
      v20 += 256;
    }
    while (v19 != (_DWORD)v32);
  }
  if (v15)
  {
    MEMORY[0x22E2B0780](v15, 0x1000C80CBA68D63);
    *((_QWORD *)this + 4) = 0;
  }
  Darts::Details::AutoPool<unsigned char>::clear((uint64_t *)this + 5);
  result = *((_QWORD *)this + 8);
  if (result)
  {
    result = MEMORY[0x22E2B0780](result, 0x1000C8052888210);
    *((_QWORD *)this + 8) = 0;
  }
  return result;
}

uint64_t Darts::Details::DoubleArrayBuilder::build_from_keyset<int>(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int **v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  int v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  unint64_t v19;
  char v20;
  int j;
  int *v22;
  _DWORD *v23;
  uint64_t v24;
  unsigned int v25;
  int *v26;
  int v27;
  uint64_t v29;

  v4 = *a2;
  v5 = 1;
  do
  {
    v6 = v5;
    v5 *= 2;
  }
  while (v6 < v4);
  v7 = (unsigned int **)(a1 + 8);
  if (*(_QWORD *)(a1 + 24) < v6)
    Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::resize_buf((uint64_t *)(a1 + 8), v6);
  v8 = operator new[]();
  for (i = 0; i != 49152; i += 12)
  {
    v10 = v8 + i;
    *(_WORD *)(v10 + 8) = 0;
    *(_QWORD *)v10 = 0;
  }
  v11 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  if (v11)
    MEMORY[0x22E2B0780](v11, 0x1000C80CBA68D63);
  if (!*(_QWORD *)(a1 + 16))
    Darts::Details::DoubleArrayBuilder::expand_units((Darts::Details::DoubleArrayBuilder *)a1);
  v12 = *(int **)(a1 + 32);
  v13 = v12[1];
  if (!*(_DWORD *)(a1 + 72))
  {
    *(_DWORD *)(a1 + 72) = v13;
    if (!v13)
      *(_DWORD *)(a1 + 72) = *(_QWORD *)(a1 + 16);
  }
  v14 = *v12;
  v12[3 * (*v12 & 0xFFF) + 1] = v13;
  v12[3 * (v12[1] & 0xFFF)] = v14;
  *((_WORD *)v12 + 4) = 257;
  **v7 = **v7 & 0x80000100 | 0x400;
  if (*a2)
  {
    Darts::Details::DoubleArrayBuilder::build_from_keyset<int>(a1, a2, 0, *a2, 0, 0);
    v12 = *(int **)(a1 + 32);
  }
  v15 = *(_QWORD *)(a1 + 16) >> 8;
  if (v15 <= 0x10)
    v16 = 0;
  else
    v16 = v15 - 16;
  v29 = *(_QWORD *)(a1 + 16) >> 8;
  if (v16 != (_DWORD)v15)
  {
    v17 = v16 << 8;
    do
    {
      v18 = 0;
      v19 = (v16 << 8);
      while (1)
      {
        v20 = v17 + v18;
        if (!BYTE1(v12[3 * ((v17 + v18) & 0xFFF) + 2]))
          break;
        if (++v18 == 256)
        {
          v20 = 0;
          break;
        }
      }
      for (j = 0; j != 256; ++j)
      {
        if (!LOBYTE(v12[3 * (v19 & 0xFFF) + 2]))
        {
          if (*(_QWORD *)(a1 + 16) <= v19)
          {
            Darts::Details::DoubleArrayBuilder::expand_units((Darts::Details::DoubleArrayBuilder *)a1);
            v12 = *(int **)(a1 + 32);
          }
          v22 = &v12[3 * (v19 & 0xFFF)];
          v25 = v22[1];
          v23 = v22 + 1;
          v24 = v25;
          if (v19 == *(_DWORD *)(a1 + 72))
          {
            *(_DWORD *)(a1 + 72) = v24;
            if (v19 == v24)
              *(_DWORD *)(a1 + 72) = *(_QWORD *)(a1 + 16);
          }
          v26 = &v12[3 * (v19 & 0xFFF)];
          v27 = *v26;
          v12[3 * (v27 & 0xFFF) + 1] = v24;
          v12[3 * (*v23 & 0xFFF)] = v27;
          *((_BYTE *)v26 + 8) = 1;
          LOBYTE((*v7)[v19]) = v20 ^ (v17 + j);
        }
        ++v19;
      }
      ++v16;
      v17 += 256;
    }
    while (v16 != (_DWORD)v29);
  }
  if (v12)
  {
    MEMORY[0x22E2B0780](v12, 0x1000C80CBA68D63);
    *(_QWORD *)(a1 + 32) = 0;
  }
  return Darts::Details::AutoPool<unsigned char>::clear((uint64_t *)(a1 + 40));
}

uint64_t *Darts::Details::AutoStack<unsigned int>::~AutoStack(uint64_t *a1)
{
  Darts::Details::AutoPool<unsigned int>::clear(a1);
  return Darts::Details::AutoPool<unsigned int>::~AutoPool(a1);
}

uint64_t Darts::Details::AutoPool<unsigned int>::clear(uint64_t *a1)
{
  uint64_t result;

  Darts::Details::AutoPool<unsigned int>::resize(a1, 0);
  result = *a1;
  if (*a1)
  {
    result = MEMORY[0x22E2B0780](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

uint64_t *Darts::Details::AutoPool<unsigned int>::resize(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = result;
  v4 = result[1];
  if (v4 > a2)
  {
    result[1] = a2;
    v4 = a2;
  }
  if (result[2] < a2)
  {
    result = (uint64_t *)Darts::Details::AutoPool<unsigned int>::resize_buf(result, a2);
    v4 = v3[1];
  }
  if (v4 < a2)
    v3[1] = a2;
  return result;
}

uint64_t Darts::Details::AutoPool<unsigned int>::resize_buf(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t i;

  if (a2 >= 2 * a1[2])
  {
    v4 = a2;
  }
  else
  {
    v3 = 1;
    do
    {
      v4 = v3;
      v3 *= 2;
    }
    while (v4 < a2);
  }
  v5 = operator new[]();
  result = *a1;
  v7 = a1[1];
  if (v7)
  {
    for (i = 0; i != v7; ++i)
      *(_DWORD *)(v5 + 4 * i) = *(_DWORD *)(result + 4 * i);
    *a1 = v5;
    a1[2] = v4;
LABEL_11:
    JUMPOUT(0x22E2B0780);
  }
  *a1 = v5;
  a1[2] = v4;
  if (result)
    goto LABEL_11;
  return result;
}

uint64_t *Darts::Details::AutoPool<unsigned int>::~AutoPool(uint64_t *a1)
{
  Darts::Details::AutoPool<unsigned int>::clear(a1);
  if (*a1)
  {
    MEMORY[0x22E2B0780](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

void Darts::Details::BitVector::~BitVector(Darts::Details::BitVector *this)
{
  uint64_t v2;

  Darts::Details::BitVector::clear(this);
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    MEMORY[0x22E2B0780](v2, 0x1000C8052888210);
    *((_QWORD *)this + 3) = 0;
  }
  Darts::Details::AutoPool<unsigned int>::~AutoPool((uint64_t *)this);
}

uint64_t Darts::Details::BitVector::clear(Darts::Details::BitVector *this)
{
  uint64_t result;

  Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)this);
  result = *((_QWORD *)this + 3);
  if (result)
  {
    result = MEMORY[0x22E2B0780](result, 0x1000C8052888210);
    *((_QWORD *)this + 3) = 0;
  }
  return result;
}

uint64_t *Darts::Details::AutoPool<Darts::Details::DawgUnit>::~AutoPool(uint64_t *a1)
{
  Darts::Details::AutoPool<Darts::Details::DawgUnit>::clear(a1);
  if (*a1)
  {
    MEMORY[0x22E2B0780](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t Darts::Details::AutoPool<Darts::Details::DawgUnit>::clear(uint64_t *a1)
{
  uint64_t result;

  Darts::Details::AutoPool<Darts::Details::DawgUnit>::resize(a1, 0);
  result = *a1;
  if (*a1)
  {
    result = MEMORY[0x22E2B0780](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void Darts::Details::AutoPool<Darts::Details::DawgUnit>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v4;

  v4 = a1[1];
  if (v4 > a2)
  {
    a1[1] = a2;
    v4 = a2;
  }
  if (a1[2] < a2)
  {
    Darts::Details::AutoPool<Darts::Details::DawgUnit>::resize_buf(a1, a2);
    v4 = a1[1];
  }
  if (a2 > v4)
  {
    bzero((void *)(*a1 + 4 * v4), 4 * (a2 - v4));
    a1[1] = a2;
  }
}

uint64_t Darts::Details::AutoPool<Darts::Details::DawgUnit>::resize_buf(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t i;

  if (a2 >= 2 * a1[2])
  {
    v4 = a2;
  }
  else
  {
    v3 = 1;
    do
    {
      v4 = v3;
      v3 *= 2;
    }
    while (v4 < a2);
  }
  v5 = operator new[]();
  result = *a1;
  v7 = a1[1];
  if (v7)
  {
    for (i = 0; i != v7; ++i)
      *(_DWORD *)(v5 + 4 * i) = *(_DWORD *)(result + 4 * i);
    *a1 = v5;
    a1[2] = v4;
LABEL_11:
    JUMPOUT(0x22E2B0780);
  }
  *a1 = v5;
  a1[2] = v4;
  if (result)
    goto LABEL_11;
  return result;
}

uint64_t *Darts::Details::AutoPool<Darts::Details::DawgNode>::~AutoPool(uint64_t *a1)
{
  Darts::Details::AutoPool<Darts::Details::DawgNode>::clear(a1);
  if (*a1)
  {
    MEMORY[0x22E2B0780](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t Darts::Details::AutoPool<Darts::Details::DawgNode>::clear(uint64_t *a1)
{
  uint64_t result;

  Darts::Details::AutoPool<Darts::Details::DawgNode>::resize(a1, 0);
  result = *a1;
  if (*a1)
  {
    result = MEMORY[0x22E2B0780](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

uint64_t *Darts::Details::AutoPool<Darts::Details::DawgNode>::resize(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  v4 = result[1];
  if (v4 > a2)
  {
    result[1] = a2;
    v4 = a2;
  }
  if (result[2] < a2)
  {
    result = (uint64_t *)Darts::Details::AutoPool<Darts::Details::DawgNode>::resize_buf(result, a2);
    v4 = v3[1];
  }
  for (; v4 < a2; v4 = v3[1])
  {
    v3[1] = v4 + 1;
    v5 = *v3 + 12 * v4;
    *(_DWORD *)(v5 + 7) = 0;
    *(_QWORD *)v5 = 0;
  }
  return result;
}

uint64_t Darts::Details::AutoPool<Darts::Details::DawgNode>::resize_buf(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a2 >= 2 * a1[2])
  {
    v4 = a2;
  }
  else
  {
    v3 = 1;
    do
    {
      v4 = v3;
      v3 *= 2;
    }
    while (v4 < a2);
  }
  v5 = operator new[]();
  result = *a1;
  v7 = a1[1];
  if (v7)
  {
    v8 = 0;
    do
    {
      v9 = v5 + v8;
      v10 = *(_QWORD *)(result + v8);
      *(_DWORD *)(v9 + 8) = *(_DWORD *)(result + v8 + 8);
      *(_QWORD *)v9 = v10;
      v8 += 12;
      --v7;
    }
    while (v7);
    *a1 = v5;
    a1[2] = v4;
LABEL_11:
    JUMPOUT(0x22E2B0780);
  }
  *a1 = v5;
  a1[2] = v4;
  if (result)
    goto LABEL_11;
  return result;
}

uint64_t *Darts::Details::DawgBuilder::init(Darts::Details::DawgBuilder *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  int v7;

  v7 = 0;
  Darts::Details::AutoPool<unsigned int>::resize((uint64_t *)this + 15, 0x400uLL, &v7);
  v2 = *((_QWORD *)this + 22);
  if (v2)
  {
    v3 = *(_QWORD *)this + 12 * *(unsigned int *)(*((_QWORD *)this + 21) + 4 * v2 - 4);
    *(_DWORD *)(v3 + 7) = 0;
    *(_QWORD *)v3 = 0;
    --*((_QWORD *)this + 22);
  }
  else
  {
    Darts::Details::AutoPool<Darts::Details::DawgNode>::append((uint64_t *)this);
  }
  Darts::Details::BitVector::append((uint64_t *)this + 9);
  Darts::Details::AutoPool<Darts::Details::DawgUnit>::append((uint64_t *)this + 3);
  v4 = *((_QWORD *)this + 7);
  if (v4 == *((_QWORD *)this + 8))
  {
    Darts::Details::AutoPool<unsigned char>::resize_buf((uint64_t *)this + 6, v4 + 1);
    v4 = *((_QWORD *)this + 7);
  }
  *((_QWORD *)this + 7) = v4 + 1;
  *((_QWORD *)this + 24) = 1;
  *(_BYTE *)(*(_QWORD *)this + 8) = -1;
  v6 = 0;
  return Darts::Details::AutoPool<unsigned int>::append((uint64_t *)this + 18, &v6);
}

_QWORD *Darts::Details::DawgBuilder::insert(_QWORD *this, const char *a2, unint64_t a3, int a4)
{
  int v5;
  _QWORD *v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  char v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  int v20;
  unsigned int v21;
  _QWORD *exception;
  const char *v23;
  int v24;
  unsigned int v25;

  if (a4 < 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1106: exception: failed to"
          " insert key: negative value";
    goto LABEL_27;
  }
  if (!a3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1108: exception: failed to"
          " insert key: zero-length key";
LABEL_27:
    *exception = &off_24F0FD5D0;
    exception[1] = v23;
  }
  v5 = a4;
  v7 = this;
  v8 = 0;
  v9 = 0;
  v10 = *this;
  while (1)
  {
    v11 = *(_DWORD *)(v10 + 12 * v9);
    if (!v11)
      goto LABEL_12;
    v12 = a2[v8];
    if (v8 < a3 && !a2[v8])
    {
      exception = __cxa_allocate_exception(0x10uLL);
      v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1122: exception: failed "
            "to insert key: invalid null character";
      goto LABEL_27;
    }
    v13 = *(unsigned __int8 *)(v10 + 12 * v11 + 8);
    if (v12 < v13)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1127: exception: failed "
            "to insert key: wrong key order";
      goto LABEL_27;
    }
    if (v12 > v13)
      break;
    ++v8;
    v9 = *(_DWORD *)(v10 + 12 * v9);
    if (v8 > a3)
      return this;
  }
  *(_BYTE *)(v10 + 12 * v11 + 10) = 1;
  this = (_QWORD *)Darts::Details::DawgBuilder::flush((uint64_t)this, v11);
LABEL_12:
  if (v8 <= a3)
  {
    v24 = v5;
    do
    {
      if (v8 >= a3)
        v14 = 0;
      else
        v14 = a2[v8];
      v25 = 0;
      v15 = v7[22];
      if (v15)
      {
        v16 = *(_DWORD *)(v7[21] + 4 * v15 - 4);
        v17 = *v7 + 12 * v16;
        *(_DWORD *)(v17 + 7) = 0;
        *(_QWORD *)v17 = 0;
        --v7[22];
      }
      else
      {
        v16 = *((_DWORD *)v7 + 2);
        Darts::Details::AutoPool<Darts::Details::DawgNode>::append(v7);
      }
      v25 = v16;
      v18 = *v7;
      v19 = (int *)(*v7 + 12 * v9);
      v20 = *v19;
      if (!*v19)
        *(_BYTE *)(v18 + 12 * v16 + 9) = 1;
      *(_DWORD *)(v18 + 12 * v16 + 4) = v20;
      v21 = v25;
      *(_BYTE *)(v18 + 12 * v25 + 8) = v14;
      *v19 = v21;
      this = Darts::Details::AutoPool<unsigned int>::append(v7 + 18, &v25);
      v9 = v25;
      ++v8;
    }
    while (v8 <= a3);
    v5 = v24;
  }
  *(_DWORD *)(*v7 + 12 * v9) = v5;
  return this;
}

uint64_t *Darts::Details::AutoPool<unsigned int>::resize(uint64_t *result, unint64_t a2, _DWORD *a3)
{
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;

  v5 = result;
  v6 = result[1];
  if (v6 > a2)
  {
    result[1] = a2;
    v6 = a2;
  }
  if (result[2] < a2)
  {
    result = (uint64_t *)Darts::Details::AutoPool<unsigned int>::resize_buf(result, a2);
    v6 = v5[1];
  }
  if (v6 < a2)
  {
    v7 = *v5;
    do
      *(_DWORD *)(v7 + 4 * v6++) = *a3;
    while (a2 != v6);
    v5[1] = a2;
  }
  return result;
}

uint64_t *Darts::Details::AutoPool<Darts::Details::DawgNode>::append(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result;
  v2 = result[1];
  if (v2 == result[2])
  {
    result = (uint64_t *)Darts::Details::AutoPool<Darts::Details::DawgNode>::resize_buf(result, v2 + 1);
    v2 = v1[1];
  }
  v1[1] = v2 + 1;
  v3 = *v1 + 12 * v2;
  *(_DWORD *)(v3 + 7) = 0;
  *(_QWORD *)v3 = 0;
  return result;
}

uint64_t *Darts::Details::BitVector::append(uint64_t *this)
{
  uint64_t *v1;
  uint64_t v2;
  int v3;

  v1 = this;
  v2 = this[5];
  if ((v2 & 0x1F) == 0)
  {
    v3 = 0;
    this = Darts::Details::AutoPool<unsigned int>::append(this, &v3);
    v2 = v1[5];
  }
  v1[5] = v2 + 1;
  return this;
}

uint64_t *Darts::Details::AutoPool<Darts::Details::DawgUnit>::append(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = result;
  v2 = result[1];
  if (v2 == result[2])
  {
    result = (uint64_t *)Darts::Details::AutoPool<Darts::Details::DawgUnit>::resize_buf(result, v2 + 1);
    v2 = v1[1];
  }
  v1[1] = v2 + 1;
  *(_DWORD *)(*v1 + 4 * v2) = 0;
  return result;
}

uint64_t *Darts::Details::AutoPool<unsigned int>::append(uint64_t *result, _DWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = result;
  v4 = result[1];
  if (v4 == result[2])
  {
    result = (uint64_t *)Darts::Details::AutoPool<unsigned int>::resize_buf(result, v4 + 1);
    v4 = v3[1];
  }
  v3[1] = v4 + 1;
  *(_DWORD *)(*v3 + 4 * v4) = *a2;
  return result;
}

uint64_t Darts::Details::DawgBuilder::flush(uint64_t this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t i;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  int *v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t *v35;
  unsigned int v37;
  int v38;
  unsigned int v39;

  v2 = this;
  v3 = *(_QWORD *)(this + 152) - 1;
  v4 = *(_DWORD *)(*(_QWORD *)(this + 144) + 4 * v3);
  if (v4 != a2)
  {
    v35 = (uint64_t *)(this + 120);
    v5 = (_QWORD *)(this + 24);
    v6 = (_QWORD *)(this + 72);
    while (1)
    {
      *(_QWORD *)(v2 + 152) = v3;
      v7 = *(_QWORD *)(v2 + 128);
      if (*(_QWORD *)(v2 + 192) >= v7 - (v7 >> 2))
      {
        v8 = 2 * v7;
        Darts::Details::AutoPool<unsigned int>::clear(v35);
        v38 = 0;
        Darts::Details::AutoPool<unsigned int>::resize(v35, v8, &v38);
        v9 = *(_QWORD *)(v2 + 32);
        if (v9 >= 2)
        {
          v10 = *(_QWORD *)(v2 + 48);
          for (i = 1; i != v9; ++i)
          {
            if (!*(_BYTE *)(v10 + i) || (*(_DWORD *)(*v5 + 4 * i) & 2) != 0)
            {
              v12 = 0;
              if ((_DWORD)i)
              {
                v13 = i;
                do
                {
                  v14 = *(_DWORD *)(*v5 + 4 * v13);
                  v15 = (v14 ^ ~(*(unsigned __int8 *)(v10 + v13) << 24)) + (v14 << 15);
                  v16 = 2057 * ((5 * (v15 ^ (v15 >> 12))) ^ ((5 * (v15 ^ (v15 >> 12))) >> 4));
                  v12 ^= HIWORD(v16) ^ v16;
                  v17 = __CFADD__(v13++, 1);
                }
                while (!v17 && (v14 & 1) != 0);
              }
              v18 = *(_QWORD *)(v2 + 120);
              do
              {
                v19 = (unint64_t)v12 % *(_QWORD *)(v2 + 128);
                v12 = v19 + 1;
              }
              while (*(_DWORD *)(v18 + 4 * v19));
              *(_DWORD *)(v18 + 4 * v19) = i;
            }
          }
        }
      }
      v20 = 0;
      if (v4)
      {
        v21 = v4;
        do
        {
          ++v20;
          v21 = *(_DWORD *)(*(_QWORD *)v2 + 12 * v21 + 4);
        }
        while (v21);
      }
      v37 = 0;
      this = Darts::Details::DawgBuilder::find_node((Darts::Details::DawgBuilder *)v2, v4, &v37);
      if ((_DWORD)this)
      {
        v22 = this;
        *(_DWORD *)(*v6 + 4 * (this >> 5)) |= 1 << this;
        if (v4)
          goto LABEL_22;
        goto LABEL_23;
      }
      if (!v20)
        break;
      do
      {
        Darts::Details::BitVector::append((uint64_t *)(v2 + 72));
        this = (uint64_t)Darts::Details::AutoPool<Darts::Details::DawgUnit>::append((uint64_t *)(v2 + 24));
        v25 = *(_QWORD *)(v2 + 56);
        if (v25 == *(_QWORD *)(v2 + 64))
        {
          this = Darts::Details::AutoPool<unsigned char>::resize_buf((uint64_t *)(v2 + 48), v25 + 1);
          v25 = *(_QWORD *)(v2 + 56);
        }
        *(_QWORD *)(v2 + 56) = v25 + 1;
        --v20;
      }
      while (v20);
      v26 = *(_DWORD *)(v2 + 112) - 1;
      if (v4)
        goto LABEL_32;
LABEL_37:
      v22 = v26 + 1;
      *(_DWORD *)(*(_QWORD *)(v2 + 120) + 4 * v37) = v26 + 1;
      ++*(_QWORD *)(v2 + 192);
      if (v4)
      {
        do
        {
LABEL_22:
          v23 = *(_DWORD *)(*(_QWORD *)v2 + 12 * v4 + 4);
          v39 = v4;
          this = (uint64_t)Darts::Details::AutoPool<unsigned int>::append((uint64_t *)(v2 + 168), &v39);
          v4 = v23;
        }
        while (v23);
      }
LABEL_23:
      v24 = *(_QWORD *)(v2 + 144);
      v3 = *(_QWORD *)(v2 + 152) - 1;
      *(_DWORD *)(*(_QWORD *)v2 + 12 * *(unsigned int *)(v24 + 4 * v3)) = v22;
      v4 = *(_DWORD *)(v24 + 4 * v3);
      if (v4 == a2)
        goto LABEL_2;
    }
    v26 = 0;
    if (!v4)
      goto LABEL_37;
LABEL_32:
    v27 = *(_QWORD *)v2;
    v28 = v4;
    do
    {
      v29 = v28;
      v30 = (int *)(v27 + 12 * v28);
      v31 = *((unsigned __int8 *)v30 + 8);
      v32 = *v30;
      if (v31)
        v33 = (2 * *(unsigned __int8 *)(v27 + 12 * v29 + 9)) | (4 * v32);
      else
        v33 = 2 * v32;
      v34 = 3 * v29;
      *(_DWORD *)(*(_QWORD *)(v2 + 24) + 4 * v26) = v33 | *(unsigned __int8 *)(v27 + 4 * v34 + 10);
      *(_BYTE *)(*(_QWORD *)(v2 + 48) + v26--) = v31;
      v27 = *(_QWORD *)v2;
      v28 = *(_DWORD *)(*(_QWORD *)v2 + 4 * v34 + 4);
    }
    while (v28);
    goto LABEL_37;
  }
LABEL_2:
  *(_QWORD *)(v2 + 152) = v3;
  return this;
}

uint64_t Darts::Details::DawgBuilder::find_node(Darts::Details::DawgBuilder *this, unsigned int a2, unsigned int *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  int *v24;
  int v25;
  int v26;
  int v27;

  v3 = a2;
  if (a2)
  {
    LODWORD(v4) = 0;
    v5 = *(_QWORD *)this;
    v6 = a2;
    do
    {
      v7 = (int *)(v5 + 12 * v6);
      v8 = *((unsigned __int8 *)v7 + 8);
      v9 = *v7;
      if (v8)
        v10 = (2 * *(unsigned __int8 *)(v5 + 12 * v6 + 9)) | (4 * v9);
      else
        v10 = 2 * v9;
      v11 = v5 + 12 * v6;
      v12 = ((v10 | *(unsigned __int8 *)(v11 + 10)) ^ ~(v8 << 24)) + ((v10 | *(unsigned __int8 *)(v11 + 10)) << 15);
      v13 = 2057 * ((5 * (v12 ^ (v12 >> 12))) ^ ((5 * (v12 ^ (v12 >> 12))) >> 4));
      v4 = v4 ^ HIWORD(v13) ^ v13;
      v6 = *(unsigned int *)(v11 + 4);
    }
    while ((_DWORD)v6);
  }
  else
  {
    v4 = 0;
  }
  v15 = *((_QWORD *)this + 15);
  v14 = *((_QWORD *)this + 16);
  v16 = v4 % v14;
  *a3 = v4 % v14;
  v17 = *(unsigned int *)(v15 + 4 * (v4 % v14));
  if ((_DWORD)v17)
  {
    v18 = *(_QWORD *)this;
    v19 = (unsigned int *)(*(_QWORD *)this + 12 * a2 + 4);
    v20 = *((_QWORD *)this + 3);
    do
    {
      v21 = *v19;
      v22 = v17;
      if ((_DWORD)v21)
      {
        v22 = v17;
        while ((*(_DWORD *)(v20 + 4 * v22) & 1) != 0)
        {
          ++v22;
          LODWORD(v21) = *(_DWORD *)(v18 + 12 * v21 + 4);
          if (!(_DWORD)v21)
            goto LABEL_15;
        }
      }
      else
      {
LABEL_15:
        if ((*(_DWORD *)(v20 + 4 * v22) & 1) == 0)
        {
          if (!v3)
            return v17;
          v23 = v3;
          while (1)
          {
            v24 = (int *)(v18 + 12 * v23);
            v25 = *((unsigned __int8 *)v24 + 8);
            v26 = *v24;
            v27 = v25 ? (2 * *(unsigned __int8 *)(v18 + 12 * v23 + 9)) | (4 * v26) : 2 * v26;
            if ((v27 | *(unsigned __int8 *)(v18 + 12 * v23 + 10)) != *(_DWORD *)(v20 + 4 * v22)
              || v25 != *(unsigned __int8 *)(*((_QWORD *)this + 6) + v22))
            {
              break;
            }
            v23 = *(unsigned int *)(v18 + 12 * v23 + 4);
            --v22;
            if (!(_DWORD)v23)
              return v17;
          }
        }
      }
      v16 = (v16 + 1) % v14;
      *a3 = v16;
      v17 = *(unsigned int *)(v15 + 4 * v16);
    }
    while ((_DWORD)v17);
  }
  return v17;
}

uint64_t Darts::Details::BitVector::build(Darts::Details::BitVector *this)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = operator new[]();
  result = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v2;
  if (result)
    result = MEMORY[0x22E2B0780](result, 0x1000C8052888210);
  *((_QWORD *)this + 4) = 0;
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    v5 = 0;
    v6 = (_DWORD *)*((_QWORD *)this + 3);
    v7 = *(unsigned int **)this;
    do
    {
      *v6++ = v5;
      v8 = *v7++;
      v9 = ((((((v8 >> 1) & 0x55555555) + (v8 & 0x55555555)) >> 2) & 0x33333333)
          + ((((v8 >> 1) & 0x55555555) + (v8 & 0x55555555)) & 0x33333333)
          + (((((((v8 >> 1) & 0x55555555) + (v8 & 0x55555555)) >> 2) & 0x33333333)
            + ((((v8 >> 1) & 0x55555555) + (v8 & 0x55555555)) & 0x33333333)) >> 4)) & 0xF0F0F0F;
      v5 += ((_BYTE)v9 + BYTE1(v9) + ((v9 + (v9 >> 8)) >> 16)) & 0x3F;
      --v4;
    }
    while (v4);
    *((_QWORD *)this + 4) = v5;
  }
  return result;
}

unsigned int *Darts::Details::DoubleArrayBuilderUnit::set_offset(unsigned int *this, unsigned int a2)
{
  int v2;
  _QWORD *exception;

  if (a2 >> 29)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = &off_24F0FD5D0;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1339: exception: "
                   "failed to modify unit: too large offset";
  }
  v2 = (4 * a2) | 0x200;
  if (a2 < 0x200000)
    v2 = a2 << 10;
  *this = *this & 0x800001FF | v2;
  return this;
}

unsigned int *Darts::Details::DoubleArrayBuilder::build_from_dawg(Darts::Details::DoubleArrayBuilder *this, const Darts::Details::DawgBuilder *a2, unsigned int a3, unsigned int a4)
{
  Darts::Details::BitVector *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *result;
  int v19;
  int v20;

  v8 = (const Darts::Details::DawgBuilder *)((char *)a2 + 72);
  v9 = *(unsigned int *)(*((_QWORD *)a2 + 3) + 4 * a3);
  v10 = v9 >> 2;
  v11 = v9 >> 7;
  v12 = 1 << (v9 >> 2);
  if ((v12 & *(_DWORD *)(*((_QWORD *)a2 + 9) + 4 * (v9 >> 7))) != 0
    && (v13 = *(_DWORD *)(*((_QWORD *)this + 8)
                        + 4
                        * (Darts::Details::BitVector::rank((const Darts::Details::DawgBuilder *)((char *)a2 + 72), v10)- 1))) != 0&& ((v14 = v13 ^ a4, ((v13 ^ a4) & 0x1FE00000) != 0) ? (v15 = (v13 ^ a4) == 0) : (v15 = 1), v15))
  {
    if (*(_BYTE *)(*((_QWORD *)a2 + 6) + v10))
    {
      v16 = *((_QWORD *)this + 1);
      v17 = a4;
    }
    else
    {
      v17 = a4;
      v16 = *((_QWORD *)this + 1);
      *(_DWORD *)(v16 + 4 * a4) |= 0x100u;
    }
    return Darts::Details::DoubleArrayBuilderUnit::set_offset((unsigned int *)(v16 + 4 * v17), v14);
  }
  else
  {
    result = (unsigned int *)Darts::Details::DoubleArrayBuilder::arrange_from_dawg(this, a2, a3, a4);
    v19 = (int)result;
    if ((*(_DWORD *)(*((_QWORD *)a2 + 9) + 4 * v11) & v12) != 0)
    {
      result = (unsigned int *)Darts::Details::BitVector::rank(v8, v10);
      *(_DWORD *)(*((_QWORD *)this + 8) + 4 * ((_DWORD)result - 1)) = v19;
    }
    do
    {
      if (*(_BYTE *)(*((_QWORD *)a2 + 6) + v10))
        result = (unsigned int *)Darts::Details::DoubleArrayBuilder::build_from_dawg(this, a2, v10, v19 ^ *(unsigned __int8 *)(*((_QWORD *)a2 + 6) + v10));
      if ((_DWORD)v10 == -1)
        break;
      v20 = *(_DWORD *)(*((_QWORD *)a2 + 3) + 4 * v10);
      LODWORD(v10) = v10 + 1;
    }
    while ((v20 & 1) != 0);
  }
  return result;
}

void Darts::Details::DoubleArrayBuilder::expand_units(Darts::Details::DoubleArrayBuilder *this)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int i;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;

  v2 = (uint64_t *)((char *)this + 8);
  v3 = *((_QWORD *)this + 2);
  v4 = (v3 + 256);
  v5 = (v3 >> 8) - 16;
  if (v5 >= 0xFFFFFFEF)
  {
    Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::resize((uint64_t *)this + 1, (v3 + 256));
  }
  else
  {
    v6 = 0;
    v7 = v5 << 8;
    v8 = *((_QWORD *)this + 4);
    while (1)
    {
      v9 = v7 + v6;
      if (!*(_BYTE *)(v8 + 12 * (((_DWORD)v7 + v6) & 0xFFF) + 9))
        break;
      if (++v6 == 256)
      {
        v9 = 0;
        break;
      }
    }
    v10 = 0;
    v11 = 3072 * ((v3 >> 8) & 0xF);
    do
    {
      if (!*(_BYTE *)(v8 + v11 + v10 + 8))
      {
        if (*((_QWORD *)this + 2) <= v7)
        {
          Darts::Details::DoubleArrayBuilder::expand_units(this);
          v8 = *((_QWORD *)this + 4);
        }
        v12 = (int *)(v8 + v11 + v10);
        v13 = v12[1];
        if (v7 == *((_DWORD *)this + 18))
        {
          *((_DWORD *)this + 18) = v13;
          if (v7 == v13)
            *((_DWORD *)this + 18) = *((_QWORD *)this + 2);
        }
        v14 = *v12;
        *(_DWORD *)(v8 + 12 * (*v12 & 0xFFF) + 4) = v13;
        *(_DWORD *)(v8 + 12 * (v12[1] & 0xFFF)) = v14;
        *((_BYTE *)v12 + 8) = 1;
        *(_BYTE *)(*v2 + 4 * v7) = v9 ^ v7;
      }
      ++v7;
      v10 += 12;
    }
    while ((_DWORD)v10 != 3072);
    Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::resize(v2, (v3 + 256));
    v15 = v3;
    if (v3 < (unint64_t)v4)
    {
      v16 = *((_QWORD *)this + 4);
      do
        *(_WORD *)(v16 + 12 * (v15++ & 0xFFF) + 8) = 0;
      while (v4 != v15);
    }
  }
  v17 = *((_QWORD *)this + 4);
  if ((int)v3 + 1 < v4)
  {
    for (i = 0; i != 255; ++i)
    {
      v19 = v3 + i;
      *(_DWORD *)(v17 + 12 * (v19 & 0xFFF) + 4) = v19 + 1;
      *(_DWORD *)(v17 + 12 * ((v19 + 1) & 0xFFF)) = v19;
    }
  }
  v20 = 12 * (v3 & 0xFFF);
  *(_DWORD *)(v17 + v20) = v3 + 255;
  v21 = *((_DWORD *)this + 18);
  v22 = 12 * (v21 & 0xFFF);
  *(_DWORD *)(v17 + v20) = *(_DWORD *)(v17 + v22);
  LOWORD(v20) = *(_DWORD *)(v17 + v22);
  *(_DWORD *)(v17 + 12 * (((_DWORD)v3 + 255) & 0xFFF) + 4) = v21;
  *(_DWORD *)(v17 + 12 * (v20 & 0xFFF) + 4) = v3;
  *(_DWORD *)(v17 + v22) = v3 + 255;
}

uint64_t Darts::Details::DoubleArrayBuilder::arrange_from_dawg(Darts::Details::DoubleArrayBuilder *this, const Darts::Details::DawgBuilder *a2, unsigned int a3, unsigned int a4)
{
  uint64_t *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  _BOOL4 v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  int *v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  char v35;

  v8 = (uint64_t *)((char *)this + 40);
  Darts::Details::AutoPool<unsigned char>::resize((uint64_t *)this + 5, 0);
  v9 = *(_DWORD *)(*((_QWORD *)a2 + 3) + 4 * a3);
  if (v9 >= 4)
  {
    v10 = v9 >> 2;
    do
    {
      v35 = *(_BYTE *)(*((_QWORD *)a2 + 6) + v10);
      Darts::Details::AutoPool<unsigned char>::append(v8, &v35);
      v11 = *(_DWORD *)(*((_QWORD *)a2 + 3) + 4 * v10);
      v13 = __CFADD__(v10++, 1);
    }
    while ((v11 & 1) != 0 && !v13);
  }
  v14 = *((unsigned int *)this + 18);
  v15 = *((_QWORD *)this + 2);
  if (v15 <= v14)
  {
LABEL_20:
    v19 = a4 | v15;
  }
  else
  {
    v17 = *((_QWORD *)this + 4);
    v16 = (unsigned __int8 *)*((_QWORD *)this + 5);
    v18 = *((_DWORD *)this + 18);
    while (1)
    {
      v19 = v18 ^ *v16;
      v20 = ((unsigned __int16)v18 ^ *v16) & 0xFFF;
      if (!*(_BYTE *)(v17 + 12 * (((unsigned __int16)v18 ^ *v16) & 0xFFF) + 9)
        && (!((v18 ^ *v16) ^ a4) || ((v19 ^ a4) & 0x1FE00000) == 0))
      {
        v21 = *((_QWORD *)this + 6);
        if (v21 < 2)
          goto LABEL_21;
        if (!*(_BYTE *)(v17 + 12 * (v20 ^ v16[1]) + 8))
          break;
      }
LABEL_19:
      v18 = *(_DWORD *)(v17 + 12 * (v18 & 0xFFF) + 4);
      if (v18 == (_DWORD)v14)
        goto LABEL_20;
    }
    v22 = 2;
    while (v21 != v22)
    {
      if (*(unsigned __int8 *)(v17 + 12 * (v20 ^ v16[v22++]) + 8))
      {
        if (v22 - 1 >= v21)
          break;
        goto LABEL_19;
      }
    }
  }
LABEL_21:
  Darts::Details::DoubleArrayBuilderUnit::set_offset((unsigned int *)(*((_QWORD *)this + 1) + 4 * a4), v19 ^ a4);
  if (*((_QWORD *)this + 6))
  {
    v24 = 0;
    v25 = *(_DWORD *)(*((_QWORD *)a2 + 3) + 4 * a3) >> 2;
    do
    {
      v26 = v19 ^ *(unsigned __int8 *)(*((_QWORD *)this + 5) + v24);
      if (*((_QWORD *)this + 2) <= v26)
        Darts::Details::DoubleArrayBuilder::expand_units(this);
      if (*((_DWORD *)this + 18) == (_DWORD)v26)
      {
        v27 = v26 & 0xFFF;
        v28 = *((_QWORD *)this + 4);
        v29 = *(_DWORD *)(v28 + 12 * (v26 & 0xFFF) + 4);
        *((_DWORD *)this + 18) = v29;
        if (v29 == (_DWORD)v26)
        {
          *((_DWORD *)this + 18) = *((_QWORD *)this + 2);
          v29 = v26;
        }
      }
      else
      {
        v28 = *((_QWORD *)this + 4);
        v27 = v26 & 0xFFF;
        v29 = *(_DWORD *)(v28 + 12 * (v26 & 0xFFF) + 4);
      }
      v30 = (int *)(v28 + 12 * v27);
      v31 = *v30;
      *(_DWORD *)(v28 + 12 * (*v30 & 0xFFF) + 4) = v29;
      *(_DWORD *)(v28 + 12 * (v30[1] & 0xFFF)) = v31;
      *((_BYTE *)v30 + 8) = 1;
      v32 = *((_QWORD *)this + 1);
      if (*(_BYTE *)(*((_QWORD *)a2 + 6) + v25))
      {
        *(_BYTE *)(v32 + 4 * v26) = *(_BYTE *)(*v8 + v24);
        v33 = *(_DWORD *)(*((_QWORD *)a2 + 3) + 4 * v25);
      }
      else
      {
        *(_DWORD *)(v32 + 4 * a4) |= 0x100u;
        v33 = *(_DWORD *)(*((_QWORD *)a2 + 3) + 4 * v25);
        *(_DWORD *)(v32 + 4 * v26) = (v33 >> 1) | 0x80000000;
      }
      v25 = ((int)(v33 << 31) >> 31) & (v25 + 1);
      ++v24;
    }
    while (v24 < *((_QWORD *)this + 6));
  }
  else
  {
    v28 = *((_QWORD *)this + 4);
  }
  *(_BYTE *)(v28 + 12 * (v19 & 0xFFF) + 9) = 1;
  return v19;
}

uint64_t Darts::Details::BitVector::rank(Darts::Details::BitVector *this, unint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = (a2 >> 3) & 0x1FFFFFFFFFFFFFFCLL;
  v3 = *(_DWORD *)(*((_QWORD *)this + 3) + v2);
  LODWORD(v2) = *(_DWORD *)(*(_QWORD *)this + v2) & (0xFFFFFFFF >> ~(_BYTE)a2);
  LODWORD(v2) = ((((unint64_t)(((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) >> 2) & 0x33333333)
               + ((((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) & 0x33333333)
               + (((((unint64_t)(((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) >> 2) & 0x33333333)
                 + ((((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) & 0x33333333)) >> 4)) & 0xF0F0F0F;
  return (((_BYTE)v2 + BYTE1(v2) + ((v2 + (v2 >> 8)) >> 16)) & 0x3Fu) + v3;
}

uint64_t *Darts::Details::AutoPool<unsigned char>::append(uint64_t *result, _BYTE *a2)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = result;
  v4 = result[1];
  if (v4 == result[2])
  {
    result = (uint64_t *)Darts::Details::AutoPool<unsigned char>::resize_buf(result, v4 + 1);
    v4 = v3[1];
  }
  v3[1] = v4 + 1;
  *(_BYTE *)(*v3 + v4) = *a2;
  return result;
}

void Darts::Details::DawgBuilder::~DawgBuilder(Darts::Details::DawgBuilder *this)
{
  Darts::Details::AutoPool<Darts::Details::DawgNode>::clear((uint64_t *)this);
  Darts::Details::AutoPool<Darts::Details::DawgUnit>::clear((uint64_t *)this + 3);
  Darts::Details::AutoPool<unsigned char>::clear((uint64_t *)this + 6);
  Darts::Details::BitVector::clear((Darts::Details::DawgBuilder *)((char *)this + 72));
  Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)this + 15);
  Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)this + 18);
  Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)this + 21);
  *((_QWORD *)this + 24) = 0;
  Darts::Details::AutoStack<unsigned int>::~AutoStack((uint64_t *)this + 21);
  Darts::Details::AutoStack<unsigned int>::~AutoStack((uint64_t *)this + 18);
  Darts::Details::AutoPool<unsigned int>::~AutoPool((uint64_t *)this + 15);
  Darts::Details::BitVector::~BitVector((Darts::Details::DawgBuilder *)((char *)this + 72));
  Darts::Details::AutoPool<unsigned char>::~AutoPool((uint64_t *)this + 6);
  Darts::Details::AutoPool<Darts::Details::DawgUnit>::~AutoPool((uint64_t *)this + 3);
  Darts::Details::AutoPool<Darts::Details::DawgNode>::~AutoPool((uint64_t *)this);
}

uint64_t Darts::Details::DoubleArrayBuilder::build_from_keyset<int>(uint64_t a1, _QWORD *a2, unint64_t a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  uint64_t result;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  int v17;

  while (1)
  {
    result = Darts::Details::DoubleArrayBuilder::arrange_from_keyset<int>(a1, a2, a3, a4, a5, a6);
    v12 = result;
    if (a3 < a4)
    {
      v13 = a2[2];
      while (v13 && *(_QWORD *)(v13 + 8 * a3) <= a5 || !*(_BYTE *)(*(_QWORD *)(a2[1] + 8 * a3) + a5))
      {
        if (a4 == ++a3)
          return result;
      }
    }
    if (a3 == a4)
      break;
    v14 = a2[2];
    if (v14 && *(_QWORD *)(v14 + 8 * a3) <= a5)
      v15 = 0;
    else
      v15 = *(unsigned __int8 *)(*(_QWORD *)(a2[1] + 8 * a3) + a5);
    v16 = a3 + 1;
    if (a3 + 1 < a4)
    {
      do
      {
        if (v14 && *(_QWORD *)(v14 + 8 * v16) <= a5)
          v17 = 0;
        else
          v17 = *(unsigned __int8 *)(*(_QWORD *)(a2[1] + 8 * v16) + a5);
        if (v17 != v15)
        {
          Darts::Details::DoubleArrayBuilder::build_from_keyset<int>(a1, a2, a3, v16, a5 + 1, v12 ^ v15);
          v14 = a2[2];
          if (v14 && *(_QWORD *)(v14 + 8 * v16) <= a5)
            v15 = 0;
          else
            v15 = *(unsigned __int8 *)(*(_QWORD *)(a2[1] + 8 * v16) + a5);
          a3 = v16;
        }
        ++v16;
      }
      while (a4 != v16);
    }
    a6 = v12 ^ v15;
    ++a5;
  }
  return result;
}

uint64_t Darts::Details::DoubleArrayBuilder::arrange_from_keyset<int>(uint64_t a1, _QWORD *a2, unint64_t a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  uint64_t *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  int *v35;
  int v36;
  uint64_t v37;
  _QWORD *exception;
  const char *v40;
  unsigned __int8 v41;

  v12 = (uint64_t *)(a1 + 40);
  Darts::Details::AutoPool<unsigned char>::resize((uint64_t *)(a1 + 40), 0);
  v13 = -1;
  if (a3 < a4)
  {
    do
    {
      v41 = 0;
      v14 = a2[2];
      if (v14)
      {
        if (*(_QWORD *)(v14 + 8 * a3) > a5)
        {
          v41 = *(_BYTE *)(*(_QWORD *)(a2[1] + 8 * a3) + a5);
          if (!v41)
          {
            exception = __cxa_allocate_exception(0x10uLL);
            v40 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1675: exception: f"
                  "ailed to build double-array: invalid null character";
            goto LABEL_52;
          }
          goto LABEL_17;
        }
      }
      else
      {
        v41 = *(_BYTE *)(*(_QWORD *)(a2[1] + 8 * a3) + a5);
        if (v41)
          goto LABEL_17;
      }
      v15 = a2[3];
      if (v15)
      {
        if ((*(_DWORD *)(v15 + 4 * a3) & 0x80000000) != 0)
          goto LABEL_51;
      }
      else if ((a3 & 0x80000000) != 0)
      {
LABEL_51:
        exception = __cxa_allocate_exception(0x10uLL);
        v40 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1677: exception: faile"
              "d to build double-array: negative value";
LABEL_52:
        *exception = &off_24F0FD5D0;
        exception[1] = v40;
      }
      if (v13 == -1)
      {
        if (v15)
          v13 = *(_DWORD *)(v15 + 4 * a3);
        else
          v13 = a3;
      }
      if (*(_QWORD *)a1)
        (*(void (**)(unint64_t, uint64_t))a1)(a3 + 1, *a2 + 1);
LABEL_17:
      v16 = *(_QWORD *)(a1 + 48);
      if (!v16)
        goto LABEL_21;
      v17 = *(unsigned __int8 *)(v16 + *v12 - 1);
      if (v41 != v17)
      {
        if (v41 < v17)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          v40 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1692: exception: fai"
                "led to build double-array: wrong key order";
          goto LABEL_52;
        }
LABEL_21:
        Darts::Details::AutoPool<unsigned char>::append(v12, &v41);
      }
      ++a3;
    }
    while (a4 != a3);
  }
  v18 = *(unsigned int *)(a1 + 72);
  v19 = *(_QWORD *)(a1 + 16);
  if (v19 <= v18)
  {
LABEL_35:
    v23 = a6 | v19;
  }
  else
  {
    v21 = *(_QWORD *)(a1 + 32);
    v20 = *(unsigned __int8 **)(a1 + 40);
    v22 = *(_DWORD *)(a1 + 72);
    while (1)
    {
      v23 = v22 ^ *v20;
      v24 = ((unsigned __int16)v22 ^ *v20) & 0xFFF;
      if (!*(_BYTE *)(v21 + 12 * (((unsigned __int16)v22 ^ *v20) & 0xFFF) + 9)
        && (!((v22 ^ *v20) ^ a6) || ((v23 ^ a6) & 0x1FE00000) == 0))
      {
        v25 = *(_QWORD *)(a1 + 48);
        if (v25 < 2)
          goto LABEL_36;
        if (!*(_BYTE *)(v21 + 12 * (v24 ^ v20[1]) + 8))
          break;
      }
LABEL_34:
      v22 = *(_DWORD *)(v21 + 12 * (v22 & 0xFFF) + 4);
      if (v22 == (_DWORD)v18)
        goto LABEL_35;
    }
    v26 = 2;
    while (v25 != v26)
    {
      if (*(unsigned __int8 *)(v21 + 12 * (v24 ^ v20[v26++]) + 8))
      {
        if (v26 - 1 >= v25)
          break;
        goto LABEL_34;
      }
    }
  }
LABEL_36:
  Darts::Details::DoubleArrayBuilderUnit::set_offset((unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * a6), v23 ^ a6);
  if (*(_QWORD *)(a1 + 48))
  {
    v28 = 0;
    v29 = v13 | 0x80000000;
    v30 = *v12;
    do
    {
      v31 = v23 ^ *(unsigned __int8 *)(v30 + v28);
      if (*(_QWORD *)(a1 + 16) <= v31)
        Darts::Details::DoubleArrayBuilder::expand_units((Darts::Details::DoubleArrayBuilder *)a1);
      if (*(_DWORD *)(a1 + 72) == (_DWORD)v31)
      {
        v32 = v31 & 0xFFF;
        v33 = *(_QWORD *)(a1 + 32);
        v34 = *(_DWORD *)(v33 + 12 * (v31 & 0xFFF) + 4);
        *(_DWORD *)(a1 + 72) = v34;
        if (v34 == (_DWORD)v31)
        {
          *(_DWORD *)(a1 + 72) = *(_QWORD *)(a1 + 16);
          v34 = v31;
        }
      }
      else
      {
        v33 = *(_QWORD *)(a1 + 32);
        v32 = v31 & 0xFFF;
        v34 = *(_DWORD *)(v33 + 12 * (v31 & 0xFFF) + 4);
      }
      v35 = (int *)(v33 + 12 * v32);
      v36 = *v35;
      *(_DWORD *)(v33 + 12 * (*v35 & 0xFFF) + 4) = v34;
      *(_DWORD *)(v33 + 12 * (v35[1] & 0xFFF)) = v36;
      *((_BYTE *)v35 + 8) = 1;
      v30 = *(_QWORD *)(a1 + 40);
      v37 = *(_QWORD *)(a1 + 8);
      if (*(_BYTE *)(v30 + v28))
      {
        *(_BYTE *)(v37 + 4 * v31) = *(_BYTE *)(v30 + v28);
      }
      else
      {
        *(_DWORD *)(v37 + 4 * a6) |= 0x100u;
        *(_DWORD *)(v37 + 4 * v31) = v29;
      }
      ++v28;
    }
    while (v28 < *(_QWORD *)(a1 + 48));
  }
  else
  {
    v33 = *(_QWORD *)(a1 + 32);
  }
  *(_BYTE *)(v33 + 12 * (v23 & 0xFFF) + 9) = 1;
  return v23;
}

void Darts::Details::DoubleArrayBuilder::~DoubleArrayBuilder(Darts::Details::DoubleArrayBuilder *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)((char *)this + 8);
  Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::clear((uint64_t *)this + 1);
  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    MEMORY[0x22E2B0780](v3, 0x1000C80CBA68D63);
    *((_QWORD *)this + 4) = 0;
  }
  Darts::Details::AutoPool<unsigned char>::clear((uint64_t *)this + 5);
  v4 = *((_QWORD *)this + 8);
  if (v4)
  {
    MEMORY[0x22E2B0780](v4, 0x1000C8052888210);
    *((_QWORD *)this + 8) = 0;
  }
  *((_DWORD *)this + 18) = 0;
  Darts::Details::AutoPool<unsigned char>::~AutoPool((uint64_t *)this + 5);
  v5 = *((_QWORD *)this + 4);
  if (v5)
  {
    MEMORY[0x22E2B0780](v5, 0x1000C80CBA68D63);
    *((_QWORD *)this + 4) = 0;
  }
  Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::~AutoPool(v2);
}

_QWORD *std::vector<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type,std::allocator<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type,std::allocator<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_22844C1B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type,std::allocator<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string_view>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

sentencepiece::normalizer::Normalizer *sentencepiece::normalizer::Normalizer::Normalizer(sentencepiece::normalizer::Normalizer *this, const sentencepiece::NormalizerSpec *a2, const sentencepiece::TrainerSpec *a3)
{
  unint64_t v5;
  unint64_t v6;

  *(_QWORD *)this = &off_24F0FD5F8;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = (char *)a2 + 16;
  *((_QWORD *)this + 5) = 0;
  *((_BYTE *)this + 48) = *((_BYTE *)a3 + 245);
  sentencepiece::util::Status::Status((_QWORD *)this + 7);
  v5 = *((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v5 + 23) < 0)
  {
    v5 = *(_QWORD *)v5;
    v6 = *(_QWORD *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    v6 = *(unsigned __int8 *)(v5 + 23);
  }
  sentencepiece::normalizer::Normalizer::Init((uint64_t)this, (unsigned int *)v5, v6);
  return this;
}

void sub_22844C298(_Unwind_Exception *a1)
{
  sentencepiece::util::Status *v1;
  uint64_t *v2;
  uint64_t v4;

  sentencepiece::util::Status::~Status(v1);
  v4 = *v2;
  *v2 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

void sentencepiece::normalizer::Normalizer::Init(uint64_t a1, unsigned int *a2, unint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned int *v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  __int128 v11;
  unsigned int *v12;
  unint64_t v13;

  if (a3)
  {
    v12 = 0;
    v13 = 0;
    v11 = 0uLL;
    sentencepiece::normalizer::Normalizer::DecodePrecompiledCharsMap(a2, a3, &v12, &v11, &v10);
    sentencepiece::util::Status::operator=((uint64_t *)(a1 + 56), &v10);
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v10);
    if (!*(_QWORD *)(a1 + 56))
    {
      v4 = (_QWORD *)operator new();
      *v4 = &off_24F0FD588;
      v4[1] = 0;
      v4[2] = 0;
      v4[3] = 0;
      v5 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v4;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      if (!v13 || (v13 & 3) != 0)
      {
        sentencepiece::util::Status::Status(&v10, 13, "Trie blob is wrongly formatted.", 31);
        sentencepiece::util::Status::operator=((uint64_t *)(a1 + 56), &v10);
        sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v10);
      }
      else
      {
        v6 = *(_QWORD **)(a1 + 8);
        v7 = v12;
        v8 = v13 >> 2;
        v6[1] = 0;
        v6[2] = 0;
        v9 = v6[3];
        if (v9)
        {
          MEMORY[0x22E2B0780](v9, 0x1000C8052888210);
          v6[3] = 0;
        }
        v6[1] = v8;
        v6[2] = v7;
        *(_OWORD *)(a1 + 16) = v11;
      }
    }
  }
}

void sub_22844C400(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)va);
  _Unwind_Resume(a1);
}

sentencepiece::normalizer::Normalizer *sentencepiece::normalizer::Normalizer::Normalizer(sentencepiece::normalizer::Normalizer *this, const sentencepiece::NormalizerSpec *a2)
{
  unint64_t v4;
  unint64_t v5;

  *(_QWORD *)this = &off_24F0FD5F8;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = (char *)a2 + 16;
  *((_QWORD *)this + 5) = 0;
  *((_BYTE *)this + 48) = 0;
  sentencepiece::util::Status::Status((_QWORD *)this + 7);
  v4 = *((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v4 + 23) < 0)
  {
    v4 = *(_QWORD *)v4;
    v5 = *(_QWORD *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    v5 = *(unsigned __int8 *)(v4 + 23);
  }
  sentencepiece::normalizer::Normalizer::Init((uint64_t)this, (unsigned int *)v4, v5);
  return this;
}

void sub_22844C49C(_Unwind_Exception *a1)
{
  sentencepiece::util::Status *v1;
  uint64_t *v2;
  uint64_t v4;

  sentencepiece::util::Status::~Status(v1);
  v4 = *v2;
  *v2 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::normalizer::Normalizer::Normalizer(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  uint64_t *v7;
  _DWORD *v8;
  _DWORD *v10;
  int v11;

  *(_QWORD *)a1 = &off_24F0FD5F8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 40) = 0;
  v7 = (uint64_t *)(a1 + 56);
  *(_BYTE *)(a1 + 48) = 0;
  sentencepiece::util::Status::Status((_QWORD *)(a1 + 56));
  v11 = 0;
  sentencepiece::mmap_util::DecodePrefix<unsigned int>(a3, a4, &v11, &v10);
  sentencepiece::util::Status::operator=(v7, &v10);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v10);
  (*(void (**)(_DWORD **__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(&v10, a1);
  v8 = v10;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v10);
  if (!v8)
  {
    *(_BYTE *)(a1 + 48) = v11 != 0;
    sentencepiece::normalizer::Normalizer::Init(a1, a3 + 1, a4 - 4);
  }
  return a1;
}

void sub_22844C5B0(_Unwind_Exception *a1)
{
  sentencepiece::util::Status *v1;
  uint64_t *v2;
  uint64_t v4;

  sentencepiece::util::Status::~Status(v1);
  v4 = *v2;
  *v2 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

void sentencepiece::normalizer::Normalizer::~Normalizer(sentencepiece::normalizer::Normalizer *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F0FD5F8;
  sentencepiece::util::Status::~Status((sentencepiece::normalizer::Normalizer *)((char *)this + 56));
  v2 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24F0FD5F8;
  sentencepiece::util::Status::~Status((sentencepiece::normalizer::Normalizer *)((char *)this + 56));
  v2 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24F0FD5F8;
  sentencepiece::util::Status::~Status((sentencepiece::normalizer::Normalizer *)((char *)this + 56));
  v2 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x22E2B07A4);
}

_QWORD *sentencepiece::normalizer::Normalizer::DecodePrecompiledCharsMap@<X0>(unsigned int *a1@<X0>, unint64_t a2@<X1>, unsigned int **a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  unsigned int *v7;
  unsigned int *v8;
  const char *v10;
  uint64_t v11;

  if (a2 < 5 || (v7 = (unsigned int *)*a1, a2 <= (unint64_t)v7))
  {
    v10 = "Blob for normalization rule is broken.";
    v11 = 38;
  }
  else
  {
    if ((unint64_t)(v7 + 1) < a2)
    {
      v8 = a1 + 1;
      *a3 = v8;
      a3[1] = v7;
      *a4 = (char *)v7 + (_QWORD)v8;
      a4[1] = a2 - (_QWORD)v7 - 4;
      return sentencepiece::util::Status::Status(a5);
    }
    v10 = "Trie data size exceeds the input blob size.";
    v11 = 43;
  }
  return (_QWORD *)sentencepiece::util::Status::Status(a5, 13, v10, v11);
}

_QWORD *sentencepiece::normalizer::Normalizer::Normalize@<X0>(uint64_t a1@<X0>, sentencepiece::string_util *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, sentencepiece::util::Status *a6@<X8>)
{
  unint64_t v6;
  _QWORD *result;
  unint64_t *v11;
  sentencepiece::util::Status *v12;
  unint64_t *v13;
  int v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  std::string::size_type i;
  void **v21;
  uint64_t v22;
  char *v23;
  char *v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  void **v34;
  uint64_t v35;
  char *v36;
  char *v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  int v47;
  size_t v48;
  const char *v49;
  std::string *v50;
  std::string::size_type v51;
  std::string *v52;
  std::string::size_type size;
  BOOL v54;
  std::string::size_type v55;
  void **v56;
  uint64_t v57;
  char *v58;
  char *v59;
  _QWORD *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  std::string::size_type v71;
  _QWORD *v72;
  sentencepiece::util::Status *v73;
  sentencepiece::string_util *v74;
  unint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  void *__p;
  char v80;
  uint64_t v81;
  _QWORD v82[5];
  const std::string::value_type *v83;
  std::string::size_type v84;
  int v85;
  void **v86;
  std::string *v87;

  v6 = a3;
  v86 = (void **)a5;
  v87 = (std::string *)a4;
  *(_QWORD *)(a5 + 8) = *(_QWORD *)a5;
  if (*(char *)(a4 + 23) < 0)
  {
    **(_BYTE **)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    if (a3)
      goto LABEL_3;
    return sentencepiece::util::Status::Status(a6);
  }
  *(_BYTE *)a4 = 0;
  *(_BYTE *)(a4 + 23) = 0;
  if (!a3)
    return sentencepiece::util::Status::Status(a6);
LABEL_3:
  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (*(_QWORD *)a6)
    return result;
  sentencepiece::util::Status::~Status(a6);
  v85 = 0;
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32)))
  {
    do
    {
      sentencepiece::normalizer::Normalizer::NormalizePrefix(a2, a1, v6, v11, (uint64_t)&v76);
      if (v77 != 1 || *v76 != 32)
        goto LABEL_11;
      a2 = (sentencepiece::string_util *)((char *)a2 + (int)v78);
      v85 += v78;
      v6 -= (int)v78;
    }
    while (v6);
    v12 = a6;
    return sentencepiece::util::Status::Status(v12);
  }
LABEL_11:
  v73 = a6;
  std::string::reserve(v87, 3 * v6);
  std::vector<unsigned long>::reserve(v86, 3 * v6);
  v83 = "▁";
  v84 = 3;
  v82[0] = a1;
  v82[1] = &v85;
  v82[2] = &v87;
  v82[3] = &v86;
  v82[4] = &v83;
  if (!*(_BYTE *)(a1 + 48)
    && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32)))
  {
    sentencepiece::normalizer::Normalizer::Normalize(std::string_view,std::string *,std::vector<unsigned long> *)const::$_0::operator()((uint64_t)v82);
  }
  v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
  do
  {
    sentencepiece::normalizer::Normalizer::NormalizePrefix(a2, a1, v6, v13, (uint64_t)&v76);
    v15 = v76;
    v16 = v77;
    if ((v14 & 1) != 0)
    {
      if (!v77)
        goto LABEL_64;
      while (*v15 == 32)
      {
        ++v15;
        if (!--v16)
          goto LABEL_64;
      }
    }
    else if (!v77)
    {
      v14 = 0;
      goto LABEL_64;
    }
    v74 = a2;
    v75 = v6;
    v17 = 0;
    do
    {
      v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
      v19 = v15[v17];
      if (v18 && v19 == 32)
      {
        std::string::append(v87, v83, v84);
        if (v84)
        {
          for (i = 0; i < v84; ++i)
          {
            v21 = v86;
            v22 = v85;
            v23 = (char *)v86[1];
            v24 = (char *)v86[2];
            if (v23 >= v24)
            {
              v26 = (char *)*v86;
              v27 = (v23 - (_BYTE *)*v86) >> 3;
              v28 = v27 + 1;
              if ((unint64_t)(v27 + 1) >> 61)
                goto LABEL_114;
              v29 = v24 - v26;
              if (v29 >> 2 > v28)
                v28 = v29 >> 2;
              if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
                v30 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v30 = v28;
              if (v30)
              {
                v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v86 + 2), v30);
                v26 = (char *)*v21;
                v23 = (char *)v21[1];
              }
              else
              {
                v31 = 0;
              }
              v32 = &v31[8 * v27];
              *(_QWORD *)v32 = v22;
              v25 = v32 + 8;
              while (v23 != v26)
              {
                v33 = *((_QWORD *)v23 - 1);
                v23 -= 8;
                *((_QWORD *)v32 - 1) = v33;
                v32 -= 8;
              }
              *v21 = v32;
              v21[1] = v25;
              v21[2] = &v31[8 * v30];
              if (v26)
                operator delete(v26);
            }
            else
            {
              *(_QWORD *)v23 = v85;
              v25 = v23 + 8;
            }
            v21[1] = v25;
          }
        }
      }
      else
      {
        std::string::push_back(v87, v19);
        v34 = v86;
        v35 = v85;
        v36 = (char *)v86[1];
        v37 = (char *)v86[2];
        if (v36 >= v37)
        {
          v39 = (char *)*v86;
          v40 = (v36 - (_BYTE *)*v86) >> 3;
          v41 = v40 + 1;
          if ((unint64_t)(v40 + 1) >> 61)
LABEL_114:
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v42 = v37 - v39;
          if (v42 >> 2 > v41)
            v41 = v42 >> 2;
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
            v43 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v43 = v41;
          if (v43)
          {
            v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v86 + 2), v43);
            v39 = (char *)*v34;
            v36 = (char *)v34[1];
          }
          else
          {
            v44 = 0;
          }
          v45 = &v44[8 * v40];
          *(_QWORD *)v45 = v35;
          v38 = v45 + 8;
          while (v36 != v39)
          {
            v46 = *((_QWORD *)v36 - 1);
            v36 -= 8;
            *((_QWORD *)v45 - 1) = v46;
            v45 -= 8;
          }
          *v34 = v45;
          v34[1] = v38;
          v34[2] = &v44[8 * v43];
          if (v39)
            operator delete(v39);
        }
        else
        {
          *(_QWORD *)v36 = v85;
          v38 = v36 + 8;
        }
        v34[1] = v38;
      }
      ++v17;
    }
    while (v17 != v16);
    v14 = v15[v16 - 1] == 32;
    a2 = v74;
    v6 = v75;
LABEL_64:
    v85 += v78;
    a2 = (sentencepiece::string_util *)((char *)a2 + (int)v78);
    v6 -= (int)v78;
    v14 &= (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
  }
  while (v6);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32)))
  {
    v47 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
    if (v47)
      v48 = v84;
    else
      v48 = 1;
    if (v47)
      v49 = v83;
    else
      v49 = " ";
    while (1)
    {
      v50 = v87;
      LODWORD(v51) = HIBYTE(v87->__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v87->__r_.__value_.__r.__words[2]) < 0)
      {
        v52 = (std::string *)v87->__r_.__value_.__r.__words[0];
        size = v87->__r_.__value_.__l.__size_;
        if (!v48)
          goto LABEL_79;
      }
      else
      {
        v52 = v87;
        size = HIBYTE(v87->__r_.__value_.__r.__words[2]);
        if (!v48)
          goto LABEL_79;
      }
      v54 = size >= v48;
      v55 = size - v48;
      if (!v54 || memcmp((char *)v52 + v55, v49, v48))
        break;
LABEL_79:
      if ((v51 & 0x80) != 0)
        v51 = v50->__r_.__value_.__l.__size_;
      if ((_DWORD)v51 - (_DWORD)v48 < 0)
      {
        LODWORD(v76) = 13;
        v67 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v77);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/normalizer.cc", 69);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"(length) >= (0)", 15);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"] ", 2);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v76, (uint64_t)v73);
        goto LABEL_110;
      }
      v85 = *((_QWORD *)*v86 + (v51 - v48));
      std::string::resize(v50, (v51 - v48), 0);
      std::vector<unsigned long>::resize((uint64_t)v86, (v51 - v48));
    }
  }
  if (*(_BYTE *)(a1 + 48)
    && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32)))
  {
    sentencepiece::normalizer::Normalizer::Normalize(std::string_view,std::string *,std::vector<unsigned long> *)const::$_0::operator()((uint64_t)v82);
  }
  v56 = v86;
  v57 = v85;
  v58 = (char *)v86[1];
  v59 = (char *)v86[2];
  if (v58 >= v59)
  {
    v61 = (char *)*v86;
    v62 = (v58 - (_BYTE *)*v86) >> 3;
    v63 = v62 + 1;
    if ((unint64_t)(v62 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v64 = v59 - v61;
    if (v64 >> 2 > v63)
      v63 = v64 >> 2;
    if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
      v65 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v65 = v63;
    if (v65)
    {
      v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v86 + 2), v65);
      v61 = (char *)*v56;
      v58 = (char *)v56[1];
    }
    else
    {
      v66 = 0;
    }
    v68 = &v66[8 * v62];
    v69 = &v66[8 * v65];
    *(_QWORD *)v68 = v57;
    v60 = v68 + 8;
    while (v58 != v61)
    {
      v70 = *((_QWORD *)v58 - 1);
      v58 -= 8;
      *((_QWORD *)v68 - 1) = v70;
      v68 -= 8;
    }
    *v56 = v68;
    v56[1] = v60;
    v56[2] = v69;
    if (v61)
      operator delete(v61);
  }
  else
  {
    *(_QWORD *)v58 = v85;
    v60 = v58 + 8;
  }
  v56[1] = v60;
  if (SHIBYTE(v87->__r_.__value_.__r.__words[2]) < 0)
    v71 = v87->__r_.__value_.__l.__size_;
  else
    v71 = HIBYTE(v87->__r_.__value_.__r.__words[2]);
  if (((_BYTE *)v86[1] - (_BYTE *)*v86) >> 3 == v71 + 1)
  {
    v12 = v73;
    return sentencepiece::util::Status::Status(v12);
  }
  LODWORD(v76) = 13;
  v72 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v77);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/normalizer.cc", 69);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"(", 1);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)") [", 3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"(norm_to_orig->size()) == (normalized->size() + 1)", 50);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"] ", 2);
  sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v76, (uint64_t)v73);
LABEL_110:
  v77 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&v77 + *(_QWORD *)(v77 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v78 = MEMORY[0x24BEDB848] + 16;
  if (v80 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (_QWORD *)MEMORY[0x22E2B0750](&v81);
}

void sub_22844CEE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)va);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::normalizer::Normalizer::NormalizePrefix@<X0>(sentencepiece::string_util *this@<X1>, uint64_t result@<X0>, unint64_t a3@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  char *v19;
  unint64_t v20;
  int v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  char v27[8];
  _QWORD v28[64];

  v28[63] = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v7 = (char *)this;
    v8 = result;
    v9 = *(_QWORD *)(result + 40);
    if (v9
      && (v27[0] = 0, result = sentencepiece::normalizer::PrefixMatcher::PrefixMatch(v9, this, a3, (BOOL *)v27), v27[0]))
    {
      v10 = (int)result;
      if (a3 < (int)result)
        v10 = a3;
      *(_QWORD *)a5 = v7;
      *(_QWORD *)(a5 + 8) = v10;
      *(_DWORD *)(a5 + 16) = result;
    }
    else
    {
      v11 = *(_QWORD *)(v8 + 8);
      if (!v11)
        goto LABEL_24;
      v12 = 0;
      v13 = 0;
      v14 = *(_DWORD **)(v11 + 16);
      v15 = (*v14 >> 10 << ((*v14 >> 6) & 8));
      do
      {
        v16 = v7[v12];
        v17 = v15 ^ v16;
        v18 = v14[v17];
        if ((v18 & 0x800000FF) != (_DWORD)v16)
          break;
        v15 = v17 ^ (v18 >> 10 << ((v18 >> 6) & 8));
        if ((v18 & 0x100) != 0)
        {
          if (v13 <= 0x1F)
          {
            v19 = &v27[16 * v13];
            *(_DWORD *)v19 = v14[v15] & 0x7FFFFFFF;
            *((_QWORD *)v19 + 1) = v12 + 1;
          }
          ++v13;
        }
        ++v12;
      }
      while (a3 != v12);
      if (!v13)
        goto LABEL_24;
      v20 = 0;
      v21 = 0;
      v22 = v28;
      v23 = v28;
      do
      {
        v25 = *v23;
        v23 += 2;
        v24 = v25;
        if (!v20 || v24 > v20)
        {
          v21 = *((_DWORD *)v22 - 2);
          v20 = v24;
        }
        v22 = v23;
        --v13;
      }
      while (v13);
      if (v20)
      {
        v7 = (char *)(*(_QWORD *)(v8 + 16) + v21);
        result = strlen(v7);
      }
      else
      {
LABEL_24:
        *(_QWORD *)v27 = 0;
        v26 = sentencepiece::string_util::DecodeUTF8((sentencepiece::string_util *)v7, &v7[a3], v27, a4) != 65533
           || *(_QWORD *)v27 == 3;
        if (v26)
          LODWORD(v20) = *(_DWORD *)v27;
        else
          LODWORD(v20) = 1;
        if (v26)
          result = *(int *)v27;
        else
          result = 3;
        if (!v26)
          v7 = (char *)&sentencepiece::normalizer::Normalizer::NormalizePrefix(std::string_view)const::kReplacementChar;
      }
      *(_QWORD *)a5 = v7;
      *(_QWORD *)(a5 + 8) = result;
      *(_DWORD *)(a5 + 16) = v20;
    }
  }
  else
  {
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_DWORD *)(a5 + 16) = 0;
  }
  return result;
}

void std::vector<unsigned long>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void sentencepiece::normalizer::Normalizer::Normalize(std::string_view,std::string *,std::vector<unsigned long> *)const::$_0::operator()(uint64_t a1)
{
  int v2;
  std::string *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a1 + 32) + 32))(*(_QWORD *)(*(_QWORD *)a1 + 32));
  v3 = **(std::string ***)(a1 + 16);
  if (v2)
  {
    std::string::append(v3, **(const std::string::value_type ***)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
    if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8))
    {
      v4 = 0;
      do
      {
        v5 = **(_QWORD **)(a1 + 24);
        v6 = **(int **)(a1 + 8);
        v7 = *(_QWORD **)(v5 + 8);
        v8 = *(_QWORD *)(v5 + 16);
        if ((unint64_t)v7 >= v8)
        {
          v10 = *(_QWORD **)v5;
          v11 = ((uint64_t)v7 - *(_QWORD *)v5) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            goto LABEL_40;
          v13 = v8 - (_QWORD)v10;
          if (v13 >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5 + 16, v14);
            v10 = *(_QWORD **)v5;
            v7 = *(_QWORD **)(v5 + 8);
          }
          else
          {
            v15 = 0;
          }
          v16 = &v15[8 * v11];
          *(_QWORD *)v16 = v6;
          v9 = v16 + 8;
          while (v7 != v10)
          {
            v17 = *--v7;
            *((_QWORD *)v16 - 1) = v17;
            v16 -= 8;
          }
          *(_QWORD *)v5 = v16;
          *(_QWORD *)(v5 + 8) = v9;
          *(_QWORD *)(v5 + 16) = &v15[8 * v14];
          if (v10)
            operator delete(v10);
        }
        else
        {
          *v7 = v6;
          v9 = v7 + 1;
        }
        *(_QWORD *)(v5 + 8) = v9;
        ++v4;
      }
      while (v4 < *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
    }
  }
  else
  {
    std::string::append(v3, " ");
    v18 = **(_QWORD **)(a1 + 24);
    v19 = **(int **)(a1 + 8);
    v20 = *(_QWORD **)(v18 + 8);
    v21 = *(_QWORD *)(v18 + 16);
    if ((unint64_t)v20 >= v21)
    {
      v23 = *(_QWORD **)v18;
      v24 = ((uint64_t)v20 - *(_QWORD *)v18) >> 3;
      v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 61)
LABEL_40:
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v26 = v21 - (_QWORD)v23;
      if (v26 >> 2 > v25)
        v25 = v26 >> 2;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
        v27 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v27 = v25;
      if (v27)
      {
        v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v18 + 16, v27);
        v23 = *(_QWORD **)v18;
        v20 = *(_QWORD **)(v18 + 8);
      }
      else
      {
        v28 = 0;
      }
      v29 = &v28[8 * v24];
      v30 = &v28[8 * v27];
      *(_QWORD *)v29 = v19;
      v22 = v29 + 8;
      while (v20 != v23)
      {
        v31 = *--v20;
        *((_QWORD *)v29 - 1) = v31;
        v29 -= 8;
      }
      *(_QWORD *)v18 = v29;
      *(_QWORD *)(v18 + 8) = v22;
      *(_QWORD *)(v18 + 16) = v30;
      if (v23)
        operator delete(v23);
    }
    else
    {
      *v20 = v19;
      v22 = v20 + 1;
    }
    *(_QWORD *)(v18 + 8) = v22;
  }
}

void std::vector<unsigned long>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<unsigned long>::__append((char **)a1, a2 - v2);
  }
}

void sentencepiece::normalizer::Normalizer::Normalize(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  void *__p;
  void *v4;
  uint64_t v5;

  __p = 0;
  v4 = 0;
  v5 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 32))(&v2);
  DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
  if (__p)
  {
    v4 = __p;
    operator delete(__p);
  }
}

void sub_22844D42C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&a9);
  if (*(char *)(v11 + 23) < 0)
    operator delete(*(void **)v11);
  if (__p)
  {
    a11 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::normalizer::PrefixMatcher::PrefixMatch(uint64_t a1, _BYTE *a2, uint64_t a3, BOOL *a4)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _BYTE *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _BYTE *v16;
  uint64_t result;
  int *v18;
  unsigned int v19;
  int v20;
  int v21;
  _BYTE v22[1024];
  _QWORD v23[128];

  v23[127] = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)a1)
  {
    if (a4)
      *a4 = 0;
    goto LABEL_33;
  }
  v4 = *(_DWORD **)(*(_QWORD *)a1 + 16);
  v5 = (*v4 >> 10 << ((*v4 >> 6) & 8));
  if (a3)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = a2[v6];
      v9 = v5 ^ v8;
      v10 = v4[v9];
      if ((v10 & 0x800000FF) != (_DWORD)v8)
        break;
      v5 = v9 ^ (v10 >> 10 << ((v10 >> 6) & 8));
      if ((v10 & 0x100) != 0)
      {
        if (v7 <= 0x3F)
        {
          v11 = &v22[16 * v7];
          *(_DWORD *)v11 = v4[v5] & 0x7FFFFFFF;
          *((_QWORD *)v11 + 1) = v6 + 1;
        }
        ++v7;
      }
      ++v6;
    }
    while (a3 != v6);
  }
  else
  {
    v12 = *a2;
    if (*a2)
    {
      v7 = 0;
      v13 = 1;
      do
      {
        v14 = v5 ^ v12;
        v15 = v4[v14];
        if ((v15 & 0x800000FF) != v12)
          break;
        v5 = v14 ^ (v15 >> 10 << ((v15 >> 6) & 8));
        if ((v15 & 0x100) != 0)
        {
          if (v7 <= 0x3F)
          {
            v16 = &v22[16 * v7];
            *(_DWORD *)v16 = v4[v5] & 0x7FFFFFFF;
            *((_QWORD *)v16 + 1) = v13;
          }
          ++v7;
        }
        v12 = a2[v13++];
      }
      while (v12);
    }
    else
    {
      LODWORD(v7) = 0;
    }
  }
  if (a4)
    *a4 = (int)v7 > 0;
  if (!(_DWORD)v7)
  {
LABEL_33:
    v21 = asc_2284E2628[(unint64_t)*a2 >> 4];
    if (v21 >= (int)a3)
      return a3;
    else
      return v21;
  }
  if ((int)v7 < 1)
    return 0;
  LODWORD(result) = 0;
  v7 = v7;
  v18 = (int *)v23;
  do
  {
    v20 = *v18;
    v18 += 4;
    v19 = v20;
    if ((int)result <= v20)
      result = v19;
    else
      result = result;
    --v7;
  }
  while (v7);
  return result;
}

void sentencepiece::normalizer::Normalizer::MemoryMappableString(sentencepiece::normalizer::Normalizer *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  _DWORD *v5;
  uint64_t v6;
  const std::string::value_type *v7;
  uint64_t v8;
  std::string::size_type v9;
  std::string *v10;
  std::string *v11;
  std::string::size_type size;
  std::string v13;

  v4 = *((unsigned __int8 *)this + 48);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  std::string::resize((std::string *)a2, 4uLL, 0);
  if (*(char *)(a2 + 23) >= 0)
    v5 = (_DWORD *)a2;
  else
    v5 = *(_DWORD **)a2;
  *v5 = v4;
  v6 = *((_QWORD *)this + 1);
  if (v6)
  {
    v8 = *(_QWORD *)(v6 + 8);
    v7 = *(const std::string::value_type **)(v6 + 16);
    memset(&v13, 0, sizeof(v13));
    std::string::resize(&v13, 4uLL, 0);
    v9 = 4 * v8;
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v13;
    else
      v10 = (std::string *)v13.__r_.__value_.__r.__words[0];
    LODWORD(v10->__r_.__value_.__l.__data_) = v9;
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v13;
    else
      v11 = (std::string *)v13.__r_.__value_.__r.__words[0];
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
    else
      size = v13.__r_.__value_.__l.__size_;
    std::string::append((std::string *)a2, (const std::string::value_type *)v11, size);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
    std::string::append((std::string *)a2, v7, v9);
    std::string::append((std::string *)a2, *((const std::string::value_type **)this + 2), *((_QWORD *)this + 3));
  }
}

void sub_22844D728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

std::string *sentencepiece::normalizer::Normalizer::EncodePrecompiledCharsMap@<X0>(const std::string::value_type *a1@<X0>, std::string::size_type a2@<X1>, const std::string::value_type *a3@<X2>, std::string::size_type a4@<X3>, std::string *a5@<X8>)
{
  std::string *v10;
  std::string *v11;
  std::string::size_type size;
  std::string v14;

  a5->__r_.__value_.__r.__words[0] = 0;
  a5->__r_.__value_.__l.__size_ = 0;
  a5->__r_.__value_.__r.__words[2] = 0;
  memset(&v14, 0, sizeof(v14));
  std::string::resize(&v14, 4uLL, 0);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &v14;
  else
    v10 = (std::string *)v14.__r_.__value_.__r.__words[0];
  LODWORD(v10->__r_.__value_.__l.__data_) = a2;
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v14;
  else
    v11 = (std::string *)v14.__r_.__value_.__r.__words[0];
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  else
    size = v14.__r_.__value_.__l.__size_;
  std::string::append(a5, (const std::string::value_type *)v11, size);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  std::string::append(a5, a1, a2);
  return std::string::append(a5, a3, a4);
}

void sub_22844D830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

_QWORD *sentencepiece::normalizer::PrefixMatcher::PrefixMatcher(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  char v28;
  void *__p;
  char *v30;
  char *v31;

  *a1 = 0;
  v4 = a2[2];
  if (v4)
  {
    __p = 0;
    v30 = 0;
    v31 = 0;
    std::vector<char const*>::reserve(&__p, v4);
    v7 = (_QWORD *)*a2;
    v5 = a2 + 1;
    v6 = v7;
    if (v7 != v5)
    {
      v8 = v30;
      do
      {
        v9 = v6[4];
        if (v8 >= v31)
        {
          v10 = (v8 - (_BYTE *)__p) >> 3;
          if ((unint64_t)(v10 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v11 = (v31 - (_BYTE *)__p) >> 2;
          if (v11 <= v10 + 1)
            v11 = v10 + 1;
          if ((unint64_t)(v31 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
            v12 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v12 = v11;
          if (v12)
            v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v31, v12);
          else
            v13 = 0;
          v14 = &v13[8 * v10];
          *(_QWORD *)v14 = v9;
          v8 = v14 + 8;
          v16 = (char *)__p;
          v15 = v30;
          if (v30 != __p)
          {
            do
            {
              v17 = *((_QWORD *)v15 - 1);
              v15 -= 8;
              *((_QWORD *)v14 - 1) = v17;
              v14 -= 8;
            }
            while (v15 != v16);
            v15 = (char *)__p;
          }
          __p = v14;
          v30 = v8;
          v31 = &v13[8 * v12];
          if (v15)
            operator delete(v15);
        }
        else
        {
          *(_QWORD *)v8 = v9;
          v8 += 8;
        }
        v30 = v8;
        v18 = (_QWORD *)v6[1];
        if (v18)
        {
          do
          {
            v19 = v18;
            v18 = (_QWORD *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            v19 = (_QWORD *)v6[2];
            v20 = *v19 == (_QWORD)v6;
            v6 = v19;
          }
          while (!v20);
        }
        v6 = v19;
      }
      while (v19 != v5);
    }
    v21 = (_QWORD *)operator new();
    *v21 = &off_24F0FD588;
    v21[1] = 0;
    v21[2] = 0;
    v21[3] = 0;
    v22 = (_QWORD *)*a1;
    *a1 = v21;
    if (v22)
    {
      (*(void (**)(_QWORD *))(*v22 + 8))(v22);
      v21 = (_QWORD *)*a1;
    }
    if (Darts::DoubleArrayImpl<void,void,int,void>::build(v21, (v30 - (_BYTE *)__p) >> 3, (unint64_t)__p, 0, 0, 0))
    {
      v28 = 1;
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"normalizer.cc", 13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"(", 1);
      v24 = (_QWORD *)std::ostream::operator<<();
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)") [", 3);
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"(0) == (trie_->build(key.size(), const_cast<char **>(&key[0]), nullptr, nullptr))", 81);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"] ", 2);
      sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v28);
    }
    if (__p)
    {
      v30 = (char *)__p;
      operator delete(__p);
    }
  }
  return a1;
}

void sub_22844DAB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, void *__p, uint64_t a14)
{
  uint64_t *v14;
  uint64_t v16;

  if (__p)
    operator delete(__p);
  v16 = *v14;
  *v14 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  _Unwind_Resume(exception_object);
}

void std::vector<char const*>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

_QWORD *sentencepiece::normalizer::PrefixMatcher::PrefixMatcher(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;

  *a1 = 0;
  if (a3)
  {
    v6 = (_QWORD *)operator new();
    *v6 = &off_24F0FD588;
    v6[1] = 0;
    v6[2] = 0;
    v6[3] = 0;
    v7 = (_QWORD *)*a1;
    *a1 = v6;
    if (v7)
      (*(void (**)(_QWORD *))(*v7 + 8))(v7);
    if ((a3 & 3) == 0)
    {
      v8 = (_QWORD *)*a1;
      v9 = a3 >> 2;
      v8[1] = 0;
      v8[2] = 0;
      v10 = v8[3];
      if (v10)
      {
        MEMORY[0x22E2B0780](v10, 0x1000C8052888210);
        v8[3] = 0;
      }
      v8[1] = v9;
      v8[2] = a2;
    }
  }
  return a1;
}

void sub_22844DC54(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

std::string *sentencepiece::normalizer::PrefixMatcher::GlobalReplace@<X0>(std::string *result@<X0>, std::string::value_type *a2@<X1>, uint64_t a3@<X2>, const std::string::value_type *a4@<X3>, std::string::size_type a5@<X4>, std::string *a6@<X8>)
{
  uint64_t v8;
  uint64_t v10;
  int v12;
  uint64_t v13;
  BOOL v14;

  a6->__r_.__value_.__r.__words[0] = 0;
  a6->__r_.__value_.__l.__size_ = 0;
  a6->__r_.__value_.__r.__words[2] = 0;
  if (a3)
  {
    v8 = a3;
    v10 = (uint64_t)result;
    do
    {
      v14 = 0;
      v12 = sentencepiece::normalizer::PrefixMatcher::PrefixMatch(v10, a2, v8, &v14);
      LODWORD(v13) = v12;
      if (v14)
      {
        result = std::string::append(a6, a4, a5);
        v13 = (int)v13;
      }
      else
      {
        v13 = v12;
        result = std::string::append(a6, a2, v12);
      }
      a2 += v13;
      v8 -= v13;
    }
    while (v8);
  }
  return result;
}

void sub_22844DD34(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sentencepiece::normalizer::PrefixMatcher::MemoryMappableString@<X0>(sentencepiece::normalizer::PrefixMatcher *this@<X0>, _QWORD *a2@<X8>)
{
  if (*(_QWORD *)this)
    return std::string::basic_string[abi:ne180100](a2, *(void **)(*(_QWORD *)this + 16), 4 * *(_QWORD *)(*(_QWORD *)this + 8));
  else
    return std::string::basic_string[abi:ne180100]<0>(a2, "");
}

uint64_t sentencepiece::normalizer::Normalizer::SetPrefixMatcher(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = a2;
  return result;
}

uint64_t sentencepiece::normalizer::Normalizer::status@<X0>(sentencepiece::normalizer::Normalizer *this@<X0>, sentencepiece::util::Status *a2@<X8>)
{
  return sentencepiece::util::Status::Status(a2, (sentencepiece::normalizer::Normalizer *)((char *)this + 56));
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

void std::vector<unsigned long>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void sentencepiece::ModelFactory::Create(sentencepiece::ModelFactory *this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  sentencepiece::unigram::Model *v11;

  if (*((_QWORD *)this + 10))
    v4 = (_DWORD *)*((_QWORD *)this + 10);
  else
    v4 = &sentencepiece::_TrainerSpec_default_instance_;
  switch(v4[68])
  {
    case 1:
      absl::make_unique<sentencepiece::unigram::Model,sentencepiece::ModelProto const&>(this, &v11);
      goto LABEL_12;
    case 2:
      absl::make_unique<sentencepiece::bpe::Model,sentencepiece::ModelProto const&>(this, &v11);
      goto LABEL_12;
    case 3:
      absl::make_unique<sentencepiece::word::Model,sentencepiece::ModelProto const&>(this, &v11);
      goto LABEL_12;
    case 4:
      absl::make_unique<sentencepiece::character::Model,sentencepiece::ModelProto const&>(this, &v11);
LABEL_12:
      *a2 = v11;
      break;
    default:
      if ((int)sentencepiece::logging::GetMinLogLevel(this) <= 2)
      {
        LOBYTE(v11) = 0;
        v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"model_factory.cc", 16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(", 1);
        v6 = (_QWORD *)std::ostream::operator<<();
        v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)") ", 2);
        v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"LOG(", 4);
        v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"ERROR", 5);
        v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)") ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Unknown model_type: ", 20);
        std::ostream::operator<<();
        sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v11);
      }
      *a2 = 0;
      break;
  }
}

void sub_22844E078(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)va);
  _Unwind_Resume(a1);
}

uint64_t absl::make_unique<sentencepiece::unigram::Model,sentencepiece::ModelProto const&>@<X0>(const sentencepiece::ModelProto *a1@<X0>, sentencepiece::unigram::Model **a2@<X8>)
{
  sentencepiece::unigram::Model *v4;
  uint64_t result;

  v4 = (sentencepiece::unigram::Model *)operator new();
  result = sentencepiece::unigram::Model::Model(v4, a1);
  *a2 = v4;
  return result;
}

void sub_22844E0DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2B07A4](v1, 0x10E1C404363080ALL);
  _Unwind_Resume(a1);
}

uint64_t absl::make_unique<sentencepiece::bpe::Model,sentencepiece::ModelProto const&>@<X0>(const sentencepiece::ModelProto *a1@<X0>, sentencepiece::bpe::Model **a2@<X8>)
{
  sentencepiece::bpe::Model *v4;
  uint64_t result;

  v4 = (sentencepiece::bpe::Model *)operator new();
  result = sentencepiece::bpe::Model::Model(v4, a1);
  *a2 = v4;
  return result;
}

void sub_22844E150(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2B07A4](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

uint64_t absl::make_unique<sentencepiece::word::Model,sentencepiece::ModelProto const&>@<X0>(const sentencepiece::ModelProto *a1@<X0>, sentencepiece::word::Model **a2@<X8>)
{
  sentencepiece::word::Model *v4;
  uint64_t result;

  v4 = (sentencepiece::word::Model *)operator new();
  result = sentencepiece::word::Model::Model(v4, a1);
  *a2 = v4;
  return result;
}

void sub_22844E1C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2B07A4](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

uint64_t absl::make_unique<sentencepiece::character::Model,sentencepiece::ModelProto const&>@<X0>(const sentencepiece::ModelProto *a1@<X0>, sentencepiece::character::Model **a2@<X8>)
{
  sentencepiece::character::Model *v4;
  uint64_t result;

  v4 = (sentencepiece::character::Model *)operator new();
  result = sentencepiece::character::Model::Model(v4, a1);
  *a2 = v4;
  return result;
}

void sub_22844E238(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2B07A4](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

void sentencepiece::ModelFactory::Create(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  sentencepiece::logging *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v14[2];

  v14[0] = a2;
  v14[1] = a3;
  v6 = (sentencepiece::logging *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  if ((_DWORD)v6 == 1)
  {
    absl::make_unique<sentencepiece::bpe::Model,sentencepiece::MemoryMappedModelProto const&,std::string_view &>(a1, (uint64_t)v14, &v13);
    goto LABEL_5;
  }
  if (!(_DWORD)v6)
  {
    absl::make_unique<sentencepiece::unigram::Model,sentencepiece::MemoryMappedModelProto const&,std::string_view &>(a1, v14, &v13);
LABEL_5:
    *a4 = v13;
    return;
  }
  if ((int)sentencepiece::logging::GetMinLogLevel(v6) <= 2)
  {
    LOBYTE(v13) = 0;
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"model_factory.cc", 16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"(", 1);
    v8 = (_QWORD *)std::ostream::operator<<();
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)") ", 2);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"LOG(", 4);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"ERROR", 5);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)") ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Unknown model_type: ", 20);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
    std::ostream::operator<<();
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v13);
  }
  *a4 = 0;
}

void sub_22844E394(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)va);
  _Unwind_Resume(a1);
}

uint64_t absl::make_unique<sentencepiece::unigram::Model,sentencepiece::MemoryMappedModelProto const&,std::string_view &>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = operator new();
  result = sentencepiece::unigram::Model::Model(v6, a1, *a2, a2[1]);
  *a3 = v6;
  return result;
}

void sub_22844E404(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2B07A4](v1, 0x10E1C404363080ALL);
  _Unwind_Resume(a1);
}

_QWORD *absl::make_unique<sentencepiece::bpe::Model,sentencepiece::MemoryMappedModelProto const&,std::string_view &>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  _QWORD *result;

  v6 = operator new();
  result = sentencepiece::bpe::Model::Model(v6, a1, *(_DWORD **)a2, *(_QWORD *)(a2 + 8));
  *a3 = v6;
  return result;
}

void sub_22844E480(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2B07A4](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

sentencepiece::ImmutableSentencePieceText *sentencepiece::ImmutableSentencePieceText::ImmutableSentencePieceText(sentencepiece::ImmutableSentencePieceText *this)
{
  void *v2;

  *(_QWORD *)this = &off_24F0FD650;
  v2 = sentencepiece::SentencePieceText::default_instance(this);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = v2;
  return this;
}

_QWORD *sentencepiece::ImmutableSentencePieceText::ImmutableSentencePieceText(_QWORD *result, uint64_t a2)
{
  *result = &off_24F0FD650;
  result[1] = a2;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void sentencepiece::ImmutableSentencePieceText::~ImmutableSentencePieceText(sentencepiece::ImmutableSentencePieceText *this)
{
  *(_QWORD *)this = &off_24F0FD650;
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
}

{
  *(_QWORD *)this = &off_24F0FD650;
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
}

{
  *(_QWORD *)this = &off_24F0FD650;
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  JUMPOUT(0x22E2B07A4);
}

sentencepiece::ImmutableSentencePieceText_ImmutableSentencePiece *sentencepiece::ImmutableSentencePieceText_ImmutableSentencePiece::ImmutableSentencePieceText_ImmutableSentencePiece(sentencepiece::ImmutableSentencePieceText_ImmutableSentencePiece *this)
{
  *(_QWORD *)this = sentencepiece::SentencePieceText_SentencePiece::default_instance(this);
  return this;
}

_QWORD *sentencepiece::ImmutableSentencePieceText_ImmutableSentencePiece::ImmutableSentencePieceText_ImmutableSentencePiece(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

unint64_t sentencepiece::ImmutableSentencePieceText_ImmutableSentencePiece::piece(sentencepiece::ImmutableSentencePieceText_ImmutableSentencePiece *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 48) & 0xFFFFFFFFFFFFFFFELL;
}

unint64_t sentencepiece::ImmutableSentencePieceText_ImmutableSentencePiece::surface(sentencepiece::ImmutableSentencePieceText_ImmutableSentencePiece *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 56) & 0xFFFFFFFFFFFFFFFELL;
}

uint64_t sentencepiece::ImmutableSentencePieceText_ImmutableSentencePiece::id(sentencepiece::ImmutableSentencePieceText_ImmutableSentencePiece *this)
{
  return *(unsigned int *)(*(_QWORD *)this + 64);
}

uint64_t sentencepiece::ImmutableSentencePieceText_ImmutableSentencePiece::begin(sentencepiece::ImmutableSentencePieceText_ImmutableSentencePiece *this)
{
  return *(unsigned int *)(*(_QWORD *)this + 68);
}

uint64_t sentencepiece::ImmutableSentencePieceText_ImmutableSentencePiece::end(sentencepiece::ImmutableSentencePieceText_ImmutableSentencePiece *this)
{
  return *(unsigned int *)(*(_QWORD *)this + 72);
}

uint64_t sentencepiece::ImmutableSentencePieceText::pieces@<X0>(sentencepiece::ImmutableSentencePieceText *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = (uint64_t)std::vector<sentencepiece::ImmutableSentencePieceText_ImmutableSentencePiece>::vector(a2, *(int *)(*((_QWORD *)this + 1) + 56));
  v5 = *((_QWORD *)this + 1);
  if (*(int *)(v5 + 56) >= 1)
  {
    v6 = 0;
    do
    {
      result = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>(v5 + 48, v6);
      *(_QWORD *)(*a2 + 8 * v6++) = result;
      v5 = *((_QWORD *)this + 1);
    }
    while (v6 < *(int *)(v5 + 56));
  }
  return result;
}

void sub_22844E678(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sentencepiece::ImmutableSentencePieceText::pieces_size(sentencepiece::ImmutableSentencePieceText *this)
{
  return *(int *)(*((_QWORD *)this + 1) + 56);
}

uint64_t sentencepiece::ImmutableSentencePieceText::pieces(sentencepiece::ImmutableSentencePieceText *this, int a2)
{
  return google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>(*((_QWORD *)this + 1) + 48, a2);
}

unint64_t sentencepiece::ImmutableSentencePieceText::text(sentencepiece::ImmutableSentencePieceText *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 72) & 0xFFFFFFFFFFFFFFFELL;
}

float sentencepiece::ImmutableSentencePieceText::score(sentencepiece::ImmutableSentencePieceText *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  if (v1)
    return *(float *)(v1 + 80);
  else
    return 0.0;
}

uint64_t sentencepiece::ImmutableSentencePieceText::mutable_proto(sentencepiece::ImmutableSentencePieceText *this)
{
  uint64_t result;
  char *v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v3 = (char *)this + 16;
  result = *((_QWORD *)this + 2);
  if (!result)
  {
    _ZNSt3__115allocate_sharedB8ne180100IN13sentencepiece17SentencePieceTextENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v7);
    std::shared_ptr<sentencepiece::SentencePieceText>::operator=[abi:ne180100]((uint64_t)v3, &v7);
    v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
    if (*((_QWORD *)&v7 + 1))
    {
      v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    result = *((_QWORD *)this + 2);
    *((_QWORD *)this + 1) = result;
  }
  return result;
}

uint64_t std::shared_ptr<sentencepiece::SentencePieceText>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void sentencepiece::ImmutableSentencePieceText::ConvertToUnicodeSpans(sentencepiece::ImmutableSentencePieceText *this)
{
  uint64_t v1;

  v1 = sentencepiece::ImmutableSentencePieceText::mutable_proto(this);
}

void sentencepiece::`anonymous namespace'::ConvertToUnicodeSpansInternal(uint64_t a1)
{
  unint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int *begin;
  int v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int32x2_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int32x2_t v21;
  int v22;
  int v23;
  std::vector<int>::value_type __x;
  std::vector<int> v25;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL;
    v3 = *(char *)(v2 + 23);
    if (v3 < 0)
    {
      if (!*(_QWORD *)(v2 + 8))
        return;
      v4 = *(_QWORD *)(v2 + 8);
    }
    else
    {
      v4 = *(unsigned __int8 *)(v2 + 23);
      if (!(_BYTE)v3)
        return;
    }
    __x = 0;
    std::vector<int>::vector(&v25, v4 + 1, &__x);
    v5 = *(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 23) < 0)
    {
      v7 = *(unsigned __int8 **)v5;
      v6 = *(_QWORD *)(v5 + 8);
    }
    else
    {
      v6 = *(unsigned __int8 *)(v5 + 23);
      v7 = (unsigned __int8 *)(*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL);
    }
    begin = v25.__begin_;
    if (v6)
    {
      v9 = 0;
      v10 = 0;
      do
      {
        v11 = asc_2284E2628[(unint64_t)*v7 >> 4];
        if (v11 <= 1)
          v12 = 1;
        else
          v12 = v11;
        v13 = v10 + v12;
        if (v10 + v12 > (int)v10)
        {
          v10 = (int)v10;
          do
            begin[v10++] = v9;
          while (v13 > v10);
        }
        ++v9;
        v7 += v12;
        v10 = v13;
        v6 -= v12;
      }
      while (v6);
      begin = v25.__begin_;
    }
    else
    {
      v13 = 0;
      v9 = 0;
    }
    begin[v13] = v9;
    v14 = *(_QWORD *)(a1 + 64);
    if (v14)
      v15 = (uint64_t *)(v14 + 8);
    else
      v15 = 0;
    v16 = *(int *)(a1 + 56);
    if ((_DWORD)v16)
    {
      v17 = vdup_n_s32(((unint64_t)((char *)v25.__end_ - (char *)begin) >> 2) - 1);
      v18 = 8 * v16;
      do
      {
        v19 = *v15++;
        v20 = *(_DWORD *)(v19 + 40);
        v21 = vmin_s32(v17, vmax_s32(*(int32x2_t *)(v19 + 68), 0));
        v22 = begin[v21.i32[0]];
        *(_DWORD *)(v19 + 40) = v20 | 8;
        *(_DWORD *)(v19 + 68) = v22;
        v23 = begin[v21.i32[1]];
        *(_DWORD *)(v19 + 40) = v20 | 0x18;
        *(_DWORD *)(v19 + 72) = v23;
        v18 -= 8;
      }
      while (v18);
    }
    v25.__end_ = begin;
    operator delete(begin);
  }
}

BOOL sentencepiece::ImmutableSentencePieceText::SerializeAsString@<W0>(google::protobuf::MessageLite **this@<X0>, uint64_t a2@<X8>)
{
  return google::protobuf::MessageLite::SerializeAsString(this[1], a2);
}

_QWORD *sentencepiece::ImmutableNBestSentencePieceText::ImmutableNBestSentencePieceText(_QWORD *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &off_24F0FD670;
  return this;
}

void sentencepiece::ImmutableNBestSentencePieceText::~ImmutableNBestSentencePieceText(sentencepiece::ImmutableNBestSentencePieceText *this)
{
  *(_QWORD *)this = &off_24F0FD670;
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_24F0FD670;
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_24F0FD670;
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x22E2B07A4);
}

uint64_t sentencepiece::ImmutableNBestSentencePieceText::nbests_size(sentencepiece::ImmutableNBestSentencePieceText *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  if (v1)
    return *(int *)(v1 + 24);
  else
    return 0;
}

uint64_t sentencepiece::ImmutableNBestSentencePieceText::nbests@<X0>(sentencepiece::ImmutableNBestSentencePieceText *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t result;

  result = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::TypeHandler>(*((_QWORD *)this + 1) + 16, a2);
  *a3 = &off_24F0FD650;
  a3[1] = result;
  a3[2] = 0;
  a3[3] = 0;
  return result;
}

void sentencepiece::ImmutableNBestSentencePieceText::nbests(sentencepiece::ImmutableNBestSentencePieceText *this@<X0>, sentencepiece::SentencePieceText *a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    std::vector<sentencepiece::ImmutableSentencePieceText>::vector(a2, *(int *)(v3 + 24));
    v5 = *((_QWORD *)this + 1);
    if (*(int *)(v5 + 24) >= 1)
    {
      v6 = 0;
      do
      {
        v11 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::TypeHandler>(v5 + 16, v6);
        v12 = 0;
        v13 = 0;
        v7 = *(_QWORD *)a2 + 32 * v6;
        *(_QWORD *)(v7 + 8) = v11;
        std::shared_ptr<sentencepiece::SentencePieceText>::operator=[abi:ne180100]((_QWORD *)(v7 + 16), &v12);
        v8 = v13;
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        ++v6;
        v5 = *((_QWORD *)this + 1);
      }
      while (v6 < *(int *)(v5 + 24));
    }
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
  }
}

void sub_22844EB50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<sentencepiece::ImmutableSentencePieceText>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::ImmutableNBestSentencePieceText::mutable_proto(sentencepiece::ImmutableNBestSentencePieceText *this)
{
  uint64_t result;
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v2 = (char *)this + 8;
  result = *((_QWORD *)this + 1);
  if (!result)
  {
    _ZNSt3__115allocate_sharedB8ne180100IN13sentencepiece22NBestSentencePieceTextENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v6);
    std::shared_ptr<sentencepiece::SentencePieceText>::operator=[abi:ne180100]((uint64_t)v2, &v6);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
    if (*((_QWORD *)&v6 + 1))
    {
      v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    return *(_QWORD *)v2;
  }
  return result;
}

void sentencepiece::ImmutableNBestSentencePieceText::ConvertToUnicodeSpans(sentencepiece::ImmutableNBestSentencePieceText *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (sentencepiece::ImmutableNBestSentencePieceText::mutable_proto(this))
  {
    v2 = sentencepiece::ImmutableNBestSentencePieceText::mutable_proto(this);
    v3 = *(_QWORD *)(v2 + 32);
    if (v3)
      v4 = (uint64_t *)(v3 + 8);
    else
      v4 = 0;
    v5 = *(int *)(v2 + 24);
    if ((_DWORD)v5)
    {
      v6 = 8 * v5;
      do
      {
        v7 = *v4++;
        v6 -= 8;
      }
      while (v6);
    }
  }
}

_QWORD *sentencepiece::ImmutableNBestSentencePieceText::SerializeAsString@<X0>(sentencepiece::ImmutableNBestSentencePieceText *this@<X0>, _QWORD *a2@<X8>)
{
  google::protobuf::MessageLite *v2;

  v2 = (google::protobuf::MessageLite *)*((_QWORD *)this + 1);
  if (v2)
    return (_QWORD *)google::protobuf::MessageLite::SerializeAsString(v2, (uint64_t)a2);
  else
    return std::string::basic_string[abi:ne180100]<0>(a2, "");
}

double sentencepiece::SentencePieceProcessor::SentencePieceProcessor(sentencepiece::SentencePieceProcessor *this)
{
  double result;

  *(_QWORD *)this = &off_24F0FD690;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return result;
}

void sentencepiece::SentencePieceProcessor::~SentencePieceProcessor(void **this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  *this = &off_24F0FD690;
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  v2 = this[11];
  this[11] = 0;
  if (v2)
    (*(void (**)(void *))(*(_QWORD *)v2 + 8))(v2);
  v3 = this[8];
  if (v3)
  {
    this[9] = v3;
    operator delete(v3);
  }
  v4 = this[5];
  if (v4)
  {
    this[6] = v4;
    operator delete(v4);
  }
  v5 = this[4];
  this[4] = 0;
  if (v5)
    (*(void (**)(void *))(*(_QWORD *)v5 + 8))(v5);
  v6 = this[3];
  this[3] = 0;
  if (v6)
    (*(void (**)(void *))(*(_QWORD *)v6 + 8))(v6);
  v7 = this[2];
  this[2] = 0;
  if (v7)
    (*(void (**)(void *))(*(_QWORD *)v7 + 8))(v7);
  v8 = this[1];
  this[1] = 0;
  if (v8)
    (*(void (**)(void *))(*(_QWORD *)v8 + 8))(v8);
}

{
  sentencepiece::SentencePieceProcessor::~SentencePieceProcessor(this);
  JUMPOUT(0x22E2B07A4);
}

uint64_t sentencepiece::IsMMappableFile()
{
  _QWORD v1[2];
  _BYTE v2[408];
  _QWORD v3[20];

  v3[19] = *MEMORY[0x24BDAC8D0];
  std::ifstream::basic_ifstream(v1);
  if ((v2[*(_QWORD *)(v1[0] - 24) + 16] & 5) == 0)
    std::istream::read();
  v1[0] = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)v1 + *(_QWORD *)(v1[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x22E2B05B8](v2);
  std::istream::~istream();
  MEMORY[0x22E2B0750](v3);
  return 0;
}

void sub_22844EE78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ifstream::~ifstream((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::ifstream::basic_ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x24BEDB838];
  v3 = MEMORY[0x24BEDB838] + 64;
  a1[53] = MEMORY[0x24BEDB838] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x22E2B05AC](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_22844EF68(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x22E2B0750](v1 + 424);
  _Unwind_Resume(a1);
}

_QWORD *std::ifstream::~ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7E0];
  v3 = *MEMORY[0x24BEDB7E0];
  *a1 = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x22E2B05B8](a1 + 2);
  std::istream::~istream();
  MEMORY[0x22E2B0750](a1 + 53);
  return a1;
}

sentencepiece::ModelProto *sentencepiece::SentencePieceProcessor::Load@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, sentencepiece::util::Status *a4@<X8>)
{
  sentencepiece::ModelProto *result;
  sentencepiece::ModelProto *v9;
  uint64_t v10;
  uint64_t v11;
  sentencepiece::ModelProto *v12;
  sentencepiece::ModelProto *v13;

  if (sentencepiece::IsMMappableFile())
    return (sentencepiece::ModelProto *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, a2, a3);
  absl::make_unique<sentencepiece::ModelProto>(&v13);
  sentencepiece::io::LoadModelProto(a2, a3, v13, a4);
  if (!*(_QWORD *)a4)
  {
    sentencepiece::util::Status::~Status(a4);
    v12 = v13;
    v13 = 0;
    (*(void (**)(uint64_t, sentencepiece::ModelProto **))(*(_QWORD *)a1 + 40))(a1, &v12);
    v9 = v12;
    v12 = 0;
    if (v9)
    {
      sentencepiece::ModelProto::~ModelProto(v9);
      MEMORY[0x22E2B07A4](v10);
    }
  }
  result = v13;
  v13 = 0;
  if (result)
  {
    sentencepiece::ModelProto::~ModelProto(result);
    return (sentencepiece::ModelProto *)MEMORY[0x22E2B07A4](v11, 0x10A1C4047CE62CFLL);
  }
  return result;
}

void sub_22844F100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, sentencepiece::ModelProto *a9, sentencepiece::ModelProto *a10)
{
  std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0);
  std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a10, 0);
  _Unwind_Resume(a1);
}

uint64_t absl::make_unique<sentencepiece::ModelProto>@<X0>(sentencepiece::ModelProto **a1@<X8>)
{
  sentencepiece::ModelProto *v2;
  uint64_t result;

  v2 = (sentencepiece::ModelProto *)operator new();
  result = sentencepiece::ModelProto::ModelProto(v2, 0);
  *a1 = v2;
  return result;
}

void sub_22844F170(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2B07A4](v1, 0x10A1C4047CE62CFLL);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::io::LoadModelProto@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, google::protobuf::MessageLite *a3@<X2>, sentencepiece::util::Status *a4@<X8>)
{
  char *v6;
  unsigned int v7;
  uint64_t result;
  unsigned int v9;
  _QWORD v10[11];
  char v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (!a2)
    return sentencepiece::util::Status::Status(a4, 5, "model file path should not be empty.", 36);
  sentencepiece::filesystem::NewReadableFile(a1, a2, 1, &v16);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
  if (!*(_QWORD *)a4)
  {
    sentencepiece::util::Status::~Status(a4);
    v13 = 0;
    v14 = 0;
    v15 = 0;
    if (((*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v16 + 32))(v16, &v13) & 1) != 0)
    {
      if (v15 >= 0)
        v6 = (char *)&v13;
      else
        v6 = v13;
      if (v15 >= 0)
        v7 = HIBYTE(v15);
      else
        v7 = v14;
      if ((google::protobuf::MessageLite::ParseFromArray(a3, v6, v7) & 1) != 0)
      {
        sentencepiece::util::Status::Status(a4);
LABEL_18:
        if (SHIBYTE(v15) < 0)
          operator delete(v13);
        goto LABEL_20;
      }
      v9 = 13;
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"model_proto->ParseFromArray(serialized.data(), serialized.size())", 65);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"] ", 2);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v9, (uint64_t)a4);
    }
    else
    {
      v9 = 13;
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"input->ReadAll(&serialized)", 27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"] ", 2);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v9, (uint64_t)a4);
    }
    v10[0] = *MEMORY[0x24BEDB800];
    *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v10[1] = MEMORY[0x24BEDB848] + 16;
    if (v11 < 0)
      operator delete((void *)v10[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x22E2B0750](&v12);
    goto LABEL_18;
  }
LABEL_20:
  result = v16;
  v16 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_22844F440(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  v3 = *(_QWORD *)(v1 - 56);
  *(_QWORD *)(v1 - 56) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::LoadOrDie(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  std::string *p_p;
  std::string::size_type size;
  std::string __p;
  char v9;
  uint64_t v10;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 16))(&v10);
  if (v10)
  {
    v9 = 1;
    v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"(", 1);
    v2 = (_QWORD *)std::ostream::operator<<();
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)") [", 3);
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"_status.ok()", 12);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"] ", 2);
    sentencepiece::util::Status::ToString((sentencepiece::util::Status *)&v10, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v9);
  }
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v10);
}

void sub_22844F594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)(v15 - 25));
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)(v15 - 24));
  _Unwind_Resume(a1);
}

sentencepiece::ModelProto *sentencepiece::SentencePieceProcessor::Load(sentencepiece::SentencePieceProcessor *this, const sentencepiece::ModelProto *a2)
{
  sentencepiece::ModelProto *v4;
  uint64_t v5;
  sentencepiece::ModelProto *result;
  uint64_t v7;
  sentencepiece::ModelProto *v8;
  sentencepiece::ModelProto *v9;

  absl::make_unique<sentencepiece::ModelProto>(&v9);
  sentencepiece::ModelProto::CopyFrom(v9, a2);
  v8 = v9;
  v9 = 0;
  (*(void (**)(sentencepiece::SentencePieceProcessor *, sentencepiece::ModelProto **))(*(_QWORD *)this + 40))(this, &v8);
  v4 = v8;
  v8 = 0;
  if (v4)
  {
    sentencepiece::ModelProto::~ModelProto(v4);
    MEMORY[0x22E2B07A4](v5);
  }
  result = v9;
  v9 = 0;
  if (result)
  {
    sentencepiece::ModelProto::~ModelProto(result);
    return (sentencepiece::ModelProto *)MEMORY[0x22E2B07A4](v7, 0x10A1C4047CE62CFLL);
  }
  return result;
}

void sub_22844F67C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, sentencepiece::ModelProto *a9, sentencepiece::ModelProto *a10)
{
  std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0);
  std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a10, 0);
  _Unwind_Resume(a1);
}

sentencepiece::ModelProto *sentencepiece::SentencePieceProcessor::LoadFromSerializedProto@<X0>(uint64_t a1@<X0>, char *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  sentencepiece::ModelProto *v8;
  sentencepiece::ModelProto *v9;
  uint64_t v10;
  sentencepiece::ModelProto *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  sentencepiece::ModelProto *v15;
  unsigned int v16;
  _QWORD v17[11];
  char v18;
  uint64_t v19;
  sentencepiece::ModelProto *v20;

  absl::make_unique<sentencepiece::ModelProto>(&v20);
  if ((google::protobuf::MessageLite::ParseFromArray(v20, a2, a3) & 1) != 0)
  {
    v8 = v20;
    v20 = 0;
    v15 = v8;
    (*(void (**)(uint64_t, sentencepiece::ModelProto **))(*(_QWORD *)a1 + 40))(a1, &v15);
    v9 = v15;
    v15 = 0;
    if (v9)
    {
      sentencepiece::ModelProto::~ModelProto(v9);
      MEMORY[0x22E2B07A4](v10);
    }
  }
  else
  {
    v16 = 13;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"model_proto->ParseFromArray(serialized.data(), serialized.size())", 65);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"] ", 2);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v16, a4);
    v17[0] = *MEMORY[0x24BEDB800];
    *(_QWORD *)((char *)v17 + *(_QWORD *)(v17[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v17[1] = MEMORY[0x24BEDB848] + 16;
    if (v18 < 0)
      operator delete((void *)v17[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x22E2B0750](&v19);
  }
  result = v20;
  v20 = 0;
  if (result)
  {
    sentencepiece::ModelProto::~ModelProto(result);
    return (sentencepiece::ModelProto *)MEMORY[0x22E2B07A4](v12, 0x10A1C4047CE62CFLL, v13, v14);
  }
  return result;
}

void sub_22844F86C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100]((sentencepiece::ModelProto **)(v1 - 56), 0);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::Load(sentencepiece::logging *a1@<X0>, uint64_t *a2@<X1>, sentencepiece::util::Status *a3@<X8>)
{
  uint64_t v6;
  _BYTE *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  std::__split_buffer<std::string>::pointer first;
  uint64_t v23;
  std::__split_buffer<std::string>::pointer v24;
  const sentencepiece::NormalizerSpec *v25;
  const sentencepiece::TrainerSpec *v26;
  std::__split_buffer<std::string>::pointer v27;
  uint64_t v28;
  std::__split_buffer<std::string>::pointer v29;
  const sentencepiece::NormalizerSpec *v30;
  std::string *v31;
  const sentencepiece::NormalizerSpec *v32;
  unint64_t v33;
  std::__split_buffer<std::string>::pointer v34;
  uint64_t v35;
  std::__split_buffer<std::string>::pointer v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  const std::string::value_type *v50;
  std::string::size_type v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  const std::string::value_type *v56;
  std::string::size_type v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  std::string *v61;
  std::string::size_type size;
  sentencepiece::logging *v63;
  unint64_t v64;
  size_t v65;
  void *v66;
  std::vector<std::string>::pointer end;
  __int128 v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  std::string *v72;
  std::string *v73;
  __int128 v74;
  std::string *v75;
  sentencepiece::logging *MinLogLevel;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  std::string __p;
  std::string v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  std::vector<std::string> v101;
  std::__split_buffer<std::string> __v;

  v6 = *a2;
  v7 = *(_BYTE **)(*a2 + 88);
  if (!v7)
    v7 = &sentencepiece::_NormalizerSpec_default_instance_;
  if (v7[80])
  {
    if ((int)sentencepiece::logging::GetMinLogLevel(a1) <= 0)
    {
      LOBYTE(__v.__first_) = 0;
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"(", 1);
      v9 = (_QWORD *)std::ostream::operator<<();
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)") ", 2);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"LOG(", 4);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"INFO", 4);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)") ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Enable Apple addition for backward compatibility", 48);
      sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&__v);
    }
    v6 = *a2;
    *(_DWORD *)(v6 + 48) = *(_DWORD *)(*a2 + 48) | 1;
    v14 = *(_QWORD *)(v6 + 80);
    if (!v14)
    {
      v15 = *(_QWORD *)(v6 + 8);
      v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if ((v15 & 1) != 0)
        v16 = (_QWORD *)*v16;
      v14 = google::protobuf::Arena::CreateMaybeMessage<sentencepiece::TrainerSpec>((uint64_t)v16);
      *(_QWORD *)(v6 + 80) = v14;
      v6 = *a2;
    }
    *(_DWORD *)(v14 + 40) |= 0x4000u;
    *(_BYTE *)(v14 + 245) = 1;
    *(_DWORD *)(v6 + 48) |= 2u;
    v17 = *(_QWORD *)(v6 + 88);
    if (!v17)
    {
      v18 = *(_QWORD *)(v6 + 8);
      v19 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFFELL);
      if ((v18 & 1) != 0)
        v19 = (_QWORD *)*v19;
      v17 = google::protobuf::Arena::CreateMaybeMessage<sentencepiece::NormalizerSpec>((uint64_t)v19);
      *(_QWORD *)(v6 + 88) = v17;
      v6 = *a2;
    }
    *(_DWORD *)(v17 + 48) |= 0x10u;
    *(_BYTE *)(v17 + 81) = 1;
  }
  *a2 = 0;
  if (v6)
    v20 = v6 + 16;
  else
    v20 = 0;
  v21 = *((_QWORD *)a1 + 4);
  *((_QWORD *)a1 + 4) = v20;
  if (v21)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    v20 = *((_QWORD *)a1 + 4);
  }
  sentencepiece::ModelFactory::Create((sentencepiece::ModelFactory *)(v20 - 16), &__v);
  first = __v.__first_;
  __v.__first_ = 0;
  v23 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = first;
  if (v23)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    v24 = __v.__first_;
    __v.__first_ = 0;
    if (v24)
      (*(void (**)(std::__split_buffer<std::string>::pointer))(v24->__r_.__value_.__r.__words[0] + 8))(v24);
  }
  if (*(_QWORD *)(v20 + 72))
    v25 = *(const sentencepiece::NormalizerSpec **)(v20 + 72);
  else
    v25 = (const sentencepiece::NormalizerSpec *)&sentencepiece::_NormalizerSpec_default_instance_;
  if (*(_QWORD *)(v20 + 64))
    v26 = *(const sentencepiece::TrainerSpec **)(v20 + 64);
  else
    v26 = (const sentencepiece::TrainerSpec *)&sentencepiece::_TrainerSpec_default_instance_;
  absl::make_unique<sentencepiece::normalizer::Normalizer,sentencepiece::NormalizerSpec const&,sentencepiece::TrainerSpec const&>(v25, v26, (sentencepiece::normalizer::Normalizer **)&__v);
  v27 = __v.__first_;
  __v.__first_ = 0;
  v28 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v27;
  if (v28)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    v29 = __v.__first_;
    __v.__first_ = 0;
    if (v29)
      (*(void (**)(std::__split_buffer<std::string>::pointer))(v29->__r_.__value_.__r.__words[0] + 8))(v29);
  }
  if ((*(_DWORD *)(v20 + 32) & 8) != 0)
  {
    v30 = *(const sentencepiece::NormalizerSpec **)(v20 + 88);
    if (!v30)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)&__v, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4990);
      v31 = google::protobuf::internal::LogMessage::operator<<((std::string *)&__v, "CHECK failed: !value || denormalizer_spec_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v101, (const char **)&v31->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&__v.__first_);
      v30 = *(const sentencepiece::NormalizerSpec **)(v20 + 88);
    }
    if (v30)
      v32 = v30;
    else
      v32 = (const sentencepiece::NormalizerSpec *)&sentencepiece::_NormalizerSpec_default_instance_;
    v33 = *((_QWORD *)v32 + 8) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v33 + 23) < 0)
    {
      if (!*(_QWORD *)(v33 + 8))
        goto LABEL_45;
    }
    else if (!*(_BYTE *)(v33 + 23))
    {
      goto LABEL_45;
    }
    absl::make_unique<sentencepiece::normalizer::Normalizer,sentencepiece::NormalizerSpec const&>(v32, (sentencepiece::normalizer::Normalizer **)&__v);
    v34 = __v.__first_;
    __v.__first_ = 0;
    v35 = *((_QWORD *)a1 + 3);
    *((_QWORD *)a1 + 3) = v34;
    if (v35)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
      v36 = __v.__first_;
      __v.__first_ = 0;
      if (v36)
        (*(void (**)(std::__split_buffer<std::string>::pointer))(v36->__r_.__value_.__r.__words[0] + 8))(v36);
    }
  }
LABEL_45:
  v37 = *((_QWORD *)a1 + 2);
  v38 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 1) + 32))(*((_QWORD *)a1 + 1));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(v37, v38);
  (*(void (**)(sentencepiece::logging *))(*(_QWORD *)a1 + 88))(a1);
  if (!*(_QWORD *)a3)
  {
    sentencepiece::util::Status::~Status(a3);
    memset(&v101, 0, sizeof(v101));
    v98 = 0;
    v99 = 0;
    v100 = 0;
    v39 = *(int **)(v20 + 80);
    if (!v39)
      v39 = (int *)&sentencepiece::_SelfTestData_default_instance_;
    v40 = *((_QWORD *)v39 + 7);
    if (v40)
      v41 = (uint64_t *)(v40 + 8);
    else
      v41 = 0;
    v42 = v39[12];
    if ((_DWORD)v42)
    {
      v43 = &v41[v42];
      while (1)
      {
        v44 = *v41;
        v45 = *(_QWORD *)(*v41 + 24) & 0xFFFFFFFFFFFFFFFELL;
        if (*(char *)(v45 + 23) < 0)
        {
          v47 = *(_QWORD *)v45;
          v46 = *(_QWORD *)(v45 + 8);
        }
        else
        {
          v46 = *(unsigned __int8 *)(v45 + 23);
          v47 = *(_QWORD *)(*v41 + 24) & 0xFFFFFFFFFFFFFFFELL;
        }
        (*(void (**)(sentencepiece::logging *, unint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 136))(a1, v47, v46, &v98);
        if (*(_QWORD *)a3)
          break;
        sentencepiece::util::Status::~Status(a3);
        memset(&v97, 0, sizeof(v97));
        v48 = v98;
        if (v98 == v99)
        {
          v52 = v98;
        }
        else
        {
          v49 = *(char *)(v98 + 23);
          if (v49 >= 0)
            v50 = (const std::string::value_type *)v98;
          else
            v50 = *(const std::string::value_type **)v98;
          if (v49 >= 0)
            v51 = *(unsigned __int8 *)(v98 + 23);
          else
            v51 = *(_QWORD *)(v98 + 8);
          std::string::append(&v97, v50, v51);
          v48 = v98;
          v52 = v99;
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v52 - v48) >> 3) >= 2)
        {
          v53 = 0;
          v54 = 1;
          do
          {
            std::string::append(&v97, " ", 1uLL);
            v55 = *(char *)(v98 + v53 + 47);
            if (v55 >= 0)
              v56 = (const std::string::value_type *)(v98 + v53 + 24);
            else
              v56 = *(const std::string::value_type **)(v98 + v53 + 24);
            if (v55 >= 0)
              v57 = *(unsigned __int8 *)(v98 + v53 + 47);
            else
              v57 = *(_QWORD *)(v98 + v53 + 32);
            std::string::append(&v97, v56, v57);
            ++v54;
            v53 += 24;
          }
          while (v54 < 0xAAAAAAAAAAAAAAABLL * ((v99 - v98) >> 3));
        }
        v58 = *(_QWORD *)(v44 + 32) & 0xFFFFFFFFFFFFFFFELL;
        if (*(char *)(v58 + 23) < 0)
        {
          v60 = *(_QWORD *)v58;
          v59 = *(_QWORD *)(v58 + 8);
        }
        else
        {
          v59 = *(unsigned __int8 *)(v58 + 23);
          v60 = *(_QWORD *)(v44 + 32) & 0xFFFFFFFFFFFFFFFELL;
        }
        if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v61 = &v97;
        else
          v61 = (std::string *)v97.__r_.__value_.__r.__words[0];
        if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v97.__r_.__value_.__r.__words[2]);
        else
          size = v97.__r_.__value_.__l.__size_;
        v63 = (sentencepiece::logging *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t, std::string *, std::string::size_type))(**((_QWORD **)a1 + 1) + 192))(*((_QWORD *)a1 + 1), v60, v59, v61, size);
        if ((v63 & 1) == 0)
        {
          v64 = *(_QWORD *)(v44 + 24) & 0xFFFFFFFFFFFFFFFELL;
          if (*(char *)(v64 + 23) < 0)
          {
            v66 = *(void **)v64;
            v65 = *(_QWORD *)(v64 + 8);
          }
          else
          {
            v65 = *(unsigned __int8 *)(v64 + 23);
            v66 = (void *)(*(_QWORD *)(v44 + 24) & 0xFFFFFFFFFFFFFFFELL);
          }
          absl::StrCat<char [2],std::string,char [2],std::string>(v66, v65, "\t", (void **)(*(_QWORD *)(v44 + 32) & 0xFFFFFFFFFFFFFFFELL), "\t", (void **)&v97.__r_.__value_.__l.__data_, &__p);
          end = v101.__end_;
          if (v101.__end_ >= v101.__end_cap_.__value_)
          {
            v69 = 0xAAAAAAAAAAAAAAABLL * (((char *)v101.__end_ - (char *)v101.__begin_) >> 3);
            v70 = v69 + 1;
            if (v69 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * (((char *)v101.__end_cap_.__value_ - (char *)v101.__begin_) >> 3) > v70)
              v70 = 0x5555555555555556 * (((char *)v101.__end_cap_.__value_ - (char *)v101.__begin_) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v101.__end_cap_.__value_ - (char *)v101.__begin_) >> 3) >= 0x555555555555555)
              v71 = 0xAAAAAAAAAAAAAAALL;
            else
              v71 = v70;
            __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v101.__end_cap_;
            if (v71)
              v72 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string_view,int>>>((uint64_t)&v101.__end_cap_, v71);
            else
              v72 = 0;
            v73 = v72 + v69;
            __v.__first_ = v72;
            __v.__begin_ = v73;
            __v.__end_cap_.__value_ = &v72[v71];
            v74 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            v73->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v73->__r_.__value_.__l.__data_ = v74;
            memset(&__p, 0, sizeof(__p));
            __v.__end_ = v73 + 1;
            std::vector<std::string>::__swap_out_circular_buffer(&v101, &__v);
            v75 = v101.__end_;
            std::__split_buffer<std::string>::~__split_buffer(&__v);
            v101.__end_ = v75;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          else
          {
            v68 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            v101.__end_->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
            *(_OWORD *)&end->__r_.__value_.__l.__data_ = v68;
            v101.__end_ = end + 1;
          }
        }
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v97.__r_.__value_.__l.__data_);
        if (++v41 == v43)
        {
          if (v101.__begin_ == v101.__end_)
            goto LABEL_119;
          MinLogLevel = (sentencepiece::logging *)sentencepiece::logging::GetMinLogLevel(v63);
          if ((int)MinLogLevel <= 0)
          {
            LOBYTE(__v.__first_) = 0;
            v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"(", 1);
            v78 = (_QWORD *)std::ostream::operator<<();
            v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)") ", 2);
            v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"LOG(", 4);
            v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"INFO", 4);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)") ", 2);
            v82 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"/", 1);
            v83 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)" samples did not pass the test.", 31);
            sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&__v);
          }
          begin = v101.__begin_;
          v85 = v101.__end_;
          if (v101.__begin_ != v101.__end_)
          {
            v86 = (_QWORD *)MEMORY[0x24BEDB310];
            do
            {
              MinLogLevel = (sentencepiece::logging *)sentencepiece::logging::GetMinLogLevel(MinLogLevel);
              if ((int)MinLogLevel <= 0)
              {
                LOBYTE(__v.__first_) = 0;
                v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)"sentencepiece_processor.cc", 26);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"(", 1);
                v88 = (_QWORD *)std::ostream::operator<<();
                v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)") ", 2);
                v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"LOG(", 4);
                v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)"INFO", 4);
                v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)") ", 2);
                v93 = SHIBYTE(begin->__r_.__value_.__r.__words[2]);
                if (v93 >= 0)
                  v94 = (uint64_t)begin;
                else
                  v94 = begin->__r_.__value_.__r.__words[0];
                if (v93 >= 0)
                  v95 = HIBYTE(begin->__r_.__value_.__r.__words[2]);
                else
                  v95 = begin->__r_.__value_.__l.__size_;
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, v94, v95);
                sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&__v);
              }
              ++begin;
            }
            while (begin != v85);
          }
          sentencepiece::util::Status::Status(a3, 13, "Self-test failures. See LOG(INFO).", 34);
          break;
        }
      }
    }
    else
    {
LABEL_119:
      sentencepiece::util::Status::Status(a3);
    }
    __v.__first_ = (std::__split_buffer<std::string>::pointer)&v98;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
    __v.__first_ = (std::__split_buffer<std::string>::pointer)&v101;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  }
}

void sub_22845011C(_Unwind_Exception *a1, void *__p, uint64_t a3, int a4, __int16 a5, char a6, char a7, void *a8, uint64_t a9, int __pa, __int16 __p_4, char __p_6, char __p_7, uint64_t a14, uint64_t a15, void *a16, char a17, uint64_t a18, uint64_t a19, std::__split_buffer<std::string> *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  google::protobuf::internal::LogMessage::~LogMessage((void **)&a25);
  _Unwind_Resume(a1);
}

uint64_t absl::make_unique<sentencepiece::normalizer::Normalizer,sentencepiece::NormalizerSpec const&,sentencepiece::TrainerSpec const&>@<X0>(const sentencepiece::NormalizerSpec *a1@<X0>, const sentencepiece::TrainerSpec *a2@<X1>, sentencepiece::normalizer::Normalizer **a3@<X8>)
{
  sentencepiece::normalizer::Normalizer *v6;
  uint64_t result;

  v6 = (sentencepiece::normalizer::Normalizer *)operator new();
  result = sentencepiece::normalizer::Normalizer::Normalizer(v6, a1, a2);
  *a3 = v6;
  return result;
}

void sub_228450230(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2B07A4](v1, 0x10F1C40C7D4252BLL);
  _Unwind_Resume(a1);
}

uint64_t absl::make_unique<sentencepiece::normalizer::Normalizer,sentencepiece::NormalizerSpec const&>@<X0>(const sentencepiece::NormalizerSpec *a1@<X0>, sentencepiece::normalizer::Normalizer **a2@<X8>)
{
  sentencepiece::normalizer::Normalizer *v4;
  uint64_t result;

  v4 = (sentencepiece::normalizer::Normalizer *)operator new();
  result = sentencepiece::normalizer::Normalizer::Normalizer(v4, a1);
  *a2 = v4;
  return result;
}

void sub_2284502A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2B07A4](v1, 0x10F1C40C7D4252BLL);
  _Unwind_Resume(a1);
}

void absl::StrCat<char [2],std::string,char [2],std::string>(void *__src@<X0>, size_t __len@<X1>, char *a3@<X2>, void **a4@<X3>, char *a5@<X4>, void **a6@<X5>, std::string *a7@<X8>)
{
  size_t v12;
  std::string *p_p;
  std::string::size_type size;
  std::string *v15;
  std::string __p;
  std::string __dst;

  std::string::basic_string[abi:ne180100](&__dst, __src, __len);
  v12 = strlen(a3);
  absl::StrCat<std::string,char [2],std::string>(a3, v12, a4, a5, a6, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v15 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
  *a7 = *v15;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_22845039C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::SetEncodeExtraOptions(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, sentencepiece::util::Status *a4@<X8>)
{
  sentencepiece::SentencePieceProcessor::ParseExtraOptions((sentencepiece::ModelInterface **)a1, a2, a3, (char **)(a1 + 40), a4);
}

void sentencepiece::SentencePieceProcessor::ParseExtraOptions(sentencepiece::ModelInterface **a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, char **a4@<X3>, sentencepiece::util::Status *a5@<X8>)
{
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  int v25;
  int v26;
  const char *v27;
  size_t v28;
  uint64_t v29;
  const char *v30;
  size_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  uint64_t *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  void *__p[2];
  __int128 v45;
  uint64_t v46;
  _QWORD v47[21];

  v47[19] = *MEMORY[0x24BDAC8D0];
  a4[1] = *a4;
  if (a3)
  {
    (*((void (**)(sentencepiece::ModelInterface **))*a1 + 11))(a1);
    if (!*(_QWORD *)a5)
    {
      sentencepiece::util::Status::~Status(a5);
      if ((v10 & 1) == 0
      {
        v43 = xmmword_24F0FD930;
        *(_OWORD *)__p = unk_24F0FD940;
        v45 = xmmword_24F0FD950;
        v46 = 3;
        v39 = xmmword_24F0FD8F0;
        v40 = unk_24F0FD900;
        v41 = xmmword_24F0FD910;
        v42 = *(_OWORD *)&off_24F0FD920;
        std::map<std::string_view,sentencepiece::SentencePieceProcessor::ExtraOption>::map[abi:ne180100]((uint64_t)&sentencepiece::SentencePieceProcessor::ParseExtraOptions(std::string_view,std::vector<sentencepiece::SentencePieceProcessor::ExtraOption> *)const::extra_option_map, (uint64_t)&v39, 5);
        __cxa_atexit((void (*)(void *))std::map<std::string_view,sentencepiece::SentencePieceProcessor::ExtraOption>::~map[abi:ne180100], &sentencepiece::SentencePieceProcessor::ParseExtraOptions(std::string_view,std::vector<sentencepiece::SentencePieceProcessor::ExtraOption> *)const::extra_option_map, &dword_2282CC000);
      }
      absl::internal::Splitter::Splitter((char **)&v37, a2, a3, ":", 1, 0);
      v11 = (uint64_t *)v37;
      v12 = v38;
      if (v37 == v38)
      {
LABEL_29:
        if (v11)
        {
          v38 = v11;
          operator delete(v11);
        }
        sentencepiece::util::Status::Status(a5);
      }
      else
      {
        while (1)
        {
          v13 = std::__tree<std::string_view>::find<std::string_view>((uint64_t)&sentencepiece::SentencePieceProcessor::ParseExtraOptions(std::string_view,std::vector<sentencepiece::SentencePieceProcessor::ExtraOption> *)const::extra_option_map, (uint64_t)v11);
          v14 = v13;
          if (v13 == (_QWORD *)&unk_255989A38)
            break;
          v16 = a4[1];
          v15 = (unint64_t)a4[2];
          if ((unint64_t)v16 >= v15)
          {
            v18 = *a4;
            v19 = (v16 - *a4) >> 2;
            v20 = v19 + 1;
            if ((unint64_t)(v19 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v21 = v15 - (_QWORD)v18;
            if (v21 >> 1 > v20)
              v20 = v21 >> 1;
            if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
              v22 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v22 = v20;
            if (v22)
            {
              v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a4 + 2), v22);
              v18 = *a4;
              v16 = a4[1];
            }
            else
            {
              v23 = 0;
            }
            v24 = &v23[4 * v19];
            *(_DWORD *)v24 = *((_DWORD *)v14 + 12);
            v17 = v24 + 4;
            while (v16 != v18)
            {
              v25 = *((_DWORD *)v16 - 1);
              v16 -= 4;
              *((_DWORD *)v24 - 1) = v25;
              v24 -= 4;
            }
            *a4 = v24;
            a4[1] = v17;
            a4[2] = &v23[4 * v22];
            if (v18)
              operator delete(v18);
          }
          else
          {
            *(_DWORD *)v16 = *((_DWORD *)v13 + 12);
            v17 = v16 + 4;
          }
          a4[1] = v17;
          v26 = *((_DWORD *)v14 + 12);
          if (v26 == 1)
          {
            v27 = sentencepiece::ModelInterface::bos_piece(a1[1]);
            v28 = strlen(v27);
            v29 = (*((uint64_t (**)(sentencepiece::ModelInterface **, const char *, size_t))*a1 + 63))(a1, v27, v28);
            if (((*((uint64_t (**)(sentencepiece::ModelInterface **, uint64_t))*a1 + 66))(a1, v29) & 1) != 0)
            {
              LODWORD(v39) = 13;
              std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v39 + 8);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"(", 1);
              std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)") [", 3);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"!IsUnknown(PieceToId(absl::string_view(model_->bos_piece().data())))", 68);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"] ", 2);
              v33 = sentencepiece::ModelInterface::bos_piece(a1[1]);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)v33, v34);
              sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v39, (uint64_t)a5);
              goto LABEL_38;
            }
            v26 = *((_DWORD *)v14 + 12);
          }
          if (v26 == 2)
          {
            v30 = sentencepiece::ModelInterface::eos_piece(a1[1]);
            v31 = strlen(v30);
            v32 = (*((uint64_t (**)(sentencepiece::ModelInterface **, const char *, size_t))*a1 + 63))(a1, v30, v31);
            if (((*((uint64_t (**)(sentencepiece::ModelInterface **, uint64_t))*a1 + 66))(a1, v32) & 1) != 0)
            {
              LODWORD(v39) = 13;
              std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v39 + 8);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"(", 1);
              std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)") [", 3);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"!IsUnknown(PieceToId(absl::string_view(model_->eos_piece().data())))", 68);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"] ", 2);
              v35 = sentencepiece::ModelInterface::eos_piece(a1[1]);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)v35, v36);
              sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v39, (uint64_t)a5);
LABEL_38:
              *((_QWORD *)&v39 + 1) = *MEMORY[0x24BEDB800];
              *(_QWORD *)((char *)&v39 + *(_QWORD *)(*((_QWORD *)&v39 + 1) - 24) + 8) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
              *(_QWORD *)&v40 = MEMORY[0x24BEDB848] + 16;
              if (SBYTE7(v45) < 0)
                operator delete(__p[0]);
              goto LABEL_40;
            }
          }
          v11 += 2;
          if (v11 == v12)
          {
            v11 = (uint64_t *)v37;
            goto LABEL_29;
          }
        }
        LODWORD(v39) = 13;
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v39 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"it != extra_option_map.end()", 28);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"] ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"option \"", 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, *v11, v11[1]);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"\" is not available.", 19);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v39, (uint64_t)a5);
        *((_QWORD *)&v39 + 1) = *MEMORY[0x24BEDB800];
        *(_QWORD *)((char *)&v39 + *(_QWORD *)(*((_QWORD *)&v39 + 1) - 24) + 8) = *(_QWORD *)(MEMORY[0x24BEDB800]
                                                                                              + 24);
        *(_QWORD *)&v40 = MEMORY[0x24BEDB848] + 16;
        if (SBYTE7(v45) < 0)
          operator delete(__p[0]);
LABEL_40:
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x22E2B0750](v47);
        if (v37)
        {
          v38 = (uint64_t *)v37;
          operator delete(v37);
        }
      }
    }
  }
  else
  {
    sentencepiece::util::Status::Status(a5);
  }
}

void sub_228450A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SetDecodeExtraOptions(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, sentencepiece::util::Status *a4@<X8>)
{
  sentencepiece::SentencePieceProcessor::ParseExtraOptions((sentencepiece::ModelInterface **)a1, a2, a3, (char **)(a1 + 64), a4);
}

_QWORD *sentencepiece::SentencePieceProcessor::status@<X0>(sentencepiece::SentencePieceProcessor *this@<X0>, sentencepiece::util::Status *a2@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unsigned int v9;
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    if (*((_QWORD *)this + 2))
    {
      result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
      if (!*(_QWORD *)a2)
      {
        sentencepiece::util::Status::~Status(a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
        if (!*(_QWORD *)a2)
        {
          sentencepiece::util::Status::~Status(a2);
          return sentencepiece::util::Status::Status(v6);
        }
      }
      return result;
    }
    v9 = 13;
    v8 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"normalizer_", 11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Normalizer is not initialized.", 30);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v9, (uint64_t)a2);
  }
  else
  {
    v9 = 13;
    v7 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"model_", 6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Model is not initialized.", 25);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v9, (uint64_t)a2);
  }
  v10[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v10[1] = MEMORY[0x24BEDB848] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (_QWORD *)MEMORY[0x22E2B0750](&v12);
}

void sub_228450D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SetVocabulary(_QWORD *a1@<X0>, _OWORD **a2@<X1>, sentencepiece::util::Status *a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  _DWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  _QWORD *v19;
  _QWORD v20[2];
  unsigned int v21;
  _QWORD *v22[11];
  char v23;
  uint64_t v24;

  (*(void (**)(sentencepiece::util::Status *__return_ptr))(*a1 + 88))(a3);
  if (*(_QWORD *)a3)
    return;
  sentencepiece::util::Status::~Status(a3);
  v6 = a1[4];
  if (!v6 || *(_UNKNOWN **)v6 != &unk_24F0FE408)
  {
    v21 = 13;
    v7 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"(model_proto = dynamic_cast<ModelProto *>(model_proto_.get()))", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"SetVocabulary is not supported when mmap-based model is loaded.", 63);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v21, (uint64_t)a3);
LABEL_5:
    v22[0] = *(_QWORD **)MEMORY[0x24BEDB800];
    *(_QWORD **)((char *)v22 + *(v22[0] - 3)) = *(_QWORD **)(MEMORY[0x24BEDB800] + 24);
    v22[1] = (_QWORD *)(MEMORY[0x24BEDB848] + 16);
    if (v23 < 0)
      operator delete(v22[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x22E2B0750](&v24);
    return;
  }
  v8 = &sentencepiece::_TrainerSpec_default_instance_;
  if (*(_QWORD *)(v6 + 64))
    v8 = *(_DWORD **)(v6 + 64);
  if ((v8[68] - 1) >= 2)
  {
    v21 = 13;
    v19 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"type == TrainerSpec::UNIGRAM || type == TrainerSpec::BPE", 56);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Vocabulary constraint is only enabled in subword units.", 55);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v21, (uint64_t)a3);
    goto LABEL_5;
  }
  std::set<std::string_view>::set[abi:ne180100]<std::__wrap_iter<std::string_view const*>>((uint64_t)&v21, *a2, a2[1]);
  if (*(int *)(v6 + 48) >= 1)
  {
    v9 = 0;
    do
    {
      v10 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>(v6 + 40, v9);
      v11 = v10;
      if ((*(_DWORD *)(v10 + 60) - 2) >= 3)
      {
        v12 = *(_QWORD *)(v10 + 48) & 0xFFFFFFFFFFFFFFFELL;
        if (*(char *)(v12 + 23) < 0)
        {
          v14 = *(_QWORD *)v12;
          v13 = *(_QWORD *)(v12 + 8);
        }
        else
        {
          v13 = *(unsigned __int8 *)(v12 + 23);
          v14 = *(_QWORD *)(v10 + 48) & 0xFFFFFFFFFFFFFFFELL;
        }
        v20[0] = v14;
        v20[1] = v13;
        if (v22 == std::__tree<std::string_view>::find<std::string_view>((uint64_t)&v21, (uint64_t)v20)
          && ((v15 = *(_QWORD *)(v11 + 48) & 0xFFFFFFFFFFFFFFFELL, *(char *)(v15 + 23) < 0)
            ? (unsigned __int8 *)(v17 = *(unsigned __int8 **)v15, v16 = *(_QWORD *)(v15 + 8))
            : (v16 = *(unsigned __int8 *)(v15 + 23),
               v17 = (unsigned __int8 *)(*(_QWORD *)(v11 + 48) & 0xFFFFFFFFFFFFFFFELL)),
              v16 != asc_2284E2628[(unint64_t)*v17 >> 4]))
        {
          if (!sentencepiece::ModelProto_SentencePiece_Type_IsValid((sentencepiece *)5))
LABEL_32:
            __assert_rtn("_internal_set_type", "sentencepiece_model.pb.h", 4686, "::sentencepiece::ModelProto_SentencePiece_Type_IsValid(value)");
          v18 = 5;
        }
        else
        {
          if (!sentencepiece::ModelProto_SentencePiece_Type_IsValid((sentencepiece *)1))
            goto LABEL_32;
          v18 = 1;
        }
        *(_DWORD *)(v11 + 40) |= 4u;
        *(_DWORD *)(v11 + 60) = v18;
      }
      ++v9;
    }
    while (v9 < *(_DWORD *)(v6 + 48));
  }
  sentencepiece::util::Status::Status(a3);
  std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::destroy((uint64_t)&v21, v22[0]);
}

void sub_228451118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::destroy((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

_QWORD *sentencepiece::SentencePieceProcessor::ResetVocabulary@<X0>(sentencepiece::SentencePieceProcessor *this@<X0>, sentencepiece::util::Status *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD v13[11];
  char v14;
  uint64_t v15;

  result = (*(_QWORD *(**)(sentencepiece::util::Status *__return_ptr))(*(_QWORD *)this + 88))(a2);
  if (!*(_QWORD *)a2)
  {
    sentencepiece::util::Status::~Status(a2);
    v5 = *((_QWORD *)this + 4);
    if (v5 && *(_UNKNOWN **)v5 == &unk_24F0FE408)
    {
      v7 = *(_QWORD *)(v5 + 56);
      if (v7)
        v8 = (uint64_t *)(v7 + 8);
      else
        v8 = 0;
      v9 = *(int *)(v5 + 48);
      if ((_DWORD)v9)
      {
        v10 = 8 * v9;
        do
        {
          v11 = *v8;
          if (*(_DWORD *)(*v8 + 60) == 5)
          {
            if (!sentencepiece::ModelProto_SentencePiece_Type_IsValid((sentencepiece *)1))
              sentencepiece::SentencePieceProcessor::ResetVocabulary();
            *(_DWORD *)(v11 + 40) |= 4u;
            *(_DWORD *)(v11 + 60) = 1;
          }
          ++v8;
          v10 -= 8;
        }
        while (v10);
      }
      return sentencepiece::util::Status::Status(a2);
    }
    else
    {
      v12 = 13;
      v6 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"(model_proto = dynamic_cast<ModelProto *>(model_proto_.get()))", 62);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"ResetVocabulary is not supported when mmap-based model is loaded.", 65);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v12, (uint64_t)a2);
      v13[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v13[1] = MEMORY[0x24BEDB848] + 16;
      if (v14 < 0)
        operator delete((void *)v13[9]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x22E2B0750](&v15);
    }
  }
  return result;
}

void sub_228451350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SentencePieceProcessor::LoadVocabulary@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, sentencepiece::util::Status *a5@<X8>)
{
  void **v8;
  unint64_t v9;
  std::vector<std::string>::pointer end;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  std::vector<std::string>::pointer v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  const char *data;
  uint64_t size;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  uint64_t result;
  void *__p;
  _QWORD v25[11];
  char v26;
  uint64_t v27;
  std::vector<std::string> v28;
  uint64_t v29;
  std::string *v30;
  unint64_t v31;
  void **v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36[4];

  sentencepiece::filesystem::NewReadableFile(a2, a3, 0, &v35);
  (*(void (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35);
  if (!*(_QWORD *)a5)
  {
    sentencepiece::util::Status::~Status(a5);
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    while ((*(unsigned int (**)(uint64_t, void ***))(*(_QWORD *)v35 + 24))(v35, &v32))
    {
      if (v34 >= 0)
        v8 = (void **)&v32;
      else
        v8 = v32;
      if (v34 >= 0)
        v9 = HIBYTE(v34);
      else
        v9 = v33;
      absl::internal::Splitter::Splitter((char **)&__p, (uint64_t)v8, v9, "\t", 1, 0);
      std::vector<std::string>::vector(&v28, (uint64_t)(v25[0] - (_QWORD)__p) >> 4);
      end = v28.__end_;
      if (v28.__end_ == v28.__begin_)
      {
        v14 = v28.__end_;
      }
      else
      {
        v11 = 0;
        v12 = 0;
        v13 = 0;
        end = v28.__begin_;
        do
        {
          MEMORY[0x22E2B0534](&end[v11], *(_QWORD *)((char *)__p + v12), *(_QWORD *)((char *)__p + v12 + 8));
          ++v13;
          end = v28.__begin_;
          v14 = v28.__end_;
          ++v11;
          v12 += 16;
        }
        while (v13 < 0xAAAAAAAAAAAAAAABLL * (((char *)v28.__end_ - (char *)v28.__begin_) >> 3));
      }
      if (__p)
      {
        v25[0] = __p;
        operator delete(__p);
        end = v28.__begin_;
        v14 = v28.__end_;
      }
      v15 = (char *)v14 - (char *)end;
      if (!v15)
      {
        LODWORD(__p) = 13;
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v25);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"(v.size()) >= (1)", 17);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"] ", 2);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&__p, (uint64_t)a5);
LABEL_42:
        v25[0] = *MEMORY[0x24BEDB800];
        *(_QWORD *)((char *)v25 + *(_QWORD *)(v25[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
        v25[1] = MEMORY[0x24BEDB848] + 16;
        if (v26 < 0)
          operator delete((void *)v25[9]);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x22E2B0750](&v27);
        __p = &v28;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        goto LABEL_45;
      }
      if (SHIBYTE(end->__r_.__value_.__r.__words[2]) < 0)
      {
        if (!end->__r_.__value_.__l.__size_)
        {
LABEL_40:
          LODWORD(__p) = 13;
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v25);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"(", 1);
          std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)") [", 3);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"!v[0].empty()", 13);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"] ", 2);
          sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&__p, (uint64_t)a5);
          goto LABEL_42;
        }
      }
      else if (!*((_BYTE *)&end->__r_.__value_.__s + 23))
      {
        goto LABEL_40;
      }
      v16 = 0xAAAAAAAAAAAAAAABLL * (v15 >> 3);
      v17 = 1;
      v36[0] = 1;
      if (v16 >= 2)
      {
        if (SHIBYTE(end[1].__r_.__value_.__r.__words[2]) < 0)
        {
          data = end[1].__r_.__value_.__l.__data_;
          size = end[1].__r_.__value_.__l.__size_;
        }
        else
        {
          data = (const char *)&end[1];
          size = HIBYTE(end[1].__r_.__value_.__r.__words[2]);
        }
        if (!absl::SimpleAtoi<int>(data, size, (uint64_t)v36))
        {
          LODWORD(__p) = 13;
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v25);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"(", 1);
          std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)") [", 3);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"absl::SimpleAtoi(v[1], &freq)", 29);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"] ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Could not parse the frequency", 29);
          sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&__p, (uint64_t)a5);
          goto LABEL_42;
        }
        v17 = v36[0];
      }
      if (v17 >= a4)
      {
        v20 = v30;
        if ((unint64_t)v30 >= v31)
        {
          v22 = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string const&>(&v29, (__int128 *)v28.__begin_);
        }
        else
        {
          if (SHIBYTE(v28.__begin_->__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v30, v28.__begin_->__r_.__value_.__l.__data_, v28.__begin_->__r_.__value_.__l.__size_);
          }
          else
          {
            v21 = *(_OWORD *)&v28.__begin_->__r_.__value_.__l.__data_;
            v30->__r_.__value_.__r.__words[2] = v28.__begin_->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
          }
          v22 = v20 + 1;
        }
        v30 = v22;
      }
      __p = &v28;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    }
    (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 112))(a1, &__p);
    if (__p)
    {
      v25[0] = __p;
      operator delete(__p);
    }
LABEL_45:
    __p = &v29;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if (SHIBYTE(v34) < 0)
      operator delete(v32);
  }
  result = v35;
  v35 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_22845186C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;
  uint64_t v12;

  __p = (void *)(v10 - 176);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = (void *)(v10 - 152);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v10 - 105) < 0)
    operator delete(*(void **)(v10 - 128));
  v12 = *(_QWORD *)(v10 - 104);
  *(_QWORD *)(v10 - 104) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  _Unwind_Resume(a1);
}

BOOL absl::SimpleAtoi<int>(const char *a1, uint64_t a2, uint64_t a3)
{
  size_t v5;
  _QWORD *v6;
  _BOOL8 v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[2];
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v11);
  v5 = strlen(a1);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)a1, v5);
  if ((*((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 5) != 0)
  {
    v7 = 0;
  }
  else
  {
    v8 = (_QWORD *)MEMORY[0x22E2B05E8](v11, a3);
    v7 = (*((_BYTE *)v8 + *(_QWORD *)(*v8 - 24) + 32) & 5) == 0;
  }
  v11[0] = *MEMORY[0x24BEDB7F0];
  v9 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v12[0] = v9;
  v12[1] = MEMORY[0x24BEDB848] + 16;
  if (v13 < 0)
    operator delete((void *)v12[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x22E2B0750](&v14);
  return v7;
}

void sub_228451A58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sentencepiece::`anonymous namespace'::ToPieceArray@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  result = std::vector<std::string_view>::vector(a2, 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
  v4 = *a1;
  if (a1[1] != *a1)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = (_QWORD *)(v4 + v5);
      LODWORD(v4) = *(char *)(v4 + v5 + 23);
      if ((v4 & 0x80000000) != 0)
      {
        v9 = (_QWORD *)*v8;
        v4 = v8[1];
      }
      else
      {
        v4 = v4;
        v9 = v8;
      }
      v10 = (_QWORD *)(*result + v6);
      *v10 = v9;
      v10[1] = v4;
      ++v7;
      v4 = *a1;
      v6 += 16;
      v5 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) > v7);
  }
  return result;
}

void sentencepiece::SentencePieceProcessor::Encode(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, sentencepiece::util::Status *a5@<X8>)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 *v13;
  _QWORD *v14;
  unsigned int v15;
  _QWORD v16[6];
  int v17;
  uint64_t v18;
  void *__p;
  char v20;
  uint64_t v21;

  (*(void (**)(sentencepiece::util::Status *__return_ptr))(*(_QWORD *)a1 + 88))(a5);
  if (!*(_QWORD *)a5)
  {
    sentencepiece::util::Status::~Status(a5);
    if (a4)
    {
      std::vector<std::string>::__clear[abi:ne180100](a4);
      sentencepiece::SentencePieceText::SentencePieceText((sentencepiece::SentencePieceText *)&v15, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 232))(a1, a2, a3, &v15);
      if (!*(_QWORD *)a5)
      {
        sentencepiece::util::Status::~Status(a5);
        if (v18)
          v10 = v18 + 8;
        else
          v10 = 0;
        if (v17)
        {
          v11 = a4[1];
          v12 = 8 * v17;
          do
          {
            v13 = (__int128 *)(*(_QWORD *)(*(_QWORD *)v10 + 48) & 0xFFFFFFFFFFFFFFFELL);
            if (v11 >= a4[2])
            {
              v11 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(a4, v13);
            }
            else
            {
              std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a4, v13);
              v11 += 24;
            }
            a4[1] = v11;
            v10 += 8;
            v12 -= 8;
          }
          while (v12);
        }
        sentencepiece::util::Status::Status(a5);
      }
      sentencepiece::SentencePieceText::~SentencePieceText((sentencepiece::SentencePieceText *)&v15);
    }
    else
    {
      v15 = 13;
      v14 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"pieces", 6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v15, (uint64_t)a5);
      v16[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v16[1] = MEMORY[0x24BEDB848] + 16;
      if (v20 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x22E2B0750](&v21);
    }
  }
}

void sub_228451D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::Encode(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char **a4@<X3>, sentencepiece::util::Status *a5@<X8>)
{
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  int v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  int v23;
  _QWORD *v24;
  unsigned int v25;
  _QWORD v26[6];
  int v27;
  uint64_t v28;
  void *__p;
  char v30;
  uint64_t v31;

  (*(void (**)(sentencepiece::util::Status *__return_ptr))(*(_QWORD *)a1 + 88))(a5);
  if (!*(_QWORD *)a5)
  {
    sentencepiece::util::Status::~Status(a5);
    if (a4)
    {
      a4[1] = *a4;
      sentencepiece::SentencePieceText::SentencePieceText((sentencepiece::SentencePieceText *)&v25, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 232))(a1, a2, a3, &v25);
      if (!*(_QWORD *)a5)
      {
        sentencepiece::util::Status::~Status(a5);
        if (v28)
          v10 = v28 + 8;
        else
          v10 = 0;
        if (v27)
        {
          v11 = a4 + 2;
          v12 = a4[1];
          v13 = v10 + 8 * v27;
          do
          {
            v14 = *(_DWORD *)(*(_QWORD *)v10 + 64);
            if ((unint64_t)v12 >= *v11)
            {
              v16 = *a4;
              v17 = (v12 - *a4) >> 2;
              v18 = v17 + 1;
              if ((unint64_t)(v17 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v19 = *v11 - (_QWORD)v16;
              if (v19 >> 1 > v18)
                v18 = v19 >> 1;
              if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
                v20 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v20 = v18;
              if (v20)
              {
                v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a4 + 2), v20);
                v16 = *a4;
                v12 = a4[1];
              }
              else
              {
                v21 = 0;
              }
              v22 = &v21[4 * v17];
              *(_DWORD *)v22 = v14;
              v15 = v22 + 4;
              while (v12 != v16)
              {
                v23 = *((_DWORD *)v12 - 1);
                v12 -= 4;
                *((_DWORD *)v22 - 1) = v23;
                v22 -= 4;
              }
              *a4 = v22;
              a4[1] = v15;
              a4[2] = &v21[4 * v20];
              if (v16)
                operator delete(v16);
            }
            else
            {
              *(_DWORD *)v12 = v14;
              v15 = v12 + 4;
            }
            a4[1] = v15;
            v10 += 8;
            v12 = v15;
          }
          while (v10 != v13);
        }
        sentencepiece::util::Status::Status(a5);
      }
      sentencepiece::SentencePieceText::~SentencePieceText((sentencepiece::SentencePieceText *)&v25);
    }
    else
    {
      v25 = 13;
      v24 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"ids", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v25, (uint64_t)a5);
      v26[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v26 + *(_QWORD *)(v26[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v26[1] = MEMORY[0x24BEDB848] + 16;
      if (v30 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x22E2B0750](&v31);
    }
  }
}

void sub_228452028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::Decode(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  void *__p[3];

  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 160))(a1, __p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

{
  void *__p[3];

  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 272))(a1, __p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_2284520C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::Decode(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, sentencepiece::util::Status *a4@<X8>)
{
  _QWORD *v8;
  unsigned int v9;
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  (*(void (**)(sentencepiece::util::Status *__return_ptr))(*(_QWORD *)a1 + 88))(a4);
  if (!*(_QWORD *)a4)
  {
    sentencepiece::util::Status::~Status(a4);
    if (a3)
    {
      if (*(char *)(a3 + 23) < 0)
      {
        **(_BYTE **)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 23) = 0;
      }
      sentencepiece::SentencePieceText::SentencePieceText((sentencepiece::SentencePieceText *)&v9, 0);
      (*(void (**)(uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 272))(a1, a2, &v9);
      if (!*(_QWORD *)a4)
      {
        sentencepiece::util::Status::~Status(a4);
        std::string::operator=((std::string *)a3, (const std::string *)(v10[8] & 0xFFFFFFFFFFFFFFFELL));
        sentencepiece::util::Status::Status(a4);
      }
      sentencepiece::SentencePieceText::~SentencePieceText((sentencepiece::SentencePieceText *)&v9);
    }
    else
    {
      v9 = 13;
      v8 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"detokenized", 11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v9, (uint64_t)a4);
      v10[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v10[1] = MEMORY[0x24BEDB848] + 16;
      if (v11 < 0)
        operator delete((void *)v10[9]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x22E2B0750](&v12);
    }
  }
}

{
  _QWORD *v8;
  unsigned int v9;
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  (*(void (**)(sentencepiece::util::Status *__return_ptr))(*(_QWORD *)a1 + 88))(a4);
  if (!*(_QWORD *)a4)
  {
    sentencepiece::util::Status::~Status(a4);
    if (a3)
    {
      if (*(char *)(a3 + 23) < 0)
      {
        **(_BYTE **)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 23) = 0;
      }
      sentencepiece::SentencePieceText::SentencePieceText((sentencepiece::SentencePieceText *)&v9, 0);
      (*(void (**)(uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 280))(a1, a2, &v9);
      if (!*(_QWORD *)a4)
      {
        sentencepiece::util::Status::~Status(a4);
        std::string::operator=((std::string *)a3, (const std::string *)(v10[8] & 0xFFFFFFFFFFFFFFFELL));
        sentencepiece::util::Status::Status(a4);
      }
      sentencepiece::SentencePieceText::~SentencePieceText((sentencepiece::SentencePieceText *)&v9);
    }
    else
    {
      v9 = 13;
      v8 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"detokenized", 11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v9, (uint64_t)a4);
      v10[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v10[1] = MEMORY[0x24BEDB848] + 16;
      if (v11 < 0)
        operator delete((void *)v10[9]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x22E2B0750](&v12);
    }
  }
}

void sub_2284522C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

void sub_2284524D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::NBestEncode(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, sentencepiece::util::Status *a6@<X8>)
{
  uint64_t v12;
  void **v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::string *v20;
  uint64_t v21;
  unint64_t v22;
  __int128 v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  __int128 *v27;
  std::string *v28;
  unint64_t v29;
  void **v30;
  _QWORD v31[2];
  int v32;
  uint64_t v33;
  void *__p;
  char v35;
  uint64_t v36;
  __int128 **v37;

  (*(void (**)(sentencepiece::util::Status *__return_ptr))(*(_QWORD *)a1 + 88))(a6);
  if (!*(_QWORD *)a6)
  {
    sentencepiece::util::Status::~Status(a6);
    if (a5)
    {
      v12 = *a5;
      v13 = (void **)a5[1];
      while (v13 != (void **)v12)
      {
        v13 -= 3;
        v30 = v13;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v30);
      }
      a5[1] = v12;
      sentencepiece::NBestSentencePieceText::NBestSentencePieceText((sentencepiece::NBestSentencePieceText *)&v30, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void ***))(*(_QWORD *)a1 + 240))(a1, a2, a3, a4, &v30);
      if (!*(_QWORD *)a6)
      {
        sentencepiece::util::Status::~Status(a6);
        if (v33)
          v14 = (uint64_t *)(v33 + 8);
        else
          v14 = 0;
        if (v32)
        {
          v15 = &v14[v32];
          do
          {
            v16 = *v14;
            v27 = 0;
            v28 = 0;
            v29 = 0;
            v17 = *(_QWORD *)(v16 + 64);
            if (v17)
              v18 = v17 + 8;
            else
              v18 = 0;
            v19 = *(int *)(v16 + 56);
            if ((_DWORD)v19)
            {
              v20 = 0;
              v21 = 8 * v19;
              do
              {
                v22 = *(_QWORD *)(*(_QWORD *)v18 + 48) & 0xFFFFFFFFFFFFFFFELL;
                if ((unint64_t)v20 >= v29)
                {
                  v20 = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string const&>((uint64_t *)&v27, (__int128 *)v22);
                }
                else
                {
                  if (*(char *)(v22 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external(v20, *(const std::string::value_type **)v22, *(_QWORD *)(v22 + 8));
                  }
                  else
                  {
                    v23 = *(_OWORD *)v22;
                    v20->__r_.__value_.__r.__words[2] = *(_QWORD *)(v22 + 16);
                    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v23;
                  }
                  ++v20;
                }
                v28 = v20;
                v18 += 8;
                v21 -= 8;
              }
              while (v21);
            }
            v24 = a5[1];
            if (v24 >= a5[2])
            {
              v25 = std::vector<std::vector<std::string>>::__emplace_back_slow_path<std::vector<std::string>&>(a5, &v27);
            }
            else
            {
              std::vector<std::vector<std::string>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string>&>((uint64_t)a5, &v27);
              v25 = v24 + 24;
            }
            a5[1] = v25;
            v37 = &v27;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
            ++v14;
          }
          while (v14 != v15);
        }
        sentencepiece::util::Status::Status(a6);
      }
      sentencepiece::NBestSentencePieceText::~NBestSentencePieceText((sentencepiece::NBestSentencePieceText *)&v30);
    }
    else
    {
      LODWORD(v30) = 13;
      v26 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v31);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"pieces", 6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v30, (uint64_t)a6);
      v31[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v31 + *(_QWORD *)(v31[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v31[1] = MEMORY[0x24BEDB848] + 16;
      if (v35 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x22E2B0750](&v36);
    }
  }
}

{
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  int v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  void *__p;
  char *v34;
  char *v35;
  unsigned int v36;
  _QWORD v37[2];
  int v38;
  uint64_t v39;
  void *v40;
  char v41;
  uint64_t v42;

  (*(void (**)(sentencepiece::util::Status *__return_ptr))(*(_QWORD *)a1 + 88))(a6);
  if (!*(_QWORD *)a6)
  {
    sentencepiece::util::Status::~Status(a6);
    if (a5)
    {
      std::vector<std::vector<int>>::__clear[abi:ne180100](a5);
      sentencepiece::NBestSentencePieceText::NBestSentencePieceText((sentencepiece::NBestSentencePieceText *)&v36, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 240))(a1, a2, a3, a4, &v36);
      if (!*(_QWORD *)a6)
      {
        sentencepiece::util::Status::~Status(a6);
        if (v39)
          v12 = (uint64_t *)(v39 + 8);
        else
          v12 = 0;
        if (v38)
        {
          v32 = &v12[v38];
          do
          {
            v13 = *v12;
            __p = 0;
            v34 = 0;
            v35 = 0;
            v14 = *(_QWORD *)(v13 + 64);
            if (v14)
              v15 = v14 + 8;
            else
              v15 = 0;
            v16 = *(int *)(v13 + 56);
            if ((_DWORD)v16)
            {
              v17 = 0;
              v18 = v15 + 8 * v16;
              do
              {
                v19 = *(_DWORD *)(*(_QWORD *)v15 + 64);
                if (v17 >= v35)
                {
                  v21 = (char *)__p;
                  v22 = (v17 - (_BYTE *)__p) >> 2;
                  v23 = v22 + 1;
                  if ((unint64_t)(v22 + 1) >> 62)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v24 = v35 - (_BYTE *)__p;
                  if ((v35 - (_BYTE *)__p) >> 1 > v23)
                    v23 = v24 >> 1;
                  if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
                    v25 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v25 = v23;
                  if (v25)
                  {
                    v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v35, v25);
                    v21 = (char *)__p;
                    v17 = v34;
                  }
                  else
                  {
                    v26 = 0;
                  }
                  v27 = &v26[4 * v22];
                  *(_DWORD *)v27 = v19;
                  v20 = v27 + 4;
                  while (v17 != v21)
                  {
                    v28 = *((_DWORD *)v17 - 1);
                    v17 -= 4;
                    *((_DWORD *)v27 - 1) = v28;
                    v27 -= 4;
                  }
                  __p = v27;
                  v34 = v20;
                  v35 = &v26[4 * v25];
                  if (v21)
                    operator delete(v21);
                }
                else
                {
                  *(_DWORD *)v17 = v19;
                  v20 = v17 + 4;
                }
                v34 = v20;
                v15 += 8;
                v17 = v20;
              }
              while (v15 != v18);
            }
            v29 = a5[1];
            if (v29 >= a5[2])
            {
              v30 = std::vector<std::vector<int>>::__emplace_back_slow_path<std::vector<int>&>(a5, (uint64_t)&__p);
            }
            else
            {
              std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int>&>((uint64_t)a5, (uint64_t)&__p);
              v30 = v29 + 24;
            }
            a5[1] = v30;
            if (__p)
            {
              v34 = (char *)__p;
              operator delete(__p);
            }
            ++v12;
          }
          while (v12 != v32);
        }
        sentencepiece::util::Status::Status(a6);
      }
      sentencepiece::NBestSentencePieceText::~NBestSentencePieceText((sentencepiece::NBestSentencePieceText *)&v36);
    }
    else
    {
      v36 = 13;
      v31 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"ids", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v36, (uint64_t)a6);
      v37[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v37 + *(_QWORD *)(v37[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v37[1] = MEMORY[0x24BEDB848] + 16;
      if (v41 < 0)
        operator delete(v40);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x22E2B0750](&v42);
    }
  }
}

void sub_2284527F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)va);
  _Unwind_Resume(a1);
}

void sub_228452B94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a14);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncode(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, sentencepiece::util::Status *a6@<X8>, float a7@<S0>)
{
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 *v17;
  _QWORD *v18;
  unsigned int v19;
  _QWORD v20[6];
  int v21;
  uint64_t v22;
  void *__p;
  char v24;
  uint64_t v25;

  (*(void (**)(sentencepiece::util::Status *__return_ptr))(*(_QWORD *)a1 + 88))(a6);
  if (!*(_QWORD *)a6)
  {
    sentencepiece::util::Status::~Status(a6);
    if (a5)
    {
      std::vector<std::string>::__clear[abi:ne180100](a5);
      sentencepiece::SentencePieceText::SentencePieceText((sentencepiece::SentencePieceText *)&v19, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, float))(*(_QWORD *)a1 + 248))(a1, a2, a3, a4, &v19, a7);
      if (!*(_QWORD *)a6)
      {
        sentencepiece::util::Status::~Status(a6);
        if (v22)
          v14 = v22 + 8;
        else
          v14 = 0;
        if (v21)
        {
          v15 = a5[1];
          v16 = 8 * v21;
          do
          {
            v17 = (__int128 *)(*(_QWORD *)(*(_QWORD *)v14 + 48) & 0xFFFFFFFFFFFFFFFELL);
            if (v15 >= a5[2])
            {
              v15 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(a5, v17);
            }
            else
            {
              std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a5, v17);
              v15 += 24;
            }
            a5[1] = v15;
            v14 += 8;
            v16 -= 8;
          }
          while (v16);
        }
        sentencepiece::util::Status::Status(a6);
      }
      sentencepiece::SentencePieceText::~SentencePieceText((sentencepiece::SentencePieceText *)&v19);
    }
    else
    {
      v19 = 13;
      v18 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"pieces", 6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v19, (uint64_t)a6);
      v20[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v20 + *(_QWORD *)(v20[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v20[1] = MEMORY[0x24BEDB848] + 16;
      if (v24 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x22E2B0750](&v25);
    }
  }
}

void sub_228452E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncode(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char **a5@<X4>, sentencepiece::util::Status *a6@<X8>, float a7@<S0>)
{
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  int v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  int v27;
  _QWORD *v28;
  unsigned int v29;
  _QWORD v30[6];
  int v31;
  uint64_t v32;
  void *__p;
  char v34;
  uint64_t v35;

  (*(void (**)(sentencepiece::util::Status *__return_ptr))(*(_QWORD *)a1 + 88))(a6);
  if (!*(_QWORD *)a6)
  {
    sentencepiece::util::Status::~Status(a6);
    if (a5)
    {
      a5[1] = *a5;
      sentencepiece::SentencePieceText::SentencePieceText((sentencepiece::SentencePieceText *)&v29, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, float))(*(_QWORD *)a1 + 248))(a1, a2, a3, a4, &v29, a7);
      if (!*(_QWORD *)a6)
      {
        sentencepiece::util::Status::~Status(a6);
        if (v32)
          v14 = v32 + 8;
        else
          v14 = 0;
        if (v31)
        {
          v15 = a5 + 2;
          v16 = a5[1];
          v17 = v14 + 8 * v31;
          do
          {
            v18 = *(_DWORD *)(*(_QWORD *)v14 + 64);
            if ((unint64_t)v16 >= *v15)
            {
              v20 = *a5;
              v21 = (v16 - *a5) >> 2;
              v22 = v21 + 1;
              if ((unint64_t)(v21 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v23 = *v15 - (_QWORD)v20;
              if (v23 >> 1 > v22)
                v22 = v23 >> 1;
              if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
                v24 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v24 = v22;
              if (v24)
              {
                v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a5 + 2), v24);
                v20 = *a5;
                v16 = a5[1];
              }
              else
              {
                v25 = 0;
              }
              v26 = &v25[4 * v21];
              *(_DWORD *)v26 = v18;
              v19 = v26 + 4;
              while (v16 != v20)
              {
                v27 = *((_DWORD *)v16 - 1);
                v16 -= 4;
                *((_DWORD *)v26 - 1) = v27;
                v26 -= 4;
              }
              *a5 = v26;
              a5[1] = v19;
              a5[2] = &v25[4 * v24];
              if (v20)
                operator delete(v20);
            }
            else
            {
              *(_DWORD *)v16 = v18;
              v19 = v16 + 4;
            }
            a5[1] = v19;
            v14 += 8;
            v16 = v19;
          }
          while (v14 != v17);
        }
        sentencepiece::util::Status::Status(a6);
      }
      sentencepiece::SentencePieceText::~SentencePieceText((sentencepiece::SentencePieceText *)&v29);
    }
    else
    {
      v29 = 13;
      v28 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v30);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"ids", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v29, (uint64_t)a6);
      v30[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v30 + *(_QWORD *)(v30[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v30[1] = MEMORY[0x24BEDB848] + 16;
      if (v34 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x22E2B0750](&v35);
    }
  }
}

void sub_228453130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncodeAndScore(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, sentencepiece::util::Status *a8@<X8>, float a9@<S0>)
{
  uint64_t v18;
  void **v19;
  std::string *v20;
  std::string *v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::string *end;
  uint64_t v30;
  unint64_t v31;
  __int128 v32;
  unint64_t v33;
  uint64_t v34;
  std::vector<std::string> v35;
  void **v36;
  _QWORD v37[2];
  int v38;
  uint64_t v39;
  void *__p;
  char v41;
  uint64_t v42;
  void **v43[2];

  (*(void (**)(sentencepiece::util::Status *__return_ptr))(*(_QWORD *)a1 + 88))(a8);
  if (!*(_QWORD *)a8)
  {
    sentencepiece::util::Status::~Status(a8);
    if (a7)
    {
      v18 = *a7;
      v19 = (void **)a7[1];
      while (v19 != (void **)v18)
      {
        v19 -= 4;
        v36 = v19;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v36);
      }
      a7[1] = v18;
      sentencepiece::NBestSentencePieceText::NBestSentencePieceText((sentencepiece::NBestSentencePieceText *)&v36, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void ***, float))(*(_QWORD *)a1 + 256))(a1, a2, a3, a4, a5, a6, &v36, a9);
      if (!*(_QWORD *)a8)
      {
        sentencepiece::util::Status::~Status(a8);
        v20 = (std::string *)*a7;
        v21 = (std::string *)a7[1];
        while (v21 != v20)
        {
          v21 = (std::string *)((char *)v21 - 32);
          v35.__begin_ = v21;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
        }
        a7[1] = (uint64_t)v20;
        std::vector<std::pair<std::vector<std::string>,float>>::reserve(a7, v38);
        if (v39)
          v23 = (uint64_t *)(v39 + 8);
        else
          v23 = 0;
        if (v38)
        {
          v24 = &v23[v38];
          do
          {
            v25 = *v23;
            memset(&v35, 0, sizeof(v35));
            std::vector<std::string>::reserve(&v35, *(int *)(v25 + 56));
            v26 = *(_QWORD *)(v25 + 64);
            if (v26)
              v27 = v26 + 8;
            else
              v27 = 0;
            v28 = *(int *)(v25 + 56);
            if ((_DWORD)v28)
            {
              end = v35.__end_;
              v30 = 8 * v28;
              do
              {
                v31 = *(_QWORD *)(*(_QWORD *)v27 + 48) & 0xFFFFFFFFFFFFFFFELL;
                if (end >= v35.__end_cap_.__value_)
                {
                  end = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string const&>((uint64_t *)&v35, (__int128 *)v31);
                }
                else
                {
                  if (*(char *)(v31 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)v31, *(_QWORD *)(v31 + 8));
                  }
                  else
                  {
                    v32 = *(_OWORD *)v31;
                    end->__r_.__value_.__r.__words[2] = *(_QWORD *)(v31 + 16);
                    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v32;
                  }
                  ++end;
                }
                v35.__end_ = end;
                v27 += 8;
                v30 -= 8;
              }
              while (v30);
            }
            LODWORD(v43[0]) = *(_DWORD *)(v25 + 80);
            v33 = a7[1];
            if (v33 >= a7[2])
            {
              v34 = std::vector<std::pair<std::vector<std::string>,float>>::__emplace_back_slow_path<std::vector<std::string>&,float>(a7, (__int128 **)&v35, v43);
            }
            else
            {
              std::vector<std::pair<std::vector<std::string>,float>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string>&,float>((uint64_t)a7, (__int128 **)&v35, (float *)v43);
              v34 = v33 + 32;
            }
            a7[1] = v34;
            v43[0] = (void **)&v35;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v43);
            ++v23;
          }
          while (v23 != v24);
        }
        sentencepiece::util::Status::Status(a8);
      }
      sentencepiece::NBestSentencePieceText::~NBestSentencePieceText((sentencepiece::NBestSentencePieceText *)&v36);
    }
    else
    {
      LODWORD(v36) = 13;
      v22 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"pieces", 6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v36, (uint64_t)a8);
      v37[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v37 + *(_QWORD *)(v37[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v37[1] = MEMORY[0x24BEDB848] + 16;
      if (v41 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x22E2B0750](&v42);
    }
  }
}

{
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::vector<int>::pointer end;
  int v25;
  int *v26;
  std::vector<int>::pointer begin;
  uint64_t v28;
  unint64_t v29;
  int64_t v30;
  unint64_t v31;
  char *v32;
  int *v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  sentencepiece::util::Status *v38;
  uint64_t *v39;
  int v40;
  std::vector<int> v41;
  unsigned int v42;
  _QWORD v43[2];
  int v44;
  uint64_t v45;
  void *__p;
  char v47;
  uint64_t v48;

  (*(void (**)(sentencepiece::util::Status *__return_ptr))(*(_QWORD *)a1 + 88))(a8);
  if (!*(_QWORD *)a8)
  {
    sentencepiece::util::Status::~Status(a8);
    if (a7)
    {
      std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__clear[abi:ne180100](a7);
      sentencepiece::NBestSentencePieceText::NBestSentencePieceText((sentencepiece::NBestSentencePieceText *)&v42, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, float))(*(_QWORD *)a1 + 256))(a1, a2, a3, a4, a5, a6, &v42, a9);
      if (!*(_QWORD *)a8)
      {
        v38 = a8;
        sentencepiece::util::Status::~Status(a8);
        std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__clear[abi:ne180100](a7);
        std::vector<std::pair<std::vector<int>,float>>::reserve(a7, v44);
        if (v45)
          v18 = (uint64_t *)(v45 + 8);
        else
          v18 = 0;
        if (v44)
        {
          v39 = &v18[v44];
          do
          {
            v19 = *v18;
            memset(&v41, 0, sizeof(v41));
            std::vector<int>::reserve(&v41, *(int *)(v19 + 56));
            v20 = *(_QWORD *)(v19 + 64);
            if (v20)
              v21 = v20 + 8;
            else
              v21 = 0;
            v22 = *(int *)(v19 + 56);
            if ((_DWORD)v22)
            {
              v23 = v21 + 8 * v22;
              end = v41.__end_;
              do
              {
                v25 = *(_DWORD *)(*(_QWORD *)v21 + 64);
                if (end >= v41.__end_cap_.__value_)
                {
                  begin = v41.__begin_;
                  v28 = end - v41.__begin_;
                  v29 = v28 + 1;
                  if ((unint64_t)(v28 + 1) >> 62)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v30 = (char *)v41.__end_cap_.__value_ - (char *)v41.__begin_;
                  if (((char *)v41.__end_cap_.__value_ - (char *)v41.__begin_) >> 1 > v29)
                    v29 = v30 >> 1;
                  if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
                    v31 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v31 = v29;
                  if (v31)
                  {
                    v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v41.__end_cap_, v31);
                    begin = v41.__begin_;
                    end = v41.__end_;
                  }
                  else
                  {
                    v32 = 0;
                  }
                  v33 = (int *)&v32[4 * v28];
                  *v33 = v25;
                  v26 = v33 + 1;
                  while (end != begin)
                  {
                    v34 = *--end;
                    *--v33 = v34;
                  }
                  v41.__begin_ = v33;
                  v41.__end_ = v26;
                  v41.__end_cap_.__value_ = (int *)&v32[4 * v31];
                  if (begin)
                    operator delete(begin);
                }
                else
                {
                  *end = v25;
                  v26 = end + 1;
                }
                v41.__end_ = v26;
                v21 += 8;
                end = v26;
              }
              while (v21 != v23);
            }
            v40 = *(_DWORD *)(v19 + 80);
            v35 = a7[1];
            if (v35 >= a7[2])
            {
              v36 = std::vector<std::pair<std::vector<int>,float>>::__emplace_back_slow_path<std::vector<int>&,float>(a7, (uint64_t)&v41, &v40);
            }
            else
            {
              std::vector<std::pair<std::vector<int>,float>>::__construct_one_at_end[abi:ne180100]<std::vector<int>&,float>((uint64_t)a7, (uint64_t)&v41, (float *)&v40);
              v36 = v35 + 32;
            }
            a7[1] = v36;
            if (v41.__begin_)
            {
              v41.__end_ = v41.__begin_;
              operator delete(v41.__begin_);
            }
            ++v18;
          }
          while (v18 != v39);
        }
        sentencepiece::util::Status::Status(v38);
      }
      sentencepiece::NBestSentencePieceText::~NBestSentencePieceText((sentencepiece::NBestSentencePieceText *)&v42);
    }
    else
    {
      v42 = 13;
      v37 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v43);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"ids", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v42, (uint64_t)a8);
      v43[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v43 + *(_QWORD *)(v43[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v43[1] = MEMORY[0x24BEDB848] + 16;
      if (v47 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x22E2B0750](&v48);
    }
  }
}

void sub_2284534C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)va);
  _Unwind_Resume(a1);
}

void **std::vector<std::pair<std::vector<std::string>,float>>::reserve(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<sentencepiece::ImmutableSentencePieceText>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 32 * v6;
    std::vector<std::pair<std::vector<std::string>,float>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::pair<std::vector<std::string>,float>>::~__split_buffer(v7);
  }
  return result;
}

void sub_228453594(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::vector<std::string>,float>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::reserve(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  std::allocator<std::string> *p_end_cap;
  std::string *value;
  int64_t v5;
  uint64_t v6;
  std::__split_buffer<std::string> __v;

  value = this->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::string> *)&this->__end_cap_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3) < __n)
  {
    if (__n >= 0xAAAAAAAAAAAAAABLL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = (char *)this->__end_ - (char *)this->__begin_;
    __v.__end_cap_.__value_ = p_end_cap;
    __v.__first_ = (std::__split_buffer<std::string>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string_view,int>>>((uint64_t)p_end_cap, __n);
    __v.__begin_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_cap_.__value_ = &__v.__first_[v6];
    std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
}

void sub_228453644(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void sub_2284539FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a16);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::vector<int>,float>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<sentencepiece::ImmutableSentencePieceText>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 32 * v6;
    std::vector<std::pair<std::vector<int>,float>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_228453AC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<int>::reserve(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::__compressed_pair<int *> *p_end_cap;
  int *value;
  int64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  int *v9;
  std::vector<int>::pointer begin;
  int *end;
  int *v12;
  int v13;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (__n > value - this->__begin_)
  {
    if (__n >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = (char *)this->__end_ - (char *)this->__begin_;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, __n);
    v7 = (int *)&v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = (int *)&v6[4 * v8];
    begin = this->__begin_;
    end = this->__end_;
    v12 = v7;
    if (end != this->__begin_)
    {
      v12 = v7;
      do
      {
        v13 = *--end;
        *--v12 = v13;
      }
      while (end != begin);
    }
    this->__begin_ = v12;
    this->__end_ = v7;
    this->__end_cap_.__value_ = v9;
    if (begin)
      operator delete(begin);
  }
}

_QWORD *sentencepiece::SentencePieceProcessor::PopulateSentencePieceText@<X0>(sentencepiece::ModelInterface **a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X4>, uint64_t *a5@<X5>, unsigned __int8 ***a6@<X6>, uint64_t a7@<X7>, sentencepiece::util::Status *a8@<X8>)
{
  unsigned __int8 **v10;
  uint64_t *v11;
  unint64_t v12;
  char v13;
  size_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  size_t v24;
  size_t v25;
  size_t v26;
  size_t v27;
  char *v28;
  size_t v29;
  sentencepiece *v30;
  unsigned int v31;
  int *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::string *p_dst;
  std::string::size_type size;
  int v40;
  std::string *v41;
  std::string::size_type v42;
  uint64_t v43;
  google::protobuf::internal::ArenaImpl *v44;
  int v45;
  uint64_t v46;
  google::protobuf::internal::ArenaImpl *v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  google::protobuf::internal::ArenaImpl *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  std::string *v59;
  int *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  google::protobuf::internal::ArenaImpl *v66;
  int v67;
  uint64_t v68;
  google::protobuf::internal::ArenaImpl *v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  int v73;
  const std::string::value_type *v74;
  std::string::size_type v75;
  std::string *v76;
  __int128 v77;
  uint64_t v78;
  google::protobuf::internal::ArenaImpl *v79;
  size_t v80;
  uint64_t v81;
  std::string *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  int v86;
  const std::string::value_type *v87;
  std::string::size_type v88;
  std::string *v89;
  __int128 v90;
  uint64_t v91;
  google::protobuf::internal::ArenaImpl *v92;
  _QWORD *result;
  uint64_t v94;
  google::protobuf::internal::ArenaImpl *v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  google::protobuf::internal::ArenaStringPtr *v104;
  unsigned __int8 **v110;
  int v111;
  unsigned int *v112;
  char *__src;
  size_t __len;
  std::string __dst;
  void *__p[2];
  uint64_t v117;
  void *v118;
  char v119;
  uint64_t v120;

  v10 = *a6;
  v110 = a6[1];
  if (*a6 != v110)
  {
    v11 = a5;
    v12 = 0;
    v13 = 0;
    v112 = (unsigned int *)(a7 + 48);
    while (1)
    {
      v14 = (size_t)v10[1];
      if (!v14)
      {
        LODWORD(__p[0]) = 13;
        v97 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[1]);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"!w.empty()", 10);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"] ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"Empty piece is not allowed.", 27);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      v15 = *v10;
      v16 = *((unsigned int *)v10 + 4);
      v111 = (*((uint64_t (**)(sentencepiece::ModelInterface **, uint64_t))*a1 + 66))(a1, v16);
      if ((*((unsigned int (**)(sentencepiece::ModelInterface **, uint64_t))*a1 + 67))(a1, v16))
      {
        v17 = *(int **)(a7 + 64);
        if (v17)
        {
          v18 = *(int *)(a7 + 56);
          v19 = *v17;
          if ((int)v18 < *v17)
          {
            *(_DWORD *)(a7 + 56) = v18 + 1;
            v20 = *(_QWORD *)&v17[2 * v18 + 2];
LABEL_58:
            *(_DWORD *)(v20 + 40) |= 1u;
            std::string::basic_string[abi:ne180100](__p, v15, v14);
            v53 = *(_QWORD *)(v20 + 8);
            v54 = (google::protobuf::internal::ArenaImpl *)(v53 & 0xFFFFFFFFFFFFFFFELL);
            if ((v53 & 1) != 0)
              v54 = *(google::protobuf::internal::ArenaImpl **)v54;
            google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(v20 + 48), (__int128 *)__p, v54);
            if (SHIBYTE(v117) < 0)
              operator delete(__p[0]);
            v55 = *(_DWORD *)(v20 + 40);
            *(_DWORD *)(v20 + 64) = v16;
            v56 = *(_QWORD *)(*v11 + 8 * v12);
            *(_DWORD *)(v20 + 68) = v56;
            *(_DWORD *)(v20 + 40) = v55 | 0x1C;
            goto LABEL_83;
          }
          if (v19 != *(_DWORD *)(a7 + 60))
          {
LABEL_57:
            *v17 = v19 + 1;
            v20 = google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText_SentencePiece>(*(_QWORD *)(a7 + 48));
            v51 = *(_QWORD *)(a7 + 64);
            v52 = *(int *)(a7 + 56);
            *(_DWORD *)(a7 + 56) = v52 + 1;
            *(_QWORD *)(v51 + 8 * v52 + 8) = v20;
            goto LABEL_58;
          }
        }
        else
        {
          v19 = *(_DWORD *)(a7 + 60);
        }
        google::protobuf::RepeatedPtrField<std::string>::Reserve(v112, v19 + 1);
        v17 = *(int **)(a7 + 64);
        v19 = *v17;
        goto LABEL_57;
      }
      v21 = *v11;
      v22 = v11[1] - *v11;
      if (v12 >= v22 >> 3)
      {
        LODWORD(__p[0]) = 13;
        v98 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[1]);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(begin) < (norm_to_orig.size())", 31);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"] ", 2);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      v23 = v14 + v12;
      if (v14 + v12 >= v22 >> 3)
      {
        LODWORD(__p[0]) = 13;
        v99 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[1]);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(end) < (norm_to_orig.size())", 29);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"] ", 2);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      v24 = *(_QWORD *)(v21 + 8 * v12);
      if (v24 > a3)
      {
        LODWORD(__p[0]) = 13;
        v100 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[1]);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(orig_begin) <= (input.size())", 30);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"] ", 2);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      v25 = *(_QWORD *)(v21 + 8 * v23);
      if (v25 > a3)
      {
        LODWORD(__p[0]) = 13;
        v101 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[1]);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(orig_end) <= (input.size())", 28);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"] ", 2);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      v26 = v25 - v24;
      if (v25 < v24)
      {
        LODWORD(__p[0]) = 13;
        v102 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[1]);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(orig_begin) <= (orig_end)", 26);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"] ", 2);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      if (a3 >= v24)
        v27 = v24;
      else
        v27 = a3;
      v28 = &a2[v27];
      v29 = a3 - v27;
      if (v29 < v26)
        v26 = v29;
      __src = v28;
      __len = v26;
      if (v111)
      {
        if ((*(unsigned int (**)(sentencepiece::ModelInterface *))(*(_QWORD *)a1[1] + 184))(a1[1]))
        {
          while (1)
          {
            v31 = *v15++;
            v30 = (sentencepiece *)v31;
            v32 = *(int **)(a7 + 64);
            if (!v32)
              break;
            v33 = *(int *)(a7 + 56);
            v34 = *v32;
            if ((int)v33 >= *v32)
            {
              if (v34 == *(_DWORD *)(a7 + 60))
              {
LABEL_25:
                google::protobuf::RepeatedPtrField<std::string>::Reserve(v112, v34 + 1);
                v32 = *(int **)(a7 + 64);
                v34 = *v32;
              }
              *v32 = v34 + 1;
              v35 = google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText_SentencePiece>(*(_QWORD *)(a7 + 48));
              v36 = *(_QWORD *)(a7 + 64);
              v37 = *(int *)(a7 + 56);
              *(_DWORD *)(a7 + 56) = v37 + 1;
              *(_QWORD *)(v36 + 8 * v37 + 8) = v35;
              goto LABEL_27;
            }
            *(_DWORD *)(a7 + 56) = v33 + 1;
            v35 = *(_QWORD *)&v32[2 * v33 + 2];
LABEL_27:
            sentencepiece::ByteToPiece(v30, (uint64_t)&__dst);
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_dst = &__dst;
            else
              p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            else
              size = __dst.__r_.__value_.__l.__size_;
            v40 = (*(uint64_t (**)(sentencepiece::ModelInterface *, std::string *, std::string::size_type))(*(_QWORD *)a1[1] + 112))(a1[1], p_dst, size);
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v41 = &__dst;
            else
              v41 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v42 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            else
              v42 = __dst.__r_.__value_.__l.__size_;
            *(_DWORD *)(v35 + 40) |= 1u;
            std::string::basic_string[abi:ne180100](__p, v41, v42);
            v43 = *(_QWORD *)(v35 + 8);
            v44 = (google::protobuf::internal::ArenaImpl *)(v43 & 0xFFFFFFFFFFFFFFFELL);
            if ((v43 & 1) != 0)
              v44 = *(google::protobuf::internal::ArenaImpl **)v44;
            google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(v35 + 48), (__int128 *)__p, v44);
            if (SHIBYTE(v117) < 0)
              operator delete(__p[0]);
            v45 = *(_DWORD *)(v35 + 40);
            *(_DWORD *)(v35 + 40) = v45 | 4;
            *(_DWORD *)(v35 + 64) = v40;
            if (v14 == 1)
            {
              *(_DWORD *)(v35 + 40) = v45 | 6;
              std::string::basic_string[abi:ne180100](__p, __src, __len);
              v46 = *(_QWORD *)(v35 + 8);
              v47 = (google::protobuf::internal::ArenaImpl *)(v46 & 0xFFFFFFFFFFFFFFFELL);
              if ((v46 & 1) != 0)
                v47 = *(google::protobuf::internal::ArenaImpl **)v47;
              google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(v35 + 56), (__int128 *)__p, v47);
              if (SHIBYTE(v117) < 0)
                operator delete(__p[0]);
              v48 = *(_DWORD *)(v35 + 40);
              *(_DWORD *)(v35 + 68) = v24;
              v49 = v48 | 0x18;
              v50 = v25;
            }
            else
            {
              *(_DWORD *)(v35 + 68) = v24;
              v49 = v45 | 0x1C;
              v50 = v24;
            }
            *(_DWORD *)(v35 + 40) = v49;
            *(_DWORD *)(v35 + 72) = v50;
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__dst.__r_.__value_.__l.__data_);
            if (!--v14)
            {
              v12 = v23;
              v11 = a5;
              goto LABEL_84;
            }
          }
          v34 = *(_DWORD *)(a7 + 60);
          goto LABEL_25;
        }
        if ((v13 & 1) != 0)
        {
          v57 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>((uint64_t)v112, *(_DWORD *)(a7 + 56) - 1);
          if (v14 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_141;
          v20 = v57;
          v58 = *(_QWORD *)(v57 + 48);
          v104 = (google::protobuf::internal::ArenaStringPtr *)(v57 + 48);
          if (v14 >= 0x17)
          {
            v71 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v14 | 7) != 0x17)
              v71 = v14 | 7;
            v103 = v71 + 1;
            v59 = (std::string *)operator new(v71 + 1);
            __dst.__r_.__value_.__l.__size_ = v14;
            __dst.__r_.__value_.__r.__words[2] = v103 | 0x8000000000000000;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
          }
          else
          {
            *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v14;
            v59 = &__dst;
          }
          v72 = v58 & 0xFFFFFFFFFFFFFFFELL;
          memmove(v59, v15, v14);
          v59->__r_.__value_.__s.__data_[v14] = 0;
          v73 = *(char *)(v72 + 23);
          if (v73 >= 0)
            v74 = (const std::string::value_type *)v72;
          else
            v74 = *(const std::string::value_type **)v72;
          if (v73 >= 0)
            v75 = *(unsigned __int8 *)(v72 + 23);
          else
            v75 = *(_QWORD *)(v72 + 8);
          v76 = std::string::insert(&__dst, 0, v74, v75);
          v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
          v117 = v76->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v77;
          v76->__r_.__value_.__l.__size_ = 0;
          v76->__r_.__value_.__r.__words[2] = 0;
          v76->__r_.__value_.__r.__words[0] = 0;
          *(_DWORD *)(v20 + 40) |= 1u;
          v78 = *(_QWORD *)(v20 + 8);
          v79 = (google::protobuf::internal::ArenaImpl *)(v78 & 0xFFFFFFFFFFFFFFFELL);
          v80 = __len;
          if ((v78 & 1) != 0)
            v79 = *(google::protobuf::internal::ArenaImpl **)v79;
          google::protobuf::internal::ArenaStringPtr::Set(v104, (__int128 *)__p, v79);
          if (SHIBYTE(v117) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          if (__len > 0x7FFFFFFFFFFFFFF7)
LABEL_141:
            std::string::__throw_length_error[abi:ne180100]();
          v81 = *(_QWORD *)(v20 + 56);
          if (__len >= 0x17)
          {
            v83 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((__len | 7) != 0x17)
              v83 = __len | 7;
            v84 = v83 + 1;
            v82 = (std::string *)operator new(v83 + 1);
            v85 = v84 | 0x8000000000000000;
            v80 = __len;
            __dst.__r_.__value_.__l.__size_ = __len;
            __dst.__r_.__value_.__r.__words[2] = v85;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
          }
          else
          {
            *((_BYTE *)&__dst.__r_.__value_.__s + 23) = __len;
            v82 = &__dst;
            if (!__len)
              goto LABEL_109;
          }
          memmove(v82, __src, v80);
LABEL_109:
          v82->__r_.__value_.__s.__data_[v80] = 0;
          v86 = *(char *)((v81 & 0xFFFFFFFFFFFFFFFELL) + 23);
          if (v86 >= 0)
            v87 = (const std::string::value_type *)(v81 & 0xFFFFFFFFFFFFFFFELL);
          else
            v87 = *(const std::string::value_type **)(v81 & 0xFFFFFFFFFFFFFFFELL);
          if (v86 >= 0)
            v88 = *(unsigned __int8 *)((v81 & 0xFFFFFFFFFFFFFFFELL) + 23);
          else
            v88 = *(_QWORD *)((v81 & 0xFFFFFFFFFFFFFFFELL) + 8);
          v89 = std::string::insert(&__dst, 0, v87, v88);
          v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
          v117 = v89->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v90;
          v89->__r_.__value_.__l.__size_ = 0;
          v89->__r_.__value_.__r.__words[2] = 0;
          v89->__r_.__value_.__r.__words[0] = 0;
          *(_DWORD *)(v20 + 40) |= 2u;
          v91 = *(_QWORD *)(v20 + 8);
          v92 = (google::protobuf::internal::ArenaImpl *)(v91 & 0xFFFFFFFFFFFFFFFELL);
          v11 = a5;
          if ((v91 & 1) != 0)
            v92 = *(google::protobuf::internal::ArenaImpl **)v92;
          google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(v20 + 56), (__int128 *)__p, v92);
          if (SHIBYTE(v117) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          *(_DWORD *)(v20 + 40) |= 0x10u;
          LODWORD(v56) = v25;
          v12 = v23;
          goto LABEL_83;
        }
      }
      v60 = *(int **)(a7 + 64);
      if (!v60)
        break;
      v61 = *(int *)(a7 + 56);
      v62 = *v60;
      if ((int)v61 >= *v60)
      {
        if (v62 == *(_DWORD *)(a7 + 60))
        {
LABEL_72:
          google::protobuf::RepeatedPtrField<std::string>::Reserve(v112, v62 + 1);
          v60 = *(int **)(a7 + 64);
          v62 = *v60;
        }
        *v60 = v62 + 1;
        v20 = google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText_SentencePiece>(*(_QWORD *)(a7 + 48));
        v63 = *(_QWORD *)(a7 + 64);
        v64 = *(int *)(a7 + 56);
        *(_DWORD *)(a7 + 56) = v64 + 1;
        *(_QWORD *)(v63 + 8 * v64 + 8) = v20;
        goto LABEL_74;
      }
      *(_DWORD *)(a7 + 56) = v61 + 1;
      v20 = *(_QWORD *)&v60[2 * v61 + 2];
LABEL_74:
      *(_DWORD *)(v20 + 40) |= 1u;
      std::string::basic_string[abi:ne180100](__p, v15, v14);
      v65 = *(_QWORD *)(v20 + 8);
      v66 = (google::protobuf::internal::ArenaImpl *)(v65 & 0xFFFFFFFFFFFFFFFELL);
      if ((v65 & 1) != 0)
        v66 = *(google::protobuf::internal::ArenaImpl **)v66;
      google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(v20 + 48), (__int128 *)__p, v66);
      if (SHIBYTE(v117) < 0)
        operator delete(__p[0]);
      v67 = *(_DWORD *)(v20 + 40);
      *(_DWORD *)(v20 + 64) = v16;
      *(_DWORD *)(v20 + 40) = v67 | 6;
      std::string::basic_string[abi:ne180100](__p, __src, __len);
      v68 = *(_QWORD *)(v20 + 8);
      v69 = (google::protobuf::internal::ArenaImpl *)(v68 & 0xFFFFFFFFFFFFFFFELL);
      if ((v68 & 1) != 0)
        v69 = *(google::protobuf::internal::ArenaImpl **)v69;
      google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(v20 + 56), (__int128 *)__p, v69);
      if (SHIBYTE(v117) < 0)
        operator delete(__p[0]);
      v70 = *(_DWORD *)(v20 + 40);
      *(_DWORD *)(v20 + 68) = v24;
      *(_DWORD *)(v20 + 40) = v70 | 0x18;
      LODWORD(v56) = v25;
      v12 = v23;
      v11 = a5;
LABEL_83:
      *(_DWORD *)(v20 + 72) = v56;
      v23 = v12;
LABEL_84:
      v10 += 3;
      v13 = v111;
      if (v10 == v110)
        goto LABEL_123;
    }
    v62 = *(_DWORD *)(a7 + 60);
    goto LABEL_72;
  }
  v23 = 0;
LABEL_123:
  if (v23 == a4)
  {
    result = sentencepiece::SentencePieceProcessor::ApplyExtraOptions(a1, (uint64_t)(a1 + 5), a7, a8);
    if (!*(_QWORD *)a8)
    {
      sentencepiece::util::Status::~Status(a8);
      *(_DWORD *)(a7 + 40) |= 1u;
      std::string::basic_string[abi:ne180100](__p, a2, a3);
      v94 = *(_QWORD *)(a7 + 8);
      v95 = (google::protobuf::internal::ArenaImpl *)(v94 & 0xFFFFFFFFFFFFFFFELL);
      if ((v94 & 1) != 0)
        v95 = *(google::protobuf::internal::ArenaImpl **)v95;
      google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(a7 + 72), (__int128 *)__p, v95);
      if (SHIBYTE(v117) < 0)
        operator delete(__p[0]);
      return sentencepiece::util::Status::Status(a8);
    }
    return result;
  }
  LODWORD(__p[0]) = 13;
  v96 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[1]);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(", 1);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)") [", 3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(consumed) == (normalized.size())", 33);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"] ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"all normalized characters are not consumed.", 43);
  sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)__p, (uint64_t)a8);
LABEL_137:
  __p[1] = *(void **)MEMORY[0x24BEDB800];
  *(void **)((char *)&__p[1] + *((_QWORD *)__p[1] - 3)) = *(void **)(MEMORY[0x24BEDB800] + 24);
  v117 = MEMORY[0x24BEDB848] + 16;
  if (v119 < 0)
    operator delete(v118);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (_QWORD *)MEMORY[0x22E2B0750](&v120);
}

void sub_228454838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sentencepiece::SentencePieceProcessor::ApplyExtraOptions@<X0>(sentencepiece::ModelInterface **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _DWORD *v5;
  _DWORD *v6;
  unsigned int *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  sentencepiece::SentencePieceText_SentencePiece **v13;
  BOOL v14;
  unint64_t v15;
  sentencepiece::SentencePieceText_SentencePiece *v16;
  BOOL v17;
  int *v18;
  int v19;
  int v20;
  int v21;
  int *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char *v28;
  size_t v29;
  uint64_t v30;
  google::protobuf::internal::ArenaImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::string *v38;
  uint64_t v39;
  const char *v40;
  size_t v41;
  int v42;
  char *v43;
  size_t v44;
  uint64_t v45;
  google::protobuf::internal::ArenaImpl *v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  size_t v50;
  int v51;
  char *v52;
  size_t v53;
  uint64_t v54;
  google::protobuf::internal::ArenaImpl *v55;
  char v57;
  std::string __p[2];

  v6 = *(_DWORD **)a2;
  v5 = *(_DWORD **)(a2 + 8);
  if (*(_DWORD **)a2 != v5)
  {
    v9 = (unsigned int *)(a3 + 48);
    while (1)
    {
      switch(*v6)
      {
        case 0:
          v10 = *(_QWORD *)(a3 + 64);
          if (v10)
            v11 = v10 + 8;
          else
            v11 = 0;
          v12 = *(int *)(a3 + 56);
          v13 = (sentencepiece::SentencePieceText_SentencePiece **)(v11 + 8 * v12 - 8);
          if ((_DWORD)v12)
            v14 = (unint64_t)v13 > v11;
          else
            v14 = 0;
          if (v14)
          {
            v15 = v11 + 8;
            do
            {
              v16 = *v13--;
              sentencepiece::swap(*(uint64_t **)(v15 - 8), v16, (sentencepiece::SentencePieceText_SentencePiece *)a3);
              v17 = v15 >= (unint64_t)v13;
              v15 += 8;
            }
            while (!v17);
          }
          goto LABEL_52;
        case 1:
          v18 = *(int **)(a3 + 64);
          if (!v18)
          {
            v20 = *(_DWORD *)(a3 + 60);
LABEL_34:
            google::protobuf::RepeatedPtrField<std::string>::Reserve(v9, v20 + 1);
            v18 = *(int **)(a3 + 64);
            v20 = *v18;
            goto LABEL_35;
          }
          v19 = *(_DWORD *)(a3 + 56);
          v20 = *v18;
          if (v19 < *v18)
          {
            v21 = v19 + 1;
            *(_DWORD *)(a3 + 56) = v19 + 1;
            goto LABEL_36;
          }
          if (v20 == *(_DWORD *)(a3 + 60))
            goto LABEL_34;
LABEL_35:
          *v18 = v20 + 1;
          v32 = google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText_SentencePiece>(*(_QWORD *)(a3 + 48));
          v33 = *(_QWORD *)(a3 + 64);
          v34 = *(int *)(a3 + 56);
          v21 = v34 + 1;
          *(_DWORD *)(a3 + 56) = v34 + 1;
          *(_QWORD *)(v33 + 8 * v34 + 8) = v32;
LABEL_36:
          if (v21 > 1)
          {
            v35 = v21;
            do
            {
              v36 = *(_QWORD *)(a3 + 64) + 8;
              v37 = *(_QWORD *)(v36 + 8 * (v35 - 2));
              *(_QWORD *)(v36 + 8 * (v35 - 2)) = *(_QWORD *)(v36 + 8 * (v35 - 1));
              *(_QWORD *)(v36 + 8 * (v35 - 1)) = v37;
              v14 = v35-- > 2;
            }
            while (v14);
          }
          if (v21 < 1)
          {
            google::protobuf::internal::LogMessage::LogMessage((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1728);
            v38 = google::protobuf::internal::LogMessage::operator<<(__p, "CHECK failed: (index) < (current_size_): ");
            google::protobuf::internal::LogFinisher::operator=((int)&v57, (const char **)&v38->__r_.__value_.__l.__data_);
            google::protobuf::internal::LogMessage::~LogMessage((void **)&__p[0].__r_.__value_.__l.__data_);
          }
          v39 = *(_QWORD *)(*(_QWORD *)(a3 + 64) + 8);
          v40 = sentencepiece::ModelInterface::bos_piece(a1[1]);
          v41 = strlen(v40);
          v42 = (*((uint64_t (**)(sentencepiece::ModelInterface **, const char *, size_t))*a1 + 63))(a1, v40, v41);
          *(_DWORD *)(v39 + 40) |= 4u;
          *(_DWORD *)(v39 + 64) = v42;
          v43 = (char *)sentencepiece::ModelInterface::bos_piece(a1[1]);
          sentencepiece::ModelInterface::bos_piece(a1[1]);
          *(_DWORD *)(v39 + 40) |= 1u;
          std::string::basic_string[abi:ne180100](__p, v43, v44);
          v45 = *(_QWORD *)(v39 + 8);
          v46 = (google::protobuf::internal::ArenaImpl *)(v45 & 0xFFFFFFFFFFFFFFFELL);
          if ((v45 & 1) != 0)
            v46 = *(google::protobuf::internal::ArenaImpl **)v46;
          google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(v39 + 48), (__int128 *)__p, v46);
          goto LABEL_50;
        case 2:
          v22 = *(int **)(a3 + 64);
          if (!v22)
          {
            v24 = *(_DWORD *)(a3 + 60);
LABEL_45:
            google::protobuf::RepeatedPtrField<std::string>::Reserve(v9, v24 + 1);
            v22 = *(int **)(a3 + 64);
            v24 = *v22;
            goto LABEL_46;
          }
          v23 = *(int *)(a3 + 56);
          v24 = *v22;
          if ((int)v23 < *v22)
          {
            *(_DWORD *)(a3 + 56) = v23 + 1;
            v25 = *(_QWORD *)&v22[2 * v23 + 2];
            goto LABEL_47;
          }
          if (v24 == *(_DWORD *)(a3 + 60))
            goto LABEL_45;
LABEL_46:
          *v22 = v24 + 1;
          v25 = google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText_SentencePiece>(*(_QWORD *)(a3 + 48));
          v47 = *(_QWORD *)(a3 + 64);
          v48 = *(int *)(a3 + 56);
          *(_DWORD *)(a3 + 56) = v48 + 1;
          *(_QWORD *)(v47 + 8 * v48 + 8) = v25;
LABEL_47:
          v49 = sentencepiece::ModelInterface::eos_piece(a1[1]);
          v50 = strlen(v49);
          v51 = (*((uint64_t (**)(sentencepiece::ModelInterface **, const char *, size_t))*a1 + 63))(a1, v49, v50);
          *(_DWORD *)(v25 + 40) |= 4u;
          *(_DWORD *)(v25 + 64) = v51;
          v52 = (char *)sentencepiece::ModelInterface::eos_piece(a1[1]);
          sentencepiece::ModelInterface::eos_piece(a1[1]);
          *(_DWORD *)(v25 + 40) |= 1u;
          std::string::basic_string[abi:ne180100](__p, v52, v53);
          v54 = *(_QWORD *)(v25 + 8);
          v55 = (google::protobuf::internal::ArenaImpl *)(v54 & 0xFFFFFFFFFFFFFFFELL);
          if ((v54 & 1) != 0)
            v55 = *(google::protobuf::internal::ArenaImpl **)v55;
          google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(v25 + 48), (__int128 *)__p, v55);
LABEL_50:
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p[0].__r_.__value_.__l.__data_);
LABEL_52:
          if (++v6 == v5)
            return sentencepiece::util::Status::Status(a4);
          break;
        case 3:
          if (*(int *)(a3 + 56) >= 1)
          {
            v26 = 0;
            do
            {
              v27 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>((uint64_t)v9, v26);
              if ((*((unsigned int (**)(sentencepiece::ModelInterface **, _QWORD))*a1 + 66))(a1, *(unsigned int *)(v27 + 64)))
              {
                v28 = (char *)sentencepiece::ModelInterface::unk_piece(a1[1]);
                sentencepiece::ModelInterface::unk_piece(a1[1]);
                *(_DWORD *)(v27 + 40) |= 1u;
                std::string::basic_string[abi:ne180100](__p, v28, v29);
                v30 = *(_QWORD *)(v27 + 8);
                v31 = (google::protobuf::internal::ArenaImpl *)(v30 & 0xFFFFFFFFFFFFFFFELL);
                if ((v30 & 1) != 0)
                  v31 = *(google::protobuf::internal::ArenaImpl **)v31;
                google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(v27 + 48), (__int128 *)__p, v31);
                if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p[0].__r_.__value_.__l.__data_);
              }
              ++v26;
            }
            while (v26 < *(_DWORD *)(a3 + 56));
          }
          goto LABEL_52;
        default:
          return (_QWORD *)sentencepiece::util::Status::Status(a4, 13, "unknown extra_option type.", 26);
      }
    }
  }
  return sentencepiece::util::Status::Status(a4);
}

void sub_228454D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  google::protobuf::internal::LogMessage::~LogMessage(&__p);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::Encode(sentencepiece::ModelInterface **a1@<X0>, char *a2@<X1>, size_t a3@<X2>, sentencepiece::SentencePieceText *a4@<X3>, sentencepiece::util::Status *a5@<X8>)
{
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  void *__p[3];
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char v21;
  uint64_t v22;

  (*((void (**)(sentencepiece::util::Status *__return_ptr))*a1 + 11))(a5);
  if (!*(_QWORD *)a5)
  {
    sentencepiece::util::Status::~Status(a5);
    if (a4)
    {
      sentencepiece::SentencePieceText::Clear(a4);
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      (*(void (**)(sentencepiece::ModelInterface *, char *, size_t, void **, void **))(*(_QWORD *)a1[2] + 32))(a1[2], a2, a3, &v17, &v14);
      if (!*(_QWORD *)a5)
      {
        sentencepiece::util::Status::~Status(a5);
        (*(void (**)(void **__return_ptr))(*(_QWORD *)a1[1] + 40))(__p);
        if (v19 >= 0)
          v10 = HIBYTE(v19);
        else
          v10 = v18;
        sentencepiece::SentencePieceProcessor::PopulateSentencePieceText(a1, a2, a3, v10, (uint64_t *)&v14, (unsigned __int8 ***)__p, (uint64_t)a4, a5);
        if (!*(_QWORD *)a5)
        {
          sentencepiece::util::Status::~Status(a5);
          sentencepiece::util::Status::Status(v11);
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      if (v14)
      {
        v15 = v14;
        operator delete(v14);
      }
      if (SHIBYTE(v19) < 0)
        operator delete(v17);
    }
    else
    {
      LODWORD(v17) = 13;
      v12 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"spt", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"output proto is null", 20);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v17, (uint64_t)a5);
      v18 = *MEMORY[0x24BEDB800];
      *(uint64_t *)((char *)&v18 + *(_QWORD *)(v18 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v19 = MEMORY[0x24BEDB848] + 16;
      if (v21 < 0)
        operator delete(v20);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x22E2B0750](&v22);
    }
  }
}

void sub_228454FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (__p)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::NBestEncode(sentencepiece::ModelInterface **a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X4>, sentencepiece::util::Status *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  uint64_t v30;
  uint64_t v31;
  void *__p;
  char v33;
  _BYTE v34[152];

  (*((void (**)(sentencepiece::util::Status *__return_ptr))*a1 + 11))(a5);
  if (*(_QWORD *)a5)
    return;
  sentencepiece::util::Status::~Status(a5);
  if (a4)
  {
    sentencepiece::NBestSentencePieceText::Clear((sentencepiece::NBestSentencePieceText *)a4);
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    (*(void (**)(sentencepiece::ModelInterface *, char *, size_t, void **, void **))(*(_QWORD *)a1[2] + 32))(a1[2], a2, a3, &v26, &v23);
    if (!*(_QWORD *)a5)
    {
      sentencepiece::util::Status::~Status(a5);
      if (((*(uint64_t (**)(sentencepiece::ModelInterface *))(*(_QWORD *)a1[1] + 88))(a1[1]) & 1) != 0)
      {
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1[1] + 48))(&v21);
        v10 = v21;
        v11 = v22;
        if (v21 != v22)
        {
          while (1)
          {
            v12 = *(int **)(a4 + 32);
            if (!v12)
              break;
            v13 = *(int *)(a4 + 24);
            v14 = *v12;
            if ((int)v13 >= *v12)
            {
              if (v14 == *(_DWORD *)(a4 + 28))
              {
LABEL_12:
                google::protobuf::RepeatedPtrField<std::string>::Reserve((unsigned int *)(a4 + 16), v14 + 1);
                v12 = *(int **)(a4 + 32);
                v14 = *v12;
              }
              *v12 = v14 + 1;
              v15 = google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText>(*(_QWORD *)(a4 + 16));
              v16 = *(_QWORD *)(a4 + 32);
              v17 = *(int *)(a4 + 24);
              *(_DWORD *)(a4 + 24) = v17 + 1;
              *(_QWORD *)(v16 + 8 * v17 + 8) = v15;
              goto LABEL_14;
            }
            *(_DWORD *)(a4 + 24) = v13 + 1;
            v15 = *(_QWORD *)&v12[2 * v13 + 2];
LABEL_14:
            v18 = *(_DWORD *)(v10 + 24);
            *(_DWORD *)(v15 + 40) |= 2u;
            *(_DWORD *)(v15 + 80) = v18;
            if (v28 >= 0)
              v19 = HIBYTE(v28);
            else
              v19 = v27;
            sentencepiece::SentencePieceProcessor::PopulateSentencePieceText(a1, a2, a3, v19, (uint64_t *)&v23, (unsigned __int8 ***)v10, v15, a5);
            if (*(_QWORD *)a5)
              goto LABEL_29;
            sentencepiece::util::Status::~Status(a5);
            v10 += 32;
            if (v10 == v11)
            {
              sentencepiece::util::Status::Status(a5);
              goto LABEL_29;
            }
          }
          v14 = *(_DWORD *)(a4 + 28);
          goto LABEL_12;
        }
        LODWORD(v29) = 13;
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v30);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"!nbests.empty()", 15);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"] ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"NBestEncode returns empty result.", 33);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v29, (uint64_t)a5);
        v30 = *MEMORY[0x24BEDB800];
        *(uint64_t *)((char *)&v30 + *(_QWORD *)(v30 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
        v31 = MEMORY[0x24BEDB848] + 16;
        if (v33 < 0)
          operator delete(__p);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x22E2B0750](v34);
LABEL_29:
        v29 = (void **)&v21;
        std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100](&v29);
      }
      else
      {
        LODWORD(v29) = 13;
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v30);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"model_->IsNBestEncodeAvailable()", 32);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"] ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"NBestEncode is not available for the current model.", 51);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v29, (uint64_t)a5);
        v30 = *MEMORY[0x24BEDB800];
        *(uint64_t *)((char *)&v30 + *(_QWORD *)(v30 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
        v31 = MEMORY[0x24BEDB848] + 16;
        if (v33 < 0)
          operator delete(__p);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x22E2B0750](v34);
      }
    }
    if (v23)
    {
      v24 = v23;
      operator delete(v23);
    }
    if (SHIBYTE(v28) < 0)
      operator delete(v26);
  }
  else
  {
    LODWORD(v29) = 13;
    v20 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"nbest_spt", 9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"output proto is null", 20);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v29, (uint64_t)a5);
    v30 = *MEMORY[0x24BEDB800];
    *(uint64_t *)((char *)&v30 + *(_QWORD *)(v30 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v31 = MEMORY[0x24BEDB848] + 16;
    if (v33 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x22E2B0750](v34);
  }
}

void sub_2284555A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char *a22)
{
  a22 = &a10;
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncode(sentencepiece::ModelInterface **a1@<X0>, char *a2@<X1>, size_t a3@<X2>, int a4@<W3>, sentencepiece::SentencePieceText *a5@<X4>, sentencepiece::util::Status *a6@<X8>, float a7@<S0>)
{
  _QWORD *v14;
  _QWORD *v15;
  char v16;
  char v17;
  uint64_t v18;
  sentencepiece::random *v19;
  float *v20;
  uint64_t v21;
  float *v22;
  float v23;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *RandomGenerator;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  void *v30[3];
  uint64_t v31;
  uint64_t v32;
  void *__p;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  float *v40[11];
  char v41;
  uint64_t v42;

  (*((void (**)(sentencepiece::util::Status *__return_ptr))*a1 + 11))(a6);
  if (*(_QWORD *)a6)
    return;
  sentencepiece::util::Status::~Status(a6);
  if (a5)
  {
    sentencepiece::SentencePieceText::Clear(a5);
    if (a4 < 513)
    {
      v36 = 0;
      v37 = 0;
      v38 = 0;
      __p = 0;
      v34 = 0;
      v35 = 0;
      (*(void (**)(sentencepiece::ModelInterface *, char *, size_t, void **, void **))(*(_QWORD *)a1[2] + 32))(a1[2], a2, a3, &v36, &__p);
      if (*(_QWORD *)a6)
      {
LABEL_5:
        if (__p)
        {
          v34 = __p;
          operator delete(__p);
        }
        if (SHIBYTE(v38) < 0)
          operator delete(v36);
        return;
      }
      sentencepiece::util::Status::~Status(a6);
      v16 = (*(uint64_t (**)(sentencepiece::ModelInterface *))(*(_QWORD *)a1[1] + 88))(a1[1]);
      if (a4 >= 0)
        v17 = v16;
      else
        v17 = 0;
      if ((v17 & 1) != 0)
      {
        if (a4 > 1)
        {
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1[1] + 48))(&v31);
          if (v31 == v32)
          {
            LODWORD(v39) = 13;
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v40);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"(", 1);
            std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)") [", 3);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"!nbests.empty()", 15);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"] ", 2);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"NBestEncode returns empty result.", 33);
            sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v39, (uint64_t)a6);
            sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&v39);
            v39 = &v31;
            std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
            goto LABEL_5;
          }
          LODWORD(v30[0]) = 0;
          v19 = (sentencepiece::random *)std::vector<float>::vector(&v39, (v32 - v31) >> 5, v30);
          if (v32 != v31)
          {
            v20 = (float *)v39;
            if ((unint64_t)((v32 - v31) >> 5) <= 1)
              v21 = 1;
            else
              v21 = (v32 - v31) >> 5;
            v22 = (float *)(v31 + 24);
            do
            {
              v23 = *v22;
              v22 += 8;
              *v20++ = expf(v23 * a7);
              --v21;
            }
            while (v21);
          }
          RandomGenerator = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)sentencepiece::random::GetRandomGenerator(v19);
          std::discrete_distribution<int>::param_type::param_type[abi:ne180100]<std::__wrap_iter<float *>>((uint64_t)v30, (float *)v39, v40[0]);
          v25 = HIBYTE(v38);
          v26 = v37;
          v27 = std::discrete_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((int)v30, RandomGenerator, (double **)v30);
          if ((v25 & 0x80u) == 0)
            v28 = v25;
          else
            v28 = v26;
          sentencepiece::SentencePieceProcessor::PopulateSentencePieceText(a1, a2, a3, v28, (uint64_t *)&__p, (unsigned __int8 ***)(v31 + 32 * v27), (uint64_t)a5, a6);
          v29 = *(_QWORD *)a6;
          if (!*(_QWORD *)a6)
            sentencepiece::util::Status::~Status(a6);
          if (v30[0])
          {
            v30[1] = v30[0];
            operator delete(v30[0]);
          }
          if (v39)
          {
            v40[0] = (float *)v39;
            operator delete(v39);
          }
          v39 = &v31;
          std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
          if (v29)
            goto LABEL_5;
          goto LABEL_51;
        }
        (*(void (**)(void **__return_ptr))(*(_QWORD *)a1[1] + 40))(&v39);
        if (v38 >= 0)
          v18 = HIBYTE(v38);
        else
          v18 = v37;
      }
      else
      {
        if (((*(uint64_t (**)(sentencepiece::ModelInterface *))(*(_QWORD *)a1[1] + 80))(a1[1]) & 1) == 0)
        {
          LODWORD(v39) = 13;
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v40);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"(", 1);
          std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)") [", 3);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"model_->IsSampleEncodeAvailable()", 33);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"] ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"SampleEncode is not available for the current model.", 52);
          sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v39, (uint64_t)a6);
          sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&v39);
          goto LABEL_5;
        }
        (*(void (**)(void **__return_ptr, float))(*(_QWORD *)a1[1] + 56))(&v39, a7);
        if (v38 >= 0)
          v18 = HIBYTE(v38);
        else
          v18 = v37;
      }
      sentencepiece::SentencePieceProcessor::PopulateSentencePieceText(a1, a2, a3, v18, (uint64_t *)&__p, (unsigned __int8 ***)&v39, (uint64_t)a5, a6);
      if (*(_QWORD *)a6)
      {
        if (v39)
        {
          v40[0] = (float *)v39;
          operator delete(v39);
        }
        goto LABEL_5;
      }
      sentencepiece::util::Status::~Status(a6);
      if (v39)
      {
        v40[0] = (float *)v39;
        operator delete(v39);
      }
LABEL_51:
      sentencepiece::util::Status::Status(a6);
      goto LABEL_5;
    }
    LODWORD(v39) = 13;
    v15 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v40);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"(nbest_size) <= (512)", 21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"nbest_size must be nbest_size <= 512", 36);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v39, (uint64_t)a6);
  }
  else
  {
    LODWORD(v39) = 13;
    v14 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v40);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"spt", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"output proto is null", 20);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v39, (uint64_t)a6);
  }
  v40[0] = *(float **)MEMORY[0x24BEDB800];
  *(float **)((char *)v40 + *((_QWORD *)v40[0] - 3)) = *(float **)(MEMORY[0x24BEDB800] + 24);
  v40[1] = (float *)(MEMORY[0x24BEDB848] + 16);
  if (v41 < 0)
    operator delete(v40[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22E2B0750](&v42);
}

void sub_228455CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char *a24,uint64_t a25)
{
  a24 = &a12;
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncodeAndScore(uint64_t a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X6>, sentencepiece::util::Status *a5@<X8>, float a6@<S0>)
{
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  void *__p;
  char v35;
  _BYTE v36[152];

  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8)) & 1) != 0)
  {
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    (*(void (**)(_QWORD, char *, size_t, void **, void **))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), a2, a3, &v28, &v25);
    if (!*(_QWORD *)a5)
    {
      sentencepiece::util::Status::~Status(a5);
      (*(void (**)(uint64_t *__return_ptr, float))(**(_QWORD **)(a1 + 8) + 64))(&v23, a6);
      v12 = v23;
      v13 = v24;
      if (v23 != v24)
      {
        while (1)
        {
          v14 = *(int **)(a4 + 32);
          if (!v14)
            break;
          v15 = *(int *)(a4 + 24);
          v16 = *v14;
          if ((int)v15 >= *v14)
          {
            if (v16 == *(_DWORD *)(a4 + 28))
            {
LABEL_9:
              google::protobuf::RepeatedPtrField<std::string>::Reserve((unsigned int *)(a4 + 16), v16 + 1);
              v14 = *(int **)(a4 + 32);
              v16 = *v14;
            }
            *v14 = v16 + 1;
            v17 = google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText>(*(_QWORD *)(a4 + 16));
            v18 = *(_QWORD *)(a4 + 32);
            v19 = *(int *)(a4 + 24);
            *(_DWORD *)(a4 + 24) = v19 + 1;
            *(_QWORD *)(v18 + 8 * v19 + 8) = v17;
            goto LABEL_11;
          }
          *(_DWORD *)(a4 + 24) = v15 + 1;
          v17 = *(_QWORD *)&v14[2 * v15 + 2];
LABEL_11:
          v20 = *(_DWORD *)(v12 + 24);
          *(_DWORD *)(v17 + 40) |= 2u;
          *(_DWORD *)(v17 + 80) = v20;
          if (v30 >= 0)
            v21 = HIBYTE(v30);
          else
            v21 = v29;
          sentencepiece::SentencePieceProcessor::PopulateSentencePieceText((sentencepiece::ModelInterface **)a1, a2, a3, v21, (uint64_t *)&v25, (unsigned __int8 ***)v12, v17, a5);
          if (*(_QWORD *)a5)
            goto LABEL_23;
          sentencepiece::util::Status::~Status(a5);
          v12 += 32;
          if (v12 == v13)
          {
            sentencepiece::util::Status::Status(a5);
            goto LABEL_23;
          }
        }
        v16 = *(_DWORD *)(a4 + 28);
        goto LABEL_9;
      }
      LODWORD(v31) = 13;
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"!results.empty()", 16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"SampleEncodeAndScore returns empty result.", 42);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v31, (uint64_t)a5);
      v32 = *MEMORY[0x24BEDB800];
      *(uint64_t *)((char *)&v32 + *(_QWORD *)(v32 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v33 = MEMORY[0x24BEDB848] + 16;
      if (v35 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x22E2B0750](v36);
LABEL_23:
      v31 = (void **)&v23;
      std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100](&v31);
    }
    if (v25)
    {
      v26 = v25;
      operator delete(v25);
    }
    if (SHIBYTE(v30) < 0)
      operator delete(v28);
  }
  else
  {
    LODWORD(v31) = 13;
    v22 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"model_->IsSampleEncodeAndScoreAvailable()", 41);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"SampleEncodeAndScore is not available for the current model.", 60);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v31, (uint64_t)a5);
    v32 = *MEMORY[0x24BEDB800];
    *(uint64_t *)((char *)&v32 + *(_QWORD *)(v32 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v33 = MEMORY[0x24BEDB848] + 16;
    if (v35 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x22E2B0750](v36);
  }
}

void sub_228456230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char *a22)
{
  a22 = &a10;
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::CalculateEntropy(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, float *a4@<X3>, sentencepiece::util::Status *a5@<X8>, float a6@<S0>)
{
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  void *__p;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char v22;
  uint64_t v23;

  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8)) & 1) != 0)
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    __p = 0;
    v16 = 0;
    v17 = 0;
    (*(void (**)(_QWORD, uint64_t, uint64_t, void **, void **))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), a2, a3, &v18, &__p);
    if (!*(_QWORD *)a5)
    {
      sentencepiece::util::Status::~Status(a5);
      if (v20 >= 0)
        v12 = &v18;
      else
        v12 = v18;
      if (v20 >= 0)
        v13 = HIBYTE(v20);
      else
        v13 = v19;
      *a4 = (*(float (**)(_QWORD, void *, uint64_t, float))(**(_QWORD **)(a1 + 8) + 72))(*(_QWORD *)(a1 + 8), v12, v13, a6);
      sentencepiece::util::Status::Status(a5);
    }
    if (__p)
    {
      v16 = __p;
      operator delete(__p);
    }
    if (SHIBYTE(v20) < 0)
      operator delete(v18);
  }
  else
  {
    LODWORD(v18) = 13;
    v14 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"model_->IsCalculateEntropyAvailable()", 37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"CalculateEntropy is not available for the current model.", 56);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v18, (uint64_t)a5);
    v19 = *MEMORY[0x24BEDB800];
    *(uint64_t *)((char *)&v19 + *(_QWORD *)(v19 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v20 = MEMORY[0x24BEDB848] + 16;
    if (v22 < 0)
      operator delete(v21);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x22E2B0750](&v23);
  }
}

void sub_2284564B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (__p)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

void sub_228456564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::Decode(sentencepiece::ModelInterface **a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, sentencepiece::util::Status *a4@<X8>)
{
  uint64_t v4;
  sentencepiece::ModelInterface *v8;
  char *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  google::protobuf::internal::ArenaImpl *v22;
  uint64_t *v23;
  int v24;
  uint64_t v25;
  google::protobuf::internal::ArenaImpl *v26;
  int v27;
  _BOOL4 v28;
  int v29;
  int v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  size_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  const void *v37;
  uint64_t v38;
  __int128 *p_dst;
  sentencepiece::ModelInterface *v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  void **v46;
  size_t v47;
  _BOOL4 v49;
  sentencepiece::ModelInterface *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  sentencepiece::ModelInterface *v54;
  uint64_t *v55;
  __int128 v56;
  void *__p[2];
  uint64_t v58;
  _QWORD v59[2];
  _QWORD *v60[2];
  uint64_t *v61;
  __int128 v62;
  uint64_t v63;
  BOOL v64;
  void *v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  _QWORD *v71;
  __int128 __dst;
  unint64_t v73;

  v4 = a3;
  v68 = a3;
  (*((void (**)(sentencepiece::util::Status *__return_ptr))*a1 + 11))(a4);
  if (*(_QWORD *)a4)
    return;
  sentencepiece::util::Status::~Status(a4);
  if (v4)
  {
    sentencepiece::SentencePieceText::Clear((sentencepiece::SentencePieceText *)v4);
    v8 = a1[4];
    if (v8 && (*(unsigned int (**)(sentencepiece::ModelInterface *))(*(_QWORD *)v8 + 72))(v8))
      v9 = (char *)(*(uint64_t (**)(sentencepiece::ModelInterface *))(*(_QWORD *)a1[4] + 24))(a1[4]);
    else
    v10 = *a2;
    v11 = a2[1];
    if (*a2 != v11)
    {
      while (1)
      {
        v12 = *v10;
        v13 = v10[1];
        v14 = v68;
        v15 = *(int **)(v68 + 64);
        if (!v15)
          break;
        v16 = *(int *)(v68 + 56);
        v17 = *v15;
        if ((int)v16 >= *v15)
        {
          if (v17 == *(_DWORD *)(v68 + 60))
          {
LABEL_14:
            google::protobuf::RepeatedPtrField<std::string>::Reserve((unsigned int *)(v68 + 48), v17 + 1);
            v15 = *(int **)(v68 + 64);
            v17 = *v15;
          }
          *v15 = v17 + 1;
          v18 = google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText_SentencePiece>(*(_QWORD *)(v14 + 48));
          v19 = *(_QWORD *)(v14 + 64);
          v20 = *(int *)(v14 + 56);
          *(_DWORD *)(v14 + 56) = v20 + 1;
          *(_QWORD *)(v19 + 8 * v20 + 8) = v18;
          goto LABEL_16;
        }
        *(_DWORD *)(v68 + 56) = v16 + 1;
        v18 = *(_QWORD *)&v15[2 * v16 + 2];
LABEL_16:
        *(_DWORD *)(v18 + 40) |= 1u;
        v21 = *(_QWORD *)(v18 + 8);
        v22 = (google::protobuf::internal::ArenaImpl *)(v21 & 0xFFFFFFFFFFFFFFFELL);
        if ((v21 & 1) != 0)
          v22 = *(google::protobuf::internal::ArenaImpl **)v22;
        v23 = google::protobuf::internal::ArenaStringPtr::Mutable((uint64_t **)(v18 + 48), v22);
        MEMORY[0x22E2B0534](v23, v12, v13);
        v24 = (*((uint64_t (**)(sentencepiece::ModelInterface **, uint64_t, uint64_t))*a1 + 63))(a1, v12, v13);
        *(_DWORD *)(v18 + 40) |= 4u;
        *(_DWORD *)(v18 + 64) = v24;
        v10 += 2;
        if (v10 == v11)
        {
          v4 = v68;
          goto LABEL_20;
        }
      }
      v17 = *(_DWORD *)(v68 + 60);
      goto LABEL_14;
    }
LABEL_20:
    sentencepiece::SentencePieceProcessor::ApplyExtraOptions(a1, (uint64_t)(a1 + 8), v4, a4);
    if (*(_QWORD *)a4)
      return;
    sentencepiece::util::Status::~Status(a4);
    v61 = 0;
    *(_DWORD *)(v4 + 40) |= 1u;
    v25 = *(_QWORD *)(v4 + 8);
    v26 = (google::protobuf::internal::ArenaImpl *)(v25 & 0xFFFFFFFFFFFFFFFELL);
    if ((v25 & 1) != 0)
      v26 = *(google::protobuf::internal::ArenaImpl **)v26;
    v60[1] = &v61;
    v61 = google::protobuf::internal::ArenaStringPtr::Mutable((uint64_t **)(v4 + 72), v26);
    v58 = 0;
    v59[0] = &v68;
    v59[1] = v60;
    v60[0] = &v68;
    __p[0] = 0;
    __p[1] = 0;
    v27 = *(_DWORD *)(v4 + 56);
    if (v27 >= 1)
    {
      v28 = 0;
      v29 = 0;
      v30 = 0;
      v31 = 1;
      while (1)
      {
        v32 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>(v4 + 48, v30);
        if (!(*((unsigned int (**)(sentencepiece::ModelInterface **, _QWORD))*a1 + 69))(a1, *(unsigned int *)(v32 + 64)))break;
        ++v30;
LABEL_68:
        v4 = v68;
        v27 = *(_DWORD *)(v68 + 56);
        if (v30 >= v27)
          goto LABEL_89;
      }
      sentencepiece::SentencePieceProcessor::Decode(std::vector<std::string_view> const&,sentencepiece::SentencePieceText *)const::$_2::operator()((uint64_t)v59, v29, v30, a4);
      if (*(_QWORD *)a4)
        goto LABEL_95;
      sentencepiece::util::Status::~Status(a4);
      if (!v28)
      {
        if (*((char *)v61 + 23) < 0)
        {
          if (!v61[1])
          {
LABEL_32:
            v33 = *(_QWORD *)(v32 + 48) & 0xFFFFFFFFFFFFFFFELL;
            if (*(char *)(v33 + 23) < 0)
            {
              v35 = *(unsigned __int8 **)v33;
              v34 = *(_QWORD *)(v33 + 8);
            }
            else
            {
              v34 = *(unsigned __int8 *)(v33 + 23);
              v35 = (unsigned __int8 *)(*(_QWORD *)(v32 + 48) & 0xFFFFFFFFFFFFFFFELL);
            }
            v36 = *(unsigned int *)(v32 + 64);
            if ((*((unsigned int (**)(sentencepiece::ModelInterface **, uint64_t))*a1 + 67))(a1, v36))
            {
              std::string::basic_string[abi:ne180100]<0>(&v62, "");
LABEL_58:
              v64 = 0;
LABEL_59:
              if (SHIBYTE(v58) < 0)
                operator delete(__p[0]);
              v58 = v63;
              *(_OWORD *)__p = v62;
              v28 = v64;
              if (v63 >= 0)
                v46 = __p;
              else
                v46 = (void **)v62;
              if (v63 >= 0)
                v47 = HIBYTE(v63);
              else
                v47 = *((_QWORD *)&v62 + 1);
              sentencepiece::SentencePieceProcessor::Decode(std::vector<std::string_view> const&,sentencepiece::SentencePieceText *)const::$_1::operator()(v60, v30++, v46, v47);
              v29 = v30;
              goto LABEL_68;
            }
            if (!(*((unsigned int (**)(sentencepiece::ModelInterface **, uint64_t))*a1 + 66))(a1, v36))
            {
              if ((v31 & 1) != 0
                && ((v40 = a1[4]) == 0
                 || (v41 = (*(uint64_t (**)(sentencepiece::ModelInterface *))(*(_QWORD *)v40 + 152))(v40),
                     ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 16))(v41) & 1) != 0)
                 || (v42 = (*(uint64_t (**)(sentencepiece::ModelInterface *))(*(_QWORD *)a1[4] + 152))(a1[4]),
                     (*(unsigned int (**)(uint64_t))(*(_QWORD *)v42 + 24))(v42))))
              {
                if (v34 >= 3)
                {
                  v49 = *(unsigned __int16 *)v35 != 38626 || v35[2] != 129;
                  if (!v49)
                  {
                    v35 += 3;
                    v34 -= 3;
                  }
                  v43 = !v49;
                }
                else
                {
                  v43 = 0;
                }
                v50 = a1[4];
                if (v50)
                {
                  v51 = (*(uint64_t (**)(sentencepiece::ModelInterface *))(*(_QWORD *)v50 + 152))(v50);
                  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v51 + 24))(v51))
                    v43 = 0;
                }
              }
              else
              {
                v43 = 0;
              }
              v52 = operator new(0x20uLL);
              v70 = v52 + 4;
              v71 = v52 + 4;
              v52[1] = 3;
              v52[2] = " ";
              v52[3] = 1;
              v69 = v52;
              absl::StrReplaceAll(v35, v34, (uint64_t *)&v69, (uint64_t)&__dst);
              v62 = __dst;
              v63 = v73;
              v73 = 0;
              __dst = 0uLL;
              v64 = v43;
              if (v69)
              {
                v70 = v69;
                operator delete(v69);
              }
              goto LABEL_59;
            }
            v37 = (const void *)(*((uint64_t (**)(sentencepiece::ModelInterface **, uint64_t))*a1 + 64))(a1, v36);
            if (v38 == v34 && !memcmp(v37, v35, v34))
            {
              std::string::basic_string[abi:ne180100]<0>(&v62, v9);
              goto LABEL_58;
            }
            if (v34 >= 0x7FFFFFFFFFFFFFF8)
              std::string::__throw_length_error[abi:ne180100]();
            if (v34 >= 0x17)
            {
              v44 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v34 | 7) != 0x17)
                v44 = v34 | 7;
              v45 = v44 + 1;
              p_dst = (__int128 *)operator new(v44 + 1);
              *((_QWORD *)&__dst + 1) = v34;
              v73 = v45 | 0x8000000000000000;
              *(_QWORD *)&__dst = p_dst;
            }
            else
            {
              HIBYTE(v73) = v34;
              p_dst = &__dst;
              if (!v34)
                goto LABEL_57;
            }
            memmove(p_dst, v35, v34);
LABEL_57:
            *((_BYTE *)p_dst + v34) = 0;
            v62 = __dst;
            v63 = v73;
            goto LABEL_58;
          }
        }
        else if (!*((_BYTE *)v61 + 23))
        {
          goto LABEL_32;
        }
      }
      v31 = 0;
      goto LABEL_32;
    }
    v29 = 0;
LABEL_89:
    sentencepiece::SentencePieceProcessor::Decode(std::vector<std::string_view> const&,sentencepiece::SentencePieceText *)const::$_2::operator()((uint64_t)v59, v29, v27, a4);
    if (!*(_QWORD *)a4)
    {
      sentencepiece::util::Status::~Status(a4);
      v54 = a1[3];
      if (v54)
      {
        (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v54 + 40))(&v62);
        v55 = v61;
        if (*((char *)v61 + 23) < 0)
          operator delete((void *)*v61);
        v56 = v62;
        v55[2] = v63;
        *(_OWORD *)v55 = v56;
      }
      sentencepiece::util::Status::Status(a4);
    }
LABEL_95:
    if (SHIBYTE(v58) < 0)
      operator delete(__p[0]);
  }
  else
  {
    LODWORD(v62) = 13;
    v53 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v62 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v62 + 1, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v62 + 1, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v62 + 1, (uint64_t)"spt", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v62 + 1, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v62 + 1, (uint64_t)"output proto is null", 20);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v62, (uint64_t)a4);
    *((_QWORD *)&v62 + 1) = *MEMORY[0x24BEDB800];
    *(_QWORD *)((char *)&v62 + *(_QWORD *)(*((_QWORD *)&v62 + 1) - 24) + 8) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v63 = MEMORY[0x24BEDB848] + 16;
    if (v66 < 0)
      operator delete(v65);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x22E2B0750](&v67);
  }
}

void sub_228456CB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::Decode(std::vector<std::string_view> const&,sentencepiece::SentencePieceText *)const::$_2::operator()(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, sentencepiece::util::Status *a4@<X8>)
{
  int v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  int v13;
  unint64_t *v14;
  int v15;
  int v16;
  std::string::size_type size;
  unint64_t v18;
  std::string *v19;
  int v20;
  std::string::size_type v21;
  size_t v22;
  size_t v23;
  std::string *v24;
  size_t v25;
  unint64_t v26;
  const char *v27;
  int v28;
  size_t v29;
  const char *v30;
  size_t v31;
  sentencepiece::util::Status *v32;
  char v33[8];
  unsigned int v34;
  _QWORD v35[11];
  char v36;
  uint64_t v37;
  std::string v38;

  if (a2 >= a3)
  {
    sentencepiece::util::Status::Status(a4);
  }
  else
  {
    memset(&v38, 0, sizeof(v38));
    v8 = a2;
    do
    {
      v9 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>(**(_QWORD **)a1 + 48, v8);
      v10 = *(_QWORD *)(v9 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v10 + 23) < 0)
      {
        v12 = *(void **)v10;
        v11 = *(_QWORD *)(v10 + 8);
      }
      else
      {
        v11 = *(unsigned __int8 *)(v10 + 23);
        v12 = (void *)(*(_QWORD *)(v9 + 48) & 0xFFFFFFFFFFFFFFFELL);
      }
      v13 = sentencepiece::PieceToByte(v12, v11);
      if (v13 < 0)
      {
        v34 = 13;
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v35);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"(0) <= (byte)", 13);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"] ", 2);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v34, (uint64_t)a4);
        goto LABEL_50;
      }
      std::string::append(&v38, 1uLL, v13);
      ++v8;
    }
    while (a3 != v8);
    v32 = a4;
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
    else
      v15 = v38.__r_.__value_.__r.__words[1];
    if (v15 >= 1)
    {
      v16 = 0;
      while (1)
      {
        *(_QWORD *)v33 = 0;
        size = HIBYTE(v38.__r_.__value_.__r.__words[2]);
        if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v38.__r_.__value_.__l.__size_;
        if (size < v16)
          std::__throw_out_of_range[abi:ne180100]("string_view::substr");
        v18 = v16;
        v19 = (std::string *)v38.__r_.__value_.__r.__words[0];
        if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v19 = &v38;
        if (sentencepiece::string_util::DecodeUTF8((sentencepiece::string_util *)((char *)v19 + v18), (const char *)v19 + size, v33, v14) != 65533)break;
        v20 = v18 + a2;
        if (*(_QWORD *)v33 != 1)
        {
          if (*(_QWORD *)v33 != 3)
          {
            v34 = 13;
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v35);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"(", 1);
            std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)") [", 3);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"(consumed) == (1)", 17);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"] ", 2);
            sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v34, (uint64_t)v32);
            goto LABEL_50;
          }
          goto LABEL_23;
        }
        LODWORD(v23) = *(_DWORD *)v33;
LABEL_42:
        v16 = v18 + v23;
        if (v16 >= v15)
          goto LABEL_47;
      }
      v20 = v18 + a2;
LABEL_23:
      v21 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v21 = v38.__r_.__value_.__l.__size_;
      v22 = v21 - v18;
      if (v21 < v18)
        std::__throw_out_of_range[abi:ne180100]("string_view::substr");
      v23 = *(_QWORD *)v33;
      v24 = &v38;
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v24 = (std::string *)v38.__r_.__value_.__r.__words[0];
      if (v22 >= *(_QWORD *)v33)
        v25 = *(_QWORD *)v33;
      else
        v25 = v22;
      if (*(_QWORD *)v33)
      {
        v26 = 0;
        v27 = (char *)v24 + v18;
        v28 = v20;
        do
        {
          v29 = v23 - 1;
          if (v26 == v29)
            v30 = v27;
          else
            v30 = "";
          if (v26 == v29)
            v31 = v25;
          else
            v31 = 0;
          sentencepiece::SentencePieceProcessor::Decode(std::vector<std::string_view> const&,sentencepiece::SentencePieceText *)const::$_1::operator()(*(_QWORD ***)(a1 + 8), v28 + v26++, v30, v31);
          v23 = *(_QWORD *)v33;
        }
        while (*(_QWORD *)v33 > v26);
      }
      goto LABEL_42;
    }
    v16 = 0;
LABEL_47:
    if (v16 + a2 == a3)
    {
      sentencepiece::util::Status::Status(v32);
      goto LABEL_53;
    }
    v34 = 13;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"(token_index_begin + offset) == (token_index_end)", 49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"] ", 2);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v34, (uint64_t)v32);
LABEL_50:
    v35[0] = *MEMORY[0x24BEDB800];
    *(_QWORD *)((char *)v35 + *(_QWORD *)(v35[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v35[1] = MEMORY[0x24BEDB848] + 16;
    if (v36 < 0)
      operator delete((void *)v35[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x22E2B0750](&v37);
LABEL_53:
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
  }
}

void sub_2284571A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  if (*(char *)(v11 - 89) < 0)
    operator delete(*(void **)(v11 - 112));
  _Unwind_Resume(exception_object);
}

std::string *sentencepiece::SentencePieceProcessor::Decode(std::vector<std::string_view> const&,sentencepiece::SentencePieceText *)const::$_1::operator()(_QWORD **a1, int a2, const void *a3, size_t a4)
{
  uint64_t v7;
  uint64_t v8;
  __int128 *p_dst;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  google::protobuf::internal::ArenaImpl *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int128 __dst;
  unint64_t v20;

  v7 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>(**a1 + 48, a2);
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v8 = v7;
  if (a4 >= 0x17)
  {
    v10 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v10 = a4 | 7;
    v11 = v10 + 1;
    p_dst = (__int128 *)operator new(v10 + 1);
    *((_QWORD *)&__dst + 1) = a4;
    v20 = v11 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v20) = a4;
  p_dst = &__dst;
  if (a4)
LABEL_8:
    memmove(p_dst, a3, a4);
  *((_BYTE *)p_dst + a4) = 0;
  *(_DWORD *)(v8 + 40) |= 2u;
  v12 = *(_QWORD *)(v8 + 8);
  v13 = (google::protobuf::internal::ArenaImpl *)(v12 & 0xFFFFFFFFFFFFFFFELL);
  if ((v12 & 1) != 0)
    v13 = *(google::protobuf::internal::ArenaImpl **)v13;
  google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(v8 + 56), &__dst, v13);
  if (SHIBYTE(v20) < 0)
    operator delete((void *)__dst);
  v14 = *a1[1];
  if (*(char *)(v14 + 23) < 0)
    v15 = *(_QWORD *)(v14 + 8);
  else
    LODWORD(v15) = *(unsigned __int8 *)(v14 + 23);
  v16 = *(_DWORD *)(v8 + 40);
  *(_DWORD *)(v8 + 40) = v16 | 8;
  *(_DWORD *)(v8 + 68) = v15;
  if (*(char *)(v14 + 23) < 0)
    v17 = *(_QWORD *)(v14 + 8);
  else
    LODWORD(v17) = *(unsigned __int8 *)(v14 + 23);
  *(_DWORD *)(v8 + 40) = v16 | 0x18;
  *(_DWORD *)(v8 + 72) = v17 + a4;
  return std::string::append((std::string *)v14, (const std::string::value_type *)a3, a4);
}

void sub_228457368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::Decode(uint64_t a1@<X0>, int **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v8;
  int *v9;
  int *v10;
  int v11;
  std::string::size_type v12;
  std::vector<std::string>::pointer end;
  std::string *v14;
  std::string *p_p;
  std::string::size_type size;
  std::string __p;
  int v18;
  std::vector<std::string> v19;

  memset(&v19, 0, sizeof(v19));
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 496))(a1);
  std::vector<std::string>::reserve(&v19, a2[1] - *a2);
  v9 = *a2;
  v10 = a2[1];
  if (*a2 == v10)
  {
LABEL_8:
    (*(void (**)(uint64_t, std::vector<std::string> *, uint64_t))(*(_QWORD *)a1 + 264))(a1, &v19, a3);
  }
  else
  {
    while (1)
    {
      v11 = *v9;
      v18 = v11;
      if (v11 < 0 || v11 >= v8)
        break;
      __p.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 512))(a1);
      __p.__r_.__value_.__l.__size_ = v12;
      end = v19.__end_;
      if (v19.__end_ >= v19.__end_cap_.__value_)
      {
        v14 = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string_view>((uint64_t)&v19, (uint64_t)&__p);
      }
      else
      {
        std::allocator<std::string>::construct[abi:ne180100]<std::string,std::string_view>((int)&v19.__end_cap_, v19.__end_, (uint64_t)&__p);
        v14 = end + 1;
      }
      v19.__end_ = v14;
      if (++v9 == v10)
        goto LABEL_8;
    }
    absl::StrCat<int>("Invalid id: ", 0xCuLL, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    sentencepiece::util::Status::Status(a4, 11, p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_2284574F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18)
{
  if (a15 < 0)
    operator delete(__p);
  __p = &a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void absl::StrCat<int>(void *__src@<X0>, size_t __len@<X1>, std::string *a3@<X8>)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  void *v7[2];
  unsigned __int8 v8;
  std::string __dst;
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  std::string::basic_string[abi:ne180100](&__dst, __src, __len);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  std::ostream::operator<<();
  std::stringbuf::str();
  v10[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v10[1] = MEMORY[0x24BEDB848] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22E2B0750](&v12);
  if ((v8 & 0x80u) == 0)
    v4 = v7;
  else
    v4 = (void **)v7[0];
  if ((v8 & 0x80u) == 0)
    v5 = v8;
  else
    v5 = (std::string::size_type)v7[1];
  v6 = std::string::append(&__dst, (const std::string::value_type *)v4, v5);
  *a3 = *v6;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if ((char)v8 < 0)
    operator delete(v7[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_228457668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sentencepiece::SentencePieceProcessor::GetPieceSize(sentencepiece::SentencePieceProcessor *this)
{
  uint64_t v2;
  sentencepiece::logging *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const char *v10;
  size_t v11;
  _QWORD *v12;
  char v14;
  uint64_t v15;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 88))(&v15);
  v2 = v15;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v15);
  if (!v2)
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 128))(*((_QWORD *)this + 1));
  if ((int)sentencepiece::logging::GetMinLogLevel(v3) <= 2)
  {
    v14 = 0;
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"(", 1);
    v5 = (_QWORD *)std::ostream::operator<<();
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)") ", 2);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"LOG(", 4);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"ERROR", 5);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)") ", 2);
    (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceProcessor *))(*(_QWORD *)this + 88))(&v15, this);
    v10 = sentencepiece::util::Status::error_message((sentencepiece::util::Status *)&v15);
    v11 = strlen(v10);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v15);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v14);
  }
  return 0;
}

void sub_2284577E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a12);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SentencePieceProcessor::PieceToId(_QWORD **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  sentencepiece::logging *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  const char *v14;
  size_t v15;
  _QWORD *v16;
  char v18;
  uint64_t v19;

  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v19);
  v6 = v19;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v19);
  if (!v6)
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1[1] + 112))(a1[1], a2, a3);
  if ((int)sentencepiece::logging::GetMinLogLevel(v7) <= 2)
  {
    v18 = 0;
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"(", 1);
    v9 = (_QWORD *)std::ostream::operator<<();
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)") ", 2);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"LOG(", 4);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"ERROR", 5);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, _QWORD **))(*a1)[11])(&v19, a1);
    v14 = sentencepiece::util::Status::error_message((sentencepiece::util::Status *)&v19);
    v15 = strlen(v14);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v19);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v18);
  }
  return 0;
}

void sub_228457964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a12);
  _Unwind_Resume(a1);
}

const char *sentencepiece::SentencePieceProcessor::IdToPiece(sentencepiece::SentencePieceProcessor *this, uint64_t a2)
{
  uint64_t v4;
  sentencepiece::logging *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  const char *v12;
  size_t v13;
  _QWORD *v14;
  _QWORD *v15;
  char v17;
  uint64_t v18;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 88))(&v18);
  v4 = v18;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v18);
  if (!v4)
    return (const char *)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 120))(*((_QWORD *)this + 1), a2);
  if ((int)sentencepiece::logging::GetMinLogLevel(v5) <= 2)
  {
    v17 = 0;
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(", 1);
    v7 = (_QWORD *)std::ostream::operator<<();
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"LOG(", 4);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ERROR", 5);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") ", 2);
    (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceProcessor *))(*(_QWORD *)this + 88))(&v18, this);
    v12 = sentencepiece::util::Status::error_message((sentencepiece::util::Status *)&v18);
    v13 = strlen(v12);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\nReturns default value ", 23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"", 0);
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v18);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v17);
  }
  return "";
}

void sub_228457AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a12);
  _Unwind_Resume(a1);
}

float sentencepiece::SentencePieceProcessor::GetScore(sentencepiece::SentencePieceProcessor *this, uint64_t a2)
{
  uint64_t v4;
  sentencepiece::logging *v5;
  float v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  size_t v14;
  _QWORD *v15;
  char v17;
  uint64_t v18;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 88))(&v18);
  v4 = v18;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v18);
  if (!v4)
    return (*(float (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 136))(*((_QWORD *)this + 1), a2);
  v6 = 0.0;
  if ((int)sentencepiece::logging::GetMinLogLevel(v5) <= 2)
  {
    v17 = 0;
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"(", 1);
    v8 = (_QWORD *)std::ostream::operator<<();
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)") ", 2);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"LOG(", 4);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"ERROR", 5);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)") ", 2);
    (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceProcessor *))(*(_QWORD *)this + 88))(&v18, this);
    v13 = sentencepiece::util::Status::error_message((sentencepiece::util::Status *)&v18);
    v14 = strlen(v13);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v18);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v17);
  }
  return v6;
}

void sub_228457C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a12);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SentencePieceProcessor::IsControl(sentencepiece::SentencePieceProcessor *this, uint64_t a2)
{
  uint64_t v4;
  sentencepiece::logging *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  const char *v12;
  size_t v13;
  _QWORD *v14;
  char v16;
  uint64_t v17;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 88))(&v17);
  v4 = v17;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
  if (!v4)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 152))(*((_QWORD *)this + 1), a2);
  if ((int)sentencepiece::logging::GetMinLogLevel(v5) <= 2)
  {
    v16 = 0;
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(", 1);
    v7 = (_QWORD *)std::ostream::operator<<();
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"LOG(", 4);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ERROR", 5);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") ", 2);
    (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceProcessor *))(*(_QWORD *)this + 88))(&v17, this);
    v12 = sentencepiece::util::Status::error_message((sentencepiece::util::Status *)&v17);
    v13 = strlen(v12);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v16);
  }
  return 0;
}

void sub_228457DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a12);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SentencePieceProcessor::IsUnknown(sentencepiece::SentencePieceProcessor *this, uint64_t a2)
{
  uint64_t v4;
  sentencepiece::logging *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  const char *v12;
  size_t v13;
  _QWORD *v14;
  char v16;
  uint64_t v17;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 88))(&v17);
  v4 = v17;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
  if (!v4)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 144))(*((_QWORD *)this + 1), a2);
  if ((int)sentencepiece::logging::GetMinLogLevel(v5) <= 2)
  {
    v16 = 0;
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(", 1);
    v7 = (_QWORD *)std::ostream::operator<<();
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"LOG(", 4);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ERROR", 5);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") ", 2);
    (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceProcessor *))(*(_QWORD *)this + 88))(&v17, this);
    v12 = sentencepiece::util::Status::error_message((sentencepiece::util::Status *)&v17);
    v13 = strlen(v12);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v16);
  }
  return 0;
}

void sub_228457F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a12);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SentencePieceProcessor::IsUnused(sentencepiece::SentencePieceProcessor *this, uint64_t a2)
{
  uint64_t v4;
  sentencepiece::logging *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  const char *v12;
  size_t v13;
  _QWORD *v14;
  char v16;
  uint64_t v17;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 88))(&v17);
  v4 = v17;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
  if (!v4)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 160))(*((_QWORD *)this + 1), a2);
  if ((int)sentencepiece::logging::GetMinLogLevel(v5) <= 2)
  {
    v16 = 0;
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(", 1);
    v7 = (_QWORD *)std::ostream::operator<<();
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"LOG(", 4);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ERROR", 5);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") ", 2);
    (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceProcessor *))(*(_QWORD *)this + 88))(&v17, this);
    v12 = sentencepiece::util::Status::error_message((sentencepiece::util::Status *)&v17);
    v13 = strlen(v12);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v16);
  }
  return 0;
}

void sub_2284580C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a12);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SentencePieceProcessor::IsByte(sentencepiece::SentencePieceProcessor *this, uint64_t a2)
{
  uint64_t v4;
  sentencepiece::logging *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  const char *v12;
  size_t v13;
  _QWORD *v14;
  char v16;
  uint64_t v17;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 88))(&v17);
  v4 = v17;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
  if (!v4)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 176))(*((_QWORD *)this + 1), a2);
  if ((int)sentencepiece::logging::GetMinLogLevel(v5) <= 2)
  {
    v16 = 0;
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(", 1);
    v7 = (_QWORD *)std::ostream::operator<<();
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"LOG(", 4);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ERROR", 5);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") ", 2);
    (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceProcessor *))(*(_QWORD *)this + 88))(&v17, this);
    v12 = sentencepiece::util::Status::error_message((sentencepiece::util::Status *)&v17);
    v13 = strlen(v12);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v16);
  }
  return 0;
}

void sub_22845823C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a12);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SentencePieceProcessor::unk_id(sentencepiece::ModelInterface **this)
{
  const char *v2;
  size_t v3;
  uint64_t v4;

  v2 = sentencepiece::ModelInterface::unk_piece(this[1]);
  v3 = strlen(v2);
  v4 = (*((uint64_t (**)(sentencepiece::ModelInterface **, const char *, size_t))*this + 63))(this, v2, v3);
  if ((*((unsigned int (**)(sentencepiece::ModelInterface **, uint64_t))*this + 66))(this, v4))
    return v4;
  else
    return 0xFFFFFFFFLL;
}

uint64_t sentencepiece::SentencePieceProcessor::bos_id(sentencepiece::ModelInterface **this)
{
  const char *v2;
  size_t v3;
  uint64_t v4;

  v2 = sentencepiece::ModelInterface::bos_piece(this[1]);
  v3 = strlen(v2);
  v4 = (*((uint64_t (**)(sentencepiece::ModelInterface **, const char *, size_t))*this + 63))(this, v2, v3);
  if ((*((unsigned int (**)(sentencepiece::ModelInterface **, uint64_t))*this + 67))(this, v4))
    return v4;
  else
    return 0xFFFFFFFFLL;
}

uint64_t sentencepiece::SentencePieceProcessor::eos_id(sentencepiece::ModelInterface **this)
{
  const char *v2;
  size_t v3;
  uint64_t v4;

  v2 = sentencepiece::ModelInterface::eos_piece(this[1]);
  v3 = strlen(v2);
  v4 = (*((uint64_t (**)(sentencepiece::ModelInterface **, const char *, size_t))*this + 63))(this, v2, v3);
  if ((*((unsigned int (**)(sentencepiece::ModelInterface **, uint64_t))*this + 67))(this, v4))
    return v4;
  else
    return 0xFFFFFFFFLL;
}

uint64_t sentencepiece::SentencePieceProcessor::pad_id(sentencepiece::ModelInterface **this)
{
  const char *v2;
  size_t v3;
  uint64_t v4;

  v2 = sentencepiece::ModelInterface::pad_piece(this[1]);
  v3 = strlen(v2);
  v4 = (*((uint64_t (**)(sentencepiece::ModelInterface **, const char *, size_t))*this + 63))(this, v2, v3);
  if ((*((unsigned int (**)(sentencepiece::ModelInterface **, uint64_t))*this + 67))(this, v4))
    return v4;
  else
    return 0xFFFFFFFFLL;
}

_QWORD *sentencepiece::SentencePieceProcessor::LookupPredictive@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, sentencepiece::util::Status *a5@<X8>)
{
  _QWORD *result;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned int v15;
  _QWORD v16[11];
  char v17;
  uint64_t v18;

  result = ((_QWORD *(*)(sentencepiece::util::Status *__return_ptr))(*a1)[11])(a5);
  if (!*(_QWORD *)a5)
  {
    sentencepiece::util::Status::~Status(a5);
    if (a4)
    {
      std::vector<std::string>::__clear[abi:ne180100](a4);
      v11 = *((char *)a2 + 23);
      if (v11 >= 0)
        v12 = a2;
      else
        v12 = (uint64_t *)*a2;
      if (v11 >= 0)
        v13 = *((unsigned __int8 *)a2 + 23);
      else
        v13 = a2[1];
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t *, uint64_t, uint64_t, uint64_t *))(*a1[1] + 200))(a1[1], v12, v13, a3, a4);
    }
    else
    {
      v15 = 13;
      v14 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"pieces", 6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v15, (uint64_t)a5);
      v16[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v16[1] = MEMORY[0x24BEDB848] + 16;
      if (v17 < 0)
        operator delete((void *)v16[9]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x22E2B0750](&v18);
    }
  }
  return result;
}

void sub_2284585B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sentencepiece::SentencePieceProcessor::LookupPredictive@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, sentencepiece::util::Status *a5@<X8>)
{
  _QWORD *result;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned int v15;
  _QWORD v16[11];
  char v17;
  uint64_t v18;

  result = ((_QWORD *(*)(sentencepiece::util::Status *__return_ptr))(*a1)[11])(a5);
  if (!*(_QWORD *)a5)
  {
    sentencepiece::util::Status::~Status(a5);
    if (a4)
    {
      a4[1] = *a4;
      v11 = *((char *)a2 + 23);
      if (v11 >= 0)
        v12 = a2;
      else
        v12 = (uint64_t *)*a2;
      if (v11 >= 0)
        v13 = *((unsigned __int8 *)a2 + 23);
      else
        v13 = a2[1];
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t *, uint64_t, uint64_t, _QWORD *))(*a1[1] + 208))(a1[1], v12, v13, a3, a4);
    }
    else
    {
      v15 = 13;
      v14 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"ids", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v15, (uint64_t)a5);
      v16[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v16[1] = MEMORY[0x24BEDB848] + 16;
      if (v17 < 0)
        operator delete((void *)v16[9]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x22E2B0750](&v18);
    }
  }
  return result;
}

void sub_228458794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string_view,sentencepiece::SentencePieceProcessor::ExtraOption>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::destroy(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t sentencepiece::SentencePieceProcessor::SetModel(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sentencepiece::SentencePieceProcessor::SetNormalizer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void **sentencepiece::SentencePieceProcessor::model_proto(sentencepiece::SentencePieceProcessor *this)
{
  void **v1;
  void **result;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char v8;

  v1 = (void **)*((_QWORD *)this + 4);
  if (!v1 || (v3 = *v1, result = v1 - 2, v3 != &unk_24F0FE408))
  {
    v8 = 1;
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"(", 1);
    v5 = (_QWORD *)std::ostream::operator<<();
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)") [", 3);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(model_proto = dynamic_cast<const ModelProto *>(model_proto_.get()))", 68);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"] ", 2);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v8);
    return 0;
  }
  return result;
}

void sub_2284588D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a13);
  _Unwind_Resume(a1);
}

_QWORD *sentencepiece::SentencePieceProcessor::serialized_model_proto@<X0>(sentencepiece::SentencePieceProcessor *this@<X0>, _QWORD *a2@<X8>)
{
  void **v2;

  v2 = (void **)*((_QWORD *)this + 4);
  if (v2 && *v2 == &unk_24F0FE408)
    return (_QWORD *)google::protobuf::MessageLite::SerializeAsString((google::protobuf::MessageLite *)(v2 - 2), (uint64_t)a2);
  else
    return std::string::basic_string[abi:ne180100]<0>(a2, "");
}

void sentencepiece::SentencePieceProcessor::MemoryMappableString(sentencepiece::SentencePieceProcessor *this@<X0>, std::string *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  std::string *v22;
  std::string *v23;
  std::string::size_type size;
  std::string *v25;
  std::string::size_type v26;
  std::string *v27;
  std::string::size_type v28;
  std::string *v29;
  std::string::size_type v30;
  std::string *p_p;
  std::string::size_type v32;
  std::string v33;
  std::string __p;
  std::string v35;
  std::string v36;
  std::string v37;

  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)this + 88))(&v37);
  if (v37.__r_.__value_.__r.__words[0])
  {
    v36.__r_.__value_.__s.__data_[0] = 1;
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"(", 1);
    v5 = (_QWORD *)std::ostream::operator<<();
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)") [", 3);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"status().ok()", 13);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"To serialize, SentencePieceProcessor has to be initialized.", 59);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v36);
  }
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v37);
  sentencepiece::GetMemoryMappableString(*((_QWORD *)this + 4), &v37);
  sentencepiece::mmap_util::Padding(&v37);
  (*(void (**)(std::string *__return_ptr))(**((_QWORD **)this + 1) + 216))(&v36);
  sentencepiece::mmap_util::Padding(&v36);
  (*(void (**)(std::string *__return_ptr))(**((_QWORD **)this + 2) + 48))(&v35);
  sentencepiece::mmap_util::Padding(&v35);
  v9 = *((_QWORD *)this + 3);
  if (v9)
    (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v9 + 48))(&__p);
  else
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
  sentencepiece::mmap_util::Padding(&__p);
  v10 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
  v11 = v37.__r_.__value_.__r.__words[1];
  v12 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
  v13 = v36.__r_.__value_.__r.__words[1];
  v14 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  v15 = v35.__r_.__value_.__r.__words[1];
  v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v17 = __p.__r_.__value_.__r.__words[1];
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  memset(&v33, 0, sizeof(v33));
  std::string::resize(&v33, 0x14uLL, 0);
  if ((v16 & 0x80u) == 0)
    v18 = v16;
  else
    v18 = v17;
  if ((v14 & 0x80u) == 0)
    v19 = v14;
  else
    v19 = v15;
  if ((v12 & 0x80u) == 0)
    v20 = v12;
  else
    v20 = v13;
  if ((v10 & 0x80u) == 0)
    v21 = v10;
  else
    v21 = v11;
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &v33;
  else
    v22 = (std::string *)v33.__r_.__value_.__r.__words[0];
  LODWORD(v22->__r_.__value_.__l.__data_) = 0;
  HIDWORD(v22->__r_.__value_.__r.__words[0]) = v21;
  LODWORD(v22->__r_.__value_.__r.__words[1]) = v20;
  HIDWORD(v22->__r_.__value_.__r.__words[1]) = v19;
  LODWORD(v22->__r_.__value_.__r.__words[2]) = v18;
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = &v33;
  else
    v23 = (std::string *)v33.__r_.__value_.__r.__words[0];
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
  else
    size = v33.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v23, size);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = &v37;
  else
    v25 = (std::string *)v37.__r_.__value_.__r.__words[0];
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v26 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
  else
    v26 = v37.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v25, v26);
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v27 = &v36;
  else
    v27 = (std::string *)v36.__r_.__value_.__r.__words[0];
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v28 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
  else
    v28 = v36.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v27, v28);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = &v35;
  else
    v29 = (std::string *)v35.__r_.__value_.__r.__words[0];
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v30 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  else
    v30 = v35.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v29, v30);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v32 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v32 = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)p_p, v32);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
}

void sub_228458C2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v39 + 23) < 0)
    operator delete(*(void **)v39);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  if (a39 < 0)
    operator delete(a34);
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::SerializedString(sentencepiece::SentencePieceProcessor *this@<X0>, std::string *a2@<X8>)
{
  void **v2;

  v2 = (void **)*((_QWORD *)this + 4);
  if (v2)
  {
    if (*v2 == &unk_24F0FE408)
      sentencepiece::SentencePieceProcessor::serialized_model_proto(this, a2);
    else
      sentencepiece::SentencePieceProcessor::MemoryMappableString(this, a2);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
}

void sentencepiece::SentencePieceProcessor::LoadFromMemoryMappedFile(sentencepiece::SentencePieceProcessor *this@<X0>, const char *a2@<X1>, unint64_t a3@<X2>, sentencepiece::util::Status *a4@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v9;
  _QWORD *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  _QWORD *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  const char *v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  _QWORD *v40;
  uint64_t v41;
  const char *v42;
  _QWORD v43[11];
  char v44;
  uint64_t v45;
  const char *v46;
  unint64_t v47;

  v46 = a2;
  v47 = a3;
  if (a3 <= 0x13)
  {
    LODWORD(v42) = 13;
    v7 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(size) >= (sizeof(MMapHeader))", 30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"] ", 2);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v42, (uint64_t)a4);
    goto LABEL_5;
  }
  if (*(_DWORD *)a2)
  {
    LODWORD(v42) = 13;
    v6 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"header->sentinel == 0", 21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"This file format is not for mmap-based loading.", 47);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v42, (uint64_t)a4);
LABEL_5:
    v43[0] = *MEMORY[0x24BEDB800];
    *(_QWORD *)((char *)v43 + *(_QWORD *)(v43[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v43[1] = MEMORY[0x24BEDB848] + 16;
    if (v44 < 0)
      operator delete((void *)v43[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x22E2B0750](&v45);
    return;
  }
  sentencepiece::mmap_util::RemovePrefix(&v46, 0x14uLL, a4);
  if (*(_QWORD *)a4)
    return;
  sentencepiece::util::Status::~Status(a4);
  v9 = *((unsigned int *)a2 + 1);
  if (v47 < v9)
  {
    LODWORD(v42) = 13;
    v10 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(blob.size()) >= (header->model_proto_size)", 43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"] ", 2);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v42, (uint64_t)a4);
    goto LABEL_5;
  }
  v11 = v46;
  v12 = operator new();
  sentencepiece::MemoryMappedModelProto::MemoryMappedModelProto(v12, v11, v9);
  v13 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v12;
  if (v13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v12 = *((_QWORD *)this + 4);
  }
  sentencepiece::util::Status::Status((sentencepiece::util::Status *)&v42, (const sentencepiece::util::Status *)(v12 + 88));
  v14 = v42;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v42);
  if (v14)
  {
    LODWORD(v42) = 13;
    v15 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"model_proto->status().ok()", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Failed to initialize ModelProto.", 32);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v42, (uint64_t)a4);
    goto LABEL_5;
  }
  sentencepiece::mmap_util::RemovePrefix(&v46, *((unsigned int *)a2 + 1), a4);
  if (*(_QWORD *)a4)
    return;
  sentencepiece::util::Status::~Status(a4);
  if (v47 >= *((unsigned int *)a2 + 2))
    v16 = *((unsigned int *)a2 + 2);
  else
    v16 = v47;
  sentencepiece::ModelFactory::Create(v12, (uint64_t)v46, v16, &v42);
  v17 = v42;
  v42 = 0;
  v18 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v17;
  if (v18)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = v42;
    v42 = 0;
    if (v19)
      (*(void (**)(const char *))(*(_QWORD *)v19 + 8))(v19);
    v17 = (const char *)*((_QWORD *)this + 1);
  }
  if (!v17)
  {
    LODWORD(v42) = 13;
    v21 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"model_", 6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Failed to initialize Model.", 27);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v42, (uint64_t)a4);
    goto LABEL_28;
  }
  (*(void (**)(const char **__return_ptr))(*(_QWORD *)v17 + 16))(&v42);
  v20 = v42;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v42);
  if (v20)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1));
    return;
  }
  sentencepiece::mmap_util::RemovePrefix(&v46, *((unsigned int *)a2 + 2), a4);
  if (!*(_QWORD *)a4)
  {
    sentencepiece::util::Status::~Status(a4);
    v22 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v22)
    {
      if (v47 >= v22)
      {
        v25 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 152))(*((_QWORD *)this + 4));
        v26 = *((unsigned int *)a2 + 3);
        if (v47 < v26)
          v26 = v47;
        v42 = v46;
        v43[0] = v26;
        std::make_unique[abi:ne180100]<sentencepiece::normalizer::Normalizer,sentencepiece::MemoryMappedNormalizerSpec const&,std::string_view>(v25, &v42, &v41);
        v27 = v41;
        v41 = 0;
        v28 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v27;
        if (v28)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
          v29 = v41;
          v41 = 0;
          if (v29)
            (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
        }
        (*(void (**)(const char **__return_ptr))(**((_QWORD **)this + 2) + 24))(&v42);
        v30 = v42;
        sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v42);
        if (!v30)
        {
          sentencepiece::mmap_util::RemovePrefix(&v46, *((unsigned int *)a2 + 3), a4);
          if (*(_QWORD *)a4)
            return;
          sentencepiece::util::Status::~Status(a4);
          v32 = *((_QWORD *)this + 2);
          v33 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 16))(v32, v33);
          if (*((_DWORD *)a2 + 4))
          {
            v34 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 160))(*((_QWORD *)this + 4));
            v35 = *((unsigned int *)a2 + 4);
            if (v47 < v35)
              v35 = v47;
            v42 = v46;
            v43[0] = v35;
            std::make_unique[abi:ne180100]<sentencepiece::normalizer::Normalizer,sentencepiece::MemoryMappedNormalizerSpec const&,std::string_view>(v34, &v42, &v41);
            v36 = v41;
            v41 = 0;
            v37 = *((_QWORD *)this + 3);
            *((_QWORD *)this + 3) = v36;
            if (v37)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
              v38 = v41;
              v41 = 0;
              if (v38)
                (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
            }
            (*(void (**)(const char **__return_ptr))(**((_QWORD **)this + 3) + 24))(&v42);
            v39 = v42;
            sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v42);
            if (v39)
            {
              LODWORD(v42) = 13;
              v40 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v43);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(", 1);
              std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") [", 3);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"denormalizer_->status().ok()", 28);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"] ", 2);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Failed to initialize Denormalizer.", 34);
              sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v42, (uint64_t)a4);
              goto LABEL_28;
            }
            sentencepiece::mmap_util::RemovePrefix(&v46, *((unsigned int *)a2 + 4), a4);
            if (*(_QWORD *)a4)
              return;
            sentencepiece::util::Status::~Status(a4);
          }
          sentencepiece::util::Status::Status(a4);
          return;
        }
        LODWORD(v42) = 13;
        v31 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v43);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"normalizer_->status().ok()", 26);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"] ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Failed to initialize Normalizer.", 32);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v42, (uint64_t)a4);
      }
      else
      {
        LODWORD(v42) = 13;
        v23 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v43);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(blob.size()) >= (header->normalizer_size)", 42);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"] ", 2);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v42, (uint64_t)a4);
      }
    }
    else
    {
      LODWORD(v42) = 13;
      v24 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v43);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(header->normalizer_size) > (0)", 31);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"] ", 2);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v42, (uint64_t)a4);
    }
LABEL_28:
    sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&v42);
  }
}

void sub_228459694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)va);
  _Unwind_Resume(a1);
}

uint64_t std::make_unique[abi:ne180100]<sentencepiece::normalizer::Normalizer,sentencepiece::MemoryMappedNormalizerSpec const&,std::string_view>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = operator new();
  result = sentencepiece::normalizer::Normalizer::Normalizer(v6, a1, *a2, a2[1]);
  *a3 = v6;
  return result;
}

void sub_228459764(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2B07A4](v1, 0x10F1C40C7D4252BLL);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SentencePieceProcessor::CopyAndLoadFromMemoryMappedFile(sentencepiece::SentencePieceProcessor *this, const char *a2)
{
  char *v3;
  uint64_t v4;

  v3 = (char *)this + 96;
  MEMORY[0x22E2B0534]((char *)this + 96, a2);
  if (*((char *)this + 119) < 0)
  {
    v3 = (char *)*((_QWORD *)this + 12);
    v4 = *((_QWORD *)this + 13);
  }
  else
  {
    v4 = *((unsigned __int8 *)this + 119);
  }
  return (*(uint64_t (**)(sentencepiece::SentencePieceProcessor *, char *, uint64_t))(*(_QWORD *)this + 48))(this, v3, v4);
}

void sentencepiece::SentencePieceProcessor::MMap(_QWORD *a1@<X0>, char *a2@<X1>, sentencepiece::util::Status *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  std::string __p;

  v6 = operator new();
  *(_QWORD *)v6 = &off_24F0FDA48;
  *(_QWORD *)(v6 + 8) = 0;
  *(_DWORD *)(v6 + 24) = -1;
  v7 = a1[11];
  a1[11] = v6;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v6 = a1[11];
  }
  v8 = a2;
  std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&__p, &v8);
  sentencepiece::Mmap<char>::open(v6, (uint64_t)&__p, 0, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!*(_QWORD *)a3)
  {
    sentencepiece::util::Status::~Status(a3);
    (*(void (**)(_QWORD *, _QWORD, _QWORD))(*a1 + 48))(a1, *(_QWORD *)(a1[11] + 8), *(_QWORD *)(a1[11] + 16));
  }
}

void sub_2284598C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::Mmap<char>::open(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  std::string *v8;
  int v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  std::string::value_type *v13;
  std::string *v14;
  int v15;
  int v16;
  std::string::size_type size;
  std::__fs::filesystem::path *v18;
  std::string *v19;
  off_t st_size;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _BYTE *v25;
  std::string __p[3];
  void *v27;
  char v28;
  _BYTE v29[152];
  std::string v30;
  std::__fs::filesystem::path v31;
  stat v32;

  sentencepiece::Mmap<char>::close(a1);
  if (!a3)
  {
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      __p[0] = *(std::string *)a2;
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = __p;
    else
      v8 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    v9 = open((const char *)v8, 0, __p[0].__r_.__value_.__r.__words[0], __p[0].__r_.__value_.__l.__size_, __p[0].__r_.__value_.__r.__words[2]);
    v10 = v9;
    *(_DWORD *)(a1 + 24) = v9;
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p[0].__r_.__value_.__l.__data_);
      if ((v10 & 0x80000000) == 0)
        goto LABEL_52;
    }
    else if ((v9 & 0x80000000) == 0)
    {
      goto LABEL_52;
    }
    LODWORD(__p[0].__r_.__value_.__l.__data_) = 13;
    v11 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[0].__r_.__value_.__l.__size_);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"(fd = ::open(filename.string().data(), mode)) >= 0", 50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"open failed: ", 13);
    v12 = *(unsigned __int8 *)(a2 + 23);
    if ((v12 & 0x80u) == 0)
      v13 = (std::string::value_type *)a2;
    else
      v13 = *(std::string::value_type **)a2;
    if ((v12 & 0x80u) != 0)
      v12 = *(_QWORD *)(a2 + 8);
LABEL_66:
    std::__quoted_output[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, v13, &v13[v12], 0x22u, 0x5Cu);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)__p, (uint64_t)a4);
    __p[0].__r_.__value_.__l.__size_ = *MEMORY[0x24BEDB800];
    *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[1]
                              + *(_QWORD *)(__p[0].__r_.__value_.__l.__size_ - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800]
                                                                                                + 24);
    __p[0].__r_.__value_.__r.__words[2] = MEMORY[0x24BEDB848] + 16;
    if (v28 < 0)
      operator delete(v27);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x22E2B0750](v29);
    return;
  }
  std::__fs::filesystem::path::parent_path[abi:ne180100]((const std::__fs::filesystem::path *)a2, (uint64_t)&v31);
  std::__fs::filesystem::path::filename[abi:ne180100]((const std::__fs::filesystem::path *)a2, (uint64_t)&v30);
  std::__fs::filesystem::__status(&v31, 0);
  if (__p[0].__r_.__value_.__s.__data_[0] != 2)
    goto LABEL_30;
  if (SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(__p, v31.__pn_.__r_.__value_.__l.__data_, v31.__pn_.__r_.__value_.__l.__size_);
  else
    __p[0] = v31.__pn_;
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = __p;
  else
    v14 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  v15 = open((const char *)v14, 0, __p[0].__r_.__value_.__r.__words[0], __p[0].__r_.__value_.__l.__size_, __p[0].__r_.__value_.__r.__words[2]);
  v16 = v15;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if ((v16 & 0x80000000) == 0)
      goto LABEL_27;
LABEL_30:
    LODWORD(__p[0].__r_.__value_.__l.__data_) = 13;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[0].__r_.__value_.__l.__size_);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"std::filesystem::is_directory(dir) && (dirfd = ::open(dir.string().data(), mode)) >= 0", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"open failed: ", 13);
    size = HIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]);
    if ((v31.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = &v31;
    else
      v18 = (std::__fs::filesystem::path *)v31.__pn_.__r_.__value_.__r.__words[0];
    if ((v31.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v31.__pn_.__r_.__value_.__l.__size_;
    std::__quoted_output[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, v18, (_BYTE *)v18 + size, 0x22u, 0x5Cu);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)__p, (uint64_t)a4);
    __p[0].__r_.__value_.__l.__size_ = *MEMORY[0x24BEDB800];
    *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[1]
                              + *(_QWORD *)(__p[0].__r_.__value_.__l.__size_ - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800]
                                                                                                + 24);
    __p[0].__r_.__value_.__r.__words[2] = MEMORY[0x24BEDB848] + 16;
    if (v28 < 0)
      operator delete(v27);
    goto LABEL_37;
  }
  if (v15 < 0)
    goto LABEL_30;
LABEL_27:
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(__p, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
  else
    __p[0] = v30;
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = __p;
  else
    v19 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  *(_DWORD *)(a1 + 24) = openat_authenticated_np(v16, (const char *)v19, 0, -1);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  close(v16);
  if ((*(_DWORD *)(a1 + 24) & 0x80000000) == 0)
  {
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__pn_.__r_.__value_.__l.__data_);
LABEL_52:
    if (fstat(*(_DWORD *)(a1 + 24), &v32) < 0)
    {
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 13;
      v22 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[0].__r_.__value_.__l.__size_);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"::fstat(fd, &st) >= 0", 21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"failed to get file size: ", 25);
      v12 = *(unsigned __int8 *)(a2 + 23);
      if ((v12 & 0x80u) == 0)
        v13 = (std::string::value_type *)a2;
      else
        v13 = *(std::string::value_type **)a2;
      if ((v12 & 0x80u) != 0)
        v12 = *(_QWORD *)(a2 + 8);
    }
    else
    {
      st_size = v32.st_size;
      *(_QWORD *)(a1 + 16) = v32.st_size;
      v21 = mmap(0, st_size, 1, 1, *(_DWORD *)(a1 + 24), 0);
      if (v21 != (void *)-1)
      {
        *(_QWORD *)(a1 + 8) = v21;
        close(*(_DWORD *)(a1 + 24));
        *(_DWORD *)(a1 + 24) = -1;
        sentencepiece::util::Status::Status(a4);
        return;
      }
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 13;
      v23 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[0].__r_.__value_.__l.__size_);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"(p = reinterpret_cast<char*>( ::mmap(0, length, PROT_READ, MAP_SHARED, fd, 0))) != MAP_FAILED", 93);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"mmap() failed: ", 15);
      v12 = *(unsigned __int8 *)(a2 + 23);
      if ((v12 & 0x80u) == 0)
        v13 = (std::string::value_type *)a2;
      else
        v13 = *(std::string::value_type **)a2;
      if ((v12 & 0x80u) != 0)
        v12 = *(_QWORD *)(a2 + 8);
    }
    goto LABEL_66;
  }
  LODWORD(__p[0].__r_.__value_.__l.__data_) = 13;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[0].__r_.__value_.__l.__size_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"(", 1);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)") [", 3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"fd >= 0", 7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"open failed: ", 13);
  v24 = *(unsigned __int8 *)(a2 + 23);
  if ((v24 & 0x80u) == 0)
    v25 = (_BYTE *)a2;
  else
    v25 = *(_BYTE **)a2;
  if ((v24 & 0x80u) != 0)
    v24 = *(_QWORD *)(a2 + 8);
  std::__quoted_output[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, v25, &v25[v24], 0x22u, 0x5Cu);
  sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)__p, (uint64_t)a4);
  __p[0].__r_.__value_.__l.__size_ = *MEMORY[0x24BEDB800];
  *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[1]
                            + *(_QWORD *)(__p[0].__r_.__value_.__l.__size_ - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800]
                                                                                              + 24);
  __p[0].__r_.__value_.__r.__words[2] = MEMORY[0x24BEDB848] + 16;
  if (v28 < 0)
    operator delete(v27);
LABEL_37:
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22E2B0750](v29);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__pn_.__r_.__value_.__l.__data_);
}

void sub_22845A080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (*(char *)(v14 - 217) < 0)
    operator delete(*(void **)(v14 - 240));
  if (*(char *)(v14 - 193) < 0)
    operator delete(*(void **)(v14 - 216));
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::MMapAuthenticated(_QWORD *a1@<X0>, char *a2@<X1>, sentencepiece::util::Status *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  std::string __p;

  v6 = operator new();
  *(_QWORD *)v6 = &off_24F0FDA48;
  *(_QWORD *)(v6 + 8) = 0;
  *(_DWORD *)(v6 + 24) = -1;
  v7 = a1[11];
  a1[11] = v6;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v6 = a1[11];
  }
  v8 = a2;
  std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&__p, &v8);
  sentencepiece::Mmap<char>::open(v6, (uint64_t)&__p, 1, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!*(_QWORD *)a3)
  {
    sentencepiece::util::Status::~Status(a3);
    (*(void (**)(_QWORD *, _QWORD, _QWORD))(*a1 + 48))(a1, *(_QWORD *)(a1[11] + 8), *(_QWORD *)(a1[11] + 16));
  }
}

void sub_22845A218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sentencepiece::io::SaveModelProto@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, google::protobuf::MessageLite *a3@<X2>, sentencepiece::util::Status *a4@<X8>)
{
  uint64_t v6;
  void *p_p;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t result;
  void *__p;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;

  if (!a2)
    return sentencepiece::util::Status::Status(a4, 5, "model file path should not be empty.", 36);
  sentencepiece::filesystem::NewWritableFile(a1, a2, 1, &v18);
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
  if (!*(_QWORD *)a4)
  {
    sentencepiece::util::Status::~Status(a4);
    v6 = v18;
    google::protobuf::MessageLite::SerializeAsString(a3, (uint64_t)&__p);
    if (v14 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    if (v14 >= 0)
      v8 = HIBYTE(v14);
    else
      v8 = v13;
    v9 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)v6 + 24))(v6, p_p, v8);
    v10 = v9;
    if (SHIBYTE(v14) < 0)
    {
      operator delete(__p);
      if ((v10 & 1) != 0)
        goto LABEL_11;
    }
    else if ((v9 & 1) != 0)
    {
LABEL_11:
      sentencepiece::util::Status::Status(a4);
      goto LABEL_17;
    }
    LODWORD(__p) = 13;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"output->Write(model_proto.SerializeAsString())", 46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"] ", 2);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&__p, (uint64_t)a4);
    v13 = *MEMORY[0x24BEDB800];
    *(uint64_t *)((char *)&v13 + *(_QWORD *)(v13 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v14 = MEMORY[0x24BEDB848] + 16;
    if (v16 < 0)
      operator delete(v15);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x22E2B0750](&v17);
  }
LABEL_17:
  result = v18;
  v18 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_22845A440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v17;

  v17 = *(_QWORD *)(v15 - 56);
  *(_QWORD *)(v15 - 56) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::EncodeAsPieces(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 136))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

void sub_22845A4E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::EncodeAsIds(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 144))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

void sub_22845A540(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::NBestEncodeAsPieces(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 176))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

void sub_22845A5A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::NBestEncodeAsIds(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 184))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

void sub_22845A604(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncodeAsPieces(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 192))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

void sub_22845A664(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncodeAsIds(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 200))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

void sub_22845A6C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::SampleEncodeAndScoreAsPieces(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 208))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

void sub_22845A728(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::pair<std::vector<std::string>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncodeAndScoreAsIds(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 216))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

void sub_22845A788(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::DecodePieces(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 152))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

{
  uint64_t v2;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 160))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

void sub_22845A7E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_22845A84C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::DecodeIds(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 168))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

void sub_22845A8B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

float sentencepiece::SentencePieceProcessor::CalculateEntropy(uint64_t a1)
{
  float v1;
  uint64_t v3;
  float v4;

  v4 = 0.0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 224))(&v3);
  v1 = v4;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v3);
  return v1;
}

void sentencepiece::SentencePieceProcessor::EncodeAsSerializedProto(sentencepiece::SentencePieceText *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  void (**v13)(sentencepiece::ImmutableSentencePieceText *__hidden);
  google::protobuf::MessageLite *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v13 = &off_24F0FD650;
  v15 = 0;
  v16 = 0;
  v14 = (google::protobuf::MessageLite *)sentencepiece::SentencePieceText::default_instance(a1);
  v8 = sentencepiece::ImmutableSentencePieceText::mutable_proto((sentencepiece::ImmutableSentencePieceText *)&v13);
  (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceText *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 232))(&v12, a1, a2, a3, v8);
  google::protobuf::MessageLite::SerializeAsString(v14, a4);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v12);
  v13 = &off_24F0FD650;
  v9 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_22845A9E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)va);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v2 + 16);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncodeAsSerializedProto(sentencepiece::SentencePieceText *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, float a6@<S0>)
{
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  void (**v17)(sentencepiece::ImmutableSentencePieceText *__hidden);
  google::protobuf::MessageLite *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v17 = &off_24F0FD650;
  v19 = 0;
  v20 = 0;
  v18 = (google::protobuf::MessageLite *)sentencepiece::SentencePieceText::default_instance(a1);
  v12 = sentencepiece::ImmutableSentencePieceText::mutable_proto((sentencepiece::ImmutableSentencePieceText *)&v17);
  (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceText *, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)a1 + 248))(&v16, a1, a2, a3, a4, v12, a6);
  google::protobuf::MessageLite::SerializeAsString(v18, a5);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v16);
  v17 = &off_24F0FD650;
  v13 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_22845AB04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)va);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v2 + 16);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::NBestEncodeAsSerializedProto(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  _QWORD v15[2];
  std::__shared_weak_count *v16;

  v15[1] = 0;
  v16 = 0;
  v15[0] = &off_24F0FD670;
  v10 = sentencepiece::ImmutableNBestSentencePieceText::mutable_proto((sentencepiece::ImmutableNBestSentencePieceText *)v15);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 240))(&v14, a1, a2, a3, a4, v10);
  sentencepiece::ImmutableNBestSentencePieceText::SerializeAsString((sentencepiece::ImmutableNBestSentencePieceText *)v15, a5);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v14);
  v15[0] = &off_24F0FD670;
  v11 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_22845AC08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&a9);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v10 + 8);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncodeAndScoreAsSerializedProto(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>, float a8@<S0>)
{
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  std::__shared_weak_count *v22;

  v21[1] = 0;
  v22 = 0;
  v21[0] = &off_24F0FD670;
  v16 = sentencepiece::ImmutableNBestSentencePieceText::mutable_proto((sentencepiece::ImmutableNBestSentencePieceText *)v21);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)a1 + 256))(&v20, a1, a2, a3, a4, a5, a6, v16, a8);
  sentencepiece::ImmutableNBestSentencePieceText::SerializeAsString((sentencepiece::ImmutableNBestSentencePieceText *)v21, a7);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v20);
  v21[0] = &off_24F0FD670;
  v17 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_22845AD34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&a9);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v10 + 8);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::DecodePiecesAsSerializedProto(sentencepiece::SentencePieceText *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  void (**v11)(sentencepiece::ImmutableSentencePieceText *__hidden);
  google::protobuf::MessageLite *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v11 = &off_24F0FD650;
  v13 = 0;
  v14 = 0;
  v12 = (google::protobuf::MessageLite *)sentencepiece::SentencePieceText::default_instance(a1);
  v6 = sentencepiece::ImmutableSentencePieceText::mutable_proto((sentencepiece::ImmutableSentencePieceText *)&v11);
  (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceText *, uint64_t, uint64_t))(*(_QWORD *)a1 + 264))(&v10, a1, a2, v6);
  google::protobuf::MessageLite::SerializeAsString(v12, a3);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v10);
  v11 = &off_24F0FD650;
  v7 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  void (**v11)(sentencepiece::ImmutableSentencePieceText *__hidden);
  google::protobuf::MessageLite *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v11 = &off_24F0FD650;
  v13 = 0;
  v14 = 0;
  v12 = (google::protobuf::MessageLite *)sentencepiece::SentencePieceText::default_instance(a1);
  v6 = sentencepiece::ImmutableSentencePieceText::mutable_proto((sentencepiece::ImmutableSentencePieceText *)&v11);
  (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceText *, uint64_t, uint64_t))(*(_QWORD *)a1 + 272))(&v10, a1, a2, v6);
  google::protobuf::MessageLite::SerializeAsString(v12, a3);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v10);
  v11 = &off_24F0FD650;
  v7 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_22845AE28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)va);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v2 + 16);
  _Unwind_Resume(a1);
}

void sub_22845AF1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)va);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v2 + 16);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::DecodeIdsAsSerializedProto(sentencepiece::SentencePieceText *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  void (**v11)(sentencepiece::ImmutableSentencePieceText *__hidden);
  google::protobuf::MessageLite *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v11 = &off_24F0FD650;
  v13 = 0;
  v14 = 0;
  v12 = (google::protobuf::MessageLite *)sentencepiece::SentencePieceText::default_instance(a1);
  v6 = sentencepiece::ImmutableSentencePieceText::mutable_proto((sentencepiece::ImmutableSentencePieceText *)&v11);
  (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceText *, uint64_t, uint64_t))(*(_QWORD *)a1 + 280))(&v10, a1, a2, v6);
  google::protobuf::MessageLite::SerializeAsString(v12, a3);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v10);
  v11 = &off_24F0FD650;
  v7 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_22845B010(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)va);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v2 + 16);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::EncodeAsImmutableProto(sentencepiece::SentencePieceText *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, sentencepiece::ImmutableSentencePieceText *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a4 = &off_24F0FD650;
  *((_QWORD *)a4 + 1) = sentencepiece::SentencePieceText::default_instance(a1);
  *((_QWORD *)a4 + 2) = 0;
  *((_QWORD *)a4 + 3) = 0;
  v8 = sentencepiece::ImmutableSentencePieceText::mutable_proto(a4);
  (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceText *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 232))(&v9, a1, a2, a3, v8);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v9);
}

void sub_22845B0C8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncodeAsImmutableProto(sentencepiece::SentencePieceText *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, sentencepiece::ImmutableSentencePieceText *a5@<X8>, float a6@<S0>)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a5 = &off_24F0FD650;
  *((_QWORD *)a5 + 1) = sentencepiece::SentencePieceText::default_instance(a1);
  *((_QWORD *)a5 + 2) = 0;
  *((_QWORD *)a5 + 3) = 0;
  v12 = sentencepiece::ImmutableSentencePieceText::mutable_proto(a5);
  (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceText *, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)a1 + 248))(&v13, a1, a2, a3, a4, v12, a6);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v13);
}

void sub_22845B190(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::NBestEncodeAsImmutableProto(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, sentencepiece::ImmutableNBestSentencePieceText *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a5 = &off_24F0FD670;
  *((_QWORD *)a5 + 1) = 0;
  *((_QWORD *)a5 + 2) = 0;
  v9 = sentencepiece::ImmutableNBestSentencePieceText::mutable_proto(a5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 240))(&v10, a1, a2, a3, a4, v9);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v10);
}

void sub_22845B240(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  *v2 = v3;
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncodeAndScoreAsImmutableProto(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, sentencepiece::ImmutableNBestSentencePieceText *a7@<X8>, float a8@<S0>)
{
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)a7 = &off_24F0FD670;
  *((_QWORD *)a7 + 1) = 0;
  *((_QWORD *)a7 + 2) = 0;
  v15 = sentencepiece::ImmutableNBestSentencePieceText::mutable_proto(a7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)a1 + 256))(&v16, a1, a2, a3, a4, a5, a6, v15, a8);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v16);
}

void sub_22845B318(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::DecodePiecesAsImmutableProto(sentencepiece::SentencePieceText *a1@<X0>, uint64_t a2@<X1>, sentencepiece::ImmutableSentencePieceText *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a3 = &off_24F0FD650;
  *((_QWORD *)a3 + 1) = sentencepiece::SentencePieceText::default_instance(a1);
  *((_QWORD *)a3 + 2) = 0;
  *((_QWORD *)a3 + 3) = 0;
  v6 = sentencepiece::ImmutableSentencePieceText::mutable_proto(a3);
  (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceText *, uint64_t, uint64_t))(*(_QWORD *)a1 + 264))(&v7, a1, a2, v6);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v7);
}

{
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a3 = &off_24F0FD650;
  *((_QWORD *)a3 + 1) = sentencepiece::SentencePieceText::default_instance(a1);
  *((_QWORD *)a3 + 2) = 0;
  *((_QWORD *)a3 + 3) = 0;
  v6 = sentencepiece::ImmutableSentencePieceText::mutable_proto(a3);
  (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceText *, uint64_t, uint64_t))(*(_QWORD *)a1 + 272))(&v7, a1, a2, v6);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v7);
}

void sub_22845B3B8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void sub_22845B458(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::DecodeIdsAsImmutableProto(sentencepiece::SentencePieceText *a1@<X0>, uint64_t a2@<X1>, sentencepiece::ImmutableSentencePieceText *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a3 = &off_24F0FD650;
  *((_QWORD *)a3 + 1) = sentencepiece::SentencePieceText::default_instance(a1);
  *((_QWORD *)a3 + 2) = 0;
  *((_QWORD *)a3 + 3) = 0;
  v6 = sentencepiece::ImmutableSentencePieceText::mutable_proto(a3);
  (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceText *, uint64_t, uint64_t))(*(_QWORD *)a1 + 280))(&v7, a1, a2, v6);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v7);
}

void sub_22845B4F8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22845B5CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n, const std::vector<int>::value_type *__x)
{
  std::vector<int>::pointer end;
  int *v7;
  std::vector<int>::size_type v8;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v7 = &end[__n];
    v8 = 4 * __n;
    do
    {
      *end++ = *__x;
      v8 -= 4;
    }
    while (v8);
    this->__end_ = v7;
  }
  return this;
}

void sub_22845B650(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<int>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22845B768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<sentencepiece::SentencePieceText>::operator=[abi:ne180100](_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22E2B0750](a1 + 112);
  return a1;
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1727);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1728);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22845B940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

char **absl::internal::Splitter::Splitter(char **a1, uint64_t a2, unint64_t a3, unsigned __int8 *a4, uint64_t a5, int a6)
{
  unsigned __int8 **v9;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v14;
  _QWORD *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  _BOOL4 v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  BOOL v34;
  unint64_t v35;
  unsigned __int8 *v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;

  v9 = 0;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v10 = 0;
  if (a5)
  {
    v11 = a6;
    if (a3)
    {
      v9 = 0;
      v10 = 0;
      v14 = (unsigned __int8 *)(a2 + a3);
      v15 = a1 + 2;
      while (2)
      {
        v16 = &v10[a2];
        v17 = &v10[a2];
LABEL_5:
        v18 = a5;
        v19 = a4;
        while (*v17 != *v19)
        {
          ++v19;
          if (!--v18)
          {
            if (++v17 != v14)
              goto LABEL_5;
            goto LABEL_37;
          }
        }
        if (v17 != v14)
        {
          v20 = &v17[-a2];
          if (&v17[-a2] != (unsigned __int8 *)-1)
          {
            v21 = (unsigned __int8 *)(v20 - v10);
            v22 = v20 >= v10;
            if (!v11)
              v22 = v20 > v10;
            if (v22)
            {
              v23 = (unsigned __int8 *)(a3 - (_QWORD)v10);
              if (v23 >= v21)
                v24 = v21;
              else
                v24 = v23;
              if ((unint64_t)v9 >= *v15)
              {
                v25 = ((char *)v9 - *a1) >> 4;
                if ((unint64_t)(v25 + 1) >> 60)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v26 = *v15 - (_QWORD)*a1;
                v27 = v26 >> 3;
                if (v26 >> 3 <= (unint64_t)(v25 + 1))
                  v27 = v25 + 1;
                if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
                  v28 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v28 = v27;
                if (v28)
                  v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string_view>>((uint64_t)v15, v28);
                else
                  v29 = 0;
                v30 = &v29[16 * v25];
                *(_QWORD *)v30 = v16;
                *((_QWORD *)v30 + 1) = v24;
                v32 = *a1;
                v31 = a1[1];
                v33 = v30;
                if (v31 != *a1)
                {
                  do
                  {
                    *((_OWORD *)v33 - 1) = *((_OWORD *)v31 - 1);
                    v33 -= 16;
                    v31 -= 16;
                  }
                  while (v31 != v32);
                  v31 = *a1;
                }
                v9 = (unsigned __int8 **)(v30 + 16);
                *a1 = v33;
                a1[1] = v30 + 16;
                a1[2] = &v29[16 * v28];
                if (v31)
                  operator delete(v31);
                v11 = a6;
                v15 = a1 + 2;
              }
              else
              {
                *v9 = v16;
                v9[1] = v24;
                v9 += 2;
              }
              a1[1] = (char *)v9;
            }
            v10 = v20 + 1;
            if (a3 > (unint64_t)(v20 + 1))
              continue;
          }
        }
        break;
      }
    }
  }
LABEL_37:
  v34 = a3 > (unint64_t)v10;
  v35 = a3 - (_QWORD)v10;
  if (v34)
  {
    v36 = &v10[a2];
    v37 = (unint64_t)a1[2];
    if ((unint64_t)v9 >= v37)
    {
      v39 = ((char *)v9 - *a1) >> 4;
      if ((unint64_t)(v39 + 1) >> 60)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v40 = v37 - (_QWORD)*a1;
      v41 = v40 >> 3;
      if (v40 >> 3 <= (unint64_t)(v39 + 1))
        v41 = v39 + 1;
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
        v42 = 0xFFFFFFFFFFFFFFFLL;
      else
        v42 = v41;
      if (v42)
        v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string_view>>((uint64_t)(a1 + 2), v42);
      else
        v43 = 0;
      v44 = &v43[16 * v39];
      v45 = &v43[16 * v42];
      *(_QWORD *)v44 = v36;
      *((_QWORD *)v44 + 1) = v35;
      v38 = v44 + 16;
      v47 = *a1;
      v46 = a1[1];
      if (v46 != *a1)
      {
        do
        {
          *((_OWORD *)v44 - 1) = *((_OWORD *)v46 - 1);
          v44 -= 16;
          v46 -= 16;
        }
        while (v46 != v47);
        v46 = *a1;
      }
      *a1 = v44;
      a1[1] = v38;
      a1[2] = v45;
      if (v46)
        operator delete(v46);
    }
    else
    {
      *v9 = v36;
      v9[1] = (unsigned __int8 *)v35;
      v38 = (char *)(v9 + 2);
    }
    a1[1] = v38;
  }
  return a1;
}

void sub_22845BC04(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

std::vector<std::string> *__cdecl std::vector<std::string>::vector(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  std::vector<std::string>::pointer end;
  size_t v5;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<std::pair<std::string_view,int>>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v5 = 24 * ((24 * __n - 24) / 0x18) + 24;
    bzero(end, v5);
    this->__end_ = (std::vector<std::string>::pointer)((char *)end + v5);
  }
  return this;
}

void sub_22845BCB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

_QWORD *std::vector<std::string_view>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type,std::allocator<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_22845BDAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void absl::StrReplaceAll(void *__src@<X0>, size_t __len@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::string *p_dst;
  std::string::size_type size;
  char *v10;
  int64_t v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::string __dst;
  std::string *v18;
  std::string::size_type v19;

  std::string::basic_string[abi:ne180100](&__dst, __src, __len);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v6 = *a3;
  v7 = a3[1];
  while (v6 != v7)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      **(_BYTE **)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_dst = &__dst;
    else
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      size = __dst.__r_.__value_.__l.__size_;
    v10 = *(char **)v6;
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(const std::string::value_type **)(v6 + 16);
    v13 = *(_QWORD *)(v6 + 24);
    v18 = p_dst;
    v19 = size;
    if (v11)
    {
      v14 = std::string_view::find[abi:ne180100]((uint64_t *)&v18, v10, v11, 0);
      if (v14 == -1)
      {
        v16 = 0;
      }
      else
      {
        v15 = v14;
        v16 = 0;
        do
        {
          std::string::append((std::string *)a4, (const std::string::value_type *)v18 + v16, v15 - v16);
          std::string::append((std::string *)a4, v12, v13);
          v16 = v15 + v11;
          v15 = std::string_view::find[abi:ne180100]((uint64_t *)&v18, v10, v11, v15 + v11);
        }
        while (v15 != -1);
      }
      p_dst = (std::string *)((char *)v18 + v16);
      size = v19 - v16;
    }
    std::string::append((std::string *)a4, (const std::string::value_type *)p_dst, size);
    std::string::operator=(&__dst, (const std::string *)a4);
    v6 += 32;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_22845BF2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::string_view::find[abi:ne180100](uint64_t *a1, char *a2, int64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  void *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int v13;
  uint64_t v14;
  char *v15;

  v4 = a1[1];
  if (v4 < a4)
    return -1;
  if (a3)
  {
    v6 = *a1;
    v7 = (void *)(*a1 + a4);
    v8 = (char *)(v6 + v4);
    v9 = v6 + v4 - (_QWORD)v7;
    if (v9 >= a3)
    {
      v13 = *a2;
      do
      {
        v14 = v9 - a3;
        if (v14 == -1)
          break;
        v15 = (char *)memchr(v7, v13, v14 + 1);
        if (!v15)
          break;
        v10 = v15;
        if (!memcmp(v15, a2, a3))
          goto LABEL_6;
        v7 = v10 + 1;
        v9 = v8 - (v10 + 1);
      }
      while (v9 >= a3);
    }
    v10 = v8;
LABEL_6:
    if (v10 == v8)
      return -1;
    else
      return (uint64_t)&v10[-v6];
  }
  return a4;
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24F0F3380, MEMORY[0x24BEDAB00]);
}

void sub_22845C050(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

void std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::vector<int>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void std::vector<std::pair<std::vector<std::string>,float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 4;
        v6 = v4;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1727);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1728);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22845C310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<sentencepiece::ImmutableSentencePieceText_ImmutableSentencePiece>::vector(_QWORD *a1, unint64_t a2)
{
  sentencepiece::SentencePieceText_SentencePiece *v4;
  sentencepiece::SentencePieceText_SentencePiece **v5;
  sentencepiece::SentencePieceText_SentencePiece **v6;
  uint64_t v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    v4 = (sentencepiece::SentencePieceText_SentencePiece *)std::vector<sentencepiece::ImmutableSentencePieceText_ImmutableSentencePiece>::__vallocate[abi:ne180100](a1, a2);
    v5 = (sentencepiece::SentencePieceText_SentencePiece **)a1[1];
    v6 = &v5[a2];
    v7 = 8 * a2;
    do
    {
      v4 = (sentencepiece::SentencePieceText_SentencePiece *)sentencepiece::SentencePieceText_SentencePiece::default_instance(v4);
      *v5++ = v4;
      v7 -= 8;
    }
    while (v7);
    a1[1] = v6;
  }
  return a1;
}

void sub_22845C390(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<sentencepiece::ImmutableSentencePieceText_ImmutableSentencePiece>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN13sentencepiece17SentencePieceTextENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x70uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN13sentencepiece17SentencePieceTextENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_22845C42C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN13sentencepiece17SentencePieceTextENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(_QWORD *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24F0FD9A8;
  sentencepiece::SentencePieceText::SentencePieceText((sentencepiece::SentencePieceText *)(a1 + 3), 0);
  return a1;
}

void sub_22845C478(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<sentencepiece::SentencePieceText>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24F0FD9A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<sentencepiece::SentencePieceText>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24F0FD9A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E2B07A4);
}

void std::__shared_ptr_emplace<sentencepiece::SentencePieceText>::__on_zero_shared(uint64_t a1)
{
  sentencepiece::SentencePieceText::~SentencePieceText((sentencepiece::SentencePieceText *)(a1 + 24));
}

sentencepiece::SentencePieceText *std::vector<sentencepiece::ImmutableSentencePieceText>::vector(sentencepiece::SentencePieceText *a1, unint64_t a2)
{
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  if (a2)
  {
    std::vector<sentencepiece::ImmutableSentencePieceText>::__vallocate[abi:ne180100](a1, a2);
    std::vector<sentencepiece::ImmutableSentencePieceText>::__construct_at_end(a1, a2);
  }
  return a1;
}

void sub_22845C52C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<sentencepiece::ImmutableSentencePieceText>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<sentencepiece::ImmutableSentencePieceText>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<sentencepiece::ImmutableSentencePieceText>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

sentencepiece::SentencePieceText *std::vector<sentencepiece::ImmutableSentencePieceText>::__construct_at_end(sentencepiece::SentencePieceText *result, uint64_t a2)
{
  sentencepiece::SentencePieceText *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = result;
  v3 = (_QWORD *)*((_QWORD *)result + 1);
  if (a2)
  {
    v4 = 32 * a2;
    v5 = &v3[4 * a2];
    do
    {
      *v3 = &off_24F0FD650;
      result = (sentencepiece::SentencePieceText *)sentencepiece::SentencePieceText::default_instance(result);
      v3[2] = 0;
      v3[3] = 0;
      v3[1] = result;
      v3 += 4;
      v4 -= 32;
    }
    while (v4);
    v3 = v5;
  }
  *((_QWORD *)v2 + 1) = v3;
  return result;
}

void sub_22845C5E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<sentencepiece::ImmutableSentencePieceText>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a2);
}

void std::vector<sentencepiece::ImmutableSentencePieceText>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 32;
      v7 = v4 - 32;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 32;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN13sentencepiece22NBestSentencePieceTextENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x48uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN13sentencepiece22NBestSentencePieceTextENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_22845C6E4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN13sentencepiece22NBestSentencePieceTextENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(_QWORD *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24F0FD9F8;
  sentencepiece::NBestSentencePieceText::NBestSentencePieceText((sentencepiece::NBestSentencePieceText *)(a1 + 3), 0);
  return a1;
}

void sub_22845C730(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<sentencepiece::NBestSentencePieceText>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24F0FD9F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<sentencepiece::NBestSentencePieceText>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24F0FD9F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E2B07A4);
}

void std::__shared_ptr_emplace<sentencepiece::NBestSentencePieceText>::__on_zero_shared(uint64_t a1)
{
  sentencepiece::NBestSentencePieceText::~NBestSentencePieceText((sentencepiece::NBestSentencePieceText *)(a1 + 24));
}

sentencepiece::ModelProto *std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](sentencepiece::ModelProto **a1, sentencepiece::ModelProto *a2)
{
  sentencepiece::ModelProto *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sentencepiece::ModelProto::~ModelProto(result);
    JUMPOUT(0x22E2B07A4);
  }
  return result;
}

void absl::StrCat<std::string,char [2],std::string>(void *__src@<X0>, size_t __len@<X1>, void **a3@<X2>, char *a4@<X3>, void **a5@<X4>, std::string *a6@<X8>)
{
  int v10;
  void *v11;
  size_t v12;
  std::string *p_p;
  std::string::size_type size;
  std::string *v15;
  std::string __p;
  std::string __dst;

  std::string::basic_string[abi:ne180100](&__dst, __src, __len);
  v10 = *((char *)a3 + 23);
  if (v10 >= 0)
    v11 = a3;
  else
    v11 = *a3;
  if (v10 >= 0)
    v12 = *((unsigned __int8 *)a3 + 23);
  else
    v12 = (size_t)a3[1];
  absl::StrCat<char [2],std::string>(v11, v12, a4, a5, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v15 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
  *a6 = *v15;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_22845C898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void absl::StrCat<char [2],std::string>(void *__src@<X0>, size_t __len@<X1>, char *a3@<X2>, void **a4@<X3>, std::string *a5@<X8>)
{
  size_t v8;
  std::string *p_p;
  std::string::size_type size;
  std::string *v11;
  std::string __p;
  std::string __dst;

  std::string::basic_string[abi:ne180100](&__dst, __src, __len);
  v8 = strlen(a3);
  absl::StrCat<std::string>(a3, v8, a4, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v11 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
  *a5 = *v11;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_22845C988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void absl::StrCat<std::string>(void *__src@<X0>, size_t __len@<X1>, void **a3@<X2>, std::string *a4@<X8>)
{
  int v6;
  void *v7;
  size_t v8;
  void **v9;
  std::string::size_type v10;
  std::string *v11;
  void *__p[2];
  unsigned __int8 v13;
  std::string __dst;

  std::string::basic_string[abi:ne180100](&__dst, __src, __len);
  v6 = *((char *)a3 + 23);
  if (v6 >= 0)
    v7 = a3;
  else
    v7 = *a3;
  if (v6 >= 0)
    v8 = *((unsigned __int8 *)a3 + 23);
  else
    v8 = (size_t)a3[1];
  std::string::basic_string[abi:ne180100](__p, v7, v8);
  if ((v13 & 0x80u) == 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if ((v13 & 0x80u) == 0)
    v10 = v13;
  else
    v10 = (std::string::size_type)__p[1];
  v11 = std::string::append(&__dst, (const std::string::value_type *)v9, v10);
  *a4 = *v11;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if ((char)v13 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_22845CA70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::string *v4;
  std::string *begin;
  std::string *end;
  std::string *value;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100]((uint64_t)this, (void **)&this->__begin_->__r_.__value_.__l.__data_);
  if (this->__first_)
    operator delete(this->__first_);
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t std::set<std::string_view>::set[abi:ne180100]<std::__wrap_iter<std::string_view const*>>(uint64_t a1, _OWORD *a2, _OWORD *a3)
{
  _QWORD *v4;
  _OWORD *v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tree<std::string_view>::__emplace_hint_unique_key_args<std::string_view,std::string_view const&>((uint64_t **)a1, v4, (uint64_t)v6, v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_22845CD1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::string_view>::__emplace_hint_unique_key_args<std::string_view,std::string_view const&>(uint64_t **a1, _QWORD *a2, uint64_t a3, _OWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v6 = std::__tree<std::string_view>::__find_equal<std::string_view>(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::string_view>::__find_equal<std::string_view>(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v9;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v18;

  v9 = a1 + 1;
  if (a1 + 1 == a2
    || std::less<std::string_view>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, (uint64_t)(a2 + 4)))
  {
    if ((_QWORD *)*a1 == a2)
    {
      v12 = a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    v11 = (_QWORD *)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (_QWORD *)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (_QWORD *)v16[2];
        v17 = *v12 == (_QWORD)v16;
        v16 = v12;
      }
      while (v17);
    }
    if (std::less<std::string_view>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (uint64_t)(v12 + 4), a5))
      goto LABEL_16;
    return std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__find_equal<std::string_view>((uint64_t)a1, a3, a5);
  }
  if (std::less<std::string_view>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (uint64_t)(a2 + 4), a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (_QWORD *)a2[1];
      do
      {
        v15 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = a2;
      do
      {
        v15 = (_QWORD *)v18[2];
        v17 = *v15 == (_QWORD)v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!std::less<std::string_view>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, (uint64_t)(v15 + 4)))return std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__find_equal<std::string_view>((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  *a3 = a2;
  *a4 = (uint64_t)a2;
  return a4;
}

_QWORD *std::__tree<std::string_view>::find<std::string_view>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  _QWORD *v8;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = (_QWORD *)(a1 + 8);
  do
  {
    v7 = std::less<std::string_view>::operator()[abi:ne180100](v5, (uint64_t)(v3 + 4), a2);
    v8 = v3 + 1;
    if (!v7)
    {
      v8 = v3;
      v6 = v3;
    }
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::string_view>::operator()[abi:ne180100](v5, a2, (uint64_t)(v6 + 4)))
    return v2;
  return v6;
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x24BEDB858];
  v3 = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_22845D0E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x22E2B0750](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x24BEDB7F0];
  v3 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x22E2B0750](a1 + 128);
  return a1;
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  *(_QWORD *)(a1 + 8) = v3 + 24;
}

void sub_22845D1E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<std::string const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::__split_buffer<std::string>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string_view,int>>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_22845D2F8(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

std::string *std::vector<std::vector<std::string>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string>&>(uint64_t a1, __int128 **a2)
{
  std::string *v3;
  std::string *result;

  v3 = *(std::string **)(a1 + 8);
  v3->__r_.__value_.__r.__words[0] = 0;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  result = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v3, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *(_QWORD *)(a1 + 8) = v3 + 1;
  return result;
}

void sub_22845D3EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::string>>::__emplace_back_slow_path<std::vector<std::string>&>(uint64_t *a1, __int128 **a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  std::string *v11;
  uint64_t v12;
  void *v14[2];
  std::string *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string_view,int>>>(v7, v9);
  else
    v10 = 0;
  v11 = (std::string *)&v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  v11->__r_.__value_.__r.__words[0] = 0;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v11, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  ++v15;
  std::vector<std::vector<std::string>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<std::string>>::~__split_buffer(v14);
  return v12;
}

void sub_22845D500(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::string>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::pair<std::string_view,int>>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_22845D578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_22845D640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 24;
  }
}

uint64_t std::vector<std::vector<std::string>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>,std::reverse_iterator<std::vector<std::string>*>,std::reverse_iterator<std::vector<std::string>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>,std::reverse_iterator<std::vector<std::string>*>,std::reverse_iterator<std::vector<std::string>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::string>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<std::string>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<std::string>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

_QWORD *std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int>&>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_22845D924(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<int>>::__emplace_back_slow_path<std::vector<int>&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string_view,int>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v15 += 24;
  std::vector<std::vector<int>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_22845DA2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_22845DA9C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::vector<int>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<std::vector<int>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::vector<int>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::vector<int>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

uint64_t std::vector<std::pair<std::vector<std::string>,float>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<std::string>,float>>,std::reverse_iterator<std::pair<std::vector<std::string>,float>*>,std::reverse_iterator<std::pair<std::vector<std::string>,float>*>,std::reverse_iterator<std::pair<std::vector<std::string>,float>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<std::string>,float>>,std::reverse_iterator<std::pair<std::vector<std::string>,float>*>,std::reverse_iterator<std::pair<std::vector<std::string>,float>*>,std::reverse_iterator<std::pair<std::vector<std::string>,float>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::string>,float>>,std::reverse_iterator<std::pair<std::vector<std::string>,float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::string>,float>>,std::reverse_iterator<std::pair<std::vector<std::string>,float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::string>,float>>,std::reverse_iterator<std::pair<std::vector<std::string>,float>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::string>,float>>,std::reverse_iterator<std::pair<std::vector<std::string>,float>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 4;
  }
}

void **std::__split_buffer<std::pair<std::vector<std::string>,float>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::pair<std::vector<std::string>,float>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::pair<std::vector<std::string>,float>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 32);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

float std::vector<std::pair<std::vector<std::string>,float>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string>&,float>(uint64_t a1, __int128 **a2, float *a3)
{
  uint64_t v5;
  float result;

  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v5, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  result = *a3;
  *(float *)(v5 + 24) = *a3;
  *(_QWORD *)(a1 + 8) = v5 + 32;
  return result;
}

void sub_22845DF50(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::vector<std::string>,float>>::__emplace_back_slow_path<std::vector<std::string>&,float>(uint64_t *a1, __int128 **a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  std::string *v13;
  uint64_t v14;
  void *v16[2];
  std::string *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<sentencepiece::ImmutableSentencePieceText>>(v9, v11);
  else
    v12 = 0;
  v13 = (std::string *)&v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  v17 = v13;
  v18 = &v12[32 * v11];
  v13->__r_.__value_.__r.__words[0] = 0;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  LODWORD(v13[1].__r_.__value_.__l.__data_) = *a3;
  v17 = (std::string *)((char *)v17 + 32);
  std::vector<std::pair<std::vector<std::string>,float>>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<std::pair<std::vector<std::string>,float>>::~__split_buffer(v16);
  return v14;
}

void sub_22845E050(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::vector<std::string>,float>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::vector<int>,float>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<int>,float>>,std::reverse_iterator<std::pair<std::vector<int>,float>*>,std::reverse_iterator<std::pair<std::vector<int>,float>*>,std::reverse_iterator<std::pair<std::vector<int>,float>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<int>,float>>,std::reverse_iterator<std::pair<std::vector<int>,float>*>,std::reverse_iterator<std::pair<std::vector<int>,float>*>,std::reverse_iterator<std::pair<std::vector<int>,float>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,float>>,std::reverse_iterator<std::pair<std::vector<int>,float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,float>>,std::reverse_iterator<std::pair<std::vector<int>,float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,float>>,std::reverse_iterator<std::pair<std::vector<int>,float>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,float>>,std::reverse_iterator<std::pair<std::vector<int>,float>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 32;
  }
}

uint64_t std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::pair<std::vector<int>,float>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::pair<std::vector<int>,float>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 32);
    *(_QWORD *)(a1 + 16) = v2 - 32;
    if (v5)
    {
      *(_QWORD *)(v2 - 24) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
}

float std::vector<std::pair<std::vector<int>,float>>::__construct_one_at_end[abi:ne180100]<std::vector<int>&,float>(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v5;
  float result;

  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)v5, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  result = *a3;
  *(float *)(v5 + 24) = *a3;
  *(_QWORD *)(a1 + 8) = v5 + 32;
  return result;
}

void sub_22845E2E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::vector<int>,float>>::__emplace_back_slow_path<std::vector<int>&,float>(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];
  char *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<sentencepiece::ImmutableSentencePieceText>>(v9, v11);
  else
    v12 = 0;
  v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  v17 = v13;
  v18 = &v12[32 * v11];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v13, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  *((_DWORD *)v13 + 6) = *a3;
  v17 += 32;
  std::vector<std::pair<std::vector<int>,float>>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_22845E3D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<float>::vector(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<int>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_22845E44C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::discrete_distribution<int>::param_type::param_type[abi:ne180100]<std::__wrap_iter<float *>>(uint64_t a1, float *a2, float *a3)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>((char *)a1, a2, a3, a3 - a2);
  std::discrete_distribution<int>::param_type::__init((double **)a1);
  return a1;
}

void sub_22845E4A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::discrete_distribution<int>::param_type::__init(double **a1)
{
  double *v1;
  double *v2;
  uint64_t v4;
  double v5;
  double *v6;
  double v7;
  double *v8;
  uint64_t v9;
  double *v10;
  double *v11;
  double v12;
  double *v13;
  double v14;
  double *v15;
  double *v16;
  __int128 v17;

  v1 = *a1;
  v2 = a1[1];
  if (*a1 != v2)
  {
    if ((unint64_t)((char *)v2 - (char *)v1) < 9)
    {
      a1[1] = v1;
      std::vector<double>::shrink_to_fit((uint64_t)a1);
    }
    else
    {
      v4 = v2 - v1;
      v5 = 0.0;
      v6 = *a1;
      do
      {
        v7 = *v6++;
        v5 = v5 + v7;
      }
      while (v6 != v2);
      while (v1 < v2)
      {
        *v1 = *v1 / v5;
        ++v1;
      }
      std::vector<double>::vector(&v16, v4 - 1);
      v8 = *a1;
      v9 = (uint64_t)(a1[1] - 1);
      v10 = v16;
      if (*a1 != (double *)v9)
      {
        v11 = v8 + 1;
        v12 = *v8;
        *v16 = *v8;
        if (v8 + 1 != (double *)v9)
        {
          v13 = v10 + 1;
          do
          {
            v14 = *v11++;
            v12 = v12 + v14;
            *v13++ = v12;
          }
          while (v11 != (double *)v9);
        }
      }
      *a1 = v10;
      v15 = a1[2];
      *(_OWORD *)(a1 + 1) = v17;
      v16 = v8;
      *((_QWORD *)&v17 + 1) = v15;
      if (v8)
      {
        *(_QWORD *)&v17 = v8;
        operator delete(v8);
      }
    }
  }
}

char *std::vector<double>::__init_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(char *result, float *a2, float *a3, unint64_t a4)
{
  char *v6;
  double *v7;
  float v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<sentencepiece::ImmutableSentencePieceText_ImmutableSentencePiece>::__vallocate[abi:ne180100](result, a4);
    v7 = (double *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_22845E610(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<double>::shrink_to_fit(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _BYTE *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = a1 + 16;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(char **)a1;
  v5 = *(_BYTE **)(a1 + 8);
  v6 = (v5 - v4) >> 3;
  if (v6 < (v3 - (uint64_t)v4) >> 3)
  {
    if (v5 == v4)
    {
      v11 = 0;
      v9 = 8 * v6;
    }
    else
    {
      v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2, v6);
      v4 = *(char **)a1;
      v8 = *(char **)(a1 + 8);
      v9 = (uint64_t)&v7[8 * v6];
      v11 = &v7[8 * v10];
      if (v8 != *(char **)a1)
      {
        v12 = v9;
        do
        {
          v13 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *(_QWORD *)(v12 - 8) = v13;
          v12 -= 8;
        }
        while (v8 != v4);
        goto LABEL_9;
      }
    }
    v12 = v9;
LABEL_9:
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v11;
    if (v4)
      operator delete(v4);
  }
}

_QWORD *std::vector<double>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<sentencepiece::ImmutableSentencePieceText_ImmutableSentencePiece>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_22845E738(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t std::discrete_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>(int a1, std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this, double **a3)
{
  double *v5;
  double *v6;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v7;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v8;
  unint64_t v9;
  unint64_t v10;
  double *v11;
  double *v12;
  double v13;

  v5 = *a3;
  v6 = a3[1];
  v7 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(this);
  v8 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(this);
  if (v6 != v5)
  {
    v9 = v6 - v5;
    do
    {
      v10 = v9 >> 1;
      v11 = &v5[v9 >> 1];
      v13 = *v11;
      v12 = v11 + 1;
      v9 += ~(v9 >> 1);
      if (((double)v7 + (double)v8 * 4294967300.0) * 5.42101086e-20 + 0.0 < v13)
        v9 = v10;
      else
        v5 = v12;
    }
    while (v9);
    v6 = v5;
  }
  return (unint64_t)((char *)v6 - (char *)*a3) >> 3;
}

std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this)
{
  size_t i;
  size_t v2;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3;

  i = this->__i_;
  v2 = (i + 1) % 0x270;
  v3 = this->__x_[(i + 397) % 0x270] ^ ((this->__x_[v2] & 0x7FFFFFFE | this->__x_[i] & 0x80000000) >> 1) ^ ((int)(this->__x_[v2] << 31) >> 31) & 0x9908B0DF;
  this->__x_[i] = v3;
  this->__i_ = v2;
  LODWORD(i) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return ((_DWORD)i << 15) & 0xEFC60000 ^ i ^ ((((_DWORD)i << 15) & 0xEFC60000 ^ i) >> 18);
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<std::string_view>(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  std::string *v7;
  uint64_t v8;
  std::__split_buffer<std::string> __v;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) > v4)
    v4 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
  if (v6)
    v7 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string_view,int>>>(a1 + 16, v6);
  else
    v7 = 0;
  __v.__first_ = v7;
  __v.__begin_ = v7 + v3;
  __v.__end_cap_.__value_ = &v7[v6];
  std::allocator<std::string>::construct[abi:ne180100]<std::string,std::string_view>(a1 + 16, __v.__begin_, a2);
  __v.__end_ = __v.__begin_ + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v8 = *(_QWORD *)(a1 + 8);
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v8;
}

void sub_22845E9A0(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void std::allocator<std::string>::construct[abi:ne180100]<std::string,std::string_view>(int a1, _BYTE *__dst, uint64_t a3)
{
  _QWORD *v3;
  size_t v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = __dst;
  v4 = *(_QWORD *)(a3 + 8);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = *(const void **)a3;
  if (v4 >= 0x17)
  {
    v6 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v6 = v4 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v3[1] = v4;
    v3[2] = v7 | 0x8000000000000000;
    *v3 = v8;
    v3 = v8;
  }
  else
  {
    __dst[23] = v4;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v3, v5, v4);
LABEL_9:
  *((_BYTE *)v3 + v4) = 0;
}

uint64_t *sentencepiece::swap(uint64_t *this, sentencepiece::SentencePieceText_SentencePiece *a2, sentencepiece::SentencePieceText_SentencePiece *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  if (a2 != (sentencepiece::SentencePieceText_SentencePiece *)this)
  {
    v3 = this[1];
    v4 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFFFFELL);
    if ((v3 & 1) != 0)
      v4 = (_QWORD *)*v4;
    v5 = *((_QWORD *)a2 + 1);
    v6 = (_QWORD *)(v5 & 0xFFFFFFFFFFFFFFFELL);
    if ((v5 & 1) != 0)
      v6 = (_QWORD *)*v6;
    if (v4 == v6)
      return sentencepiece::SentencePieceText_SentencePiece::InternalSwap((sentencepiece::SentencePieceText_SentencePiece *)this, a2);
    else
      return (uint64_t *)google::protobuf::internal::GenericSwap((google::protobuf::internal *)this, a2, a3);
  }
  return this;
}

uint64_t std::map<std::string_view,sentencepiece::SentencePieceProcessor::ExtraOption>::map[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 24 * a3;
    do
    {
      std::__tree<std::__value_type<std::string_view,sentencepiece::SentencePieceProcessor::ExtraOption>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,sentencepiece::SentencePieceProcessor::ExtraOption>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,sentencepiece::SentencePieceProcessor::ExtraOption>>>::__emplace_hint_unique_key_args<std::string_view,std::pair<std::string_view const,sentencepiece::SentencePieceProcessor::ExtraOption> const&>((uint64_t **)a1, v4, a2, a2);
      a2 += 24;
      v6 -= 24;
    }
    while (v6);
  }
  return a1;
}

void sub_22845EAF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::string_view,sentencepiece::SentencePieceProcessor::ExtraOption>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,sentencepiece::SentencePieceProcessor::ExtraOption>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,sentencepiece::SentencePieceProcessor::ExtraOption>>>::__emplace_hint_unique_key_args<std::string_view,std::pair<std::string_view const,sentencepiece::SentencePieceProcessor::ExtraOption> const&>(uint64_t **a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v6 = std::__tree<std::string_view>::__find_equal<std::string_view>(a1, a2, &v11, &v10, a3);
  v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x38uLL);
    v7[2] = *(_OWORD *)a4;
    *((_QWORD *)v7 + 6) = *(_QWORD *)(a4 + 16);
    std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__insert_node_at(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

_QWORD *sentencepiece::Mmap<char>::~Mmap(_QWORD *a1)
{
  *a1 = &off_24F0FDA48;
  sentencepiece::Mmap<char>::close((uint64_t)a1);
  return a1;
}

void sentencepiece::Mmap<char>::~Mmap(_QWORD *a1)
{
  *a1 = &off_24F0FDA48;
  sentencepiece::Mmap<char>::close((uint64_t)a1);
  JUMPOUT(0x22E2B07A4);
}

void *sentencepiece::Mmap<char>::close(uint64_t a1)
{
  int v2;
  void *result;

  v2 = *(_DWORD *)(a1 + 24);
  if ((v2 & 0x80000000) == 0)
  {
    close(v2);
    *(_DWORD *)(a1 + 24) = -1;
  }
  result = *(void **)(a1 + 8);
  if (result)
    result = (void *)munmap(result, *(_QWORD *)(a1 + 16));
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

double std::__fs::filesystem::path::parent_path[abi:ne180100]@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v5;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  double result;
  __int128 __dst;
  unint64_t v9;

  v3 = std::__fs::filesystem::path::__parent_path(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v3.__size_ >= 0x17)
  {
    v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17)
      v5 = v3.__size_ | 7;
    v6 = v5 + 1;
    p_dst = (__int128 *)operator new(v5 + 1);
    *((_QWORD *)&__dst + 1) = v3.__size_;
    v9 = v6 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_)
      goto LABEL_9;
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((_BYTE *)p_dst + v3.__size_) = 0;
  result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(_QWORD *)(a2 + 16) = v9;
  return result;
}

double std::__fs::filesystem::path::filename[abi:ne180100]@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v5;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  double result;
  __int128 __dst;
  unint64_t v9;

  v3 = std::__fs::filesystem::path::__filename(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v3.__size_ >= 0x17)
  {
    v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17)
      v5 = v3.__size_ | 7;
    v6 = v5 + 1;
    p_dst = (__int128 *)operator new(v5 + 1);
    *((_QWORD *)&__dst + 1) = v3.__size_;
    v9 = v6 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_)
      goto LABEL_9;
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((_BYTE *)p_dst + v3.__size_) = 0;
  result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(_QWORD *)(a2 + 16) = v9;
  return result;
}

_QWORD *std::__quoted_output[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, _BYTE *a2, _BYTE *a3, unsigned __int8 __c, unsigned __int8 a5)
{
  int v10;
  std::string *v11;
  std::string::size_type size;
  _QWORD *v13;
  std::string v15;

  memset(&v15, 0, sizeof(v15));
  std::string::push_back(&v15, __c);
  while (a2 != a3)
  {
    v10 = *a2;
    if (v10 == a5 || v10 == __c)
    {
      std::string::push_back(&v15, a5);
      LOBYTE(v10) = *a2;
    }
    std::string::push_back(&v15, v10);
    ++a2;
  }
  std::string::push_back(&v15, __c);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v15;
  else
    v11 = (std::string *)v15.__r_.__value_.__r.__words[0];
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  else
    size = v15.__r_.__value_.__l.__size_;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v11, size);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v13;
}

void sub_22845EEB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(std::string *this, char **a2)
{
  char *v3;
  char *v4;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = *a2;
  v4 = v3 - 1;
  while (*++v4)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, v3, v4);
  return this;
}

void sub_22845EF18(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::string::append[abi:ne180100]<char const*,0>(std::string *this, char *a2, char *a3)
{
  char *v4;
  unint64_t v6;
  unint64_t v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  unint64_t v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  _BYTE *i;
  char v16;
  std::string::size_type v17;
  void *__p[2];
  unsigned __int8 v20;

  v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v11 = this->__r_.__value_.__r.__words[2];
    v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 22;
    v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    }
    v14 = this;
    if ((v6 & 0x80) != 0)
      v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    for (i = (char *)v14 + size; v4 != a3; ++i)
    {
      v16 = *v4++;
      *i = v16;
    }
    *i = 0;
    v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this->__r_.__value_.__l.__size_ = v17;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
  }
  else
  {
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if ((v20 & 0x80u) == 0)
      v13 = v20;
    else
      v13 = (std::string::size_type)__p[1];
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0)
      operator delete(__p[0]);
  }
  return this;
}

void sub_22845F08C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::__init_with_size[abi:ne180100]<char const*,char const*>(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *v4 = result;
    v4 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v4 = v10;
    v4 = (_QWORD *)((char *)v4 + 1);
  }
  *(_BYTE *)v4 = 0;
  return result;
}

void sentencepiece::SentencePieceProcessor::ResetVocabulary()
{
  __assert_rtn("_internal_set_type", "sentencepiece_model.pb.h", 4686, "::sentencepiece::ModelProto_SentencePiece_Type_IsValid(value)");
}

double sentencepiece::unigram::Lattice::Lattice(sentencepiece::unigram::Lattice *this)
{
  double result;

  *(_QWORD *)this = &off_24F0FDA78;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = &off_24F0FDBB0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 1024;
  return result;
}

void sentencepiece::unigram::Lattice::~Lattice(sentencepiece::unigram::Lattice *this)
{
  void *v2;
  void **v3;

  *(_QWORD *)this = &off_24F0FDA78;
  sentencepiece::model::FreeList<sentencepiece::unigram::Lattice::Node>::~FreeList((_QWORD *)this + 12);
  v3 = (void **)((char *)this + 72);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 48);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  sentencepiece::unigram::Lattice::~Lattice(this);
  JUMPOUT(0x22E2B07A4);
}

uint64_t sentencepiece::unigram::Lattice::begin_nodes(sentencepiece::unigram::Lattice *this, int a2)
{
  return *((_QWORD *)this + 6) + 24 * a2;
}

uint64_t sentencepiece::unigram::Lattice::end_nodes(sentencepiece::unigram::Lattice *this, int a2)
{
  return *((_QWORD *)this + 9) + 24 * a2;
}

uint64_t sentencepiece::unigram::Lattice::size(sentencepiece::unigram::Lattice *this)
{
  int v1;

  v1 = ((*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3) - 1;
  return v1 & ~(v1 >> 31);
}

uint64_t sentencepiece::unigram::Lattice::utf8_size(sentencepiece::unigram::Lattice *this)
{
  return *((unsigned int *)this + 4);
}

sentencepiece *sentencepiece::unigram::Lattice::sentence(sentencepiece::unigram::Lattice *this)
{
  return (sentencepiece *)*((_QWORD *)this + 1);
}

uint64_t sentencepiece::unigram::Lattice::surface(sentencepiece::unigram::Lattice *this, int a2)
{
  return *(_QWORD *)(*((_QWORD *)this + 3) + 8 * a2);
}

uint64_t sentencepiece::unigram::Lattice::bos_node(sentencepiece::unigram::Lattice *this)
{
  return ***((_QWORD ***)this + 9);
}

uint64_t sentencepiece::unigram::Lattice::eos_node(sentencepiece::unigram::Lattice *this)
{
  int v1;

  v1 = ((*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3) - 1;
  return **(_QWORD **)(*((_QWORD *)this + 6) + 24 * (v1 & ~(v1 >> 31)));
}

uint64_t sentencepiece::unigram::Lattice::NewNode(sentencepiece::unigram::Lattice *this)
{
  uint64_t result;

  result = sentencepiece::model::FreeList<sentencepiece::unigram::Lattice::Node>::Allocate((_QWORD *)this + 12);
  *(_DWORD *)(result + 24) = *((_DWORD *)this + 32) + *((_DWORD *)this + 34) * *((_DWORD *)this + 36) - 1;
  return result;
}

uint64_t sentencepiece::model::FreeList<sentencepiece::unigram::Lattice::Node>::Allocate(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t result;

  v2 = a1[5];
  v3 = a1[6];
  v4 = a1[4];
  if (v4 >= v3)
  {
    v4 = 0;
    ++v2;
    a1[4] = 0;
    a1[5] = v2;
  }
  v5 = a1[1];
  v6 = (char **)(a1 + 1);
  if (v2 == (a1[2] - v5) >> 3)
  {
    v7 = 48 * v3;
    is_mul_ok(v3, 0x30uLL);
    v8 = (_QWORD *)operator new[]();
    v9 = v8;
    if (v3)
    {
      v10 = v8;
      do
      {
        *v10 = 0;
        v10[1] = 0;
        v10 += 6;
        v7 -= 48;
      }
      while (v7);
    }
    bzero(v8, 48 * a1[6]);
    v11 = a1[3];
    v12 = (_QWORD *)a1[2];
    if ((unint64_t)v12 >= v11)
    {
      v14 = ((char *)v12 - *v6) >> 3;
      if ((unint64_t)(v14 + 1) >> 61)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v15 = v11 - (_QWORD)*v6;
      v16 = v15 >> 2;
      if (v15 >> 2 <= (unint64_t)(v14 + 1))
        v16 = v14 + 1;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      if (v17)
        v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v17);
      else
        v18 = 0;
      v19 = &v18[8 * v14];
      v20 = &v18[8 * v17];
      *(_QWORD *)v19 = v9;
      v13 = v19 + 8;
      v22 = (char *)a1[1];
      v21 = (char *)a1[2];
      if (v21 != v22)
      {
        do
        {
          v23 = *((_QWORD *)v21 - 1);
          v21 -= 8;
          *((_QWORD *)v19 - 1) = v23;
          v19 -= 8;
        }
        while (v21 != v22);
        v21 = *v6;
      }
      a1[1] = v19;
      a1[2] = v13;
      a1[3] = v20;
      if (v21)
        operator delete(v21);
    }
    else
    {
      *v12 = v9;
      v13 = v12 + 1;
    }
    a1[2] = v13;
    v5 = a1[1];
    v4 = a1[4];
    v2 = a1[5];
  }
  result = *(_QWORD *)(v5 + 8 * v2) + 48 * v4;
  a1[4] = v4 + 1;
  return result;
}

void sentencepiece::unigram::Lattice::Clear(sentencepiece::unigram::Lattice *this)
{
  std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)this + 6);
  std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)this + 9);
  *((_QWORD *)this + 1) = "";
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 4) = *((_QWORD *)this + 3);
  sentencepiece::model::FreeList<sentencepiece::unigram::Lattice::Node>::Free((uint64_t)this + 96);
}

void sentencepiece::model::FreeList<sentencepiece::unigram::Lattice::Node>::Free(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_DWORD *)(a1 + 40);
  if (v2 + 1 < (int)((*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3))
    v3 = v2 + 1;
  else
    v3 = (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3;
  if (v3 >= 1)
  {
    v4 = 0;
    v5 = 8 * v3;
    do
    {
      bzero(*(void **)(*(_QWORD *)(a1 + 8) + v4), 48 * *(_QWORD *)(a1 + 48));
      v4 += 8;
    }
    while (v5 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
}

void sentencepiece::unigram::Lattice::SetSentence(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  char **v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  _DWORD *v34;
  void **v35;
  _QWORD *v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  _DWORD *v49;
  _DWORD *v50;
  void **v51;
  void **v52;
  _QWORD *v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;

  sentencepiece::unigram::Lattice::Clear((sentencepiece::unigram::Lattice *)a1);
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  v6 = (char **)(a1 + 24);
  std::vector<char const*>::reserve((void **)(a1 + 24), a3 + 1);
  if (a3)
  {
    v7 = (_QWORD *)(a1 + 40);
    v8 = *(_QWORD **)(a1 + 32);
    do
    {
      if ((int)a3 >= asc_2284E2628[(unint64_t)*a2 >> 4])
        v9 = asc_2284E2628[(unint64_t)*a2 >> 4];
      else
        v9 = a3;
      if ((unint64_t)v8 >= *v7)
      {
        v10 = ((char *)v8 - *v6) >> 3;
        if ((unint64_t)(v10 + 1) >> 61)
          goto LABEL_76;
        v11 = *v7 - (_QWORD)*v6;
        v12 = v11 >> 2;
        if (v11 >> 2 <= (unint64_t)(v10 + 1))
          v12 = v10 + 1;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        if (v13)
          v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 40, v13);
        else
          v14 = 0;
        v15 = &v14[8 * v10];
        *(_QWORD *)v15 = a2;
        v8 = v15 + 8;
        v17 = *(char **)(a1 + 24);
        v16 = *(char **)(a1 + 32);
        if (v16 != v17)
        {
          do
          {
            v18 = *((_QWORD *)v16 - 1);
            v16 -= 8;
            *((_QWORD *)v15 - 1) = v18;
            v15 -= 8;
          }
          while (v16 != v17);
          v16 = *v6;
        }
        *(_QWORD *)(a1 + 24) = v15;
        *(_QWORD *)(a1 + 32) = v8;
        *(_QWORD *)(a1 + 40) = &v14[8 * v13];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *v8++ = a2;
      }
      *(_QWORD *)(a1 + 32) = v8;
      a2 += v9;
      a3 -= v9;
    }
    while (a3);
  }
  else
  {
    v8 = *(_QWORD **)(a1 + 32);
  }
  v19 = *(_QWORD *)(a1 + 40);
  if ((unint64_t)v8 >= v19)
  {
    v21 = ((char *)v8 - *v6) >> 3;
    if ((unint64_t)(v21 + 1) >> 61)
LABEL_76:
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v22 = v19 - (_QWORD)*v6;
    v23 = v22 >> 2;
    if (v22 >> 2 <= (unint64_t)(v21 + 1))
      v23 = v21 + 1;
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
      v24 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v24 = v23;
    if (v24)
      v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 40, v24);
    else
      v25 = 0;
    v26 = &v25[8 * v21];
    v27 = &v25[8 * v24];
    *(_QWORD *)v26 = a2;
    v20 = v26 + 8;
    v29 = *(char **)(a1 + 24);
    v28 = *(char **)(a1 + 32);
    if (v28 != v29)
    {
      do
      {
        v30 = *((_QWORD *)v28 - 1);
        v28 -= 8;
        *((_QWORD *)v26 - 1) = v30;
        v26 -= 8;
      }
      while (v28 != v29);
      v28 = *v6;
    }
    *(_QWORD *)(a1 + 24) = v26;
    *(_QWORD *)(a1 + 32) = v20;
    *(_QWORD *)(a1 + 40) = v27;
    if (v28)
      operator delete(v28);
  }
  else
  {
    *v8 = a2;
    v20 = v8 + 1;
  }
  *(_QWORD *)(a1 + 32) = v20;
  v31 = (((unint64_t)v20 - *(_QWORD *)(a1 + 24)) >> 3) - 1;
  v32 = v31 & ~(v31 >> 31);
  std::vector<std::vector<sentencepiece::unigram::Lattice::Node *>>::resize((uint64_t *)(a1 + 48), v32 + 1);
  std::vector<std::vector<sentencepiece::unigram::Lattice::Node *>>::resize((uint64_t *)(a1 + 72), v32 + 1);
  v33 = 0;
  do
  {
    std::vector<char const*>::reserve((void **)(*(_QWORD *)(a1 + 48) + v33), 0x10uLL);
    std::vector<char const*>::reserve((void **)(*(_QWORD *)(a1 + 72) + v33), 0x10uLL);
    v33 += 24;
  }
  while (24 * v32 + 24 != v33);
  v34 = (_DWORD *)sentencepiece::model::FreeList<sentencepiece::unigram::Lattice::Node>::Allocate((_QWORD *)(a1 + 96));
  v34[6] = *(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 136) * *(_DWORD *)(a1 + 144) - 1;
  v34[7] = -1;
  v34[4] = 0;
  v35 = *(void ***)(a1 + 72);
  v36 = v35[1];
  v37 = (unint64_t)v35[2];
  if ((unint64_t)v36 >= v37)
  {
    v39 = ((char *)v36 - (_BYTE *)*v35) >> 3;
    if ((unint64_t)(v39 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v40 = v37 - (_QWORD)*v35;
    v41 = v40 >> 2;
    if (v40 >> 2 <= (unint64_t)(v39 + 1))
      v41 = v39 + 1;
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
      v42 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v42 = v41;
    if (v42)
      v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v35 + 2), v42);
    else
      v43 = 0;
    v44 = &v43[8 * v39];
    v45 = &v43[8 * v42];
    *(_QWORD *)v44 = v34;
    v38 = v44 + 8;
    v47 = (char *)*v35;
    v46 = (char *)v35[1];
    if (v46 != *v35)
    {
      do
      {
        v48 = *((_QWORD *)v46 - 1);
        v46 -= 8;
        *((_QWORD *)v44 - 1) = v48;
        v44 -= 8;
      }
      while (v46 != v47);
      v46 = (char *)*v35;
    }
    *v35 = v44;
    v35[1] = v38;
    v35[2] = v45;
    if (v46)
      operator delete(v46);
  }
  else
  {
    *v36 = v34;
    v38 = v36 + 1;
  }
  v35[1] = v38;
  v49 = (_DWORD *)sentencepiece::model::FreeList<sentencepiece::unigram::Lattice::Node>::Allocate((_QWORD *)(a1 + 96));
  v50 = v49;
  v49[6] = *(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 136) * *(_DWORD *)(a1 + 144) - 1;
  v49[7] = -1;
  v49[4] = v32;
  v51 = (void **)(*(_QWORD *)(a1 + 48) + 24 * v32);
  v52 = v51 + 1;
  v53 = v51[1];
  v54 = (unint64_t)v51[2];
  if ((unint64_t)v53 >= v54)
  {
    v56 = ((char *)v53 - (_BYTE *)*v51) >> 3;
    if ((unint64_t)(v56 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v57 = v54 - (_QWORD)*v51;
    v58 = v57 >> 2;
    if (v57 >> 2 <= (unint64_t)(v56 + 1))
      v58 = v56 + 1;
    if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
      v59 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v59 = v58;
    if (v59)
      v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v51 + 2), v59);
    else
      v60 = 0;
    v61 = &v60[8 * v56];
    v62 = &v60[8 * v59];
    *(_QWORD *)v61 = v50;
    v55 = v61 + 8;
    v63 = (char *)*v52;
    v64 = (char *)*v51;
    if (*v52 != *v51)
    {
      do
      {
        v65 = *((_QWORD *)v63 - 1);
        v63 -= 8;
        *((_QWORD *)v61 - 1) = v65;
        v61 -= 8;
      }
      while (v63 != v64);
      v63 = (char *)*v51;
    }
    *v51 = v61;
    *v52 = v55;
    v51[2] = v62;
    if (v63)
      operator delete(v63);
  }
  else
  {
    *v53 = v49;
    v55 = v53 + 1;
  }
  *v52 = v55;
}

void std::vector<std::vector<sentencepiece::unigram::Lattice::Node *>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<sentencepiece::unigram::Lattice::Node *>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

uint64_t sentencepiece::unigram::Lattice::Insert(sentencepiece::unigram::Lattice *this, int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t **v12;
  void **v13;
  uint64_t *v14;
  unint64_t v15;
  char **v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void **v28;
  void **v29;
  uint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;

  v6 = sentencepiece::model::FreeList<sentencepiece::unigram::Lattice::Node>::Allocate((_QWORD *)this + 12);
  v7 = v6;
  v8 = *((_DWORD *)this + 32) + *((_DWORD *)this + 34) * *((_DWORD *)this + 36) - 1;
  *(_DWORD *)(v6 + 20) = a3;
  *(_DWORD *)(v6 + 24) = v8;
  *(_DWORD *)(v6 + 16) = a2;
  v9 = *((_QWORD *)this + 3);
  v10 = *(_QWORD *)(v9 + 8 * (a3 + a2));
  v11 = *(_QWORD *)(v9 + 8 * a2);
  *(_QWORD *)v6 = v11;
  *(_QWORD *)(v6 + 8) = (int)v10 - (int)v11;
  v12 = (uint64_t **)(*((_QWORD *)this + 6) + 24 * a2);
  v13 = (void **)(v12 + 1);
  v14 = v12[1];
  v16 = (char **)(v12 + 2);
  v15 = (unint64_t)v12[2];
  if ((unint64_t)v14 >= v15)
  {
    v18 = v14 - *v12;
    if ((unint64_t)(v18 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v19 = v15 - (_QWORD)*v12;
    v20 = v19 >> 2;
    if (v19 >> 2 <= (unint64_t)(v18 + 1))
      v20 = v18 + 1;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v20;
    if (v21)
      v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v16, v21);
    else
      v22 = 0;
    v23 = (uint64_t *)&v22[8 * v18];
    v24 = &v22[8 * v21];
    *v23 = v7;
    v17 = v23 + 1;
    v25 = (char *)*v13;
    v26 = (char *)*v12;
    if (*v13 != *v12)
    {
      do
      {
        v27 = *((_QWORD *)v25 - 1);
        v25 -= 8;
        *--v23 = v27;
      }
      while (v25 != v26);
      v25 = (char *)*v12;
    }
    *v12 = v23;
    *v13 = v17;
    *v16 = v24;
    if (v25)
      operator delete(v25);
  }
  else
  {
    *v14 = v6;
    v17 = v14 + 1;
  }
  *v13 = v17;
  v28 = (void **)(*((_QWORD *)this + 9) + 24 * (*(_DWORD *)(v7 + 20) + a2));
  v29 = v28 + 1;
  v30 = (uint64_t *)v28[1];
  v31 = (unint64_t)v28[2];
  if ((unint64_t)v30 >= v31)
  {
    v33 = ((char *)v30 - (_BYTE *)*v28) >> 3;
    if ((unint64_t)(v33 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v34 = v31 - (_QWORD)*v28;
    v35 = v34 >> 2;
    if (v34 >> 2 <= (unint64_t)(v33 + 1))
      v35 = v33 + 1;
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
      v36 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v36 = v35;
    if (v36)
      v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v28 + 2), v36);
    else
      v37 = 0;
    v38 = (uint64_t *)&v37[8 * v33];
    v39 = &v37[8 * v36];
    *v38 = v7;
    v32 = v38 + 1;
    v40 = (char *)*v29;
    v41 = (char *)*v28;
    if (*v29 != *v28)
    {
      do
      {
        v42 = *((_QWORD *)v40 - 1);
        v40 -= 8;
        *--v38 = v42;
      }
      while (v40 != v41);
      v40 = (char *)*v28;
    }
    *v28 = v38;
    *v29 = v32;
    v28[2] = v39;
    if (v40)
      operator delete(v40);
  }
  else
  {
    *v30 = v7;
    v32 = v30 + 1;
  }
  *v29 = v32;
  return v7;
}

void sentencepiece::unigram::Lattice::Viterbi(sentencepiece::unigram::Lattice *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void *v33;
  char *v34;
  char *v36;
  uint64_t v37;
  BOOL v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  void *__p;
  char *v46;
  char *v47;

  v3 = 0;
  v4 = ((*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3) - 1;
  v5 = v4 & ~(v4 >> 31);
  v6 = *((_QWORD *)this + 6);
  while (1)
  {
    v7 = (uint64_t **)(v6 + 24 * v3);
    v8 = *v7;
    v9 = v7[1];
    if (v8 != v9)
      break;
LABEL_14:
    if (++v3 == v5 + 1)
    {
      __p = 0;
      v46 = 0;
      v47 = 0;
      v21 = **(_QWORD **)(v6 + 24 * v5);
      v22 = *(_DWORD *)(v21 + 36);
      v23 = *(_QWORD *)(v21 + 40);
      if (*(_QWORD *)(v23 + 40))
      {
        v24 = 0;
        do
        {
          if (v24 >= v47)
          {
            v25 = (v24 - (_BYTE *)__p) >> 3;
            if ((unint64_t)(v25 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v26 = (v47 - (_BYTE *)__p) >> 2;
            if (v26 <= v25 + 1)
              v26 = v25 + 1;
            if ((unint64_t)(v47 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
              v27 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v27 = v26;
            if (v27)
              v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v47, v27);
            else
              v28 = 0;
            v29 = &v28[8 * v25];
            *(_QWORD *)v29 = v23;
            v24 = v29 + 8;
            v31 = (char *)__p;
            v30 = v46;
            if (v46 != __p)
            {
              do
              {
                v32 = *((_QWORD *)v30 - 1);
                v30 -= 8;
                *((_QWORD *)v29 - 1) = v32;
                v29 -= 8;
              }
              while (v30 != v31);
              v30 = (char *)__p;
            }
            __p = v29;
            v46 = v24;
            v47 = &v28[8 * v27];
            if (v30)
              operator delete(v30);
          }
          else
          {
            *(_QWORD *)v24 = v23;
            v24 += 8;
          }
          v46 = v24;
          v23 = *(_QWORD *)(v23 + 40);
        }
        while (*(_QWORD *)(v23 + 40));
        v33 = __p;
        v34 = v24 - 8;
        if (__p != v24 && v34 > __p)
        {
          v36 = (char *)__p + 8;
          do
          {
            v37 = *((_QWORD *)v36 - 1);
            *((_QWORD *)v36 - 1) = *(_QWORD *)v34;
            *(_QWORD *)v34 = v37;
            v34 -= 8;
            v38 = v36 >= v34;
            v36 += 8;
          }
          while (!v38);
          v33 = __p;
          v24 = v46;
        }
      }
      else
      {
        v24 = 0;
        v33 = 0;
      }
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      std::vector<sentencepiece::unigram::Lattice::Node *>::__init_with_size[abi:ne180100]<sentencepiece::unigram::Lattice::Node **,sentencepiece::unigram::Lattice::Node **>((_QWORD *)a2, v33, (uint64_t)v24, (v24 - (_BYTE *)v33) >> 3);
      *(_DWORD *)(a2 + 24) = v22;
      if (__p)
      {
        v46 = (char *)__p;
        operator delete(__p);
      }
      return;
    }
  }
  v10 = (uint64_t **)(*((_QWORD *)this + 9) + 24 * v3);
  v11 = *v10;
  v12 = v10[1];
  while (1)
  {
    v13 = *v8;
    *(_QWORD *)(*v8 + 40) = 0;
    if (v11 == v12)
      break;
    v14 = 0;
    v15 = 0.0;
    v16 = v11;
    do
    {
      v18 = *v16++;
      v17 = v18;
      v19 = *(float *)(v18 + 36) + *(float *)(v13 + 32);
      if (v19 > v15 || v14 == 0)
      {
        v15 = v19;
        v14 = v17;
      }
    }
    while (v16 != v12);
    if (!v14)
      break;
    *(_QWORD *)(v13 + 40) = v14;
    *(float *)(v13 + 36) = v15;
    if (++v8 == v9)
      goto LABEL_14;
  }
  if ((int)sentencepiece::logging::GetMinLogLevel(this) <= 2)
  {
    LOBYTE(__p) = 0;
    v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"unigram_model.cc", 16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"(", 1);
    v40 = (_QWORD *)std::ostream::operator<<();
    v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)") ", 2);
    v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"LOG(", 4);
    v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"ERROR", 5);
    v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"Failed to find the best path in Viterbi.", 40);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&__p);
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 16) = 0;
}

void sub_22845FF40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::unigram::Lattice::ForwardAlgorithm(sentencepiece::unigram::Lattice *this@<X0>, float a2@<S0>, uint64_t *a3@<X8>)
{
  int v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  _QWORD *v20;
  float v21;
  float v22;
  double v23;
  long double v24;
  uint64_t *v25;
  sentencepiece::unigram::Lattice *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;

  v6 = ((*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3) - 1;
  v7 = v6 & ~(v6 >> 31);
  v8 = *((_QWORD *)this + 16) + *((_QWORD *)this + 17) * *((_QWORD *)this + 18);
  v29 = 0;
  v25 = a3;
  std::vector<float>::vector(a3, v8, &v29);
  v9 = 0;
  v28 = *((_QWORD *)this + 6);
  v26 = this;
  v27 = (v7 + 1);
  do
  {
    v10 = (uint64_t *)(v28 + 24 * v9);
    v11 = *v10;
    v12 = v10[1];
    if (*v10 != v12)
    {
      v13 = *((_QWORD *)v26 + 9) + 24 * v9;
      v15 = *(_QWORD **)v13;
      v14 = *(_QWORD **)(v13 + 8);
      v16 = *v25;
      do
      {
        if (v15 != v14)
        {
          v17 = *(unsigned int *)(*(_QWORD *)v11 + 24);
          v18 = *v15;
          v19 = *(float *)(v16 + 4 * v17);
          v20 = v15;
          do
          {
            v21 = *(float *)(v16 + 4 * *(unsigned int *)(*v20 + 24)) + (float)(a2 * *(float *)(*v20 + 32));
            if (*v20 != v18)
            {
              if (v21 >= v19)
                v22 = v19;
              else
                v22 = *(float *)(v16 + 4 * *(unsigned int *)(*v20 + 24)) + (float)(a2 * *(float *)(*v20 + 32));
              if (v19 >= v21)
                v21 = v19;
              if (v21 <= (float)(v22 + 50.0))
              {
                v23 = v21;
                v24 = exp((float)(v22 - v21));
                v21 = log(v24 + 1.0) + v23;
              }
            }
            *(float *)(v16 + 4 * v17) = v21;
            ++v20;
            v19 = v21;
          }
          while (v20 != v14);
        }
        v11 += 8;
      }
      while (v11 != v12);
    }
    ++v9;
  }
  while (v9 != v27);
}

void sentencepiece::unigram::Lattice::BackwardAlgorithm(sentencepiece::unigram::Lattice *this@<X0>, uint64_t *a2@<X8>)
{
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  _QWORD *v18;
  float v19;
  float v20;
  double v21;
  long double v22;
  uint64_t *v24;
  sentencepiece::unigram::Lattice *v25;
  uint64_t v26;
  int v27;

  v5 = ((*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3) - 1;
  v6 = v5 & ~(v5 >> 31);
  v7 = *((_QWORD *)this + 16) + *((_QWORD *)this + 17) * *((_QWORD *)this + 18);
  v27 = 0;
  v24 = a2;
  std::vector<float>::vector(a2, v7, &v27);
  v25 = this;
  v26 = *((_QWORD *)this + 9);
  do
  {
    v8 = (uint64_t *)(v26 + 24 * v6);
    v9 = *v8;
    v10 = v8[1];
    if (*v8 != v10)
    {
      v11 = *((_QWORD *)v25 + 6) + 24 * v6;
      v12 = *(_QWORD **)v11;
      v13 = *(_QWORD **)(v11 + 8);
      v14 = *v24;
      do
      {
        if (v12 != v13)
        {
          v15 = *(unsigned int *)(*(_QWORD *)v9 + 24);
          v16 = *v12;
          v17 = *(float *)(v14 + 4 * v15);
          v18 = v12;
          do
          {
            v19 = *(float *)(*v18 + 32) + *(float *)(v14 + 4 * *(unsigned int *)(*v18 + 24));
            if (*v18 != v16)
            {
              if (v19 >= v17)
                v20 = v17;
              else
                v20 = *(float *)(*v18 + 32) + *(float *)(v14 + 4 * *(unsigned int *)(*v18 + 24));
              if (v17 >= v19)
                v19 = v17;
              if (v19 <= (float)(v20 + 50.0))
              {
                v21 = v19;
                v22 = exp((float)(v20 - v19));
                v19 = log(v22 + 1.0) + v21;
              }
            }
            *(float *)(v14 + 4 * v15) = v19;
            ++v18;
            v17 = v19;
          }
          while (v18 != v13);
        }
        v9 += 8;
      }
      while (v9 != v10);
    }
  }
  while (v6-- > 0);
}

void sentencepiece::unigram::Lattice::PopulateMarginal(sentencepiece::unigram::Lattice *a1, _QWORD *a2, float a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  float v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  float *v17;
  uint64_t v18;
  float v19;
  void *__p[3];
  void *v21[3];

  if (a2)
  {
    v7 = *((_QWORD *)a1 + 3);
    v6 = *((_QWORD *)a1 + 4);
    sentencepiece::unigram::Lattice::ForwardAlgorithm(a1, 1.0, (uint64_t *)v21);
    sentencepiece::unigram::Lattice::BackwardAlgorithm(a1, (uint64_t *)__p);
    v8 = ((unint64_t)(v6 - v7) >> 3) - 1;
    v9 = v8 & ~(v8 >> 31);
    v10 = *((_QWORD *)a1 + 6);
    v11 = (float *)v21[0];
    v12 = *((float *)v21[0] + *(unsigned int *)(**(_QWORD **)(v10 + 24 * v9) + 24));
    if (v8 >= 1)
    {
      v13 = 0;
      do
      {
        v14 = (uint64_t *)(v10 + 24 * v13);
        v15 = *v14;
        v16 = v14[1];
        if (*v14 != v16)
        {
          v17 = (float *)__p[0];
          do
          {
            v18 = *(unsigned int *)(*(_QWORD *)v15 + 28);
            if ((v18 & 0x80000000) == 0)
            {
              v19 = *(float *)(*a2 + 4 * v18)
                  + a3
                  * exp((float)((float)((float)(v11[*(unsigned int *)(*(_QWORD *)v15 + 24)]
                                              + *(float *)(*(_QWORD *)v15 + 32))
                                      + v17[*(unsigned int *)(*(_QWORD *)v15 + 24)])
                              - v12));
              *(float *)(*a2 + 4 * v18) = v19;
            }
            v15 += 8;
          }
          while (v15 != v16);
        }
        ++v13;
      }
      while (v13 != v9);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
      v11 = (float *)v21[0];
    }
    if (v11)
    {
      v21[1] = v11;
      operator delete(v11);
    }
  }
}

void sub_2284603C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float sentencepiece::unigram::Lattice::CalculateEntropy(sentencepiece::unigram::Lattice *this, float a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t *v13;
  float *v14;
  float *v15;
  uint64_t v16;
  float v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  void *v22;
  float v23;
  unsigned int v25;
  sentencepiece::unigram::Lattice *v26;
  uint64_t v27;
  void *__p[3];
  void *v29[3];

  v5 = *((_QWORD *)this + 3);
  v4 = *((_QWORD *)this + 4);
  v6 = *((_QWORD *)this + 16) + *((_QWORD *)this + 17) * *((_QWORD *)this + 18);
  LODWORD(__p[0]) = 0;
  std::vector<float>::vector(v29, v6, __p);
  sentencepiece::unigram::Lattice::ForwardAlgorithm(this, a2, (uint64_t *)__p);
  v7 = 0;
  v27 = *((_QWORD *)this + 6);
  v25 = (((unint64_t)(v4 - v5) >> 3) - 1) & ~((int)(((unint64_t)(v4 - v5) >> 3) - 1) >> 31);
  v26 = this;
  do
  {
    v8 = (uint64_t *)(v27 + 24 * v7);
    v9 = *v8;
    v10 = v8[1];
    if (*v8 != v10)
    {
      v11 = (uint64_t **)(*((_QWORD *)v26 + 9) + 24 * v7);
      v12 = *v11;
      v13 = v11[1];
      v14 = (float *)__p[0];
      v15 = (float *)v29[0];
      do
      {
        if (v12 != v13)
        {
          v16 = *(unsigned int *)(*(_QWORD *)v9 + 24);
          v17 = v15[v16];
          v18 = v12;
          do
          {
            v19 = *v18++;
            v20 = *(unsigned int *)(v19 + 24);
            v21 = (float)(v14[v20] + (float)(a2 * *(float *)(v19 + 32))) - v14[v16];
            v17 = v17 + (float)(expf(v21) * (float)(v21 + v15[v20]));
            v15[v16] = v17;
          }
          while (v18 != v13);
        }
        v9 += 8;
      }
      while (v9 != v10);
    }
    ++v7;
  }
  while (v7 != v25 + 1);
  v22 = v29[0];
  v23 = *((float *)v29[0] + *(unsigned int *)(**(_QWORD **)(v27 + 24 * v25) + 24));
  if (!__p[0] || (__p[1] = __p[0], operator delete(__p[0]), (v22 = v29[0]) != 0))
  {
    v29[1] = v22;
    operator delete(v22);
  }
  return -v23;
}

void sub_228460584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::unigram::Lattice::NBest(sentencepiece::unigram::Lattice *this@<X0>, float a2@<S0>, uint64_t a3@<X1>, int a4@<W2>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  sentencepiece::random *v18;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *RandomGenerator;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v20;
  float v21;
  float v22;
  int v23;
  int v24;
  __int128 v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD **v34;
  _QWORD *i;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  sentencepiece::random *MinLogLevel;
  int v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  unint64_t v57;
  float v58;
  float v59;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *v60;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v61;
  float v62;
  float v63;
  int v64;
  double *v65;
  float v66;
  float *v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  float v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  void *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  int v96;
  unint64_t v97;
  uint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint8x8_t v103;
  unint64_t v104;
  _QWORD *v105;
  _QWORD *j;
  unint64_t v107;
  uint64_t v108;
  __int128 v109;
  uint8x8_t v110;
  _QWORD *v111;
  _QWORD *k;
  unint64_t v113;
  _QWORD *v114;
  float v115;
  _BOOL4 v116;
  unint64_t v117;
  unint64_t v118;
  int8x8_t prime;
  void *v120;
  void *v121;
  uint64_t v122;
  _QWORD **v123;
  unint64_t v124;
  uint8x8_t v125;
  unint64_t v126;
  uint8x8_t v127;
  uint64_t v128;
  _QWORD *m;
  unint64_t v130;
  _QWORD *v131;
  _QWORD *v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  __int128 v143;
  uint64_t v144;
  uint64_t v145;
  __int128 v146;
  void *v147;
  int v148;
  char v149;
  int v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v155;
  void *v156[2];
  __int128 v157;
  float v158;
  _BYTE v159[48];
  uint64_t v160;
  __int128 v161;
  uint64_t v162;
  void *v163;
  _BYTE *v164;
  void *v165[3];
  void *v166[3];
  void *v167[4];
  void *__p[3];
  uint64_t v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t (**v173)();
  __int128 v174;
  _QWORD v175[3];
  uint64_t v176;
  uint64_t v177;

  v177 = *MEMORY[0x24BDAC8D0];
  if (a3 == 1)
  {
    if ((a4 & 1) == 0)
    {
      sentencepiece::unigram::Lattice::Viterbi(this, (uint64_t)&v173);
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      *(_QWORD *)v159 = a5;
      v159[8] = 0;
      v147 = operator new(0x20uLL);
      *a5 = (uint64_t)v147;
      a5[1] = (uint64_t)v147;
      a5[2] = (uint64_t)v147 + 32;
      a5[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float> const*,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float> const*,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>*>((uint64_t)(a5 + 2), (uint64_t)&v173, (uint64_t)&v175[1], (uint64_t)v147);
      if (v173)
      {
        *(_QWORD *)&v174 = v173;
        operator delete(v173);
      }
      return;
    }
  }
  else if (!a3)
  {
    if ((int)sentencepiece::logging::GetMinLogLevel(this) <= 1)
    {
      LOBYTE(v173) = 0;
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"unigram_model.cc", 16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"(", 1);
      v10 = (_QWORD *)std::ostream::operator<<();
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") ", 2);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"LOG(", 4);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"WARNING", 7);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)") ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"nbest_size >= 1. Returns empty result.", 38);
      sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v173);
    }
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    return;
  }
  v174 = 0u;
  memset(v175, 0, sizeof(v175));
  v173 = &off_24F0FDBE0;
  v176 = 512;
  v170 = 0uLL;
  v171 = 0;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  v169 = v15;
  v16 = ((*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3) - 1;
  *(_QWORD *)v15 = **(_QWORD **)(*((_QWORD *)this + 6) + 24 * (v16 & ~(v16 >> 31)));
  *(_QWORD *)(v15 + 8) = 0;
  *(_DWORD *)(v15 + 20) = 0;
  v17 = *((_QWORD *)this + 16) + *((_QWORD *)this + 17) * *((_QWORD *)this + 18);
  *(_DWORD *)v159 = 0;
  std::vector<float>::vector(__p, v17, v159);
  if (a4)
  {
    sentencepiece::unigram::Lattice::ForwardAlgorithm(this, a2, (uint64_t *)v159);
    v18 = (sentencepiece::random *)__p[0];
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_OWORD *)__p = *(_OWORD *)v159;
    __p[2] = *(void **)&v159[16];
    RandomGenerator = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)sentencepiece::random::GetRandomGenerator(v18);
    v20 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(RandomGenerator);
    v21 = logf((float)((float)((float)v20 * 2.3283e-10) + 0.0) + 0.0000001);
    v22 = -logf(-v21);
  }
  else
  {
    sentencepiece::unigram::Lattice::Viterbi(this, (uint64_t)v167);
    if (v167[0])
    {
      v167[1] = v167[0];
      operator delete(v167[0]);
    }
    v22 = *(float *)(*(_QWORD *)v15 + 36);
  }
  *(float *)(v15 + 16) = v22;
  v148 = 0;
  v149 = 0;
  if (10 * (int)a3 >= 512)
    v23 = 512;
  else
    v23 = 10 * a3;
  if (v23 <= 1)
    v24 = 1;
  else
    v24 = v23;
  v150 = v24;
  while (1)
  {
    v25 = v170;
    if ((_QWORD)v170 == *((_QWORD *)&v170 + 1))
      break;
    v26 = *(uint64_t **)v170;
    if ((uint64_t)(*((_QWORD *)&v170 + 1) - v170) >= 9)
    {
      v27 = 0;
      v28 = (uint64_t)(*((_QWORD *)&v170 + 1) - v170) >> 3;
      v29 = (_QWORD *)v170;
      do
      {
        v30 = v29;
        v29 += v27 + 1;
        v31 = 2 * v27;
        v27 = (2 * v27) | 1;
        v32 = v31 + 2;
        if (v32 < v28 && *(float *)(*v29 + 16) < *(float *)(v29[1] + 16))
        {
          ++v29;
          v27 = v32;
        }
        *v30 = *v29;
      }
      while (v27 <= (uint64_t)((unint64_t)(v28 - 2) >> 1));
      if (v29 == (_QWORD *)(*((_QWORD *)&v25 + 1) - 8))
      {
        *v29 = v26;
      }
      else
      {
        *v29 = **((_QWORD **)&v25 + 1);
        **((_QWORD **)&v25 + 1) = v26;
      }
    }
    *((_QWORD *)&v170 + 1) -= 8;
    v33 = *v26;
    v34 = (_QWORD **)*((_QWORD *)this + 9);
    if (*v26 == **v34)
    {
      std::vector<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>::resize(a5, ((a5[1] - *a5) >> 5) + 1);
      for (i = (_QWORD *)v26[1]; i[1]; i = (_QWORD *)i[1])
      {
        v36 = a5[1];
        v37 = *(_QWORD **)(v36 - 24);
        v38 = *(_QWORD *)(v36 - 16);
        if ((unint64_t)v37 >= v38)
        {
          v40 = *(_QWORD *)(v36 - 32);
          v41 = ((uint64_t)v37 - v40) >> 3;
          if ((unint64_t)(v41 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v42 = v38 - v40;
          v43 = v42 >> 2;
          if (v42 >> 2 <= (unint64_t)(v41 + 1))
            v43 = v41 + 1;
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
            v44 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v44 = v43;
          if (v44)
            v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v36 - 16, v44);
          else
            v45 = 0;
          v46 = &v45[8 * v41];
          *(_QWORD *)v46 = *i;
          v39 = v46 + 8;
          v48 = *(char **)(v36 - 32);
          v47 = *(char **)(v36 - 24);
          if (v47 != v48)
          {
            do
            {
              v49 = *((_QWORD *)v47 - 1);
              v47 -= 8;
              *((_QWORD *)v46 - 1) = v49;
              v46 -= 8;
            }
            while (v47 != v48);
            v47 = *(char **)(v36 - 32);
          }
          *(_QWORD *)(v36 - 32) = v46;
          *(_QWORD *)(v36 - 24) = v39;
          *(_QWORD *)(v36 - 16) = &v45[8 * v44];
          if (v47)
            operator delete(v47);
        }
        else
        {
          *v37 = *i;
          v39 = v37 + 1;
        }
        *(_QWORD *)(v36 - 24) = v39;
      }
      v50 = a5[1];
      *(_DWORD *)(v50 - 8) = *((_DWORD *)v26 + 4);
      if (a3 == (v50 - *a5) >> 5)
        break;
    }
    else
    {
      v51 = (int)(v34[3 * *(int *)(v33 + 16) + 1] - v34[3 * *(int *)(v33 + 16)]);
      *(_DWORD *)v159 = 0;
      std::vector<float>::vector(v166, v51, v159);
      *(_DWORD *)v159 = 0;
      std::vector<float>::vector(v165, v51, v159);
      *(_QWORD *)v159 = 0;
      MinLogLevel = (sentencepiece::random *)std::vector<double>::vector(&v163, v51, v159);
      v53 = *(_DWORD *)(v33 + 16);
      v54 = *((_QWORD *)this + 9);
      if (a4)
      {
        v55 = *(_QWORD *)(v54 + 24 * v53);
        v56 = -100000000.0;
        if (*(_QWORD *)(v54 + 24 * v53 + 8) != v55)
        {
          v57 = 0;
          v58 = *((float *)__p[0] + *(unsigned int *)(v33 + 24));
          v56 = -100000000.0;
          do
          {
            v59 = (float)((float)(*((float *)v26 + 5)
                                + *((float *)__p[0] + *(unsigned int *)(*(_QWORD *)(v55 + 8 * v57) + 24)))
                        + (float)(a2 * *(float *)(*(_QWORD *)(v55 + 8 * v57) + 32)))
                - v58;
            *((float *)v166[0] + v57) = v59;
            v60 = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)sentencepiece::random::GetRandomGenerator(MinLogLevel);
            v61 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(v60);
            v62 = logf((float)((float)((float)v61 * 2.3283e-10) + 0.0) + 0.0000001);
            v63 = v59 - logf(-v62);
            *((float *)v165[0] + v57) = v63;
            if (v63 > v56)
              v56 = v63;
            ++v57;
            v64 = *(_DWORD *)(v33 + 16);
            v54 = *((_QWORD *)this + 9);
            v55 = *(_QWORD *)(v54 + 24 * v64);
          }
          while (v57 < (*(_QWORD *)(v54 + 24 * v64 + 8) - v55) >> 3);
          v53 = *(_DWORD *)(v33 + 16);
        }
        v65 = (double *)v163;
        if (v164 != v163)
        {
          v66 = *((float *)v26 + 4);
          v67 = (float *)v165[0];
          if ((unint64_t)((v164 - (_BYTE *)v163) >> 3) <= 1)
            v5 = 1;
          else
            v5 = (v164 - (_BYTE *)v163) >> 3;
          do
          {
            v68 = *v67++;
            v69 = expf(v68 - v56);
            v70 = (float)(v66 - v68) + log1pf(-v69);
            v71 = v66 - fmaxf(v70, 0.0);
            v72 = expf(-fabsf(v70));
            *v65++ = (float)(v71 - log1pf(v72));
            --v5;
          }
          while (v5);
        }
      }
      v73 = *(_QWORD *)(v54 + 24 * v53);
      if (*(_QWORD *)(v54 + 24 * v53 + 8) != v73)
      {
        v74 = 0;
        do
        {
          v75 = *(_QWORD *)(v73 + 8 * v74);
          *(_QWORD *)v159 = v76;
          *(_QWORD *)v76 = v75;
          if (a4)
          {
            *(_DWORD *)(v76 + 20) = *((_DWORD *)v166[0] + v74);
            v77 = *((double *)v163 + v74);
          }
          else
          {
            *(float *)(v76 + 20) = *(float *)(v75 + 32) + *((float *)v26 + 5);
            v77 = *(float *)(v75 + 36) + *((float *)v26 + 5);
          }
          *(float *)(v76 + 16) = v77;
          *(_QWORD *)(v76 + 8) = v26;
          ++v74;
          v73 = *(_QWORD *)(*((_QWORD *)this + 9) + 24 * *(int *)(v33 + 16));
        }
        while (v74 < (*(_QWORD *)(*((_QWORD *)this + 9) + 24 * *(int *)(v33 + 16) + 8) - v73) >> 3);
      }
      if (!(((unint64_t)(v175[1] + v175[2] * v176) < 0x3B9ACA00) | v149 & 1))
      {
        MinLogLevel = (sentencepiece::random *)sentencepiece::logging::GetMinLogLevel(MinLogLevel);
        if ((int)MinLogLevel <= 1)
        {
          v159[0] = 0;
          v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"unigram_model.cc", 16);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"(", 1);
          v79 = (_QWORD *)std::ostream::operator<<();
          v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)") ", 2);
          v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"LOG(", 4);
          v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"WARNING", 7);
          v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)") ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)"Allocator size exceeds ", 23);
          v84 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)" with an example of length ", 27);
          std::ostream::operator<<();
          sentencepiece::error::Die::~Die((sentencepiece::error::Die *)v159);
        }
        v149 = 1;
      }
      v85 = *((_QWORD *)&v170 + 1);
      v86 = (void *)v170;
      if (*((_QWORD *)&v170 + 1) - (_QWORD)v170 >= 0x13879uLL)
      {
        v161 = 0uLL;
        v162 = 0;
        memset(&v159[8], 0, 40);
        *(_QWORD *)v159 = &off_24F0FDBE0;
        v160 = 512;
        *(_OWORD *)v156 = 0u;
        v157 = 0u;
        v158 = 1.0;
        ++v148;
        if ((int)sentencepiece::logging::GetMinLogLevel(MinLogLevel) <= 1)
        {
          LOBYTE(v172) = 0;
          v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"unigram_model.cc", 16);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"(", 1);
          v88 = (_QWORD *)std::ostream::operator<<();
          v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)") ", 2);
          v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"LOG(", 4);
          v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)"WARNING", 7);
          v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)") ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)"Too big agenda size ", 20);
          v93 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)". Shrinking (round ", 19);
          v94 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)") down to ", 10);
          v95 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)".", 1);
          sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v172);
        }
        if (10 * (int)a3 >= 1)
        {
          v96 = 0;
          while (1)
          {
            v151 = (_QWORD *)v170;
            v152 = v85;
            v97 = *(_QWORD *)v170;
            v155 = 0;
            v172 = 0;
            if (!v97)
              goto LABEL_181;
            v98 = &v172;
            v99 = (unint64_t)v156[1];
            do
            {
              v100 = 0x9DDFEA08EB382D69 * (((8 * v97) + 8) ^ HIDWORD(v97));
              v101 = 0x9DDFEA08EB382D69 * (HIDWORD(v97) ^ (v100 >> 47) ^ v100);
              v102 = 0x9DDFEA08EB382D69 * (v101 ^ (v101 >> 47));
              if (v99)
              {
                v103 = (uint8x8_t)vcnt_s8((int8x8_t)v99);
                v103.i16[0] = vaddlv_u8(v103);
                if (v103.u32[0] > 1uLL)
                {
                  v104 = 0x9DDFEA08EB382D69 * (v101 ^ (v101 >> 47));
                  if (v102 >= v99)
                    v104 = v102 % v99;
                }
                else
                {
                  v104 = v102 & (v99 - 1);
                }
                v105 = (_QWORD *)*((_QWORD *)v156[0] + v104);
                if (v105)
                {
                  for (j = (_QWORD *)*v105; j; j = (_QWORD *)*j)
                  {
                    v107 = j[1];
                    if (v107 == v102)
                    {
                      if (j[2] == v97)
                      {
                        *v98 = j[3];
                        goto LABEL_181;
                      }
                    }
                    else
                    {
                      if (v103.u32[0] > 1uLL)
                      {
                        if (v107 >= v99)
                          v107 %= v99;
                      }
                      else
                      {
                        v107 &= v99 - 1;
                      }
                      if (v107 != v104)
                        break;
                    }
                  }
                }
              }
              v109 = *(_OWORD *)v97;
              *(_QWORD *)(v108 + 16) = *(_QWORD *)(v97 + 16);
              *(_OWORD *)v108 = v109;
              *v98 = v108;
              v99 = (unint64_t)v156[1];
              if (v156[1])
              {
                v110 = (uint8x8_t)vcnt_s8((int8x8_t)v156[1]);
                v110.i16[0] = vaddlv_u8(v110);
                if (v110.u32[0] > 1uLL)
                {
                  v5 = v102;
                  if ((void *)v102 >= v156[1])
                    v5 = v102 % (unint64_t)v156[1];
                }
                else
                {
                  v5 = ((unint64_t)v156[1] - 1) & v102;
                }
                v111 = (_QWORD *)*((_QWORD *)v156[0] + v5);
                if (v111)
                {
                  for (k = (_QWORD *)*v111; k; k = (_QWORD *)*k)
                  {
                    v113 = k[1];
                    if (v113 == v102)
                    {
                      if (k[2] == v97)
                        goto LABEL_170;
                    }
                    else
                    {
                      if (v110.u32[0] > 1uLL)
                      {
                        if ((void *)v113 >= v156[1])
                          v113 %= (unint64_t)v156[1];
                      }
                      else
                      {
                        v113 &= (unint64_t)v156[1] - 1;
                      }
                      if (v113 != v5)
                        break;
                    }
                  }
                }
              }
              v114 = operator new(0x20uLL);
              *v114 = 0;
              v114[1] = v102;
              v114[2] = v97;
              v114[3] = v108;
              v115 = (float)(unint64_t)(*((_QWORD *)&v157 + 1) + 1);
              if (!v99 || (float)(v158 * (float)v99) < v115)
              {
                v116 = (v99 & (v99 - 1)) == 0;
                if (v99 < 3)
                  v116 = 0;
                v117 = (2 * v99) | !v116;
                v118 = vcvtps_u32_f32(v115 / v158);
                if (v117 <= v118)
                  prime = (int8x8_t)v118;
                else
                  prime = (int8x8_t)v117;
                if (*(_QWORD *)&prime == 1)
                {
                  prime = (int8x8_t)2;
                }
                else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
                {
                  prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
                  v99 = (unint64_t)v156[1];
                }
                if (*(_QWORD *)&prime <= v99)
                {
                  if (*(_QWORD *)&prime < v99)
                  {
                    v126 = vcvtps_u32_f32((float)*((unint64_t *)&v157 + 1) / v158);
                    if (v99 < 3
                      || (v127 = (uint8x8_t)vcnt_s8((int8x8_t)v99), v127.i16[0] = vaddlv_u8(v127), v127.u32[0] > 1uLL))
                    {
                      v126 = std::__next_prime(v126);
                    }
                    else
                    {
                      v128 = 1 << -(char)__clz(v126 - 1);
                      if (v126 >= 2)
                        v126 = v128;
                    }
                    if (*(_QWORD *)&prime <= v126)
                      prime = (int8x8_t)v126;
                    if (*(_QWORD *)&prime >= v99)
                    {
                      v99 = (unint64_t)v156[1];
                    }
                    else
                    {
                      if (prime)
                        goto LABEL_126;
                      v134 = v156[0];
                      v156[0] = 0;
                      if (v134)
                        operator delete(v134);
                      v99 = 0;
                      v156[1] = 0;
                    }
                  }
                }
                else
                {
LABEL_126:
                  if (*(_QWORD *)&prime >> 61)
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  v120 = operator new(8 * *(_QWORD *)&prime);
                  v121 = v156[0];
                  v156[0] = v120;
                  if (v121)
                    operator delete(v121);
                  v122 = 0;
                  v156[1] = (void *)prime;
                  do
                    *((_QWORD *)v156[0] + v122++) = 0;
                  while (*(_QWORD *)&prime != v122);
                  v123 = (_QWORD **)v157;
                  if ((_QWORD)v157)
                  {
                    v124 = *(_QWORD *)(v157 + 8);
                    v125 = (uint8x8_t)vcnt_s8(prime);
                    v125.i16[0] = vaddlv_u8(v125);
                    if (v125.u32[0] > 1uLL)
                    {
                      if (v124 >= *(_QWORD *)&prime)
                        v124 %= *(_QWORD *)&prime;
                    }
                    else
                    {
                      v124 &= *(_QWORD *)&prime - 1;
                    }
                    *((_QWORD *)v156[0] + v124) = &v157;
                    for (m = *v123; m; v124 = v130)
                    {
                      v130 = m[1];
                      if (v125.u32[0] > 1uLL)
                      {
                        if (v130 >= *(_QWORD *)&prime)
                          v130 %= *(_QWORD *)&prime;
                      }
                      else
                      {
                        v130 &= *(_QWORD *)&prime - 1;
                      }
                      if (v130 != v124)
                      {
                        if (!*((_QWORD *)v156[0] + v130))
                        {
                          *((_QWORD *)v156[0] + v130) = v123;
                          goto LABEL_151;
                        }
                        *v123 = (_QWORD *)*m;
                        *m = **((_QWORD **)v156[0] + v130);
                        **((_QWORD **)v156[0] + v130) = m;
                        m = v123;
                      }
                      v130 = v124;
LABEL_151:
                      v123 = (_QWORD **)m;
                      m = (_QWORD *)*m;
                    }
                  }
                  v99 = (unint64_t)prime;
                }
                if ((v99 & (v99 - 1)) != 0)
                {
                  if (v102 >= v99)
                    v5 = v102 % v99;
                  else
                    v5 = v102;
                }
                else
                {
                  v5 = (v99 - 1) & v102;
                }
              }
              v131 = v156[0];
              v132 = (_QWORD *)*((_QWORD *)v156[0] + v5);
              if (v132)
              {
                *v114 = *v132;
LABEL_168:
                *v132 = v114;
                goto LABEL_169;
              }
              *v114 = v157;
              *(_QWORD *)&v157 = v114;
              v131[v5] = &v157;
              if (*v114)
              {
                v133 = *(_QWORD *)(*v114 + 8);
                if ((v99 & (v99 - 1)) != 0)
                {
                  if (v133 >= v99)
                    v133 %= v99;
                }
                else
                {
                  v133 &= v99 - 1;
                }
                v132 = (char *)v156[0] + 8 * v133;
                goto LABEL_168;
              }
LABEL_169:
              ++*((_QWORD *)&v157 + 1);
LABEL_170:
              v97 = *(_QWORD *)(v97 + 8);
              v98 = (uint64_t *)(v108 + 8);
            }
            while (v97);
LABEL_181:
            v155 = v172;
            if (v152 - (uint64_t)v151 >= 9)
            {
              v135 = 0;
              v136 = (v152 - (uint64_t)v151) >> 3;
              v137 = *v151;
              v138 = v151;
              do
              {
                v139 = v138;
                v138 += v135 + 1;
                v140 = 2 * v135;
                v135 = (2 * v135) | 1;
                v141 = v140 + 2;
                if (v141 < v136 && *(float *)(*v138 + 16) < *(float *)(v138[1] + 16))
                {
                  ++v138;
                  v135 = v141;
                }
                *v139 = *v138;
              }
              while (v135 <= (uint64_t)((unint64_t)(v136 - 2) >> 1));
              v142 = (_QWORD *)(v152 - 8);
              if (v138 == (_QWORD *)(v152 - 8))
              {
                *v138 = v137;
              }
              else
              {
                *v138 = *v142;
                *v142 = v137;
              }
            }
            v85 = *((_QWORD *)&v170 + 1) - 8;
            *((_QWORD *)&v170 + 1) -= 8;
            if (++v96 == v150)
            {
              v86 = (void *)v170;
              break;
            }
          }
        }
        if (v86)
        {
          *((_QWORD *)&v170 + 1) = v86;
          operator delete(v86);
        }
        v170 = v161;
        v171 = v162;
        v143 = v174;
        v174 = *(_OWORD *)&v159[8];
        *(_OWORD *)&v159[8] = v143;
        v144 = *(_QWORD *)&v159[24];
        v145 = v176;
        *(_QWORD *)&v159[24] = v175[0];
        v146 = *(_OWORD *)&v175[1];
        *(_OWORD *)&v175[1] = *(_OWORD *)&v159[32];
        *(_OWORD *)&v159[32] = v146;
        v175[0] = v144;
        v176 = v160;
        v160 = v145;
      }
      if (v163)
      {
        v164 = v163;
        operator delete(v163);
      }
      if (v165[0])
      {
        v165[1] = v165[0];
        operator delete(v165[0]);
      }
      if (v166[0])
      {
        v166[1] = v166[0];
        operator delete(v166[0]);
      }
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((_QWORD)v170)
    operator delete((void *)v170);
}

void sub_2284615F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57)
{
  uint64_t v57;
  void *v59;

  if (__p)
  {
    a41 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a43)
  {
    a44 = (uint64_t)a43;
    operator delete(a43);
  }
  if (a46)
  {
    a47 = (uint64_t)a46;
    operator delete(a46);
  }
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  v59 = a57;
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  if (v59)
    operator delete(v59);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::model::FreeList<sentencepiece::unigram::`anonymous namespace'::Hypothesis>::Allocate(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t result;

  v2 = a1[5];
  v3 = a1[6];
  v4 = a1[4];
  if (v4 >= v3)
  {
    v4 = 0;
    ++v2;
    a1[4] = 0;
    a1[5] = v2;
  }
  v5 = a1[1];
  if (v2 == (a1[2] - v5) >> 3)
  {
    is_mul_ok(v3, 0x18uLL);
    v6 = (void *)operator new[]();
    bzero(v6, 24 * a1[6]);
    v8 = (_QWORD *)a1[2];
    v7 = a1[3];
    if ((unint64_t)v8 >= v7)
    {
      v10 = (_QWORD *)a1[1];
      v11 = v8 - v10;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v13 = v7 - (_QWORD)v10;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = (char *)operator new(8 * v14);
      }
      else
      {
        v15 = 0;
      }
      v16 = &v15[8 * v11];
      *(_QWORD *)v16 = v6;
      v9 = v16 + 8;
      if (v8 != v10)
      {
        do
        {
          v17 = *--v8;
          *((_QWORD *)v16 - 1) = v17;
          v16 -= 8;
        }
        while (v8 != v10);
        v8 = (_QWORD *)a1[1];
      }
      a1[1] = v16;
      a1[2] = v9;
      a1[3] = &v15[8 * v14];
      if (v8)
        operator delete(v8);
    }
    else
    {
      *v8 = v6;
      v9 = v8 + 1;
    }
    a1[2] = v9;
    v5 = a1[1];
    v4 = a1[4];
    v2 = a1[5];
  }
  result = *(_QWORD *)(v5 + 8 * v2) + 24 * v4;
  a1[4] = v4 + 1;
  return result;
}

uint64_t std::priority_queue<sentencepiece::unigram::`anonymous namespace'::Hypothesis *,std::vector<sentencepiece::unigram::`anonymous namespace'::Hypothesis *>,sentencepiece::unigram::Lattice::NBest(unsigned long,BOOL,float)::HypothesisComparator>::push(uint64_t *a1, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v5 = (_QWORD *)a1[1];
  v4 = a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = *a1;
    v8 = ((uint64_t)v5 - *a1) >> 3;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v4 - v7;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v8];
    *(_QWORD *)v13 = *a2;
    v6 = (uint64_t)(v13 + 8);
    if (v5 != (_QWORD *)v7)
    {
      do
      {
        v14 = *--v5;
        *((_QWORD *)v13 - 1) = v14;
        v13 -= 8;
      }
      while (v5 != (_QWORD *)v7);
      v5 = (_QWORD *)*a1;
    }
    *a1 = (uint64_t)v13;
    a1[1] = v6;
    a1[2] = (uint64_t)&v12[8 * v11];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = *a2;
    v6 = (uint64_t)(v5 + 1);
  }
  a1[1] = v6;
}

void std::vector<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v3 = a1[1];
  v4 = (v3 - *a1) >> 5;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *a1 + 32 * a2;
      if (v3 != v5)
      {
        v6 = a1[1];
        do
        {
          v8 = *(void **)(v6 - 32);
          v6 -= 32;
          v7 = v8;
          if (v8)
          {
            *(_QWORD *)(v3 - 24) = v7;
            operator delete(v7);
          }
          v3 = v6;
        }
        while (v6 != v5);
      }
      a1[1] = v5;
    }
  }
  else
  {
    std::vector<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>::__append(a1, a2 - v4);
  }
}

uint64_t std::unordered_map<sentencepiece::unigram::`anonymous namespace'::Hypothesis const*,sentencepiece::unigram::`anonymous namespace'::Hypothesis*>::~unordered_map[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

_QWORD *sentencepiece::model::FreeList<sentencepiece::unigram::`anonymous namespace'::Hypothesis>::~FreeList(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_24F0FDBE0;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)a1[2];
  if (v2 != v3)
  {
    do
    {
      if (*v2)
        MEMORY[0x22E2B0780](*v2, 0x1020C8062D53EE8);
      ++v2;
    }
    while (v2 != v3);
    v2 = (_QWORD *)a1[1];
  }
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sentencepiece::unigram::Lattice::Sample(sentencepiece::unigram::Lattice *this@<X0>, float a2@<S0>, void **a3@<X8>)
{
  unint64_t v6;
  sentencepiece::random *v7;
  int v8;
  uint64_t v9;
  float v10;
  float *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  float v16;
  float *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  float *v23;
  void *v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  BOOL v46;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *RandomGenerator;
  void *v48[3];
  void *v49[2];
  float *v50;
  void *__p[2];
  float *v52;

  if ((int)(((*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3) - 1) <= 0)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    v6 = *((_QWORD *)this + 16) + *((_QWORD *)this + 17) * *((_QWORD *)this + 18);
    LODWORD(v49[0]) = 0;
    std::vector<float>::vector(__p, v6, v49);
    sentencepiece::unigram::Lattice::ForwardAlgorithm(this, a2, (uint64_t *)v49);
    v7 = (sentencepiece::random *)__p[0];
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_OWORD *)__p = *(_OWORD *)v49;
    v52 = v50;
    RandomGenerator = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)sentencepiece::random::GetRandomGenerator(v7);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v49[0] = 0;
    v49[1] = 0;
    v50 = 0;
    v8 = ((*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3) - 1;
    v9 = **(_QWORD **)(*((_QWORD *)this + 6) + 24 * (v8 & ~(v8 >> 31)));
    v10 = *((float *)__p[0] + *(unsigned int *)(v9 + 24));
    do
    {
      v11 = (float *)v49[0];
      v49[1] = v49[0];
      v12 = (uint64_t *)(*((_QWORD *)this + 9) + 24 * *(unsigned int *)(v9 + 16));
      v14 = *v12;
      v13 = v12[1];
      v15 = (float *)v49[0];
      if (*v12 != v13)
      {
        do
        {
          v16 = exp((float)((float)(*((float *)__p[0] + *(unsigned int *)(*(_QWORD *)v14 + 24))
                                  + (float)(a2 * *(float *)(*(_QWORD *)v14 + 32)))
                          - v10));
          if (v11 >= v50)
          {
            v17 = (float *)v49[0];
            v18 = ((char *)v11 - (char *)v49[0]) >> 2;
            v19 = v18 + 1;
            if ((unint64_t)(v18 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v20 = (char *)v50 - (char *)v49[0];
            if (((char *)v50 - (char *)v49[0]) >> 1 > v19)
              v19 = v20 >> 1;
            if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
              v21 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v21 = v19;
            if (v21)
            {
              v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v50, v21);
              v17 = (float *)v49[0];
              v11 = (float *)v49[1];
            }
            else
            {
              v22 = 0;
            }
            v23 = (float *)&v22[4 * v18];
            *v23 = v16;
            v24 = v23 + 1;
            while (v11 != v17)
            {
              v25 = *((_DWORD *)v11-- - 1);
              *((_DWORD *)v23-- - 1) = v25;
            }
            v49[0] = v23;
            v49[1] = v24;
            v50 = (float *)&v22[4 * v21];
            if (v17)
              operator delete(v17);
            v11 = (float *)v24;
          }
          else
          {
            *v11++ = v16;
          }
          v49[1] = v11;
          v14 += 8;
        }
        while (v14 != v13);
        v15 = (float *)v49[0];
      }
      std::discrete_distribution<int>::param_type::param_type[abi:ne180100]<std::__wrap_iter<float *>>((uint64_t)v48, v15, v11);
      v26 = *(_DWORD *)(v9 + 16);
      v27 = *((_QWORD *)this + 9);
      v9 = *(_QWORD *)(*(_QWORD *)(v27 + 24 * v26)
                     + 8
                     * (int)std::discrete_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((int)v48, RandomGenerator, (double **)v48));
      v28 = ***((_QWORD ***)this + 9);
      if (v9 != v28)
      {
        v10 = *((float *)__p[0] + *(unsigned int *)(v9 + 24));
        v30 = a3[1];
        v29 = (unint64_t)a3[2];
        if ((unint64_t)v30 >= v29)
        {
          v32 = ((char *)v30 - (_BYTE *)*a3) >> 3;
          if ((unint64_t)(v32 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v33 = v29 - (_QWORD)*a3;
          v34 = v33 >> 2;
          if (v33 >> 2 <= (unint64_t)(v32 + 1))
            v34 = v32 + 1;
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
            v35 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v35 = v34;
          if (v35)
            v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a3 + 2), v35);
          else
            v36 = 0;
          v37 = &v36[8 * v32];
          *(_QWORD *)v37 = v9;
          v31 = v37 + 8;
          v39 = (char *)*a3;
          v38 = (char *)a3[1];
          if (v38 != *a3)
          {
            do
            {
              v40 = *((_QWORD *)v38 - 1);
              v38 -= 8;
              *((_QWORD *)v37 - 1) = v40;
              v37 -= 8;
            }
            while (v38 != v39);
            v38 = (char *)*a3;
          }
          *a3 = v37;
          a3[1] = v31;
          a3[2] = &v36[8 * v35];
          if (v38)
            operator delete(v38);
        }
        else
        {
          *v30 = v9;
          v31 = v30 + 1;
        }
        a3[1] = v31;
      }
      if (v48[0])
      {
        v48[1] = v48[0];
        operator delete(v48[0]);
      }
    }
    while (v9 != v28);
    v42 = (unint64_t)*a3;
    v41 = (char *)a3[1];
    if (*a3 != v41)
    {
      v43 = v41 - 8;
      if ((unint64_t)v43 > v42)
      {
        v44 = v42 + 8;
        do
        {
          v45 = *(_QWORD *)(v44 - 8);
          *(_QWORD *)(v44 - 8) = *(_QWORD *)v43;
          *(_QWORD *)v43 = v45;
          v43 -= 8;
          v46 = v44 >= (unint64_t)v43;
          v44 += 8;
        }
        while (!v46);
      }
    }
    if (v49[0])
    {
      v49[1] = v49[0];
      operator delete(v49[0]);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_228461ECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::unigram::Model::PopulateNodes(sentencepiece::unigram::Model *this, sentencepiece::unigram::Lattice *a2)
{
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  _BYTE *v10;
  char *v11;
  unint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  char *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  BOOL v31;
  unint64_t *v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  void *__p;
  _BYTE *v46;

  v4 = *((float *)this + 26);
  v5 = ((*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3) - 1;
  v6 = *((_QWORD *)a2 + 1);
  v7 = *((_QWORD *)a2 + 2);
  std::vector<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type,std::allocator<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>>::vector(&__p, *((int *)this + 23) + 1);
  v42 = v5;
  if ((int)v5 < 1)
    goto LABEL_40;
  v43 = 0;
  v8 = 0;
  v9 = v4 + -10.0;
  v41 = v6 + (int)v7;
  do
  {
    v10 = *(_BYTE **)(*((_QWORD *)a2 + 3) + 8 * v8);
    v11 = (char *)__p;
    v12 = (v46 - (_BYTE *)__p) >> 4;
    v13 = (_DWORD *)*((_QWORD *)this + 5);
    v14 = (*v13 >> 10 << ((*v13 >> 6) & 8));
    if ((v41 - (_QWORD)v10) << 32)
    {
      v15 = 0;
      v16 = 0;
      do
      {
        v17 = v10[v15];
        v18 = v14 ^ v17;
        v19 = v13[v18];
        if ((v19 & 0x800000FF) != (_DWORD)v17)
          break;
        v14 = v18 ^ (v19 >> 10 << ((v19 >> 6) & 8));
        if ((v19 & 0x100) != 0)
        {
          if (v16 < v12)
          {
            v20 = &v11[16 * v16];
            *(_DWORD *)v20 = v13[v14] & 0x7FFFFFFF;
            *((_QWORD *)v20 + 1) = v15 + 1;
          }
          ++v16;
        }
        ++v15;
      }
      while ((_DWORD)v41 - (_DWORD)v10 != v15);
    }
    else
    {
      v21 = *v10;
      if (*v10)
      {
        v16 = 0;
        v22 = 1;
        do
        {
          v23 = v14 ^ v21;
          v24 = v13[v23];
          if ((v24 & 0x800000FF) != v21)
            break;
          v14 = v23 ^ (v24 >> 10 << ((v24 >> 6) & 8));
          if ((v24 & 0x100) != 0)
          {
            if (v16 < v12)
            {
              v25 = &v11[16 * v16];
              *(_DWORD *)v25 = v13[v14] & 0x7FFFFFFF;
              *((_QWORD *)v25 + 1) = v22;
            }
            ++v16;
          }
          v21 = v10[v22++];
        }
        while (v21);
      }
      else
      {
        v16 = 0;
      }
    }
    if (v16 >= v12)
    {
      v44 = 1;
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"unigram_model.cc", 16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"(", 1);
      v27 = (_QWORD *)std::ostream::operator<<();
      v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)") [", 3);
      v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"(num_nodes) < (trie_results.size())", 35);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"] ", 2);
      sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v44);
    }
    if (!v16)
    {
LABEL_38:
      v40 = sentencepiece::unigram::Lattice::Insert(a2, v8, 1);
      *(_DWORD *)(v40 + 28) = *((_DWORD *)this + 22);
      *(float *)(v40 + 32) = v9;
      goto LABEL_39;
    }
    v30 = 0;
    v31 = 0;
    do
    {
      while (1)
      {
        v32 = (unint64_t *)(*((_QWORD *)a2 + 3) + v43);
        v33 = -1;
        do
        {
          v34 = *v32++;
          ++v33;
        }
        while (v34 < (unint64_t)&v10[*((_QWORD *)__p + 2 * v30 + 1)]);
        v35 = *((unsigned int *)__p + 4 * v30);
        if (((*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 128))(*((_QWORD *)this + 1), v35) & 1) != 0)
          break;
        v36 = v8;
        v37 = sentencepiece::unigram::Lattice::Insert(a2, v8, v33);
        *(_DWORD *)(v37 + 28) = v35;
        if ((*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 136))(*((_QWORD *)this + 1), v35))
        {
          v38 = (float)(*((float *)this + 27) * (float)v33) + -0.1;
        }
        else
        {
          v38 = (*(float (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1), v35);
        }
        v39 = v38;
        *(float *)(v37 + 32) = v39;
        if (!v31)
        {
          v31 = *(_DWORD *)(v37 + 20) == 1;
          v8 = v36;
          break;
        }
        ++v30;
        v31 = 1;
        v8 = v36;
        if (v30 == v16)
          goto LABEL_39;
      }
      ++v30;
    }
    while (v30 != v16);
    if (!v31)
      goto LABEL_38;
LABEL_39:
    ++v8;
    v43 += 8;
  }
  while (v8 != v42);
LABEL_40:
  if (__p)
  {
    v46 = __p;
    operator delete(__p);
  }
}

void sub_2284622C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::unigram::Model::LookupPredictive(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, sentencepiece::util::Status *a6@<X8>)
{
  void *v12;
  int v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  void *__p;
  unsigned int *v22;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 16))(&__p);
  v12 = __p;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&__p);
  if (v12)
  {
    sentencepiece::util::Status::Status(a6, (const sentencepiece::util::Status *)(a1 + 96));
  }
  else
  {
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
    v14 = (unsigned int *)__p;
    v15 = v22;
    if (__p != v22)
    {
      do
      {
        v16 = *v14;
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, v16) & 1) == 0
          && ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 152))(a1, v16) & 1) == 0)
        {
          v20[0] = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, v16);
          v20[1] = v17;
          v18 = *(_QWORD *)(a5 + 8);
          if (v18 >= *(_QWORD *)(a5 + 16))
          {
            v19 = std::vector<std::string>::__emplace_back_slow_path<std::string_view>(a5, (uint64_t)v20);
          }
          else
          {
            std::allocator<std::string>::construct[abi:ne180100]<std::string,std::string_view>(a5 + 16, *(_BYTE **)(a5 + 8), (uint64_t)v20);
            v19 = v18 + 24;
            *(_QWORD *)(a5 + 8) = v18 + 24;
          }
          *(_QWORD *)(a5 + 8) = v19;
        }
        v14 += 4;
      }
      while (v14 != v15);
    }
    sentencepiece::util::Status::Status(a6, (const sentencepiece::util::Status *)(a1 + 96));
    if (__p)
    {
      v22 = (unsigned int *)__p;
      operator delete(__p);
    }
  }
}

{
  void *v12;
  int v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  unint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  int v27;
  void *__p;
  unsigned int *v29;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 16))(&__p);
  v12 = __p;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&__p);
  if (v12)
  {
    sentencepiece::util::Status::Status(a6, (const sentencepiece::util::Status *)(a1 + 96));
  }
  else
  {
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
    v14 = (unsigned int *)__p;
    v15 = v29;
    if (__p != v29)
    {
      do
      {
        v16 = *v14;
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, v16) & 1) == 0
          && ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 152))(a1, v16) & 1) == 0)
        {
          v18 = *(_DWORD **)(a5 + 8);
          v17 = *(_QWORD *)(a5 + 16);
          if ((unint64_t)v18 >= v17)
          {
            v20 = *(_DWORD **)a5;
            v21 = ((uint64_t)v18 - *(_QWORD *)a5) >> 2;
            v22 = v21 + 1;
            if ((unint64_t)(v21 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v23 = v17 - (_QWORD)v20;
            if (v23 >> 1 > v22)
              v22 = v23 >> 1;
            if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
              v24 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v24 = v22;
            if (v24)
            {
              v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a5 + 16, v24);
              v20 = *(_DWORD **)a5;
              v18 = *(_DWORD **)(a5 + 8);
            }
            else
            {
              v25 = 0;
            }
            v26 = &v25[4 * v21];
            *(_DWORD *)v26 = v16;
            v19 = v26 + 4;
            while (v18 != v20)
            {
              v27 = *--v18;
              *((_DWORD *)v26 - 1) = v27;
              v26 -= 4;
            }
            *(_QWORD *)a5 = v26;
            *(_QWORD *)(a5 + 8) = v19;
            *(_QWORD *)(a5 + 16) = &v25[4 * v24];
            if (v20)
              operator delete(v20);
          }
          else
          {
            *v18 = v16;
            v19 = v18 + 1;
          }
          *(_QWORD *)(a5 + 8) = v19;
        }
        v14 += 4;
      }
      while (v14 != v15);
    }
    sentencepiece::util::Status::Status(a6, (const sentencepiece::util::Status *)(a1 + 96));
    if (__p)
    {
      v29 = (unsigned int *)__p;
      operator delete(__p);
    }
  }
}

void sub_228462460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::unigram::`anonymous namespace'::LookupPredictiveInternal(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  unint64_t v12;

  if (a4 != -1)
    a5 = a4;
  std::vector<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type,std::allocator<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>>::vector(a6, a5);
  v12 = Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(a1, a2, *a6, (a6[1] - *a6) >> 4, a3, a4);
  std::vector<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type,std::allocator<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>>::resize((uint64_t)a6, v12);
}

void sub_22846250C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_2284626FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

sentencepiece::unigram::Model *sentencepiece::unigram::Model::Model(sentencepiece::unigram::Model *this, const sentencepiece::ModelProto *a2)
{
  sentencepiece::ModelInterface *v4;
  unint64_t v5;
  float v6;
  float v7;

  v4 = sentencepiece::ModelInterface::ModelInterface(this);
  *((_QWORD *)v4 + 13) = 0;
  *((_DWORD *)v4 + 28) = 0;
  *(_QWORD *)v4 = &off_24F0FDA98;
  *((_QWORD *)v4 + 1) = (char *)a2 + 16;
  sentencepiece::ModelInterface::InitializePieces(v4);
  v5 = 0;
  *((_QWORD *)this + 13) = 0x8000007F7FFFFFLL;
  while (v5 < (*(int (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1)))
  {
    if ((*(unsigned int (**)(_QWORD, unint64_t))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1), v5))
    {
      v6 = (*(float (**)(_QWORD, unint64_t))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1), v5);
      if (v6 >= *((float *)this + 26))
        v6 = *((float *)this + 26);
      *((float *)this + 26) = v6;
      v7 = (*(float (**)(_QWORD, unint64_t))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1), v5);
      if (*((float *)this + 27) >= v7)
        v7 = *((float *)this + 27);
      *((float *)this + 27) = v7;
    }
    ++v5;
  }
  return this;
}

void sub_2284627F4(_Unwind_Exception *a1)
{
  sentencepiece::ModelInterface *v1;

  sentencepiece::ModelInterface::~ModelInterface(v1);
  _Unwind_Resume(a1);
}

sentencepiece::ModelInterface *sentencepiece::ModelInterface::ModelInterface(sentencepiece::ModelInterface *this)
{
  *(_QWORD *)this = off_24F0FD488;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = &off_24F0FD588;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = &off_24F0FD588;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 22) = 0;
  sentencepiece::util::Status::Status((_QWORD *)this + 12);
  return this;
}

void sub_228462880(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v5 = v2;
  *(_QWORD *)(v1 + 56) = v5;
  *v4 = 0;
  v4[1] = 0;
  v7 = *(_QWORD *)(v1 + 80);
  if (v7)
  {
    MEMORY[0x22E2B0780](v7, 0x1000C8052888210);
    *(_QWORD *)(v1 + 80) = 0;
  }
  *(_QWORD *)(v1 + 24) = &off_24F0FD588;
  *v3 = 0;
  v3[1] = 0;
  v8 = *(_QWORD *)(v1 + 48);
  if (v8)
  {
    MEMORY[0x22E2B0780](v8, 0x1000C8052888210);
    *(_QWORD *)(v1 + 48) = 0;
  }
  std::unique_ptr<sentencepiece::normalizer::PrefixMatcher>::reset[abi:ne180100]((uint64_t **)(v1 + 16), 0);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::unigram::Model::Model(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  BOOL v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v17;

  v7 = a4 > 7;
  if (a4 <= 7)
    v8 = 0;
  else
    v8 = a4 - 8;
  if (v7)
    v9 = (char *)(a3 + 2);
  else
    v9 = "";
  v10 = sentencepiece::ModelInterface::ModelInterface(a1, a2, v9, v8);
  *(_DWORD *)(v10 + 104) = 0;
  v11 = (_DWORD *)(v10 + 104);
  *(_QWORD *)v10 = &off_24F0FDA98;
  *(_DWORD *)(v10 + 108) = 0;
  v12 = (_DWORD *)(v10 + 108);
  *(_DWORD *)(v10 + 112) = 0;
  v13 = (uint64_t *)(v10 + 96);
  sentencepiece::util::Status::Status((sentencepiece::util::Status *)&v17, (const sentencepiece::util::Status *)(v10 + 96));
  v14 = v17;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
  if (!v14)
  {
    sentencepiece::mmap_util::DecodePrefix<float>(a3, a4, v11, &v17);
    sentencepiece::util::Status::operator=(v13, &v17);
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
    (*(void (**)(_DWORD **__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(&v17, a1);
    v15 = v17;
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
    if (!v15)
    {
      sentencepiece::mmap_util::DecodePrefix<float>(a3 + 1, a4 - 4, v12, &v17);
      sentencepiece::util::Status::operator=(v13, &v17);
      sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
    }
  }
  return a1;
}

void sub_228462A14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  sentencepiece::ModelInterface *v2;
  va_list va;

  va_start(va, a2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)va);
  sentencepiece::ModelInterface::~ModelInterface(v2);
  _Unwind_Resume(a1);
}

_QWORD *sentencepiece::mmap_util::DecodePrefix<float>@<X0>(_DWORD *a1@<X0>, unint64_t a2@<X1>, _DWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v6;
  unsigned int v7;
  _QWORD v8[11];
  char v9;
  uint64_t v10;

  if (a2 <= 3)
  {
    v7 = 13;
    v6 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.h", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"string.size() >= sizeof(T)", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"] ", 2);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v7, (uint64_t)a4);
    v8[0] = *MEMORY[0x24BEDB800];
    *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v8[1] = MEMORY[0x24BEDB848] + 16;
    if (v9 < 0)
      operator delete((void *)v8[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (_QWORD *)MEMORY[0x22E2B0750](&v10);
  }
  else
  {
    *a3 = *a1;
    return sentencepiece::util::Status::Status(a4);
  }
}

void sub_228462B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

void sentencepiece::unigram::Model::~Model(sentencepiece::unigram::Model *this)
{
  sentencepiece::ModelInterface::~ModelInterface(this);
  JUMPOUT(0x22E2B07A4);
}

void sentencepiece::unigram::Model::Encode(sentencepiece::unigram::Model *a1@<X0>, unsigned __int8 *a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  _QWORD *v23;
  _QWORD *v24;
  void (**v25)(sentencepiece::unigram::Lattice *__hidden);
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t (**v32)();
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  if (*((_DWORD *)a1 + 28))
  {
    (*(void (**)(void (***__return_ptr)(sentencepiece::unigram::Lattice *__hidden), sentencepiece::unigram::Model *))(*(_QWORD *)a1 + 16))(&v25, a1);
    if (v25)
    {
      sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v25);
LABEL_4:
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      return;
    }
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v25);
    if (!a3)
      goto LABEL_4;
    v25 = &off_24F0FDA78;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v31 = 0;
    v32 = &off_24F0FDBB0;
    v33 = 0u;
    v34 = 0u;
    v35 = 0;
    v36 = 1024;
    sentencepiece::unigram::Lattice::SetSentence((uint64_t)&v25, a2, a3);
    sentencepiece::unigram::Model::PopulateNodes(a1, (sentencepiece::unigram::Lattice *)&v25);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sentencepiece::unigram::Lattice::Viterbi((sentencepiece::unigram::Lattice *)&v25, (uint64_t)&v23);
    v8 = v23;
    v9 = v24;
    if (v23 != v24)
    {
      v10 = a4 + 2;
      v11 = (char *)a4[1];
      do
      {
        v12 = *v8;
        if ((unint64_t)v11 >= *v10)
        {
          v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v11[-*a4] >> 3);
          v14 = v13 + 1;
          if (v13 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(*v10 - *a4) >> 3) > v14)
            v14 = 0x5555555555555556 * ((uint64_t)(*v10 - *a4) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v10 - *a4) >> 3) >= 0x555555555555555)
            v15 = 0xAAAAAAAAAAAAAAALL;
          else
            v15 = v14;
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string_view,int>>>((uint64_t)(a4 + 2), v15);
          v18 = &v16[24 * v13];
          *(_OWORD *)v18 = *(_OWORD *)v12;
          *((_DWORD *)v18 + 4) = *(_DWORD *)(v12 + 28);
          v20 = (char *)*a4;
          v19 = (char *)a4[1];
          v21 = v18;
          if (v19 != (char *)*a4)
          {
            do
            {
              v22 = *(_OWORD *)(v19 - 24);
              *((_QWORD *)v21 - 1) = *((_QWORD *)v19 - 1);
              *(_OWORD *)(v21 - 24) = v22;
              v21 -= 24;
              v19 -= 24;
            }
            while (v19 != v20);
            v19 = (char *)*a4;
          }
          v11 = v18 + 24;
          *a4 = v21;
          a4[1] = v18 + 24;
          a4[2] = &v16[24 * v17];
          if (v19)
            operator delete(v19);
        }
        else
        {
          *(_OWORD *)v11 = *(_OWORD *)v12;
          *((_DWORD *)v11 + 4) = *(_DWORD *)(v12 + 28);
          v11 += 24;
        }
        a4[1] = v11;
        ++v8;
      }
      while (v8 != v9);
      v8 = v23;
    }
    if (v8)
    {
      v24 = v8;
      operator delete(v8);
    }
    sentencepiece::unigram::Lattice::~Lattice((sentencepiece::unigram::Lattice *)&v25);
  }
  else
  {
    sentencepiece::unigram::Model::EncodeOptimized((uint64_t)a1, (uint64_t)a2, a3, a4);
  }
}

void sub_228462E58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  void *v15;

  v15 = *(void **)v13;
  if (*(_QWORD *)v13)
  {
    *(_QWORD *)(v13 + 8) = v15;
    operator delete(v15);
  }
  sentencepiece::unigram::Lattice::~Lattice((sentencepiece::unigram::Lattice *)&a13);
  _Unwind_Resume(a1);
}

void sentencepiece::unigram::Model::EncodeOptimized(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  float *v13;
  int v14;
  float v15;
  unint64_t v16;
  float v17;
  int v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int *v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  double v29;
  double v30;
  float v31;
  float *v32;
  int *v33;
  int v34;
  float v35;
  char *v37;
  _QWORD *v38;
  unsigned int v39;
  float *v40;
  unint64_t v41;
  unsigned int *v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  char **v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  __int128 v56;
  __int128 *v57;
  char *i;
  __int128 v59;
  int v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  float *v64;
  _QWORD *v65;
  uint64_t v66;
  __int128 v67;

  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)a1 + 16))(&v67);
  if ((_QWORD)v67)
  {
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v67);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v67);
  if (!a3)
    goto LABEL_3;
  v8 = *(float *)(a1 + 104);
  v9 = (a3 << 32) + 0x100000000;
  v66 = a2;
  if (a3 << 32 == 0xFFFFFFFF00000000)
  {
    v12 = 0;
  }
  else
  {
    if (v9 < 0)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v9 >> 32;
    v11 = 3 * v10;
    v12 = (float *)operator new(12 * v10);
    v13 = v12;
    do
    {
      *(_QWORD *)v13 = 0xFFFFFFFFLL;
      v13[2] = NAN;
      v13 += 3;
    }
    while (v13 != &v12[v11]);
    a2 = v66;
  }
  if ((int)a3 <= 0)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    v65 = a4;
    v14 = 0;
    v15 = v8 + -10.0;
    v16 = (int)a3;
    v62 = (char *)(v12 + 5);
    v63 = a3;
    v64 = v12;
    v61 = (int)a3;
    do
    {
      v17 = v12[3 * v14 + 1];
      if ((int)a3 - v14 >= asc_2284E2628[(unint64_t)*(unsigned __int8 *)(a2 + v14) >> 4])
        v18 = asc_2284E2628[(unint64_t)*(unsigned __int8 *)(a2 + v14) >> 4];
      else
        v18 = a3 - v14;
      if (v16 <= v14)
        goto LABEL_31;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = a2 + v14;
      v23 = v16 - v14;
      v24 = (int *)&v62[12 * v14];
      do
      {
        v25 = *(_QWORD *)(a1 + 40);
        v26 = *(unsigned __int8 *)(v22 + v19);
        LODWORD(v21) = (*(_DWORD *)(v25 + 4 * v21) >> 10 << ((*(_DWORD *)(v25 + 4 * v21) >> 6) & 8)) ^ v21 ^ v26;
        v27 = *(_DWORD *)(v25 + 4 * v21);
        if ((v27 & 0x800000FF) != v26)
          break;
        if ((v27 & 0x100) != 0)
        {
          v28 = *(_DWORD *)(v25 + 4 * ((v27 >> 10 << ((v27 >> 6) & 8)) ^ v21)) & 0x7FFFFFFF;
          if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 128))(*(_QWORD *)(a1 + 8), v28) & 1) == 0)
          {
            if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 136))(*(_QWORD *)(a1 + 8), v28))
            {
              v29 = (float)(*(float *)(a1 + 108) * (float)(unint64_t)(v19 + 1)) + -0.1;
            }
            else
            {
              v29 = (*(float (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8), v28);
            }
            v30 = v29 + v17;
            if (*v24 == -1 || v30 > *((float *)v24 - 1))
            {
              v31 = v30;
              *((float *)v24 - 1) = v31;
              *v24 = v14;
              *(v24 - 2) = v28;
            }
            v20 |= v18 - 1 == v19;
          }
        }
        ++v19;
        v24 += 3;
      }
      while (v23 != v19);
      LODWORD(a3) = v63;
      v12 = v64;
      a2 = v66;
      v16 = v61;
      if ((v20 & 1) == 0)
      {
LABEL_31:
        v32 = &v12[3 * v18 + 3 * v14];
        v34 = *((_DWORD *)v32 + 2);
        v33 = (int *)(v32 + 2);
        v35 = v15 + v17;
        if (v34 == -1 || v35 > *((float *)v33 - 1))
        {
          *((float *)v33 - 1) = v35;
          *v33 = v14;
          v12[3 * v18 + 3 * v14] = *(float *)(a1 + 88);
        }
      }
      v14 += v18;
    }
    while (v14 < (int)a3);
    v37 = 0;
    v65[2] = 0;
    v38 = v65 + 2;
    *v65 = 0;
    v65[1] = 0;
    v39 = a3;
    do
    {
      v40 = &v12[3 * v39];
      v42 = (unsigned int *)(v40 + 2);
      v41 = *((int *)v40 + 2);
      if (v63 < v41)
        std::__throw_out_of_range[abi:ne180100]("string_view::substr");
      v43 = v39 - v41;
      v44 = v66 + v41;
      if (v63 - v41 >= v43)
        v45 = v43;
      else
        v45 = v63 - v41;
      if ((unint64_t)v37 >= *v38)
      {
        v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v37[-*v65] >> 3);
        v48 = v47 + 1;
        if (v47 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(*v38 - *v65) >> 3) > v48)
          v48 = 0x5555555555555556 * ((uint64_t)(*v38 - *v65) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v38 - *v65) >> 3) >= 0x555555555555555)
          v49 = 0xAAAAAAAAAAAAAAALL;
        else
          v49 = v48;
        v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string_view,int>>>((uint64_t)v38, v49);
        v52 = &v50[24 * v47];
        *(_QWORD *)v52 = v44;
        *((_QWORD *)v52 + 1) = v45;
        *((float *)v52 + 4) = *v40;
        v46 = (char **)v65;
        v54 = (char *)*v65;
        v53 = (char *)v65[1];
        v55 = v52;
        if (v53 == (char *)*v65)
        {
          v12 = v64;
        }
        else
        {
          v12 = v64;
          do
          {
            v56 = *(_OWORD *)(v53 - 24);
            *((_QWORD *)v55 - 1) = *((_QWORD *)v53 - 1);
            *(_OWORD *)(v55 - 24) = v56;
            v55 -= 24;
            v53 -= 24;
          }
          while (v53 != v54);
          v53 = (char *)*v65;
        }
        v37 = v52 + 24;
        *v65 = v55;
        v65[1] = v52 + 24;
        v65[2] = &v50[24 * v51];
        if (v53)
          operator delete(v53);
      }
      else
      {
        *(_QWORD *)v37 = v44;
        *((_QWORD *)v37 + 1) = v45;
        *((float *)v37 + 4) = *v40;
        v37 += 24;
        v12 = v64;
        v46 = (char **)v65;
      }
      v46[1] = v37;
      v39 = *v42;
    }
    while ((int)*v42 > 0);
    v57 = (__int128 *)*v46;
    if (*v46 != v37)
    {
      for (i = v37 - 24; v57 < (__int128 *)i; i -= 24)
      {
        v67 = *v57;
        v59 = v67;
        *v57 = *(_OWORD *)i;
        *(_OWORD *)i = v59;
        v60 = *((_DWORD *)v57 + 4);
        *((_DWORD *)v57 + 4) = *((_DWORD *)i + 4);
        *((_DWORD *)i + 4) = v60;
        v57 = (__int128 *)((char *)v57 + 24);
      }
    }
  }
  if (v12)
    operator delete(v12);
}

void sub_228463378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  void *v15;

  v15 = *(void **)a14;
  if (*(_QWORD *)a14)
  {
    *(_QWORD *)(a14 + 8) = v15;
    operator delete(v15);
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::unigram::Model::NBestEncode(sentencepiece::unigram::Model *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  char *v10;
  void *v11;
  int v12;
  uint64_t v13;
  char *v14;
  uint64_t i;
  uint64_t *v16;
  uint64_t *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  __int128 v29;
  float *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  void *v35;
  char *v36;
  char *v37;
  __int128 v38;
  void *v39;
  void *__p[13];
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 16))(__p);
  if (__p[0])
  {
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)__p);
LABEL_3:
    memset(__p, 0, 24);
    std::vector<std::pair<std::string_view,int>>::__init_with_size[abi:ne180100]<std::pair<std::string_view,int>*,std::pair<std::string_view,int>*>((char *)__p, 0, 0, 0);
    LODWORD(__p[3]) = 0;
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    *(_QWORD *)&v38 = a5;
    BYTE8(v38) = 0;
    v10 = (char *)operator new(0x20uLL);
    *a5 = (uint64_t)v10;
    a5[1] = (uint64_t)v10;
    a5[2] = (uint64_t)(v10 + 32);
    a5[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float> const*,std::pair<std::vector<std::pair<std::string_view,int>>,float> const*,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>((uint64_t)(a5 + 2), (uint64_t)__p, (uint64_t)&__p[4], (uint64_t)v10);
    v11 = __p[0];
    if (!__p[0])
      return;
    __p[1] = __p[0];
    goto LABEL_5;
  }
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)__p);
  if (!a3)
    goto LABEL_3;
  if (a4 >= 1024)
    v12 = 1024;
  else
    v12 = a4;
  if (v12 <= 1)
    v13 = 1;
  else
    v13 = v12;
  if (v13 > 1)
  {
    __p[0] = &off_24F0FDA78;
    memset(&__p[1], 0, 88);
    __p[12] = &off_24F0FDBB0;
    v41 = 0u;
    v42 = 0u;
    v43 = 0;
    v44 = 1024;
    sentencepiece::unigram::Lattice::SetSentence((uint64_t)__p, a2, a3);
    sentencepiece::unigram::Model::PopulateNodes(a1, (sentencepiece::unigram::Lattice *)__p);
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    v34 = a5;
    sentencepiece::unigram::Lattice::NBest((sentencepiece::unigram::Lattice *)__p, 0.0, v13, 0, (uint64_t *)&v38);
    v33 = *((_QWORD *)&v38 + 1);
    for (i = v38; i != v33; i += 32)
    {
      v35 = 0;
      v36 = 0;
      v37 = 0;
      v16 = *(uint64_t **)i;
      v17 = *(uint64_t **)(i + 8);
      if (*(uint64_t **)i != v17)
      {
        v18 = 0;
        do
        {
          v19 = *v16;
          if (v18 >= v37)
          {
            v20 = 0xAAAAAAAAAAAAAAABLL * ((v18 - (_BYTE *)v35) >> 3);
            v21 = v20 + 1;
            if (v20 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * ((v37 - (_BYTE *)v35) >> 3) > v21)
              v21 = 0x5555555555555556 * ((v37 - (_BYTE *)v35) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((v37 - (_BYTE *)v35) >> 3) >= 0x555555555555555)
              v22 = 0xAAAAAAAAAAAAAAALL;
            else
              v22 = v21;
            v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string_view,int>>>((uint64_t)&v37, v22);
            v25 = &v23[24 * v20];
            *(_OWORD *)v25 = *(_OWORD *)v19;
            *((_DWORD *)v25 + 4) = *(_DWORD *)(v19 + 28);
            v27 = (char *)v35;
            v26 = v36;
            v28 = v25;
            if (v36 != v35)
            {
              do
              {
                v29 = *(_OWORD *)(v26 - 24);
                *((_QWORD *)v28 - 1) = *((_QWORD *)v26 - 1);
                *(_OWORD *)(v28 - 24) = v29;
                v28 -= 24;
                v26 -= 24;
              }
              while (v26 != v27);
              v26 = (char *)v35;
            }
            v18 = v25 + 24;
            v35 = v28;
            v36 = v25 + 24;
            v37 = &v23[24 * v24];
            if (v26)
              operator delete(v26);
          }
          else
          {
            *(_OWORD *)v18 = *(_OWORD *)v19;
            *((_DWORD *)v18 + 4) = *(_DWORD *)(v19 + 28);
            v18 += 24;
          }
          v36 = v18;
          ++v16;
        }
        while (v16 != v17);
      }
      v30 = (float *)(i + 24);
      v31 = v34[1];
      if (v31 >= v34[2])
      {
        v32 = std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__emplace_back_slow_path<std::vector<std::pair<std::string_view,int>>&,float const&>(v34, (__int128 **)&v35, v30);
      }
      else
      {
        std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__construct_one_at_end[abi:ne180100]<std::vector<std::pair<std::string_view,int>>&,float const&>((uint64_t)v34, (__int128 **)&v35, v30);
        v32 = v31 + 32;
      }
      v34[1] = v32;
      if (v35)
      {
        v36 = (char *)v35;
        operator delete(v35);
      }
    }
    v35 = &v38;
    std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
    sentencepiece::unigram::Lattice::~Lattice((sentencepiece::unigram::Lattice *)__p);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, sentencepiece::unigram::Model *, unsigned __int8 *, uint64_t))(*(_QWORD *)a1 + 40))(&v38, a1, a2, a3);
    *(_OWORD *)__p = v38;
    __p[2] = v39;
    v39 = 0;
    v38 = 0uLL;
    LODWORD(__p[3]) = 0;
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    v35 = a5;
    LOBYTE(v36) = 0;
    v14 = (char *)operator new(0x20uLL);
    *a5 = (uint64_t)v14;
    a5[1] = (uint64_t)v14;
    a5[2] = (uint64_t)(v14 + 32);
    a5[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float> const*,std::pair<std::vector<std::pair<std::string_view,int>>,float> const*,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>((uint64_t)(a5 + 2), (uint64_t)__p, (uint64_t)&__p[4], (uint64_t)v14);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v11 = (void *)v38;
    if ((_QWORD)v38)
    {
      *((_QWORD *)&v38 + 1) = v38;
LABEL_5:
      operator delete(v11);
    }
  }
}

void sub_2284637C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  a12 = a11;
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  sentencepiece::unigram::Lattice::~Lattice((sentencepiece::unigram::Lattice *)&__p);
  _Unwind_Resume(a1);
}

void sentencepiece::unigram::Model::SampleEncode(sentencepiece::unigram::Model *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>, float a5@<S0>)
{
  _QWORD *v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  _QWORD *v25;
  _QWORD *v26;
  void (**v27)(sentencepiece::unigram::Lattice *__hidden);
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t (**v34)();
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;

  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 16))(&v27);
  if (v27)
  {
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v27);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v27);
  if (!a3)
    goto LABEL_3;
  v27 = &off_24F0FDA78;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0;
  v34 = &off_24F0FDBB0;
  v35 = 0u;
  v36 = 0u;
  v37 = 0;
  v38 = 1024;
  sentencepiece::unigram::Lattice::SetSentence((uint64_t)&v27, a2, a3);
  sentencepiece::unigram::Model::PopulateNodes(a1, (sentencepiece::unigram::Lattice *)&v27);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sentencepiece::unigram::Lattice::Sample((sentencepiece::unigram::Lattice *)&v27, a5, (void **)&v25);
  v10 = v25;
  v11 = v26;
  if (v25 != v26)
  {
    v12 = 0;
    v13 = a4 + 2;
    do
    {
      v14 = *v10;
      if ((unint64_t)v12 >= *v13)
      {
        v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v12[-*a4] >> 3);
        v16 = v15 + 1;
        if (v15 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(*v13 - *a4) >> 3) > v16)
          v16 = 0x5555555555555556 * ((uint64_t)(*v13 - *a4) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v13 - *a4) >> 3) >= 0x555555555555555)
          v17 = 0xAAAAAAAAAAAAAAALL;
        else
          v17 = v16;
        v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string_view,int>>>((uint64_t)(a4 + 2), v17);
        v20 = &v18[24 * v15];
        *(_OWORD *)v20 = *(_OWORD *)v14;
        *((_DWORD *)v20 + 4) = *(_DWORD *)(v14 + 28);
        v22 = (char *)*a4;
        v21 = (char *)a4[1];
        v23 = v20;
        if (v21 != (char *)*a4)
        {
          do
          {
            v24 = *(_OWORD *)(v21 - 24);
            *((_QWORD *)v23 - 1) = *((_QWORD *)v21 - 1);
            *(_OWORD *)(v23 - 24) = v24;
            v23 -= 24;
            v21 -= 24;
          }
          while (v21 != v22);
          v21 = (char *)*a4;
        }
        v12 = v20 + 24;
        *a4 = v23;
        a4[1] = v20 + 24;
        a4[2] = &v18[24 * v19];
        if (v21)
          operator delete(v21);
      }
      else
      {
        *(_OWORD *)v12 = *(_OWORD *)v14;
        *((_DWORD *)v12 + 4) = *(_DWORD *)(v14 + 28);
        v12 += 24;
      }
      a4[1] = v12;
      ++v10;
    }
    while (v10 != v11);
    v10 = v25;
  }
  if (v10)
  {
    v26 = v10;
    operator delete(v10);
  }
  sentencepiece::unigram::Lattice::~Lattice((sentencepiece::unigram::Lattice *)&v27);
}

void sub_228463AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  sentencepiece::unigram::Lattice::~Lattice((sentencepiece::unigram::Lattice *)&a13);
  _Unwind_Resume(a1);
}

void sentencepiece::unigram::Model::SampleEncodeAndScore(sentencepiece::unigram::Model *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, char a5@<W4>, int a6@<W5>, uint64_t *j@<X8>, float a8@<S0>)
{
  sentencepiece::unigram::Model *v14;
  sentencepiece::logging *v16;
  float v17;
  uint64_t *v18;
  uint64_t *v19;
  __int128 *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  __int128 *v28;
  __int128 *v29;
  __int128 *v30;
  __int128 v31;
  char *v32;
  float v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  __int128 *v41;
  __int128 *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  __int128 *v49;
  char *v50;
  uint64_t v51;
  double v52;
  double v53;
  float v54;
  __int128 *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  __int128 *v63;
  __int128 *v64;
  __int128 *v65;
  __int128 v66;
  char *v67;
  uint64_t v68;
  __int128 *v69;
  __int128 *v70;
  __int128 *v71;
  void *v72;
  void *v73;
  void *v74;
  float v75;
  __int128 *i;
  uint64_t *v77;
  uint64_t *v78;
  char *v79;
  float v80;
  uint64_t v81;
  float v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  __int128 v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  float v97;
  double v98;
  long double v99;
  long double v100;
  double v101;
  float v102;
  uint64_t *v103;
  int v104;
  int v105;
  sentencepiece::unigram::Model *v106;
  sentencepiece::unigram::Model *v107;
  unsigned __int8 *v108;
  unsigned __int8 *v109;
  uint64_t v110;
  uint64_t v111;
  __int128 *v112;
  float v113;
  void *__p[13];
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  double v119;
  double v120;
  __int128 *v121;
  __int128 *v122;
  char *v123;
  void *v124[3];
  void **v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  uint64_t (**v132)();
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  unint64_t v139;

  v14 = a1;
  (*(void (**)(void ***__return_ptr))(*(_QWORD *)a1 + 16))(&v125);
  if (v125)
  {
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v125);
LABEL_3:
    *j = 0;
    j[1] = 0;
    j[2] = 0;
    return;
  }
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v125);
  if (!a3)
    goto LABEL_3;
  v137 = 0;
  v138 = 0;
  v139 = 0;
  v125 = (void **)&off_24F0FDA78;
  v126 = 0u;
  v127 = 0u;
  v128 = 0u;
  v129 = 0u;
  v130 = 0u;
  v131 = 0;
  v132 = &off_24F0FDBB0;
  v133 = 0u;
  v134 = 0u;
  v135 = 0;
  v136 = 1024;
  sentencepiece::unigram::Lattice::SetSentence((uint64_t)&v125, a2, a3);
  sentencepiece::unigram::Model::PopulateNodes(v14, (sentencepiece::unigram::Lattice *)&v125);
  sentencepiece::unigram::Lattice::ForwardAlgorithm((sentencepiece::unigram::Lattice *)&v125, a8, (uint64_t *)v124);
  v17 = *((float *)v124[0]
        + *(unsigned int *)(**(_QWORD **)(*((_QWORD *)&v128 + 1)
                                        + 24
                                        * ((((*((_QWORD *)&v127 + 1) - (_QWORD)v127) >> 3) - 1) & ~((int)(((*((_QWORD *)&v127 + 1) - (_QWORD)v127) >> 3) - 1) >> 31)))
                          + 24));
  if (a6)
  {
    if ((a5 & 1) == 0)
    {
      if ((int)sentencepiece::logging::GetMinLogLevel(v16) <= 2)
      {
        LOBYTE(__p[0]) = 0;
        v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"unigram_model.cc", 16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"(", 1);
        v36 = (_QWORD *)std::ostream::operator<<();
        v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)") ", 2);
        v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"LOG(", 4);
        v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"ERROR", 5);
        v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)") ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"include_best not supported for wor false", 40);
        sentencepiece::error::Die::~Die((sentencepiece::error::Die *)__p);
      }
      goto LABEL_113;
    }
    v104 = a4;
    v105 = a6;
    v106 = v14;
    v108 = a2;
    v110 = a3;
    v121 = 0;
    v122 = 0;
    v123 = 0;
    sentencepiece::unigram::Lattice::Viterbi((sentencepiece::unigram::Lattice *)&v125, (uint64_t)__p);
    v18 = (uint64_t *)__p[0];
    v19 = (uint64_t *)__p[1];
    if (__p[0] != __p[1])
    {
      v20 = v122;
      do
      {
        v21 = *v18;
        if (v20 >= (__int128 *)v123)
        {
          v22 = 0xAAAAAAAAAAAAAAABLL * (((char *)v20 - (char *)v121) >> 3);
          v23 = v22 + 1;
          if (v22 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((v123 - (char *)v121) >> 3) > v23)
            v23 = 0x5555555555555556 * ((v123 - (char *)v121) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((v123 - (char *)v121) >> 3) >= 0x555555555555555)
            v24 = 0xAAAAAAAAAAAAAAALL;
          else
            v24 = v23;
          v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string_view,int>>>((uint64_t)&v123, v24);
          v27 = &v25[24 * v22];
          *(_OWORD *)v27 = *(_OWORD *)v21;
          *((_DWORD *)v27 + 4) = *(_DWORD *)(v21 + 28);
          v29 = v121;
          v28 = v122;
          v30 = (__int128 *)v27;
          if (v122 != v121)
          {
            do
            {
              v31 = *(__int128 *)((char *)v28 - 24);
              *((_QWORD *)v30 - 1) = *((_QWORD *)v28 - 1);
              *(__int128 *)((char *)v30 - 24) = v31;
              v30 = (__int128 *)((char *)v30 - 24);
              v28 = (__int128 *)((char *)v28 - 24);
            }
            while (v28 != v29);
            v28 = v121;
          }
          v20 = (__int128 *)(v27 + 24);
          v121 = v30;
          v122 = (__int128 *)(v27 + 24);
          v123 = &v25[24 * v26];
          if (v28)
            operator delete(v28);
        }
        else
        {
          *v20 = *(_OWORD *)v21;
          *((_DWORD *)v20 + 4) = *(_DWORD *)(v21 + 28);
          v20 = (__int128 *)((char *)v20 + 24);
        }
        v122 = v20;
        ++v18;
      }
      while (v18 != v19);
    }
    v119 = 0.0;
    v32 = v138;
    if ((unint64_t)v138 >= v139)
    {
      v34 = std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__emplace_back_slow_path<std::vector<std::pair<std::string_view,int>>&,double>(&v137, &v121, &v119);
      a2 = v108;
      a3 = v110;
    }
    else
    {
      *(_QWORD *)v138 = 0;
      *((_QWORD *)v32 + 1) = 0;
      *((_QWORD *)v32 + 2) = 0;
      std::vector<std::pair<std::string_view,int>>::__init_with_size[abi:ne180100]<std::pair<std::string_view,int>*,std::pair<std::string_view,int>*>(v32, v121, v122, 0xAAAAAAAAAAAAAAABLL * (((char *)v122 - (char *)v121) >> 3));
      a2 = v108;
      a3 = v110;
      v33 = v119;
      *((float *)v32 + 6) = v33;
      v34 = (uint64_t)(v32 + 32);
    }
    a4 = v104;
    v14 = v106;
    a6 = v105;
    v138 = (char *)v34;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v121)
    {
      v122 = v121;
      operator delete(v121);
    }
  }
  if ((a5 & 1) != 0)
  {
    sentencepiece::unigram::Lattice::NBest((sentencepiece::unigram::Lattice *)&v125, a8, a4 + 1, 1, (uint64_t *)&v121);
    v103 = j;
    if (a6)
    {
      std::vector<std::vector<sentencepiece::unigram::Lattice::Node *>>::vector(&v119, ((char *)v122 - (char *)v121) >> 5);
      v42 = v121;
      v41 = v122;
      if (v122 != v121)
      {
        v43 = 0;
        v44 = 0;
        v45 = 0;
        do
        {
          if (&v42[v43] != (__int128 *)(*(_QWORD *)&v119 + v44))
          {
            std::vector<sentencepiece::unigram::Lattice::Node *>::__assign_with_size[abi:ne180100]<sentencepiece::unigram::Lattice::Node **,sentencepiece::unigram::Lattice::Node **>((char *)(*(_QWORD *)&v119 + v44), *(char **)&v42[v43], *((_QWORD *)&v42[v43] + 1), (uint64_t)(*((_QWORD *)&v42[v43] + 1) - *(_QWORD *)&v42[v43]) >> 3);
            v42 = v121;
            v41 = v122;
          }
          ++v45;
          v44 += 24;
          v43 += 2;
        }
        while (v45 < ((char *)v41 - (char *)v42) >> 5);
      }
      sentencepiece::unigram::Lattice::Viterbi((sentencepiece::unigram::Lattice *)&v125, (uint64_t)__p);
      v46 = std::__find_impl[abi:ne180100]<std::vector<sentencepiece::unigram::Lattice::Node *> *,std::vector<sentencepiece::unigram::Lattice::Node *> *,std::vector<sentencepiece::unigram::Lattice::Node *>,std::__identity>(*(uint64_t *)&v119, *(uint64_t *)&v120, (uint64_t)__p);
      v47 = (int)(-1431655765 * ((unint64_t)(v46 - *(_QWORD *)&v119) >> 3));
      if (v47 == ((char *)v122 - (char *)v121) >> 5)
      {
        v49 = v122 - 2;
        v48 = (void *)*((_QWORD *)v122 - 4);
        if (v48)
        {
          *((_QWORD *)v122 - 3) = v48;
          operator delete(v48);
        }
      }
      else
      {
        std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float> *,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float> *,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float> *,0>((__n128 *)&v121[2 * v47 + 2], (__n128 *)v122, (uint64_t)&v121[2 * v47]);
        v49 = v69;
        v70 = v122;
        if (v122 != v69)
        {
          v71 = v122;
          do
          {
            v73 = (void *)*((_QWORD *)v71 - 4);
            v71 -= 2;
            v72 = v73;
            if (v73)
            {
              *((_QWORD *)v70 - 3) = v72;
              operator delete(v72);
            }
            v70 = v71;
          }
          while (v71 != v49);
        }
      }
      v122 = v49;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      __p[0] = &v119;
      std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    }
    v74 = (void *)*((_QWORD *)v122 - 4);
    v112 = v122 - 2;
    v75 = *((float *)v122 - 2);
    if (v74)
    {
      *((_QWORD *)v122 - 3) = v74;
      operator delete(v74);
    }
    v122 = v112;
    for (i = v121; i != v112; i += 2)
    {
      memset(__p, 0, 24);
      v77 = *(uint64_t **)i;
      v78 = (uint64_t *)*((_QWORD *)i + 1);
      if (*(uint64_t **)i == v78)
      {
        v80 = 0.0;
      }
      else
      {
        v79 = 0;
        v80 = 0.0;
        do
        {
          v81 = *v77;
          v82 = *(float *)(*v77 + 32);
          if (v79 >= __p[2])
          {
            v83 = 0xAAAAAAAAAAAAAAABLL * ((v79 - (char *)__p[0]) >> 3);
            v84 = v83 + 1;
            if (v83 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * (((char *)__p[2] - (char *)__p[0]) >> 3) > v84)
              v84 = 0x5555555555555556 * (((char *)__p[2] - (char *)__p[0]) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * (((char *)__p[2] - (char *)__p[0]) >> 3) >= 0x555555555555555)
              v85 = 0xAAAAAAAAAAAAAAALL;
            else
              v85 = v84;
            v86 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string_view,int>>>((uint64_t)&__p[2], v85);
            v88 = &v86[24 * v83];
            *(_OWORD *)v88 = *(_OWORD *)v81;
            *((_DWORD *)v88 + 4) = *(_DWORD *)(v81 + 28);
            v90 = (char *)__p[0];
            v89 = (char *)__p[1];
            v91 = v88;
            if (__p[1] != __p[0])
            {
              do
              {
                v92 = *(_OWORD *)(v89 - 24);
                *((_QWORD *)v91 - 1) = *((_QWORD *)v89 - 1);
                *(_OWORD *)(v91 - 24) = v92;
                v91 -= 24;
                v89 -= 24;
              }
              while (v89 != v90);
              v89 = (char *)__p[0];
            }
            v79 = v88 + 24;
            __p[0] = v91;
            __p[1] = v88 + 24;
            __p[2] = &v86[24 * v87];
            if (v89)
              operator delete(v89);
          }
          else
          {
            *(_OWORD *)v79 = *(_OWORD *)v81;
            *((_DWORD *)v79 + 4) = *(_DWORD *)(v81 + 28);
            v79 += 24;
          }
          __p[1] = v79;
          v80 = v80 + (float)(a8 * v82);
          ++v77;
        }
        while (v77 != v78);
      }
      *(float *)&v119 = v80 - v17;
      v93 = v138;
      if ((unint64_t)v138 >= v139)
      {
        v94 = std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__emplace_back_slow_path<std::vector<std::pair<std::string_view,int>>&,float>(&v137, (__int128 **)__p, &v119);
      }
      else
      {
        *(_QWORD *)v138 = 0;
        *((_QWORD *)v93 + 1) = 0;
        *((_QWORD *)v93 + 2) = 0;
        std::vector<std::pair<std::string_view,int>>::__init_with_size[abi:ne180100]<std::pair<std::string_view,int>*,std::pair<std::string_view,int>*>(v93, (__int128 *)__p[0], (__int128 *)__p[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3));
        *((_DWORD *)v93 + 6) = LODWORD(v119);
        v94 = (uint64_t)(v93 + 32);
      }
      v138 = (char *)v94;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    v95 = v137;
    v96 = v138;
    for (j = v103; (char *)v95 != v96; v95 += 32)
    {
      v97 = *(float *)(v95 + 24);
      if (v97 != 0.0)
      {
        v98 = v97 - v75;
        v99 = exp(v98);
        if (v98 <= -10.0)
        {
          v101 = v98 + v99 * -0.5 + v99 * v99 / 24.0 + pow(v99, 4.0) / -2880.0;
        }
        else
        {
          v100 = expm1(-v99);
          v101 = log(-v100);
        }
        v102 = v101;
        *(float *)(v95 + 24) = v102;
      }
    }
    __p[0] = &v121;
    std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    v51 = v137;
    v50 = v138;
  }
  else
  {
    v51 = v137;
    v50 = v138;
    if (a4 > (unint64_t)((uint64_t)&v138[-v137] >> 5))
    {
      v109 = a2;
      v111 = a3;
      v107 = v14;
      do
      {
        memset(&__p[1], 0, 88);
        __p[0] = &off_24F0FDA78;
        __p[12] = &off_24F0FDBB0;
        v115 = 0u;
        v116 = 0u;
        v117 = 0;
        v118 = 1024;
        sentencepiece::unigram::Lattice::SetSentence((uint64_t)__p, a2, a3);
        sentencepiece::unigram::Model::PopulateNodes(v14, (sentencepiece::unigram::Lattice *)__p);
        v121 = 0;
        v122 = 0;
        v123 = 0;
        sentencepiece::unigram::Lattice::Sample((sentencepiece::unigram::Lattice *)__p, a8, (void **)&v119);
        v53 = v119;
        v52 = v120;
        v54 = 0.0;
        if (*(_QWORD *)&v119 != *(_QWORD *)&v120)
        {
          v55 = v122;
          do
          {
            v56 = **(_QWORD **)&v53;
            if (v55 >= (__int128 *)v123)
            {
              v57 = 0xAAAAAAAAAAAAAAABLL * (((char *)v55 - (char *)v121) >> 3);
              v58 = v57 + 1;
              if (v57 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * ((v123 - (char *)v121) >> 3) > v58)
                v58 = 0x5555555555555556 * ((v123 - (char *)v121) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((v123 - (char *)v121) >> 3) >= 0x555555555555555)
                v59 = 0xAAAAAAAAAAAAAAALL;
              else
                v59 = v58;
              v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string_view,int>>>((uint64_t)&v123, v59);
              v62 = &v60[24 * v57];
              *(_OWORD *)v62 = *(_OWORD *)v56;
              *((_DWORD *)v62 + 4) = *(_DWORD *)(v56 + 28);
              v64 = v121;
              v63 = v122;
              v65 = (__int128 *)v62;
              if (v122 != v121)
              {
                do
                {
                  v66 = *(__int128 *)((char *)v63 - 24);
                  *((_QWORD *)v65 - 1) = *((_QWORD *)v63 - 1);
                  *(__int128 *)((char *)v65 - 24) = v66;
                  v65 = (__int128 *)((char *)v65 - 24);
                  v63 = (__int128 *)((char *)v63 - 24);
                }
                while (v63 != v64);
                v63 = v121;
              }
              v55 = (__int128 *)(v62 + 24);
              v121 = v65;
              v122 = (__int128 *)(v62 + 24);
              v123 = &v60[24 * v61];
              if (v63)
                operator delete(v63);
            }
            else
            {
              *v55 = *(_OWORD *)v56;
              *((_DWORD *)v55 + 4) = *(_DWORD *)(v56 + 28);
              v55 = (__int128 *)((char *)v55 + 24);
            }
            v122 = v55;
            v54 = v54 + (float)(a8 * *(float *)(v56 + 32));
            *(_QWORD *)&v53 += 8;
          }
          while (*(_QWORD *)&v53 != *(_QWORD *)&v52);
        }
        v113 = v54 - v17;
        v67 = v138;
        if ((unint64_t)v138 >= v139)
        {
          v68 = std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__emplace_back_slow_path<std::vector<std::pair<std::string_view,int>>&,float>(&v137, &v121, &v113);
        }
        else
        {
          *(_QWORD *)v138 = 0;
          *((_QWORD *)v67 + 1) = 0;
          *((_QWORD *)v67 + 2) = 0;
          std::vector<std::pair<std::string_view,int>>::__init_with_size[abi:ne180100]<std::pair<std::string_view,int>*,std::pair<std::string_view,int>*>(v67, v121, v122, 0xAAAAAAAAAAAAAAABLL * (((char *)v122 - (char *)v121) >> 3));
          *((float *)v67 + 6) = v113;
          v68 = (uint64_t)(v67 + 32);
        }
        a2 = v109;
        a3 = v111;
        v14 = v107;
        v138 = (char *)v68;
        if (v119 != 0.0)
        {
          v120 = v119;
          operator delete(*(void **)&v119);
        }
        if (v121)
        {
          v122 = v121;
          operator delete(v121);
        }
        sentencepiece::unigram::Lattice::~Lattice((sentencepiece::unigram::Lattice *)__p);
        v51 = v137;
        v50 = v138;
      }
      while (a4 > (unint64_t)((uint64_t)&v138[-v137] >> 5));
    }
  }
  *j = v51;
  j[1] = (uint64_t)v50;
  j[2] = v139;
  j = &v137;
LABEL_113:
  *j = 0;
  j[1] = 0;
  j[2] = 0;
  if (v124[0])
  {
    v124[1] = v124[0];
    operator delete(v124[0]);
  }
  sentencepiece::unigram::Lattice::~Lattice((sentencepiece::unigram::Lattice *)&v125);
  v125 = (void **)&v137;
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100](&v125);
}

