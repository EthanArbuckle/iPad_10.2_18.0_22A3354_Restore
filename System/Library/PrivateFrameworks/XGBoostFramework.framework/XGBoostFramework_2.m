const char *xgboost::tree::HistMaker::Name(xgboost::tree::HistMaker *this)
{
  return "grow_histmaker";
}

void xgboost::tree::HistMaker::InitWorkSet(int a1, int a2, uint64_t a3, std::vector<unsigned int> *this)
{
  std::vector<unsigned int>::pointer begin;
  unsigned int *end;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  std::vector<unsigned int>::resize(this, *(unsigned int *)(a3 + 24));
  begin = this->__begin_;
  end = this->__end_;
  v7 = (char *)end - (char *)this->__begin_;
  if (end != this->__begin_)
  {
    v8 = 0;
    v9 = v7 >> 2;
    if (v9 <= 1)
      v9 = 1;
    do
    {
      begin[v8] = v8;
      ++v8;
    }
    while (v9 != v8);
  }
}

void rabit::SerializeReducerFuncImpl<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (**v9[3])(_QWORD, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t (**v11[4])(_QWORD, uint64_t, uint64_t);
  __int128 v12;
  void *__p[2];
  uint64_t v14;
  __int128 v15;
  void *v16[2];
  uint64_t v17;

  if (a3 >= 1)
  {
    v6 = 0;
    v7 = *a4;
    v8 = a3;
    do
    {
      v17 = 0;
      v15 = 0u;
      *(_OWORD *)v16 = 0u;
      v14 = 0;
      v12 = 0u;
      *(_OWORD *)__p = 0u;
      v11[0] = (uint64_t (**)(_QWORD, uint64_t, uint64_t))&unk_24E6B8500;
      v11[1] = (uint64_t (**)(_QWORD, uint64_t, uint64_t))(a1 + v6);
      v11[2] = (uint64_t (**)(_QWORD, uint64_t, uint64_t))v7;
      v11[3] = 0;
      v9[0] = (uint64_t (**)(_QWORD, uint64_t, uint64_t))&unk_24E6B8500;
      v9[1] = (uint64_t (**)(_QWORD, uint64_t, uint64_t))(a2 + v6);
      v9[2] = (uint64_t (**)(_QWORD, uint64_t, uint64_t))v7;
      v10 = 0;
      xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer::Load<rabit::utils::MemoryFixSizeBuffer>((uint64_t *)&v15, v11);
      xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer::Load<rabit::utils::MemoryFixSizeBuffer>((uint64_t *)&v12, v9);
      xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer::Reduce((uint64_t)&v12, (uint64_t)&v15, v7);
      v10 = 0;
      v9[0][1](v9, (uint64_t)&v12 + 8, 8);
      if (*((_QWORD *)&v12 + 1))
        v9[0][1](v9, v12, 16 * *((_QWORD *)&v12 + 1));
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v16[0])
      {
        v16[1] = v16[0];
        operator delete(v16[0]);
      }
      v6 += v7;
      --v8;
    }
    while (v8);
  }
}

void sub_220ECAFDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  if (__p)
    operator delete(__p);
  if (a25)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

void xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer::Load<rabit::utils::MemoryFixSizeBuffer>(uint64_t *a1, uint64_t (***a2)(_QWORD, uint64_t, uint64_t))
{
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v26 = (**a2)(a2, (uint64_t)(a1 + 1), 8);
  if (v26 != 8)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v27);
    if (v27)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v26);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/../common/quantile.h");
      v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v26);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: ", 14);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"fi.Read(&this->size, sizeof(this->size)) == sizeof(this->size)", 62);
      v8 = *(char *)(v27 + 23);
      v9 = v8 >= 0 ? v27 : *(_QWORD *)v27;
      v10 = v8 >= 0 ? *(unsigned __int8 *)(v27 + 23) : *(_QWORD *)(v27 + 8);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v26);
      v12 = v27;
      v27 = 0;
      if (v12)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v27, v12);
    }
  }
  v13 = a1[1];
  if (v13 > (a1[3] - a1[2]) >> 4)
  {
    std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::resize((uint64_t)(a1 + 2), v13);
    v13 = a1[1];
    if (a1[3] == a1[2])
      v14 = 0;
    else
      v14 = a1[2];
    *a1 = v14;
  }
  if (v13)
  {
    v15 = (**a2)(a2, *a1, 16 * v13);
    v25 = 16 * a1[1];
    v26 = v15;
    if (v15 != v25)
    {
      dmlc::LogCheckFormat<unsigned long,unsigned long>(&v27);
      if (v27)
      {
        v16 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v26);
        dmlc::LogMessageFatal::Entry::Init(v16, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/../common/quantile.h");
        v17 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v26);
        v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Check failed: ", 14);
        v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"fi.Read(this->data, this->size * sizeof(Entry)) == this->size * sizeof(Entry)", 77);
        v20 = *(char *)(v27 + 23);
        if (v20 >= 0)
          v21 = v27;
        else
          v21 = *(_QWORD *)v27;
        if (v20 >= 0)
          v22 = *(unsigned __int8 *)(v27 + 23);
        else
          v22 = *(_QWORD *)(v27 + 8);
        v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v21, v22);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v26);
        v24 = v27;
        v27 = 0;
        if (v24)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v27, v24);
      }
    }
  }
}

void sub_220ECB210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

void xgboost::tree::BaseMaker::GetSplitSet(int *a1, int *a2, uint64_t a3, std::vector<unsigned int> *a4)
{
  std::vector<unsigned int>::pointer begin;
  int *v8;
  std::__compressed_pair<unsigned int *> *p_end_cap;
  uint64_t v10;
  int v11;
  unsigned int *v12;
  std::vector<unsigned int>::pointer v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  int v21;
  std::vector<unsigned int>::pointer v22;
  std::vector<unsigned int>::pointer end;
  std::vector<unsigned int>::pointer v24;
  unsigned int v25;
  int v26;
  std::vector<unsigned int>::pointer v27;
  unsigned int v28;

  begin = a4->__begin_;
  a4->__end_ = a4->__begin_;
  if (a1 != a2)
  {
    v8 = a1;
    p_end_cap = &a4->__end_cap_;
    do
    {
      v10 = *(_QWORD *)(a3 + 160);
      if (*(_DWORD *)(v10 + 20 * *v8 + 4) != -1)
      {
        v11 = *(_DWORD *)(v10 + 20 * *v8 + 12) & 0x7FFFFFFF;
        if (begin >= p_end_cap->__value_)
        {
          v13 = a4->__begin_;
          v14 = begin - a4->__begin_;
          v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 62)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v16 = (char *)p_end_cap->__value_ - (char *)v13;
          if (v16 >> 1 > v15)
            v15 = v16 >> 1;
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
            v17 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v17 = v15;
          if (v17)
          {
            v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&a4->__end_cap_, v17);
            v19 = v18;
            v13 = a4->__begin_;
            begin = a4->__end_;
          }
          else
          {
            v19 = 0;
          }
          v20 = (int *)(v17 + 4 * v14);
          *v20 = v11;
          v12 = (unsigned int *)(v20 + 1);
          while (begin != v13)
          {
            v21 = *--begin;
            *--v20 = v21;
          }
          a4->__begin_ = (std::vector<unsigned int>::pointer)v20;
          a4->__end_ = v12;
          a4->__end_cap_.__value_ = (unsigned int *)(v17 + 4 * v19);
          if (v13)
            operator delete(v13);
        }
        else
        {
          *begin = v11;
          v12 = begin + 1;
        }
        a4->__end_ = v12;
        begin = v12;
      }
      ++v8;
    }
    while (v8 != a2);
  }
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  v22 = a4->__begin_;
  end = a4->__end_;
  if (a4->__begin_ == end)
  {
    end = a4->__begin_;
  }
  else
  {
    v24 = v22 + 1;
    while (v24 != end)
    {
      v25 = *(v24 - 1);
      v26 = *v24++;
      if (v25 == v26)
      {
        v27 = v24 - 2;
        while (v24 != end)
        {
          v28 = v25;
          v25 = *v24;
          if (v28 != *v24)
          {
            v27[1] = v25;
            ++v27;
          }
          ++v24;
        }
        end = v27 + 1;
        break;
      }
    }
  }
  std::vector<unsigned int>::resize(a4, end - v22);
}

void std::vector<xgboost::tree::SplitEntryContainer<xgboost::tree::GradStats>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 8);
        if (v6)
        {
          *((_QWORD *)v4 - 7) = v6;
          operator delete(v6);
        }
        v4 -= 80;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t xgboost::tree::BaseMaker::FMetaHelper::Type(xgboost::tree::BaseMaker::FMetaHelper *this, int a2)
{
  unint64_t v4;
  std::string *Entry;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  float v15;
  unsigned int v16;
  unint64_t v18;
  int v19;
  uint64_t v20;

  v4 = (2 * a2) | 1u;
  v19 = (2 * a2) | 1;
  v18 = (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 2;
  if (v18 <= v4)
  {
    dmlc::LogCheckFormat<unsigned int,unsigned long>(&v20);
    if (v20)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v18);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/./updater_basemaker-inl.h");
      v6 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v18);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: ", 14);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"fid * 2 + 1 < fminmax_.size()", 29);
      v9 = *(char *)(v20 + 23);
      v10 = v9 >= 0 ? v20 : *(_QWORD *)v20;
      v11 = v9 >= 0 ? *(unsigned __int8 *)(v20 + 23) : *(_QWORD *)(v20 + 8);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"FeatHelper fid exceed query bound ", 34);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v18);
      v14 = v20;
      v20 = 0;
      if (v14)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v20, v14);
    }
  }
  v15 = *(float *)(*(_QWORD *)this + 4 * (2 * a2));
  if (*(float *)(*(_QWORD *)this + 4 * v4) == (float)-v15)
    v16 = 1;
  else
    v16 = 2;
  if (v15 == -3.4028e38)
    return 0;
  else
    return v16;
}

void sub_220ECB70C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::tree::TrainParam::MaxSketchSize(xgboost::tree::TrainParam *this, float a2, float a3)
{
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;

  v15 = (float)(a3 / a2);
  v13 = 0;
  if (!v15)
  {
    dmlc::LogCheckFormat<unsigned int,unsigned int>(&v14);
    if (v14)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/./param.h");
      v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: ", 14);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"ret > 0U", 8);
      v8 = *(char *)(v14 + 23);
      if (v8 >= 0)
        v9 = v14;
      else
        v9 = *(_QWORD *)v14;
      if (v8 >= 0)
        v10 = *(unsigned __int8 *)(v14 + 23);
      else
        v10 = *(_QWORD *)(v14 + 8);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v13);
      v12 = v14;
      v14 = 0;
      if (v12)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v14, v12);
    }
  }
  return v15;
}

void sub_220ECB820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

void rabit::SerializeReduceClosure<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>::Invoke(uint64_t *a1, uint64_t a2, const char *a3)
{
  void (*v4)(uint64_t);
  uint64_t v5;
  unint64_t v6;
  uint64_t **v7;
  int v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void (**v14)(void **, _QWORD, uint64_t);
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v4 = (void (*)(uint64_t))a1[3];
  if (v4)
    v4(a1[4]);
  if (a1[2])
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = (uint64_t **)a1[5];
      v8 = *((char *)v7 + 23);
      if (v8 < 0)
      {
        v7 = (uint64_t **)*v7;
        v9 = *(_QWORD *)(a1[5] + 8) == 0;
      }
      else
      {
        v9 = v8 == 0;
      }
      if (v9)
        v7 = 0;
      v11 = *a1;
      v10 = a1[1];
      v14 = (void (**)(void **, _QWORD, uint64_t))&unk_24E6B8500;
      v15 = (uint64_t)v7 + v10 * v6;
      v16 = v10;
      v17 = 0;
      v12 = (_QWORD *)(v11 + v5);
      rabit::utils::Assert((rabit::utils *)(v10 > 7), "write position exceed fixed buffer size", a3);
      *(_QWORD *)(v15 + v17) = v12[1];
      v17 += 8;
      v13 = v12[1];
      if (v13)
        v14[1]((void **)&v14, *v12, 16 * v13);
      ++v6;
      v5 += 40;
    }
    while (v6 < a1[2]);
  }
}

void std::__function::__func<xgboost::tree::CQHistMaker::CreateHist(std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,std::vector<unsigned int> const&,xgboost::RegTree const&)::{lambda(void)#1},std::allocator<xgboost::tree::CQHistMaker::CreateHist(std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,std::vector<unsigned int> const&,xgboost::RegTree const&)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  JUMPOUT(0x227667068);
}

__n128 std::__function::__func<xgboost::tree::CQHistMaker::CreateHist(std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,std::vector<unsigned int> const&,xgboost::RegTree const&)::{lambda(void)#1},std::allocator<xgboost::tree::CQHistMaker::CreateHist(std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,std::vector<unsigned int> const&,xgboost::RegTree const&)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_24E6BB330;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<xgboost::tree::CQHistMaker::CreateHist(std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,std::vector<unsigned int> const&,xgboost::RegTree const&)::{lambda(void)#1},std::allocator<xgboost::tree::CQHistMaker::CreateHist(std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,std::vector<unsigned int> const&,xgboost::RegTree const&)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24E6BB330;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<xgboost::tree::CQHistMaker::CreateHist(std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,std::vector<unsigned int> const&,xgboost::RegTree const&)::{lambda(void)#1},std::allocator<xgboost::tree::CQHistMaker::CreateHist(std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,std::vector<unsigned int> const&,xgboost::RegTree const&)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t **v19;
  float64x2_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  float64x2_t *v33;
  float64x2_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  unint64_t v40;
  float64x2_t *v41;
  int *v42;
  int *i;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unsigned int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  __n128 v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int32 *v63;
  float32_t *v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _DWORD *v76;
  unsigned int v77;
  float v78;
  float *v79;
  std::string *Entry;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *p_shared_owners;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *ptr;
  unint64_t *v98;
  unint64_t v99;
  float32x2_t **v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD **v103;
  _QWORD *v104;
  _QWORD *v105;
  unint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  void *v109;
  void *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  char *v129;
  char *v130;
  char *v131;
  char *v132;
  uint64_t v133;
  _QWORD *v134;
  unint64_t v135;
  unsigned int *v136;
  unsigned int *v137;
  unsigned int v138;
  _QWORD *v139;
  uint64_t v140;
  unsigned int *v141;
  float32x2_t *v142;
  uint64_t v143;
  unsigned int v144;
  int *v145;
  int *j;
  uint64_t v147;
  float64x2_t *v148;
  uint64_t *v149;
  uint64_t v150;
  unint64_t v151;
  float64x2_t v152;
  uint64_t v153;
  __n128 result;
  int *v155;
  int *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  std::__shared_weak_count *v172;
  __int128 v173;
  std::exception_ptr v174;
  uint64_t v175;
  std::exception_ptr v176[9];
  std::exception_ptr v177;
  std::mutex v178;
  _OWORD v179[24];
  uint64_t v180;

  v1 = a1;
  v180 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(v2 + 616);
  v4 = *(_QWORD **)(v2 + 608);
  v5 = 0xAAAAAAAAAAAAAAABLL * (v3 - v4);
  if (v3 == v4)
  {
    v10 = *(_QWORD *)(v2 + 624);
    if (0xAAAAAAAAAAAAAAABLL * ((v10 - (uint64_t)v3) >> 3) >= 1 - v5)
    {
      *v3 = 0;
      v3[1] = 0;
      v3[2] = 0;
      *(_QWORD *)(v2 + 616) = v3 + 3;
    }
    else
    {
      v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - (uint64_t)v4) >> 3);
      v12 = 2 * v11;
      if (2 * v11 <= 1)
        v12 = 1;
      if (v11 >= 0x555555555555555)
        v13 = 0xAAAAAAAAAAAAAAALL;
      else
        v13 = v12;
      if (v13 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v14 = 3 * v13;
      v15 = (char *)operator new(24 * v13);
      v16 = &v15[24 * v5];
      *((_QWORD *)v16 + 1) = 0;
      *((_QWORD *)v16 + 2) = 0;
      *(_QWORD *)v16 = 0;
      *(_QWORD *)(v2 + 608) = v16;
      *(_QWORD *)(v2 + 616) = v16 + 24;
      *(_QWORD *)(v2 + 624) = &v15[8 * v14];
      if (v3)
        operator delete(v3);
    }
  }
  else if (v5 >= 2)
  {
    v6 = v4 + 3;
    if (v3 != v4 + 3)
    {
      v7 = *(_QWORD **)(v2 + 616);
      do
      {
        v9 = (void *)*(v7 - 3);
        v7 -= 3;
        v8 = v9;
        if (v9)
        {
          *(v3 - 2) = v8;
          operator delete(v8);
        }
        v3 = v7;
      }
      while (v7 != v6);
    }
    *(_QWORD *)(v2 + 616) = v6;
  }
  (*(void (**)(std::exception_ptr *__return_ptr))(***(_QWORD ***)(v1 + 16) + 88))(v176);
  v173 = *(_OWORD *)&v176[0].__ptr_;
  if (v176[1].__ptr_)
  {
    v17 = (unint64_t *)((char *)v176[1].__ptr_ + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  xgboost::BatchIterator<xgboost::SortedCSCPage>::BatchIterator(&v171, 0);
  v160 = v1;
  v169 = v2;
  while ((xgboost::BatchIterator<xgboost::SortedCSCPage>::operator!=((uint64_t *)&v173) & 1) != 0)
  {
    v19 = (uint64_t **)xgboost::BatchIterator<xgboost::SortedCSCPage>::operator*((uint64_t *)&v173);
    v164 = **v19;
    v166 = *v19[1];
    v21 = *(_QWORD **)(v1 + 24);
    v170 = *(uint64_t **)(v1 + 32);
    v22 = *v21;
    v23 = v21[1];
    v163 = *(_QWORD *)(v1 + 48);
    v177.__ptr_ = 0;
    v178.__m_.__sig = 850045863;
    memset(v178.__m_.__opaque, 0, sizeof(v178.__m_.__opaque));
    v24 = v23 - v22;
    if (v24)
    {
      v25 = 0;
      v165 = v24 >> 2;
      v167 = v21;
      do
      {
        v168 = v25;
        v26 = *(int *)(*v21 + 4 * v25);
        v27 = *(unsigned int *)(*(_QWORD *)(v2 + 488) + 4 * v26);
        if ((v27 & 0x80000000) == 0)
        {
          v28 = (uint64_t *)(v164 + 8 * v26);
          v30 = *v28;
          v29 = v28[1];
          if (!v166 && v29 != v30)
            goto LABEL_91;
          if (v29 != v30)
          {
            v31 = *(_QWORD *)(v2 + 608);
            v32 = *(int *)(v163 + 12);
            v34 = *(float64x2_t **)v31;
            v33 = *(float64x2_t **)(v31 + 8);
            v35 = ((uint64_t)v33 - *(_QWORD *)v31) >> 5;
            if (v32 <= v35)
            {
              if (v32 < v35)
                *(_QWORD *)(v31 + 8) = &v34[2 * v32];
            }
            else
            {
              v36 = v32 - v35;
              v37 = *(_QWORD *)(v31 + 16);
              if (v32 - v35 <= (v37 - (uint64_t)v33) >> 5)
              {
                bzero(*(void **)(v31 + 8), 32 * v36);
                *(_QWORD *)(v31 + 8) = &v33[2 * v36];
              }
              else
              {
                if ((v32 & 0x80000000) != 0)
                  std::vector<void *>::__throw_length_error[abi:ne180100]();
                v38 = v37 - (_QWORD)v34;
                if (v38 >> 4 > v32)
                  v32 = v38 >> 4;
                v39 = (unint64_t)v38 >= 0x7FFFFFFFFFFFFFE0;
                v40 = 0x7FFFFFFFFFFFFFFLL;
                if (!v39)
                  v40 = v32;
                if (v40 >> 59)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v162 = v40;
                v161 = (char *)operator new(32 * v40);
                bzero(&v161[32 * v35], 32 * v36);
                v41 = (float64x2_t *)&v161[32 * v35];
                if (v33 != v34)
                {
                  do
                  {
                    v20 = v33[-1];
                    v41[-2] = v33[-2];
                    v41[-1] = v20;
                    v41 -= 2;
                    v33 -= 2;
                  }
                  while (v33 != v34);
                  v33 = v34;
                }
                *(_QWORD *)v31 = v41;
                *(_QWORD *)(v31 + 8) = &v161[32 * v35 + 32 * v36];
                *(_QWORD *)(v31 + 16) = &v161[32 * v162];
                if (v33)
                  operator delete(v33);
              }
            }
            v42 = *(int **)(v2 + 152);
            for (i = *(int **)(v2 + 160); v42 != i; *(_DWORD *)(v46 + 16) = (_DWORD)v48)
            {
              v44 = *v42++;
              v45 = *(unsigned int *)(*(_QWORD *)(v2 + 176) + 4 * v44);
              v46 = *(_QWORD *)v31 + 32 * v44;
              *(_DWORD *)(v46 + 24) = 0;
              v47 = *(_QWORD **)(v2 + 376);
              v48 = (unsigned int *)(*v47 + 4 * (v45 + v45 * ((v167[1] - *v167) >> 2) + v27));
              v49 = *v48;
              v50 = v47[1] + 4 * v49;
              v51 = v47[2] + 16 * v49;
              LODWORD(v48) = v48[1] - v49;
              *(_QWORD *)v46 = v50;
              *(_QWORD *)(v46 + 8) = v51;
            }
            v52 = v29 - v30;
            v53 = v166 + 8 * v30;
            if (!*(_BYTE *)(v2 + 92))
            {
              v71 = 0;
              while (v71 != v52)
              {
                v72 = *(unsigned int *)(v53 + 8 * v71);
                v73 = *(unsigned int *)(*(_QWORD *)(v2 + 200) + 4 * v72);
                if ((v73 & 0x80000000) == 0)
                {
                  v74 = *(_QWORD *)v31 + 32 * v73;
                  v76 = (_DWORD *)(v74 + 24);
                  v75 = *(unsigned int *)(v74 + 24);
                  v77 = *(_DWORD *)(v74 + 16);
                  if (*(_DWORD *)(v74 + 24) < v77)
                  {
                    v78 = *(float *)(v53 + 8 * v71 + 4);
                    v79 = (float *)(*(_QWORD *)v74 + 4 * v75);
                    while (*v79 <= v78)
                    {
                      LODWORD(v75) = v75 + 1;
                      *v76 = v75;
                      ++v79;
                      if (v77 == (_DWORD)v75)
                        goto LABEL_75;
                    }
                  }
                  if ((_DWORD)v75 == v77)
                  {
LABEL_75:
                    dmlc::LogCheckFormat<unsigned int,unsigned int>(&v175);
                    if (v175)
                    {
                      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v174);
                      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/updater_histmaker.cc");
                      v81 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v174);
                      v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"Check failed: ", 14);
                      v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"istart != hist.size", 19);
                      v84 = *(char *)(v175 + 23);
                      v85 = v84 >= 0 ? v175 : *(_QWORD *)v175;
                      v86 = v84 >= 0 ? *(unsigned __int8 *)(v175 + 23) : *(_QWORD *)(v175 + 8);
                      v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, v85, v86);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)": ", 2);
                      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v174);
                      v88 = v175;
                      v175 = 0;
                      if (v88)
                        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v175, v88);
                    }
                  }
                  v89 = *(_QWORD *)(v74 + 8);
                  v90 = *v76;
                  v20 = *(float64x2_t *)(v89 + 16 * v90);
                  *(float64x2_t *)(v89 + 16 * v90) = vaddq_f64(v20, vcvtq_f64_f32(*(float32x2_t *)(*v170 + 8 * v72)));
                }
                if (++v71 == v52)
                  goto LABEL_86;
              }
LABEL_91:
              std::terminate();
            }
            v54.n128_u32[1] = 0;
            v54.n128_u64[1] = 0;
            v55 = v52 & 0xFFFFFFE0;
            memset(v179, 0, 256);
            if ((v52 & 0xFFFFFFE0) != 0)
            {
              v56 = 0;
              v57 = v166 + 4 + 8 * v30;
              do
              {
                v58 = 0;
                v59 = *v170;
                do
                {
                  v60 = (v56 + v58);
                  if (v52 <= v60)
                    goto LABEL_91;
                  v61 = *(unsigned int *)(v53 + 8 * v60);
                  *((_DWORD *)&v179[16] + v58 + 2) = *(_DWORD *)(*(_QWORD *)(v2 + 200) + 4 * v61);
                  *((_QWORD *)v179 + v58++) = *(_QWORD *)(v59 + 8 * v61);
                }
                while (v58 != 32);
                v62 = 0;
                v63 = (unsigned __int32 *)v57;
                v64 = (float32_t *)v179 + 1;
                do
                {
                  v65 = *((unsigned int *)&v179[16] + v62 + 2);
                  if ((v65 & 0x80000000) == 0)
                  {
                    if (v52 <= v56 + v62)
                      goto LABEL_91;
                    v54.n128_u32[0] = *v63;
                    *(float32_t *)v20.f64 = *(v64 - 1);
                    xgboost::tree::CQHistMaker::HistEntry::Add(*(_QWORD *)v31 + 32 * v65, v54, *(float32x2_t *)&v20.f64[0], *v64);
                  }
                  ++v62;
                  v64 += 2;
                  v63 += 2;
                }
                while (v62 != 32);
                v56 += 32;
                v57 += 256;
                v2 = v169;
              }
              while (v56 < v55);
            }
            if (v52 > v55)
            {
              v66 = (v52 & 0xFFFFFFE0) + 1;
              do
              {
                v67 = *(unsigned int *)(v53 + 8 * v55);
                v68 = *(unsigned int *)(*(_QWORD *)(v2 + 200) + 4 * v67);
                if ((v68 & 0x80000000) == 0)
                {
                  v54.n128_u32[0] = *(_DWORD *)(v53 + 8 * v55 + 4);
                  v69 = *v170 + 8 * v67;
                  LODWORD(v20.f64[0]) = *(_DWORD *)v69;
                  xgboost::tree::CQHistMaker::HistEntry::Add(*(_QWORD *)v31 + 32 * v68, v54, *(float32x2_t *)&v20.f64[0], *(float32_t *)(v69 + 4));
                }
                v55 = v66;
              }
              while (v52 > v66++);
            }
          }
        }
LABEL_86:
        v21 = v167;
        v25 = v168 + 1;
      }
      while (v168 + 1 != v165);
    }
    dmlc::OMPException::Rethrow(&v177);
    std::mutex::~mutex(&v178);
    std::exception_ptr::~exception_ptr(&v177);
    xgboost::BatchIterator<xgboost::SortedCSCPage>::operator++((uint64_t *)&v173);
    v1 = v160;
  }
  v91 = v172;
  if (v172)
  {
    p_shared_owners = (unint64_t *)&v172->__shared_owners_;
    do
      v93 = __ldaxr(p_shared_owners);
    while (__stlxr(v93 - 1, p_shared_owners));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v94 = (std::__shared_weak_count *)*((_QWORD *)&v173 + 1);
  if (*((_QWORD *)&v173 + 1))
  {
    v95 = (unint64_t *)(*((_QWORD *)&v173 + 1) + 8);
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  ptr = (std::__shared_weak_count *)v176[1].__ptr_;
  if (v176[1].__ptr_)
  {
    v98 = (unint64_t *)((char *)v176[1].__ptr_ + 8);
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))ptr->__on_zero_shared)(ptr);
      std::__shared_weak_count::__release_weak(ptr);
    }
  }
  v100 = *(float32x2_t ***)(v1 + 32);
  v101 = **(_QWORD **)(v1 + 16);
  v102 = *(_QWORD *)(v1 + 48);
  v103 = (_QWORD **)(v2 + 584);
  v104 = *(_QWORD **)(v2 + 592);
  v105 = *(_QWORD **)(v2 + 584);
  v106 = 0xAAAAAAAAAAAAAAABLL * (v104 - v105);
  if (v104 == v105)
  {
    v111 = *(_QWORD *)(v2 + 600);
    if (0xAAAAAAAAAAAAAAABLL * ((v111 - (uint64_t)v104) >> 3) >= 1 - v106)
    {
      *v104 = 0;
      v104[1] = 0;
      v104[2] = 0;
      *(_QWORD *)(v2 + 592) = v104 + 3;
    }
    else
    {
      v112 = 0xAAAAAAAAAAAAAAABLL * ((v111 - (uint64_t)v105) >> 3);
      v113 = 0x5555555555555556 * ((v111 - (uint64_t)v105) >> 3);
      if (v113 <= 1)
        v113 = 1;
      if (v112 >= 0x555555555555555)
        v114 = 0xAAAAAAAAAAAAAAALL;
      else
        v114 = v113;
      *(_QWORD *)&v178.__m_.__opaque[16] = v2 + 600;
      v115 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<unsigned long>>>(v2 + 600, v114);
      v116 = &v115[24 * v106];
      v177.__ptr_ = v115;
      v178.__m_.__sig = (uint64_t)v116;
      *(_QWORD *)&v178.__m_.__opaque[8] = &v115[24 * v117];
      *(_QWORD *)v116 = 0;
      *((_QWORD *)v116 + 1) = 0;
      *((_QWORD *)v116 + 2) = 0;
      *(_QWORD *)v178.__m_.__opaque = v116 + 24;
      std::vector<std::vector<xgboost::tree::GradStats>>::__swap_out_circular_buffer((uint64_t *)(v2 + 584), &v177);
      std::__split_buffer<std::vector<xgboost::tree::GradStats>>::~__split_buffer((uint64_t)&v177);
    }
  }
  else if (v106 >= 2)
  {
    v107 = v105 + 3;
    if (v104 != v105 + 3)
    {
      v108 = *(_QWORD **)(v2 + 592);
      do
      {
        v110 = (void *)*(v108 - 3);
        v108 -= 3;
        v109 = v110;
        if (v110)
        {
          *(v104 - 2) = v109;
          operator delete(v109);
        }
        v104 = v108;
      }
      while (v108 != v107);
    }
    *(_QWORD *)(v2 + 592) = v107;
  }
  v118 = *(int *)(v102 + 12);
  v119 = *(_QWORD *)(v2 + 640);
  v120 = *(_QWORD *)(v2 + 632);
  v121 = (v119 - v120) >> 4;
  if (v118 <= v121)
  {
    if (v118 >= v121)
      goto LABEL_140;
    v133 = v120 + 16 * v118;
LABEL_139:
    *(_QWORD *)(v2 + 640) = v133;
    goto LABEL_140;
  }
  v122 = v118 - v121;
  v123 = *(_QWORD *)(v2 + 648);
  if (v118 - v121 <= (v123 - v119) >> 4)
  {
    bzero(*(void **)(v2 + 640), 16 * v122);
    v133 = v119 + 16 * v122;
    goto LABEL_139;
  }
  if ((v118 & 0x80000000) != 0)
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  v124 = v123 - v120;
  if (v124 >> 3 > v118)
    v118 = v124 >> 3;
  if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFF0)
    v125 = 0xFFFFFFFFFFFFFFFLL;
  else
    v125 = v118;
  v126 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WQSummary<float,float>::Entry>>(v2 + 648, v125);
  v127 = &v126[16 * v121];
  v129 = &v126[16 * v128];
  bzero(v127, 16 * v122);
  v130 = &v127[16 * v122];
  v131 = *(char **)(v2 + 640);
  v132 = *(char **)(v2 + 632);
  if (v131 != v132)
  {
    do
    {
      *((_OWORD *)v127 - 1) = *((_OWORD *)v131 - 1);
      v127 -= 16;
      v131 -= 16;
    }
    while (v131 != v132);
    v131 = *(char **)(v2 + 632);
  }
  *(_QWORD *)(v2 + 632) = v127;
  *(_QWORD *)(v2 + 640) = v130;
  *(_QWORD *)(v2 + 648) = v129;
  if (v131)
    operator delete(v131);
LABEL_140:
  v176[0].__ptr_ = 0;
  v176[1].__ptr_ = (void *)850045863;
  memset(&v176[2], 0, 56);
  v134 = *v103;
  v135 = *(int *)(v102 + 12);
  v173 = 0uLL;
  std::vector<xgboost::tree::GradStats>::resize((uint64_t)v134, v135, &v173);
  v136 = *(unsigned int **)(v2 + 152);
  v137 = *(unsigned int **)(v2 + 160);
  while (v136 != v137)
  {
    v138 = *v136++;
    v139 = (_QWORD *)(**v103 + 16 * v138);
    *v139 = 0;
    v139[1] = 0;
  }
  dmlc::OMPException::Rethrow(v176);
  v140 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v101 + 24))(v101);
  v177.__ptr_ = 0;
  v178.__m_.__sig = 850045863;
  memset(v178.__m_.__opaque, 0, sizeof(v178.__m_.__opaque));
  if (v140)
  {
    v141 = *(unsigned int **)(v2 + 200);
    v142 = *v100;
    do
    {
      v144 = *v141++;
      v143 = v144;
      if ((v144 & 0x80000000) == 0)
        *(float64x2_t *)(**v103 + 16 * v143) = vaddq_f64(*(float64x2_t *)(**v103 + 16 * v143), vcvtq_f64_f32(*v142));
      ++v142;
      --v140;
    }
    while (v140);
  }
  dmlc::OMPException::Rethrow(&v177);
  std::mutex::~mutex(&v178);
  std::exception_ptr::~exception_ptr(&v177);
  v145 = *(int **)(v2 + 152);
  for (j = *(int **)(v2 + 160); v145 != j; ++v145)
  {
    v147 = *v145;
    v148 = (float64x2_t *)(*(_QWORD *)(v2 + 632) + 16 * v147);
    v148->f64[0] = 0.0;
    v148->f64[1] = 0.0;
    v149 = *(uint64_t **)(v2 + 584);
    v150 = *(_QWORD *)(v2 + 592) - (_QWORD)v149;
    if (v150)
    {
      v151 = v150 / 24;
      if (v151 <= 1)
        v151 = 1;
      v152.f64[0] = 0.0;
      v152.f64[1] = v148->f64[1];
      do
      {
        v153 = *v149;
        v149 += 3;
        v152 = vaddq_f64(v152, *(float64x2_t *)(v153 + 16 * v147));
        *v148 = v152;
        --v151;
      }
      while (v151);
    }
  }
  std::mutex::~mutex((std::mutex *)&v176[1]);
  std::exception_ptr::~exception_ptr(v176);
  v155 = *(int **)(v2 + 152);
  v156 = *(int **)(v2 + 160);
  while (v155 != v156)
  {
    v157 = *v155++;
    v158 = *(int *)(*(_QWORD *)(v2 + 176) + 4 * v157);
    v159 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(v1 + 24) + 8) - **(_QWORD **)(v1 + 24)) >> 2;
    result = *(__n128 *)(*(_QWORD *)(v2 + 632) + 16 * v157);
    *(__n128 *)(*(_QWORD *)(*(_QWORD *)(v2 + 376) + 16)
              + 16 * *(unsigned int *)(**(_QWORD **)(v2 + 376) + 4 * (v158 + v158 * v159 + v159))) = result;
  }
  return result;
}

void sub_220ECC6E8()
{
  std::mutex *v0;
  std::exception_ptr v1;

  __cxa_end_catch();
  std::mutex::~mutex(v0);
  std::exception_ptr::~exception_ptr(&v1);
  JUMPOUT(0x220ECC80CLL);
}

void sub_220ECC6F4()
{
  std::mutex *v0;
  std::exception_ptr v1;

  __cxa_end_catch();
  std::mutex::~mutex(v0);
  std::exception_ptr::~exception_ptr(&v1);
  JUMPOUT(0x220ECC80CLL);
}

void sub_220ECC704(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,std::exception_ptr a40)
{
  std::mutex *v40;
  std::mutex *v41;
  std::exception_ptr v42;

  std::mutex::~mutex(v40);
  std::exception_ptr::~exception_ptr(&a40);
  std::mutex::~mutex(v41);
  std::exception_ptr::~exception_ptr(&v42);
  JUMPOUT(0x220ECC80CLL);
}

void sub_220ECC734()
{
  JUMPOUT(0x220ECC79CLL);
}

void sub_220ECC73C()
{
  JUMPOUT(0x220ECC80CLL);
}

void sub_220ECC75C()
{
  JUMPOUT(0x220ECC764);
}

uint64_t std::__function::__func<xgboost::tree::CQHistMaker::CreateHist(std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,std::vector<unsigned int> const&,xgboost::RegTree const&)::{lambda(void)#1},std::allocator<xgboost::tree::CQHistMaker::CreateHist(std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,std::vector<unsigned int> const&,xgboost::RegTree const&)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<xgboost::tree::CQHistMaker::CreateHist(std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,std::vector<unsigned int> const&,xgboost::RegTree const&)::{lambda(void)#1},std::allocator<xgboost::tree::CQHistMaker::CreateHist(std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,std::vector<unsigned int> const&,xgboost::RegTree const&)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void xgboost::tree::CQHistMaker::HistEntry::Add(uint64_t a1, __n128 a2, float32x2_t a3, float32_t a4)
{
  float v4;
  uint64_t v6;
  unsigned int v7;
  unsigned __int32 *v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t i;
  _QWORD *v13;
  std::string *Entry;
  _QWORD *v15;
  _QWORD *v16;
  void *__p[2];
  char v18;
  _QWORD v19[34];

  v4 = a2.n128_f32[0];
  v6 = *(unsigned int *)(a1 + 24);
  a2.n128_u32[0] = *(_DWORD *)(*(_QWORD *)a1 + 4 * v6);
  if (a2.n128_f32[0] <= v4)
  {
    v7 = *(_DWORD *)(a1 + 16);
    if (v6 < v7)
    {
      v8 = (unsigned __int32 *)(*(_QWORD *)a1 + 4 * v6);
      while (1)
      {
        a2.n128_u32[0] = *v8;
        if (*(float *)v8 > v4)
          break;
        LODWORD(v6) = v6 + 1;
        *(_DWORD *)(a1 + 24) = v6;
        ++v8;
        if (v7 == (_DWORD)v6)
          goto LABEL_9;
      }
    }
    if ((_DWORD)v6 == v7)
    {
LABEL_9:
      v10 = dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst(a2);
      if (*(int *)(v10 + 4) >= 2)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/updater_histmaker.cc");
        xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)v19, (uint64_t)__p, 300, 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"fv=", 3);
        v11 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", hist.size=", 12);
        std::ostream::operator<<();
        xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v19);
        if (v18 < 0)
          operator delete(__p[0]);
        v9 = *(_DWORD *)(a1 + 16);
      }
      if (v9)
      {
        for (i = 0; i < v9; ++i)
        {
          if (*(int *)(v10 + 4) >= 2)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/updater_histmaker.cc");
            xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)v19, (uint64_t)__p, 302, 2);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"hist[", 5);
            v13 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"]=", 2);
            std::ostream::operator<<();
            xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v19);
            if (v18 < 0)
              operator delete(__p[0]);
            v9 = *(_DWORD *)(a1 + 16);
          }
        }
      }
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v19);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/updater_histmaker.cc");
      v15 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"fv=", 3);
      v16 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", hist.last=", 12);
      std::ostream::operator<<();
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v19);
    }
    else
    {
      a3.f32[1] = a4;
      *(float64x2_t *)(*(_QWORD *)(a1 + 8) + 16 * v6) = vaddq_f64(*(float64x2_t *)(*(_QWORD *)(a1 + 8)+ 16 * v6), vcvtq_f64_f32(a3));
    }
  }
  else
  {
    a3.f32[1] = a4;
    *(float64x2_t *)(*(_QWORD *)(a1 + 8) + 16 * v6) = vaddq_f64(*(float64x2_t *)(*(_QWORD *)(a1 + 8) + 16 * v6), vcvtq_f64_f32(a3));
  }
}

void sub_220ECCAC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost::data::DMatrixProxy::SetArrayData(xgboost::data::DMatrixProxy *this, const char *a2)
{
  uint64_t v4;
  size_t v5;
  unsigned int *v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int16 v10;
  __int128 v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  std::__shared_weak_count *v15;
  unsigned __int8 v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void (**v19)(char *);
  uint64_t v20;
  __int128 v21;
  void (*v22)(char *);
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unsigned int *v28;
  _OWORD v29[2];
  __int128 v30;
  __int128 v31;
  __int16 v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  v5 = strlen(a2);
  *(_DWORD *)(v4 + 8) = 0;
  *(_QWORD *)v4 = &off_24E6BB3C0;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_WORD *)(v4 + 80) = 512;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_WORD *)(v4 + 152) = 512;
  xgboost::Json::Load((uint64_t)a2, v5, 8, &v28);
  v6 = v28;
  v7 = xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(v28);
  v30 = 0u;
  v31 = 0u;
  memset(v29, 0, sizeof(v29));
  v32 = 512;
  xgboost::ArrayInterface<2,false>::Initialize((uint64_t)v29, (uint64_t)v7 + 16);
  v8 = v29[0];
  *(_OWORD *)(v4 + 88) = v29[0];
  v9 = v30;
  *(_OWORD *)(v4 + 104) = v29[1];
  *(_OWORD *)(v4 + 120) = v9;
  *(_OWORD *)(v4 + 136) = v31;
  v10 = v32;
  *(_WORD *)(v4 + 152) = v32;
  *(_OWORD *)(v4 + 16) = v8;
  v11 = *(_OWORD *)(v4 + 120);
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(v4 + 104);
  *(_OWORD *)(v4 + 48) = v11;
  *(_OWORD *)(v4 + 64) = *(_OWORD *)(v4 + 136);
  *(_WORD *)(v4 + 80) = v10;
  if (v6)
  {
    v12 = v6 + 2;
    do
    {
      v13 = __ldxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      __dmb(9u);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  v15 = (std::__shared_weak_count *)operator new();
  v15->__vftable = (std::__shared_weak_count_vtbl *)&off_24E6BB4D0;
  v15->__shared_owners_ = 0;
  v15->__shared_weak_owners_ = 0;
  v15[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  v27 = v15;
  *(_QWORD *)&v29[0] = 0;
  v16 = atomic_load((unsigned __int8 *)&_MergedGlobals_11);
  if ((v16 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_11))
  {
    qword_253F36A68 = (uint64_t)dmlc::any::TypeOnStack<std::shared_ptr<xgboost::data::ArrayAdapter>>::destroy;
    unk_253F36A70 = dmlc::any::TypeOnStack<std::shared_ptr<xgboost::data::ArrayAdapter>>::create_from_data;
    __cxa_guard_release(&_MergedGlobals_11);
  }
  *((_QWORD *)&v29[0] + 1) = v4;
  *(_QWORD *)&v29[1] = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  *(_QWORD *)&v29[0] = *((_QWORD *)this + 27);
  v19 = *(void (***)(char *))&v29[0];
  *((_QWORD *)this + 27) = &qword_253F36A68;
  v20 = *((_QWORD *)&v29[1] + 1);
  v21 = *(_OWORD *)((char *)v29 + 8);
  *(_OWORD *)((char *)v29 + 8) = *((_OWORD *)this + 14);
  *((_QWORD *)&v29[1] + 1) = *((_QWORD *)this + 30);
  *((_OWORD *)this + 14) = v21;
  *((_QWORD *)this + 30) = v20;
  if (v19)
  {
    v22 = *v19;
    if (v22)
      v22((char *)v29 + 8);
  }
  v23 = *(_QWORD *)(v4 + 128);
  *(_QWORD *)((**(uint64_t (***)(xgboost::data::DMatrixProxy *))this)(this) + 8) = v23;
  v24 = *(_QWORD *)(v4 + 120);
  *(_QWORD *)(**(uint64_t (***)(xgboost::data::DMatrixProxy *))this)(this) = v24;
  if (v27)
  {
    v25 = (unint64_t *)&v27->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void sub_220ECCDD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void xgboost::data::DMatrixProxy::SetCSRData(xgboost::data::DMatrixProxy *this, const char *a2, const char *a3, const char *a4, unsigned int a5, char a6)
{
  uint64_t v11;
  size_t v12;
  size_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unsigned __int8 v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  void (**v28)(__int128 *);
  uint64_t v29;
  __int128 v30;
  void (*v31)(__int128 *);
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::string *Entry;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  std::__shared_weak_count *v42;
  void (**v43)(__int128 *);
  __int128 v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  if ((a6 & 1) == 0)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v43);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/proxy_dmatrix.cc");
    v39 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v43);
    v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Check failed: on_host", 21);
    v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"Not implemented on device.", 26);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v43);
  }
  v11 = operator new();
  v12 = strlen(a2);
  v13 = strlen(a3);
  v14 = strlen(a4);
  *(_DWORD *)(v11 + 8) = 0;
  *(_QWORD *)v11 = &off_24E6BB448;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_WORD *)(v11 + 64) = 512;
  *(_OWORD *)(v11 + 72) = 0u;
  *(_OWORD *)(v11 + 88) = 0u;
  *(_OWORD *)(v11 + 104) = 0u;
  *(_WORD *)(v11 + 120) = 512;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_OWORD *)(v11 + 144) = 0u;
  *(_WORD *)(v11 + 176) = 512;
  *(_OWORD *)(v11 + 160) = 0u;
  xgboost::ArrayInterface<1,true>::ArrayInterface(v11 + 192, (uint64_t)a2, v12);
  xgboost::ArrayInterface<1,true>::ArrayInterface(v11 + 248, (uint64_t)a3, v13);
  xgboost::ArrayInterface<1,true>::ArrayInterface(v11 + 304, (uint64_t)a4, v14);
  *(_QWORD *)(v11 + 360) = a5;
  v15 = *(_QWORD *)(v11 + 248);
  v16 = *(_QWORD *)(v11 + 200);
  v17 = *(_QWORD *)(v11 + 256);
  v18 = *(_QWORD *)(v11 + 304);
  v19 = *(_QWORD *)(v11 + 312);
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v11 + 192);
  *(_QWORD *)(v11 + 24) = v16;
  v20 = *(_OWORD *)(v11 + 224);
  *(_OWORD *)(v11 + 32) = *(_OWORD *)(v11 + 208);
  *(_OWORD *)(v11 + 48) = v20;
  *(_WORD *)(v11 + 64) = *(_WORD *)(v11 + 240);
  *(_QWORD *)(v11 + 72) = v15;
  *(_QWORD *)(v11 + 80) = v17;
  v21 = *(_OWORD *)(v11 + 264);
  v22 = *(_OWORD *)(v11 + 280);
  *(_WORD *)(v11 + 120) = *(_WORD *)(v11 + 296);
  *(_OWORD *)(v11 + 104) = v22;
  *(_OWORD *)(v11 + 88) = v21;
  *(_QWORD *)(v11 + 128) = v18;
  *(_QWORD *)(v11 + 136) = v19;
  v23 = *(_OWORD *)(v11 + 336);
  *(_OWORD *)(v11 + 144) = *(_OWORD *)(v11 + 320);
  *(_OWORD *)(v11 + 160) = v23;
  *(_WORD *)(v11 + 176) = *(_WORD *)(v11 + 352);
  *(_DWORD *)(v11 + 184) = a5;
  v24 = (std::__shared_weak_count *)operator new();
  v24->__vftable = (std::__shared_weak_count_vtbl *)&off_24E6BB548;
  v24->__shared_owners_ = 0;
  v24->__shared_weak_owners_ = 0;
  v24[1].__vftable = (std::__shared_weak_count_vtbl *)v11;
  v42 = v24;
  v43 = 0;
  v25 = atomic_load((unsigned __int8 *)&qword_253F36A60);
  if ((v25 & 1) == 0 && __cxa_guard_acquire(&qword_253F36A60))
  {
    qword_253F36A80 = (uint64_t)dmlc::any::TypeOnStack<std::shared_ptr<xgboost::data::CSRArrayAdapter>>::destroy;
    unk_253F36A88 = dmlc::any::TypeOnStack<std::shared_ptr<xgboost::data::CSRArrayAdapter>>::create_from_data;
    __cxa_guard_release(&qword_253F36A60);
  }
  *(_QWORD *)&v44 = v11;
  *((_QWORD *)&v44 + 1) = v42;
  if (v42)
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      v27 = __ldxr(p_shared_owners);
    while (__stxr(v27 + 1, p_shared_owners));
  }
  v43 = (void (**)(__int128 *))*((_QWORD *)this + 27);
  v28 = v43;
  *((_QWORD *)this + 27) = &qword_253F36A80;
  v29 = v45;
  v30 = v44;
  v44 = *((_OWORD *)this + 14);
  v45 = *((_QWORD *)this + 30);
  *((_OWORD *)this + 14) = v30;
  *((_QWORD *)this + 30) = v29;
  if (v28)
  {
    v31 = *v28;
    if (v31)
      v31(&v44);
  }
  v32 = *(_QWORD *)(v11 + 360);
  *(_QWORD *)((**(uint64_t (***)(xgboost::data::DMatrixProxy *))this)(this) + 8) = v32;
  v33 = *(_QWORD *)(v11 + 216);
  v34 = (_QWORD *)(**(uint64_t (***)(xgboost::data::DMatrixProxy *))this)(this);
  v35 = v33 - 1;
  if (!v33)
    v35 = 0;
  *v34 = v35;
  if (v42)
  {
    v36 = (unint64_t *)&v42->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
}

void sub_220ECD1B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  _Unwind_Resume(a1);
}

void xgboost::data::ArrayAdapter::~ArrayAdapter(xgboost::data::ArrayAdapter *this)
{
  JUMPOUT(0x227667068);
}

uint64_t xgboost::data::detail::SingleBatchDataIter<xgboost::data::ArrayAdapterBatch>::BeforeFirst(uint64_t result)
{
  *(_DWORD *)(result + 8) = 0;
  return result;
}

BOOL xgboost::data::detail::SingleBatchDataIter<xgboost::data::ArrayAdapterBatch>::Next(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 8);
  if (!v1)
    *(_DWORD *)(a1 + 8) = 1;
  return v1 == 0;
}

uint64_t xgboost::data::ArrayAdapter::Value(xgboost::data::ArrayAdapter *this)
{
  return (uint64_t)this + 16;
}

uint64_t xgboost::ArrayInterface<1,true>::ArrayInterface(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  _DWORD *v9;

  xgboost::Json::Load(a2, a3, 8, &v9);
  xgboost::ArrayInterface<1,true>::ArrayInterface(a1, &v9);
  v4 = v9;
  if (v9)
  {
    v5 = v9 + 2;
    do
    {
      v6 = __ldxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      __dmb(9u);
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  return a1;
}

void sub_220ECD2E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      __dmb(9u);
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void xgboost::data::CSRArrayAdapter::~CSRArrayAdapter(xgboost::data::CSRArrayAdapter *this)
{
  JUMPOUT(0x227667068);
}

uint64_t xgboost::data::detail::SingleBatchDataIter<xgboost::data::CSRArrayAdapterBatch>::BeforeFirst(uint64_t result)
{
  *(_DWORD *)(result + 8) = 0;
  return result;
}

BOOL xgboost::data::detail::SingleBatchDataIter<xgboost::data::CSRArrayAdapterBatch>::Next(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 8);
  if (!v1)
    *(_DWORD *)(a1 + 8) = 1;
  return v1 == 0;
}

uint64_t xgboost::data::CSRArrayAdapter::Value(xgboost::data::CSRArrayAdapter *this)
{
  return (uint64_t)this + 16;
}

void std::__shared_ptr_pointer<xgboost::data::ArrayAdapter *,std::shared_ptr<xgboost::data::ArrayAdapter>::__shared_ptr_default_delete<xgboost::data::ArrayAdapter,xgboost::data::ArrayAdapter>,std::allocator<xgboost::data::ArrayAdapter>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227667068);
}

uint64_t std::__shared_ptr_pointer<xgboost::data::ArrayAdapter *,std::shared_ptr<xgboost::data::ArrayAdapter>::__shared_ptr_default_delete<xgboost::data::ArrayAdapter,xgboost::data::ArrayAdapter>,std::allocator<xgboost::data::ArrayAdapter>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<xgboost::data::ArrayAdapter *,std::shared_ptr<xgboost::data::ArrayAdapter>::__shared_ptr_default_delete<xgboost::data::ArrayAdapter,xgboost::data::ArrayAdapter>,std::allocator<xgboost::data::ArrayAdapter>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *dmlc::any::TypeOnStack<std::shared_ptr<xgboost::data::ArrayAdapter>>::create_from_data(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a2[1];
  *result = *a2;
  result[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__shared_ptr_pointer<xgboost::data::CSRArrayAdapter *,std::shared_ptr<xgboost::data::CSRArrayAdapter>::__shared_ptr_default_delete<xgboost::data::CSRArrayAdapter,xgboost::data::CSRArrayAdapter>,std::allocator<xgboost::data::CSRArrayAdapter>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227667068);
}

uint64_t std::__shared_ptr_pointer<xgboost::data::CSRArrayAdapter *,std::shared_ptr<xgboost::data::CSRArrayAdapter>::__shared_ptr_default_delete<xgboost::data::CSRArrayAdapter,xgboost::data::CSRArrayAdapter>,std::allocator<xgboost::data::CSRArrayAdapter>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<xgboost::data::CSRArrayAdapter *,std::shared_ptr<xgboost::data::CSRArrayAdapter>::__shared_ptr_default_delete<xgboost::data::CSRArrayAdapter,xgboost::data::CSRArrayAdapter>,std::allocator<xgboost::data::CSRArrayAdapter>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *dmlc::any::TypeOnStack<std::shared_ptr<xgboost::data::CSRArrayAdapter>>::create_from_data(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a2[1];
  *result = *a2;
  result[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t xgboost::gbm::__dmlc_registry_file_tag_gbtree__(xgboost::gbm *this)
{
  return 0;
}

void xgboost::gbm::GBTree::Configure(uint64_t a1, std::string **a2)
{
  _QWORD *v4;
  __int128 *v5;
  std::string *v6;
  unint64_t v7;
  std::string *v8;
  unint64_t v9;
  unint64_t v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t i;
  _OWORD *v15;
  xgboost::gbm::GBTreeModelParam *v16;
  int64x2_t *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  int64x2_t v34;
  char *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  std::string *v43;
  std::string *v44;
  int v45;
  std::string *v46;
  int data;
  int v48;
  uint64_t v50;
  std::string::size_type size;
  uint64_t v52;
  int v53;
  unsigned __int8 *v54;
  std::string *v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  void *v62[2];
  char v63;
  void *__p;
  int64x2_t v65;
  char *v66;
  uint64_t v67;
  std::string __str;
  _BYTE v69[24];
  std::string v70;

  v4 = (_QWORD *)(a1 + 336);
  if ((std::string **)(a1 + 336) == a2)
    goto LABEL_16;
  v6 = *a2;
  v5 = (__int128 *)a2[1];
  v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)*a2) >> 4);
  v8 = *(std::string **)(a1 + 336);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 352) - (_QWORD)v8) >> 4) < v7)
  {
    std::vector<std::pair<std::string,std::string>>::__vdeallocate((std::vector<std::pair<std::string, std::string>> *)(a1 + 336));
    if (v7 > 0x555555555555555)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v9 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 352) - *(_QWORD *)(a1 + 336)) >> 4);
    if (v9 <= v7)
      v9 = v7;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 352) - *(_QWORD *)(a1 + 336)) >> 4) >= 0x2AAAAAAAAAAAAAALL)
      v10 = 0x555555555555555;
    else
      v10 = v9;
    std::vector<std::pair<std::string,std::string>>::__vallocate[abi:ne180100](v4, v10);
    v11 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(a1 + 352, (__int128 *)v6, v5, *(std::string **)(a1 + 344));
    goto LABEL_12;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 344) - (_QWORD)v8) >> 4) < v7)
  {
    v12 = (std::string *)((char *)v6 + 16 * ((uint64_t)(*(_QWORD *)(a1 + 344) - (_QWORD)v8) >> 4));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<std::string,std::string> *,std::pair<std::string,std::string> *,std::pair<std::string,std::string> *>(*a2, v12, v8);
    v11 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(a1 + 352, (__int128 *)v12, v5, *(std::string **)(a1 + 344));
LABEL_12:
    *(_QWORD *)(a1 + 344) = v11;
    goto LABEL_16;
  }
  v13 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<std::string,std::string> *,std::pair<std::string,std::string> *,std::pair<std::string,std::string> *>(*a2, a2[1], v8);
  for (i = *(_QWORD *)(a1 + 344);
        (std::string *)i != v13;
        std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](a1 + 352, i))
  {
    i -= 48;
  }
  *(_QWORD *)(a1 + 344) = v13;
LABEL_16:
  v15 = (_OWORD *)(a1 + 288);
  if (*(char *)(a1 + 311) < 0)
  {
    std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)(a1 + 288), *(_QWORD *)(a1 + 296));
  }
  else
  {
    *(_OWORD *)&v70.__r_.__value_.__l.__data_ = *v15;
    v70.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 304);
  }
  xgboost::XGBoostParameter<xgboost::gbm::GBTreeTrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::gbm::GBTreeTrainParam *)v69, (_BYTE *)(a1 + 280), (uint64_t *)a2);
  __p = v69;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(_QWORD *)(a1 + 208) == *(_QWORD *)(a1 + 200))
  {
    __p = 0;
    v65 = 0uLL;
    xgboost::gbm::GBTreeModelParam::__MANAGER__(v16);
    dmlc::parameter::ParamManager::RunUpdate<std::__wrap_iter<std::pair<std::string,std::string> const*>>(xgboost::gbm::GBTreeModelParam::__MANAGER__(void)::inst, a1 + 40, (uint64_t)*a2, (uint64_t)a2[1], 0, (uint64_t *)&__p, 0);
    v62[0] = &__p;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)v62);
  }
  if (*(_DWORD *)(a1 + 312) == 1)
  {
    v18 = *(_QWORD **)(a1 + 232);
    v17 = (int64x2_t *)(a1 + 224);
    if (v18 == *(_QWORD **)(a1 + 224))
    {
      v19 = *(uint64_t **)(a1 + 200);
      v20 = *(uint64_t **)(a1 + 208);
      if (v19 != v20)
      {
        v21 = (_QWORD *)(a1 + 240);
        do
        {
          if ((unint64_t)v18 >= *v21)
          {
            v23 = ((uint64_t)v18 - v17->i64[0]) >> 3;
            if ((unint64_t)(v23 + 1) >> 61)
              std::vector<void *>::__throw_length_error[abi:ne180100]();
            v24 = *v21 - v17->i64[0];
            v25 = v24 >> 2;
            if (v24 >> 2 <= (unint64_t)(v23 + 1))
              v25 = v23 + 1;
            if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
              v26 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v26 = v25;
            v67 = a1 + 240;
            if (v26)
              v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a1 + 240, v26);
            else
              v27 = 0;
            v28 = &v27[8 * v23];
            v29 = &v27[8 * v26];
            v66 = v29;
            v30 = *v19;
            *v19 = 0;
            *(_QWORD *)v28 = v30;
            v18 = v28 + 8;
            v65.i64[1] = (uint64_t)(v28 + 8);
            v32 = *(_QWORD **)(a1 + 224);
            v31 = *(_QWORD **)(a1 + 232);
            if (v31 == v32)
            {
              v34 = vdupq_n_s64((unint64_t)v31);
            }
            else
            {
              do
              {
                v33 = *--v31;
                *v31 = 0;
                *((_QWORD *)v28 - 1) = v33;
                v28 -= 8;
              }
              while (v31 != v32);
              v34 = *v17;
              v18 = (_QWORD *)v65.i64[1];
              v29 = v66;
            }
            *(_QWORD *)(a1 + 224) = v28;
            *(_QWORD *)(a1 + 232) = v18;
            v65 = v34;
            v35 = *(char **)(a1 + 240);
            *(_QWORD *)(a1 + 240) = v29;
            v66 = v35;
            __p = (void *)v34.i64[0];
            std::__split_buffer<std::unique_ptr<xgboost::RegTree>>::~__split_buffer((uint64_t)&__p);
          }
          else
          {
            v22 = *v19;
            *v19 = 0;
            *v18++ = v22;
          }
          *(_QWORD *)(a1 + 232) = v18;
          ++v19;
        }
        while (v19 != v20);
        v36 = *(uint64_t **)(a1 + 200);
        v19 = *(uint64_t **)(a1 + 208);
        if (v19 != v36)
        {
          do
          {
            v38 = *--v19;
            v37 = v38;
            *v19 = 0;
            if (v38)
              (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
          }
          while (v19 != v36);
          v19 = v36;
        }
      }
      *(_QWORD *)(a1 + 208) = v19;
      *(_DWORD *)(a1 + 40) = 0;
      *(_QWORD *)(a1 + 256) = *(_QWORD *)(a1 + 248);
    }
  }
  v39 = *(_QWORD *)(a1 + 384);
  if (!v39)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "cpu_predictor");
    v40 = xgboost::Predictor::Create((uint64_t)&__p, *(_QWORD *)(a1 + 16));
    v41 = *(_QWORD *)(a1 + 384);
    *(_QWORD *)(a1 + 384) = v40;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
    if (v65.i8[15] < 0)
      operator delete(__p);
    v39 = *(_QWORD *)(a1 + 384);
  }
  (*(void (**)(uint64_t, std::string **))(*(_QWORD *)v39 + 16))(v39, a2);
  std::string::basic_string[abi:ne180100]<0>(&__str, "GBTree");
  std::string::operator=((std::string *)(a1 + 392), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v43 = *a2;
  v44 = a2[1];
  if (*a2 == v44)
  {
LABEL_67:
    *(_BYTE *)(a1 + 329) = 0;
    goto LABEL_68;
  }
  while (1)
  {
    v45 = SHIBYTE(v43->__r_.__value_.__r.__words[2]);
    if (v45 < 0)
      break;
    v46 = v43;
    if (v45 == 7)
      goto LABEL_62;
LABEL_66:
    v43 += 2;
    if (v43 == v44)
      goto LABEL_67;
  }
  if (v43->__r_.__value_.__l.__size_ != 7)
    goto LABEL_66;
  v46 = (std::string *)v43->__r_.__value_.__r.__words[0];
LABEL_62:
  data = (int)v46->__r_.__value_.__l.__data_;
  v48 = *(_DWORD *)((char *)v46->__r_.__value_.__r.__words + 3);
  if (data != 1633972341 || v48 != 1919251553)
    goto LABEL_66;
  *(_BYTE *)(a1 + 329) = 1;
  if (!*(_BYTE *)(a1 + 328))
  {
    if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst(v42) + 4) >= 1)
    {
      std::string::basic_string[abi:ne180100]<0>(v62, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
      xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)&__p, (uint64_t)v62, 82, 1);
      xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)&__p);
      if (v63 < 0)
        operator delete(v62[0]);
    }
    *(_BYTE *)(a1 + 328) = 1;
  }
LABEL_68:
  xgboost::gbm::GBTree::ConfigureUpdaters((xgboost::gbm::GBTree *)a1, v42);
  v50 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
  if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v70.__r_.__value_.__r.__words[2]);
  else
    size = v70.__r_.__value_.__l.__size_;
  v52 = *(unsigned __int8 *)(a1 + 311);
  v53 = (char)v52;
  if ((v52 & 0x80u) != 0)
    v52 = *(_QWORD *)(a1 + 296);
  if (size == v52)
  {
    if (v53 >= 0)
      v54 = (unsigned __int8 *)(a1 + 288);
    else
      v54 = *(unsigned __int8 **)v15;
    if ((*((_BYTE *)&v70.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (memcmp(v70.__r_.__value_.__l.__data_, v54, v70.__r_.__value_.__l.__size_))
        goto LABEL_89;
    }
    else if (*((_BYTE *)&v70.__r_.__value_.__s + 23))
    {
      v55 = &v70;
      while (v55->__r_.__value_.__s.__data_[0] == *v54)
      {
        v55 = (std::string *)((char *)v55 + 1);
        ++v54;
        if (!--v50)
          goto LABEL_97;
      }
      goto LABEL_89;
    }
LABEL_97:
    v60 = *(_QWORD **)(a1 + 360);
    v61 = *(_QWORD **)(a1 + 368);
    while (v60 != v61)
    {
      (*(void (**)(_QWORD, std::string **))(*(_QWORD *)*v60 + 32))(*v60, a2);
      ++v60;
    }
  }
  else
  {
LABEL_89:
    v56 = *(_QWORD **)(a1 + 360);
    v57 = *(_QWORD **)(a1 + 368);
    while (v57 != v56)
    {
      v59 = *--v57;
      v58 = v59;
      *v57 = 0;
      if (v59)
        (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
    }
    *(_QWORD *)(a1 + 368) = v56;
    xgboost::gbm::GBTree::InitUpdater(a1, (uint64_t)a2);
  }
  *(_BYTE *)(a1 + 330) = 1;
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v70.__r_.__value_.__l.__data_);
}

void sub_220ECDAE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)&a16);
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v21 - 89) < 0)
    operator delete(*(void **)(v21 - 112));
  _Unwind_Resume(a1);
}

void xgboost::XGBoostParameter<xgboost::gbm::GBTreeTrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>(xgboost::gbm::GBTreeTrainParam *a1, _BYTE *a2, uint64_t *a3)
{
  if (*a2)
  {
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    *((_QWORD *)a1 + 2) = 0;
    xgboost::gbm::GBTreeTrainParam::__MANAGER__(a1);
    dmlc::parameter::ParamManager::RunUpdate<std::__wrap_iter<std::pair<std::string,std::string> const*>>(&stru_253F36AB8, (uint64_t)a2, *a3, a3[1], 0, (uint64_t *)a1, 0);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    *((_QWORD *)a1 + 2) = 0;
    xgboost::gbm::GBTreeTrainParam::__MANAGER__(a1);
    dmlc::parameter::ParamManager::RunInit<std::__wrap_iter<std::pair<std::string,std::string> const*>>(&stru_253F36AB8, (uint64_t)a2, *a3, a3[1], (uint64_t *)a1, 0);
    *a2 = 1;
  }
}

void sub_220ECDC28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void xgboost::gbm::GBTree::ConfigureUpdaters(xgboost::gbm::GBTree *this, __n128 a2)
{
  char *v3;
  const char *v4;
  std::string *v5;
  _QWORD *v6;
  _QWORD *v7;
  std::string *Entry;
  _QWORD *v9;
  void *__p[2];
  char v11;
  _QWORD v12[34];

  if (!*((_BYTE *)this + 329))
  {
    switch(*((_DWORD *)this + 80))
    {
      case 0:
        return;
      case 1:
      case 2:
        JUMPOUT(0x227666C18);
      case 3:
        if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst(a2) + 4) >= 2)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
          xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)v12, (uint64_t)__p, 177, 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Tree method is selected to be 'hist', which uses a single updater grow_quantile_histmaker.", 90);
          xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v12);
          if (v11 < 0)
            operator delete(__p[0]);
        }
        v3 = (char *)this + 288;
        v4 = "grow_quantile_histmaker";
        goto LABEL_10;
      case 5:
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v12);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/../common/common.h");
        v9 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v12);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v12);
        v3 = (char *)this + 288;
        v4 = "grow_gpu_hist";
LABEL_10:
        MEMORY[0x227666C18](v3, v4);
        break;
      default:
        v5 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v12);
        dmlc::LogMessageFatal::Entry::Init(v5, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
        v6 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v12);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Unknown tree_method (", 21);
        v7 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") detected", 10);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v12);
        break;
    }
  }
}

void sub_220ECDDDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)&a16);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void xgboost::gbm::GBTree::InitUpdater(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  std::string *Entry;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  size_t v21;
  size_t v22;
  const void *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  const char *v34;
  size_t v35;
  _QWORD *v36;
  std::string *v37;
  _QWORD *v38;
  void **v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int64x2_t *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  int64x2_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *__p[2];
  unsigned __int8 v65;
  void *v66;
  int64x2_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  std::string v76;

  if (*(char *)(a1 + 311) < 0)
    std::string::__init_copy_ctor_external(&v76, *(const std::string::value_type **)(a1 + 288), *(_QWORD *)(a1 + 296));
  else
    v76 = *(std::string *)(a1 + 288);
  xgboost::common::Split(&v76, 0x2Cu, &v74);
  v5 = *(_QWORD *)(a1 + 368) - *(_QWORD *)(a1 + 360);
  if (!v5)
  {
    v41 = v74;
    v42 = v75;
    if (v74 != v75)
    {
      v43 = (int64x2_t *)(a1 + 360);
      do
      {
        v44 = (char *)v41;
        if (*(char *)(v41 + 23) < 0)
          v44 = *(char **)v41;
        std::string::basic_string[abi:ne180100]<0>(&v66, v44);
        v2 = v2 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)(*(_QWORD *)(a1 + 32) + 12);
        v45 = xgboost::TreeUpdater::Create((uint64_t)&v66, *(_QWORD *)(a1 + 16), v2);
        if (v67.i8[15] < 0)
          operator delete(v66);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v45 + 32))(v45, a2);
        v47 = *(uint64_t **)(a1 + 368);
        v46 = *(_QWORD *)(a1 + 376);
        if ((unint64_t)v47 >= v46)
        {
          v49 = ((uint64_t)v47 - v43->i64[0]) >> 3;
          if ((unint64_t)(v49 + 1) >> 61)
            std::vector<void *>::__throw_length_error[abi:ne180100]();
          v50 = v46 - v43->i64[0];
          v51 = v50 >> 2;
          if (v50 >> 2 <= (unint64_t)(v49 + 1))
            v51 = v49 + 1;
          if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
            v52 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v52 = v51;
          v69 = a1 + 376;
          if (v52)
            v52 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v52);
          else
            v53 = 0;
          v54 = (uint64_t *)(v52 + 8 * v49);
          v55 = v52 + 8 * v53;
          v68 = v55;
          *v54 = v45;
          v48 = v54 + 1;
          v67.i64[1] = (uint64_t)(v54 + 1);
          v57 = *(_QWORD **)(a1 + 360);
          v56 = *(_QWORD **)(a1 + 368);
          if (v56 == v57)
          {
            v59 = vdupq_n_s64((unint64_t)v56);
          }
          else
          {
            do
            {
              v58 = *--v56;
              *v56 = 0;
              *--v54 = v58;
            }
            while (v56 != v57);
            v59 = *v43;
            v48 = (_QWORD *)v67.i64[1];
            v55 = v68;
          }
          *(_QWORD *)(a1 + 360) = v54;
          *(_QWORD *)(a1 + 368) = v48;
          v67 = v59;
          v60 = *(_QWORD *)(a1 + 376);
          *(_QWORD *)(a1 + 376) = v55;
          v68 = v60;
          v66 = (void *)v59.i64[0];
          std::__split_buffer<std::unique_ptr<xgboost::RegTree>>::~__split_buffer((uint64_t)&v66);
        }
        else
        {
          *v47 = v45;
          v48 = v47 + 1;
        }
        *(_QWORD *)(a1 + 368) = v48;
        v41 += 24;
      }
      while (v41 != v42);
    }
    goto LABEL_75;
  }
  __p[0] = (void *)(0xAAAAAAAAAAAAAAABLL * ((v75 - v74) >> 3));
  v73 = v5 >> 3;
  if (__p[0] != (void *)(v5 >> 3))
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v66);
    if (v66)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
      v7 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: ", 14);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"ups.size() == updaters_.size()", 30);
      v10 = *((char *)v66 + 23);
      v11 = v10 >= 0 ? v66 : *(void **)v66;
      v12 = v10 >= 0 ? *((unsigned __int8 *)v66 + 23) : *((_QWORD *)v66 + 1);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v11, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
      v14 = v66;
      v66 = 0;
      if (v14)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v66, (uint64_t)v14);
    }
  }
  v15 = *(_QWORD **)(a1 + 360);
  v16 = *(_QWORD **)(a1 + 368);
  if (v15 == v16)
    goto LABEL_75;
  v17 = (void *)*MEMORY[0x24BEDB7F0];
  v62 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v63 = *(void **)(MEMORY[0x24BEDB7F0] + 64);
  v61 = MEMORY[0x24BEDB848] + 16;
  do
  {
    v19 = v74;
    v18 = v75;
    while (v19 != v18)
    {
      v20 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v15 + 64))(*v15);
      v21 = strlen(v20);
      v22 = v21;
      if (*(char *)(v19 + 23) < 0)
      {
        if (v21 != *(_QWORD *)(v19 + 8))
          goto LABEL_26;
        if (v21 == -1)
          std::string::__throw_out_of_range[abi:ne180100]();
        v23 = *(const void **)v19;
      }
      else
      {
        v23 = (const void *)v19;
        if (v22 != *(unsigned __int8 *)(v19 + 23))
          goto LABEL_26;
      }
      if (!memcmp(v23, v20, v22))
        goto LABEL_50;
LABEL_26:
      v19 += 24;
    }
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v66);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v67.i64[1], (uint64_t)"Internal Error: ", 16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" mismatched updater sequence.\n", 30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v67.i64[1], (uint64_t)"Specified updaters: ", 20);
    v25 = v74;
    v26 = v75;
    while (v25 != v26)
    {
      v27 = *(char *)(v25 + 23);
      if (v27 >= 0)
        v28 = v25;
      else
        v28 = *(_QWORD *)v25;
      if (v27 >= 0)
        v29 = *(unsigned __int8 *)(v25 + 23);
      else
        v29 = *(_QWORD *)(v25 + 8);
      v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v67.i64[1], v28, v29);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" ", 1);
      v25 += 24;
    }
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v67.i64[1], (uint64_t)"\n", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Actual updaters: ", 17);
    v32 = *(_QWORD **)(a1 + 360);
    v33 = *(_QWORD **)(a1 + 368);
    while (v32 != v33)
    {
      v34 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v32 + 64))(*v32);
      v35 = strlen(v34);
      v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v67.i64[1], (uint64_t)v34, v35);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" ", 1);
      ++v32;
    }
    v37 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v73);
    dmlc::LogMessageFatal::Entry::Init(v37, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
    v38 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v73);
    std::stringbuf::str();
    if ((v65 & 0x80u) == 0)
      v39 = __p;
    else
      v39 = (void **)__p[0];
    if ((v65 & 0x80u) == 0)
      v40 = v65;
    else
      v40 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)v39, v40);
    if ((char)v65 < 0)
      operator delete(__p[0]);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v73);
    v66 = v17;
    *(void **)((char *)&v66 + *((_QWORD *)v17 - 3)) = v63;
    v67.i64[1] = v62;
    v68 = v61;
    if (v71 < 0)
      operator delete(v70);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227666FE4](&v72);
LABEL_50:
    ++v15;
  }
  while (v15 != v16);
LABEL_75:
  v66 = &v74;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v76.__r_.__value_.__l.__data_);
}

void sub_220ECE388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  a13 = (void *)(v24 - 136);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  if (*(char *)(v24 - 89) < 0)
    operator delete(*(void **)(v24 - 112));
  _Unwind_Resume(a1);
}

void xgboost::gbm::GBTree::ConfigureWithKnownData(uint64_t a1, uint64_t *a2, xgboost::DMatrix *a3)
{
  _OWORD *v6;
  __n128 v7;
  __n128 v8;
  uint64_t v9;
  std::string::size_type size;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  std::string *v14;
  void *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  std::string *Entry;
  _QWORD *v25;
  _QWORD *v26;
  std::string *v27;
  _QWORD *v28;
  _QWORD *v29;
  void *__p[2];
  char v31;
  void **v32[34];
  _BYTE v33[24];
  std::string v34;

  if (!*(_BYTE *)(a1 + 330))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v32);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
    v25 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v32);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Check failed: this->configured_", 31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v32);
  }
  v6 = (_OWORD *)(a1 + 288);
  if (*(char *)(a1 + 311) < 0)
  {
    std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)(a1 + 288), *(_QWORD *)(a1 + 296));
  }
  else
  {
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = *v6;
    v34.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 304);
  }
  if (!*(_BYTE *)(a1 + 280))
  {
    v27 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v32);
    dmlc::LogMessageFatal::Entry::Init(v27, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
    v28 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v32);
    v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Check failed: tparam_.GetInitialised()", 38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v32);
  }
  xgboost::XGBoostParameter<xgboost::gbm::GBTreeTrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::gbm::GBTreeTrainParam *)v33, (_BYTE *)(a1 + 280), a2);
  v32[0] = (void **)v33;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](v32);
  xgboost::gbm::GBTree::PerformTreeMethodHeuristic((xgboost::gbm::GBTree *)a1, a3);
  xgboost::gbm::GBTree::ConfigureUpdaters((xgboost::gbm::GBTree *)a1, v7);
  v9 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
  else
    size = v34.__r_.__value_.__l.__size_;
  v11 = *(unsigned __int8 *)(a1 + 311);
  v12 = (char)v11;
  if ((v11 & 0x80u) != 0)
    v11 = *(_QWORD *)(a1 + 296);
  if (size == v11)
  {
    if (v12 >= 0)
      v13 = (unsigned __int8 *)(a1 + 288);
    else
      v13 = *(unsigned __int8 **)v6;
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    {
      v15 = (void *)v34.__r_.__value_.__r.__words[0];
      if (!memcmp(v34.__r_.__value_.__l.__data_, v13, v34.__r_.__value_.__l.__size_))
      {
LABEL_40:
        operator delete(v15);
        return;
      }
    }
    else
    {
      if (!*((_BYTE *)&v34.__r_.__value_.__s + 23))
        return;
      v14 = &v34;
      while (v14->__r_.__value_.__s.__data_[0] == *v13)
      {
        v14 = (std::string *)((char *)v14 + 1);
        ++v13;
        if (!--v9)
        {
          if ((*((_BYTE *)&v34.__r_.__value_.__s + 23) & 0x80) == 0)
            return;
          goto LABEL_39;
        }
      }
    }
  }
  if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst(v8) + 4) >= 3)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
    xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)v32, (uint64_t)__p, 120, 3);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Using updaters: ", 16);
    v17 = *(char *)(a1 + 311);
    if (v17 >= 0)
      v18 = a1 + 288;
    else
      v18 = *(_QWORD *)(a1 + 288);
    if (v17 >= 0)
      v19 = *(unsigned __int8 *)(a1 + 311);
    else
      v19 = *(_QWORD *)(a1 + 296);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v18, v19);
    xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v32);
    if (v31 < 0)
      operator delete(__p[0]);
  }
  v20 = *(_QWORD **)(a1 + 360);
  v21 = *(_QWORD **)(a1 + 368);
  while (v21 != v20)
  {
    v23 = *--v21;
    v22 = v23;
    *v21 = 0;
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  }
  *(_QWORD *)(a1 + 368) = v20;
  xgboost::gbm::GBTree::InitUpdater(a1, (uint64_t)a2);
  if ((*((_BYTE *)&v34.__r_.__value_.__s + 23) & 0x80) != 0)
  {
LABEL_39:
    v15 = (void *)v34.__r_.__value_.__r.__words[0];
    goto LABEL_40;
  }
}

void sub_220ECE71C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a15);
  if (*(char *)(v15 - 73) < 0)
    operator delete(*(void **)(v15 - 96));
  _Unwind_Resume(a1);
}

void xgboost::gbm::GBTree::PerformTreeMethodHeuristic(xgboost::gbm::GBTree *this, xgboost::DMatrix *a2)
{
  void *Engine;
  __n128 v5;
  uint64_t v6;
  __n128 v7;
  __n128 v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  _QWORD v14[34];

  if (*((_BYTE *)this + 329) || *((_DWORD *)this + 80))
    return;
  Engine = rabit::engine::GetEngine(this);
  if ((*(unsigned int (**)(void *))(*(_QWORD *)Engine + 80))(Engine))
  {
    v6 = dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst(v5);
    if (*(int *)(v6 + 4) >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
      xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)v14, (uint64_t)__p, 138, 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Tree method is automatically selected to be 'approx' for distributed training.", 78);
      goto LABEL_12;
    }
LABEL_14:
    v11 = 1;
    goto LABEL_15;
  }
  if (((*(uint64_t (**)(xgboost::DMatrix *))(*(_QWORD *)a2 + 40))(a2) & 1) == 0)
  {
    v6 = dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst(v7);
    if (*(int *)(v6 + 4) < 2)
      goto LABEL_14;
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
    xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)v14, (uint64_t)__p, 142, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Tree method is automatically set to 'approx' since external-memory data matrix is used.", 87);
    goto LABEL_12;
  }
  v8.n128_f64[0] = (**(double (***)(xgboost::DMatrix *))a2)(a2);
  v9 = dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst(v8);
  v6 = v9;
  if (v10 >= 0x400000)
  {
    if (*(int *)(v9 + 4) < 2)
      goto LABEL_14;
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
    xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)v14, (uint64_t)__p, 147, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Tree method is automatically selected to be 'approx' for faster speed. To use old behavior (exact greedy algorithm on single machine), set tree_method to 'exact'.", 162);
LABEL_12:
    xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v14);
    if (v13 < 0)
      operator delete(__p[0]);
    goto LABEL_14;
  }
  v11 = 2;
LABEL_15:
  *((_DWORD *)this + 80) = v11;
  if (*(int *)(v6 + 4) > 2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
    xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)v14, (uint64_t)__p, 155, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Using tree method: ", 19);
    std::ostream::operator<<();
    xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v14);
    if (v13 < 0)
      operator delete(__p[0]);
  }
}

void sub_220ECE9AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)&a16);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void xgboost::gbm::GPUCopyGradient()
{
  std::string *Entry;
  _QWORD *v1;
  char v2;

  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v2);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/../common/common.h");
  v1 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v2);
}

void sub_220ECEA48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void xgboost::gbm::CopyGradient(_QWORD **a1, int a2, int a3, unsigned int a4, uint64_t **a5)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::string *Entry;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  void *ptr;
  int v21;
  std::exception_ptr v22;
  std::mutex v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v7 = *a5;
  v9 = **a5;
  v8 = (*a5)[1];
  v10 = *a1;
  v21 = a2;
  if (a2 < 1)
  {
    dmlc::LogCheckFormat<int,int>((uint64_t *)&v22);
    if (v22.__ptr_)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v21);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/../common/threading_utils.h");
      v13 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v21);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Check failed: ", 14);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"n_threads >= 1", 14);
      v16 = *((char *)v22.__ptr_ + 23);
      v17 = v16 >= 0 ? v22.__ptr_ : *(void **)v22.__ptr_;
      v18 = v16 >= 0 ? *((unsigned __int8 *)v22.__ptr_ + 23) : *((_QWORD *)v22.__ptr_ + 1);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v17, v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v21);
      ptr = v22.__ptr_;
      v22.__ptr_ = 0;
      if (ptr)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v22, (uint64_t)ptr);
    }
  }
  v22.__ptr_ = 0;
  v23.__m_.__sig = 850045863;
  memset(v23.__m_.__opaque, 0, sizeof(v23.__m_.__opaque));
  if (((unint64_t)(v8 - v9) >> 3))
  {
    v11 = 0;
    do
    {
      *(_QWORD *)(*v7 + v11) = *(_QWORD *)(*v10 + 8 * a4);
      v11 += 8;
      a4 += a3;
    }
    while (8 * ((unint64_t)(v8 - v9) >> 3) != v11);
  }
  dmlc::OMPException::Rethrow(&v22);
  std::mutex::~mutex(&v23);
  std::exception_ptr::~exception_ptr(&v22);
}

void sub_220ECEBF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, std::exception_ptr a12)
{
  _Unwind_Resume(exception_object);
}

void xgboost::gbm::GBTree::DoBoost(uint64_t a1, xgboost::DMatrix *a2, _QWORD **a3, _DWORD *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string *Entry;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  std::string *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  int v29;
  void *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  uint64_t v35;
  char v36;
  void *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  char v45;
  uint64_t v46;
  int64x2_t v47;
  _QWORD v51[6];
  int v52;
  uint64_t *v53;
  _QWORD v54[6];
  int v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  void *__p;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  _QWORD v68[3];
  unint64_t v69;
  uint64_t v70;
  int v71;

  memset(v68, 0, sizeof(v68));
  v5 = *(unsigned int *)(*(_QWORD *)(a1 + 32) + 8);
  xgboost::gbm::GBTree::ConfigureWithKnownData(a1, (uint64_t *)(a1 + 336), a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, "BoostNewTrees");
  xgboost::common::Monitor::Start();
  if (SHIBYTE(v61) < 0)
    operator delete(__p);
  if (*(_DWORD *)(a1 + 320) != 5 || (v6 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24), v6 == -1))
  {
    v8 = **(_QWORD **)a4;
    v7 = (*(_QWORD *)(*(_QWORD *)a4 + 8) - v8) >> 2;
    v6 = -1;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = *(_QWORD *)(**(uint64_t (***)(xgboost::DMatrix *))a2)(a2);
  v63 = v7;
  v64 = v8;
  v67 = v6;
  v61 = v9;
  v62 = (int)v5;
  __p = (void *)(int)v5;
  v60 = 1;
  v10 = v9 * (int)v5;
  if (!v7)
    v10 = 0;
  v65 = v8;
  v66 = v10;
  LODWORD(v69) = v5;
  v71 = 0;
  if ((_DWORD)v5)
  {
    if ((_DWORD)v5 == 1)
    {
      v56 = 0;
      v57 = 0;
      v58 = 0;
      xgboost::gbm::GBTree::BoostNewTrees(a1, (uint64_t)a3, (uint64_t (***)(_QWORD))a2, 0, (xgboost::RegTree ***)&v56);
      v12 = v56;
      v11 = v57;
      std::vector<std::vector<std::unique_ptr<xgboost::RegTree>>>::push_back[abi:ne180100](v68, (uint64_t)&v56);
      if (v63 && !v64)
        std::terminate();
      if (v63)
        v13 = v61;
      else
        v13 = 0;
      v14 = *(_QWORD *)(a1 + 368);
      if (v14 != *(_QWORD *)(a1 + 360) && v11 - (_QWORD)v12 == 8 && *(_QWORD *)(*(_QWORD *)a4 + 8) != **(_QWORD **)a4)
      {
        v15 = *(_QWORD *)(v14 - 8);
        v54[0] = __p;
        v54[1] = v61;
        v54[2] = v63;
        v54[3] = v64;
        v54[4] = v64;
        v54[5] = v13;
        v55 = v67;
        if ((*(unsigned int (**)(uint64_t, xgboost::DMatrix *, _QWORD *))(*(_QWORD *)v15 + 56))(v15, a2, v54))
        {
          ++a4[2];
        }
      }
      v69 = (unint64_t)&v56;
      std::vector<std::unique_ptr<xgboost::TreeUpdater>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
      goto LABEL_60;
    }
  }
  else
  {
    dmlc::LogCheckFormat<int,int>((uint64_t *)&v56);
    if (v56)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v69);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
      v17 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v69);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Check failed: ", 14);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"ngroup != 0", 11);
      v20 = *((char *)v56 + 23);
      v21 = v20 >= 0 ? v56 : *(void **)v56;
      v22 = v20 >= 0 ? *((unsigned __int8 *)v56 + 23) : *((_QWORD *)v56 + 1);
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v21, v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v69);
      v24 = v56;
      v56 = 0;
      if (v24)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v56, (uint64_t)v24);
    }
  }
  v69 = ((uint64_t)((*a3)[1] - **a3) >> 3) % (unint64_t)(int)v5;
  v71 = 0;
  if (v69)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned int>((uint64_t *)&v56);
    if (v56)
    {
      v25 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v69);
      dmlc::LogMessageFatal::Entry::Init(v25, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
      v26 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v69);
      v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Check failed: ", 14);
      v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"in_gpair->Size() % ngroup == 0U", 31);
      v29 = *((char *)v56 + 23);
      v30 = v29 >= 0 ? v56 : *(void **)v56;
      v31 = v29 >= 0 ? *((unsigned __int8 *)v56 + 23) : *((_QWORD *)v56 + 1);
      v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v30, v31);
      v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"must have exactly ngroup * nrow gpairs", 38);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v69);
      v34 = v56;
      v56 = 0;
      if (v34)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v56, (uint64_t)v34);
    }
  }
  xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::HostDeviceVector(&v53, ((uint64_t)((*a3)[1] - **a3) >> 3) / (unint64_t)(int)v5, 0.0, 0.0);
  if ((int)v5 < 1)
    goto LABEL_58;
  v35 = 0;
  v36 = 1;
  do
  {
    xgboost::gbm::CopyGradient(a3, 1, v5, v35, &v53);
    v56 = 0;
    v57 = 0;
    v58 = 0;
    xgboost::gbm::GBTree::BoostNewTrees(a1, (uint64_t)&v53, (uint64_t (***)(_QWORD))a2, v35, (xgboost::RegTree ***)&v56);
    v37 = v56;
    v38 = v57;
    std::vector<std::vector<std::unique_ptr<xgboost::RegTree>>>::push_back[abi:ne180100](v68, (uint64_t)&v56);
    v39 = __p;
    v40 = v61;
    if (v63)
      v41 = v60 * v35;
    else
      v41 = 0;
    xgboost::common::Span<float,18446744073709551615ul>::subspan(&v63, v41, 0xFFFFFFFFFFFFFFFFLL, &v69);
    if (v69)
      v42 = v40;
    else
      v42 = 0;
    v43 = *(_QWORD *)(a1 + 368);
    if (v43 != *(_QWORD *)(a1 + 360)
      && (*(_QWORD *)(*(_QWORD *)a4 + 8) != **(_QWORD **)a4 ? (v44 = v38 - (_QWORD)v37 == 8) : (v44 = 0), v44))
    {
      v46 = *(_QWORD *)(v43 - 8);
      v51[0] = v39;
      v51[1] = v40;
      v51[2] = v69;
      v51[3] = v70;
      v51[4] = v70;
      v51[5] = v42;
      v52 = v67;
      v45 = (*(uint64_t (**)(uint64_t, xgboost::DMatrix *, _QWORD *))(*(_QWORD *)v46 + 56))(v46, a2, v51);
    }
    else
    {
      v45 = 0;
    }
    v36 &= v45;
    v69 = (unint64_t)&v56;
    std::vector<std::unique_ptr<xgboost::TreeUpdater>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
    ++v35;
  }
  while (v5 != v35);
  if ((v36 & 1) != 0)
LABEL_58:
    ++a4[2];
  xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::~HostDeviceVector((uint64_t *)&v53);
LABEL_60:
  std::string::basic_string[abi:ne180100]<0>(&v56, "BoostNewTrees");
  v47 = xgboost::common::Monitor::Stop();
  if (SHIBYTE(v58) < 0)
    operator delete(v56);
  (*(void (**)(uint64_t, _QWORD *, xgboost::DMatrix *, _DWORD *, int64x2_t))(*(_QWORD *)a1 + 176))(a1, v68, a2, a4, v47);
  __p = v68;
  std::vector<std::vector<std::unique_ptr<xgboost::RegTree>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_220ECF18C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;

  *(_QWORD *)(v39 - 112) = &__p;
  std::vector<std::unique_ptr<xgboost::TreeUpdater>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 112));
  a34 = v39 - 136;
  std::vector<std::vector<std::unique_ptr<xgboost::RegTree>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a34);
  _Unwind_Resume(a1);
}

void xgboost::gbm::GBTree::BoostNewTrees(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD), int a4, xgboost::RegTree ***a5)
{
  xgboost::RegTree **v9;
  xgboost::RegTree **v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char *v14;
  uint64_t v15;
  int v16;
  xgboost::RegTree *v17;
  xgboost::RegTree *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  std::string *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  const char *v27;
  size_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  std::string *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  int v36;
  void **v37;
  void *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  void **v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  xgboost::RegTree **v57;
  xgboost::RegTree *v58;
  unint64_t v59;
  xgboost::RegTree **v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  xgboost::RegTree **v66;
  char *v67;
  xgboost::RegTree **v68;
  xgboost::RegTree **v69;
  xgboost::RegTree **v70;
  xgboost::RegTree *v71;
  xgboost::RegTree **v72;
  xgboost::RegTree *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  xgboost::RegTree **v80;
  xgboost::RegTree *v81;
  int64x2_t v82;
  xgboost::RegTree **v83;
  std::string *Entry;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  const char *v89;
  size_t v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  std::string *v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  int v99;
  void **v100;
  void *v101;
  _QWORD *v102;
  _QWORD *v103;
  void **v104;
  _QWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111[3];
  void *__p;
  void *v113;
  unint64_t v114;
  void **v115;
  int64x2_t v116;
  char *v117;
  _QWORD *v118;

  __p = 0;
  v113 = 0;
  v114 = 0;
  v9 = *a5;
  v10 = a5[1];
  while (v10 != v9)
  {
    v12 = (uint64_t)*--v10;
    v11 = v12;
    *v10 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  a5[1] = v9;
  v13 = *(_DWORD *)(a1 + 44);
  if (v13 >= 1)
  {
    v14 = 0;
    v15 = 0;
    while (1)
    {
      v16 = *(_DWORD *)(a1 + 312);
      if (v16 == 1)
        break;
      if (!v16)
      {
        if ((*(unsigned int (**)(_QWORD))(***(_QWORD ***)(a1 + 360) + 40))(**(_QWORD **)(a1 + 360)))
        {
          Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v115);
          dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
          v85 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v115);
          v86 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)"Check failed: !updaters_.front()->CanModifyTree()", 49);
          v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)": ", 2);
          v89 = (const char *)(*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 360) + 64))(**(_QWORD **)(a1 + 360));
          v90 = strlen(v89);
          v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)v89, v90);
          v93 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)"can not be used to create new trees. ", 37);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v115);
        }
        v17 = (xgboost::RegTree *)operator new();
        v18 = xgboost::RegTree::RegTree(v17);
        memset(v111, 0, sizeof(v111));
        v19 = xgboost::TreeParam::__MANAGER__(v18);
        dmlc::parameter::ParamManager::RunUpdate<std::__wrap_iter<std::pair<std::string,std::string> const*>>(v19, (uint64_t)v17 + 8, *(_QWORD *)(a1 + 336), *(_QWORD *)(a1 + 344), 0, v111, 0);
        v115 = (void **)v111;
        std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v115);
        if ((unint64_t)v14 >= v114)
        {
          v45 = (char *)__p;
          v46 = (v14 - (_BYTE *)__p) >> 3;
          v47 = v46 + 1;
          if ((unint64_t)(v46 + 1) >> 61)
            std::vector<void *>::__throw_length_error[abi:ne180100]();
          v48 = v114 - (_QWORD)__p;
          if ((uint64_t)(v114 - (_QWORD)__p) >> 2 > v47)
            v47 = v48 >> 2;
          if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
            v49 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v49 = v47;
          if (v49)
            v49 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v49);
          else
            v50 = 0;
          v57 = (xgboost::RegTree **)(v49 + 8 * v46);
          *v57 = v17;
          v20 = v57 + 1;
          if (v14 != v45)
          {
            do
            {
              v58 = (xgboost::RegTree *)*((_QWORD *)v14 - 1);
              v14 -= 8;
              *--v57 = v58;
            }
            while (v14 != v45);
            v14 = (char *)__p;
          }
          __p = v57;
          v113 = v20;
          v114 = v49 + 8 * v50;
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_QWORD *)v14 = v17;
          v20 = v14 + 8;
        }
        v113 = v20;
        v60 = a5[1];
        v59 = (unint64_t)a5[2];
        if ((unint64_t)v60 >= v59)
        {
          v61 = v60 - *a5;
          if ((unint64_t)(v61 + 1) >> 61)
            std::vector<void *>::__throw_length_error[abi:ne180100]();
          v62 = v59 - (_QWORD)*a5;
          v63 = v62 >> 2;
          if (v62 >> 2 <= (unint64_t)(v61 + 1))
            v63 = v61 + 1;
          if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
            v64 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v64 = v63;
          v118 = a5 + 2;
          if (v64)
            v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(a5 + 2), v64);
          else
            v65 = 0;
          v66 = (xgboost::RegTree **)&v65[8 * v61];
          v67 = &v65[8 * v64];
          v117 = v67;
          *v66 = v17;
          v68 = v66 + 1;
          v116.i64[1] = (uint64_t)(v66 + 1);
          v70 = *a5;
          v69 = a5[1];
          if (v69 != *a5)
          {
            do
            {
              v71 = *--v69;
              *v69 = 0;
              *--v66 = v71;
            }
            while (v69 != v70);
            goto LABEL_84;
          }
LABEL_85:
          v82 = vdupq_n_s64((unint64_t)v69);
          goto LABEL_86;
        }
LABEL_72:
        *v60 = v17;
        v68 = v60 + 1;
        goto LABEL_87;
      }
LABEL_88:
      if (++v15 >= v13)
        goto LABEL_89;
    }
    v22 = *(_QWORD **)(a1 + 360);
    v21 = *(_QWORD **)(a1 + 368);
    while (v22 != v21)
    {
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v22 + 40))(*v22) & 1) == 0)
      {
        v23 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v115);
        dmlc::LogMessageFatal::Entry::Init(v23, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
        v24 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v115);
        v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Check failed: up->CanModifyTree()", 33);
        v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)": ", 2);
        v27 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v22 + 64))(*v22);
        v28 = strlen(v27);
        v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)v27, v28);
        v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"can not be used to modify existing trees. ", 42);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v115);
      }
      ++v22;
    }
    v109 = (uint64_t)(*(_QWORD *)(a1 + 232) - *(_QWORD *)(a1 + 224)) >> 3;
    v110 = (uint64_t)(*(_QWORD *)(a1 + 208) - *(_QWORD *)(a1 + 200)) >> 3;
    if (v110 >= v109)
    {
      dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v115);
      if (v115)
      {
        v32 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v110);
        dmlc::LogMessageFatal::Entry::Init(v32, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
        v33 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v110);
        v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Check failed: ", 14);
        v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"model_.trees.size() < model_.trees_to_update.size()", 51);
        v36 = *((char *)v115 + 23);
        v37 = v36 >= 0 ? v115 : (void **)*v115;
        v38 = v36 >= 0 ? (void *)*((unsigned __int8 *)v115 + 23) : v115[1];
        v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v37, (uint64_t)v38);
        v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)": ", 2);
        v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"No more tree left for updating.  For updating existing trees, ", 62);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"boosting rounds can not exceed previous training rounds", 55);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v110);
        v42 = v115;
        v115 = 0;
        if (v42)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v115, (uint64_t)v42);
      }
    }
    v43 = v15 + *(int *)(a1 + 44) * (uint64_t)a4 + ((*(_QWORD *)(a1 + 208) - *(_QWORD *)(a1 + 200)) >> 3);
    v44 = *(_QWORD *)(a1 + 224);
    v17 = *(xgboost::RegTree **)(v44 + 8 * v43);
    *(_QWORD *)(v44 + 8 * v43) = 0;
    if ((unint64_t)v14 >= v114)
    {
      v51 = (char *)__p;
      v52 = (v14 - (_BYTE *)__p) >> 3;
      v53 = v52 + 1;
      if ((unint64_t)(v52 + 1) >> 61)
        std::vector<void *>::__throw_length_error[abi:ne180100]();
      v54 = v114 - (_QWORD)__p;
      if ((uint64_t)(v114 - (_QWORD)__p) >> 2 > v53)
        v53 = v54 >> 2;
      if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8)
        v55 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v55 = v53;
      if (v55)
        v55 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v55);
      else
        v56 = 0;
      v72 = (xgboost::RegTree **)(v55 + 8 * v52);
      *v72 = v17;
      v20 = v72 + 1;
      if (v14 != v51)
      {
        do
        {
          v73 = (xgboost::RegTree *)*((_QWORD *)v14 - 1);
          v14 -= 8;
          *--v72 = v73;
        }
        while (v14 != v51);
        v14 = (char *)__p;
      }
      __p = v72;
      v113 = v20;
      v114 = v55 + 8 * v56;
      if (v14)
        operator delete(v14);
    }
    else
    {
      *(_QWORD *)v14 = v17;
      v20 = v14 + 8;
    }
    v113 = v20;
    v60 = a5[1];
    v74 = (unint64_t)a5[2];
    if ((unint64_t)v60 < v74)
      goto LABEL_72;
    v75 = v60 - *a5;
    if ((unint64_t)(v75 + 1) >> 61)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v76 = v74 - (_QWORD)*a5;
    v77 = v76 >> 2;
    if (v76 >> 2 <= (unint64_t)(v75 + 1))
      v77 = v75 + 1;
    if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8)
      v78 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v78 = v77;
    v118 = a5 + 2;
    if (v78)
      v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(a5 + 2), v78);
    else
      v79 = 0;
    v66 = (xgboost::RegTree **)&v79[8 * v75];
    v67 = &v79[8 * v78];
    v117 = v67;
    *v66 = v17;
    v68 = v66 + 1;
    v116.i64[1] = (uint64_t)(v66 + 1);
    v80 = *a5;
    v69 = a5[1];
    if (v69 == *a5)
      goto LABEL_85;
    do
    {
      v81 = *--v69;
      *v69 = 0;
      *--v66 = v81;
    }
    while (v69 != v80);
LABEL_84:
    v82 = *(int64x2_t *)a5;
    v68 = (xgboost::RegTree **)v116.i64[1];
    v67 = v117;
LABEL_86:
    *a5 = v66;
    a5[1] = v68;
    v116 = v82;
    v83 = a5[2];
    a5[2] = (xgboost::RegTree **)v67;
    v117 = (char *)v83;
    v115 = (void **)v82.i64[0];
    std::__split_buffer<std::unique_ptr<xgboost::RegTree>>::~__split_buffer((uint64_t)&v115);
LABEL_87:
    a5[1] = v68;
    v13 = *(_DWORD *)(a1 + 44);
    v14 = (char *)v20;
    goto LABEL_88;
  }
LABEL_89:
  v110 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 3;
  v94 = (_QWORD *)(**a3)(a3);
  if (v110 != *v94)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long long>((uint64_t *)&v115);
    if (v115)
    {
      v95 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v110);
      dmlc::LogMessageFatal::Entry::Init(v95, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
      v96 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v110);
      v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)"Check failed: ", 14);
      v98 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"gpair->Size() == p_fmat->Info().num_row_", 40);
      v99 = *((char *)v115 + 23);
      v100 = v99 >= 0 ? v115 : (void **)*v115;
      v101 = v99 >= 0 ? (void *)*((unsigned __int8 *)v115 + 23) : v115[1];
      v102 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)v100, (uint64_t)v101);
      v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"Mismatching size between number of rows from input data and size of gradient vector.", 84);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v110);
      v104 = v115;
      v115 = 0;
      if (v104)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v115, (uint64_t)v104);
    }
  }
  v106 = *(_QWORD **)(a1 + 360);
  v105 = *(_QWORD **)(a1 + 368);
  while (v106 != v105)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t (***)(_QWORD), void **))(*(_QWORD *)*v106 + 48))(*v106, a2, a3, &__p);
    ++v106;
  }
  if (__p)
  {
    v113 = __p;
    operator delete(__p);
  }
}

void sub_220ECFA64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::vector<std::unique_ptr<xgboost::RegTree>>>::push_back[abi:ne180100](_QWORD *result, uint64_t a2)
{
  char **v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  __int128 v15;
  int64x2_t v16;
  char *v17;
  uint64_t v18;
  int64x2_t v19;
  char *v20;
  _QWORD *v21;

  v3 = (char **)result;
  v4 = result[2];
  v5 = (_QWORD *)result[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *result) >> 3);
    v8 = v7 + 1;
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *result) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v8 = 0xAAAAAAAAAAAAAAALL;
    v21 = result + 2;
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v10 = 3 * v8;
    v11 = (char *)operator new(24 * v8);
    v12 = &v11[24 * v7];
    *(_OWORD *)v12 = *(_OWORD *)a2;
    *((_QWORD *)v12 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v6 = v12 + 24;
    v14 = *v3;
    v13 = v3[1];
    if (v13 == *v3)
    {
      v16 = vdupq_n_s64((unint64_t)v13);
    }
    else
    {
      do
      {
        *((_QWORD *)v12 - 3) = 0;
        *((_QWORD *)v12 - 2) = 0;
        v12 -= 24;
        *((_QWORD *)v12 + 2) = 0;
        v15 = *(_OWORD *)(v13 - 24);
        v13 -= 24;
        *(_OWORD *)v12 = v15;
        *((_QWORD *)v12 + 2) = *((_QWORD *)v13 + 2);
        *(_QWORD *)v13 = 0;
        *((_QWORD *)v13 + 1) = 0;
        *((_QWORD *)v13 + 2) = 0;
      }
      while (v13 != v14);
      v16 = *(int64x2_t *)v3;
    }
    *v3 = v12;
    v3[1] = v6;
    v19 = v16;
    v17 = v3[2];
    v3[2] = &v11[8 * v10];
    v20 = v17;
    v18 = v16.i64[0];
    result = (_QWORD *)std::__split_buffer<std::vector<std::unique_ptr<xgboost::RegTree>>>::~__split_buffer((uint64_t)&v18);
  }
  else
  {
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
    *(_OWORD *)v5 = *(_OWORD *)a2;
    v5[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v6 = (char *)(v5 + 3);
  }
  v3[1] = v6;
  return result;
}

void xgboost::gbm::GBTree::CommitModel(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  void *__p[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(__p, "CommitModel");
  xgboost::common::Monitor::Start();
  if (v7 < 0)
    operator delete(__p[0]);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 8))
  {
    v4 = 0;
    v5 = 0;
    do
    {
      xgboost::gbm::GBTreeModel::CommitModel(a1 + 24, (char **)(*a2 + v4), v5++);
      v4 += 24;
    }
    while (v5 < *(unsigned int *)(*(_QWORD *)(a1 + 32) + 8));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "CommitModel");
  xgboost::common::Monitor::Stop();
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_220ECFDB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost::gbm::GBTreeModel::CommitModel(uint64_t a1, char **a2, int a3)
{
  char *v4;
  char *v5;
  int64x2_t *v7;
  void **v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  int64x2_t v24;
  char *v25;
  unint64_t v26;
  char *v27;
  _DWORD *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  int v36;
  char *v37;
  uint64_t v39;
  int64x2_t v40;
  char *v41;
  uint64_t v42;

  v4 = *a2;
  v5 = a2[1];
  if (*a2 == v5)
  {
    v37 = *a2;
  }
  else
  {
    v7 = (int64x2_t *)(a1 + 176);
    v8 = (void **)(a1 + 224);
    do
    {
      v10 = *(_QWORD **)(a1 + 184);
      v9 = *(_QWORD *)(a1 + 192);
      if ((unint64_t)v10 >= v9)
      {
        v13 = ((uint64_t)v10 - v7->i64[0]) >> 3;
        if ((unint64_t)(v13 + 1) >> 61)
          std::vector<void *>::__throw_length_error[abi:ne180100]();
        v14 = v9 - v7->i64[0];
        v15 = v14 >> 2;
        if (v14 >> 2 <= (unint64_t)(v13 + 1))
          v15 = v13 + 1;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        v42 = a1 + 192;
        if (v16)
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a1 + 192, v16);
        else
          v17 = 0;
        v18 = &v17[8 * v13];
        v19 = &v17[8 * v16];
        v41 = v19;
        v20 = *(_QWORD *)v4;
        *(_QWORD *)v4 = 0;
        *(_QWORD *)v18 = v20;
        v12 = v18 + 8;
        v40.i64[1] = (uint64_t)(v18 + 8);
        v22 = *(_QWORD **)(a1 + 176);
        v21 = *(_QWORD **)(a1 + 184);
        if (v21 == v22)
        {
          v24 = vdupq_n_s64((unint64_t)v21);
        }
        else
        {
          do
          {
            v23 = *--v21;
            *v21 = 0;
            *((_QWORD *)v18 - 1) = v23;
            v18 -= 8;
          }
          while (v21 != v22);
          v24 = *v7;
          v12 = (_QWORD *)v40.i64[1];
          v19 = v41;
        }
        *(_QWORD *)(a1 + 176) = v18;
        *(_QWORD *)(a1 + 184) = v12;
        v40 = v24;
        v25 = *(char **)(a1 + 192);
        *(_QWORD *)(a1 + 192) = v19;
        v41 = v25;
        v39 = v24.i64[0];
        std::__split_buffer<std::unique_ptr<xgboost::RegTree>>::~__split_buffer((uint64_t)&v39);
      }
      else
      {
        v11 = *(_QWORD *)v4;
        *(_QWORD *)v4 = 0;
        *v10 = v11;
        v12 = v10 + 1;
      }
      *(_QWORD *)(a1 + 184) = v12;
      v27 = *(char **)(a1 + 232);
      v26 = *(_QWORD *)(a1 + 240);
      if ((unint64_t)v27 >= v26)
      {
        v29 = (char *)*v8;
        v30 = (v27 - (_BYTE *)*v8) >> 2;
        v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 62)
          std::vector<xgboost::TreeUpdaterReg const*>::__throw_length_error[abi:ne180100]();
        v32 = v26 - (_QWORD)v29;
        if (v32 >> 1 > v31)
          v31 = v32 >> 1;
        if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
          v33 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v33 = v31;
        if (v33)
        {
          v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 240, v33);
          v29 = *(char **)(a1 + 224);
          v27 = *(char **)(a1 + 232);
        }
        else
        {
          v34 = 0;
        }
        v35 = &v34[4 * v30];
        *(_DWORD *)v35 = a3;
        v28 = v35 + 4;
        while (v27 != v29)
        {
          v36 = *((_DWORD *)v27 - 1);
          v27 -= 4;
          *((_DWORD *)v35 - 1) = v36;
          v35 -= 4;
        }
        *(_QWORD *)(a1 + 224) = v35;
        *(_QWORD *)(a1 + 232) = v28;
        *(_QWORD *)(a1 + 240) = &v34[4 * v33];
        if (v29)
          operator delete(v29);
      }
      else
      {
        *(_DWORD *)v27 = a3;
        v28 = v27 + 4;
      }
      *(_QWORD *)(a1 + 232) = v28;
      v4 += 8;
    }
    while (v4 != v5);
    v4 = *a2;
    v37 = a2[1];
  }
  *(_DWORD *)(a1 + 16) += (unint64_t)(v37 - v4) >> 3;
}

void xgboost::gbm::GBTree::LoadConfig(xgboost::gbm::GBTree *this, const xgboost::Json *a2)
{
  _DWORD **v3;
  _QWORD *v4;
  char **v5;
  int v6;
  char *v7;
  int v8;
  int v9;
  BOOL v10;
  std::string *Entry;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _DWORD **v20;
  xgboost::gbm::GBTreeTrainParam *v21;
  const void **v22;
  const void ***v23;
  char *v24;
  uint64_t *v25;
  const void **v26;
  const void ***v27;
  __n128 v28;
  __n128 v29;
  _DWORD **v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  int64x2_t *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  void *v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  int64x2_t v53;
  void *v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  xgboost::Value *v58;
  std::string *v59;
  _QWORD *v60;
  std::string *v61;
  __int128 v62;
  std::string *v63;
  __int128 v64;
  void **v65;
  std::string::size_type v66;
  std::string *v67;
  __int128 v68;
  _BYTE *v69;
  uint64_t v70;
  void *v72[2];
  char v73;
  _BYTE v74[24];
  _BYTE v75[24];
  std::vector<std::pair<std::string, std::string>> v76;
  _QWORD v77[2];
  char v78;
  void *v79[2];
  unsigned __int8 v80;
  std::string v81;
  std::string v82;
  std::string v83;
  char v84;
  _BYTE __p[24];
  void *v86[2];
  char v87;
  __int128 v88[14];
  uint64_t v89;

  v89 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  v3 = (_DWORD **)(*(uint64_t (**)(_QWORD, _BYTE *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, __p);
  v4 = xgboost::Cast<xgboost::JsonString const,xgboost::Value const>(*v3);
  v5 = (char **)(v4 + 2);
  v6 = *((char *)v4 + 39);
  if (v6 < 0)
  {
    if (v4[3] != 6)
    {
LABEL_10:
      dmlc::LogCheckFormat<std::string,char [7]>((uint64_t)v5, "gbtree", (uint64_t *)&v83);
      goto LABEL_11;
    }
    v7 = *v5;
  }
  else
  {
    v7 = (char *)(v4 + 2);
    if (v6 != 6)
      goto LABEL_10;
  }
  v8 = *(_DWORD *)v7;
  v9 = *((unsigned __int16 *)v7 + 2);
  v10 = v8 == 1920229991 && v9 == 25957;
  if (!v10)
    goto LABEL_10;
  v83.__r_.__value_.__r.__words[0] = 0;
LABEL_11:
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (v83.__r_.__value_.__r.__words[0])
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
    v12 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Check failed: ", 14);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"get<String>(in[\"name\"]) == \"gbtree\"", 35);
    v15 = *(char *)(v83.__r_.__value_.__r.__words[0] + 23);
    v16 = v15 >= 0 ? v83.__r_.__value_.__r.__words[0] : *(_QWORD *)v83.__r_.__value_.__l.__data_;
    v17 = v15 >= 0
        ? *(unsigned __int8 *)(v83.__r_.__value_.__r.__words[0] + 23)
        : *(_QWORD *)(v83.__r_.__value_.__r.__words[0] + 8);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
    v19 = v83.__r_.__value_.__r.__words[0];
    v83.__r_.__value_.__r.__words[0] = 0;
    if (v19)
      std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v83, v19);
  }
  std::string::basic_string[abi:ne180100]<0>(&v83, "gbtree_train_param");
  v20 = (_DWORD **)(*(uint64_t (**)(_QWORD, std::string *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v83);
  v21 = (xgboost::gbm::GBTreeTrainParam *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*v20);
  *(_QWORD *)&__p[8] = 0;
  *(_QWORD *)&__p[16] = 0;
  *(_QWORD *)__p = &__p[8];
  v22 = (const void **)*((_QWORD *)v21 + 2);
  v23 = (const void ***)((char *)v21 + 24);
  if (v22 != (const void **)((char *)v21 + 24))
  {
    do
    {
      v24 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>(v22[7]);
      v82.__r_.__value_.__r.__words[0] = (std::string::size_type)(v22 + 4);
      v25 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)__p, v22 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)&v82);
      v21 = (xgboost::gbm::GBTreeTrainParam *)std::string::operator=((std::string *)(v25 + 7), (const std::string *)(v24 + 16));
      v26 = (const void **)v22[1];
      if (v26)
      {
        do
        {
          v27 = (const void ***)v26;
          v26 = (const void **)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (const void ***)v22[2];
          v10 = *v27 == v22;
          v22 = (const void **)v27;
        }
        while (!v10);
      }
      v22 = (const void **)v27;
    }
    while (v27 != v23);
  }
  if (*((_BYTE *)this + 280))
  {
    memset(&v76, 0, sizeof(v76));
    xgboost::gbm::GBTreeTrainParam::__MANAGER__(v21);
    dmlc::parameter::ParamManager::RunUpdate<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&stru_253F36AB8, (uint64_t)this + 280, *(_QWORD **)__p, &__p[8], 0, &v76, 0);
  }
  else
  {
    memset(&v76, 0, sizeof(v76));
    xgboost::gbm::GBTreeTrainParam::__MANAGER__(v21);
    dmlc::parameter::ParamManager::RunInit<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&stru_253F36AB8, (uint64_t)this + 280, *(_QWORD **)__p, &__p[8], &v76, 0);
    *((_BYTE *)this + 280) = 1;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)__p, *(_QWORD **)&__p[8]);
  *(_QWORD *)__p = &v76;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v83.__r_.__value_.__l.__data_);
  *((_DWORD *)this + 78) = 0;
  if (*((_DWORD *)this + 79) == 2)
  {
    if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst(v28) + 4) >= 1)
    {
      std::string::basic_string[abi:ne180100]<0>(&v83, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
      xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)__p, (uint64_t)&v83, 383, 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Loading from a raw memory buffer on CPU only machine.  Changing predictor to auto.", 82);
      xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)__p);
      if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v83.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "predictor");
    std::string::basic_string[abi:ne180100]<0>(v86, "auto");
    memset(&v83, 0, sizeof(v83));
    v82.__r_.__value_.__r.__words[0] = (std::string::size_type)&v83;
    v82.__r_.__value_.__s.__data_[8] = 0;
    v83.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
    v83.__r_.__value_.__l.__size_ = v83.__r_.__value_.__r.__words[0];
    v83.__r_.__value_.__r.__words[2] = v83.__r_.__value_.__r.__words[0] + 48;
    v83.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)&v83.__r_.__value_.__r.__words[2], (__int128 *)__p, v88, (std::string *)v83.__r_.__value_.__l.__data_);
    xgboost::XGBoostParameter<xgboost::gbm::GBTreeTrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::gbm::GBTreeTrainParam *)v75, (_BYTE *)this + 280, (uint64_t *)&v83);
    v82.__r_.__value_.__r.__words[0] = (std::string::size_type)v75;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v82);
    v82.__r_.__value_.__r.__words[0] = (std::string::size_type)&v83;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v82);
    if (v87 < 0)
      operator delete(v86[0]);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
  }
  if (*((_DWORD *)this + 80) == 5)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "tree_method");
    std::string::basic_string[abi:ne180100]<0>(v86, "hist");
    memset(&v83, 0, sizeof(v83));
    v82.__r_.__value_.__r.__words[0] = (std::string::size_type)&v83;
    v82.__r_.__value_.__s.__data_[8] = 0;
    v83.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
    v83.__r_.__value_.__l.__size_ = v83.__r_.__value_.__r.__words[0];
    v83.__r_.__value_.__r.__words[2] = v83.__r_.__value_.__r.__words[0] + 48;
    v83.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)&v83.__r_.__value_.__r.__words[2], (__int128 *)__p, v88, (std::string *)v83.__r_.__value_.__l.__data_);
    xgboost::XGBoostParameter<xgboost::gbm::GBTreeTrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::gbm::GBTreeTrainParam *)v74, (_BYTE *)this + 280, (uint64_t *)&v83);
    v82.__r_.__value_.__r.__words[0] = (std::string::size_type)v74;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v82);
    v82.__r_.__value_.__r.__words[0] = (std::string::size_type)&v83;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v82);
    if (v87 < 0)
      operator delete(v86[0]);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst(v29) + 4) >= 1)
    {
      std::string::basic_string[abi:ne180100]<0>(&v83, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
      xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)__p, (uint64_t)&v83, 390, 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Loading from a raw memory buffer on CPU only machine.  Changing tree_method to hist.", 84);
      xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)__p);
      if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v83.__r_.__value_.__l.__data_);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "updater");
  v30 = (_DWORD **)(*(uint64_t (**)(_QWORD, _BYTE *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, __p);
  v31 = (unint64_t)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*v30);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  v32 = (_QWORD *)*((_QWORD *)this + 45);
  v33 = (_QWORD *)*((_QWORD *)this + 46);
  while (v33 != v32)
  {
    v35 = *--v33;
    v34 = v35;
    *v33 = 0;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  }
  *((_QWORD *)this + 46) = v32;
  v36 = *(_QWORD **)(v31 + 16);
  v37 = (_QWORD *)(v31 + 24);
  if (v36 != (_QWORD *)(v31 + 24))
  {
    v38 = (int64x2_t *)((char *)this + 360);
    do
    {
      v31 = v31 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)(*((_QWORD *)this + 4) + 12);
      v39 = xgboost::TreeUpdater::Create((uint64_t)(v36 + 4), *((_QWORD *)this + 2), v31);
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v39 + 16))(v39, v36 + 7);
      v41 = (uint64_t *)*((_QWORD *)this + 46);
      v40 = *((_QWORD *)this + 47);
      if ((unint64_t)v41 >= v40)
      {
        v43 = ((uint64_t)v41 - v38->i64[0]) >> 3;
        if ((unint64_t)(v43 + 1) >> 61)
          std::vector<void *>::__throw_length_error[abi:ne180100]();
        v44 = v40 - v38->i64[0];
        v45 = v44 >> 2;
        if (v44 >> 2 <= (unint64_t)(v43 + 1))
          v45 = v43 + 1;
        if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
          v46 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v46 = v45;
        v86[1] = (char *)this + 376;
        if (v46)
          v46 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v46);
        else
          v47 = 0;
        v48 = (uint64_t *)(v46 + 8 * v43);
        v49 = (void *)(v46 + 8 * v47);
        v86[0] = v49;
        *v48 = v39;
        v42 = v48 + 1;
        *(_QWORD *)&__p[16] = v48 + 1;
        v51 = (_QWORD *)*((_QWORD *)this + 45);
        v50 = (_QWORD *)*((_QWORD *)this + 46);
        if (v50 == v51)
        {
          v53 = vdupq_n_s64((unint64_t)v50);
        }
        else
        {
          do
          {
            v52 = *--v50;
            *v50 = 0;
            *--v48 = v52;
          }
          while (v50 != v51);
          v53 = *v38;
          v42 = *(_QWORD **)&__p[16];
          v49 = v86[0];
        }
        *((_QWORD *)this + 45) = v48;
        *((_QWORD *)this + 46) = v42;
        *(int64x2_t *)&__p[8] = v53;
        v54 = (void *)*((_QWORD *)this + 47);
        *((_QWORD *)this + 47) = v49;
        v86[0] = v54;
        *(_QWORD *)__p = v53.i64[0];
        std::__split_buffer<std::unique_ptr<xgboost::RegTree>>::~__split_buffer((uint64_t)__p);
      }
      else
      {
        *v41 = v39;
        v42 = v41 + 1;
      }
      *((_QWORD *)this + 46) = v42;
      v55 = (_QWORD *)v36[1];
      if (v55)
      {
        do
        {
          v56 = v55;
          v55 = (_QWORD *)*v55;
        }
        while (v55);
      }
      else
      {
        do
        {
          v56 = (_QWORD *)v36[2];
          v10 = *v56 == (_QWORD)v36;
          v36 = v56;
        }
        while (!v10);
      }
      v36 = v56;
    }
    while (v56 != v37);
  }
  std::string::basic_string[abi:ne180100]<0>(v72, "specified_updater");
  v57 = (*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, v72);
  v58 = *(xgboost::Value **)v57;
  if (*(_DWORD *)(*(_QWORD *)v57 + 12) != 5)
  {
    v59 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v84);
    dmlc::LogMessageFatal::Entry::Init(v59, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/json.h");
    v60 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v84);
    xgboost::Value::TypeStr(v58, &v81);
    v61 = std::string::insert(&v81, 0, "Invalid cast, from ");
    v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
    v82.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v62;
    v61->__r_.__value_.__l.__size_ = 0;
    v61->__r_.__value_.__r.__words[2] = 0;
    v61->__r_.__value_.__r.__words[0] = 0;
    v63 = std::string::append(&v82, " to ");
    v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
    v83.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v64;
    v63->__r_.__value_.__l.__size_ = 0;
    v63->__r_.__value_.__r.__words[2] = 0;
    v63->__r_.__value_.__r.__words[0] = 0;
    v77[1] = 0x500000000;
    v77[0] = &off_24E6BE468;
    v78 = 0;
    xgboost::Value::TypeStr((xgboost::Value *)v77, v79);
    if ((v80 & 0x80u) == 0)
      v65 = v79;
    else
      v65 = (void **)v79[0];
    if ((v80 & 0x80u) == 0)
      v66 = v80;
    else
      v66 = (std::string::size_type)v79[1];
    v67 = std::string::append(&v83, (const std::string::value_type *)v65, v66);
    v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
    *(_QWORD *)&__p[16] = *((_QWORD *)&v67->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v68;
    v67->__r_.__value_.__l.__size_ = 0;
    v67->__r_.__value_.__r.__words[2] = 0;
    v67->__r_.__value_.__r.__words[0] = 0;
    if (__p[23] >= 0)
      v69 = __p;
    else
      v69 = *(_BYTE **)__p;
    if (__p[23] >= 0)
      v70 = __p[23];
    else
      v70 = *(_QWORD *)&__p[8];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)v69, v70);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    if ((char)v80 < 0)
      operator delete(v79[0]);
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v83.__r_.__value_.__l.__data_);
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v82.__r_.__value_.__l.__data_);
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v81.__r_.__value_.__l.__data_);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v84);
  }
  if (v73 < 0)
    operator delete(v72[0]);
}

void sub_220ED0928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,int a53,__int16 a54,char a55,char a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)&a57);
  if (a52 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'xgboost::gbm::GBTree::LoadConfig(xgboost::gbm::GBTree *this, const xgboost::Json *a2)
{
  xgboost::gbm::GBTree::LoadConfig((xgboost::gbm::GBTree *)((char *)this - 8), a2);
}

void xgboost::gbm::GBTree::SaveConfig(xgboost::gbm::GBTree *this, xgboost::Json *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  BOOL v10;
  unsigned int **v11;
  _QWORD *v12;
  uint64_t *v13;
  unsigned int **v14;
  unsigned int **v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  char *v19;
  unsigned int **v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t *v25;
  _QWORD v26[2];
  char v27;
  void *v28[2];
  char v29;
  void *v30[2];
  uint64_t *v31;
  _QWORD *v32[2];
  void *v33;
  uint64_t v34;
  void *v35[2];
  uint64_t *v36;
  void *__p;
  _QWORD *v38;
  char v39;

  std::string::basic_string[abi:ne180100]<0>(v30, "gbtree");
  v34 = 0;
  v33 = off_24E6BE2B8;
  *(_OWORD *)v35 = *(_OWORD *)v30;
  v36 = v31;
  v30[0] = 0;
  v30[1] = 0;
  v31 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "name");
  v4 = (uint64_t *)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &__p);
  v5 = xgboost::Json::operator=(v4, (uint64_t)&v33);
  if (v39 < 0)
    operator delete(__p);
  v33 = off_24E6BE2B8;
  if (SHIBYTE(v36) < 0)
    operator delete(v35[0]);
  if (SHIBYTE(v31) < 0)
    operator delete(v30[0]);
  v30[1] = (void *)0x300000000;
  v30[0] = &off_24E6BE1D0;
  v32[0] = 0;
  v32[1] = 0;
  v31 = (uint64_t *)v32;
  xgboost::gbm::GBTreeTrainParam::__MANAGER__((xgboost::gbm::GBTreeTrainParam *)v5);
  dmlc::parameter::ParamManager::GetDict((dmlc::parameter::ParamManager *)&stru_253F36AB8, (char *)this + 280, (std::vector<std::pair<std::string, std::string>> *)&v33);
  std::map<std::string,std::string>::map[abi:ne180100]<std::__wrap_iter<std::pair<std::string,std::string> *>>((uint64_t)&__p, (const void **)v33, (const void **)v34);
  v28[0] = &v33;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)v28);
  v6 = (char *)__p;
  if (__p != &v38)
  {
    do
    {
      xgboost::JsonString::JsonString(&v33, (__int128 *)(v6 + 56));
      v28[0] = v6 + 32;
      v7 = std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v31, (const void **)v6 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)v28);
      xgboost::Json::operator=(v7 + 7, (uint64_t)&v33);
      v33 = off_24E6BE2B8;
      if (SHIBYTE(v36) < 0)
        operator delete(v35[0]);
      v8 = (char *)*((_QWORD *)v6 + 1);
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = *(char **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (char *)*((_QWORD *)v6 + 2);
          v10 = *(_QWORD *)v9 == (_QWORD)v6;
          v6 = v9;
        }
        while (!v10);
      }
      v6 = v9;
    }
    while (v9 != (char *)&v38);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&__p, v38);
  std::string::basic_string[abi:ne180100]<0>(&v33, "gbtree_train_param");
  v11 = (unsigned int **)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v33);
  xgboost::Json::operator=(v11, (uint64_t)v30);
  if (SHIBYTE(v35[0]) < 0)
    operator delete(v33);
  v30[0] = &off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&v31, v32[0]);
  std::string::basic_string[abi:ne180100]<0>(v30, "default");
  v33 = off_24E6BE2B8;
  v34 = 0;
  *(_OWORD *)v35 = *(_OWORD *)v30;
  v36 = v31;
  v30[0] = 0;
  v30[1] = 0;
  v31 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "gbtree_train_param");
  v12 = (_QWORD *)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &__p);
  std::string::basic_string[abi:ne180100]<0>(v28, "process_type");
  v13 = (uint64_t *)(*(uint64_t (**)(_QWORD, void **))(*(_QWORD *)*v12 + 24))(*v12, v28);
  xgboost::Json::operator=(v13, (uint64_t)&v33);
  if (v29 < 0)
    operator delete(v28[0]);
  if (v39 < 0)
    operator delete(__p);
  v33 = off_24E6BE2B8;
  if (SHIBYTE(v36) < 0)
    operator delete(v35[0]);
  if (SHIBYTE(v31) < 0)
    operator delete(v30[0]);
  xgboost::ToJson<xgboost::gbm::GBTreeModelParam>((xgboost::gbm::GBTree *)((char *)this + 40), (uint64_t)&v33);
  std::string::basic_string[abi:ne180100]<0>(v30, "gbtree_model_param");
  v14 = (unsigned int **)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, v30);
  xgboost::Json::operator=(v14, (uint64_t)&v33);
  if (SHIBYTE(v31) < 0)
    operator delete(v30[0]);
  v33 = &off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)v35, (_QWORD *)v35[1]);
  v34 = 0x300000000;
  v33 = &off_24E6BE1D0;
  v35[1] = 0;
  v36 = 0;
  v35[0] = &v35[1];
  std::string::basic_string[abi:ne180100]<0>(v30, "updater");
  v15 = (unsigned int **)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, v30);
  xgboost::Json::operator=(v15, (uint64_t)&v33);
  if (SHIBYTE(v31) < 0)
    operator delete(v30[0]);
  v33 = &off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)v35, (_QWORD *)v35[1]);
  std::string::basic_string[abi:ne180100]<0>(&v33, "updater");
  v16 = (_QWORD *)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v33);
  if (SHIBYTE(v35[0]) < 0)
    operator delete(v33);
  v17 = (uint64_t *)*((_QWORD *)this + 45);
  v18 = (uint64_t *)*((_QWORD *)this + 46);
  while (v17 != v18)
  {
    v34 = 0x300000000;
    v33 = &off_24E6BE1D0;
    v35[1] = 0;
    v36 = 0;
    v35[0] = &v35[1];
    v19 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)*v17 + 64))(*v17);
    std::string::basic_string[abi:ne180100]<0>(v30, v19);
    v20 = (unsigned int **)(*(uint64_t (**)(_QWORD, void **))(*(_QWORD *)*v16 + 24))(*v16, v30);
    xgboost::Json::operator=(v20, (uint64_t)&v33);
    if (SHIBYTE(v31) < 0)
      operator delete(v30[0]);
    v33 = &off_24E6BE1D0;
    std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)v35, (_QWORD *)v35[1]);
    v21 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)*v17 + 64))(*v17);
    std::string::basic_string[abi:ne180100]<0>(&v33, v21);
    v22 = (*(uint64_t (**)(_QWORD, void **))(*(_QWORD *)*v16 + 24))(*v16, &v33);
    if (SHIBYTE(v35[0]) < 0)
      operator delete(v33);
    v23 = *v17++;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 24))(v23, v22);
  }
  v24 = *((_BYTE *)this + 329);
  v26[1] = 0x500000000;
  v26[0] = &off_24E6BE468;
  v27 = v24;
  std::string::basic_string[abi:ne180100]<0>(&v33, "specified_updater");
  v25 = (uint64_t *)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v33);
  xgboost::Json::operator=(v25, (uint64_t)v26);
  if (SHIBYTE(v35[0]) < 0)
    operator delete(v33);
}

void sub_220ED1068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  _Unwind_Resume(exception_object);
}

void xgboost::ToJson<xgboost::gbm::GBTreeModelParam>(xgboost::gbm::GBTreeModelParam *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD **v4;
  uint64_t *v5;
  _QWORD *v6;
  _QWORD **v7;
  BOOL v8;
  std::vector<std::pair<std::string, std::string>> v9;
  char v10;
  _QWORD **v11;
  _QWORD *v12[2];
  std::vector<std::pair<std::string, std::string>> *v13;

  *(_QWORD *)(a2 + 8) = 0x300000000;
  *(_QWORD *)a2 = &off_24E6BE1D0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 16) = a2 + 24;
  *(_QWORD *)(a2 + 32) = 0;
  xgboost::gbm::GBTreeModelParam::__MANAGER__(a1);
  dmlc::parameter::ParamManager::GetDict((dmlc::parameter::ParamManager *)&xgboost::gbm::GBTreeModelParam::__MANAGER__(void)::inst, a1, &v9);
  std::map<std::string,std::string>::map[abi:ne180100]<std::__wrap_iter<std::pair<std::string,std::string> *>>((uint64_t)&v11, (const void **)&v9.__begin_->first.__r_.__value_.__l.__data_, (const void **)&v9.__end_->first.__r_.__value_.__l.__data_);
  v13 = &v9;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
  v4 = v11;
  if (v11 != v12)
  {
    do
    {
      xgboost::JsonString::JsonString(&v9, (__int128 *)(v4 + 7));
      v13 = (std::vector<std::pair<std::string, std::string>> *)(v4 + 4);
      v5 = std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 16), (const void **)v4 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)&v13);
      xgboost::Json::operator=(v5 + 7, (uint64_t)&v9);
      v9.__begin_ = (std::vector<std::pair<std::string, std::string>>::pointer)off_24E6BE2B8;
      if (v10 < 0)
        operator delete(v9.__end_cap_.__value_);
      v6 = v4[1];
      if (v6)
      {
        do
        {
          v7 = (_QWORD **)v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD **)v4[2];
          v8 = *v7 == v4;
          v4 = v7;
        }
        while (!v8);
      }
      v4 = v7;
    }
    while (v7 != v12);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v11, v12[0]);
}

void sub_220ED1344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t *a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  a21 = &a9;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  *(_QWORD *)v21 = v23 + 16;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy(v22, *(_QWORD **)(v21 + 24));
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'xgboost::gbm::GBTree::SaveConfig(xgboost::gbm::GBTree *this, xgboost::Json *a2)
{
  xgboost::gbm::GBTree::SaveConfig((xgboost::gbm::GBTree *)((char *)this - 8), a2);
}

void xgboost::gbm::GBTree::LoadModel(xgboost::gbm::GBTree *this, const xgboost::Json *a2)
{
  _DWORD **v4;
  _QWORD *v5;
  char **v6;
  int v7;
  char *v8;
  int v9;
  int v10;
  std::string *Entry;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  const xgboost::Json *v21;
  void *__p[2];
  char v23;
  uint64_t v24;

  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  v4 = (_DWORD **)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, __p);
  v5 = xgboost::Cast<xgboost::JsonString const,xgboost::Value const>(*v4);
  v6 = (char **)(v5 + 2);
  v7 = *((char *)v5 + 39);
  if (v7 < 0)
  {
    if (v5[3] != 6)
    {
LABEL_10:
      dmlc::LogCheckFormat<std::string,char [7]>((uint64_t)v6, "gbtree", &v24);
      goto LABEL_11;
    }
    v8 = *v6;
  }
  else
  {
    v8 = (char *)(v5 + 2);
    if (v7 != 6)
      goto LABEL_10;
  }
  v9 = *(_DWORD *)v8;
  v10 = *((unsigned __int16 *)v8 + 2);
  if (v9 != 1920229991 || v10 != 25957)
    goto LABEL_10;
  v24 = 0;
LABEL_11:
  if (v23 < 0)
    operator delete(__p[0]);
  if (v24)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
    v13 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Check failed: ", 14);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"get<String>(in[\"name\"]) == \"gbtree\"", 35);
    v16 = *(char *)(v24 + 23);
    v17 = v16 >= 0 ? v24 : *(_QWORD *)v24;
    v18 = v16 >= 0 ? *(unsigned __int8 *)(v24 + 23) : *(_QWORD *)(v24 + 8);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
    v20 = v24;
    v24 = 0;
    if (v20)
      std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v24, v20);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "model");
  v21 = (const xgboost::Json *)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, __p);
  xgboost::gbm::GBTreeModel::LoadModel((xgboost::gbm::GBTree *)((char *)this + 24), v21);
  if (v23 < 0)
    operator delete(__p[0]);
}

void sub_220ED1558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  uint64_t v16;

  v16 = a15;
  a15 = 0;
  if (v16)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a15, v16);
  _Unwind_Resume(exception_object);
}

void xgboost::gbm::GBTree::SaveModel(xgboost::gbm::GBTree *this, xgboost::Json *a2)
{
  uint64_t *v4;
  unsigned int **v5;
  xgboost::Json *v6;
  void *__p[2];
  char v8;
  void *v9[2];
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13[2];
  uint64_t v14;

  std::string::basic_string[abi:ne180100]<0>(v9, "gbtree");
  v12 = 0;
  *(_OWORD *)v13 = *(_OWORD *)v9;
  v14 = v10;
  v9[0] = 0;
  v9[1] = 0;
  v10 = 0;
  v11 = off_24E6BE2B8;
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  v4 = (uint64_t *)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, __p);
  xgboost::Json::operator=(v4, (uint64_t)&v11);
  if (v8 < 0)
    operator delete(__p[0]);
  v11 = off_24E6BE2B8;
  if (SHIBYTE(v14) < 0)
    operator delete(v13[0]);
  if (SHIBYTE(v10) < 0)
    operator delete(v9[0]);
  v12 = 0x300000000;
  v11 = &off_24E6BE1D0;
  v13[1] = 0;
  v14 = 0;
  v13[0] = &v13[1];
  std::string::basic_string[abi:ne180100]<0>(v9, "model");
  v5 = (unsigned int **)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, v9);
  xgboost::Json::operator=(v5, (uint64_t)&v11);
  if (SHIBYTE(v10) < 0)
    operator delete(v9[0]);
  v11 = &off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)v13, (_QWORD *)v13[1]);
  std::string::basic_string[abi:ne180100]<0>(&v11, "model");
  v6 = (xgboost::Json *)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v11);
  if (SHIBYTE(v13[0]) < 0)
    operator delete(v11);
  xgboost::gbm::GBTreeModel::SaveModel((xgboost::gbm::GBTree *)((char *)this + 24), v6);
}

void sub_220ED1738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t xgboost::gbm::GBTree::Slice(xgboost::gbm::GBTree *this, int a2, int a3, int a4, xgboost::GradientBooster *lpsrc, BOOL *a6)
{
  xgboost::gbm::GBTree *v11;
  char *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  std::string *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  std::string *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  std::string *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  std::string *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t result;
  unint64_t v58;
  unint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  std::string *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  _BYTE *v82;
  _BYTE *v83;
  int64_t v84;
  char *v85;
  _BYTE *v86;
  _BYTE *v87;
  int64_t v88;
  xgboost::gbm::GBTree *v89;
  char *v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  std::string *v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  std::string *Entry;
  _QWORD *v106;
  _QWORD *v107;
  std::string *v108;
  _QWORD *v109;
  _QWORD *v110;
  std::string *v111;
  _QWORD *v112;
  _QWORD *v113;
  uint64_t v114;
  BOOL *v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  unint64_t v121;
  _QWORD *v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int v130;
  char v131;
  uint64_t v132[2];

  v11 = this;
  if (*((_BYTE *)this + 330))
  {
    if (lpsrc)
      goto LABEL_3;
  }
  else
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v132);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
    v106 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v132);
    v107 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v106, (uint64_t)"Check failed: configured_", 25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v132);
    if (lpsrc)
    {
LABEL_3:
      if (v12)
        goto LABEL_4;
      goto LABEL_91;
    }
  }
  v108 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v132);
  dmlc::LogMessageFatal::Entry::Init(v108, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
  v109 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v132);
  v110 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)"Check failed: out", 17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)": ", 2);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v132);
LABEL_91:
  v111 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v132);
  dmlc::LogMessageFatal::Entry::Init(v111, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
  v112 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v132);
  v113 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v112, (uint64_t)"Check failed: p_gbtree", 22);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v113, (uint64_t)": ", 2);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v132);
  v12 = 0;
LABEL_4:
  v13 = *((_QWORD *)v11 + 4);
  v130 = *((_DWORD *)v11 + 11) * *(_DWORD *)(v13 + 8);
  v14 = *(_DWORD *)(v13 + 4);
  LODWORD(v129) = 0;
  if (!v14)
  {
    dmlc::LogCheckFormat<unsigned int,int>(v132);
    if (v132[0])
    {
      v16 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v129);
      dmlc::LogMessageFatal::Entry::Init(v16, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
      v17 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v129);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Check failed: ", 14);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"this->model_.learner_model_param->num_feature != 0", 50);
      v20 = *(char *)(v132[0] + 23);
      v21 = v20 >= 0 ? v132[0] : *(_QWORD *)v132[0];
      v22 = v20 >= 0 ? *(unsigned __int8 *)(v132[0] + 23) : *(_QWORD *)(v132[0] + 8);
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v21, v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v129);
      v24 = v132[0];
      v132[0] = 0;
      if (v24)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v132, v24);
    }
  }
  LODWORD(v129) = 0;
  if (!v130)
  {
    dmlc::LogCheckFormat<unsigned int,int>(v132);
    if (v132[0])
    {
      v25 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v129);
      dmlc::LogMessageFatal::Entry::Init(v25, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
      v26 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v129);
      v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Check failed: ", 14);
      v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"layer_trees != 0", 16);
      v29 = *(char *)(v132[0] + 23);
      v30 = v29 >= 0 ? v132[0] : *(_QWORD *)v132[0];
      v31 = v29 >= 0 ? *(unsigned __int8 *)(v132[0] + 23) : *(_QWORD *)(v132[0] + 8);
      v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, v30, v31);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v129);
      v33 = v132[0];
      v132[0] = 0;
      if (v33)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v132, v33);
    }
  }
  if (a3)
    LODWORD(v15) = a3;
  else
    v15 = ((uint64_t)(*((_QWORD *)v11 + 26) - *((_QWORD *)v11 + 25)) >> 3) / (unint64_t)v130;
  LODWORD(v129) = v15;
  if ((int)v15 <= a2)
  {
    dmlc::LogCheckFormat<int,int>(v132);
    if (v132[0])
    {
      v34 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v129);
      dmlc::LogMessageFatal::Entry::Init(v34, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
      v35 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v129);
      v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"Check failed: ", 14);
      v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"layer_end > layer_begin", 23);
      v38 = *(char *)(v132[0] + 23);
      v39 = v38 >= 0 ? v132[0] : *(_QWORD *)v132[0];
      v40 = v38 >= 0 ? *(unsigned __int8 *)(v132[0] + 23) : *(_QWORD *)(v132[0] + 8);
      v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, v39, v40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v129);
      v42 = v132[0];
      v132[0] = 0;
      if (v42)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v132, v42);
    }
  }
  v115 = a6;
  LODWORD(v129) = a4;
  if (a4 < 1)
  {
    dmlc::LogCheckFormat<int,int>(v132);
    if (v132[0])
    {
      v96 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v129);
      dmlc::LogMessageFatal::Entry::Init(v96, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
      v97 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v129);
      v98 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"Check failed: ", 14);
      v99 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)"step >= 1", 9);
      v100 = *(char *)(v132[0] + 23);
      v101 = v100 >= 0 ? v132[0] : *(_QWORD *)v132[0];
      v102 = v100 >= 0 ? *(unsigned __int8 *)(v132[0] + 23) : *(_QWORD *)(v132[0] + 8);
      v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, v101, v102);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v129);
      v104 = v132[0];
      v132[0] = 0;
      if (v104)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v132, v104);
    }
  }
  v43 = ((int)v15 - a2) / a4;
  std::vector<std::unique_ptr<xgboost::RegTree>>::resize((uint64_t)(v12 + 200), v130 * v43);
  v117 = v43;
  std::vector<int>::resize((std::vector<int> *)(v12 + 248), v130 * v43);
  *((_DWORD *)v12 + 10) = (*((_QWORD *)v12 + 26) - *((_QWORD *)v12 + 25)) >> 3;
  *((_DWORD *)v12 + 11) = *((_DWORD *)v11 + 11);
  v44 = *((_QWORD *)v11 + 28);
  v45 = *((_QWORD *)v11 + 29);
  if (v44 != v45)
  {
    v128 = (uint64_t)(*((_QWORD *)v11 + 26) - *((_QWORD *)v11 + 25)) >> 3;
    v129 = (v45 - v44) >> 3;
    if (v129 != v128)
    {
      dmlc::LogCheckFormat<unsigned long,unsigned long>(v132);
      if (v132[0])
      {
        v46 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v129);
        dmlc::LogMessageFatal::Entry::Init(v46, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
        v47 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v129);
        v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"Check failed: ", 14);
        v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"this->model_.trees_to_update.size() == this->model_.trees.size()", 64);
        v50 = *(char *)(v132[0] + 23);
        v51 = v50 >= 0 ? v132[0] : *(_QWORD *)v132[0];
        v52 = v50 >= 0 ? *(unsigned __int8 *)(v132[0] + 23) : *(_QWORD *)(v132[0] + 8);
        v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, v51, v52);
        v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"Not all trees are updated, ", 27);
        v55 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)" trees remain.  Slice the model before making update if you only want to update a portion of trees.", 99);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v129);
        v56 = v132[0];
        v132[0] = 0;
        if (v56)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v132, v56);
      }
    }
  }
  v127 = v130;
  result = xgboost::gbm::detail::LayerToTree((xgboost::gbm::GBTree *)((char *)v11 + 24), (const xgboost::gbm::GBTreeModel *)a2, v15);
  v58 = HIDWORD(result);
  LODWORD(v129) = HIDWORD(result);
  v59 = (uint64_t)(*((_QWORD *)v11 + 26) - *((_QWORD *)v11 + 25)) >> 3;
  if (v59 >= HIDWORD(result))
  {
    v114 = (uint64_t)(*((_QWORD *)v11 + 26) - *((_QWORD *)v11 + 25)) >> 3;
    if (!(_DWORD)v15)
      v117 = (int)(v59 / v127 - a2) / a4;
    if (v117)
    {
      v60 = 0;
      v120 = 0;
      v116 = v127 * (a4 - 1);
      v122 = v12;
      v121 = HIDWORD(result);
      do
      {
        if ((_DWORD)v127)
        {
          v119 = v60;
          v61 = 0;
          v126 = (int)result;
          v125 = 8 * (int)result;
          v124 = 4 * (int)result;
          v118 = result;
          v62 = result;
          v123 = result;
          do
          {
            if (v62 + (int)v61 >= v58)
            {
              dmlc::LogCheckFormat<int,unsigned int>(v132);
              if (v132[0])
              {
                v63 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v131);
                dmlc::LogMessageFatal::Entry::Init(v63, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.h");
                v64 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v131);
                v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"Check failed: ", 14);
                v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"in_it < tree_end", 16);
                v67 = *(char *)(v132[0] + 23);
                v68 = v67 >= 0 ? v132[0] : *(_QWORD *)v132[0];
                v69 = v67 >= 0 ? *(unsigned __int8 *)(v132[0] + 23) : *(_QWORD *)(v132[0] + 8);
                v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, v68, v69);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)": ", 2);
                dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v131);
                v71 = v132[0];
                v132[0] = 0;
                if (v71)
                  std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v132, v71);
              }
            }
            v72 = *((_QWORD *)v11 + 25);
            if (v126 + v61 >= (unint64_t)((*((_QWORD *)v11 + 26) - v72) >> 3))
              std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_out_of_range[abi:ne180100]();
            v73 = *(_QWORD *)(v72 + v125 + 8 * v61);
            v74 = operator new();
            *(_QWORD *)v74 = &off_24E6BD360;
            v75 = *(_OWORD *)(v73 + 8);
            *(_OWORD *)(v74 + 24) = *(_OWORD *)(v73 + 24);
            *(_OWORD *)(v74 + 8) = v75;
            v76 = *(_OWORD *)(v73 + 40);
            v77 = *(_OWORD *)(v73 + 56);
            v78 = *(_OWORD *)(v73 + 72);
            *(_OWORD *)(v74 + 88) = *(_OWORD *)(v73 + 88);
            *(_OWORD *)(v74 + 72) = v78;
            *(_OWORD *)(v74 + 56) = v77;
            *(_OWORD *)(v74 + 40) = v76;
            v79 = *(_OWORD *)(v73 + 104);
            v80 = *(_OWORD *)(v73 + 120);
            v81 = *(_OWORD *)(v73 + 136);
            *(_DWORD *)(v74 + 152) = *(_DWORD *)(v73 + 152);
            *(_OWORD *)(v74 + 136) = v81;
            *(_OWORD *)(v74 + 120) = v80;
            *(_QWORD *)(v74 + 160) = 0;
            *(_OWORD *)(v74 + 104) = v79;
            *(_QWORD *)(v74 + 168) = 0;
            *(_QWORD *)(v74 + 176) = 0;
            v83 = *(_BYTE **)(v73 + 160);
            v82 = *(_BYTE **)(v73 + 168);
            v84 = v82 - v83;
            if (v82 != v83)
            {
              std::vector<xgboost::RegTree::Node>::__vallocate[abi:ne180100]((_QWORD *)(v74 + 160), 0xCCCCCCCCCCCCCCCDLL * (v84 >> 2));
              v85 = *(char **)(v74 + 168);
              memmove(v85, v83, v84);
              *(_QWORD *)(v74 + 168) = &v85[4 * (v84 >> 2)];
            }
            *(_QWORD *)(v74 + 184) = 0;
            *(_QWORD *)(v74 + 192) = 0;
            *(_QWORD *)(v74 + 200) = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(v74 + 184), *(const void **)(v73 + 184), *(_QWORD *)(v73 + 192), (uint64_t)(*(_QWORD *)(v73 + 192) - *(_QWORD *)(v73 + 184)) >> 2);
            *(_QWORD *)(v74 + 208) = 0;
            *(_QWORD *)(v74 + 216) = 0;
            *(_QWORD *)(v74 + 224) = 0;
            v87 = *(_BYTE **)(v73 + 208);
            v86 = *(_BYTE **)(v73 + 216);
            v88 = v86 - v87;
            if (v86 != v87)
            {
              v89 = v11;
              std::vector<xgboost::tree::GradStats>::__vallocate[abi:ne180100]((_QWORD *)(v74 + 208), v88 >> 4);
              v90 = *(char **)(v74 + 216);
              memmove(v90, v87, v88);
              *(_QWORD *)(v74 + 216) = &v90[16 * (v88 >> 4)];
              v11 = v89;
            }
            *(_QWORD *)(v74 + 232) = 0;
            *(_QWORD *)(v74 + 240) = 0;
            *(_QWORD *)(v74 + 248) = 0;
            std::vector<xgboost::FeatureType>::__init_with_size[abi:ne180100]<xgboost::FeatureType*,xgboost::FeatureType*>((_QWORD *)(v74 + 232), *(const void **)(v73 + 232), *(_QWORD *)(v73 + 240), *(_QWORD *)(v73 + 240) - *(_QWORD *)(v73 + 232));
            *(_QWORD *)(v74 + 256) = 0;
            *(_QWORD *)(v74 + 264) = 0;
            *(_QWORD *)(v74 + 272) = 0;
            std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)(v74 + 256), *(const void **)(v73 + 256), *(_QWORD *)(v73 + 264), (uint64_t)(*(_QWORD *)(v73 + 264) - *(_QWORD *)(v73 + 256)) >> 2);
            *(_QWORD *)(v74 + 280) = 0;
            *(_QWORD *)(v74 + 288) = 0;
            *(_QWORD *)(v74 + 296) = 0;
            std::vector<xgboost::RegTree::Segment>::__init_with_size[abi:ne180100]<xgboost::RegTree::Segment*,xgboost::RegTree::Segment*>((_QWORD *)(v74 + 280), *(const void **)(v73 + 280), *(_QWORD *)(v73 + 288), (uint64_t)(*(_QWORD *)(v73 + 288) - *(_QWORD *)(v73 + 280)) >> 4);
            v91 = v122[25];
            if (v120 + v61 >= (unint64_t)((v122[26] - v91) >> 3))
              std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_out_of_range[abi:ne180100]();
            v92 = *(_DWORD *)(*((_QWORD *)v11 + 31) + v124 + 4 * v61);
            v93 = v91 + 8 * v120;
            v94 = *(_QWORD *)(v93 + 8 * v61);
            *(_QWORD *)(v93 + 8 * v61) = v74;
            if (v94)
              (*(void (**)(uint64_t))(*(_QWORD *)v94 + 8))(v94);
            v95 = v122[31];
            v62 = v123;
            if (v120 + v61 >= (unint64_t)((v122[32] - v95) >> 2))
              std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_out_of_range[abi:ne180100]();
            *(_DWORD *)(v95 + 4 * v120 + 4 * v61++) = v92;
            v58 = v121;
          }
          while ((_DWORD)v127 != (_DWORD)v61);
          v120 += v61;
          LODWORD(result) = v118 + v61;
          v60 = v119;
        }
        result = (result + v116);
        ++v60;
      }
      while (v60 != v117);
    }
    v59 = v114;
  }
  *v115 = v59 < v58;
  return result;
}

void sub_220ED21BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_220ED230C()
{
  uint64_t v0;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v0 - 97));
  JUMPOUT(0x220ED2318);
}

void std::vector<std::unique_ptr<xgboost::RegTree>>::resize(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD **)(a1 + 8);
  v4 = ((uint64_t)v3 - *(_QWORD *)a1) >> 3;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *(_QWORD *)a1 + 8 * a2;
      while (v3 != (_QWORD *)v5)
      {
        v7 = *--v3;
        v6 = v7;
        *v3 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      *(_QWORD *)(a1 + 8) = v5;
    }
  }
  else
  {
    std::vector<std::unique_ptr<xgboost::RegTree>>::__append((char **)a1, a2 - v4);
  }
}

void xgboost::gbm::GBTree::PredictBatch(xgboost::gbm::GBTree *this, xgboost::DMatrix *a2, xgboost::PredictionCacheEntry *a3, BOOL a4, unsigned int a5, unsigned int a6)
{
  unsigned int v6;
  unsigned int *v11;
  unsigned int v12;
  uint64_t *Predictor;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  std::string *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned int v28;
  std::string *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  std::string *Entry;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t v41;
  unsigned int v42;
  uint64_t v43;

  v6 = a6;
  if (!*((_BYTE *)this + 330))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v43);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
    v39 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v43);
    v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Check failed: configured_", 25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v43);
    if (v6)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (!a6)
LABEL_3:
    v6 = (*(uint64_t (**)(xgboost::gbm::GBTree *))(*(_QWORD *)this + 72))(this);
LABEL_4:
  v11 = (unsigned int *)((char *)a3 + 8);
  if (a5 || (v12 = *v11, v6 < *v11))
  {
    *v11 = 0;
    v12 = a5;
  }
  if (*(_QWORD *)(*(_QWORD *)a3 + 8) == **(_QWORD **)a3)
  {
    if (*(_QWORD *)(**(uint64_t (***)(xgboost::DMatrix *))a2)(a2))
    {
      LODWORD(v41) = 0;
      if (*v11)
      {
        dmlc::LogCheckFormat<unsigned int,int>(&v43);
        if (v43)
        {
          v29 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v41);
          dmlc::LogMessageFatal::Entry::Init(v29, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
          v30 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v41);
          v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Check failed: ", 14);
          v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"out_preds->version == 0", 23);
          v33 = *(char *)(v43 + 23);
          v34 = v33 >= 0 ? v43 : *(_QWORD *)v43;
          v35 = v33 >= 0 ? *(unsigned __int8 *)(v43 + 23) : *(_QWORD *)(v43 + 8);
          v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v34, v35);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)": ", 2);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v41);
          v37 = v43;
          v43 = 0;
          if (v37)
            std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v43, v37);
        }
      }
    }
  }
  Predictor = (uint64_t *)xgboost::gbm::GBTree::GetPredictor((uint64_t)this, (uint64_t)a3, (uint64_t)a2);
  v14 = Predictor;
  if (!*((_DWORD *)a3 + 2))
  {
    v15 = *Predictor;
    v16 = (**(uint64_t (***)(xgboost::DMatrix *))a2)(a2);
    xgboost::Predictor::InitOutPredictions(v15, v16, (uint64_t *)a3, (uint64_t)this + 24);
  }
  v17 = xgboost::gbm::detail::LayerToTree((xgboost::gbm::GBTree *)((char *)this + 24), (const xgboost::gbm::GBTreeModel *)v12, v6);
  v42 = HIDWORD(v17);
  v41 = (uint64_t)(*((_QWORD *)this + 26) - *((_QWORD *)this + 25)) >> 3;
  if (v41 < HIDWORD(v17))
  {
    dmlc::LogCheckFormat<unsigned int,unsigned long>(&v43);
    if (v43)
    {
      v18 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v41);
      dmlc::LogMessageFatal::Entry::Init(v18, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
      v19 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v41);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Check failed: ", 14);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"tree_end <= model_.trees.size()", 31);
      v22 = *(char *)(v43 + 23);
      v23 = v22 >= 0 ? v43 : *(_QWORD *)v43;
      v24 = v22 >= 0 ? *(unsigned __int8 *)(v43 + 23) : *(_QWORD *)(v43 + 8);
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v23, v24);
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Invalid number of trees.", 24);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v41);
      v27 = v43;
      v43 = 0;
      if (v27)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v43, v27);
    }
  }
  if (v42 > v17)
    (*(void (**)(uint64_t, xgboost::DMatrix *, xgboost::PredictionCacheEntry *, char *, unint64_t))(*(_QWORD *)*v14 + 24))(*v14, a2, a3, (char *)this + 24, v17);
  if (a5)
    v28 = 0;
  else
    v28 = v6;
  *v11 = v28;
}

void sub_220ED26DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  _Unwind_Resume(a1);
}

uint64_t xgboost::gbm::GBTree::GetPredictor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  std::string *v7;
  _QWORD *v8;
  std::string *v9;
  _QWORD *v10;
  uint64_t v11;
  std::string *v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  int v16;
  char v17;
  char v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::string *v27;
  _QWORD *v28;
  std::string *v29;
  _QWORD *v30;
  _QWORD *v31;
  std::string *v32;
  _QWORD *v33;
  std::string *Entry;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;

  if (!*(_BYTE *)(a1 + 330))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v40);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
    v36 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v40);
    v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Check failed: configured_", 25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v40);
  }
  v6 = *(_DWORD *)(a1 + 316);
  if (!v6)
  {
    if (a3)
    {
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 112))(a3);
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 120))(a3);
      v17 = v16;
      if (!v15)
      {
        v18 = 0;
        if (!v16)
          goto LABEL_34;
        goto LABEL_16;
      }
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 120))(a3) & 1) != 0)
      {
        LOBYTE(v15) = v17 ^ 1;
LABEL_16:
        (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a3 + 72))(&v38, a3);
        v40 = v38;
        v41 = v39;
        if (v39)
        {
          p_shared_owners = (unint64_t *)&v39->__shared_owners_;
          do
            v20 = __ldxr(p_shared_owners);
          while (__stxr(v20 + 1, p_shared_owners));
        }
        xgboost::BatchIterator<xgboost::SparsePage>::operator*(&v40);
        v21 = v41;
        if (v41)
        {
          v22 = (unint64_t *)&v41->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        v24 = v39;
        if (v39)
        {
          v25 = (unint64_t *)&v39->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        if ((v15 & 1) != 0)
        {
LABEL_30:
          if ((*(_DWORD *)(*(_QWORD *)(a1 + 16) + 24) & 0x80000000) == 0)
          {
            v27 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v40);
            dmlc::LogMessageFatal::Entry::Init(v27, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
            v28 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v40);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Data is on CUDA device, but XGBoost is not compiled with CUDA support.", 70);
LABEL_44:
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v40);
            return a1 + 384;
          }
          v18 = 1;
          if (!a2)
            goto LABEL_42;
LABEL_35:
          if (*(_QWORD *)(*(_QWORD *)a2 + 8) == **(_QWORD **)a2)
          {
            if (!*(_DWORD *)(a1 + 40))
              v18 = 1;
            if ((v18 & 1) == 0)
            {
              v11 = a1 + 384;
              if (*(_QWORD *)(a1 + 384))
                return v11;
              goto LABEL_40;
            }
          }
LABEL_42:
          if (*(_DWORD *)(a1 + 320) == 5)
          {
            v32 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v40);
            dmlc::LogMessageFatal::Entry::Init(v32, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/../common/common.h");
            v33 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v40);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
            goto LABEL_44;
          }
          v11 = a1 + 384;
          if (*(_QWORD *)(a1 + 384))
            return v11;
LABEL_40:
          v29 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v40);
          dmlc::LogMessageFatal::Entry::Init(v29, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
          v30 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v40);
          v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Check failed: cpu_predictor_", 28);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)": ", 2);
          goto LABEL_10;
        }
        goto LABEL_33;
      }
      if ((v17 & 1) == 0)
        goto LABEL_30;
    }
LABEL_33:
    v18 = 0;
LABEL_34:
    if (!a2)
      goto LABEL_42;
    goto LABEL_35;
  }
  if (v6 == 2)
  {
    v7 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v40);
    dmlc::LogMessageFatal::Entry::Init(v7, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/../common/common.h");
    v8 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v40);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v40);
    v6 = *(_DWORD *)(a1 + 316);
  }
  if (v6 == 3)
  {
    v9 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v40);
    dmlc::LogMessageFatal::Entry::Init(v9, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/../common/common.h");
    v10 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v40);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"XGBoost version not compiled with OneAPI support.", 49);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v40);
  }
  v11 = a1 + 384;
  if (!*(_QWORD *)(a1 + 384))
  {
    v12 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v40);
    dmlc::LogMessageFatal::Entry::Init(v12, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
    v13 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v40);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Check failed: cpu_predictor_", 28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)": ", 2);
LABEL_10:
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v40);
  }
  return v11;
}

void sub_220ED2B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  _Unwind_Resume(a1);
}

unint64_t xgboost::gbm::detail::LayerToTree(xgboost::gbm::detail *this, const xgboost::gbm::GBTreeModel *a2, int a3)
{
  int v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::string *Entry;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char v18;
  uint64_t v19;
  unsigned int v20;
  int v21;

  v3 = *((_DWORD *)this + 5) * *(_DWORD *)(*((_QWORD *)this + 1) + 8);
  v4 = v3 * (_DWORD)a2;
  v21 = v3 * (_DWORD)a2;
  v5 = (v3 * a3);
  v20 = v5;
  v7 = *((_QWORD *)this + 22);
  v6 = *((_QWORD *)this + 23);
  if (!(_DWORD)v5)
  {
    v5 = (unint64_t)(v6 - v7) >> 3;
    v20 = v5;
  }
  if (v6 != v7)
  {
    if (v4 > v5)
    {
      dmlc::LogCheckFormat<unsigned int,unsigned int>(&v19);
      if (v19)
      {
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v18);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.h");
        v9 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v18);
        v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Check failed: ", 14);
        v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"tree_begin <= tree_end", 22);
        v12 = *(char *)(v19 + 23);
        if (v12 >= 0)
          v13 = v19;
        else
          v13 = *(_QWORD *)v19;
        if (v12 >= 0)
          v14 = *(unsigned __int8 *)(v19 + 23);
        else
          v14 = *(_QWORD *)(v19 + 8);
        v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v13, v14);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v18);
        v16 = v19;
        v19 = 0;
        if (v16)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v19, v16);
      }
    }
    v4 = v21;
    v5 = v20;
  }
  return v4 | (v5 << 32);
}

void sub_220ED2CDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14)
{
  uint64_t v15;

  v15 = a14;
  a14 = 0;
  if (v15)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a14, v15);
  _Unwind_Resume(exception_object);
}

void xgboost::gbm::GPUDartPredictInc()
{
  std::string *Entry;
  _QWORD *v1;
  char v2;

  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v2);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/../common/common.h");
  v1 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v2);
}

void sub_220ED2D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void xgboost::gbm::GPUDartInplacePredictInc()
{
  std::string *Entry;
  _QWORD *v1;
  char v2;

  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v2);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/../common/common.h");
  v1 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v2);
}

void sub_220ED2DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void xgboost::gbm::GBTree::~GBTree(xgboost::gbm::GBTree *this)
{
  xgboost::gbm::GBTree::~GBTree(this);
  JUMPOUT(0x227667068);
}

{
  uint64_t v2;
  void *v3;
  void **v4;

  *(_QWORD *)this = &off_24E6BB5D8;
  *((_QWORD *)this + 1) = &unk_24E6BB6A0;
  xgboost::common::Monitor::~Monitor((char **)this + 49);
  v2 = *((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v4 = (void **)((char *)this + 360);
  std::vector<std::unique_ptr<xgboost::TreeUpdater>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 336);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 311) < 0)
    operator delete(*((void **)this + 36));
  *((_QWORD *)this + 3) = off_24E6BE790;
  v3 = (void *)*((_QWORD *)this + 31);
  if (v3)
  {
    *((_QWORD *)this + 32) = v3;
    operator delete(v3);
  }
  v4 = (void **)((char *)this + 224);
  std::vector<std::unique_ptr<xgboost::TreeUpdater>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 200);
  std::vector<std::unique_ptr<xgboost::TreeUpdater>>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void xgboost::gbm::GBTree::Load(xgboost::gbm::GBTree *this, dmlc::Stream *a2)
{
  uint64_t i;
  uint64_t v4;

  xgboost::gbm::GBTreeModel::Load((uint64_t)this + 24, (uint64_t (***)(_QWORD, uint64_t, uint64_t))a2);
  v4 = *((_QWORD *)this + 42);
  for (i = *((_QWORD *)this + 43);
        i != v4;
        std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100]((uint64_t)this + 352, i))
  {
    i -= 48;
  }
  *((_QWORD *)this + 43) = v4;
}

uint64_t xgboost::gbm::GBTree::Save(xgboost::gbm::GBTree *this, dmlc::Stream *a2)
{
  return xgboost::gbm::GBTreeModel::Save((uint64_t)this + 24, (uint64_t)a2);
}

BOOL xgboost::gbm::GBTree::AllowLazyCheckPoint(xgboost::gbm::GBTree *this)
{
  return *(_DWORD *)(*((_QWORD *)this + 4) + 8) == 1;
}

unint64_t xgboost::gbm::GBTree::BoostedRounds(xgboost::gbm::GBTree *this)
{
  int v2;
  int v3;
  std::string *Entry;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  std::string *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;

  v2 = *((_DWORD *)this + 11);
  v24 = 0;
  v25 = v2;
  if (!v2)
  {
    dmlc::LogCheckFormat<int,int>(&v23);
    if (v23)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v25);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.h");
      v6 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v25);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: ", 14);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"model_.param.num_parallel_tree != 0", 35);
      v9 = *(char *)(v23 + 23);
      v10 = v9 >= 0 ? v23 : *(_QWORD *)v23;
      v11 = v9 >= 0 ? *(unsigned __int8 *)(v23 + 23) : *(_QWORD *)(v23 + 8);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v25);
      v13 = v23;
      v23 = 0;
      if (v13)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v23, v13);
    }
  }
  v3 = *(_DWORD *)(*((_QWORD *)this + 4) + 8);
  v25 = 0;
  if (!v3)
  {
    dmlc::LogCheckFormat<unsigned int,int>(&v23);
    if (v23)
    {
      v14 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v25);
      dmlc::LogMessageFatal::Entry::Init(v14, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.h");
      v15 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v25);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Check failed: ", 14);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"model_.learner_model_param->num_output_group != 0", 49);
      v18 = *(char *)(v23 + 23);
      if (v18 >= 0)
        v19 = v23;
      else
        v19 = *(_QWORD *)v23;
      if (v18 >= 0)
        v20 = *(unsigned __int8 *)(v23 + 23);
      else
        v20 = *(_QWORD *)(v23 + 8);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v25);
      v22 = v23;
      v23 = 0;
      if (v22)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v23, v22);
    }
  }
  return ((uint64_t)(*((_QWORD *)this + 26) - *((_QWORD *)this + 25)) >> 3)
       / (unint64_t)(*((_DWORD *)this + 11) * *(_DWORD *)(*((_QWORD *)this + 4) + 8));
}

void sub_220ED3044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11)
{
  uint64_t v12;

  v12 = a9;
  a9 = 0;
  if (v12)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a9, v12);
  _Unwind_Resume(exception_object);
}

void xgboost::gbm::GBTree::InplacePredict(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, xgboost::gbm::GBTreeModel *a5, int a6, float a7)
{
  unsigned int v8;
  unint64_t v14;
  std::string *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  char v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::string *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t i;
  _QWORD *v38;
  const char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  char v44;
  char v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::string *v49;
  uint64_t j;
  std::string *Entry;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t v58;
  uint64_t v59;
  unsigned int v60;

  v8 = a5;
  if (!*(_BYTE *)(a1 + 330))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v59);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.h");
    v52 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v59);
    v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"Check failed: configured_", 25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v59);
  }
  v60 = 0;
  v14 = xgboost::gbm::detail::LayerToTree((xgboost::gbm::detail *)(a1 + 24), (const xgboost::gbm::GBTreeModel *)v8, a6);
  v60 = HIDWORD(v14);
  v58 = (uint64_t)(*(_QWORD *)(a1 + 208) - *(_QWORD *)(a1 + 200)) >> 3;
  if (v58 < HIDWORD(v14))
  {
    dmlc::LogCheckFormat<unsigned int,unsigned long>(&v59);
    if (v59)
    {
      v15 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v58);
      dmlc::LogMessageFatal::Entry::Init(v15, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.h");
      v16 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v58);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Check failed: ", 14);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"tree_end <= model_.trees.size()", 31);
      v19 = *(char *)(v59 + 23);
      v20 = v19 >= 0 ? v59 : *(_QWORD *)v59;
      v21 = v19 >= 0 ? *(unsigned __int8 *)(v59 + 23) : *(_QWORD *)(v59 + 8);
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Invalid number of trees.", 24);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v58);
      v24 = v59;
      v59 = 0;
      if (v24)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v59, v24);
    }
  }
  if (*(_DWORD *)(a1 + 316))
  {
    v25 = *(_QWORD *)xgboost::gbm::GBTree::GetPredictor(a1, 0, 0);
    v26 = (std::__shared_weak_count *)a3[1];
    v54 = *a3;
    v55 = v26;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(p_shared_owners);
      while (__stxr(v28 + 1, p_shared_owners));
    }
    v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, unint64_t, _QWORD, float))(*(_QWORD *)v25 + 32))(v25, a2, &v54, a1 + 24, a4, v14, v60, a7);
    v30 = v55;
    if (v55)
    {
      v31 = (unint64_t *)&v55->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    if ((v29 & 1) == 0)
    {
      v33 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v59);
      dmlc::LogMessageFatal::Entry::Init(v33, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.h");
      v34 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v59);
      v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Check failed: success", 21);
      v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)": ", 2);
      for (i = 0; i != 42; ++i)
        std::ostream::put();
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v36);
      v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Current Predictor: ", 19);
      if (*(_DWORD *)(a1 + 316) == 1)
        v39 = "cpu_predictor";
      else
        v39 = "gpu_predictor";
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)v39, 13);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v59);
    }
  }
  else
  {
    v40 = *(_QWORD *)(a1 + 384);
    if (v40)
    {
      v41 = (std::__shared_weak_count *)a3[1];
      v56 = *a3;
      v57 = v41;
      if (v41)
      {
        v42 = (unint64_t *)&v41->__shared_owners_;
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
      }
      v44 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, unint64_t, _QWORD, float))(*(_QWORD *)v40 + 32))(v40, a2, &v56, a1 + 24, a4, v14, v60, a7);
      v45 = v44;
      v46 = v57;
      if (!v57)
        goto LABEL_37;
      v47 = (unint64_t *)&v57->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
        if ((v45 & 1) != 0)
          return;
      }
      else
      {
LABEL_37:
        if ((v44 & 1) != 0)
          return;
      }
    }
    v49 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v59);
    dmlc::LogMessageFatal::Entry::Init(v49, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.h");
    dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v59);
    for (j = 0; j != 42; ++j)
      std::ostream::put();
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v59);
  }
}

void sub_220ED346C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15)
{
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::gbm::GBTree::PredictInstance(uint64_t a1, uint64_t a2, uint64_t a3, xgboost::gbm::GBTreeModel *a4, int a5)
{
  unsigned int v6;
  unint64_t v10;
  std::string *Entry;
  _QWORD *v13;
  _QWORD *v14;
  char v15;

  v6 = a4;
  if (!*(_BYTE *)(a1 + 330))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.h");
    v13 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Check failed: configured_", 25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
  }
  v10 = xgboost::gbm::detail::LayerToTree((xgboost::gbm::detail *)(a1 + 24), (const xgboost::gbm::GBTreeModel *)v6, a5);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, unint64_t))(**(_QWORD **)(a1 + 384) + 40))(*(_QWORD *)(a1 + 384), a2, a3, a1 + 24, HIDWORD(v10));
}

void sub_220ED35D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

uint64_t xgboost::gbm::GBTree::PredictLeaf(uint64_t a1, uint64_t a2, uint64_t a3, xgboost::gbm::GBTreeModel *a4, int a5)
{
  uint64_t v8;
  unint64_t v9;
  std::string *Entry;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *Predictor;
  int v22;
  uint64_t v23;
  int v24;

  v8 = a1 + 24;
  v9 = xgboost::gbm::detail::LayerToTree((xgboost::gbm::detail *)(a1 + 24), (const xgboost::gbm::GBTreeModel *)a4, a5);
  v24 = v9;
  v22 = 0;
  if ((_DWORD)v9)
  {
    dmlc::LogCheckFormat<unsigned int,int>(&v23);
    if (v23)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v22);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.h");
      v11 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v22);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: ", 14);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"tree_begin == 0", 15);
      v14 = *(char *)(v23 + 23);
      if (v14 >= 0)
        v15 = v23;
      else
        v15 = *(_QWORD *)v23;
      if (v14 >= 0)
        v16 = *(unsigned __int8 *)(v23 + 23);
      else
        v16 = *(_QWORD *)(v23 + 8);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Predict leaf supports only iteration end: (0, n_iteration), use model slicing instead.", 86);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v22);
      v19 = v23;
      v23 = 0;
      if (v19)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v23, v19);
    }
  }
  Predictor = (_QWORD *)xgboost::gbm::GBTree::GetPredictor(a1, 0, 0);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, unint64_t))(*(_QWORD *)*Predictor + 48))(*Predictor, a2, a3, v8, HIDWORD(v9));
}

void sub_220ED3730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::gbm::GBTree::PredictContribution(uint64_t a1, uint64_t a2, uint64_t a3, xgboost::gbm::GBTreeModel *a4, int a5, uint64_t a6)
{
  unsigned int v8;
  unint64_t v12;
  std::string *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *Predictor;
  std::string *Entry;
  _QWORD *v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  int v30;

  v8 = a4;
  if (!*(_BYTE *)(a1 + 330))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v29);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.h");
    v26 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v29);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Check failed: configured_", 25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v29);
  }
  v12 = xgboost::gbm::detail::LayerToTree((xgboost::gbm::detail *)(a1 + 24), (const xgboost::gbm::GBTreeModel *)v8, a5);
  v30 = v12;
  v28 = 0;
  if ((_DWORD)v12)
  {
    dmlc::LogCheckFormat<unsigned int,int>(&v29);
    if (v29)
    {
      v13 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v28);
      dmlc::LogMessageFatal::Entry::Init(v13, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.h");
      v14 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v28);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Check failed: ", 14);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"tree_begin == 0", 15);
      v17 = *(char *)(v29 + 23);
      if (v17 >= 0)
        v18 = v29;
      else
        v18 = *(_QWORD *)v29;
      if (v17 >= 0)
        v19 = *(unsigned __int8 *)(v29 + 23);
      else
        v19 = *(_QWORD *)(v29 + 8);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v18, v19);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Predict contribution supports only iteration end: (0, n_iteration), using model slicing instead.", 96);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v28);
      v22 = v29;
      v29 = 0;
      if (v22)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v29, v22);
    }
  }
  Predictor = (_QWORD *)xgboost::gbm::GBTree::GetPredictor(a1, 0, 0);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, unint64_t, _QWORD, uint64_t, _QWORD, _DWORD))(*(_QWORD *)*Predictor + 56))(*Predictor, a2, a3, a1 + 24, HIDWORD(v12), 0, a6, 0, 0);
}

void sub_220ED3924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  _Unwind_Resume(a1);
}

uint64_t xgboost::gbm::GBTree::PredictInteractionContributions(uint64_t a1, uint64_t a2, uint64_t a3, xgboost::gbm::GBTreeModel *a4, int a5, uint64_t a6)
{
  unsigned int v8;
  unint64_t v12;
  std::string *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *Predictor;
  std::string *Entry;
  _QWORD *v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  int v30;

  v8 = a4;
  if (!*(_BYTE *)(a1 + 330))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v29);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.h");
    v26 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v29);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Check failed: configured_", 25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v29);
  }
  v12 = xgboost::gbm::detail::LayerToTree((xgboost::gbm::detail *)(a1 + 24), (const xgboost::gbm::GBTreeModel *)v8, a5);
  v30 = v12;
  v28 = 0;
  if ((_DWORD)v12)
  {
    dmlc::LogCheckFormat<unsigned int,int>(&v29);
    if (v29)
    {
      v13 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v28);
      dmlc::LogMessageFatal::Entry::Init(v13, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.h");
      v14 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v28);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Check failed: ", 14);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"tree_begin == 0", 15);
      v17 = *(char *)(v29 + 23);
      if (v17 >= 0)
        v18 = v29;
      else
        v18 = *(_QWORD *)v29;
      if (v17 >= 0)
        v19 = *(unsigned __int8 *)(v29 + 23);
      else
        v19 = *(_QWORD *)(v29 + 8);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v18, v19);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Predict interaction contribution supports only iteration end: (0, n_iteration), using model slicing instead.", 108);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v28);
      v22 = v29;
      v29 = 0;
      if (v22)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v29, v22);
    }
  }
  Predictor = (_QWORD *)xgboost::gbm::GBTree::GetPredictor(a1, 0, 0);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, unint64_t, _QWORD, uint64_t))(*(_QWORD *)*Predictor + 64))(*Predictor, a2, a3, a1 + 24, HIDWORD(v12), 0, a6);
}

void sub_220ED3B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  _Unwind_Resume(a1);
}

void xgboost::gbm::GBTree::DumpModel(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string::value_type a3@<W2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  std::string __p;
  std::string v23;
  __int128 v24;
  uint64_t v25;
  std::exception_ptr v26;
  std::mutex v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    __p = *(std::string *)a4;
  v10 = *(_QWORD *)(a1 + 200);
  v9 = *(_QWORD *)(a1 + 208);
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  v26.__ptr_ = a5;
  LOBYTE(v27.__m_.__sig) = 0;
  v11 = v9 - v10;
  if (v11)
  {
    v12 = v11 >> 3;
    std::vector<std::string>::__vallocate[abi:ne180100](a5, v11 >> 3);
    v13 = (char *)a5[1];
    v14 = 24 * ((24 * v12 - 24) / 0x18uLL) + 24;
    bzero(v13, v14);
    a5[1] = &v13[v14];
    v9 = *(_QWORD *)(a1 + 200);
    v15 = *(_QWORD *)(a1 + 208);
  }
  else
  {
    v15 = v9;
  }
  v26.__ptr_ = 0;
  v27.__m_.__sig = 850045863;
  memset(v27.__m_.__opaque, 0, sizeof(v27.__m_.__opaque));
  if (v15 != v9)
  {
    v16 = 0;
    v17 = 0;
    v18 = (v15 - v9) >> 3;
    do
    {
      v19 = *(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * v17);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v23, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v23 = __p;
      xgboost::RegTree::DumpModel(v19, a2, a3, (uint64_t)&v23);
      v20 = *a5 + v16;
      if (*(char *)(v20 + 23) < 0)
        operator delete(*(void **)v20);
      v21 = v24;
      *(_QWORD *)(v20 + 16) = v25;
      *(_OWORD *)v20 = v21;
      HIBYTE(v25) = 0;
      LOBYTE(v24) = 0;
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
      ++v17;
      v16 += 24;
    }
    while (v18 != v17);
  }
  dmlc::OMPException::Rethrow(&v26);
  std::mutex::~mutex(&v27);
  std::exception_ptr::~exception_ptr(&v26);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_220ED3E0C(_Unwind_Exception *a1)
{
  std::mutex *v1;
  void *v3;
  char v4;
  std::exception_ptr v5[23];

  std::mutex::~mutex(v1);
  std::exception_ptr::~exception_ptr(v5);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v5);
  if (v4 < 0)
    operator delete(v3);
  _Unwind_Resume(a1);
}

void xgboost::gbm::GBTree::FeatureScore(_QWORD *a1, int **a2, uint64_t *a3, char **a4, char **a5)
{
  unint64_t v10;
  unint64_t v11;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  int v14;
  std::vector<int>::pointer v15;
  int v16;
  uint64_t *v17;
  int v18;
  int v19;
  unint64_t v24;
  unint64_t v25;
  std::string *Entry;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  unint64_t v48;
  unint64_t v49;
  std::string *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  std::string *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  int v77;
  _DWORD *v78;
  uint64_t v79;
  int *v80;
  int v81;
  int *v82;
  int v83;
  int v84;
  int v86;
  unint64_t v87;
  unint64_t v88;
  std::string *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  float *v109;
  unint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  _BYTE *v113;
  _QWORD *v114;
  unint64_t v115;
  unint64_t v116;
  char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char *v124;
  char *v125;
  int v126;
  _DWORD *v127;
  unint64_t v128;
  char *v129;
  char *v130;
  char *v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  char *v136;
  char *v137;
  int v138;
  int **v139;
  uint64_t v140;
  unint64_t v141;
  std::vector<int> v142;
  void *__p;
  _BYTE *v144;
  void *v145;
  _BYTE *v146;
  int v147;
  int v148;
  int v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;

  v10 = *(unsigned int *)(a1[4] + 4);
  *(_QWORD *)&v150 = 0;
  std::vector<unsigned long>::vector(&v145, v10, &v150);
  v11 = *(unsigned int *)(a1[4] + 4);
  LODWORD(v150) = 0;
  std::vector<float>::vector(&__p, v11, &v150);
  memset(&v142, 0, sizeof(v142));
  v140 = *a3;
  if (!*a3)
  {
    std::vector<int>::resize(&v142, (uint64_t)(a1[26] - a1[25]) >> 3);
    begin = v142.__begin_;
    end = v142.__end_;
    if (v142.__begin_ != v142.__end_)
    {
      v14 = 0;
      v15 = v142.__begin_;
      do
        *v15++ = v14++;
      while (v15 != end);
    }
    v140 = end - begin;
    *a3 = v140;
    a3[1] = (uint64_t)begin;
  }
  v141 = (uint64_t)(a1[26] - a1[25]) >> 3;
  v16 = *((unsigned __int8 *)a2 + 23);
  v139 = a2;
  if ((v16 & 0x80) == 0)
  {
    v18 = v16 - 4;
    v17 = (uint64_t *)a2;
    switch(v18)
    {
      case 0:
        v19 = *(_DWORD *)a2;
        goto LABEL_11;
      case 1:
        if (*(_DWORD *)a2 != 1702260579 || *((_BYTE *)a2 + 4) != 114)
          goto LABEL_100;
        goto LABEL_121;
      case 2:
        if (*(_DWORD *)a2 != 1734960503 || *((_WORD *)a2 + 2) != 29800)
          goto LABEL_100;
        goto LABEL_36;
      case 6:
        if (*a2 != (int *)0x61675F6C61746F74 || *((_WORD *)a2 + 4) != 28265)
          goto LABEL_100;
        goto LABEL_71;
      case 7:
        goto LABEL_96;
      default:
        goto LABEL_100;
    }
  }
  switch((unint64_t)a2[1])
  {
    case 4uLL:
      v19 = **a2;
LABEL_11:
      if (v19 == 1852399975)
        goto LABEL_71;
      goto LABEL_100;
    case 5uLL:
      if (**a2 != 1702260579 || *((_BYTE *)*a2 + 4) != 114)
        goto LABEL_100;
      goto LABEL_121;
    case 6uLL:
      if (**a2 != 1734960503 || *((_WORD *)*a2 + 2) != 29800)
        goto LABEL_100;
LABEL_36:
      if (!v140)
        goto LABEL_107;
      v24 = 0;
      v25 = v140;
      while (1)
      {
        v147 = 0;
        if (v24 >= v25)
          goto LABEL_195;
        v147 = *(_DWORD *)(a3[1] + 4 * v24);
        if (v141 < v147)
        {
          dmlc::LogCheckFormat<int,unsigned long>((uint64_t *)&v150);
          if ((_QWORD)v150)
          {
            Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v149);
            dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.h");
            v27 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v149);
            v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Check failed: ", 14);
            v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"idx <= total_n_trees", 20);
            v30 = *(char *)(v150 + 23);
            v31 = v30 >= 0 ? v150 : *(_QWORD *)v150;
            v32 = v30 >= 0 ? *(unsigned __int8 *)(v150 + 23) : *(_QWORD *)(v150 + 8);
            v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, v31, v32);
            v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)": ", 2);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Invalid tree index.", 19);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v149);
            v35 = v150;
            *(_QWORD *)&v150 = 0;
            if (v35)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v150, v35);
          }
        }
        v36 = v147;
        v37 = a1[25];
        v38 = *(_QWORD *)(v37 + 8 * v147);
        v151 = 0u;
        v152 = 0u;
        v150 = 0u;
        std::deque<int>::push_back(&v150, &xgboost::RegTree::kRoot);
        while (*((_QWORD *)&v152 + 1))
        {
          v39 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)&v150 + 1)
                                      + (((unint64_t)(v152 + *((_QWORD *)&v152 + 1) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                          + 4 * ((v152 + *((_QWORD *)&v152 + 1) - 1) & 0x3FF));
          --*((_QWORD *)&v152 + 1);
          std::deque<int>::__maybe_remove_back_spare[abi:ne180100](&v150, 1);
          v40 = *(_QWORD *)(*(_QWORD *)(v37 + 8 * v36) + 160);
          if (*(_DWORD *)(v40 + 20 * v39 + 4) != -1)
          {
            v41 = *(_DWORD *)(v40 + 20 * v39 + 12) & 0x7FFFFFFF;
            v42 = *((_QWORD *)v145 + v41) + 1;
            *((_QWORD *)v145 + v41) = v42;
            *((float *)__p + v41) = (float)(unint64_t)v42;
          }
          v149 = 0;
          v43 = *(_QWORD *)(v38 + 160) + 20 * v39;
          v44 = *(_DWORD *)(v43 + 4);
          v148 = 0;
          v149 = v44;
          v45 = *(_DWORD *)(v43 + 8);
          v148 = v45;
          if (v44 != -1)
          {
            std::deque<int>::push_back(&v150, &v149);
            v45 = v148;
          }
          if (v45 != -1)
            std::deque<int>::push_back(&v150, &v148);
        }
        std::deque<int>::~deque[abi:ne180100](&v150);
        v25 = *a3;
        if (v24 == *a3)
          goto LABEL_195;
        if (++v24 == v140)
          goto LABEL_107;
      }
    case 0xAuLL:
      if (*(_QWORD *)*a2 != 0x61675F6C61746F74 || *((_WORD *)*a2 + 4) != 28265)
        goto LABEL_100;
LABEL_71:
      if (!v140)
        goto LABEL_107;
      v48 = 0;
      v49 = v140;
      while (1)
      {
        v147 = 0;
        if (v48 >= v49)
          goto LABEL_195;
        v147 = *(_DWORD *)(a3[1] + 4 * v48);
        if (v141 < v147)
        {
          dmlc::LogCheckFormat<int,unsigned long>((uint64_t *)&v150);
          if ((_QWORD)v150)
          {
            v50 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v149);
            dmlc::LogMessageFatal::Entry::Init(v50, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.h");
            v51 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v149);
            v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"Check failed: ", 14);
            v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"idx <= total_n_trees", 20);
            v54 = *(char *)(v150 + 23);
            v55 = v54 >= 0 ? v150 : *(_QWORD *)v150;
            v56 = v54 >= 0 ? *(unsigned __int8 *)(v150 + 23) : *(_QWORD *)(v150 + 8);
            v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, v55, v56);
            v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)": ", 2);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Invalid tree index.", 19);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v149);
            v59 = v150;
            *(_QWORD *)&v150 = 0;
            if (v59)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v150, v59);
          }
        }
        v60 = v147;
        v61 = a1[25];
        v62 = *(_QWORD *)(v61 + 8 * v147);
        v151 = 0u;
        v152 = 0u;
        v150 = 0u;
        std::deque<int>::push_back(&v150, &xgboost::RegTree::kRoot);
        while (*((_QWORD *)&v152 + 1))
        {
          v63 = *(int *)(*(_QWORD *)(*((_QWORD *)&v150 + 1)
                                   + (((unint64_t)(v152 + *((_QWORD *)&v152 + 1) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                       + 4 * ((v152 + *((_QWORD *)&v152 + 1) - 1) & 0x3FF));
          --*((_QWORD *)&v152 + 1);
          std::deque<int>::__maybe_remove_back_spare[abi:ne180100](&v150, 1);
          v64 = *(_QWORD *)(v61 + 8 * v60);
          v65 = *(_QWORD *)(v64 + 160);
          if (*(_DWORD *)(v65 + 20 * (int)v63 + 4) != -1)
          {
            v66 = *(_DWORD *)(v65 + 20 * (int)v63 + 12) & 0x7FFFFFFF;
            ++*((_QWORD *)v145 + v66);
            *((float *)__p + v66) = *(float *)(*(_QWORD *)(v64 + 208) + 16 * v63) + *((float *)__p + v66);
          }
          v149 = 0;
          v67 = *(_QWORD *)(v62 + 160) + 20 * (int)v63;
          v68 = *(_DWORD *)(v67 + 4);
          v148 = 0;
          v149 = v68;
          v69 = *(_DWORD *)(v67 + 8);
          v148 = v69;
          if (v68 != -1)
          {
            std::deque<int>::push_back(&v150, &v149);
            v69 = v148;
          }
          if (v69 != -1)
            std::deque<int>::push_back(&v150, &v148);
        }
        std::deque<int>::~deque[abi:ne180100](&v150);
        v49 = *a3;
        if (v48 == *a3)
          goto LABEL_195;
        if (++v48 == v140)
          goto LABEL_107;
      }
    case 0xBuLL:
      v17 = (uint64_t *)*a2;
LABEL_96:
      v70 = *v17;
      v71 = *(uint64_t *)((char *)v17 + 3);
      if (v70 != 0x6F635F6C61746F74 || v71 != 0x7265766F635F6C61)
        goto LABEL_100;
LABEL_121:
      if (!v140)
        goto LABEL_107;
      v87 = 0;
      v88 = v140;
      do
      {
        v147 = 0;
        if (v87 >= v88)
          goto LABEL_195;
        v147 = *(_DWORD *)(a3[1] + 4 * v87);
        if (v141 < v147)
        {
          dmlc::LogCheckFormat<int,unsigned long>((uint64_t *)&v150);
          if ((_QWORD)v150)
          {
            v89 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v149);
            dmlc::LogMessageFatal::Entry::Init(v89, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.h");
            v90 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v149);
            v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)"Check failed: ", 14);
            v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)"idx <= total_n_trees", 20);
            v93 = *(char *)(v150 + 23);
            v94 = v93 >= 0 ? v150 : *(_QWORD *)v150;
            v95 = v93 >= 0 ? *(unsigned __int8 *)(v150 + 23) : *(_QWORD *)(v150 + 8);
            v96 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, v94, v95);
            v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)": ", 2);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"Invalid tree index.", 19);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v149);
            v98 = v150;
            *(_QWORD *)&v150 = 0;
            if (v98)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v150, v98);
          }
        }
        v99 = v147;
        v100 = a1[25];
        v101 = *(_QWORD *)(v100 + 8 * v147);
        v151 = 0u;
        v152 = 0u;
        v150 = 0u;
        std::deque<int>::push_back(&v150, &xgboost::RegTree::kRoot);
        while (*((_QWORD *)&v152 + 1))
        {
          v102 = *(int *)(*(_QWORD *)(*((_QWORD *)&v150 + 1)
                                    + (((unint64_t)(v152 + *((_QWORD *)&v152 + 1) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                        + 4 * ((v152 + *((_QWORD *)&v152 + 1) - 1) & 0x3FF));
          --*((_QWORD *)&v152 + 1);
          std::deque<int>::__maybe_remove_back_spare[abi:ne180100](&v150, 1);
          v103 = *(_QWORD *)(v100 + 8 * v99);
          v104 = *(_QWORD *)(v103 + 160);
          if (*(_DWORD *)(v104 + 20 * (int)v102 + 4) != -1)
          {
            v105 = *(_DWORD *)(v104 + 20 * (int)v102 + 12) & 0x7FFFFFFF;
            ++*((_QWORD *)v145 + v105);
            *((float *)__p + v105) = *(float *)(*(_QWORD *)(v103 + 208) + 16 * v102 + 4) + *((float *)__p + v105);
          }
          v149 = 0;
          v106 = *(_QWORD *)(v101 + 160) + 20 * (int)v102;
          v107 = *(_DWORD *)(v106 + 4);
          v148 = 0;
          v149 = v107;
          v108 = *(_DWORD *)(v106 + 8);
          v148 = v108;
          if (v107 != -1)
          {
            std::deque<int>::push_back(&v150, &v149);
            v108 = v148;
          }
          if (v108 != -1)
            std::deque<int>::push_back(&v150, &v148);
        }
        std::deque<int>::~deque[abi:ne180100](&v150);
        v88 = *a3;
        if (v87 == *a3)
LABEL_195:
          std::terminate();
        ++v87;
      }
      while (v87 != v140);
LABEL_107:
      v80 = (int *)v139;
      if ((*((char *)v139 + 23) & 0x80000000) == 0)
      {
        v81 = *((unsigned __int8 *)v139 + 23);
        if (v81 != 4)
        {
          if (v81 != 5)
            goto LABEL_151;
          goto LABEL_114;
        }
        v86 = *(_DWORD *)v139;
LABEL_146:
        if (v86 != 1852399975)
          goto LABEL_151;
        goto LABEL_147;
      }
      v82 = v139[1];
      if (v82 == (int *)4)
      {
        v86 = **v139;
        goto LABEL_146;
      }
      if (v82 != (int *)5)
        goto LABEL_151;
      v80 = *v139;
LABEL_114:
      v83 = *v80;
      v84 = *((unsigned __int8 *)v80 + 4);
      if (v83 != 1702260579 || v84 != 114)
        goto LABEL_151;
LABEL_147:
      v109 = (float *)__p;
      if (v144 != __p)
      {
        v110 = (v144 - (_BYTE *)__p) >> 2;
        v111 = (unint64_t *)v145;
        if (v110 <= 1)
          v110 = 1;
        do
        {
          v112 = *v111++;
          *v109 = *v109 / fmaxf((float)v112, 1.0);
          ++v109;
          --v110;
        }
        while (v110);
      }
LABEL_151:
      a4[1] = *a4;
      a5[1] = *a5;
      v114 = v145;
      v113 = v146;
      if (v146 != v145)
      {
        v115 = 0;
        do
        {
          if (v114[v115])
          {
            v117 = a4[1];
            v116 = (unint64_t)a4[2];
            if ((unint64_t)v117 >= v116)
            {
              v119 = *a4;
              v120 = (v117 - *a4) >> 2;
              v121 = v120 + 1;
              if ((unint64_t)(v120 + 1) >> 62)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v122 = v116 - (_QWORD)v119;
              if (v122 >> 1 > v121)
                v121 = v122 >> 1;
              if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFFCLL)
                v123 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v123 = v121;
              if (v123)
              {
                v124 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a4 + 2), v123);
                v119 = *a4;
                v117 = a4[1];
              }
              else
              {
                v124 = 0;
              }
              v125 = &v124[4 * v120];
              *(_DWORD *)v125 = v115;
              v118 = v125 + 4;
              while (v117 != v119)
              {
                v126 = *((_DWORD *)v117 - 1);
                v117 -= 4;
                *((_DWORD *)v125 - 1) = v126;
                v125 -= 4;
              }
              *a4 = v125;
              a4[1] = v118;
              a4[2] = &v124[4 * v123];
              if (v119)
                operator delete(v119);
            }
            else
            {
              *(_DWORD *)v117 = v115;
              v118 = v117 + 4;
            }
            a4[1] = v118;
            v127 = __p;
            v129 = a5[1];
            v128 = (unint64_t)a5[2];
            if ((unint64_t)v129 >= v128)
            {
              v131 = *a5;
              v132 = (v129 - *a5) >> 2;
              v133 = v132 + 1;
              if ((unint64_t)(v132 + 1) >> 62)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v134 = v128 - (_QWORD)v131;
              if (v134 >> 1 > v133)
                v133 = v134 >> 1;
              if ((unint64_t)v134 >= 0x7FFFFFFFFFFFFFFCLL)
                v135 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v135 = v133;
              if (v135)
              {
                v136 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a5 + 2), v135);
                v131 = *a5;
                v129 = a5[1];
              }
              else
              {
                v136 = 0;
              }
              v137 = &v136[4 * v132];
              *(_DWORD *)v137 = v127[v115];
              v130 = v137 + 4;
              while (v129 != v131)
              {
                v138 = *((_DWORD *)v129 - 1);
                v129 -= 4;
                *((_DWORD *)v137 - 1) = v138;
                v137 -= 4;
              }
              *a5 = v137;
              a5[1] = v130;
              a5[2] = &v136[4 * v135];
              if (v131)
                operator delete(v131);
            }
            else
            {
              *(_DWORD *)v129 = *((_DWORD *)__p + v115);
              v130 = v129 + 4;
            }
            a5[1] = v130;
            v114 = v145;
            v113 = v146;
          }
          ++v115;
        }
        while (v115 < (v113 - (_BYTE *)v114) >> 3);
      }
      if (v142.__begin_)
      {
        v142.__end_ = v142.__begin_;
        operator delete(v142.__begin_);
      }
      if (__p)
      {
        v144 = __p;
        operator delete(__p);
      }
      if (v145)
      {
        v146 = v145;
        operator delete(v145);
      }
      return;
    default:
LABEL_100:
      v73 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v150);
      dmlc::LogMessageFatal::Entry::Init(v73, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.h");
      v74 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v150);
      v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"Unknown feature importance type, expected one of: ", 50);
      v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"{\"weight\", \"total_gain\", \"total_cover\", \"gain\", \"cover\"}, got: ", 63);
      v77 = *((char *)a2 + 23);
      if (v77 >= 0)
        v78 = a2;
      else
        v78 = *a2;
      if (v77 >= 0)
        v79 = *((unsigned __int8 *)a2 + 23);
      else
        v79 = (uint64_t)a2[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)v78, v79);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v150);
      goto LABEL_107;
  }
}

void sub_220ED4A40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,char a23,uint64_t a24)
{
  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

BOOL xgboost::gbm::GBTree::UseGPU(xgboost::gbm::GBTree *this)
{
  return *((_DWORD *)this + 79) == 2 || *((_DWORD *)this + 80) == 5;
}

void `non-virtual thunk to'xgboost::gbm::GBTree::~GBTree(xgboost::gbm::GBTree *this)
{
  xgboost::gbm::GBTree::~GBTree((xgboost::gbm::GBTree *)((char *)this - 8));
}

{
  xgboost::gbm::GBTree::~GBTree((xgboost::gbm::GBTree *)((char *)this - 8));
  JUMPOUT(0x227667068);
}

xgboost::RegTree *xgboost::RegTree::RegTree(xgboost::RegTree *this)
{
  uint64_t *v2;
  char *v3;
  unint64_t *v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;

  *(_QWORD *)this = &off_24E6BD360;
  *(_OWORD *)((char *)this + 20) = 0u;
  *(_OWORD *)((char *)this + 36) = 0u;
  *(_OWORD *)((char *)this + 52) = 0u;
  *(_OWORD *)((char *)this + 68) = 0u;
  *(_OWORD *)((char *)this + 84) = 0u;
  *(_OWORD *)((char *)this + 100) = 0u;
  *(_OWORD *)((char *)this + 116) = 0u;
  *(_OWORD *)((char *)this + 132) = 0u;
  *(_QWORD *)((char *)this + 148) = 0;
  *((_OWORD *)this + 10) = 0u;
  v2 = (uint64_t *)((char *)this + 160);
  *((_OWORD *)this + 13) = 0u;
  v3 = (char *)this + 208;
  v4 = (unint64_t *)((char *)this + 232);
  v5 = (char *)this + 280;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_QWORD *)this + 1) = 0x100000001;
  *((_DWORD *)this + 4) = 0;
  std::vector<xgboost::RegTree::Node>::resize((uint64_t)this + 160, 1uLL);
  std::vector<xgboost::RTreeNodeStat>::resize((uint64_t)v3, *((int *)this + 3));
  v6 = *((int *)this + 3);
  v16 = 0;
  v7 = *((_QWORD *)this + 29);
  v8 = *((_QWORD *)this + 30) - v7;
  v9 = v6 >= v8;
  v10 = v6 - v8;
  if (v10 != 0 && v9)
  {
    std::vector<xgboost::FeatureType>::__append(v4, v10, &v16);
    v6 = *((int *)this + 3);
  }
  else if (!v9)
  {
    *((_QWORD *)this + 30) = v7 + v6;
  }
  std::vector<xgboost::RTreeNodeStat>::resize((uint64_t)v5, v6);
  if (*((int *)this + 3) >= 1)
  {
    v11 = 0;
    v12 = 0;
    v13 = *v2;
    do
    {
      v14 = v13 + v11;
      *(_DWORD *)(v14 + 16) = 0;
      *(_QWORD *)(v14 + 4) = -1;
      v13 = *((_QWORD *)this + 20);
      *(_DWORD *)(v13 + v11) = -1;
      ++v12;
      v11 += 20;
    }
    while (v12 < *((int *)this + 3));
  }
  return this;
}

void sub_220ED4CE4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  v7 = *v5;
  if (*v5)
  {
    v1[36] = v7;
    operator delete(v7);
  }
  v8 = (void *)v1[32];
  if (v8)
  {
    v1[33] = v8;
    operator delete(v8);
  }
  v9 = *v4;
  if (*v4)
  {
    v1[30] = v9;
    operator delete(v9);
  }
  v10 = *v3;
  if (*v3)
  {
    v1[27] = v10;
    operator delete(v10);
  }
  v11 = (void *)v1[23];
  if (v11)
  {
    v1[24] = v11;
    operator delete(v11);
  }
  v12 = *v2;
  if (*v2)
  {
    v1[21] = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<xgboost::RegTree::Node>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<xgboost::RegTree::Node>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 20 * a2;
  }
}

void std::vector<xgboost::RTreeNodeStat>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    std::vector<xgboost::RTreeNodeStat>::__append((void **)a1, a2 - v2);
  }
}

void std::vector<xgboost::RegTree::Node>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  _OWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  _OWORD *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _OWORD *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_OWORD **)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - (_BYTE *)v7) >> 2) >= a2)
  {
    if (a2)
    {
      v13 = (_OWORD *)((char *)v7 + 20 * a2);
      v14 = 20 * a2;
      do
      {
        *v7 = xmmword_220F642D0;
        v7 = (_OWORD *)((char *)v7 + 20);
        v14 -= 20;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v7 - (_BYTE *)*a1) >> 2);
    v9 = v8 + a2;
    if (v8 + a2 > 0xCCCCCCCCCCCCCCCLL)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (_BYTE *)*a1) >> 2);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x666666666666666)
      v11 = 0xCCCCCCCCCCCCCCCLL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::RegTree::Node>>(v4, v11);
    else
      v12 = 0;
    v15 = &v12[20 * v8];
    v16 = &v15[20 * a2];
    v17 = 20 * a2;
    v18 = v15;
    do
    {
      *v18 = xmmword_220F642D0;
      v18 = (_OWORD *)((char *)v18 + 20);
      v17 -= 20;
    }
    while (v17);
    v19 = &v12[20 * v11];
    v21 = (char *)*a1;
    v20 = (char *)a1[1];
    if (v20 != *a1)
    {
      do
      {
        v22 = *(_OWORD *)(v20 - 20);
        *((_DWORD *)v15 - 1) = *((_DWORD *)v20 - 1);
        *(_OWORD *)(v15 - 20) = v22;
        v15 -= 20;
        v20 -= 20;
      }
      while (v20 != v21);
      v20 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v16;
    a1[2] = v19;
    if (v20)
      operator delete(v20);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::RegTree::Node>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xCCCCCCCCCCCCCCDLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(20 * a2);
}

void std::vector<xgboost::RTreeNodeStat>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WQSummary<float,float>::Entry>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v10];
    v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    v16 = &v14[16 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void std::vector<xgboost::FeatureType>::__append(unint64_t *a1, unint64_t a2, _BYTE *a3)
{
  unint64_t v4;
  unint64_t v6;
  _BYTE *v7;
  unint64_t v8;
  _BYTE *v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  char *v13;
  _BYTE *v14;
  char *v15;
  char *v16;
  _BYTE *v17;
  char v18;

  v4 = a2;
  v7 = (_BYTE *)a1[1];
  v6 = a1[2];
  if (v6 - (unint64_t)v7 >= a2)
  {
    if (a2)
    {
      v14 = &v7[a2];
      do
      {
        *v7++ = *a3;
        --v4;
      }
      while (v4);
      v7 = v14;
    }
    a1[1] = (unint64_t)v7;
  }
  else
  {
    v8 = *a1;
    v9 = &v7[-*a1];
    v10 = (unint64_t)&v9[a2];
    if ((uint64_t)&v9[a2] < 0)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v11 = v6 - v8;
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL)
      v12 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
      v13 = (char *)operator new(v12);
    else
      v13 = 0;
    v15 = &v9[(_QWORD)v13];
    v16 = &v9[(_QWORD)v13 + v4];
    do
    {
      (v9++)[(_QWORD)v13] = *a3;
      --v4;
    }
    while (v4);
    if (v7 != (_BYTE *)v8)
    {
      v17 = &v7[~v8];
      do
      {
        v18 = *--v7;
        (v17--)[(_QWORD)v13] = v18;
      }
      while (v7 != (_BYTE *)v8);
      v15 = v13;
    }
    *a1 = (unint64_t)v15;
    a1[1] = (unint64_t)v16;
    a1[2] = (unint64_t)&v13[v12];
    if (v8)
      operator delete((void *)v8);
  }
}

void xgboost::gbm::GBTreeModel::~GBTreeModel(xgboost::gbm::GBTreeModel *this)
{
  void *v2;
  void **v3;

  *(_QWORD *)this = off_24E6BE790;
  v2 = (void *)*((_QWORD *)this + 28);
  if (v2)
  {
    *((_QWORD *)this + 29) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 200);
  std::vector<std::unique_ptr<xgboost::TreeUpdater>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 176);
  std::vector<std::unique_ptr<xgboost::TreeUpdater>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

{
  void *v2;
  void **v3;

  *(_QWORD *)this = off_24E6BE790;
  v2 = (void *)*((_QWORD *)this + 28);
  if (v2)
  {
    *((_QWORD *)this + 29) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 200);
  std::vector<std::unique_ptr<xgboost::TreeUpdater>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 176);
  std::vector<std::unique_ptr<xgboost::TreeUpdater>>::__destroy_vector::operator()[abi:ne180100](&v3);
  MEMORY[0x227667068](this, 0x10F1C406709006FLL);
}

void std::vector<std::unique_ptr<xgboost::TreeUpdater>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *std::endl[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1)
{
  const std::locale::facet *v2;
  std::locale v4;

  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v2 = std::locale::use_facet(&v4, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_220ED53C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void std::deque<int>::push_back(_QWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 7) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<int>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_DWORD *)(*(_QWORD *)(v5 + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v8 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<int>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x400;
  v4 = v2 - 1024;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<int *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<int *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<int *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<int *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_220ED5728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__split_buffer<int *>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<int *>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

uint64_t std::deque<int>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = ((v2 - v3) << 7) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x400)
    a2 = 1;
  if (v5 < 0x800)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

uint64_t std::deque<int>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 512;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 1024;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<int *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<int *>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

uint64_t std::__split_buffer<std::unique_ptr<xgboost::RegTree>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<std::pair<std::string,std::string>>::__vdeallocate(std::vector<std::pair<std::string, std::string>> *this)
{
  std::pair<std::string, std::string> *begin;
  std::vector<std::pair<std::string, std::string>>::pointer end;
  std::vector<std::pair<std::string, std::string>>::pointer v4;

  begin = this->__begin_;
  if (this->__begin_)
  {
    end = this->__end_;
    v4 = this->__begin_;
    if (end != begin)
    {
      do
        std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100]((uint64_t)&this->__end_cap_, (uint64_t)--end);
      while (end != begin);
      v4 = this->__begin_;
    }
    this->__end_ = begin;
    operator delete(v4);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

char *std::vector<std::pair<std::string,std::string>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x555555555555556)
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  _QWORD v8[3];
  char v9;
  std::string *v10;
  std::string *v11;

  v4 = this;
  v10 = this;
  v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::pair<std::string,std::string>::pair[abi:ne180100](v4, v6);
      v6 += 3;
      v4 = v11 + 2;
      v11 += 2;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_220ED5EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<std::string,std::string> *,std::pair<std::string,std::string> *,std::pair<std::string,std::string> *>(std::string *__str, std::string *a2, std::string *this)
{
  std::string *v5;

  if (__str != a2)
  {
    v5 = __str;
    do
    {
      std::string::operator=(this, v5);
      std::string::operator=(this + 1, v5 + 1);
      this += 2;
      v5 += 2;
    }
    while (v5 != a2);
  }
  return this;
}

void std::vector<std::vector<std::unique_ptr<xgboost::RegTree>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::unique_ptr<xgboost::TreeUpdater>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<std::vector<std::unique_ptr<xgboost::RegTree>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void **v4;
  void **v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v6 = v4;
    std::vector<std::unique_ptr<xgboost::TreeUpdater>>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<std::unique_ptr<xgboost::RegTree>>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  char *v23;
  uint64_t v24;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    v24 = v4;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    v23 = v16;
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    *((_QWORD *)&v22 + 1) = v17;
    if (v7 != v8)
    {
      do
      {
        v18 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        *(_QWORD *)v7 = 0;
        *((_QWORD *)v15 - 1) = v18;
        v15 -= 8;
      }
      while (v7 != v8);
      v17 = (char *)*((_QWORD *)&v22 + 1);
      v16 = v23;
    }
    v19 = *(_OWORD *)a1;
    *a1 = v15;
    a1[1] = v17;
    v22 = v19;
    v20 = a1[2];
    a1[2] = v16;
    v23 = v20;
    v21 = v19;
    std::__split_buffer<std::unique_ptr<xgboost::RegTree>>::~__split_buffer((uint64_t)&v21);
  }
}

uint64_t dmlc::LogCheckFormat<int,unsigned int>(uint64_t *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[11];
  char v7;
  uint64_t v8;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" (", 2);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" vs. ", 5);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)") ", 2);
  v4 = operator new();
  std::stringbuf::str();
  v6[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  *a1 = v4;
  v6[1] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v8);
}

void sub_220ED6240(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x227667068](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

char *std::vector<xgboost::RegTree::Node>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xCCCCCCCCCCCCCCDLL)
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::RegTree::Node>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[20 * v4];
  return result;
}

_QWORD *std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_220ED6320(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<xgboost::FeatureType>::__init_with_size[abi:ne180100]<xgboost::FeatureType*,xgboost::FeatureType*>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<xgboost::FeatureType>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_220ED6398(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<xgboost::RegTree::Segment>::__init_with_size[abi:ne180100]<xgboost::RegTree::Segment*,xgboost::RegTree::Segment*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<xgboost::tree::GradStats>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_220ED6410(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::gbm::GBTreeModelParam::__DECLARE__(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  std::string *v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  std::string __p;
  std::string __str;

  std::string::basic_string[abi:ne180100]<0>(&__p, "num_trees");
  v3 = operator new();
  *(_BYTE *)(v3 + 8) = 0;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_WORD *)(v3 + 108) = 0;
  *(_QWORD *)v3 = &unk_24E6B5E08;
  *(_BYTE *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 128) = v3 + 136;
  *(_QWORD *)(v3 + 160) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_QWORD *)(v3 + 152) = v3 + 160;
  *(_QWORD *)(v3 + 168) = 0;
  std::string::operator=((std::string *)(v3 + 24), &__p);
  if (*(char *)(v3 + 71) < 0)
  {
    if (*(_QWORD *)(v3 + 56))
      goto LABEL_8;
  }
  else if (*(_BYTE *)(v3 + 71))
  {
    goto LABEL_8;
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, "int");
  v4 = (void **)(v3 + 48);
  if (*(char *)(v3 + 71) < 0)
    operator delete(*v4);
  *(_OWORD *)v4 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
  *(_QWORD *)(v3 + 64) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
LABEL_8:
  *(_QWORD *)(v3 + 96) = 0;
  dmlc::parameter::ParamManager::AddEntry(a2, (const void **)&__p.__r_.__value_.__l.__data_, v3);
  v5 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 80))(v3, 0);
  *(_DWORD *)(v5 + 104) = 0;
  *(_BYTE *)(v5 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&__str, "Number of features used for training and prediction.");
  std::string::operator=((std::string *)(v5 + 72), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_parallel_tree");
  v6 = operator new();
  *(_BYTE *)(v6 + 8) = 0;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_WORD *)(v6 + 108) = 0;
  *(_QWORD *)v6 = &unk_24E6B5E08;
  *(_BYTE *)(v6 + 120) = 0;
  *(_QWORD *)(v6 + 136) = 0;
  *(_QWORD *)(v6 + 128) = v6 + 136;
  *(_QWORD *)(v6 + 160) = 0;
  *(_QWORD *)(v6 + 144) = 0;
  *(_QWORD *)(v6 + 152) = v6 + 160;
  *(_QWORD *)(v6 + 168) = 0;
  std::string::operator=((std::string *)(v6 + 24), &__p);
  if (*(char *)(v6 + 71) < 0)
  {
    if (*(_QWORD *)(v6 + 56))
      goto LABEL_19;
  }
  else if (*(_BYTE *)(v6 + 71))
  {
    goto LABEL_19;
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, "int");
  v7 = (void **)(v6 + 48);
  if (*(char *)(v6 + 71) < 0)
    operator delete(*v7);
  *(_OWORD *)v7 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
  *(_QWORD *)(v6 + 64) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
LABEL_19:
  *(_QWORD *)(v6 + 96) = 4;
  dmlc::parameter::ParamManager::AddEntry(a2, (const void **)&__p.__r_.__value_.__l.__data_, v6);
  *(_DWORD *)(v6 + 104) = 1;
  *(_BYTE *)(v6 + 8) = 1;
  v8 = (std::string *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 80))(v6, 1);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Number of parallel trees constructed during each iteration. This option is used to support boosted random forest.");
  std::string::operator=(v8 + 3, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "size_leaf_vector");
  v9 = operator new();
  *(_BYTE *)(v9 + 8) = 0;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_WORD *)(v9 + 108) = 0;
  *(_QWORD *)v9 = &unk_24E6B5E08;
  *(_BYTE *)(v9 + 120) = 0;
  *(_QWORD *)(v9 + 136) = 0;
  *(_QWORD *)(v9 + 128) = v9 + 136;
  *(_QWORD *)(v9 + 160) = 0;
  *(_QWORD *)(v9 + 144) = 0;
  *(_QWORD *)(v9 + 152) = v9 + 160;
  *(_QWORD *)(v9 + 168) = 0;
  std::string::operator=((std::string *)(v9 + 24), &__p);
  if (*(char *)(v9 + 71) < 0)
  {
    if (*(_QWORD *)(v9 + 56))
      goto LABEL_30;
  }
  else if (*(_BYTE *)(v9 + 71))
  {
    goto LABEL_30;
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, "int");
  v10 = (void **)(v9 + 48);
  if (*(char *)(v9 + 71) < 0)
    operator delete(*v10);
  *(_OWORD *)v10 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
  *(_QWORD *)(v9 + 64) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
LABEL_30:
  *(_QWORD *)(v9 + 96) = 28;
  dmlc::parameter::ParamManager::AddEntry(a2, (const void **)&__p.__r_.__value_.__l.__data_, v9);
  v11 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 80))(v9, 0);
  *(_DWORD *)(v11 + 104) = 0;
  *(_BYTE *)(v11 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&__str, "Reserved option for vector tree.");
  std::string::operator=((std::string *)(v11 + 72), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_220ED681C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void dmlc::parameter::FieldEntry<xgboost::TreeProcessType>::~FieldEntry(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24E6B5E08;
  std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(a1 + 152, *(char **)(a1 + 160));
  std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::destroy(a1 + 128, *(char **)(a1 + 136));
  dmlc::parameter::FieldAccessEntry::~FieldAccessEntry((void **)a1);
}

{
  *(_QWORD *)a1 = &unk_24E6B5E08;
  std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(a1 + 152, *(char **)(a1 + 160));
  std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::destroy(a1 + 128, *(char **)(a1 + 136));
  dmlc::parameter::FieldAccessEntry::~FieldAccessEntry((void **)a1);
  JUMPOUT(0x227667068);
}

void dmlc::parameter::FieldEntry<xgboost::PredictorType>::~FieldEntry(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24E6B5E08;
  std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(a1 + 152, *(char **)(a1 + 160));
  std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::destroy(a1 + 128, *(char **)(a1 + 136));
  dmlc::parameter::FieldAccessEntry::~FieldAccessEntry((void **)a1);
}

{
  *(_QWORD *)a1 = &unk_24E6B5E08;
  std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(a1 + 152, *(char **)(a1 + 160));
  std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::destroy(a1 + 128, *(char **)(a1 + 136));
  dmlc::parameter::FieldAccessEntry::~FieldAccessEntry((void **)a1);
  JUMPOUT(0x227667068);
}

void dmlc::parameter::FieldEntry<xgboost::TreeMethod>::~FieldEntry(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24E6B5E08;
  std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(a1 + 152, *(char **)(a1 + 160));
  std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::destroy(a1 + 128, *(char **)(a1 + 136));
  dmlc::parameter::FieldAccessEntry::~FieldAccessEntry((void **)a1);
}

{
  *(_QWORD *)a1 = &unk_24E6B5E08;
  std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(a1 + 152, *(char **)(a1 + 160));
  std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::destroy(a1 + 128, *(char **)(a1 + 136));
  dmlc::parameter::FieldAccessEntry::~FieldAccessEntry((void **)a1);
  JUMPOUT(0x227667068);
}

void dmlc::parameter::FieldEntry<BOOL>::~FieldEntry(void **a1)
{
  dmlc::parameter::FieldAccessEntry::~FieldAccessEntry(a1);
  JUMPOUT(0x227667068);
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<BOOL>,BOOL>::SetDefault(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  std::runtime_error *exception;
  std::string v17;
  _QWORD v18[33];

  v2 = result;
  if (!*(_BYTE *)(result + 8))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Required parameter ", 19);
    v4 = *(char *)(v2 + 47);
    if (v4 >= 0)
      v5 = v2 + 24;
    else
      v5 = *(_QWORD *)(v2 + 24);
    if (v4 >= 0)
      v6 = *(unsigned __int8 *)(v2 + 47);
    else
      v6 = *(_QWORD *)(v2 + 32);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, v5, v6);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" of ", 4);
    v11 = *(_QWORD *)(v2 + 48);
    v10 = v2 + 48;
    v9 = v11;
    v12 = *(char *)(v10 + 23);
    if (v12 >= 0)
      v13 = v10;
    else
      v13 = v9;
    if (v12 >= 0)
      v14 = *(unsigned __int8 *)(v10 + 23);
    else
      v14 = *(_QWORD *)(v10 + 8);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v13, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" is not presented", 17);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v17);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_24E6B55F0;
  }
  *(_BYTE *)(a2 + *(_QWORD *)(result + 96)) = *(_BYTE *)(result + 104);
  return result;
}

void sub_220ED6B94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void dmlc::parameter::FieldEntry<BOOL>::Set(uint64_t a1, uint64_t a2, char *a3)
{
  std::string::size_type v6;
  int v7;
  char *v8;
  uint64_t v9;
  char v10;
  std::string *v11;
  uint64_t v12;
  char v14;
  void *v15;
  BOOL v16;
  char v17;
  int v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  std::runtime_error *exception;
  std::string v38;
  _QWORD v39[33];
  std::string v40;

  memset(&v40, 0, sizeof(v40));
  if (a3[23] >= 0)
    v6 = a3[23];
  else
    v6 = *((_QWORD *)a3 + 1);
  std::string::resize(&v40, v6, 0);
  v7 = a3[23];
  if (v7 >= 0)
    v8 = a3;
  else
    v8 = *(char **)a3;
  if (v7 >= 0)
    v9 = a3[23];
  else
    v9 = *((_QWORD *)a3 + 1);
  v10 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
  if (v9)
  {
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v40;
    else
      v11 = (std::string *)v40.__r_.__value_.__r.__words[0];
    do
    {
      v11->__r_.__value_.__s.__data_[0] = __tolower(*v8);
      v11 = (std::string *)((char *)v11 + 1);
      ++v8;
      --v9;
    }
    while (v9);
    v10 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
  }
  v12 = *(_QWORD *)(a1 + 96);
  if (v10 < 0)
  {
    if (v40.__r_.__value_.__l.__size_ == 1)
    {
      v15 = (void *)v40.__r_.__value_.__r.__words[0];
      v18 = *v40.__r_.__value_.__l.__data_;
      if (v18 == 48)
      {
LABEL_63:
        v17 = 0;
        goto LABEL_64;
      }
      if (v18 != 49)
        goto LABEL_44;
    }
    else
    {
      if (v40.__r_.__value_.__l.__size_ != 4)
      {
        if (v40.__r_.__value_.__l.__size_ != 5
          || ((v15 = (void *)v40.__r_.__value_.__r.__words[0], *(_DWORD *)v40.__r_.__value_.__l.__data_ == 1936482662)
            ? (v16 = *(_BYTE *)(v40.__r_.__value_.__r.__words[0] + 4) == 101)
            : (v16 = 0),
              !v16))
        {
LABEL_44:
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v39);
          v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Invalid Parameter format for ", 29);
          v20 = *(char *)(a1 + 47);
          if (v20 >= 0)
            v21 = a1 + 24;
          else
            v21 = *(_QWORD *)(a1 + 24);
          if (v20 >= 0)
            v22 = *(unsigned __int8 *)(a1 + 47);
          else
            v22 = *(_QWORD *)(a1 + 32);
          v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v21, v22);
          v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" expect ", 8);
          v27 = *(_QWORD *)(a1 + 48);
          v26 = a1 + 48;
          v25 = v27;
          v28 = *(char *)(v26 + 23);
          if (v28 >= 0)
            v29 = v26;
          else
            v29 = v25;
          if (v28 >= 0)
            v30 = *(unsigned __int8 *)(v26 + 23);
          else
            v30 = *(_QWORD *)(v26 + 8);
          v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, v29, v30);
          v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" but value='", 12);
          v33 = a3[23];
          if (v33 >= 0)
            v34 = (uint64_t)a3;
          else
            v34 = *(_QWORD *)a3;
          if (v33 >= 0)
            v35 = a3[23];
          else
            v35 = *((_QWORD *)a3 + 1);
          v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v34, v35);
          v38.__r_.__value_.__s.__data_[0] = 39;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)&v38, 1);
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::stringbuf::str();
          std::runtime_error::runtime_error(exception, &v38);
          exception->__vftable = (std::runtime_error_vtbl *)&unk_24E6B55F0;
        }
        goto LABEL_63;
      }
      v15 = (void *)v40.__r_.__value_.__r.__words[0];
      if (*(_DWORD *)v40.__r_.__value_.__l.__data_ != 1702195828)
        goto LABEL_44;
    }
    v17 = 1;
LABEL_64:
    *(_BYTE *)(a2 + v12) = v17;
    operator delete(v15);
    return;
  }
  if (v10 != 1)
  {
    if (v10 != 4)
    {
      if (v10 != 5)
        goto LABEL_44;
      if (LODWORD(v40.__r_.__value_.__l.__data_) != 1936482662 || v40.__r_.__value_.__s.__data_[4] != 101)
        goto LABEL_44;
      v14 = 0;
      goto LABEL_39;
    }
    if (LODWORD(v40.__r_.__value_.__l.__data_) != 1702195828)
      goto LABEL_44;
LABEL_38:
    v14 = 1;
LABEL_39:
    *(_BYTE *)(a2 + v12) = v14;
    return;
  }
  if (v40.__r_.__value_.__s.__data_[0] != 48)
  {
    if (v40.__r_.__value_.__s.__data_[0] != 49)
      goto LABEL_44;
    goto LABEL_38;
  }
  *(_BYTE *)(a2 + v12) = 0;
}

void sub_220ED6EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;
  int v17;
  uint64_t v18;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a16);
      if (*(char *)(v18 - 65) < 0)
        operator delete(*(void **)(v18 - 88));
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<BOOL>,BOOL>::GetStringValue(_QWORD *a1, uint64_t a2)
{
  _QWORD v5[11];
  char v6;
  uint64_t v7;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v5);
  (*(void (**)(_QWORD *, _QWORD *, _QWORD))(*a1 + 64))(a1, v5, *(unsigned __int8 *)(a2 + a1[12]));
  std::stringbuf::str();
  v5[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v5[1] = MEMORY[0x24BEDB848] + 16;
  if (v6 < 0)
    operator delete((void *)v5[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v7);
}

void sub_220ED6FEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<BOOL>,BOOL>::GetFieldInfo@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void **v8;
  __int128 v10;
  uint64_t v11;
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  std::string::operator=((std::string *)a2, (const std::string *)(a1 + 24));
  std::string::operator=((std::string *)(a2 + 24), (const std::string *)(a1 + 48));
  v4 = *(char *)(a1 + 71);
  if (v4 >= 0)
    v5 = a1 + 48;
  else
    v5 = *(_QWORD *)(a1 + 48);
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a1 + 71);
  else
    v6 = *(_QWORD *)(a1 + 56);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v5, v6);
  if (*(_BYTE *)(a1 + 8))
  {
    LOBYTE(v10) = 44;
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v10, 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" optional, default=", 19);
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 56))(a1, v12);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", required", 10);
  }
  std::stringbuf::str();
  v8 = (void **)(a2 + 48);
  if (*(char *)(a2 + 71) < 0)
    operator delete(*v8);
  *(_OWORD *)v8 = v10;
  *(_QWORD *)(a2 + 64) = v11;
  std::string::operator=((std::string *)(a2 + 72), (const std::string *)(a1 + 72));
  v12[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v12[1] = MEMORY[0x24BEDB848] + 16;
  if (v13 < 0)
    operator delete((void *)v12[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v14);
}

void sub_220ED7188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v4;
  va_list va;

  va_start(va, a4);
  std::ostringstream::~ostringstream((uint64_t)va);
  dmlc::ParamFieldInfo::~ParamFieldInfo(v4);
  _Unwind_Resume(a1);
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<BOOL>,BOOL>::PrintDefaultValueString(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(unsigned __int8 *, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, a2, a1[104]);
}

uint64_t dmlc::parameter::FieldEntry<BOOL>::PrintValue()
{
  return std::ostream::operator<<();
}

void std::__function::__func<xgboost::gbm::$_6,std::allocator<xgboost::gbm::$_6>,xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::~__func()
{
  JUMPOUT(0x227667068);
}

_QWORD *std::__function::__func<xgboost::gbm::$_6,std::allocator<xgboost::gbm::$_6>,xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6BB850;
  return result;
}

uint64_t std::__function::__func<xgboost::gbm::$_6,std::allocator<xgboost::gbm::$_6>,xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = *a3;
  v5 = operator new();
  xgboost::gbm::GBTree::GBTree(v5, v3, v4);
  return v5;
}

void sub_220ED7260(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10F3C40BCD2A33ELL);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<xgboost::gbm::$_6,std::allocator<xgboost::gbm::$_6>,xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<xgboost::gbm::$_6,std::allocator<xgboost::gbm::$_6>,xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::target_type()
{
}

uint64_t xgboost::gbm::GBTree::GBTree(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = &off_24E6BB5D8;
  *(_QWORD *)(a1 + 8) = &unk_24E6BB6A0;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = off_24E6BE790;
  *(_QWORD *)(a1 + 32) = a2;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 44) = 1;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = a3;
  *(_BYTE *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_WORD *)(a1 + 328) = 0;
  *(_BYTE *)(a1 + 330) = 0;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_QWORD *)(a1 + 384) = 0;
  xgboost::common::Monitor::Monitor((std::chrono::steady_clock::time_point *)(a1 + 392));
  return a1;
}

void sub_220ED73AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  xgboost::gbm::GBTreeModel *v2;
  uint64_t v3;
  void **v4;
  uint64_t v6;
  va_list va;

  va_start(va, a2);
  v6 = *(_QWORD *)(v3 + 384);
  *(_QWORD *)(v3 + 384) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  std::vector<std::unique_ptr<xgboost::TreeUpdater>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v3 + 311) < 0)
    operator delete(*v4);
  xgboost::gbm::GBTreeModel::~GBTreeModel(v2);
  _Unwind_Resume(a1);
}

void std::__function::__func<xgboost::gbm::$_7,std::allocator<xgboost::gbm::$_7>,xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::~__func()
{
  JUMPOUT(0x227667068);
}

_QWORD *std::__function::__func<xgboost::gbm::$_7,std::allocator<xgboost::gbm::$_7>,xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6BB8D0;
  return result;
}

uint64_t std::__function::__func<xgboost::gbm::$_7,std::allocator<xgboost::gbm::$_7>,xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = *a3;
  v5 = operator new();
  xgboost::gbm::GBTree::GBTree(v5, v3, v4);
  *(_QWORD *)v5 = off_24E6BB940;
  *(_QWORD *)(v5 + 8) = &unk_24E6BBA08;
  *(_BYTE *)(v5 + 456) = 0;
  *(_QWORD *)(v5 + 552) = 0;
  *(_OWORD *)(v5 + 488) = 0u;
  *(_OWORD *)(v5 + 504) = 0u;
  *(_OWORD *)(v5 + 520) = 0u;
  *(_OWORD *)(v5 + 536) = 0u;
  return v5;
}

void sub_220ED74BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10F3C401DB78BEBLL);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<xgboost::gbm::$_7,std::allocator<xgboost::gbm::$_7>,xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<xgboost::gbm::$_7,std::allocator<xgboost::gbm::$_7>,xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::target_type()
{
}

void xgboost::gbm::Dart::~Dart(xgboost::gbm::Dart *this)
{
  void *v2;
  void *v3;
  void **v4;

  *(_QWORD *)this = off_24E6BB940;
  *((_QWORD *)this + 1) = &unk_24E6BBA08;
  v4 = (void **)((char *)this + 536);
  std::vector<xgboost::RegTree::FVec>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = (void *)*((_QWORD *)this + 64);
  if (v2)
  {
    *((_QWORD *)this + 65) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 61);
  if (v3)
  {
    *((_QWORD *)this + 62) = v3;
    operator delete(v3);
  }
  xgboost::gbm::GBTree::~GBTree(this);
}

{
  void *v2;
  void *v3;
  void **v4;

  *(_QWORD *)this = off_24E6BB940;
  *((_QWORD *)this + 1) = &unk_24E6BBA08;
  v4 = (void **)((char *)this + 536);
  std::vector<xgboost::RegTree::FVec>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = (void *)*((_QWORD *)this + 64);
  if (v2)
  {
    *((_QWORD *)this + 65) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 61);
  if (v3)
  {
    *((_QWORD *)this + 62) = v3;
    operator delete(v3);
  }
  xgboost::gbm::GBTree::~GBTree(this);
  MEMORY[0x227667068]();
}

float xgboost::gbm::Dart::LoadModel(xgboost::gbm::Dart *this, const xgboost::Json *a2)
{
  _DWORD **v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  _DWORD *v8;
  std::string *Entry;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  const xgboost::Json *v18;
  _DWORD **v19;
  _QWORD *v20;
  float result;
  unint64_t v22;
  uint64_t v23;
  void *__p[2];
  char v25;
  uint64_t v26;

  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  v4 = (_DWORD **)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, __p);
  v5 = xgboost::Cast<xgboost::JsonString const,xgboost::Value const>(*v4);
  v6 = v5 + 2;
  v7 = *((char *)v5 + 39);
  if (v7 < 0)
  {
    if (v5[3] != 4)
    {
LABEL_7:
      dmlc::LogCheckFormat<std::string,char [5]>((uint64_t)v6, "dart", &v26);
      goto LABEL_8;
    }
    v8 = (_DWORD *)*v6;
  }
  else
  {
    v8 = v5 + 2;
    if (v7 != 4)
      goto LABEL_7;
  }
  if (*v8 != 1953653092)
    goto LABEL_7;
  v26 = 0;
LABEL_8:
  if (v25 < 0)
    operator delete(__p[0]);
  if (v26)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
    v10 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: ", 14);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"get<String>(in[\"name\"]) == \"dart\"", 33);
    v13 = *(char *)(v26 + 23);
    v14 = v13 >= 0 ? v26 : *(_QWORD *)v26;
    v15 = v13 >= 0 ? *(unsigned __int8 *)(v26 + 23) : *(_QWORD *)(v26 + 8);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
    v17 = v26;
    v26 = 0;
    if (v17)
      std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v26, v17);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "gbtree");
  v18 = (const xgboost::Json *)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, __p);
  if (v25 < 0)
    operator delete(__p[0]);
  xgboost::gbm::GBTree::LoadModel(this, v18);
  std::string::basic_string[abi:ne180100]<0>(__p, "weight_drop");
  v19 = (_DWORD **)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, __p);
  v20 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v19);
  if (v25 < 0)
    operator delete(__p[0]);
  std::vector<float>::resize((uint64_t)this + 488, (uint64_t)(v20[3] - v20[2]) >> 3);
  if (*((_QWORD *)this + 62) != *((_QWORD *)this + 61))
  {
    v22 = 0;
    do
    {
      result = *((float *)xgboost::Cast<xgboost::JsonNumber const,xgboost::Value const>(*(_DWORD **)(v20[2] + 8 * v22))
               + 4);
      v23 = *((_QWORD *)this + 61);
      *(float *)(v23 + 4 * v22++) = result;
    }
    while (v22 < (*((_QWORD *)this + 62) - v23) >> 2);
  }
  return result;
}

void sub_220ED7844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost::gbm::Dart::SaveModel(xgboost::gbm::Dart *this, xgboost::Json *a2)
{
  uint64_t *v4;
  unsigned int **v5;
  xgboost::Json *v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t *v18;
  void *__p[2];
  char v20;
  void *v21[2];
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25[2];
  uint64_t v26;

  std::string::basic_string[abi:ne180100]<0>(v21, "dart");
  v24 = 0;
  *(_OWORD *)v25 = *(_OWORD *)v21;
  v26 = v22;
  v21[0] = 0;
  v21[1] = 0;
  v22 = 0;
  v23 = off_24E6BE2B8;
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  v4 = (uint64_t *)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, __p);
  xgboost::Json::operator=(v4, (uint64_t)&v23);
  if (v20 < 0)
    operator delete(__p[0]);
  v23 = off_24E6BE2B8;
  if (SHIBYTE(v26) < 0)
    operator delete(v25[0]);
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
  v24 = 0x300000000;
  v23 = &off_24E6BE1D0;
  v25[1] = 0;
  v26 = 0;
  v25[0] = &v25[1];
  std::string::basic_string[abi:ne180100]<0>(v21, "gbtree");
  v5 = (unsigned int **)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, v21);
  xgboost::Json::operator=(v5, (uint64_t)&v23);
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
  v23 = &off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)v25, (_QWORD *)v25[1]);
  std::string::basic_string[abi:ne180100]<0>(&v23, "gbtree");
  v6 = (xgboost::Json *)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v23);
  xgboost::gbm::GBTree::SaveModel(this, v6);
  if (SHIBYTE(v25[0]) < 0)
    operator delete(v23);
  std::vector<xgboost::Json>::vector(v21, (uint64_t)(*((_QWORD *)this + 62) - *((_QWORD *)this + 61)) >> 2);
  v7 = *((_QWORD *)this + 61);
  if (*((_QWORD *)this + 62) != v7)
  {
    v8 = 0;
    do
    {
      v9 = *(_DWORD *)(v7 + 4 * v8);
      v10 = v21[0];
      v11 = operator new();
      *(_QWORD *)(v11 + 8) = 0x100000000;
      v12 = (unsigned int *)(v11 + 8);
      *(_QWORD *)v11 = &off_24E6BE348;
      *(_DWORD *)(v11 + 16) = v9;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      v14 = (unsigned int *)v10[v8];
      v10[v8] = v11;
      if (v14)
      {
        v15 = v14 + 2;
        do
        {
          v16 = __ldxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          __dmb(9u);
          (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
        }
      }
      ++v8;
      v7 = *((_QWORD *)this + 61);
    }
    while (v8 < (*((_QWORD *)this + 62) - v7) >> 2);
  }
  v24 = 0x400000000;
  *(_OWORD *)v25 = *(_OWORD *)v21;
  v26 = v22;
  v21[0] = 0;
  v21[1] = 0;
  v22 = 0;
  v23 = off_24E6BE218;
  std::string::basic_string[abi:ne180100]<0>(__p, "weight_drop");
  v18 = (uint64_t *)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, __p);
  xgboost::Json::operator=(v18, (uint64_t)&v23);
  if (v20 < 0)
    operator delete(__p[0]);
  v23 = off_24E6BE218;
  __p[0] = v25;
  std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v23 = v21;
  std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
}

void sub_220ED7B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void **a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  a22 = (void **)(v29 + 16);
  std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  a22 = &a16;
  std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void xgboost::gbm::Dart::Configure(uint64_t a1, uint64_t a2)
{
  xgboost::gbm::DartTrainParam *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;

  xgboost::gbm::GBTree::Configure(a1, (std::string **)a2);
  if (*(_BYTE *)(a1 + 456))
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    xgboost::gbm::DartTrainParam::__MANAGER__(v4);
    dmlc::parameter::ParamManager::RunUpdate<std::__wrap_iter<std::pair<std::string,std::string> const*>>(&xmmword_253F36B00, a1 + 456, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), 0, &v5, 0);
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    xgboost::gbm::DartTrainParam::__MANAGER__(v4);
    dmlc::parameter::ParamManager::RunInit<std::__wrap_iter<std::pair<std::string,std::string> const*>>(&xmmword_253F36B00, a1 + 456, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), &v5, 0);
    *(_BYTE *)(a1 + 456) = 1;
  }
  v8 = (void **)&v5;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v8);
}

void sub_220ED7D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void xgboost::gbm::Dart::Load(xgboost::gbm::Dart *this, dmlc::Stream *a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;

  xgboost::gbm::GBTree::Load(this, a2);
  v4 = (_QWORD *)((char *)this + 488);
  std::vector<float>::resize((uint64_t)this + 488, *((int *)this + 10));
  if (*((_DWORD *)this + 10))
  {
    v6 = 0;
    if ((**(uint64_t (***)(dmlc::Stream *, unint64_t *, uint64_t))a2)(a2, &v6, 8) == 8)
    {
      v5 = v6;
      std::vector<float>::resize((uint64_t)v4, v6);
      if (v6)
        (**(void (***)(dmlc::Stream *, _QWORD, uint64_t))a2)(a2, *v4, 4 * v5);
    }
  }
}

uint64_t xgboost::gbm::Dart::Save(xgboost::gbm::Dart *this, dmlc::Stream *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = xgboost::gbm::GBTreeModel::Save((uint64_t)this + 24, (uint64_t)a2);
  v5 = *((_QWORD *)this + 62) - *((_QWORD *)this + 61);
  if (v5)
  {
    v6 = v5 >> 2;
    result = (*(uint64_t (**)(dmlc::Stream *, uint64_t *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v6, 8);
    if (v6)
      return (*(uint64_t (**)(dmlc::Stream *, _QWORD, _QWORD))(*(_QWORD *)a2 + 8))(a2, *((_QWORD *)this + 61), *((_QWORD *)this + 62) - *((_QWORD *)this + 61));
  }
  return result;
}

void xgboost::gbm::Dart::Slice(xgboost::gbm::Dart *this, int a2, int a3, int a4, xgboost::GradientBooster *a5, BOOL *a6)
{
  unint64_t v9;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  void **v21;
  unint64_t v22;
  int v23;
  std::string *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  _DWORD *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  int v44;
  std::string *Entry;
  _QWORD *v46;
  _QWORD *v47;
  std::string *v48;
  _QWORD *v49;
  _QWORD *v50;
  int v51;
  int v52;
  char v53;
  uint64_t v54;
  int v55;
  int v56;

  LODWORD(v9) = a3;
  xgboost::gbm::GBTree::Slice(this, a2, a3, a4, a5, a6);
  if (!*a6)
  {
    if (a5
    {
      v13 = v12;
      if (v12[61] != v12[62])
      {
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v54);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
        v46 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v54);
        v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"Check failed: p_dart->weight_drop_.empty()", 42);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v54);
      }
      v14 = *(_DWORD *)(*((_QWORD *)this + 4) + 8);
      v15 = *((_DWORD *)this + 11);
      v16 = xgboost::gbm::detail::LayerToTree((xgboost::gbm::Dart *)((char *)this + 24), (const xgboost::gbm::GBTreeModel *)a2, v9);
      v17 = HIDWORD(v16);
      v56 = HIDWORD(v16);
      v18 = (uint64_t)(*((_QWORD *)this + 26) - *((_QWORD *)this + 25)) >> 3;
      if (v18 >= HIDWORD(v16))
      {
        v19 = (v15 * v14);
        if (!(_DWORD)v9)
          v9 = v18 / v19;
        v55 = v16;
        v52 = ((int)v9 - a2) / a4;
        if (v52)
        {
          v20 = 0;
          v21 = (void **)(v13 + 61);
          v51 = v19 * (a4 - 1);
          LODWORD(v22) = v16;
          do
          {
            if ((_DWORD)v19)
            {
              v23 = 0;
              v22 = (int)v22;
              do
              {
                if (v22 >= v17)
                {
                  dmlc::LogCheckFormat<int,unsigned int>(&v54);
                  if (v54)
                  {
                    v24 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v53);
                    dmlc::LogMessageFatal::Entry::Init(v24, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.h");
                    v25 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v53);
                    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Check failed: ", 14);
                    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"in_it < tree_end", 16);
                    v28 = *(char *)(v54 + 23);
                    v29 = v28 >= 0 ? v54 : *(_QWORD *)v54;
                    v30 = v28 >= 0 ? *(unsigned __int8 *)(v54 + 23) : *(_QWORD *)(v54 + 8);
                    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, v29, v30);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)": ", 2);
                    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v53);
                    v32 = v54;
                    v54 = 0;
                    if (v32)
                      std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v54, v32);
                  }
                }
                v33 = *((_QWORD *)this + 61);
                if (v22 >= (*((_QWORD *)this + 62) - v33) >> 2)
                  std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_out_of_range[abi:ne180100]();
                v35 = (char *)v13[62];
                v34 = v13[63];
                if ((unint64_t)v35 >= v34)
                {
                  v37 = (char *)*v21;
                  v38 = (v35 - (_BYTE *)*v21) >> 2;
                  v39 = v38 + 1;
                  if ((unint64_t)(v38 + 1) >> 62)
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  v40 = v34 - (_QWORD)v37;
                  if (v40 >> 1 > v39)
                    v39 = v40 >> 1;
                  if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL)
                    v41 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v41 = v39;
                  if (v41)
                  {
                    v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v13 + 63), v41);
                    v37 = (char *)v13[61];
                    v35 = (char *)v13[62];
                  }
                  else
                  {
                    v42 = 0;
                  }
                  v43 = &v42[4 * v38];
                  *(_DWORD *)v43 = *(_DWORD *)(v33 + 4 * v22);
                  v36 = v43 + 4;
                  while (v35 != v37)
                  {
                    v44 = *((_DWORD *)v35 - 1);
                    v35 -= 4;
                    *((_DWORD *)v43 - 1) = v44;
                    v43 -= 4;
                  }
                  v13[61] = v43;
                  v13[62] = v36;
                  v13[63] = &v42[4 * v41];
                  if (v37)
                    operator delete(v37);
                }
                else
                {
                  *(_DWORD *)v35 = *(_DWORD *)(v33 + 4 * v22);
                  v36 = v35 + 4;
                }
                v13[62] = v36;
                v55 = ++v22;
                ++v23;
              }
              while (v23 != (_DWORD)v19);
            }
            LODWORD(v22) = v22 + v51;
            v55 = v22;
            ++v20;
          }
          while (v20 != v52);
        }
      }
    }
    else
    {
      v48 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v54);
      dmlc::LogMessageFatal::Entry::Init(v48, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
      v49 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v54);
      v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"Check failed: p_dart", 20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v54);
      __break(1u);
    }
  }
}

void sub_220ED81C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  _Unwind_Resume(a1);
}

uint64_t *xgboost::gbm::Dart::PredictBatch(xgboost::gbm::Dart *this, xgboost::DMatrix *a2, xgboost::PredictionCacheEntry *a3, int a4, unsigned int a5, int a6)
{
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *v11;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *v12;
  double v13;
  void **v14;
  float *v15;
  float *v16;
  float v17;
  float v18;
  unint64_t v19;
  double v20;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v21;
  float *v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  double v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  unint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  double *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  double *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t i;
  double v59;
  double *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  double *v66;
  double *v67;
  uint64_t v68;
  double *v69;
  uint64_t v70;
  double v71;
  double *v72;
  double v73;
  double *v74;
  uint64_t v75;
  uint64_t sig;
  double *ptr;
  unint64_t v78;
  uint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  unint64_t *v88;
  char *v89;
  _QWORD *v90;
  unint64_t v91;
  double *v92;
  double *v93;
  double v94;
  double *v95;
  double v96;
  uint64_t v97;
  unsigned int v98;
  char *v99;
  char *v100;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v101;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v102;
  unint64_t v103;
  unint64_t v104;
  double *v105;
  double *v106;
  double v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _DWORD *v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t *v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t *v127;
  unint64_t *v128;
  unint64_t v129;
  std::string *v130;
  _QWORD *v131;
  _QWORD *v132;
  _QWORD *v133;
  int v134;
  void *v135;
  uint64_t v136;
  _QWORD *v137;
  void *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  float v143;
  uint64_t v144;
  std::string *v145;
  _QWORD *v146;
  _QWORD *v147;
  _QWORD *v148;
  int v149;
  void *v150;
  uint64_t v151;
  _QWORD *v152;
  void *v153;
  xgboost::PredictionCacheEntry *v154;
  uint64_t *v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  std::string *Entry;
  _QWORD *v163;
  _QWORD *v164;
  unsigned int v165;
  uint64_t *Predictor;
  void **v167;
  uint64_t v169;
  unint64_t v170;
  void *__p;
  __int128 v172;
  std::__shared_weak_count *v173;
  std::exception_ptr v174;
  std::mutex v175;
  uint64_t v176;

  v176 = *MEMORY[0x24BDAC8D0];
  if (a4)
  {
    *((_QWORD *)this + 65) = *((_QWORD *)this + 64);
    v11 = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)dmlc::ThreadLocalStore<xgboost::common::RandomThreadLocalEntry>::Get();
    v12 = v11;
    if (*((float *)this + 119) <= 0.0
      || (v13 = (double)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(v11),
          (v13
         + (double)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(v12)
         * 4294967300.0)
        * 5.42101086e-20
        + 0.0 >= *((float *)this + 119)))
    {
      v14 = (void **)((char *)this + 512);
      if (*((_DWORD *)this + 115) == 1)
      {
        v15 = (float *)*((_QWORD *)this + 61);
        v16 = (float *)*((_QWORD *)this + 62);
        v165 = a5;
        v167 = (void **)((char *)this + 512);
        if (v15 == v16)
        {
          v23 = 0;
          v22 = (float *)*((_QWORD *)this + 61);
        }
        else
        {
          v17 = 0.0;
          do
          {
            v18 = *v15++;
            v17 = v17 + v18;
          }
          while (v15 != v16);
          v19 = 0;
          do
          {
            v20 = (double)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(v12);
            v21 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(v12);
            v22 = (float *)*((_QWORD *)this + 61);
            v15 = (float *)*((_QWORD *)this + 62);
            v23 = v15 - v22;
            if ((v20 + (double)v21 * 4294967300.0) * 5.42101086e-20 + 0.0 < (float)((float)(v22[v19]
                                                                                           * (float)(*((float *)this + 117) * (float)v23))
                                                                                   / v17))
            {
              v24 = (char *)*((_QWORD *)this + 65);
              v25 = *((_QWORD *)this + 66);
              if ((unint64_t)v24 >= v25)
              {
                v27 = (char *)*v167;
                v28 = (v24 - (_BYTE *)*v167) >> 3;
                v29 = v28 + 1;
                if ((unint64_t)(v28 + 1) >> 61)
                  std::vector<void *>::__throw_length_error[abi:ne180100]();
                v30 = v25 - (_QWORD)v27;
                if (v30 >> 2 > v29)
                  v29 = v30 >> 2;
                if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
                  v31 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v31 = v29;
                if (v31)
                {
                  v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)this + 528, v31);
                  v24 = (char *)*((_QWORD *)this + 65);
                  v27 = (char *)*((_QWORD *)this + 64);
                }
                else
                {
                  v32 = 0;
                }
                v33 = (unint64_t *)&v32[8 * v28];
                *v33 = v19;
                v26 = v33 + 1;
                while (v24 != v27)
                {
                  v34 = *((_QWORD *)v24 - 1);
                  v24 -= 8;
                  *--v33 = v34;
                }
                *((_QWORD *)this + 64) = v33;
                *((_QWORD *)this + 65) = v26;
                *((_QWORD *)this + 66) = &v32[8 * v31];
                if (v27)
                  operator delete(v27);
              }
              else
              {
                *(_QWORD *)v24 = v19;
                v26 = v24 + 8;
              }
              *((_QWORD *)this + 65) = v26;
              v22 = (float *)*((_QWORD *)this + 61);
              v15 = (float *)*((_QWORD *)this + 62);
              v23 = v15 - v22;
            }
            ++v19;
          }
          while (v19 < v23);
        }
        if (*((_BYTE *)this + 472) && v22 != v15 && *((_QWORD *)this + 64) == *((_QWORD *)this + 65))
        {
          __p = 0;
          v172 = 0uLL;
          if (v23 < 2)
            goto LABEL_124;
          if ((v23 - 1) >> 61)
            std::vector<void *>::__throw_length_error[abi:ne180100]();
          v51 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)&v172 + 8, v23 - 1);
          v53 = (char *)__p;
          v54 = (char *)v172;
          v55 = v51;
          while (v54 != v53)
          {
            v56 = *((_QWORD *)v54 - 1);
            v54 -= 8;
            *((_QWORD *)v55-- - 1) = v56;
          }
          __p = v55;
          *(_QWORD *)&v172 = v51;
          *((_QWORD *)&v172 + 1) = &v51[v52];
          for (i = 0; i != v23; ++i)
          {
            v59 = *(float *)(*((_QWORD *)this + 61)
                           + 4
                           * (unint64_t)((double)v23 / (double)v23 * 0.5
                                              + (double)i * ((double)v23 / (double)v23)
                                              + 0.0));
            if ((unint64_t)v51 >= *((_QWORD *)&v172 + 1))
            {
              v60 = (double *)__p;
              v61 = ((char *)v51 - (_BYTE *)__p) >> 3;
              v62 = v61 + 1;
              if ((unint64_t)(v61 + 1) >> 61)
                std::vector<void *>::__throw_length_error[abi:ne180100]();
              v63 = *((_QWORD *)&v172 + 1) - (_QWORD)__p;
              if ((uint64_t)(*((_QWORD *)&v172 + 1) - (_QWORD)__p) >> 2 > v62)
                v62 = v63 >> 2;
              if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8)
                v64 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v64 = v62;
              if (v64)
              {
                v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)&v172 + 8, v64);
                v60 = (double *)__p;
                v51 = (double *)v172;
              }
              else
              {
                v65 = 0;
              }
              v66 = (double *)&v65[8 * v61];
              *v66 = v59;
              v67 = v66 + 1;
              while (v51 != v60)
              {
                v68 = *((_QWORD *)v51-- - 1);
                *((_QWORD *)v66-- - 1) = v68;
              }
              __p = v66;
              *(_QWORD *)&v172 = v67;
              *((_QWORD *)&v172 + 1) = &v65[8 * v64];
              if (v60)
                operator delete(v60);
              v51 = v67;
            }
            else
            {
              *v51++ = v59;
            }
            *(_QWORD *)&v172 = v51;
          }
          v69 = (double *)__p;
          a5 = v165;
          if (__p == v51)
            goto LABEL_124;
          if ((unint64_t)((char *)v51 - (_BYTE *)__p) < 9)
          {
            *(_QWORD *)&v172 = __p;
            if (*((void **)&v172 + 1) == __p)
              goto LABEL_124;
            __p = 0;
            v172 = 0uLL;
            if (!v69)
              goto LABEL_124;
          }
          else
          {
            v70 = ((char *)v51 - (_BYTE *)__p) >> 3;
            v71 = 0.0;
            v72 = (double *)__p;
            do
            {
              v73 = *v72++;
              v71 = v71 + v73;
            }
            while (v72 != v51);
            if (__p < v51)
            {
              v74 = (double *)__p;
              do
              {
                *v74 = *v74 / v71;
                ++v74;
              }
              while (v74 < v51);
            }
            v174.__ptr_ = 0;
            v175.__m_.__sig = 0;
            *(_QWORD *)v175.__m_.__opaque = 0;
            v75 = v70 - 1;
            if (v70 == 1)
            {
              ptr = 0;
            }
            else
            {
              std::vector<void *>::__vallocate[abi:ne180100](&v174, v70 - 1);
              sig = v175.__m_.__sig;
              bzero((void *)v175.__m_.__sig, 8 * v75);
              v175.__m_.__sig = sig + 8 * v75;
              v69 = (double *)__p;
              v51 = (double *)v172;
              ptr = (double *)v174.__ptr_;
            }
            v92 = v51 - 1;
            if (v69 != v51 - 1)
            {
              v93 = v69 + 1;
              v94 = *v69;
              *ptr = *v69;
              if (v69 + 1 != v92)
              {
                v95 = ptr + 1;
                do
                {
                  v96 = *v93++;
                  v94 = v94 + v96;
                  *v95++ = v94;
                }
                while (v93 != v92);
              }
            }
            __p = ptr;
            v97 = *((_QWORD *)&v172 + 1);
            v172 = *(_OWORD *)&v175.__m_.__sig;
            v174.__ptr_ = v69;
            *(_QWORD *)v175.__m_.__opaque = v97;
            if (!v69)
              goto LABEL_124;
            v175.__m_.__sig = (uint64_t)v69;
          }
          operator delete(v69);
LABEL_124:
          v98 = a5;
          v99 = (char *)__p;
          v100 = (char *)v172;
          v101 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(v12);
          v102 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(v12);
          if ((void *)v172 != __p)
          {
            v103 = (uint64_t)(v172 - (_QWORD)__p) >> 3;
            do
            {
              v104 = v103 >> 1;
              v105 = (double *)&v99[8 * (v103 >> 1)];
              v107 = *v105;
              v106 = v105 + 1;
              v103 += ~(v103 >> 1);
              if (((double)v101 + (double)v102 * 4294967300.0) * 5.42101086e-20 + 0.0 < v107)
                v103 = v104;
              else
                v99 = (char *)v106;
            }
            while (v103);
            v100 = v99;
          }
          if (__p)
          {
            *(_QWORD *)&v172 = __p;
            operator delete(__p);
          }
          v57 = (v100 - (_BYTE *)__p) >> 3;
          v80 = (unint64_t *)*((_QWORD *)this + 65);
          v108 = *((_QWORD *)this + 66);
          a5 = v98;
          if ((unint64_t)v80 < v108)
          {
LABEL_134:
            *v80 = v57;
            v90 = v80 + 1;
LABEL_149:
            *((_QWORD *)this + 65) = v90;
            goto LABEL_150;
          }
          v82 = (unint64_t *)*v167;
          v109 = ((char *)v80 - (_BYTE *)*v167) >> 3;
          v110 = v109 + 1;
          if ((unint64_t)(v109 + 1) >> 61)
            std::vector<void *>::__throw_length_error[abi:ne180100]();
          v111 = v108 - (_QWORD)v82;
          if (v111 >> 2 > v110)
            v110 = v111 >> 2;
          if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFF8)
            v112 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v112 = v110;
          if (v112)
          {
            v113 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)this + 528, v112);
            v80 = (unint64_t *)*((_QWORD *)this + 65);
            v82 = (unint64_t *)*((_QWORD *)this + 64);
          }
          else
          {
            v113 = 0;
          }
          v88 = (unint64_t *)&v113[8 * v109];
          v89 = &v113[8 * v112];
          *v88 = v57;
          v90 = v88 + 1;
          while (v80 != v82)
          {
            v114 = *--v80;
            *--v88 = v114;
          }
LABEL_147:
          *((_QWORD *)this + 64) = v88;
          *((_QWORD *)this + 65) = v90;
          *((_QWORD *)this + 66) = v89;
          if (v82)
            operator delete(v82);
          goto LABEL_149;
        }
      }
      else
      {
        v35 = *((_QWORD *)this + 62);
        if (v35 == *((_QWORD *)this + 61))
        {
          v50 = 0;
          v49 = *((_QWORD *)this + 62);
        }
        else
        {
          v36 = 0;
          do
          {
            v37 = (double)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(v12);
            if ((v37
                + (double)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(v12)
                * 4294967300.0)
               * 5.42101086e-20
               + 0.0 < *((float *)this + 117))
            {
              v38 = (unint64_t *)*((_QWORD *)this + 65);
              v39 = *((_QWORD *)this + 66);
              if ((unint64_t)v38 >= v39)
              {
                v41 = (unint64_t *)*v14;
                v42 = ((char *)v38 - (_BYTE *)*v14) >> 3;
                v43 = v42 + 1;
                if ((unint64_t)(v42 + 1) >> 61)
                  std::vector<void *>::__throw_length_error[abi:ne180100]();
                v44 = v39 - (_QWORD)v41;
                if (v44 >> 2 > v43)
                  v43 = v44 >> 2;
                if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
                  v45 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v45 = v43;
                if (v45)
                {
                  v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)this + 528, v45);
                  v38 = (unint64_t *)*((_QWORD *)this + 65);
                  v41 = (unint64_t *)*((_QWORD *)this + 64);
                }
                else
                {
                  v46 = 0;
                }
                v47 = (unint64_t *)&v46[8 * v42];
                *v47 = v36;
                v40 = v47 + 1;
                while (v38 != v41)
                {
                  v48 = *--v38;
                  *--v47 = v48;
                }
                *((_QWORD *)this + 64) = v47;
                *((_QWORD *)this + 65) = v40;
                *((_QWORD *)this + 66) = &v46[8 * v45];
                if (v41)
                  operator delete(v41);
              }
              else
              {
                *v38 = v36;
                v40 = v38 + 1;
              }
              *((_QWORD *)this + 65) = v40;
            }
            ++v36;
            v49 = *((_QWORD *)this + 61);
            v35 = *((_QWORD *)this + 62);
          }
          while (v36 < (v35 - v49) >> 2);
          v50 = (v35 - v49) >> 2;
        }
        if (*((_BYTE *)this + 472) && v49 != v35 && *((_QWORD *)this + 64) == *((_QWORD *)this + 65))
        {
          if (v50 == 1)
          {
            v57 = 0;
          }
          else if (v50)
          {
            v78 = __clz(v50);
            v79 = 63;
            if (((v50 << v78) & 0x7FFFFFFFFFFFFFFFLL) != 0)
              v79 = 64;
            std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__independent_bits_engine((uint64_t)&v174, (uint64_t)v12, v79 - v78);
            do
              v57 = std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval((uint64_t)&v174);
            while (v57 >= v50);
          }
          else
          {
            std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__independent_bits_engine((uint64_t)&v174, (uint64_t)v12, 0x40uLL);
            v57 = std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval((uint64_t)&v174);
          }
          v80 = (unint64_t *)*((_QWORD *)this + 65);
          v81 = *((_QWORD *)this + 66);
          if ((unint64_t)v80 < v81)
            goto LABEL_134;
          v82 = (unint64_t *)*v14;
          v83 = ((char *)v80 - (_BYTE *)*v14) >> 3;
          v84 = v83 + 1;
          if ((unint64_t)(v83 + 1) >> 61)
            std::vector<void *>::__throw_length_error[abi:ne180100]();
          v85 = v81 - (_QWORD)v82;
          if (v85 >> 2 > v84)
            v84 = v85 >> 2;
          if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8)
            v86 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v86 = v84;
          if (v86)
          {
            v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)this + 528, v86);
            v80 = (unint64_t *)*((_QWORD *)this + 65);
            v82 = (unint64_t *)*((_QWORD *)this + 64);
          }
          else
          {
            v87 = 0;
          }
          v88 = (unint64_t *)&v87[8 * v83];
          v89 = &v87[8 * v86];
          *v88 = v57;
          v90 = v88 + 1;
          while (v80 != v82)
          {
            v91 = *--v80;
            *--v88 = v91;
          }
          goto LABEL_147;
        }
      }
    }
  }
LABEL_150:
  Predictor = (uint64_t *)xgboost::gbm::GBTree::GetPredictor((uint64_t)this, (uint64_t)a3, (uint64_t)a2);
  v115 = *Predictor;
  if (!*Predictor)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v174);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
    v163 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v174);
    v164 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)"Check failed: predictor", 23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v164, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v174);
    v115 = *Predictor;
  }
  v116 = (**(uint64_t (***)(xgboost::DMatrix *))a2)(a2);
  xgboost::Predictor::InitOutPredictions(v115, v116, (uint64_t *)a3, (uint64_t)this + 24);
  *((_DWORD *)a3 + 2) = 0;
  v117 = (_DWORD *)((char *)a3 + 8);
  v118 = xgboost::gbm::detail::LayerToTree((xgboost::gbm::Dart *)((char *)this + 24), (const xgboost::gbm::GBTreeModel *)a5, a6);
  v119 = *(unsigned int *)(*((_QWORD *)this + 4) + 8);
  xgboost::HostDeviceVector<float>::HostDeviceVector(&__p, 0, 0.0);
  LODWORD(v172) = 0;
  *((_QWORD *)&v172 + 1) = 0;
  v173 = 0;
  v120 = *(_QWORD *)(**(uint64_t (***)(xgboost::DMatrix *))a2)(a2) * v119;
  LODWORD(v174.__ptr_) = 0;
  std::vector<float>::resize((uint64_t)__p, v120, &v174);
  v121 = v118;
  v170 = v118;
  if (v118 < HIDWORD(v118))
  {
    v122 = 4 * v119;
    do
    {
      if (!a4)
        goto LABEL_205;
      v123 = (unint64_t *)*((_QWORD *)this + 64);
      v124 = (unint64_t *)*((_QWORD *)this + 65);
      if (v124 == v123)
        goto LABEL_205;
      v125 = v124 - v123;
      do
      {
        v126 = v125 >> 1;
        v127 = &v123[v125 >> 1];
        v129 = *v127;
        v128 = v127 + 1;
        v125 += ~(v125 >> 1);
        if (v129 < v121)
          v123 = v128;
        else
          v125 = v126;
      }
      while (v125);
      if (v123 == v124 || v121 < *v123)
      {
LABEL_205:
        if (v121 < *v117)
        {
          dmlc::LogCheckFormat<unsigned long,unsigned int>((uint64_t *)&v174);
          if (v174.__ptr_)
          {
            v130 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v169);
            dmlc::LogMessageFatal::Entry::Init(v130, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
            v131 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v169);
            v132 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v131, (uint64_t)"Check failed: ", 14);
            v133 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v132, (uint64_t)"i >= p_out_preds->version", 25);
            v134 = *((char *)v174.__ptr_ + 23);
            v135 = v134 >= 0 ? v174.__ptr_ : *(void **)v174.__ptr_;
            v136 = v134 >= 0 ? *((unsigned __int8 *)v174.__ptr_ + 23) : *((_QWORD *)v174.__ptr_ + 1);
            v137 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v133, (uint64_t)v135, v136);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v137, (uint64_t)": ", 2);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v169);
            v138 = v174.__ptr_;
            v174.__ptr_ = 0;
            if (v138)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v174, (uint64_t)v138);
          }
        }
        v139 = v170;
        *v117 = v170 / (*((_DWORD *)this + 11) * *(_DWORD *)(*((_QWORD *)this + 4) + 8));
        v140 = *((_QWORD *)__p + 1) - *(_QWORD *)__p;
        if (v140 >= 1)
          bzero(*(void **)__p, 4 * (((unint64_t)v140 >> 2) - ((unint64_t)v140 > 3)) + 4);
        (*(void (**)(uint64_t, xgboost::DMatrix *, void **, char *, unint64_t, _QWORD))(*(_QWORD *)*Predictor + 24))(*Predictor, a2, &__p, (char *)this + 24, v139, (v139 + 1));
        v141 = *((_QWORD *)this + 61);
        if (v170 >= (*((_QWORD *)this + 62) - v141) >> 2)
          std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_out_of_range[abi:ne180100]();
        v142 = *((_QWORD *)this + 31);
        if (v170 >= (*((_QWORD *)this + 32) - v142) >> 2)
          std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_out_of_range[abi:ne180100]();
        v143 = *(float *)(v141 + 4 * v170);
        v144 = *(int *)(v142 + 4 * v170);
        v169 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a3 + 8) - **(_QWORD **)a3) >> 2;
        if (v169 != (uint64_t)(*((_QWORD *)__p + 1) - *(_QWORD *)__p) >> 2)
        {
          dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v174);
          if (v174.__ptr_)
          {
            v145 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v169);
            dmlc::LogMessageFatal::Entry::Init(v145, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
            v146 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v169);
            v147 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v146, (uint64_t)"Check failed: ", 14);
            v148 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v147, (uint64_t)"p_out_preds->predictions.Size() == predts.predictions.Size()", 60);
            v149 = *((char *)v174.__ptr_ + 23);
            v150 = v149 >= 0 ? v174.__ptr_ : *(void **)v174.__ptr_;
            v151 = v149 >= 0 ? *((unsigned __int8 *)v174.__ptr_ + 23) : *((_QWORD *)v174.__ptr_ + 1);
            v152 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v148, (uint64_t)v150, v151);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v152, (uint64_t)": ", 2);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v169);
            v153 = v174.__ptr_;
            v174.__ptr_ = 0;
            if (v153)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v174, (uint64_t)v153);
          }
        }
        (**(void (***)(xgboost::DMatrix *))a2)(a2);
        v154 = a3;
        v155 = *(uint64_t **)a3;
        v156 = (uint64_t *)__p;
        v157 = *(_QWORD *)(**(uint64_t (***)(xgboost::DMatrix *))a2)(a2);
        v174.__ptr_ = 0;
        v175.__m_.__sig = 850045863;
        memset(v175.__m_.__opaque, 0, sizeof(v175.__m_.__opaque));
        if (v157)
        {
          v158 = *v156;
          v159 = *v155;
          v160 = 4 * v144;
          do
          {
            *(float *)(v159 + v160) = *(float *)(v159 + v160) + (float)(*(float *)(v158 + v160) * v143);
            v160 += v122;
            --v157;
          }
          while (v157);
        }
        dmlc::OMPException::Rethrow(&v174);
        std::mutex::~mutex(&v175);
        std::exception_ptr::~exception_ptr(&v174);
        v121 = v170;
        a3 = v154;
      }
      v170 = ++v121;
    }
    while (v121 < HIDWORD(v118));
  }
  if (v173)
    std::__shared_weak_count::__release_weak(v173);
  return xgboost::HostDeviceVector<float>::~HostDeviceVector((uint64_t *)&__p);
}

void sub_220ED8FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::mutex *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *__p,uint64_t a25)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
  _Unwind_Resume(a1);
}

void sub_220ED908C(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x220ED9084);
}

void xgboost::gbm::Dart::InplacePredict(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, xgboost::gbm::GBTreeModel *a5, int a6, float a7)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::string *Entry;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t i;
  _QWORD *v24;
  const char *v25;
  uint64_t v26;
  char v27;
  char v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::string *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t j;
  uint64_t v36;
  float v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  std::string *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  int v47;
  void *v48;
  uint64_t v49;
  _QWORD *v50;
  void *ptr;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  float *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *__p;
  uint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  uint64_t *v67;
  int v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  _QWORD v71[26];
  std::exception_ptr v72;
  std::mutex v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  v10 = a1 + 24;
  v11 = xgboost::gbm::detail::LayerToTree((xgboost::gbm::detail *)(a1 + 24), (const xgboost::gbm::GBTreeModel *)a5, a6);
  v12 = *(_QWORD *)(a1 + 384);
  __p = (uint64_t *)operator new(8uLL);
  *__p = v12;
  xgboost::MetaInfo::MetaInfo((xgboost::MetaInfo *)v71);
  xgboost::HostDeviceVector<float>::HostDeviceVector(&v67, 0, 0.0);
  v68 = 0;
  v69 = 0;
  v70 = 0;
  if (v11 >= HIDWORD(v11))
    goto LABEL_50;
  v13 = 0;
  v14 = v11;
  do
  {
    if (*(_DWORD *)(a1 + 316))
    {
      v13 = *(_QWORD *)xgboost::gbm::GBTree::GetPredictor(a1, 0, 0);
      v63 = 0;
      v64 = 0;
      v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t **, unint64_t, _QWORD, float))(*(_QWORD *)v13 + 32))(v13, a2, &v63, v10, &v67, v14, (v14 + 1), a7);
      v16 = v64;
      if (v64)
      {
        p_shared_owners = (unint64_t *)&v64->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      if ((v15 & 1) == 0)
      {
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v72);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
        v20 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v72);
        v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Check failed: success", 21);
        v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)": ", 2);
        for (i = 0; i != 42; ++i)
          std::ostream::put();
        std::endl[abi:ne180100]<char,std::char_traits<char>>(v22);
        v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Current Predictor: ", 19);
        if (*(_DWORD *)(a1 + 316) == 1)
          v25 = "cpu_predictor";
        else
          v25 = "gpu_predictor";
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, 13);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v72);
      }
    }
    else
    {
      v26 = *__p;
      if (*__p)
      {
        v65 = 0;
        v66 = 0;
        v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t **, unint64_t, _QWORD, float))(*(_QWORD *)v26 + 32))(v26, a2, &v65, v10, &v67, v14, (v14 + 1), a7);
        v28 = v27;
        v29 = v66;
        if (!v66)
          goto LABEL_21;
        v30 = (unint64_t *)&v66->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
          if ((v28 & 1) != 0)
          {
LABEL_22:
            v13 = *__p;
            goto LABEL_27;
          }
        }
        else
        {
LABEL_21:
          if ((v27 & 1) != 0)
            goto LABEL_22;
        }
      }
      v32 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v72);
      dmlc::LogMessageFatal::Entry::Init(v32, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
      v33 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v72);
      v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Check failed: success", 21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)": ", 2);
      for (j = 0; j != 42; ++j)
        std::ostream::put();
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v72);
    }
LABEL_27:
    v36 = *(_QWORD *)(a1 + 488);
    if (v14 >= (*(_QWORD *)(a1 + 496) - v36) >> 2)
      std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_out_of_range[abi:ne180100]();
    v37 = *(float *)(v36 + 4 * v14);
    v38 = *(unsigned int *)(*(_QWORD *)(a1 + 32) + 8);
    v39 = (v67[1] - *v67) >> 2;
    v40 = v39;
    v41 = v39 / v38;
    if (v14 == v11)
    {
      if (*a3)
      {
        *(_QWORD *)(**(uint64_t (***)(_QWORD))*a3)(*a3) = v41;
        v42 = (_QWORD *)(**(uint64_t (***)(_QWORD))*a3)(*a3);
      }
      else
      {
        v71[0] = v39 / v38;
        v42 = v71;
      }
      xgboost::Predictor::InitOutPredictions(v13, (uint64_t)v42, a4, v10);
      v40 = (v67[1] - *v67) >> 2;
    }
    v62 = v40;
    if (v40 != (uint64_t)(*(_QWORD *)(*a4 + 8) - *(_QWORD *)*a4) >> 2)
    {
      dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v72);
      if (v72.__ptr_)
      {
        v43 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v62);
        dmlc::LogMessageFatal::Entry::Init(v43, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
        v44 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v62);
        v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"Check failed: ", 14);
        v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"predts.predictions.Size() == out_preds->predictions.Size()", 58);
        v47 = *((char *)v72.__ptr_ + 23);
        v48 = v47 >= 0 ? v72.__ptr_ : *(void **)v72.__ptr_;
        v49 = v47 >= 0 ? *((unsigned __int8 *)v72.__ptr_ + 23) : *((_QWORD *)v72.__ptr_ + 1);
        v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)v48, v49);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v62);
        ptr = v72.__ptr_;
        v72.__ptr_ = 0;
        if (ptr)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v72, (uint64_t)ptr);
      }
    }
    v52 = *(_QWORD *)(a1 + 248);
    if (v14 >= (*(_QWORD *)(a1 + 256) - v52) >> 2)
      std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_out_of_range[abi:ne180100]();
    v53 = *(int *)(v52 + 4 * v14);
    v54 = (uint64_t *)*a4;
    v72.__ptr_ = 0;
    v73.__m_.__sig = 850045863;
    memset(v73.__m_.__opaque, 0, sizeof(v73.__m_.__opaque));
    if (v39 >= v38)
    {
      v55 = *v67;
      v56 = *(float **)(a1 + 32);
      v57 = 4 * v53;
      v58 = *v54;
      do
      {
        *(float *)(v58 + v57) = *(float *)(v58 + v57) + (float)((float)(*(float *)(v55 + v57) - *v56) * v37);
        v57 += 4 * v38;
        --v41;
      }
      while (v41);
    }
    dmlc::OMPException::Rethrow(&v72);
    std::mutex::~mutex(&v73);
    std::exception_ptr::~exception_ptr(&v72);
    ++v14;
  }
  while (v14 != HIDWORD(v11));
  if (v70)
    std::__shared_weak_count::__release_weak(v70);
LABEL_50:
  xgboost::HostDeviceVector<float>::~HostDeviceVector((uint64_t *)&v67);
  xgboost::MetaInfo::~MetaInfo((xgboost::MetaInfo *)v71);
  operator delete(__p);
}

void sub_220ED960C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, std::mutex *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  xgboost::PredictionCacheEntry::~PredictionCacheEntry((xgboost::PredictionCacheEntry *)&a25);
  xgboost::MetaInfo::~MetaInfo((xgboost::MetaInfo *)&a29);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_220ED96E0(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x220ED96D8);
}

uint64_t xgboost::gbm::Dart::PredictInstance(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  xgboost::gbm::detail *v9;
  _QWORD *Predictor;
  unint64_t v11;

  v9 = (xgboost::gbm::detail *)a1;
  Predictor = (_QWORD *)xgboost::gbm::GBTree::GetPredictor(a1, 0, 0);
  v9 = (xgboost::gbm::detail *)((char *)v9 + 24);
  v11 = xgboost::gbm::detail::LayerToTree(v9, (const xgboost::gbm::GBTreeModel *)a4, a5) >> 32;
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, xgboost::gbm::detail *, unint64_t))(*(_QWORD *)*Predictor + 40))(*Predictor, a2, a3, v9, v11);
}

uint64_t xgboost::gbm::Dart::PredictContribution(uint64_t a1, uint64_t a2, uint64_t a3, xgboost::gbm::GBTreeModel *a4, int a5, uint64_t a6)
{
  unsigned int v8;
  unint64_t v12;
  std::string *Entry;
  _QWORD *v15;
  _QWORD *v16;
  char v17;

  v8 = a4;
  if (!*(_BYTE *)(a1 + 330))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
    v15 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Check failed: configured_", 25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v17);
  }
  v12 = xgboost::gbm::detail::LayerToTree((xgboost::gbm::detail *)(a1 + 24), (const xgboost::gbm::GBTreeModel *)v8, a5);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, _QWORD, _DWORD))(**(_QWORD **)(a1 + 384) + 56))(*(_QWORD *)(a1 + 384), a2, a3, a1 + 24, HIDWORD(v12), a1 + 488, a6, 0, 0);
}

void sub_220ED9854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

uint64_t xgboost::gbm::Dart::PredictInteractionContributions(uint64_t a1, uint64_t a2, uint64_t a3, xgboost::gbm::GBTreeModel *a4, int a5, uint64_t a6)
{
  unsigned int v8;
  unint64_t v12;
  std::string *Entry;
  _QWORD *v15;
  _QWORD *v16;
  char v17;

  v8 = a4;
  if (!*(_BYTE *)(a1 + 330))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
    v15 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Check failed: configured_", 25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v17);
  }
  v12 = xgboost::gbm::detail::LayerToTree((xgboost::gbm::detail *)(a1 + 24), (const xgboost::gbm::GBTreeModel *)v8, a5);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 384) + 64))(*(_QWORD *)(a1 + 384), a2, a3, a1 + 24, HIDWORD(v12), a1 + 488, a6);
}

void sub_220ED994C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void xgboost::gbm::Dart::LoadConfig(xgboost::gbm::Dart *this, const xgboost::Json *a2)
{
  _DWORD **v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  _DWORD *v8;
  std::string *Entry;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  const xgboost::Json *v18;
  _DWORD **v19;
  xgboost::gbm::DartTrainParam *v20;
  _QWORD *v21;
  _QWORD *v22;
  char *v23;
  uint64_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  BOOL v27;
  _BYTE *v28;
  void *v29[2];
  char v30;
  std::vector<std::pair<std::string, std::string>> v31;
  void *__p;
  _QWORD *v33;
  uint64_t v34;
  __int128 *v35;

  std::string::basic_string[abi:ne180100]<0>(&__p, "name");
  v4 = (_DWORD **)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &__p);
  v5 = xgboost::Cast<xgboost::JsonString const,xgboost::Value const>(*v4);
  v6 = v5 + 2;
  v7 = *((char *)v5 + 39);
  if (v7 < 0)
  {
    if (v5[3] != 4)
    {
LABEL_7:
      dmlc::LogCheckFormat<std::string,char [5]>((uint64_t)v6, "dart", (uint64_t *)v29);
      goto LABEL_8;
    }
    v8 = (_DWORD *)*v6;
  }
  else
  {
    v8 = v5 + 2;
    if (v7 != 4)
      goto LABEL_7;
  }
  if (*v8 != 1953653092)
    goto LABEL_7;
  v29[0] = 0;
LABEL_8:
  if (SHIBYTE(v34) < 0)
    operator delete(__p);
  if (v29[0])
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
    v10 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: ", 14);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"get<String>(in[\"name\"]) == \"dart\"", 33);
    v13 = *((char *)v29[0] + 23);
    v14 = v13 >= 0 ? v29[0] : *(void **)v29[0];
    v15 = v13 >= 0 ? *((unsigned __int8 *)v29[0] + 23) : *((_QWORD *)v29[0] + 1);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v14, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
    v17 = v29[0];
    v29[0] = 0;
    if (v17)
      std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v29, (uint64_t)v17);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "gbtree");
  v18 = (const xgboost::Json *)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &__p);
  if (SHIBYTE(v34) < 0)
    operator delete(__p);
  xgboost::gbm::GBTree::LoadConfig(this, v18);
  std::string::basic_string[abi:ne180100]<0>(v29, "dart_train_param");
  v19 = (_DWORD **)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, v29);
  v20 = (xgboost::gbm::DartTrainParam *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*v19);
  v33 = 0;
  v34 = 0;
  __p = &v33;
  v21 = (_QWORD *)*((_QWORD *)v20 + 2);
  v22 = (_QWORD *)((char *)v20 + 24);
  if (v21 != (_QWORD *)((char *)v20 + 24))
  {
    do
    {
      v23 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>((_DWORD *)v21[7]);
      v35 = (__int128 *)(v21 + 4);
      v24 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&__p, (const void **)v21 + 4, (uint64_t)&std::piecewise_construct, &v35);
      v20 = (xgboost::gbm::DartTrainParam *)std::string::operator=((std::string *)(v24 + 7), (const std::string *)(v23 + 16));
      v25 = (_QWORD *)v21[1];
      if (v25)
      {
        do
        {
          v26 = v25;
          v25 = (_QWORD *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          v26 = (_QWORD *)v21[2];
          v27 = *v26 == (_QWORD)v21;
          v21 = v26;
        }
        while (!v27);
      }
      v21 = v26;
    }
    while (v26 != v22);
  }
  v28 = (char *)this + 456;
  if (*v28)
  {
    memset(&v31, 0, sizeof(v31));
    xgboost::gbm::DartTrainParam::__MANAGER__(v20);
    dmlc::parameter::ParamManager::RunUpdate<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&xmmword_253F36B00, (uint64_t)v28, __p, &v33, 0, &v31, 0);
  }
  else
  {
    memset(&v31, 0, sizeof(v31));
    xgboost::gbm::DartTrainParam::__MANAGER__(v20);
    dmlc::parameter::ParamManager::RunInit<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&xmmword_253F36B00, (uint64_t)v28, __p, &v33, &v31, 0);
    *v28 = 1;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&__p, v33);
  __p = &v31;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v30 < 0)
    operator delete(v29[0]);
}

void sub_220ED9C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, _QWORD *a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  *(_QWORD *)(v24 - 56) = &a16;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 56));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a19, a20);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void xgboost::gbm::Dart::SaveConfig(xgboost::gbm::Dart *this, xgboost::Json *a2)
{
  uint64_t *v4;
  unsigned int **v5;
  xgboost::Json *v6;
  xgboost::gbm::DartTrainParam *v7;
  char *v8;
  uint64_t *v9;
  char *v10;
  char *v11;
  BOOL v12;
  unsigned int **v13;
  void *v14[2];
  uint64_t *v15;
  _QWORD *v16[2];
  void *v17;
  uint64_t v18;
  void *v19[2];
  uint64_t *v20;
  void *__p;
  _QWORD *v22;
  char v23;
  void **v24;

  std::string::basic_string[abi:ne180100]<0>(v14, "dart");
  v18 = 0;
  v17 = off_24E6BE2B8;
  *(_OWORD *)v19 = *(_OWORD *)v14;
  v20 = v15;
  v14[0] = 0;
  v14[1] = 0;
  v15 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "name");
  v4 = (uint64_t *)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &__p);
  xgboost::Json::operator=(v4, (uint64_t)&v17);
  if (v23 < 0)
    operator delete(__p);
  v17 = off_24E6BE2B8;
  if (SHIBYTE(v20) < 0)
    operator delete(v19[0]);
  if (SHIBYTE(v15) < 0)
    operator delete(v14[0]);
  v18 = 0x300000000;
  v17 = &off_24E6BE1D0;
  v19[1] = 0;
  v20 = 0;
  v19[0] = &v19[1];
  std::string::basic_string[abi:ne180100]<0>(v14, "gbtree");
  v5 = (unsigned int **)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, v14);
  xgboost::Json::operator=(v5, (uint64_t)&v17);
  if (SHIBYTE(v15) < 0)
    operator delete(v14[0]);
  v17 = &off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)v19, (_QWORD *)v19[1]);
  std::string::basic_string[abi:ne180100]<0>(&v17, "gbtree");
  v6 = (xgboost::Json *)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v17);
  if (SHIBYTE(v19[0]) < 0)
    operator delete(v17);
  xgboost::gbm::GBTree::SaveConfig(this, v6);
  v14[1] = (void *)0x300000000;
  v14[0] = &off_24E6BE1D0;
  v16[0] = 0;
  v16[1] = 0;
  v15 = (uint64_t *)v16;
  xgboost::gbm::DartTrainParam::__MANAGER__(v7);
  dmlc::parameter::ParamManager::GetDict((dmlc::parameter::ParamManager *)&xmmword_253F36B00, (char *)this + 456, (std::vector<std::pair<std::string, std::string>> *)&v17);
  std::map<std::string,std::string>::map[abi:ne180100]<std::__wrap_iter<std::pair<std::string,std::string> *>>((uint64_t)&__p, (const void **)v17, (const void **)v18);
  v24 = &v17;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v24);
  v8 = (char *)__p;
  if (__p != &v22)
  {
    do
    {
      xgboost::JsonString::JsonString(&v17, (__int128 *)(v8 + 56));
      v24 = (void **)(v8 + 32);
      v9 = std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v15, (const void **)v8 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)&v24);
      xgboost::Json::operator=(v9 + 7, (uint64_t)&v17);
      v17 = off_24E6BE2B8;
      if (SHIBYTE(v20) < 0)
        operator delete(v19[0]);
      v10 = (char *)*((_QWORD *)v8 + 1);
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = *(char **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (char *)*((_QWORD *)v8 + 2);
          v12 = *(_QWORD *)v11 == (_QWORD)v8;
          v8 = v11;
        }
        while (!v12);
      }
      v8 = v11;
    }
    while (v11 != (char *)&v22);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&__p, v22);
  std::string::basic_string[abi:ne180100]<0>(&v17, "dart_train_param");
  v13 = (unsigned int **)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v17);
  xgboost::Json::operator=(v13, (uint64_t)v14);
  if (SHIBYTE(v19[0]) < 0)
    operator delete(v17);
  v14[0] = &off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&v15, v16[0]);
}

void sub_220EDA000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, _QWORD *a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy(v34, a16);
  _Unwind_Resume(a1);
}

void xgboost::gbm::Dart::CommitModel(uint64_t a1, _QWORD *a2, __n128 a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  float v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  float *v18;
  float *v19;
  float *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  float *v26;
  unsigned __int32 v27;
  uint64_t v28;
  void **v29;
  _QWORD *v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  unsigned __int32 v40;
  float v41;
  void **v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  float *v47;
  float v48;
  float *v49;
  float *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  float *v56;
  unsigned __int32 v57;
  _QWORD *v58;
  _QWORD *v59;
  void *__p[2];
  char v61;
  _QWORD v62[35];

  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 8))
  {
    v5 = 0;
    v6 = 0;
    LODWORD(v7) = 0;
    do
    {
      v8 = *a2 + v5;
      LODWORD(v7) = v7 + ((*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 3);
      xgboost::gbm::GBTreeModel::CommitModel(a1 + 24, (char **)v8, v6++);
      v5 += 24;
    }
    while (v6 < *(unsigned int *)(*(_QWORD *)(a1 + 32) + 8));
    v7 = (int)v7;
  }
  else
  {
    v7 = 0;
  }
  v9 = *(uint64_t **)(a1 + 520);
  v10 = *(uint64_t **)(a1 + 512);
  v11 = v9 - v10;
  if (v9 == v10)
  {
    if (v7)
    {
      v28 = 0;
      v29 = (void **)(a1 + 488);
      v30 = (_QWORD *)(a1 + 504);
      v31 = *(char **)(a1 + 496);
      do
      {
        if ((unint64_t)v31 >= *v30)
        {
          v33 = (char *)*v29;
          v34 = (v31 - (_BYTE *)*v29) >> 2;
          v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 62)
LABEL_75:
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v36 = *v30 - (_QWORD)v33;
          if (v36 >> 1 > v35)
            v35 = v36 >> 1;
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
            v37 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v37 = v35;
          if (v37)
          {
            v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 504, v37);
            v33 = *(char **)(a1 + 488);
            v31 = *(char **)(a1 + 496);
          }
          else
          {
            v38 = 0;
          }
          v39 = &v38[4 * v34];
          *(_DWORD *)v39 = 1065353216;
          v32 = v39 + 4;
          while (v31 != v33)
          {
            v40 = *((_DWORD *)v31 - 1);
            v31 -= 4;
            a3.n128_u32[0] = v40;
            *((_DWORD *)v39 - 1) = v40;
            v39 -= 4;
          }
          *(_QWORD *)(a1 + 488) = v39;
          *(_QWORD *)(a1 + 496) = v32;
          *(_QWORD *)(a1 + 504) = &v38[4 * v37];
          if (v33)
            operator delete(v33);
        }
        else
        {
          *(_DWORD *)v31 = 1065353216;
          v32 = v31 + 4;
        }
        *(_QWORD *)(a1 + 496) = v32;
        ++v28;
        v31 = v32;
      }
      while (v28 != v7);
    }
  }
  else
  {
    a3.n128_f64[0] = *(float *)(a1 + 480) / (double)v7;
    a3.n128_f32[0] = a3.n128_f64[0];
    if (*(_DWORD *)(a1 + 464) == 1)
    {
      a3.n128_f64[0] = 1.0 / (a3.n128_f32[0] + 1.0);
      v12 = a3.n128_f64[0];
      v13 = (void **)(a1 + 488);
      v14 = *(_QWORD *)(a1 + 488);
      do
      {
        v15 = *v10++;
        a3.n128_f32[0] = *(float *)(v14 + 4 * v15) * v12;
        *(_DWORD *)(v14 + 4 * v15) = a3.n128_u32[0];
      }
      while (v10 != v9);
      if (v7)
      {
        v16 = 0;
        v17 = (_QWORD *)(a1 + 504);
        v18 = *(float **)(a1 + 496);
        do
        {
          if ((unint64_t)v18 >= *v17)
          {
            v20 = (float *)*v13;
            v21 = ((char *)v18 - (_BYTE *)*v13) >> 2;
            v22 = v21 + 1;
            if ((unint64_t)(v21 + 1) >> 62)
              goto LABEL_75;
            v23 = *v17 - (_QWORD)v20;
            if (v23 >> 1 > v22)
              v22 = v23 >> 1;
            if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
              v24 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v24 = v22;
            if (v24)
            {
              v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 504, v24);
              v20 = *(float **)(a1 + 488);
              v18 = *(float **)(a1 + 496);
            }
            else
            {
              v25 = 0;
            }
            v26 = (float *)&v25[4 * v21];
            *v26 = v12;
            v19 = v26 + 1;
            while (v18 != v20)
            {
              v27 = *((_DWORD *)v18-- - 1);
              a3.n128_u32[0] = v27;
              *((_DWORD *)v26-- - 1) = v27;
            }
            *(_QWORD *)(a1 + 488) = v26;
            *(_QWORD *)(a1 + 496) = v19;
            *(_QWORD *)(a1 + 504) = &v25[4 * v24];
            if (v20)
              operator delete(v20);
          }
          else
          {
            *v18 = v12;
            v19 = v18 + 1;
          }
          *(_QWORD *)(a1 + 496) = v19;
          ++v16;
          v18 = v19;
        }
        while (v16 != v7);
      }
    }
    else
    {
      a3.n128_f32[0] = a3.n128_f32[0] + (float)(unint64_t)v11;
      v42 = (void **)(a1 + 488);
      v43 = *(_QWORD *)(a1 + 488);
      do
      {
        v44 = *v10++;
        v41 = (double)(unint64_t)v11 / a3.n128_f32[0];
        *(float *)(v43 + 4 * v44) = *(float *)(v43 + 4 * v44) * v41;
      }
      while (v10 != v9);
      if (v7)
      {
        v45 = 0;
        v46 = (_QWORD *)(a1 + 504);
        v47 = *(float **)(a1 + 496);
        v48 = 1.0 / a3.n128_f32[0];
        do
        {
          if ((unint64_t)v47 >= *v46)
          {
            v50 = (float *)*v42;
            v51 = ((char *)v47 - (_BYTE *)*v42) >> 2;
            v52 = v51 + 1;
            if ((unint64_t)(v51 + 1) >> 62)
              goto LABEL_75;
            v53 = *v46 - (_QWORD)v50;
            if (v53 >> 1 > v52)
              v52 = v53 >> 1;
            if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL)
              v54 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v54 = v52;
            if (v54)
            {
              v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 504, v54);
              v50 = *(float **)(a1 + 488);
              v47 = *(float **)(a1 + 496);
            }
            else
            {
              v55 = 0;
            }
            v56 = (float *)&v55[4 * v51];
            *v56 = v48;
            v49 = v56 + 1;
            while (v47 != v50)
            {
              v57 = *((_DWORD *)v47-- - 1);
              a3.n128_u32[0] = v57;
              *((_DWORD *)v56-- - 1) = v57;
            }
            *(_QWORD *)(a1 + 488) = v56;
            *(_QWORD *)(a1 + 496) = v49;
            *(_QWORD *)(a1 + 504) = &v55[4 * v54];
            if (v50)
              operator delete(v50);
          }
          else
          {
            *v47 = v48;
            v49 = v47 + 1;
          }
          *(_QWORD *)(a1 + 496) = v49;
          ++v45;
          v47 = v49;
        }
        while (v45 != v7);
      }
    }
  }
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(a1 + 512);
  if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst(a3) + 4) > 1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbtree.cc");
    xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)v62, (uint64_t)__p, 909, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"drop ", 5);
    v58 = (_QWORD *)std::ostream::operator<<();
    v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" trees, ", 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"weight = ", 9);
    std::ostream::operator<<();
    xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v62);
    if (v61 < 0)
      operator delete(__p[0]);
  }
}

void sub_220EDA578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'xgboost::gbm::Dart::~Dart(xgboost::gbm::Dart *this)
{
  xgboost::gbm::GBTree *v2;
  void *v3;
  void *v4;
  void **v5;

  *((_QWORD *)this - 1) = off_24E6BB940;
  v2 = (xgboost::gbm::Dart *)((char *)this - 8);
  *(_QWORD *)this = &unk_24E6BBA08;
  v5 = (void **)((char *)this + 528);
  std::vector<xgboost::RegTree::FVec>::__destroy_vector::operator()[abi:ne180100](&v5);
  v3 = (void *)*((_QWORD *)this + 63);
  if (v3)
  {
    *((_QWORD *)this + 64) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 60);
  if (v4)
  {
    *((_QWORD *)this + 61) = v4;
    operator delete(v4);
  }
  xgboost::gbm::GBTree::~GBTree(v2);
}

{
  xgboost::gbm::GBTree *v2;
  void *v3;
  void *v4;
  void **v5;

  *((_QWORD *)this - 1) = off_24E6BB940;
  v2 = (xgboost::gbm::Dart *)((char *)this - 8);
  *(_QWORD *)this = &unk_24E6BBA08;
  v5 = (void **)((char *)this + 528);
  std::vector<xgboost::RegTree::FVec>::__destroy_vector::operator()[abi:ne180100](&v5);
  v3 = (void *)*((_QWORD *)this + 63);
  if (v3)
  {
    *((_QWORD *)this + 64) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 60);
  if (v4)
  {
    *((_QWORD *)this + 61) = v4;
    operator delete(v4);
  }
  xgboost::gbm::GBTree::~GBTree(v2);
  MEMORY[0x227667068]();
}

void `non-virtual thunk to'xgboost::gbm::Dart::LoadConfig(xgboost::gbm::Dart *this, const xgboost::Json *a2)
{
  xgboost::gbm::Dart::LoadConfig((xgboost::gbm::Dart *)((char *)this - 8), a2);
}

void `non-virtual thunk to'xgboost::gbm::Dart::SaveConfig(xgboost::gbm::Dart *this, xgboost::Json *a2)
{
  xgboost::gbm::Dart::SaveConfig((xgboost::gbm::Dart *)((char *)this - 8), a2);
}

uint64_t dmlc::LogCheckFormat<std::string,char [5]>@<X0>(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD v16[11];
  char v17;
  uint64_t v18;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" (", 2);
  v7 = *(char *)(a1 + 23);
  if (v7 >= 0)
    v8 = a1;
  else
    v8 = *(_QWORD *)a1;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a1 + 23);
  else
    v9 = *(_QWORD *)(a1 + 8);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" vs. ", 5);
  v12 = strlen(a2);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)a2, v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)") ", 2);
  v14 = operator new();
  std::stringbuf::str();
  v16[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  *a3 = v14;
  v16[1] = MEMORY[0x24BEDB848] + 16;
  if (v17 < 0)
    operator delete((void *)v16[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v18);
}

void sub_220EDA7F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x227667068](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void xgboost::PredictionCacheEntry::~PredictionCacheEntry(xgboost::PredictionCacheEntry *this)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  xgboost::HostDeviceVector<float>::~HostDeviceVector((uint64_t *)this);
}

uint64_t xgboost::tree::__dmlc_registry_file_tag_updater_approx__(xgboost::tree *this)
{
  return 0;
}

uint64_t xgboost::tree::__dmlc_registry_file_tag_grow_histmaker__(xgboost::tree *this)
{
  return 0;
}

void sub_220EDA988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void **v16;
  char **v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v20);
  std::unique_ptr<xgboost::tree::GloablApproxBuilder<double>>::reset[abi:ne180100](v19, 0);
  std::unique_ptr<xgboost::tree::GloablApproxBuilder<double>>::reset[abi:ne180100](v18, 0);
  xgboost::common::Monitor::~Monitor(v17);
  xgboost::tree::TrainParam::~TrainParam(v16);
  MEMORY[0x227667068](v15, 0x10F3C4082081CFCLL);
  _Unwind_Resume(a1);
}

void xgboost::tree::GlobalApproxUpdater::~GlobalApproxUpdater(xgboost::tree::GlobalApproxUpdater *this)
{
  void *v2;

  *(_QWORD *)this = off_24E6BBB58;
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)this + 248);
  std::unique_ptr<xgboost::tree::GloablApproxBuilder<double>>::reset[abi:ne180100]((uint64_t *)this + 29, 0);
  std::unique_ptr<xgboost::tree::GloablApproxBuilder<double>>::reset[abi:ne180100]((uint64_t *)this + 28, 0);
  xgboost::common::Monitor::~Monitor((char **)this + 19);
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  v2 = (void *)*((_QWORD *)this + 12);
  if (v2)
  {
    *((_QWORD *)this + 13) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = off_24E6BBB58;
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)this + 248);
  std::unique_ptr<xgboost::tree::GloablApproxBuilder<double>>::reset[abi:ne180100]((uint64_t *)this + 29, 0);
  std::unique_ptr<xgboost::tree::GloablApproxBuilder<double>>::reset[abi:ne180100]((uint64_t *)this + 28, 0);
  xgboost::common::Monitor::~Monitor((char **)this + 19);
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  v2 = (void *)*((_QWORD *)this + 12);
  if (v2)
  {
    *((_QWORD *)this + 13) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x227667068);
}

void xgboost::tree::GlobalApproxUpdater::LoadConfig(xgboost::tree::GlobalApproxUpdater *this, const xgboost::Json *a2)
{
  char *v3;
  _DWORD **v4;
  _DWORD **v5;
  std::vector<std::pair<std::string, std::string>> v6;
  void *__p[2];
  char v8;
  std::vector<std::pair<std::string, std::string>> v9;
  std::vector<std::pair<std::string, std::string>> *v10;

  v3 = (char *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*(_DWORD **)a2) + 16;
  std::string::basic_string[abi:ne180100]<0>(__p, "train_param");
  v4 = (_DWORD **)std::map<std::string,xgboost::Json>::at((uint64_t)v3, (const void **)__p);
  xgboost::FromJson<xgboost::tree::TrainParam>(v4, (xgboost::tree::GlobalApproxUpdater *)((char *)this + 16), &v9);
  v10 = &v9;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "hist_param");
  v5 = (_DWORD **)std::map<std::string,xgboost::Json>::at((uint64_t)v3, (const void **)__p);
  xgboost::FromJson<xgboost::tree::CPUHistMakerTrainParam>(v5, (xgboost::tree::GlobalApproxUpdater *)((char *)this + 216), &v6);
  v10 = &v6;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
  if (v8 < 0)
    operator delete(__p[0]);
}

void sub_220EDAC04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost::tree::GlobalApproxUpdater::SaveConfig(xgboost::tree::GlobalApproxUpdater *this, xgboost::Json *a2)
{
  unsigned int **v4;
  unsigned int **v5;
  void *__p[2];
  char v7;
  _QWORD v8[2];
  uint64_t v9;
  _QWORD *v10;

  xgboost::ToJson<xgboost::tree::TrainParam>((xgboost::tree::GlobalApproxUpdater *)((char *)this + 16), (uint64_t)v8);
  std::string::basic_string[abi:ne180100]<0>(__p, "train_param");
  v4 = (unsigned int **)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, __p);
  xgboost::Json::operator=(v4, (uint64_t)v8);
  if (v7 < 0)
    operator delete(__p[0]);
  v8[0] = &off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&v9, v10);
  xgboost::ToJson<xgboost::tree::CPUHistMakerTrainParam>((xgboost::tree::GlobalApproxUpdater *)((char *)this + 216), (uint64_t)v8);
  std::string::basic_string[abi:ne180100]<0>(__p, "hist_param");
  v5 = (unsigned int **)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, __p);
  xgboost::Json::operator=(v5, (uint64_t)v8);
  if (v7 < 0)
    operator delete(__p[0]);
  v8[0] = &off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&v9, v10);
}

void sub_220EDAD1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, _QWORD *a18)
{
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&a17, a18);
  _Unwind_Resume(a1);
}

void xgboost::tree::GlobalApproxUpdater::Configure(uint64_t a1, uint64_t *a2)
{
  uint64_t v4[3];
  uint64_t v5[3];
  void **v6;

  xgboost::XGBoostParameter<xgboost::tree::TrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::tree::TrainParam *)(a1 + 16), a2, v5);
  v6 = (void **)v5;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v6);
  xgboost::XGBoostParameter<xgboost::tree::CPUHistMakerTrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::tree::CPUHistMakerTrainParam *)(a1 + 216), a2, v4);
  v6 = (void **)v4;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v6);
}

void xgboost::tree::GlobalApproxUpdater::Update(uint64_t a1, uint64_t *a2, uint64_t a3, xgboost::RegTree ***a4)
{
  uint64_t v5;
  _OWORD *v6;
  float v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  void *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t *v27;
  float *v28;
  __int128 v29;
  __int128 v30;
  __int16 v31;
  __int128 v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  const char *v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  std::__shared_weak_count *v40;
  float *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  void *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  float *v52;
  __int128 v53;
  __int128 v54;
  __int16 v55;
  __int128 v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  const char *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  float v70;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *v71;
  int8x8_t *v72;
  int8x8_t *v73;
  double v74;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v75;
  int8x8_t *v76;
  int8x8_t *v77;
  _BYTE *v78;
  _DWORD *v79;
  xgboost::RegTree **v80;
  xgboost::RegTree *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  BOOL v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  std::string *v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  int v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  unsigned int v115;
  int v116;
  uint64_t v117;
  void *Engine;
  char v119;
  rabit::engine *v120;
  float64x2_t v121;
  float32x2_t *v122;
  float32x2_t v123;
  void *v124;
  int v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  float inited;
  float v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  xgboost::tree::CPUExpandEntry *v147;
  std::__shared_weak_count *v148;
  int v149;
  __int128 v150;
  __int128 v151;
  int *v152;
  xgboost::tree::CPUExpandEntry *v153;
  int v154;
  std::__shared_weak_count *v155;
  uint64_t p_shared_weak_owners;
  uint64_t v157;
  int v158;
  int v159;
  int v160;
  int v162;
  uint64_t v164;
  uint64_t v165;
  int v166;
  unint64_t *v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  double *i;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  int v187;
  double v188;
  double v189;
  int v190;
  int v191;
  int v192;
  _QWORD *v193;
  uint64_t v194;
  int v195;
  int v196;
  _QWORD *v197;
  int v198;
  unint64_t *v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  uint64_t v214;
  int *j;
  uint64_t v216;
  uint64_t v217;
  int v218;
  int v219;
  int v220;
  unsigned int v221;
  int v222;
  unsigned int v223;
  std::__shared_weak_count *v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  int v235;
  BOOL v236;
  unint64_t *v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  _QWORD *v241;
  std::string *v242;
  _QWORD *v243;
  _QWORD *v244;
  _QWORD *v245;
  int v246;
  _QWORD *v247;
  uint64_t v248;
  _QWORD *v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  unsigned int v265;
  int v266;
  uint64_t v267;
  void *v268;
  char v269;
  rabit::engine *v270;
  float64x2_t v271;
  float32x2_t *v272;
  float32x2_t v273;
  void *v274;
  int v275;
  unint64_t *v276;
  unint64_t v277;
  unint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  std::__shared_weak_count *v285;
  unint64_t *v286;
  unint64_t v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  float v291;
  float v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  std::__shared_weak_count *v296;
  xgboost::tree::CPUExpandEntry *v297;
  std::__shared_weak_count *v298;
  int v299;
  __int128 v300;
  __int128 v301;
  int *v302;
  xgboost::tree::CPUExpandEntry *v303;
  int v304;
  std::__shared_weak_count *v305;
  uint64_t v306;
  uint64_t v307;
  int v308;
  int v309;
  int v310;
  int v312;
  uint64_t v314;
  uint64_t v315;
  int v316;
  unint64_t *v317;
  unint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  std::__shared_weak_count *v323;
  unint64_t *v324;
  unint64_t v325;
  std::__shared_weak_count *v326;
  unint64_t *v327;
  unint64_t v328;
  std::__shared_weak_count *v329;
  unint64_t *v330;
  unint64_t v331;
  double *k;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  int v336;
  int v337;
  double v338;
  double v339;
  int v340;
  int v341;
  int v342;
  _QWORD *v343;
  uint64_t v344;
  int v345;
  int v346;
  _QWORD *v347;
  int v348;
  unint64_t *v349;
  unint64_t v350;
  unint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  std::__shared_weak_count *v355;
  unint64_t *v356;
  unint64_t v357;
  std::__shared_weak_count *v358;
  unint64_t *v359;
  unint64_t v360;
  std::__shared_weak_count *v361;
  unint64_t *v362;
  unint64_t v363;
  uint64_t v364;
  int *m;
  uint64_t v366;
  uint64_t v367;
  int v368;
  int v369;
  int v370;
  unsigned int v371;
  int v372;
  unsigned int v373;
  std::__shared_weak_count *v374;
  unint64_t v375;
  uint64_t v376;
  uint64_t *v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  _QWORD *v382;
  xgboost::RegTree **v383;
  uint64_t v384;
  std::string *Entry;
  _QWORD *v386;
  _QWORD *v387;
  _QWORD *v388;
  float *v389;
  uint64_t v390;
  xgboost::RegTree **v391;
  xgboost::RegTree **v392;
  xgboost::common::HistogramCuts *v393;
  xgboost::common::HistogramCuts *v394;
  uint64_t v395;
  _QWORD *v396;
  uint64_t v398;
  uint64_t v399;
  void *v401;
  _BYTE *v402;
  void *__dst;
  int8x8_t *v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  std::__shared_weak_count *v409;
  unint64_t v410;
  uint64_t v411;
  std::__shared_weak_count *v412;
  unint64_t v413;
  int8x16_t v414;
  unint64_t v415;
  void *v416;
  std::__shared_weak_count *v417;
  uint64_t v418;
  void *v419;
  void *v420;
  uint64_t v421;
  _BYTE v422[40];
  void *v423;
  _QWORD *v424;
  unint64_t v425;
  void *v426;
  void *v427;
  uint64_t v428;
  void *v429;
  _QWORD *v430;
  _QWORD *v431;
  char v432;
  uint64_t v433;
  xgboost::tree::CPUExpandEntry *v434[2];
  _QWORD v435[2];
  void **v436;
  std::__shared_weak_count *v437;
  _QWORD *v438;
  std::__shared_weak_count *v439;
  _BYTE v440[96];
  uint64_t v441;
  std::string __p;
  uint64_t v443;
  uint64_t v444;
  std::__shared_weak_count *v445;
  _BYTE v446[24];
  _BYTE *v447;
  _QWORD *v448;
  _BYTE v449[40];
  uint64_t v450;

  v5 = a1;
  v450 = *MEMORY[0x24BDAC8D0];
  v6 = (_OWORD *)(a1 + 20);
  v7 = *(float *)(a1 + 20);
  *(float *)(a1 + 20) = v7 / (float)(unint64_t)(a4[1] - *a4);
  v8 = *(unsigned __int8 *)(a1 + 217);
  v9 = a1 + 152;
  v10 = (**(uint64_t (***)(uint64_t))a3)(a3);
  if (v8)
  {
    v11 = operator new();
    v12 = *v6;
    *(_OWORD *)&v440[20] = v6[1];
    v13 = v6[3];
    *(_OWORD *)&v440[36] = v6[2];
    *(_OWORD *)&v440[52] = v13;
    *(_OWORD *)&v440[62] = *(_OWORD *)((char *)v6 + 58);
    v440[0] = *(_BYTE *)(v5 + 16);
    *(_OWORD *)&v440[4] = v12;
    v441 = 0;
    v14 = *(const void **)(v5 + 96);
    v15 = *(_QWORD *)(v5 + 104);
    *(_QWORD *)&v440[80] = 0;
    *(_QWORD *)&v440[88] = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v440[80], v14, v15, (v15 - (uint64_t)v14) >> 2);
    if (*(char *)(v5 + 143) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v5 + 120), *(_QWORD *)(v5 + 128));
    else
      __p = *(std::string *)(v5 + 120);
    v21 = *(_QWORD *)(v5 + 144);
    v443 = v21;
    v22 = *(_QWORD *)(v5 + 8);
    v24 = *(void **)(v5 + 248);
    v23 = *(unint64_t **)(v5 + 256);
    if (v23)
    {
      v25 = v23 + 1;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      v21 = v443;
    }
    v27 = a2;
    v28 = (float *)v6;
    v29 = *(_OWORD *)&v440[4];
    *(_OWORD *)(v11 + 20) = *(_OWORD *)&v440[20];
    v30 = *(_OWORD *)&v440[52];
    *(_OWORD *)(v11 + 36) = *(_OWORD *)&v440[36];
    *(_OWORD *)(v11 + 52) = v30;
    *(_OWORD *)(v11 + 62) = *(_OWORD *)&v440[62];
    v31 = *(_WORD *)(v5 + 264);
    *(_BYTE *)v11 = v440[0];
    *(_OWORD *)(v11 + 4) = v29;
    *(_OWORD *)(v11 + 80) = *(_OWORD *)&v440[80];
    *(_QWORD *)(v11 + 96) = v441;
    *(_QWORD *)&v440[88] = 0;
    v441 = 0;
    *(_QWORD *)&v440[80] = 0;
    v32 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(v11 + 136) = v24;
    *(_OWORD *)(v11 + 104) = v32;
    *(_QWORD *)(v11 + 120) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    memset(&__p, 0, sizeof(__p));
    *(_QWORD *)(v11 + 128) = v21;
    *(_QWORD *)(v11 + 144) = v23;
    v444 = 0;
    v445 = 0;
    v416 = v24;
    v417 = (std::__shared_weak_count *)v23;
    if (v23)
    {
      v33 = v23 + 1;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::HistEvaluator(v11 + 152, v11, v10, 1, (uint64_t)&v416);
    v37 = v417;
    if (v417)
    {
      p_shared_owners = (unint64_t *)&v417->__shared_owners_;
      do
        v39 = __ldaxr(p_shared_owners);
      while (__stlxr(v39 - 1, p_shared_owners));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::HistogramBuilder(v11 + 472, v35, v36);
    *(_QWORD *)(v11 + 888) = v22;
    *(_WORD *)(v11 + 896) = v31;
    *(_OWORD *)(v11 + 904) = 0u;
    *(_OWORD *)(v11 + 920) = 0u;
    *(_QWORD *)(v11 + 936) = v9;
    *(_QWORD *)(v11 + 944) = 0;
    xgboost::common::HistogramCuts::HistogramCuts((xgboost::common::HistogramCuts *)(v11 + 952));
    v40 = v445;
    v41 = v28;
    if (v445)
    {
      v42 = (unint64_t *)&v445->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (*(_QWORD *)&v440[80])
    {
      *(_QWORD *)&v440[88] = *(_QWORD *)&v440[80];
      operator delete(*(void **)&v440[80]);
    }
    std::unique_ptr<xgboost::tree::GloablApproxBuilder<double>>::reset[abi:ne180100]((uint64_t *)(v5 + 224), v11);
  }
  else
  {
    v16 = operator new();
    v17 = *v6;
    *(_OWORD *)&v440[20] = v6[1];
    v18 = v6[3];
    *(_OWORD *)&v440[36] = v6[2];
    *(_OWORD *)&v440[52] = v18;
    *(_OWORD *)&v440[62] = *(_OWORD *)((char *)v6 + 58);
    v440[0] = *(_BYTE *)(v5 + 16);
    *(_OWORD *)&v440[4] = v17;
    v441 = 0;
    v19 = *(const void **)(v5 + 96);
    v20 = *(_QWORD *)(v5 + 104);
    *(_QWORD *)&v440[80] = 0;
    *(_QWORD *)&v440[88] = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v440[80], v19, v20, (v20 - (uint64_t)v19) >> 2);
    if (*(char *)(v5 + 143) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v5 + 120), *(_QWORD *)(v5 + 128));
    else
      __p = *(std::string *)(v5 + 120);
    v44 = *(_QWORD *)(v5 + 144);
    v443 = v44;
    v45 = *(_QWORD *)(v5 + 8);
    v47 = *(void **)(v5 + 248);
    v46 = *(unint64_t **)(v5 + 256);
    if (v46)
    {
      v48 = v46 + 1;
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
      v44 = v443;
    }
    v50 = v9;
    v51 = a2;
    v52 = (float *)v6;
    v53 = *(_OWORD *)&v440[4];
    *(_OWORD *)(v16 + 20) = *(_OWORD *)&v440[20];
    v54 = *(_OWORD *)&v440[52];
    *(_OWORD *)(v16 + 36) = *(_OWORD *)&v440[36];
    *(_OWORD *)(v16 + 52) = v54;
    *(_OWORD *)(v16 + 62) = *(_OWORD *)&v440[62];
    v55 = *(_WORD *)(v5 + 264);
    *(_BYTE *)v16 = v440[0];
    *(_OWORD *)(v16 + 4) = v53;
    *(_OWORD *)(v16 + 80) = *(_OWORD *)&v440[80];
    *(_QWORD *)(v16 + 96) = v441;
    *(_QWORD *)&v440[88] = 0;
    v441 = 0;
    *(_QWORD *)&v440[80] = 0;
    v56 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(v16 + 136) = v47;
    *(_OWORD *)(v16 + 104) = v56;
    *(_QWORD *)(v16 + 120) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    memset(&__p, 0, sizeof(__p));
    *(_QWORD *)(v16 + 128) = v44;
    *(_QWORD *)(v16 + 144) = v46;
    v444 = 0;
    v445 = 0;
    v416 = v47;
    v417 = (std::__shared_weak_count *)v46;
    if (v46)
    {
      v57 = v46 + 1;
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
    }
    xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::HistEvaluator(v16 + 152, v16, v10, 1, (uint64_t)&v416);
    v61 = v417;
    if (v417)
    {
      v62 = (unint64_t *)&v417->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::HistogramBuilder(v16 + 472, v59, v60);
    *(_QWORD *)(v16 + 888) = v45;
    *(_WORD *)(v16 + 896) = v55;
    *(_OWORD *)(v16 + 904) = 0u;
    *(_OWORD *)(v16 + 920) = 0u;
    *(_QWORD *)(v16 + 936) = v50;
    *(_QWORD *)(v16 + 944) = 0;
    xgboost::common::HistogramCuts::HistogramCuts((xgboost::common::HistogramCuts *)(v16 + 952));
    v64 = v445;
    v41 = v52;
    v27 = v51;
    if (v445)
    {
      v65 = (unint64_t *)&v445->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (*(_QWORD *)&v440[80])
    {
      *(_QWORD *)&v440[88] = *(_QWORD *)&v440[80];
      operator delete(*(void **)&v440[80]);
    }
    std::unique_ptr<xgboost::tree::GloablApproxBuilder<double>>::reset[abi:ne180100]((uint64_t *)(v5 + 232), v16);
  }
  v404 = 0;
  v405 = 0;
  __dst = 0;
  v67 = *v27;
  std::vector<xgboost::detail::GradientPairInternal<float>>::resize((uint64_t)&__dst, (uint64_t)(*(_QWORD *)(*v27 + 8) - *(_QWORD *)*v27) >> 3);
  v68 = *(_QWORD *)(v67 + 8);
  if (v68 != *(_QWORD *)v67)
    memmove(__dst, *(const void **)v67, v68 - *(_QWORD *)v67);
  v69 = dmlc::ThreadLocalStore<xgboost::common::RandomThreadLocalEntry>::Get();
  v70 = *(float *)(v5 + 64);
  if (v70 != 1.0)
  {
    v71 = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)v69;
    if (*(_DWORD *)(v5 + 68) == 1)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v440);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/updater_approx.cc");
      v386 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v440);
      v387 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v386, (uint64_t)"Check failed: param.sampling_method != TrainParam::kGradientBased", 65);
      v388 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v387, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v388, (uint64_t)"Gradient based sampling is not supported for approx tree method.", 64);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v440);
      v70 = *(float *)(v5 + 64);
    }
    v72 = (int8x8_t *)__dst;
    v73 = v404;
    if (__dst != v404)
    {
      v74 = v70;
      do
      {
        v75 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(v71);
        *v72 = vand_s8(*v72, (int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(((double)v75+ (double)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(v71)* 4294967300.0)* 5.42101086e-20+ 0.0 < v74), 0x1FuLL)));
        ++v72;
      }
      while (v72 != v73);
    }
  }
  std::vector<float>::vector(&v401, ((char *)v404 - (_BYTE *)__dst) >> 3);
  v76 = (int8x8_t *)__dst;
  v77 = v404;
  v78 = v401;
  if (__dst != v404)
  {
    v79 = v401;
    do
    {
      *v79++ = v76->i32[1];
      ++v76;
    }
    while (v76 != v77);
  }
  *(_QWORD *)(v5 + 240) = a3;
  v80 = *a4;
  v391 = a4[1];
  if (*a4 != v391)
  {
    v389 = v41;
    v390 = v5;
    while (1)
    {
      v392 = v80;
      v81 = *v80;
      v395 = (v402 - (_BYTE *)v401) >> 2;
      v396 = v401;
      if (*(_BYTE *)(v5 + 217))
      {
        v82 = *(_QWORD *)(v5 + 224);
        *(_QWORD *)(v82 + 928) = v81;
        std::string::basic_string[abi:ne180100]<0>(v440, "InitData");
        xgboost::common::Monitor::Start();
        if ((v440[23] & 0x80000000) != 0)
          operator delete(*(void **)v440);
        *(_QWORD *)(v82 + 944) = 0;
        LODWORD(v429) = 0;
        v83 = *(_QWORD *)(v82 + 912);
        v84 = *(_QWORD *)(v82 + 904);
        while (v83 != v84)
        {
          v83 -= 136;
          std::allocator<xgboost::tree::ApproxRowPartitioner>::destroy[abi:ne180100](v83);
        }
        *(_QWORD *)(v82 + 912) = v84;
        v85 = *(_DWORD *)(v82 + 20);
        v86 = (*(_WORD *)(v82 + 896) & 0x100) == 0;
        *(_DWORD *)v440 = -1;
        *(_DWORD *)&v440[4] = v85;
        *(_QWORD *)&v440[8] = v395;
        *(_QWORD *)&v440[16] = v396;
        v440[24] = v86;
        *(_QWORD *)&v440[32] = 0x7FF8000000000000;
        (*(void (**)(void **__return_ptr, uint64_t, _BYTE *))(*(_QWORD *)a3 + 104))(&v416, a3, v440);
        *(_QWORD *)v440 = v416;
        *(_QWORD *)&v440[8] = v417;
        if (v417)
        {
          v87 = (unint64_t *)&v417->__shared_owners_;
          do
            v88 = __ldxr(v87);
          while (__stxr(v88 + 1, v87));
        }
        xgboost::BatchIterator<xgboost::GHistIndexMatrix>::BatchIterator(&v444, 0);
        v393 = (xgboost::common::HistogramCuts *)(v82 + 952);
        while (1)
        {
          v89 = xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator!=((uint64_t *)v440);
          if ((v89 & 1) == 0)
            break;
          v90 = xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator*((uint64_t *)v440);
          v91 = (_QWORD *)v90;
          if ((_DWORD)v429)
          {
            v423 = (void *)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v90 + 128) + 8) - 4);
            if (v423 != (void *)(int)v429)
            {
              dmlc::LogCheckFormat<int,unsigned long>((uint64_t *)&v448);
              if (v448)
              {
                v92 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v423);
                dmlc::LogMessageFatal::Entry::Init(v92, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/updater_approx.cc");
                v93 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v423);
                v94 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)"Check failed: ", 14);
                v95 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)"n_total_bins == page.cut.TotalBins()", 36);
                v96 = *((char *)v448 + 23);
                v97 = v96 >= 0 ? v448 : (_QWORD *)*v448;
                v98 = v96 >= 0 ? *((unsigned __int8 *)v448 + 23) : v448[1];
                v99 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)v97, v98);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)": ", 2);
                dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v423);
                v100 = (uint64_t)v448;
                v448 = 0;
                if (v100)
                  std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v448, v100);
              }
            }
          }
          else
          {
            LODWORD(v429) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v90 + 128) + 8) - 4);
            xgboost::common::HistogramCuts::Copy(v393, (const xgboost::common::HistogramCuts *)(v90 + 112));
          }
          v101 = v91[1];
          if (v101 == *v91)
            v102 = 0;
          else
            v102 = ((v101 - *v91) >> 3) - 1;
          v103 = *(_QWORD *)(v82 + 912);
          v104 = v91[19];
          if (v103 >= *(_QWORD *)(v82 + 920))
          {
            v105 = std::vector<xgboost::tree::ApproxRowPartitioner>::__emplace_back_slow_path<unsigned long,unsigned long const&>((int64x2_t *)(v82 + 904), v102, v104);
          }
          else
          {
            xgboost::tree::ApproxRowPartitioner::ApproxRowPartitioner(*(xgboost::tree::ApproxRowPartitioner **)(v82 + 912), v102, v104);
            v105 = v103 + 136;
            *(_QWORD *)(v82 + 912) = v103 + 136;
          }
          *(_QWORD *)(v82 + 912) = v105;
          ++*(_QWORD *)(v82 + 944);
          xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator++((uint64_t *)v440);
        }
        v106 = v445;
        if (v445)
        {
          v107 = (unint64_t *)&v445->__shared_owners_;
          do
            v108 = __ldaxr(v107);
          while (__stlxr(v108 - 1, v107));
          if (!v108)
          {
            ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
            std::__shared_weak_count::__release_weak(v106);
          }
        }
        v109 = *(std::__shared_weak_count **)&v440[8];
        if (*(_QWORD *)&v440[8])
        {
          v110 = (unint64_t *)(*(_QWORD *)&v440[8] + 8);
          do
            v111 = __ldaxr(v110);
          while (__stlxr(v111 - 1, v110));
          if (!v111)
          {
            ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
            std::__shared_weak_count::__release_weak(v109);
          }
        }
        v112 = v417;
        if (v417)
        {
          v113 = (unint64_t *)&v417->__shared_owners_;
          do
            v114 = __ldaxr(v113);
          while (__stlxr(v114 - 1, v113));
          if (!v114)
          {
            ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
            std::__shared_weak_count::__release_weak(v112);
          }
        }
        v115 = v429;
        v116 = *(_DWORD *)(v82 + 20);
        *(_DWORD *)v440 = -1;
        *(_DWORD *)&v440[4] = v116;
        *(_QWORD *)&v440[8] = v395;
        *(_QWORD *)&v440[16] = v396;
        v440[24] = 0;
        *(_QWORD *)&v440[32] = 0x7FF8000000000000;
        v117 = *(_QWORD *)(v82 + 944);
        Engine = rabit::engine::GetEngine((rabit::engine *)v89);
        v119 = (*(uint64_t (**)(void *))(*(_QWORD *)Engine + 80))(Engine);
        v398 = v82 + 472;
        xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::Reset(v82 + 472, v115, (uint64_t)v440, 1, v117, v119);
        std::string::basic_string[abi:ne180100]<0>(&v416, "InitData");
        xgboost::common::Monitor::Stop();
        if (SHIBYTE(v418) < 0)
          operator delete(v416);
        xgboost::tree::Driver<xgboost::tree::CPUExpandEntry>::Driver(&v444, *(_DWORD *)(v82 + 24));
        std::string::basic_string[abi:ne180100]<0>(v440, "InitRoot");
        v120 = (rabit::engine *)xgboost::common::Monitor::Start();
        if ((v440[23] & 0x80000000) != 0)
          operator delete(*(void **)v440);
        v449[0] = 0;
        v448 = 0;
        v121 = 0uLL;
        memset(&v449[8], 0, 32);
        v414 = 0uLL;
        v122 = (float32x2_t *)__dst;
        if (__dst != v404)
        {
          do
          {
            v123 = *v122++;
            v121 = vaddq_f64(v121, vcvtq_f64_f32(v123));
          }
          while (v122 != (float32x2_t *)v404);
          v414 = (int8x16_t)v121;
        }
        v124 = rabit::engine::GetEngine(v120);
        (*(void (**)(void *, int8x16_t *, uint64_t, uint64_t, double (*)(double *, double *, int), _QWORD, _QWORD))(*(_QWORD *)v124 + 8))(v124, &v414, 8, 2, rabit::op::Reducer<rabit::op::Sum,double>, 0, 0);
        memset(&v440[24], 0, 24);
        memset(v440, 0, 20);
        *(_OWORD *)&v440[48] = *(_OWORD *)v449;
        *(_OWORD *)&v440[64] = *(_OWORD *)&v449[16];
        *(_QWORD *)&v440[80] = *(_QWORD *)&v449[32];
        v435[0] = 0;
        v434[0] = 0;
        v434[1] = 0;
        v429 = v434;
        LOBYTE(v430) = 0;
        v434[0] = (xgboost::tree::CPUExpandEntry *)operator new(0x58uLL);
        v434[1] = v434[0];
        v435[0] = (char *)v434[0] + 88;
        v434[1] = (xgboost::tree::CPUExpandEntry *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<xgboost::tree::CPUExpandEntry>,xgboost::tree::CPUExpandEntry const*,xgboost::tree::CPUExpandEntry const*,xgboost::tree::CPUExpandEntry*>((uint64_t)v435, (uint64_t)v440, (uint64_t)&v440[88], (uint64_t)v434[0]);
        if (*(_QWORD *)&v440[24])
        {
          *(_QWORD *)&v440[32] = *(_QWORD *)&v440[24];
          operator delete(*(void **)&v440[24]);
        }
        xgboost::tree::ConstructHistSpace<std::vector<xgboost::tree::ApproxRowPartitioner>>((xgboost::common::BlockedSpace2d *)v440, (uint64_t *)(v82 + 904), (uint64_t *)v434);
        v125 = *(_DWORD *)(v82 + 20);
        LODWORD(v429) = -1;
        HIDWORD(v429) = v125;
        v430 = (_QWORD *)v395;
        v431 = v396;
        v432 = 0;
        v433 = 0x7FF8000000000000;
        (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(_QWORD *)a3 + 104))(&v411, a3, &v429);
        v408 = v411;
        v409 = v412;
        if (v412)
        {
          v126 = (unint64_t *)&v412->__shared_owners_;
          do
            v127 = __ldxr(v126);
          while (__stxr(v127 + 1, v126));
        }
        xgboost::BatchIterator<xgboost::GHistIndexMatrix>::BatchIterator(&v438, 0);
        v128 = 0;
        v129 = 80;
        while ((xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator!=(&v408) & 1) != 0)
        {
          v130 = xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator*(&v408);
          v423 = 0;
          v424 = 0;
          v425 = 0;
          std::vector<xgboost::common::Range1d>::__init_with_size[abi:ne180100]<xgboost::common::Range1d*,xgboost::common::Range1d*>(&v423, *(const void **)v440, *(uint64_t *)&v440[8], (uint64_t)(*(_QWORD *)&v440[8] - *(_QWORD *)v440) >> 4);
          v426 = 0;
          v427 = 0;
          v428 = 0;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v426, *(const void **)&v440[24], *(uint64_t *)&v440[32], (uint64_t)(*(_QWORD *)&v440[32] - *(_QWORD *)&v440[24]) >> 3);
          v131 = *(_QWORD *)(v82 + 904);
          if (0xF0F0F0F0F0F0F0F1 * ((*(_QWORD *)(v82 + 912) - v131) >> 3) <= v128)
            std::vector<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry,std::allocator<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry>>::__throw_out_of_range[abi:ne180100]();
          v429 = 0;
          v430 = 0;
          v431 = 0;
          xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::BuildHist(v398, v128, (uint64_t)&v423, v130, (uint64_t)v81, v131 + v129, (int **)v434, (int **)&v429, (uint64_t)&__dst);
          v436 = &v429;
          std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100](&v436);
          if (v426)
          {
            v427 = v426;
            operator delete(v426);
          }
          if (v423)
          {
            v424 = v423;
            operator delete(v423);
          }
          ++v128;
          v129 += 136;
          xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator++(&v408);
        }
        v132 = v439;
        if (v439)
        {
          v133 = (unint64_t *)&v439->__shared_owners_;
          do
            v134 = __ldaxr(v133);
          while (__stlxr(v134 - 1, v133));
          if (!v134)
          {
            ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
            std::__shared_weak_count::__release_weak(v132);
          }
        }
        v135 = v409;
        if (v409)
        {
          v136 = (unint64_t *)&v409->__shared_owners_;
          do
            v137 = __ldaxr(v136);
          while (__stlxr(v137 - 1, v136));
          if (!v137)
          {
            ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
            std::__shared_weak_count::__release_weak(v135);
          }
        }
        v138 = v412;
        if (v412)
        {
          v139 = (unint64_t *)&v412->__shared_owners_;
          do
            v140 = __ldaxr(v139);
          while (__stlxr(v140 - 1, v139));
          if (!v140)
          {
            ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
            std::__shared_weak_count::__release_weak(v138);
          }
        }
        inited = xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::InitRoot(v82 + 152, &v414);
        v142 = *(double *)&v414.i64[1];
        v143 = *((_QWORD *)v81 + 26);
        *(float *)(v143 + 4) = v142;
        *(float *)(v143 + 8) = inited;
        v144 = *((_QWORD *)v81 + 20);
        *(float *)(v144 + 16) = inited * *(float *)(v82 + 4);
        *(_QWORD *)(v144 + 4) = -1;
        v145 = (**(uint64_t (***)(uint64_t))a3)(a3);
        v146 = **(std::__shared_weak_count ***)(v145 + 168);
        v411 = *(_QWORD *)(*(_QWORD *)(v145 + 168) + 8) - (_QWORD)v146;
        v412 = v146;
        xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(v82 + 152, v398, (uint64_t)v393, (uint64_t)&v411, (uint64_t)v81, (uint64_t *)v434);
        std::string::basic_string[abi:ne180100]<0>(&v429, "InitRoot");
        xgboost::common::Monitor::Stop();
        if (SHIBYTE(v431) < 0)
          operator delete(v429);
        v147 = v434[0];
        v148 = (std::__shared_weak_count *)*((_QWORD *)v434[0] + 1);
        v416 = *(void **)v434[0];
        v149 = *((_DWORD *)v434[0] + 4);
        v417 = v148;
        LODWORD(v418) = v149;
        v420 = 0;
        v421 = 0;
        v419 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v419, *((const void **)v147 + 3), *((_QWORD *)v147 + 4), (uint64_t)(*((_QWORD *)v147 + 4) - *((_QWORD *)v147 + 3)) >> 2);
        v150 = *((_OWORD *)v147 + 3);
        v151 = *((_OWORD *)v147 + 4);
        *(_QWORD *)&v422[32] = *((_QWORD *)v147 + 10);
        *(_OWORD *)v422 = v150;
        *(_OWORD *)&v422[16] = v151;
        if (*(_QWORD *)&v440[24])
        {
          *(_QWORD *)&v440[32] = *(_QWORD *)&v440[24];
          operator delete(*(void **)&v440[24]);
        }
        if (*(_QWORD *)v440)
        {
          *(_QWORD *)&v440[8] = *(_QWORD *)v440;
          operator delete(*(void **)v440);
        }
        *(_QWORD *)v440 = v434;
        std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)v440);
        xgboost::tree::Driver<xgboost::tree::CPUExpandEntry>::Push(&v444, (uint64_t)&v416);
        if (v419)
        {
          v420 = v419;
          operator delete(v419);
        }
        xgboost::tree::Driver<xgboost::tree::CPUExpandEntry>::Pop((uint64_t)&v444, (uint64_t *)v434);
        v152 = (int *)v434[0];
        v153 = v434[1];
        if (v434[0] != v434[1])
        {
          v154 = 1;
          do
          {
            v414 = 0uLL;
            v415 = 0;
            v411 = 0;
            v412 = 0;
            v413 = 0;
            do
            {
              if (xgboost::tree::CPUExpandEntry::IsValid((xgboost::tree::CPUExpandEntry *)v152, (const xgboost::tree::TrainParam *)v82, v154))
              {
                xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::ApplyTreeSplit(v82 + 152, v152, v81);
                v155 = v412;
                if ((unint64_t)v412 >= v413)
                {
                  p_shared_weak_owners = std::vector<xgboost::tree::CPUExpandEntry>::__push_back_slow_path<xgboost::tree::CPUExpandEntry const&>(&v411, (uint64_t)v152);
                }
                else
                {
                  std::vector<xgboost::tree::CPUExpandEntry>::__construct_one_at_end[abi:ne180100]<xgboost::tree::CPUExpandEntry const&>((uint64_t)&v411, (uint64_t)v152);
                  p_shared_weak_owners = (uint64_t)&v155[3].__shared_weak_owners_;
                }
                v412 = (std::__shared_weak_count *)p_shared_weak_owners;
                v157 = *((_QWORD *)v81 + 20);
                v158 = *(_DWORD *)(v157 + 20 * *(int *)(v157 + 20 * *v152 + 4));
                if (v158 == -1)
                {
                  v159 = 0;
                }
                else
                {
                  v159 = 0;
                  do
                  {
                    ++v159;
                    v158 = *(_DWORD *)(v157 + 20 * (v158 & 0x7FFFFFFF));
                  }
                  while (v158 != -1);
                }
                ++v154;
                v160 = *(_DWORD *)(v82 + 12);
                if (v160 < 1 || v160 > v159)
                {
                  v162 = *(_DWORD *)(v82 + 16);
                  if (v162 < 1 || v162 > v154)
                  {
                    v164 = v414.i64[1];
                    if (v414.i64[1] >= v415)
                    {
                      v165 = std::vector<xgboost::tree::CPUExpandEntry>::__emplace_back_slow_path<xgboost::tree::CPUExpandEntry const&>(v414.i64, (uint64_t)v152);
                    }
                    else
                    {
                      std::vector<xgboost::tree::CPUExpandEntry>::__construct_one_at_end[abi:ne180100]<xgboost::tree::CPUExpandEntry const&>((uint64_t)&v414, (uint64_t)v152);
                      v165 = v164 + 88;
                    }
                    v414.i64[1] = v165;
                  }
                }
              }
              v152 += 22;
            }
            while (v152 != (int *)v153);
            std::string::basic_string[abi:ne180100]<0>(v440, "UpdatePosition");
            xgboost::common::Monitor::Start();
            if ((v440[23] & 0x80000000) != 0)
              operator delete(*(void **)v440);
            v166 = *(_DWORD *)(v82 + 20);
            *(_DWORD *)v440 = -1;
            *(_DWORD *)&v440[4] = v166;
            *(_QWORD *)&v440[8] = v395;
            *(_QWORD *)&v440[16] = v396;
            v440[24] = 0;
            *(_QWORD *)&v440[32] = 0x7FF8000000000000;
            (*(void (**)(void **__return_ptr, uint64_t, _BYTE *))(*(_QWORD *)a3 + 104))(&v416, a3, v440);
            *(_QWORD *)v440 = v416;
            *(_QWORD *)&v440[8] = v417;
            if (v417)
            {
              v167 = (unint64_t *)&v417->__shared_owners_;
              do
                v168 = __ldxr(v167);
              while (__stxr(v168 + 1, v167));
            }
            xgboost::BatchIterator<xgboost::GHistIndexMatrix>::BatchIterator(&v448, 0);
            v169 = 0;
            v170 = -1;
            while ((xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator!=((uint64_t *)v440) & 1) != 0)
            {
              v171 = xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator*((uint64_t *)v440);
              v172 = *(_QWORD *)(v82 + 904);
              if (0xF0F0F0F0F0F0F0F1 * ((*(_QWORD *)(v82 + 912) - v172) >> 3) <= ++v170)
                std::vector<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry,std::allocator<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry>>::__throw_out_of_range[abi:ne180100]();
              xgboost::tree::ApproxRowPartitioner::UpdatePosition((uint64_t *)(v172 + v169), v171, &v411, v81);
              v169 += 136;
              xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator++((uint64_t *)v440);
            }
            v173 = *(std::__shared_weak_count **)v449;
            if (*(_QWORD *)v449)
            {
              v174 = (unint64_t *)(*(_QWORD *)v449 + 8);
              do
                v175 = __ldaxr(v174);
              while (__stlxr(v175 - 1, v174));
              if (!v175)
              {
                ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
                std::__shared_weak_count::__release_weak(v173);
              }
            }
            v176 = *(std::__shared_weak_count **)&v440[8];
            if (*(_QWORD *)&v440[8])
            {
              v177 = (unint64_t *)(*(_QWORD *)&v440[8] + 8);
              do
                v178 = __ldaxr(v177);
              while (__stlxr(v178 - 1, v177));
              if (!v178)
              {
                ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
                std::__shared_weak_count::__release_weak(v176);
              }
            }
            v179 = v417;
            if (v417)
            {
              v180 = (unint64_t *)&v417->__shared_owners_;
              do
                v181 = __ldaxr(v180);
              while (__stlxr(v181 - 1, v180));
              if (!v181)
              {
                ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
                std::__shared_weak_count::__release_weak(v179);
              }
            }
            std::string::basic_string[abi:ne180100]<0>(v440, "UpdatePosition");
            xgboost::common::Monitor::Stop();
            if ((v440[23] & 0x80000000) != 0)
              operator delete(*(void **)v440);
            v408 = 0;
            v409 = 0;
            v410 = 0;
            if (v414.i64[0] == v414.i64[1])
            {
              v231 = 0;
              v230 = 0;
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(v440, "BuildHistogram");
              xgboost::common::Monitor::Start();
              if ((v440[23] & 0x80000000) != 0)
                operator delete(*(void **)v440);
              v423 = 0;
              v424 = 0;
              v425 = 0;
              v429 = 0;
              v430 = 0;
              v431 = 0;
              v183 = v414.i64[1];
              for (i = (double *)v414.i64[0]; i != (double *)v183; i += 11)
              {
                v184 = *((_QWORD *)v81 + 20);
                v185 = v184 + 20 * *(int *)i;
                v187 = *(_DWORD *)(v185 + 4);
                v186 = *(_DWORD *)(v185 + 8);
                v188 = i[10];
                v189 = i[8];
                if (v188 >= v189)
                  v190 = v186;
                else
                  v190 = v187;
                if (v188 >= v189)
                  v186 = v187;
                v191 = *(_DWORD *)(v184 + 20 * v186);
                if (v191 == -1)
                {
                  v192 = 0;
                }
                else
                {
                  v192 = 0;
                  do
                  {
                    ++v192;
                    v191 = *(_DWORD *)(v184 + 20 * (v191 & 0x7FFFFFFF));
                  }
                  while (v191 != -1);
                }
                *(_DWORD *)v440 = v186;
                *(_DWORD *)&v440[4] = v192;
                *(_DWORD *)&v440[16] = 0;
                memset(&v440[24], 0, 25);
                memset(&v440[56], 0, 32);
                *(_QWORD *)&v440[8] = 0;
                v193 = v424;
                if ((unint64_t)v424 >= v425)
                {
                  v424 = (_QWORD *)std::vector<xgboost::tree::CPUExpandEntry>::__push_back_slow_path<xgboost::tree::CPUExpandEntry>((uint64_t *)&v423, (uint64_t)v440);
                  if (*(_QWORD *)&v440[24])
                    operator delete(*(void **)&v440[24]);
                }
                else
                {
                  *v424 = *(_QWORD *)v440;
                  v193[1] = *(_QWORD *)&v440[8];
                  *((_DWORD *)v193 + 4) = *(_DWORD *)&v440[16];
                  v193[4] = 0;
                  v193[5] = 0;
                  v193[3] = 0;
                  memset(&v440[24], 0, 24);
                  v193[10] = *(_QWORD *)&v440[80];
                  *((_OWORD *)v193 + 4) = *(_OWORD *)&v440[64];
                  *((_OWORD *)v193 + 3) = *(_OWORD *)&v440[48];
                  v424 = v193 + 11;
                }
                v194 = *((_QWORD *)v81 + 20);
                v195 = *(_DWORD *)(v194 + 20 * v190);
                if (v195 == -1)
                {
                  v196 = 0;
                }
                else
                {
                  v196 = 0;
                  do
                  {
                    ++v196;
                    v195 = *(_DWORD *)(v194 + 20 * (v195 & 0x7FFFFFFF));
                  }
                  while (v195 != -1);
                }
                *(_DWORD *)v440 = v190;
                *(_DWORD *)&v440[4] = v196;
                *(_DWORD *)&v440[16] = 0;
                memset(&v440[24], 0, 25);
                memset(&v440[56], 0, 32);
                *(_QWORD *)&v440[8] = 0;
                v197 = v430;
                if (v430 >= v431)
                {
                  v430 = (_QWORD *)std::vector<xgboost::tree::CPUExpandEntry>::__push_back_slow_path<xgboost::tree::CPUExpandEntry>((uint64_t *)&v429, (uint64_t)v440);
                  if (*(_QWORD *)&v440[24])
                    operator delete(*(void **)&v440[24]);
                }
                else
                {
                  *v430 = *(_QWORD *)v440;
                  v197[1] = *(_QWORD *)&v440[8];
                  *((_DWORD *)v197 + 4) = *(_DWORD *)&v440[16];
                  v197[4] = 0;
                  v197[5] = 0;
                  v197[3] = 0;
                  memset(&v440[24], 0, 24);
                  v197[10] = *(_QWORD *)&v440[80];
                  *((_OWORD *)v197 + 4) = *(_OWORD *)&v440[64];
                  *((_OWORD *)v197 + 3) = *(_OWORD *)&v440[48];
                  v430 = v197 + 11;
                }
              }
              xgboost::tree::ConstructHistSpace<std::vector<xgboost::tree::ApproxRowPartitioner>>((xgboost::common::BlockedSpace2d *)v440, (uint64_t *)(v82 + 904), (uint64_t *)&v423);
              v198 = *(_DWORD *)(v82 + 20);
              LODWORD(v448) = -1;
              HIDWORD(v448) = v198;
              *(_QWORD *)v449 = v395;
              *(_QWORD *)&v449[8] = v396;
              v449[16] = 0;
              *(_QWORD *)&v449[24] = 0x7FF8000000000000;
              (*(void (**)(_QWORD **__return_ptr, uint64_t, _QWORD **))(*(_QWORD *)a3 + 104))(&v438, a3, &v448);
              v448 = v438;
              *(_QWORD *)v449 = v439;
              if (v439)
              {
                v199 = (unint64_t *)&v439->__shared_owners_;
                do
                  v200 = __ldxr(v199);
                while (__stxr(v200 + 1, v199));
              }
              xgboost::BatchIterator<xgboost::GHistIndexMatrix>::BatchIterator(&v436, 0);
              v201 = 0;
              v202 = 80;
              while ((xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator!=((uint64_t *)&v448) & 1) != 0)
              {
                v203 = xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator*((uint64_t *)&v448);
                v416 = 0;
                v417 = 0;
                v418 = 0;
                std::vector<xgboost::common::Range1d>::__init_with_size[abi:ne180100]<xgboost::common::Range1d*,xgboost::common::Range1d*>(&v416, *(const void **)v440, *(uint64_t *)&v440[8], (uint64_t)(*(_QWORD *)&v440[8] - *(_QWORD *)v440) >> 4);
                v419 = 0;
                v420 = 0;
                v421 = 0;
                std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v419, *(const void **)&v440[24], *(uint64_t *)&v440[32], (uint64_t)(*(_QWORD *)&v440[32] - *(_QWORD *)&v440[24]) >> 3);
                v204 = *(_QWORD *)(v82 + 904);
                if (0xF0F0F0F0F0F0F0F1 * ((*(_QWORD *)(v82 + 912) - v204) >> 3) <= v201)
                  std::vector<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry,std::allocator<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry>>::__throw_out_of_range[abi:ne180100]();
                xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::BuildHist(v398, v201, (uint64_t)&v416, v203, (uint64_t)v81, v204 + v202, (int **)&v423, (int **)&v429, (uint64_t)&__dst);
                if (v419)
                {
                  v420 = v419;
                  operator delete(v419);
                }
                if (v416)
                {
                  v417 = (std::__shared_weak_count *)v416;
                  operator delete(v416);
                }
                ++v201;
                v202 += 136;
                xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator++((uint64_t *)&v448);
              }
              v205 = v437;
              if (v437)
              {
                v206 = (unint64_t *)&v437->__shared_owners_;
                do
                  v207 = __ldaxr(v206);
                while (__stlxr(v207 - 1, v206));
                if (!v207)
                {
                  ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
                  std::__shared_weak_count::__release_weak(v205);
                }
              }
              v208 = *(std::__shared_weak_count **)v449;
              if (*(_QWORD *)v449)
              {
                v209 = (unint64_t *)(*(_QWORD *)v449 + 8);
                do
                  v210 = __ldaxr(v209);
                while (__stlxr(v210 - 1, v209));
                if (!v210)
                {
                  ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
                  std::__shared_weak_count::__release_weak(v208);
                }
              }
              v211 = v439;
              if (v439)
              {
                v212 = (unint64_t *)&v439->__shared_owners_;
                do
                  v213 = __ldaxr(v212);
                while (__stlxr(v213 - 1, v212));
                if (!v213)
                {
                  ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
                  std::__shared_weak_count::__release_weak(v211);
                }
              }
              std::string::basic_string[abi:ne180100]<0>(&v448, "BuildHistogram");
              xgboost::common::Monitor::Stop();
              if ((v449[15] & 0x80000000) != 0)
                operator delete(v448);
              if (*(_QWORD *)&v440[24])
              {
                *(_QWORD *)&v440[32] = *(_QWORD *)&v440[24];
                operator delete(*(void **)&v440[24]);
              }
              if (*(_QWORD *)v440)
              {
                *(_QWORD *)&v440[8] = *(_QWORD *)v440;
                operator delete(*(void **)v440);
              }
              *(_QWORD *)v440 = &v429;
              std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)v440);
              *(_QWORD *)v440 = &v423;
              std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)v440);
              v214 = v414.i64[1];
              for (j = (int *)v414.i64[0]; j != (int *)v214; j += 22)
              {
                v216 = *((_QWORD *)v81 + 20);
                v217 = v216 + 20 * *j;
                v218 = *(_DWORD *)(v217 + 4);
                v219 = *(_DWORD *)(v216 + 20 * v218);
                if (v219 == -1)
                {
                  v220 = 0;
                }
                else
                {
                  v220 = 0;
                  do
                  {
                    ++v220;
                    v219 = *(_DWORD *)(v216 + 20 * (v219 & 0x7FFFFFFF));
                  }
                  while (v219 != -1);
                }
                v221 = *(_DWORD *)(v217 + 8);
                *(_DWORD *)v440 = v218;
                *(_DWORD *)&v440[4] = v220;
                *(_DWORD *)&v440[16] = 0;
                memset(&v440[24], 0, 25);
                memset(&v440[56], 0, 32);
                *(_QWORD *)&v440[8] = 0;
                v222 = *(_DWORD *)(v216 + 20 * (int)v221);
                if (v222 == -1)
                {
                  v223 = 0;
                }
                else
                {
                  v223 = 0;
                  do
                  {
                    ++v223;
                    v222 = *(_DWORD *)(v216 + 20 * (v222 & 0x7FFFFFFF));
                  }
                  while (v222 != -1);
                }
                v416 = (void *)__PAIR64__(v223, v221);
                LODWORD(v418) = 0;
                v420 = 0;
                v421 = 0;
                v419 = 0;
                v422[0] = 0;
                memset(&v422[8], 0, 32);
                v417 = 0;
                v224 = v409;
                if ((unint64_t)v409 >= v410)
                {
                  v225 = std::vector<xgboost::tree::CPUExpandEntry>::__push_back_slow_path<xgboost::tree::CPUExpandEntry const&>(&v408, (uint64_t)v440);
                }
                else
                {
                  std::vector<xgboost::tree::CPUExpandEntry>::__construct_one_at_end[abi:ne180100]<xgboost::tree::CPUExpandEntry const&>((uint64_t)&v408, (uint64_t)v440);
                  v225 = (unint64_t)&v224[3].__shared_weak_owners_;
                }
                v409 = (std::__shared_weak_count *)v225;
                if (v225 >= v410)
                {
                  v226 = std::vector<xgboost::tree::CPUExpandEntry>::__push_back_slow_path<xgboost::tree::CPUExpandEntry const&>(&v408, (uint64_t)&v416);
                }
                else
                {
                  std::vector<xgboost::tree::CPUExpandEntry>::__construct_one_at_end[abi:ne180100]<xgboost::tree::CPUExpandEntry const&>((uint64_t)&v408, (uint64_t)&v416);
                  v226 = v225 + 88;
                }
                v409 = (std::__shared_weak_count *)v226;
                if (v419)
                {
                  v420 = v419;
                  operator delete(v419);
                }
                if (*(_QWORD *)&v440[24])
                {
                  *(_QWORD *)&v440[32] = *(_QWORD *)&v440[24];
                  operator delete(*(void **)&v440[24]);
                }
              }
              v227 = *(uint64_t **)((**(uint64_t (***)(uint64_t))a3)(a3) + 168);
              v228 = *v227;
              v229 = v227[1];
              std::string::basic_string[abi:ne180100]<0>(v440, "EvaluateSplits");
              xgboost::common::Monitor::Start();
              if ((v440[23] & 0x80000000) != 0)
                operator delete(*(void **)v440);
              v406 = v229 - v228;
              v407 = v228;
              xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(v82 + 152, v398, (uint64_t)v393, (uint64_t)&v406, (uint64_t)v81, &v408);
              std::string::basic_string[abi:ne180100]<0>(v440, "EvaluateSplits");
              xgboost::common::Monitor::Stop();
              if ((v440[23] & 0x80000000) != 0)
                operator delete(*(void **)v440);
              v230 = v408;
              v231 = (uint64_t)v409;
            }
            xgboost::tree::Driver<xgboost::tree::CPUExpandEntry>::Push<std::__wrap_iter<xgboost::tree::CPUExpandEntry*>>(&v444, v230, v231);
            xgboost::tree::Driver<xgboost::tree::CPUExpandEntry>::Pop((uint64_t)&v444, (uint64_t *)v440);
            std::vector<xgboost::tree::CPUExpandEntry>::__vdeallocate((uint64_t *)v434);
            *(_OWORD *)v434 = *(_OWORD *)v440;
            v435[0] = *(_QWORD *)&v440[16];
            memset(v440, 0, 24);
            v416 = v440;
            std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v416);
            *(_QWORD *)v440 = &v408;
            std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)v440);
            *(_QWORD *)v440 = &v411;
            std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)v440);
            *(_QWORD *)v440 = &v414;
            std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)v440);
            v152 = (int *)v434[0];
            v153 = v434[1];
          }
          while (v434[0] != v434[1]);
        }
      }
      else
      {
        v232 = *(_QWORD *)(v5 + 232);
        *(_QWORD *)(v232 + 928) = v81;
        std::string::basic_string[abi:ne180100]<0>(v440, "InitData");
        xgboost::common::Monitor::Start();
        if ((v440[23] & 0x80000000) != 0)
          operator delete(*(void **)v440);
        *(_QWORD *)(v232 + 944) = 0;
        LODWORD(v429) = 0;
        v233 = *(_QWORD *)(v232 + 912);
        v234 = *(_QWORD *)(v232 + 904);
        while (v233 != v234)
        {
          v233 -= 136;
          std::allocator<xgboost::tree::ApproxRowPartitioner>::destroy[abi:ne180100](v233);
        }
        *(_QWORD *)(v232 + 912) = v234;
        v235 = *(_DWORD *)(v232 + 20);
        v236 = (*(_WORD *)(v232 + 896) & 0x100) == 0;
        *(_DWORD *)v440 = -1;
        *(_DWORD *)&v440[4] = v235;
        *(_QWORD *)&v440[8] = v395;
        *(_QWORD *)&v440[16] = v396;
        v440[24] = v236;
        *(_QWORD *)&v440[32] = 0x7FF8000000000000;
        (*(void (**)(void **__return_ptr, uint64_t, _BYTE *))(*(_QWORD *)a3 + 104))(&v416, a3, v440);
        *(_QWORD *)v440 = v416;
        *(_QWORD *)&v440[8] = v417;
        if (v417)
        {
          v237 = (unint64_t *)&v417->__shared_owners_;
          do
            v238 = __ldxr(v237);
          while (__stxr(v238 + 1, v237));
        }
        xgboost::BatchIterator<xgboost::GHistIndexMatrix>::BatchIterator(&v444, 0);
        v394 = (xgboost::common::HistogramCuts *)(v232 + 952);
        while (1)
        {
          v239 = xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator!=((uint64_t *)v440);
          if ((v239 & 1) == 0)
            break;
          v240 = xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator*((uint64_t *)v440);
          v241 = (_QWORD *)v240;
          if ((_DWORD)v429)
          {
            v423 = (void *)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v240 + 128) + 8) - 4);
            if (v423 != (void *)(int)v429)
            {
              dmlc::LogCheckFormat<int,unsigned long>((uint64_t *)&v448);
              if (v448)
              {
                v242 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v423);
                dmlc::LogMessageFatal::Entry::Init(v242, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/updater_approx.cc");
                v243 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v423);
                v244 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v243, (uint64_t)"Check failed: ", 14);
                v245 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v244, (uint64_t)"n_total_bins == page.cut.TotalBins()", 36);
                v246 = *((char *)v448 + 23);
                v247 = v246 >= 0 ? v448 : (_QWORD *)*v448;
                v248 = v246 >= 0 ? *((unsigned __int8 *)v448 + 23) : v448[1];
                v249 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v245, (uint64_t)v247, v248);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v249, (uint64_t)": ", 2);
                dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v423);
                v250 = (uint64_t)v448;
                v448 = 0;
                if (v250)
                  std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v448, v250);
              }
            }
          }
          else
          {
            LODWORD(v429) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v240 + 128) + 8) - 4);
            xgboost::common::HistogramCuts::Copy(v394, (const xgboost::common::HistogramCuts *)(v240 + 112));
          }
          v251 = v241[1];
          if (v251 == *v241)
            v252 = 0;
          else
            v252 = ((v251 - *v241) >> 3) - 1;
          v253 = *(_QWORD *)(v232 + 912);
          v254 = v241[19];
          if (v253 >= *(_QWORD *)(v232 + 920))
          {
            v255 = std::vector<xgboost::tree::ApproxRowPartitioner>::__emplace_back_slow_path<unsigned long,unsigned long const&>((int64x2_t *)(v232 + 904), v252, v254);
          }
          else
          {
            xgboost::tree::ApproxRowPartitioner::ApproxRowPartitioner(*(xgboost::tree::ApproxRowPartitioner **)(v232 + 912), v252, v254);
            v255 = v253 + 136;
            *(_QWORD *)(v232 + 912) = v253 + 136;
          }
          *(_QWORD *)(v232 + 912) = v255;
          ++*(_QWORD *)(v232 + 944);
          xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator++((uint64_t *)v440);
        }
        v256 = v445;
        if (v445)
        {
          v257 = (unint64_t *)&v445->__shared_owners_;
          do
            v258 = __ldaxr(v257);
          while (__stlxr(v258 - 1, v257));
          if (!v258)
          {
            ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
            std::__shared_weak_count::__release_weak(v256);
          }
        }
        v259 = *(std::__shared_weak_count **)&v440[8];
        if (*(_QWORD *)&v440[8])
        {
          v260 = (unint64_t *)(*(_QWORD *)&v440[8] + 8);
          do
            v261 = __ldaxr(v260);
          while (__stlxr(v261 - 1, v260));
          if (!v261)
          {
            ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
            std::__shared_weak_count::__release_weak(v259);
          }
        }
        v262 = v417;
        if (v417)
        {
          v263 = (unint64_t *)&v417->__shared_owners_;
          do
            v264 = __ldaxr(v263);
          while (__stlxr(v264 - 1, v263));
          if (!v264)
          {
            ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
            std::__shared_weak_count::__release_weak(v262);
          }
        }
        v265 = v429;
        v266 = *(_DWORD *)(v232 + 20);
        *(_DWORD *)v440 = -1;
        *(_DWORD *)&v440[4] = v266;
        *(_QWORD *)&v440[8] = v395;
        *(_QWORD *)&v440[16] = v396;
        v440[24] = 0;
        *(_QWORD *)&v440[32] = 0x7FF8000000000000;
        v267 = *(_QWORD *)(v232 + 944);
        v268 = rabit::engine::GetEngine((rabit::engine *)v239);
        v269 = (*(uint64_t (**)(void *))(*(_QWORD *)v268 + 80))(v268);
        v399 = v232 + 472;
        xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::Reset(v232 + 472, v265, (uint64_t)v440, 1, v267, v269);
        std::string::basic_string[abi:ne180100]<0>(&v416, "InitData");
        xgboost::common::Monitor::Stop();
        if (SHIBYTE(v418) < 0)
          operator delete(v416);
        xgboost::tree::Driver<xgboost::tree::CPUExpandEntry>::Driver(&v444, *(_DWORD *)(v232 + 24));
        std::string::basic_string[abi:ne180100]<0>(v440, "InitRoot");
        v270 = (rabit::engine *)xgboost::common::Monitor::Start();
        if ((v440[23] & 0x80000000) != 0)
          operator delete(*(void **)v440);
        v449[0] = 0;
        v448 = 0;
        v271 = 0uLL;
        memset(&v449[8], 0, 32);
        v414 = 0uLL;
        v272 = (float32x2_t *)__dst;
        if (__dst != v404)
        {
          do
          {
            v273 = *v272++;
            v271 = vaddq_f64(v271, vcvtq_f64_f32(v273));
          }
          while (v272 != (float32x2_t *)v404);
          v414 = (int8x16_t)v271;
        }
        v274 = rabit::engine::GetEngine(v270);
        (*(void (**)(void *, int8x16_t *, uint64_t, uint64_t, double (*)(double *, double *, int), _QWORD, _QWORD))(*(_QWORD *)v274 + 8))(v274, &v414, 8, 2, rabit::op::Reducer<rabit::op::Sum,double>, 0, 0);
        memset(&v440[24], 0, 24);
        memset(v440, 0, 20);
        *(_OWORD *)&v440[48] = *(_OWORD *)v449;
        *(_OWORD *)&v440[64] = *(_OWORD *)&v449[16];
        *(_QWORD *)&v440[80] = *(_QWORD *)&v449[32];
        v435[0] = 0;
        v434[0] = 0;
        v434[1] = 0;
        v429 = v434;
        LOBYTE(v430) = 0;
        v434[0] = (xgboost::tree::CPUExpandEntry *)operator new(0x58uLL);
        v434[1] = v434[0];
        v435[0] = (char *)v434[0] + 88;
        v434[1] = (xgboost::tree::CPUExpandEntry *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<xgboost::tree::CPUExpandEntry>,xgboost::tree::CPUExpandEntry const*,xgboost::tree::CPUExpandEntry const*,xgboost::tree::CPUExpandEntry*>((uint64_t)v435, (uint64_t)v440, (uint64_t)&v440[88], (uint64_t)v434[0]);
        if (*(_QWORD *)&v440[24])
        {
          *(_QWORD *)&v440[32] = *(_QWORD *)&v440[24];
          operator delete(*(void **)&v440[24]);
        }
        xgboost::tree::ConstructHistSpace<std::vector<xgboost::tree::ApproxRowPartitioner>>((xgboost::common::BlockedSpace2d *)v440, (uint64_t *)(v232 + 904), (uint64_t *)v434);
        v275 = *(_DWORD *)(v232 + 20);
        LODWORD(v429) = -1;
        HIDWORD(v429) = v275;
        v430 = (_QWORD *)v395;
        v431 = v396;
        v432 = 0;
        v433 = 0x7FF8000000000000;
        (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(_QWORD *)a3 + 104))(&v411, a3, &v429);
        v408 = v411;
        v409 = v412;
        if (v412)
        {
          v276 = (unint64_t *)&v412->__shared_owners_;
          do
            v277 = __ldxr(v276);
          while (__stxr(v277 + 1, v276));
        }
        xgboost::BatchIterator<xgboost::GHistIndexMatrix>::BatchIterator(&v438, 0);
        v278 = 0;
        v279 = 80;
        while ((xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator!=(&v408) & 1) != 0)
        {
          v280 = xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator*(&v408);
          v423 = 0;
          v424 = 0;
          v425 = 0;
          std::vector<xgboost::common::Range1d>::__init_with_size[abi:ne180100]<xgboost::common::Range1d*,xgboost::common::Range1d*>(&v423, *(const void **)v440, *(uint64_t *)&v440[8], (uint64_t)(*(_QWORD *)&v440[8] - *(_QWORD *)v440) >> 4);
          v426 = 0;
          v427 = 0;
          v428 = 0;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v426, *(const void **)&v440[24], *(uint64_t *)&v440[32], (uint64_t)(*(_QWORD *)&v440[32] - *(_QWORD *)&v440[24]) >> 3);
          v281 = *(_QWORD *)(v232 + 904);
          if (0xF0F0F0F0F0F0F0F1 * ((*(_QWORD *)(v232 + 912) - v281) >> 3) <= v278)
            std::vector<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry,std::allocator<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry>>::__throw_out_of_range[abi:ne180100]();
          v429 = 0;
          v430 = 0;
          v431 = 0;
          xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::BuildHist(v399, v278, (uint64_t)&v423, v280, (uint64_t)v81, v281 + v279, (int **)v434, (int **)&v429, (uint64_t)&__dst);
          v436 = &v429;
          std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100](&v436);
          if (v426)
          {
            v427 = v426;
            operator delete(v426);
          }
          if (v423)
          {
            v424 = v423;
            operator delete(v423);
          }
          ++v278;
          v279 += 136;
          xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator++(&v408);
        }
        v282 = v439;
        if (v439)
        {
          v283 = (unint64_t *)&v439->__shared_owners_;
          do
            v284 = __ldaxr(v283);
          while (__stlxr(v284 - 1, v283));
          if (!v284)
          {
            ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
            std::__shared_weak_count::__release_weak(v282);
          }
        }
        v285 = v409;
        if (v409)
        {
          v286 = (unint64_t *)&v409->__shared_owners_;
          do
            v287 = __ldaxr(v286);
          while (__stlxr(v287 - 1, v286));
          if (!v287)
          {
            ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
            std::__shared_weak_count::__release_weak(v285);
          }
        }
        v288 = v412;
        if (v412)
        {
          v289 = (unint64_t *)&v412->__shared_owners_;
          do
            v290 = __ldaxr(v289);
          while (__stlxr(v290 - 1, v289));
          if (!v290)
          {
            ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
            std::__shared_weak_count::__release_weak(v288);
          }
        }
        v291 = xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::InitRoot(v232 + 152, &v414);
        v292 = *(double *)&v414.i64[1];
        v293 = *((_QWORD *)v81 + 26);
        *(float *)(v293 + 4) = v292;
        *(float *)(v293 + 8) = v291;
        v294 = *((_QWORD *)v81 + 20);
        *(float *)(v294 + 16) = v291 * *(float *)(v232 + 4);
        *(_QWORD *)(v294 + 4) = -1;
        v295 = (**(uint64_t (***)(uint64_t))a3)(a3);
        v296 = **(std::__shared_weak_count ***)(v295 + 168);
        v411 = *(_QWORD *)(*(_QWORD *)(v295 + 168) + 8) - (_QWORD)v296;
        v412 = v296;
        xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(v232 + 152, v399, (uint64_t)v394, (uint64_t)&v411, (uint64_t)v81, (uint64_t *)v434);
        std::string::basic_string[abi:ne180100]<0>(&v429, "InitRoot");
        xgboost::common::Monitor::Stop();
        if (SHIBYTE(v431) < 0)
          operator delete(v429);
        v297 = v434[0];
        v298 = (std::__shared_weak_count *)*((_QWORD *)v434[0] + 1);
        v416 = *(void **)v434[0];
        v299 = *((_DWORD *)v434[0] + 4);
        v417 = v298;
        LODWORD(v418) = v299;
        v420 = 0;
        v421 = 0;
        v419 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v419, *((const void **)v297 + 3), *((_QWORD *)v297 + 4), (uint64_t)(*((_QWORD *)v297 + 4) - *((_QWORD *)v297 + 3)) >> 2);
        v300 = *((_OWORD *)v297 + 3);
        v301 = *((_OWORD *)v297 + 4);
        *(_QWORD *)&v422[32] = *((_QWORD *)v297 + 10);
        *(_OWORD *)v422 = v300;
        *(_OWORD *)&v422[16] = v301;
        if (*(_QWORD *)&v440[24])
        {
          *(_QWORD *)&v440[32] = *(_QWORD *)&v440[24];
          operator delete(*(void **)&v440[24]);
        }
        if (*(_QWORD *)v440)
        {
          *(_QWORD *)&v440[8] = *(_QWORD *)v440;
          operator delete(*(void **)v440);
        }
        *(_QWORD *)v440 = v434;
        std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)v440);
        xgboost::tree::Driver<xgboost::tree::CPUExpandEntry>::Push(&v444, (uint64_t)&v416);
        if (v419)
        {
          v420 = v419;
          operator delete(v419);
        }
        xgboost::tree::Driver<xgboost::tree::CPUExpandEntry>::Pop((uint64_t)&v444, (uint64_t *)v434);
        v302 = (int *)v434[0];
        v303 = v434[1];
        if (v434[0] != v434[1])
        {
          v304 = 1;
          do
          {
            v414 = 0uLL;
            v415 = 0;
            v411 = 0;
            v412 = 0;
            v413 = 0;
            do
            {
              if (xgboost::tree::CPUExpandEntry::IsValid((xgboost::tree::CPUExpandEntry *)v302, (const xgboost::tree::TrainParam *)v232, v304))
              {
                xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::ApplyTreeSplit(v232 + 152, v302, v81);
                v305 = v412;
                if ((unint64_t)v412 >= v413)
                {
                  v306 = std::vector<xgboost::tree::CPUExpandEntry>::__push_back_slow_path<xgboost::tree::CPUExpandEntry const&>(&v411, (uint64_t)v302);
                }
                else
                {
                  std::vector<xgboost::tree::CPUExpandEntry>::__construct_one_at_end[abi:ne180100]<xgboost::tree::CPUExpandEntry const&>((uint64_t)&v411, (uint64_t)v302);
                  v306 = (uint64_t)&v305[3].__shared_weak_owners_;
                }
                v412 = (std::__shared_weak_count *)v306;
                v307 = *((_QWORD *)v81 + 20);
                v308 = *(_DWORD *)(v307 + 20 * *(int *)(v307 + 20 * *v302 + 4));
                if (v308 == -1)
                {
                  v309 = 0;
                }
                else
                {
                  v309 = 0;
                  do
                  {
                    ++v309;
                    v308 = *(_DWORD *)(v307 + 20 * (v308 & 0x7FFFFFFF));
                  }
                  while (v308 != -1);
                }
                ++v304;
                v310 = *(_DWORD *)(v232 + 12);
                if (v310 < 1 || v310 > v309)
                {
                  v312 = *(_DWORD *)(v232 + 16);
                  if (v312 < 1 || v312 > v304)
                  {
                    v314 = v414.i64[1];
                    if (v414.i64[1] >= v415)
                    {
                      v315 = std::vector<xgboost::tree::CPUExpandEntry>::__emplace_back_slow_path<xgboost::tree::CPUExpandEntry const&>(v414.i64, (uint64_t)v302);
                    }
                    else
                    {
                      std::vector<xgboost::tree::CPUExpandEntry>::__construct_one_at_end[abi:ne180100]<xgboost::tree::CPUExpandEntry const&>((uint64_t)&v414, (uint64_t)v302);
                      v315 = v314 + 88;
                    }
                    v414.i64[1] = v315;
                  }
                }
              }
              v302 += 22;
            }
            while (v302 != (int *)v303);
            std::string::basic_string[abi:ne180100]<0>(v440, "UpdatePosition");
            xgboost::common::Monitor::Start();
            if ((v440[23] & 0x80000000) != 0)
              operator delete(*(void **)v440);
            v316 = *(_DWORD *)(v232 + 20);
            *(_DWORD *)v440 = -1;
            *(_DWORD *)&v440[4] = v316;
            *(_QWORD *)&v440[8] = v395;
            *(_QWORD *)&v440[16] = v396;
            v440[24] = 0;
            *(_QWORD *)&v440[32] = 0x7FF8000000000000;
            (*(void (**)(void **__return_ptr, uint64_t, _BYTE *))(*(_QWORD *)a3 + 104))(&v416, a3, v440);
            *(_QWORD *)v440 = v416;
            *(_QWORD *)&v440[8] = v417;
            if (v417)
            {
              v317 = (unint64_t *)&v417->__shared_owners_;
              do
                v318 = __ldxr(v317);
              while (__stxr(v318 + 1, v317));
            }
            xgboost::BatchIterator<xgboost::GHistIndexMatrix>::BatchIterator(&v448, 0);
            v319 = 0;
            v320 = -1;
            while ((xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator!=((uint64_t *)v440) & 1) != 0)
            {
              v321 = xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator*((uint64_t *)v440);
              v322 = *(_QWORD *)(v232 + 904);
              if (0xF0F0F0F0F0F0F0F1 * ((*(_QWORD *)(v232 + 912) - v322) >> 3) <= ++v320)
                std::vector<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry,std::allocator<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry>>::__throw_out_of_range[abi:ne180100]();
              xgboost::tree::ApproxRowPartitioner::UpdatePosition((uint64_t *)(v322 + v319), v321, &v411, v81);
              v319 += 136;
              xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator++((uint64_t *)v440);
            }
            v323 = *(std::__shared_weak_count **)v449;
            if (*(_QWORD *)v449)
            {
              v324 = (unint64_t *)(*(_QWORD *)v449 + 8);
              do
                v325 = __ldaxr(v324);
              while (__stlxr(v325 - 1, v324));
              if (!v325)
              {
                ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
                std::__shared_weak_count::__release_weak(v323);
              }
            }
            v326 = *(std::__shared_weak_count **)&v440[8];
            if (*(_QWORD *)&v440[8])
            {
              v327 = (unint64_t *)(*(_QWORD *)&v440[8] + 8);
              do
                v328 = __ldaxr(v327);
              while (__stlxr(v328 - 1, v327));
              if (!v328)
              {
                ((void (*)(std::__shared_weak_count *))v326->__on_zero_shared)(v326);
                std::__shared_weak_count::__release_weak(v326);
              }
            }
            v329 = v417;
            if (v417)
            {
              v330 = (unint64_t *)&v417->__shared_owners_;
              do
                v331 = __ldaxr(v330);
              while (__stlxr(v331 - 1, v330));
              if (!v331)
              {
                ((void (*)(std::__shared_weak_count *))v329->__on_zero_shared)(v329);
                std::__shared_weak_count::__release_weak(v329);
              }
            }
            std::string::basic_string[abi:ne180100]<0>(v440, "UpdatePosition");
            xgboost::common::Monitor::Stop();
            if ((v440[23] & 0x80000000) != 0)
              operator delete(*(void **)v440);
            v408 = 0;
            v409 = 0;
            v410 = 0;
            if (v414.i64[0] == v414.i64[1])
            {
              v381 = 0;
              v380 = 0;
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(v440, "BuildHistogram");
              xgboost::common::Monitor::Start();
              if ((v440[23] & 0x80000000) != 0)
                operator delete(*(void **)v440);
              v423 = 0;
              v424 = 0;
              v425 = 0;
              v429 = 0;
              v430 = 0;
              v431 = 0;
              v333 = v414.i64[1];
              for (k = (double *)v414.i64[0]; k != (double *)v333; k += 11)
              {
                v334 = *((_QWORD *)v81 + 20);
                v335 = v334 + 20 * *(int *)k;
                v337 = *(_DWORD *)(v335 + 4);
                v336 = *(_DWORD *)(v335 + 8);
                v338 = k[10];
                v339 = k[8];
                if (v338 >= v339)
                  v340 = v336;
                else
                  v340 = v337;
                if (v338 >= v339)
                  v336 = v337;
                v341 = *(_DWORD *)(v334 + 20 * v336);
                if (v341 == -1)
                {
                  v342 = 0;
                }
                else
                {
                  v342 = 0;
                  do
                  {
                    ++v342;
                    v341 = *(_DWORD *)(v334 + 20 * (v341 & 0x7FFFFFFF));
                  }
                  while (v341 != -1);
                }
                *(_DWORD *)v440 = v336;
                *(_DWORD *)&v440[4] = v342;
                *(_DWORD *)&v440[16] = 0;
                memset(&v440[24], 0, 25);
                memset(&v440[56], 0, 32);
                *(_QWORD *)&v440[8] = 0;
                v343 = v424;
                if ((unint64_t)v424 >= v425)
                {
                  v424 = (_QWORD *)std::vector<xgboost::tree::CPUExpandEntry>::__push_back_slow_path<xgboost::tree::CPUExpandEntry>((uint64_t *)&v423, (uint64_t)v440);
                  if (*(_QWORD *)&v440[24])
                    operator delete(*(void **)&v440[24]);
                }
                else
                {
                  *v424 = *(_QWORD *)v440;
                  v343[1] = *(_QWORD *)&v440[8];
                  *((_DWORD *)v343 + 4) = *(_DWORD *)&v440[16];
                  v343[4] = 0;
                  v343[5] = 0;
                  v343[3] = 0;
                  memset(&v440[24], 0, 24);
                  v343[10] = *(_QWORD *)&v440[80];
                  *((_OWORD *)v343 + 4) = *(_OWORD *)&v440[64];
                  *((_OWORD *)v343 + 3) = *(_OWORD *)&v440[48];
                  v424 = v343 + 11;
                }
                v344 = *((_QWORD *)v81 + 20);
                v345 = *(_DWORD *)(v344 + 20 * v340);
                if (v345 == -1)
                {
                  v346 = 0;
                }
                else
                {
                  v346 = 0;
                  do
                  {
                    ++v346;
                    v345 = *(_DWORD *)(v344 + 20 * (v345 & 0x7FFFFFFF));
                  }
                  while (v345 != -1);
                }
                *(_DWORD *)v440 = v340;
                *(_DWORD *)&v440[4] = v346;
                *(_DWORD *)&v440[16] = 0;
                memset(&v440[24], 0, 25);
                memset(&v440[56], 0, 32);
                *(_QWORD *)&v440[8] = 0;
                v347 = v430;
                if (v430 >= v431)
                {
                  v430 = (_QWORD *)std::vector<xgboost::tree::CPUExpandEntry>::__push_back_slow_path<xgboost::tree::CPUExpandEntry>((uint64_t *)&v429, (uint64_t)v440);
                  if (*(_QWORD *)&v440[24])
                    operator delete(*(void **)&v440[24]);
                }
                else
                {
                  *v430 = *(_QWORD *)v440;
                  v347[1] = *(_QWORD *)&v440[8];
                  *((_DWORD *)v347 + 4) = *(_DWORD *)&v440[16];
                  v347[4] = 0;
                  v347[5] = 0;
                  v347[3] = 0;
                  memset(&v440[24], 0, 24);
                  v347[10] = *(_QWORD *)&v440[80];
                  *((_OWORD *)v347 + 4) = *(_OWORD *)&v440[64];
                  *((_OWORD *)v347 + 3) = *(_OWORD *)&v440[48];
                  v430 = v347 + 11;
                }
              }
              xgboost::tree::ConstructHistSpace<std::vector<xgboost::tree::ApproxRowPartitioner>>((xgboost::common::BlockedSpace2d *)v440, (uint64_t *)(v232 + 904), (uint64_t *)&v423);
              v348 = *(_DWORD *)(v232 + 20);
              LODWORD(v448) = -1;
              HIDWORD(v448) = v348;
              *(_QWORD *)v449 = v395;
              *(_QWORD *)&v449[8] = v396;
              v449[16] = 0;
              *(_QWORD *)&v449[24] = 0x7FF8000000000000;
              (*(void (**)(_QWORD **__return_ptr, uint64_t, _QWORD **))(*(_QWORD *)a3 + 104))(&v438, a3, &v448);
              v448 = v438;
              *(_QWORD *)v449 = v439;
              if (v439)
              {
                v349 = (unint64_t *)&v439->__shared_owners_;
                do
                  v350 = __ldxr(v349);
                while (__stxr(v350 + 1, v349));
              }
              xgboost::BatchIterator<xgboost::GHistIndexMatrix>::BatchIterator(&v436, 0);
              v351 = 0;
              v352 = 80;
              while ((xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator!=((uint64_t *)&v448) & 1) != 0)
              {
                v353 = xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator*((uint64_t *)&v448);
                v416 = 0;
                v417 = 0;
                v418 = 0;
                std::vector<xgboost::common::Range1d>::__init_with_size[abi:ne180100]<xgboost::common::Range1d*,xgboost::common::Range1d*>(&v416, *(const void **)v440, *(uint64_t *)&v440[8], (uint64_t)(*(_QWORD *)&v440[8] - *(_QWORD *)v440) >> 4);
                v419 = 0;
                v420 = 0;
                v421 = 0;
                std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v419, *(const void **)&v440[24], *(uint64_t *)&v440[32], (uint64_t)(*(_QWORD *)&v440[32] - *(_QWORD *)&v440[24]) >> 3);
                v354 = *(_QWORD *)(v232 + 904);
                if (0xF0F0F0F0F0F0F0F1 * ((*(_QWORD *)(v232 + 912) - v354) >> 3) <= v351)
                  std::vector<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry,std::allocator<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry>>::__throw_out_of_range[abi:ne180100]();
                xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::BuildHist(v399, v351, (uint64_t)&v416, v353, (uint64_t)v81, v354 + v352, (int **)&v423, (int **)&v429, (uint64_t)&__dst);
                if (v419)
                {
                  v420 = v419;
                  operator delete(v419);
                }
                if (v416)
                {
                  v417 = (std::__shared_weak_count *)v416;
                  operator delete(v416);
                }
                ++v351;
                v352 += 136;
                xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator++((uint64_t *)&v448);
              }
              v355 = v437;
              if (v437)
              {
                v356 = (unint64_t *)&v437->__shared_owners_;
                do
                  v357 = __ldaxr(v356);
                while (__stlxr(v357 - 1, v356));
                if (!v357)
                {
                  ((void (*)(std::__shared_weak_count *))v355->__on_zero_shared)(v355);
                  std::__shared_weak_count::__release_weak(v355);
                }
              }
              v358 = *(std::__shared_weak_count **)v449;
              if (*(_QWORD *)v449)
              {
                v359 = (unint64_t *)(*(_QWORD *)v449 + 8);
                do
                  v360 = __ldaxr(v359);
                while (__stlxr(v360 - 1, v359));
                if (!v360)
                {
                  ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
                  std::__shared_weak_count::__release_weak(v358);
                }
              }
              v361 = v439;
              if (v439)
              {
                v362 = (unint64_t *)&v439->__shared_owners_;
                do
                  v363 = __ldaxr(v362);
                while (__stlxr(v363 - 1, v362));
                if (!v363)
                {
                  ((void (*)(std::__shared_weak_count *))v361->__on_zero_shared)(v361);
                  std::__shared_weak_count::__release_weak(v361);
                }
              }
              std::string::basic_string[abi:ne180100]<0>(&v448, "BuildHistogram");
              xgboost::common::Monitor::Stop();
              if ((v449[15] & 0x80000000) != 0)
                operator delete(v448);
              if (*(_QWORD *)&v440[24])
              {
                *(_QWORD *)&v440[32] = *(_QWORD *)&v440[24];
                operator delete(*(void **)&v440[24]);
              }
              if (*(_QWORD *)v440)
              {
                *(_QWORD *)&v440[8] = *(_QWORD *)v440;
                operator delete(*(void **)v440);
              }
              *(_QWORD *)v440 = &v429;
              std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)v440);
              *(_QWORD *)v440 = &v423;
              std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)v440);
              v364 = v414.i64[1];
              for (m = (int *)v414.i64[0]; m != (int *)v364; m += 22)
              {
                v366 = *((_QWORD *)v81 + 20);
                v367 = v366 + 20 * *m;
                v368 = *(_DWORD *)(v367 + 4);
                v369 = *(_DWORD *)(v366 + 20 * v368);
                if (v369 == -1)
                {
                  v370 = 0;
                }
                else
                {
                  v370 = 0;
                  do
                  {
                    ++v370;
                    v369 = *(_DWORD *)(v366 + 20 * (v369 & 0x7FFFFFFF));
                  }
                  while (v369 != -1);
                }
                v371 = *(_DWORD *)(v367 + 8);
                *(_DWORD *)v440 = v368;
                *(_DWORD *)&v440[4] = v370;
                *(_DWORD *)&v440[16] = 0;
                memset(&v440[24], 0, 25);
                memset(&v440[56], 0, 32);
                *(_QWORD *)&v440[8] = 0;
                v372 = *(_DWORD *)(v366 + 20 * (int)v371);
                if (v372 == -1)
                {
                  v373 = 0;
                }
                else
                {
                  v373 = 0;
                  do
                  {
                    ++v373;
                    v372 = *(_DWORD *)(v366 + 20 * (v372 & 0x7FFFFFFF));
                  }
                  while (v372 != -1);
                }
                v416 = (void *)__PAIR64__(v373, v371);
                LODWORD(v418) = 0;
                v420 = 0;
                v421 = 0;
                v419 = 0;
                v422[0] = 0;
                memset(&v422[8], 0, 32);
                v417 = 0;
                v374 = v409;
                if ((unint64_t)v409 >= v410)
                {
                  v375 = std::vector<xgboost::tree::CPUExpandEntry>::__push_back_slow_path<xgboost::tree::CPUExpandEntry const&>(&v408, (uint64_t)v440);
                }
                else
                {
                  std::vector<xgboost::tree::CPUExpandEntry>::__construct_one_at_end[abi:ne180100]<xgboost::tree::CPUExpandEntry const&>((uint64_t)&v408, (uint64_t)v440);
                  v375 = (unint64_t)&v374[3].__shared_weak_owners_;
                }
                v409 = (std::__shared_weak_count *)v375;
                if (v375 >= v410)
                {
                  v376 = std::vector<xgboost::tree::CPUExpandEntry>::__push_back_slow_path<xgboost::tree::CPUExpandEntry const&>(&v408, (uint64_t)&v416);
                }
                else
                {
                  std::vector<xgboost::tree::CPUExpandEntry>::__construct_one_at_end[abi:ne180100]<xgboost::tree::CPUExpandEntry const&>((uint64_t)&v408, (uint64_t)&v416);
                  v376 = v375 + 88;
                }
                v409 = (std::__shared_weak_count *)v376;
                if (v419)
                {
                  v420 = v419;
                  operator delete(v419);
                }
                if (*(_QWORD *)&v440[24])
                {
                  *(_QWORD *)&v440[32] = *(_QWORD *)&v440[24];
                  operator delete(*(void **)&v440[24]);
                }
              }
              v377 = *(uint64_t **)((**(uint64_t (***)(uint64_t))a3)(a3) + 168);
              v378 = *v377;
              v379 = v377[1];
              std::string::basic_string[abi:ne180100]<0>(v440, "EvaluateSplits");
              xgboost::common::Monitor::Start();
              if ((v440[23] & 0x80000000) != 0)
                operator delete(*(void **)v440);
              v406 = v379 - v378;
              v407 = v378;
              xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(v232 + 152, v399, (uint64_t)v394, (uint64_t)&v406, (uint64_t)v81, &v408);
              std::string::basic_string[abi:ne180100]<0>(v440, "EvaluateSplits");
              xgboost::common::Monitor::Stop();
              if ((v440[23] & 0x80000000) != 0)
                operator delete(*(void **)v440);
              v380 = v408;
              v381 = (uint64_t)v409;
            }
            xgboost::tree::Driver<xgboost::tree::CPUExpandEntry>::Push<std::__wrap_iter<xgboost::tree::CPUExpandEntry*>>(&v444, v380, v381);
            xgboost::tree::Driver<xgboost::tree::CPUExpandEntry>::Pop((uint64_t)&v444, (uint64_t *)v440);
            std::vector<xgboost::tree::CPUExpandEntry>::__vdeallocate((uint64_t *)v434);
            *(_OWORD *)v434 = *(_OWORD *)v440;
            v435[0] = *(_QWORD *)&v440[16];
            memset(v440, 0, 24);
            v416 = v440;
            std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v416);
            *(_QWORD *)v440 = &v408;
            std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)v440);
            *(_QWORD *)v440 = &v411;
            std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)v440);
            *(_QWORD *)v440 = &v414;
            std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)v440);
            v302 = (int *)v434[0];
            v303 = v434[1];
          }
          while (v434[0] != v434[1]);
        }
      }
      *(_QWORD *)v440 = v434;
      std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)v440);
      v382 = v447;
      if (v447 == v446)
        break;
      v5 = v390;
      v383 = v392;
      if (v447)
      {
        v384 = 5;
LABEL_529:
        (*(void (**)(void))(*v382 + 8 * v384))();
      }
      *(_QWORD *)v440 = &v445;
      std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)v440);
      v80 = v383 + 1;
      if (v80 == v391)
      {
        v78 = v401;
        v41 = v389;
        goto LABEL_532;
      }
    }
    v382 = v446;
    v384 = 4;
    v5 = v390;
    v383 = v392;
    goto LABEL_529;
  }
LABEL_532:
  *v41 = v7;
  if (v78)
  {
    v402 = v78;
    operator delete(v78);
  }
  if (__dst)
  {
    v404 = (int8x8_t *)__dst;
    operator delete(__dst);
  }
}

void sub_220EDDB3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *__p)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&STACK[0x240]);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t xgboost::tree::GlobalApproxUpdater::UpdatePredictionCache(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  std::string *Entry;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  void *v15;
  uint64_t v16;
  _QWORD *v17;
  void *ptr;
  std::string *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  std::string *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  int v33;
  void *v34;
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t FirstDimension;
  uint64_t Range;
  uint64_t v55;
  int8x16_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float v61;
  uint64_t v62;
  float v63;
  unint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  std::string *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  int v76;
  void *v77;
  uint64_t v78;
  _QWORD *v79;
  void *v80;
  std::string *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  int v85;
  void *v86;
  uint64_t v87;
  _QWORD *v88;
  void *v89;
  uint64_t v90;
  std::string *v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  int v95;
  void *v96;
  uint64_t v97;
  _QWORD *v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int8x16_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  float v123;
  uint64_t v124;
  float v125;
  unint64_t v126;
  _QWORD *v127;
  unint64_t v128;
  std::string *v129;
  _QWORD *v130;
  _QWORD *v131;
  _QWORD *v132;
  int v133;
  void *v134;
  uint64_t v135;
  _QWORD *v136;
  void *v137;
  std::string *v138;
  _QWORD *v139;
  _QWORD *v140;
  _QWORD *v141;
  int v142;
  void *v143;
  uint64_t v144;
  _QWORD *v145;
  void *v146;
  std::string *v147;
  _QWORD *v148;
  _QWORD *v149;
  std::string *v150;
  _QWORD *v151;
  _QWORD *v152;
  uint64_t i;
  uint64_t j;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void *v159[2];
  void *__p[2];
  __int128 v161;
  unint64_t v162;
  _QWORD v163[7];
  int8x16_t v164;
  std::exception_ptr v165;
  std::mutex v166;
  uint64_t v167;

  v167 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 240) != a2)
    return 0;
  v155 = *(_QWORD *)(a1 + 224);
  if (!v155 && !*(_QWORD *)(a1 + 232))
    return 0;
  if (*(_BYTE *)(a1 + 217))
  {
    v5 = *a3;
    v6 = a3[2];
    v8 = a3[4];
    v7 = a3[5];
    v9 = *((_DWORD *)a3 + 12);
    std::string::basic_string[abi:ne180100]<0>(&v165, "UpdatePredictionCache");
    xgboost::common::Monitor::Start();
    if (v166.__m_.__opaque[7] < 0)
      operator delete(v165.__ptr_);
    v163[0] = v7;
    if (v7 != *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
    {
      dmlc::LogCheckFormat<unsigned long,unsigned long long>((uint64_t *)&v165);
      if (v165.__ptr_)
      {
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v163);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/updater_approx.cc");
        v11 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v163);
        v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: ", 14);
        v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"out_preds.Size() == data->Info().num_row_", 41);
        v14 = *((char *)v165.__ptr_ + 23);
        v15 = v14 >= 0 ? v165.__ptr_ : *(void **)v165.__ptr_;
        v16 = v14 >= 0 ? *((unsigned __int8 *)v165.__ptr_ + 23) : *((_QWORD *)v165.__ptr_ + 1);
        v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v15, v16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v163);
        ptr = v165.__ptr_;
        v165.__ptr_ = 0;
        if (ptr)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v165, (uint64_t)ptr);
      }
    }
    v157 = *(_QWORD *)(v155 + 928);
    v163[0] = v7;
    LODWORD(v159[0]) = 0;
    if (!v7)
    {
      dmlc::LogCheckFormat<unsigned long,unsigned int>((uint64_t *)&v165);
      if (v165.__ptr_)
      {
        v129 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v163);
        dmlc::LogMessageFatal::Entry::Init(v129, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/hist/evaluate_splits.h");
        v130 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v163);
        v131 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v130, (uint64_t)"Check failed: ", 14);
        v132 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v131, (uint64_t)"out_preds.Size() > 0U", 21);
        v133 = *((char *)v165.__ptr_ + 23);
        v134 = v133 >= 0 ? v165.__ptr_ : *(void **)v165.__ptr_;
        v135 = v133 >= 0 ? *((unsigned __int8 *)v165.__ptr_ + 23) : *((_QWORD *)v165.__ptr_ + 1);
        v136 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v132, (uint64_t)v134, v135);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v136, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v163);
        v137 = v165.__ptr_;
        v165.__ptr_ = 0;
        if (v137)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v165, (uint64_t)v137);
      }
    }
    if (!v157)
    {
      v147 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v165);
      dmlc::LogMessageFatal::Entry::Init(v147, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/hist/evaluate_splits.h");
      v148 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v165);
      v149 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v148, (uint64_t)"Check failed: p_last_tree", 25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v149, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v165);
    }
    xgboost::tree::TreeEvaluator::GetEvaluator<xgboost::tree::TrainParam>((uint64_t **)(v155 + 304), (uint64_t)v163);
    LODWORD(v159[0]) = v9;
    v164.i32[0] = -1;
    if (v9 != -1)
    {
      dmlc::LogCheckFormat<int,int>((uint64_t *)&v165);
      if (v165.__ptr_)
      {
        v19 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v159);
        dmlc::LogMessageFatal::Entry::Init(v19, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/hist/evaluate_splits.h");
        v20 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v159);
        v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Check failed: ", 14);
        v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"out_preds.DeviceIdx() == GenericParameter::kCpuId", 49);
        v23 = *((char *)v165.__ptr_ + 23);
        v24 = v23 >= 0 ? v165.__ptr_ : *(void **)v165.__ptr_;
        v25 = v23 >= 0 ? *((unsigned __int8 *)v165.__ptr_ + 23) : *((_QWORD *)v165.__ptr_ + 1);
        v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v24, v25);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v159);
        v27 = v165.__ptr_;
        v165.__ptr_ = 0;
        if (v27)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v165, (uint64_t)v27);
      }
    }
    v162 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v157 + 168) - *(_QWORD *)(v157 + 160)) >> 2);
    v28 = *(_QWORD *)(v155 + 904);
    for (i = *(_QWORD *)(v155 + 912); v28 != i; v28 += 136)
    {
      v159[0] = (void *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v28 + 112) - *(_QWORD *)(v28 + 104)) >> 3));
      if (v159[0] != (void *)v162)
      {
        dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v165);
        if (v165.__ptr_)
        {
          v29 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v159);
          dmlc::LogMessageFatal::Entry::Init(v29, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/hist/evaluate_splits.h");
          v30 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v159);
          v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Check failed: ", 14);
          v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"part.Size() == n_nodes", 22);
          v33 = *((char *)v165.__ptr_ + 23);
          v34 = v33 >= 0 ? v165.__ptr_ : *(void **)v165.__ptr_;
          v35 = v33 >= 0 ? *((unsigned __int8 *)v165.__ptr_ + 23) : *((_QWORD *)v165.__ptr_ + 1);
          v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v34, v35);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)": ", 2);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v159);
          v37 = v165.__ptr_;
          v165.__ptr_ = 0;
          if (v37)
            std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v165, (uint64_t)v37);
        }
      }
      v38 = *(_QWORD *)(v28 + 104);
      v39 = *(_QWORD *)(v28 + 112);
      *(_OWORD *)v159 = 0u;
      *(_OWORD *)__p = 0u;
      v161 = 0u;
      v40 = v39 - v38;
      if (v40)
      {
        v41 = 0;
        v42 = 0xAAAAAAAAAAAAAAABLL * (v40 >> 3);
        do
        {
          v43 = *(_QWORD *)(*(_QWORD *)(v28 + 104) + 24 * v41 + 8)
              - *(_QWORD *)(*(_QWORD *)(v28 + 104) + 24 * v41);
          v44 = v43 >> 3;
          if ((v43 & 0x1FF8) != 0)
            v45 = ((unint64_t)(v43 >> 3) >> 10) + 1;
          else
            v45 = (unint64_t)(v43 >> 3) >> 10;
          if (v45)
          {
            v46 = 0;
            do
            {
              v47 = v46 + 1024;
              if (v44 >= v46 + 1024)
                v48 = v46 + 1024;
              else
                v48 = v44;
              xgboost::common::BlockedSpace2d::AddBlock((xgboost::common::BlockedSpace2d *)v159, v41, v46, v48);
              v46 = v47;
              --v45;
            }
            while (v45);
          }
          ++v41;
        }
        while (v41 != v42);
        v49 = v159[0];
        v40 = (uint64_t)v159[1];
      }
      else
      {
        v49 = 0;
      }
      v165.__ptr_ = 0;
      v166.__m_.__sig = 850045863;
      memset(v166.__m_.__opaque, 0, sizeof(v166.__m_.__opaque));
      v50 = v40 - (_QWORD)v49;
      if (v50)
      {
        v51 = 0;
        v52 = v50 >> 4;
        do
        {
          FirstDimension = xgboost::common::BlockedSpace2d::GetFirstDimension((xgboost::common::BlockedSpace2d *)v159, v51);
          Range = xgboost::common::BlockedSpace2d::GetRange((xgboost::common::BlockedSpace2d *)v159, v51);
          v57 = *(_QWORD *)(v157 + 160);
          if (*(_DWORD *)(v57 + 20 * (int)FirstDimension + 12) != -1
            && *(_DWORD *)(v57 + 20 * (int)FirstDimension + 4) == -1)
          {
            v58 = Range;
            v59 = v55;
            v60 = *(_QWORD *)(v28 + 104);
            v164 = *(int8x16_t *)(*(_QWORD *)(v155 + 448) + 24 * FirstDimension);
            v61 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeight((uint64_t)v163, FirstDimension, (float *)v155, (double *)v164.i64, v164, v56);
            if (v58 < v59)
            {
              v62 = *(_QWORD *)(v60 + 24 * FirstDimension);
              v63 = v61 * *(float *)(v155 + 4);
              v64 = v62 + 8 * v59;
              v65 = (_QWORD *)(v62 + 8 * v58);
              do
              {
                v66 = *v65 * v5;
                if (v66 >= v6)
                  __assert_rtn("operator()", "linalg.h", 412, "offset < data_.size() && \"Out of bound access.\"");
                *(float *)(v8 + 4 * v66) = v63 + *(float *)(v8 + 4 * v66);
                ++v65;
              }
              while ((unint64_t)v65 < v64);
            }
          }
          ++v51;
        }
        while (v51 != v52);
      }
      dmlc::OMPException::Rethrow(&v165);
      std::mutex::~mutex(&v166);
      std::exception_ptr::~exception_ptr(&v165);
      if (__p[1])
      {
        *(void **)&v161 = __p[1];
        operator delete(__p[1]);
      }
      if (v159[0])
      {
        v159[1] = v159[0];
        operator delete(v159[0]);
      }
    }
  }
  else
  {
    v67 = *a3;
    v68 = a3[2];
    v70 = a3[4];
    v69 = a3[5];
    v71 = *((_DWORD *)a3 + 12);
    v156 = *(_QWORD *)(a1 + 232);
    std::string::basic_string[abi:ne180100]<0>(&v165, "UpdatePredictionCache");
    xgboost::common::Monitor::Start();
    if (v166.__m_.__opaque[7] < 0)
      operator delete(v165.__ptr_);
    v163[0] = v69;
    if (v69 != *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
    {
      dmlc::LogCheckFormat<unsigned long,unsigned long long>((uint64_t *)&v165);
      if (v165.__ptr_)
      {
        v72 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v163);
        dmlc::LogMessageFatal::Entry::Init(v72, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/updater_approx.cc");
        v73 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v163);
        v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"Check failed: ", 14);
        v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"out_preds.Size() == data->Info().num_row_", 41);
        v76 = *((char *)v165.__ptr_ + 23);
        v77 = v76 >= 0 ? v165.__ptr_ : *(void **)v165.__ptr_;
        v78 = v76 >= 0 ? *((unsigned __int8 *)v165.__ptr_ + 23) : *((_QWORD *)v165.__ptr_ + 1);
        v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)v77, v78);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v163);
        v80 = v165.__ptr_;
        v165.__ptr_ = 0;
        if (v80)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v165, (uint64_t)v80);
      }
    }
    v158 = *(_QWORD *)(v156 + 928);
    v163[0] = v69;
    LODWORD(v159[0]) = 0;
    if (!v69)
    {
      dmlc::LogCheckFormat<unsigned long,unsigned int>((uint64_t *)&v165);
      if (v165.__ptr_)
      {
        v138 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v163);
        dmlc::LogMessageFatal::Entry::Init(v138, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/hist/evaluate_splits.h");
        v139 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v163);
        v140 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v139, (uint64_t)"Check failed: ", 14);
        v141 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v140, (uint64_t)"out_preds.Size() > 0U", 21);
        v142 = *((char *)v165.__ptr_ + 23);
        v143 = v142 >= 0 ? v165.__ptr_ : *(void **)v165.__ptr_;
        v144 = v142 >= 0 ? *((unsigned __int8 *)v165.__ptr_ + 23) : *((_QWORD *)v165.__ptr_ + 1);
        v145 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v141, (uint64_t)v143, v144);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v145, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v163);
        v146 = v165.__ptr_;
        v165.__ptr_ = 0;
        if (v146)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v165, (uint64_t)v146);
      }
    }
    if (!v158)
    {
      v150 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v165);
      dmlc::LogMessageFatal::Entry::Init(v150, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/hist/evaluate_splits.h");
      v151 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v165);
      v152 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v151, (uint64_t)"Check failed: p_last_tree", 25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v152, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v165);
    }
    xgboost::tree::TreeEvaluator::GetEvaluator<xgboost::tree::TrainParam>((uint64_t **)(v156 + 304), (uint64_t)v163);
    LODWORD(v159[0]) = v71;
    v164.i32[0] = -1;
    if (v71 != -1)
    {
      dmlc::LogCheckFormat<int,int>((uint64_t *)&v165);
      if (v165.__ptr_)
      {
        v81 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v159);
        dmlc::LogMessageFatal::Entry::Init(v81, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/hist/evaluate_splits.h");
        v82 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v159);
        v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"Check failed: ", 14);
        v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)"out_preds.DeviceIdx() == GenericParameter::kCpuId", 49);
        v85 = *((char *)v165.__ptr_ + 23);
        v86 = v85 >= 0 ? v165.__ptr_ : *(void **)v165.__ptr_;
        v87 = v85 >= 0 ? *((unsigned __int8 *)v165.__ptr_ + 23) : *((_QWORD *)v165.__ptr_ + 1);
        v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)v86, v87);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v159);
        v89 = v165.__ptr_;
        v165.__ptr_ = 0;
        if (v89)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v165, (uint64_t)v89);
      }
    }
    v162 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v158 + 168) - *(_QWORD *)(v158 + 160)) >> 2);
    v90 = *(_QWORD *)(v156 + 904);
    for (j = *(_QWORD *)(v156 + 912); v90 != j; v90 += 136)
    {
      v159[0] = (void *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v90 + 112) - *(_QWORD *)(v90 + 104)) >> 3));
      if (v159[0] != (void *)v162)
      {
        dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v165);
        if (v165.__ptr_)
        {
          v91 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v159);
          dmlc::LogMessageFatal::Entry::Init(v91, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/hist/evaluate_splits.h");
          v92 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v159);
          v93 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)"Check failed: ", 14);
          v94 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)"part.Size() == n_nodes", 22);
          v95 = *((char *)v165.__ptr_ + 23);
          v96 = v95 >= 0 ? v165.__ptr_ : *(void **)v165.__ptr_;
          v97 = v95 >= 0 ? *((unsigned __int8 *)v165.__ptr_ + 23) : *((_QWORD *)v165.__ptr_ + 1);
          v98 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)v96, v97);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)": ", 2);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v159);
          v99 = v165.__ptr_;
          v165.__ptr_ = 0;
          if (v99)
            std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v165, (uint64_t)v99);
        }
      }
      v100 = *(_QWORD *)(v90 + 104);
      v101 = *(_QWORD *)(v90 + 112);
      *(_OWORD *)v159 = 0u;
      *(_OWORD *)__p = 0u;
      v161 = 0u;
      v102 = v101 - v100;
      if (v102)
      {
        v103 = 0;
        v104 = 0xAAAAAAAAAAAAAAABLL * (v102 >> 3);
        do
        {
          v105 = *(_QWORD *)(*(_QWORD *)(v90 + 104) + 24 * v103 + 8)
               - *(_QWORD *)(*(_QWORD *)(v90 + 104) + 24 * v103);
          v106 = v105 >> 3;
          if ((v105 & 0x1FF8) != 0)
            v107 = ((unint64_t)(v105 >> 3) >> 10) + 1;
          else
            v107 = (unint64_t)(v105 >> 3) >> 10;
          if (v107)
          {
            v108 = 0;
            do
            {
              v109 = v108 + 1024;
              if (v106 >= v108 + 1024)
                v110 = v108 + 1024;
              else
                v110 = v106;
              xgboost::common::BlockedSpace2d::AddBlock((xgboost::common::BlockedSpace2d *)v159, v103, v108, v110);
              v108 = v109;
              --v107;
            }
            while (v107);
          }
          ++v103;
        }
        while (v103 != v104);
        v111 = v159[0];
        v102 = (uint64_t)v159[1];
      }
      else
      {
        v111 = 0;
      }
      v165.__ptr_ = 0;
      v166.__m_.__sig = 850045863;
      memset(v166.__m_.__opaque, 0, sizeof(v166.__m_.__opaque));
      v112 = v102 - (_QWORD)v111;
      if (v112)
      {
        v113 = 0;
        v114 = v112 >> 4;
        do
        {
          v115 = xgboost::common::BlockedSpace2d::GetFirstDimension((xgboost::common::BlockedSpace2d *)v159, v113);
          v116 = xgboost::common::BlockedSpace2d::GetRange((xgboost::common::BlockedSpace2d *)v159, v113);
          v119 = *(_QWORD *)(v158 + 160);
          if (*(_DWORD *)(v119 + 20 * (int)v115 + 12) != -1 && *(_DWORD *)(v119 + 20 * (int)v115 + 4) == -1)
          {
            v120 = v116;
            v121 = v117;
            v122 = *(_QWORD *)(v90 + 104);
            v164 = *(int8x16_t *)(*(_QWORD *)(v156 + 448) + 24 * v115);
            v123 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeight((uint64_t)v163, v115, (float *)v156, (double *)v164.i64, v164, v118);
            if (v120 < v121)
            {
              v124 = *(_QWORD *)(v122 + 24 * v115);
              v125 = v123 * *(float *)(v156 + 4);
              v126 = v124 + 8 * v121;
              v127 = (_QWORD *)(v124 + 8 * v120);
              do
              {
                v128 = *v127 * v67;
                if (v128 >= v68)
                  __assert_rtn("operator()", "linalg.h", 412, "offset < data_.size() && \"Out of bound access.\"");
                *(float *)(v70 + 4 * v128) = v125 + *(float *)(v70 + 4 * v128);
                ++v127;
              }
              while ((unint64_t)v127 < v126);
            }
          }
          ++v113;
        }
        while (v113 != v114);
      }
      dmlc::OMPException::Rethrow(&v165);
      std::mutex::~mutex(&v166);
      std::exception_ptr::~exception_ptr(&v165);
      if (__p[1])
      {
        *(void **)&v161 = __p[1];
        operator delete(__p[1]);
      }
      if (v159[0])
      {
        v159[1] = v159[0];
        operator delete(v159[0]);
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v165, "UpdatePredictionCache");
  xgboost::common::Monitor::Stop();
  if (v166.__m_.__opaque[7] < 0)
    operator delete(v165.__ptr_);
  return 1;
}

void sub_220EDF198(_Unwind_Exception *a1)
{
  uint64_t v1;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v1 - 168));
  _Unwind_Resume(a1);
}

void sub_220EDF1A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v1 - 168));
  _Unwind_Resume(a1);
}

void sub_220EDF1B8()
{
  uint64_t v0;
  std::mutex *v1;
  uint64_t v2;

  __cxa_end_catch();
  std::mutex::~mutex(v1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v0 - 168));
  xgboost::common::Index::~Index((xgboost::common::Index *)&v2);
  JUMPOUT(0x220EDF348);
}

void sub_220EDF1C4()
{
  uint64_t v0;
  std::mutex *v1;
  uint64_t v2;

  __cxa_end_catch();
  std::mutex::~mutex(v1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v0 - 168));
  xgboost::common::Index::~Index((xgboost::common::Index *)&v2);
  JUMPOUT(0x220EDF348);
}

void sub_220EDF1D4()
{
  uint64_t v0;
  std::mutex *v1;
  uint64_t v2;

  __cxa_end_catch();
  std::mutex::~mutex(v1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v0 - 168));
  xgboost::common::Index::~Index((xgboost::common::Index *)&v2);
  JUMPOUT(0x220EDF348);
}

void sub_220EDF1E0()
{
  uint64_t v0;
  std::mutex *v1;
  uint64_t v2;

  __cxa_end_catch();
  std::mutex::~mutex(v1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v0 - 168));
  xgboost::common::Index::~Index((xgboost::common::Index *)&v2);
  JUMPOUT(0x220EDF348);
}

void sub_220EDF1F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_220EDF2B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v7;
  va_list va;

  va_start(va, a6);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  v7 = *(_QWORD *)(v6 - 168);
  *(_QWORD *)(v6 - 168) = 0;
  if (v7)
    std::default_delete<std::string>::operator()[abi:ne180100](v6 - 168);
  JUMPOUT(0x220EDF348);
}

void sub_220EDF2C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 - 168);
  *(_QWORD *)(v1 - 168) = 0;
  if (v3)
    std::default_delete<std::string>::operator()[abi:ne180100](v1 - 168, v3);
  _Unwind_Resume(a1);
}

void sub_220EDF2EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x220EDF2F8);
}

void sub_220EDF310(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_220EDF320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  if (a15)
    JUMPOUT(0x220EDF344);
  _Unwind_Resume(a1);
}

const char *xgboost::tree::GlobalApproxUpdater::Name(xgboost::tree::GlobalApproxUpdater *this)
{
  return "grow_histmaker";
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN7xgboost6common13ColumnSamplerENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0xA30uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN7xgboost6common13ColumnSamplerENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_220EDF390(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN7xgboost6common13ColumnSamplerENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_24E6BBBC8;
  a1[1] = 0;
  xgboost::common::ColumnSampler::ColumnSampler((xgboost::common::ColumnSampler *)(a1 + 3));
  return a1;
}

void sub_220EDF3DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<xgboost::common::ColumnSampler>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24E6BBBC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<xgboost::common::ColumnSampler>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24E6BBBC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227667068);
}

uint64_t std::__shared_ptr_emplace<xgboost::common::ColumnSampler>::__on_zero_shared(uint64_t a1)
{
  char v2;

  return std::allocator<xgboost::common::ColumnSampler>::destroy[abi:ne180100]((uint64_t)&v2, a1 + 24);
}

uint64_t std::allocator<xgboost::common::ColumnSampler>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = *(void **)(a2 + 40);
  if (v3)
  {
    *(_QWORD *)(a2 + 48) = v3;
    operator delete(v3);
  }
  std::__tree<std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>>>::destroy(a2 + 16, *(_QWORD **)(a2 + 24));
  return std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](a2);
}

uint64_t std::unique_ptr<xgboost::tree::GloablApproxBuilder<double>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    xgboost::tree::GloablApproxBuilder<double>::~GloablApproxBuilder(result);
    JUMPOUT(0x227667068);
  }
  return result;
}

uint64_t xgboost::tree::GloablApproxBuilder<double>::~GloablApproxBuilder(uint64_t a1)
{
  void *v2;
  void **v4;

  xgboost::HostDeviceVector<float>::~HostDeviceVector((uint64_t *)(a1 + 976));
  xgboost::HostDeviceVector<unsigned int>::~HostDeviceVector((uint64_t *)(a1 + 968));
  xgboost::HostDeviceVector<float>::~HostDeviceVector((uint64_t *)(a1 + 960));
  v4 = (void **)(a1 + 904);
  std::vector<xgboost::tree::ApproxRowPartitioner>::__destroy_vector::operator()[abi:ne180100](&v4);
  xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::~HistogramBuilder(a1 + 472);
  xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::~HistEvaluator(a1 + 152);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](a1 + 136);
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(_QWORD *)(a1 + 88) = v2;
    operator delete(v2);
  }
  return a1;
}

void std::vector<xgboost::tree::ApproxRowPartitioner>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 136;
        std::allocator<xgboost::tree::ApproxRowPartitioner>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<xgboost::tree::ApproxRowPartitioner>::destroy[abi:ne180100](uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void **v6;

  v2 = *(void **)(a1 + 104);
  if (v2)
  {
    *(_QWORD *)(a1 + 112) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 80);
  if (v3)
  {
    *(_QWORD *)(a1 + 88) = v3;
    operator delete(v3);
  }
  v6 = (void **)(a1 + 48);
  std::vector<std::shared_ptr<xgboost::DMatrix>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(_QWORD *)(a1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v5;
    operator delete(v5);
  }
}

uint64_t xgboost::common::PartitionBuilder<2048ul>::~PartitionBuilder(uint64_t a1)
{
  void *v2;
  void *v3;
  void **v5;

  v5 = (void **)(a1 + 48);
  std::vector<std::shared_ptr<xgboost::DMatrix>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::~HistogramBuilder(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void **v9;

  std::__tree<dmlc::parameter::FieldAccessEntry *>::destroy(a1 + 296, *(_QWORD **)(a1 + 304));
  v2 = *(void **)(a1 + 272);
  if (v2)
  {
    *(_QWORD *)(a1 + 280) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 248);
  if (v3)
    operator delete(v3);
  v4 = *(void **)(a1 + 224);
  if (v4)
  {
    *(_QWORD *)(a1 + 232) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 200);
  if (v5)
  {
    *(_QWORD *)(a1 + 208) = v5;
    operator delete(v5);
  }
  v9 = (void **)(a1 + 176);
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v6 = *(void **)(a1 + 104);
  if (v6)
  {
    *(_QWORD *)(a1 + 112) = v6;
    operator delete(v6);
  }
  v9 = (void **)(a1 + 80);
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v7 = *(void **)(a1 + 40);
  if (v7)
  {
    *(_QWORD *)(a1 + 48) = v7;
    operator delete(v7);
  }
  v9 = (void **)(a1 + 16);
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v9);
  return a1;
}

uint64_t xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::~HistEvaluator(uint64_t a1)
{
  void *v2;
  void *v3;
  void **v5;

  v2 = *(void **)(a1 + 296);
  if (v2)
  {
    *(_QWORD *)(a1 + 304) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 287) < 0)
    operator delete(*(void **)(a1 + 264));
  v5 = (void **)(a1 + 240);
  std::vector<std::unordered_set<unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)(a1 + 216);
  std::vector<std::unordered_set<unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)(a1 + 192);
  std::vector<std::unordered_set<unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v5);
  xgboost::HostDeviceVector<int>::~HostDeviceVector((uint64_t *)(a1 + 168));
  xgboost::HostDeviceVector<float>::~HostDeviceVector((uint64_t *)(a1 + 160));
  xgboost::HostDeviceVector<float>::~HostDeviceVector((uint64_t *)(a1 + 152));
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](a1 + 136);
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  v3 = *(void **)(a1 + 80);
  if (v3)
  {
    *(_QWORD *)(a1 + 88) = v3;
    operator delete(v3);
  }
  return a1;
}

void xgboost::tree::TreeEvaluator::~TreeEvaluator(xgboost::tree::TreeEvaluator *this)
{
  xgboost::HostDeviceVector<int>::~HostDeviceVector((uint64_t *)this + 2);
  xgboost::HostDeviceVector<float>::~HostDeviceVector((uint64_t *)this + 1);
  xgboost::HostDeviceVector<float>::~HostDeviceVector((uint64_t *)this);
}

void xgboost::FromJson<xgboost::tree::CPUHistMakerTrainParam>(_DWORD **a1@<X0>, xgboost::tree::CPUHistMakerTrainParam *a2@<X1>, std::vector<std::pair<std::string, std::string>> *a3@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char *v8;
  uint64_t *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t *v13;
  _QWORD *v14[2];
  __int128 *v15;

  v5 = xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*a1);
  v14[0] = 0;
  v14[1] = 0;
  v13 = (uint64_t *)v14;
  v6 = (_QWORD *)v5[2];
  v7 = v5 + 3;
  if (v6 != v5 + 3)
  {
    do
    {
      v8 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>((_DWORD *)v6[7]);
      v15 = (__int128 *)(v6 + 4);
      v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v13, (const void **)v6 + 4, (uint64_t)&std::piecewise_construct, &v15);
      std::string::operator=((std::string *)(v9 + 7), (const std::string *)(v8 + 16));
      v10 = (_QWORD *)v6[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v6[2];
          v12 = *v11 == (_QWORD)v6;
          v6 = v11;
        }
        while (!v12);
      }
      v6 = v11;
    }
    while (v11 != v7);
  }
  xgboost::XGBoostParameter<xgboost::tree::CPUHistMakerTrainParam>::UpdateAllowUnknown<std::map<std::string,std::string>>(a2, (uint64_t)&v13, a3);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v13, v14[0]);
}

void sub_220EDF938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void xgboost::XGBoostParameter<xgboost::tree::CPUHistMakerTrainParam>::UpdateAllowUnknown<std::map<std::string,std::string>>(xgboost::tree::CPUHistMakerTrainParam *this@<X0>, uint64_t a2@<X1>, std::vector<std::pair<std::string, std::string>> *a3@<X8>)
{
  void *v6;

  if (*(_BYTE *)this)
  {
    dmlc::Parameter<xgboost::tree::CPUHistMakerTrainParam>::UpdateAllowUnknown<std::map<std::string,std::string>>(this, a2, a3);
  }
  else
  {
    a3->__begin_ = 0;
    a3->__end_ = 0;
    a3->__end_cap_.__value_ = 0;
    v6 = xgboost::tree::CPUHistMakerTrainParam::__MANAGER__(this);
    dmlc::parameter::ParamManager::RunInit<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)v6, (uint64_t)this, *(_QWORD **)a2, (_QWORD *)(a2 + 8), a3, 0);
    *(_BYTE *)this = 1;
  }
}

void sub_220EDF9DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void dmlc::Parameter<xgboost::tree::CPUHistMakerTrainParam>::UpdateAllowUnknown<std::map<std::string,std::string>>(xgboost::tree::CPUHistMakerTrainParam *a1@<X0>, uint64_t a2@<X1>, std::vector<std::pair<std::string, std::string>> *a3@<X8>)
{
  void *v6;

  a3->__begin_ = 0;
  a3->__end_ = 0;
  a3->__end_cap_.__value_ = 0;
  v6 = xgboost::tree::CPUHistMakerTrainParam::__MANAGER__(a1);
  dmlc::parameter::ParamManager::RunUpdate<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)v6, (uint64_t)a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8), 0, a3, 0);
}

void sub_220EDFA50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void xgboost::ToJson<xgboost::tree::CPUHistMakerTrainParam>(xgboost::tree::CPUHistMakerTrainParam *a1@<X0>, uint64_t a2@<X8>)
{
  dmlc::parameter::ParamManager *v4;
  _QWORD **v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD **v8;
  BOOL v9;
  std::vector<std::pair<std::string, std::string>> v10;
  char v11;
  _QWORD **v12;
  _QWORD *v13[2];
  std::vector<std::pair<std::string, std::string>> *v14;

  *(_QWORD *)(a2 + 8) = 0x300000000;
  *(_QWORD *)a2 = &off_24E6BE1D0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 16) = a2 + 24;
  *(_QWORD *)(a2 + 32) = 0;
  v4 = (dmlc::parameter::ParamManager *)xgboost::tree::CPUHistMakerTrainParam::__MANAGER__(a1);
  dmlc::parameter::ParamManager::GetDict(v4, a1, &v10);
  std::map<std::string,std::string>::map[abi:ne180100]<std::__wrap_iter<std::pair<std::string,std::string> *>>((uint64_t)&v12, (const void **)&v10.__begin_->first.__r_.__value_.__l.__data_, (const void **)&v10.__end_->first.__r_.__value_.__l.__data_);
  v14 = &v10;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  v5 = v12;
  if (v12 != v13)
  {
    do
    {
      xgboost::JsonString::JsonString(&v10, (__int128 *)(v5 + 7));
      v14 = (std::vector<std::pair<std::string, std::string>> *)(v5 + 4);
      v6 = std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 16), (const void **)v5 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)&v14);
      xgboost::Json::operator=(v6 + 7, (uint64_t)&v10);
      v10.__begin_ = (std::vector<std::pair<std::string, std::string>>::pointer)off_24E6BE2B8;
      if (v11 < 0)
        operator delete(v10.__end_cap_.__value_);
      v7 = v5[1];
      if (v7)
      {
        do
        {
          v8 = (_QWORD **)v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD **)v5[2];
          v9 = *v8 == v5;
          v5 = v8;
        }
        while (!v9);
      }
      v5 = v8;
    }
    while (v8 != v13);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v12, v13[0]);
}

void sub_220EDFBBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t *a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  a21 = &a9;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  *(_QWORD *)v21 = v23 + 16;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy(v22, *(_QWORD **)(v21 + 24));
  _Unwind_Resume(a1);
}

void xgboost::XGBoostParameter<xgboost::tree::CPUHistMakerTrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>(xgboost::tree::CPUHistMakerTrainParam *this@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v6;

  if (*(_BYTE *)this)
  {
    dmlc::Parameter<xgboost::tree::CPUHistMakerTrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>(this, a2, a3);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v6 = xgboost::tree::CPUHistMakerTrainParam::__MANAGER__(this);
    dmlc::parameter::ParamManager::RunInit<std::__wrap_iter<std::pair<std::string,std::string> const*>>(v6, (uint64_t)this, *a2, a2[1], a3, 0);
    *(_BYTE *)this = 1;
  }
}

void sub_220EDFCAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *dmlc::Parameter<xgboost::tree::CPUHistMakerTrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>@<X0>(xgboost::tree::CPUHistMakerTrainParam *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v6;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = xgboost::tree::CPUHistMakerTrainParam::__MANAGER__(a1);
  return dmlc::parameter::ParamManager::RunUpdate<std::__wrap_iter<std::pair<std::string,std::string> const*>>(v6, (uint64_t)a1, *a2, a2[1], 0, a3, 0);
}

void sub_220EDFD1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::HistogramBuilder(uint64_t a1, uint64_t a2, const char *a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_BYTE *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_QWORD *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 57) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 296) = a1 + 304;
  *(_DWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  rabit::utils::Assert((rabit::utils *)1, "cannot initialize reduce handle twice", a3);
  *(_QWORD *)(a1 + 328) = rabit::ReducerAlignImpl<xgboost::detail::GradientPairInternal<float>,&xgboost::detail::GradientPairInternal<float>::Reduce>;
  *(_DWORD *)(a1 + 352) = -1;
  *(_QWORD *)(a1 + 364) = 0;
  *(_QWORD *)(a1 + 356) = 0;
  *(_QWORD *)(a1 + 369) = 0;
  *(_QWORD *)(a1 + 384) = 0x7FF8000000000000;
  *(_DWORD *)(a1 + 392) = -1;
  *(_QWORD *)(a1 + 400) = 0;
  *(_BYTE *)(a1 + 408) = 0;
  return a1;
}

void sub_220EDFE1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  va_list va;

  va_start(va, a2);
  v4 = v3;
  std::__tree<dmlc::parameter::FieldAccessEntry *>::destroy(v4, *(_QWORD **)(v2 + 304));
  v6 = *(void **)(v2 + 272);
  if (v6)
  {
    *(_QWORD *)(v2 + 280) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(v2 + 248);
  if (v7)
    operator delete(v7);
  v8 = *(void **)(v2 + 224);
  if (v8)
  {
    *(_QWORD *)(v2 + 232) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(v2 + 200);
  if (v9)
  {
    *(_QWORD *)(v2 + 208) = v9;
    operator delete(v9);
  }
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  v10 = *(void **)(v2 + 104);
  if (v10)
  {
    *(_QWORD *)(v2 + 112) = v10;
    operator delete(v10);
  }
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  v11 = *(void **)(v2 + 40);
  if (v11)
  {
    *(_QWORD *)(v2 + 48) = v11;
    operator delete(v11);
  }
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::HistEvaluator(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  std::string *v15;
  std::string *v16;
  __int128 v17;
  float *v18;
  std::vector<unsigned int>::size_type v19;
  uint64_t v20;
  __n128 __p;
  uint64_t v23;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v10 = *(_OWORD *)(a2 + 20);
  v11 = *(_OWORD *)(a2 + 36);
  v12 = *(_OWORD *)(a2 + 52);
  v13 = *(_OWORD *)(a2 + 62);
  v14 = *(_OWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 80) = 0;
  v15 = (std::string *)(a1 + 80);
  *(_OWORD *)(a1 + 4) = v14;
  *(_OWORD *)(a1 + 62) = v13;
  *(_OWORD *)(a1 + 52) = v12;
  *(_OWORD *)(a1 + 36) = v11;
  *(_OWORD *)(a1 + 20) = v10;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 80), *(const void **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2);
  v16 = v15 + 1;
  if (*(char *)(a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)(a2 + 104), *(_QWORD *)(a2 + 112));
  }
  else
  {
    v17 = *(_OWORD *)(a2 + 104);
    v15[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 120);
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
  }
  *(_OWORD *)(a1 + 136) = *(_OWORD *)a5;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  xgboost::tree::TreeEvaluator::TreeEvaluator((std::vector<int> **)(a1 + 152), (const xgboost::tree::TrainParam *)a2, *(_DWORD *)(a3 + 8), -1);
  *(_OWORD *)(a1 + 192) = 0u;
  *(_DWORD *)(a1 + 184) = a4;
  *(_BYTE *)(a1 + 292) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  xgboost::FeatureInteractionConstraintHost::Configure((std::string *)(a1 + 192), (const xgboost::tree::TrainParam *)a2, *(_DWORD *)(a3 + 8));
  v18 = *(float **)(a1 + 136);
  v19 = *(_QWORD *)(a3 + 8);
  v20 = *(_QWORD *)(a3 + 176);
  v23 = 0;
  __p = 0uLL;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, *(const void **)v20, *(_QWORD *)(v20 + 8), (uint64_t)(*(_QWORD *)(v20 + 8) - *(_QWORD *)v20) >> 2);
  xgboost::common::ColumnSampler::Init(v18, v19, &__p, *(float *)(a1 + 56), *(float *)(a1 + 60), *(float *)(a1 + 64));
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  return a1;
}

void sub_220EE0044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void **v12;
  void *v14;

  v14 = *v12;
  if (*v12)
  {
    *(_QWORD *)(v11 + 88) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

float32x2_t rabit::ReducerAlignImpl<xgboost::detail::GradientPairInternal<float>,&xgboost::detail::GradientPairInternal<float>::Reduce>(float32x2_t *a1, float32x2_t *a2, int a3)
{
  uint64_t v3;
  float32x2_t v4;
  float32x2_t result;

  if (a3 >= 1)
  {
    v3 = a3;
    do
    {
      v4 = *a1++;
      result = vadd_f32(v4, *a2);
      *a2++ = result;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::HistogramBuilder(uint64_t a1, uint64_t a2, const char *a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_BYTE *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_QWORD *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 57) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 296) = a1 + 304;
  *(_DWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  rabit::utils::Assert((rabit::utils *)1, "cannot initialize reduce handle twice", a3);
  *(_QWORD *)(a1 + 328) = rabit::ReducerSafeImpl<xgboost::detail::GradientPairInternal<double>,&xgboost::detail::GradientPairInternal<double>::Reduce>;
  *(_DWORD *)(a1 + 352) = -1;
  *(_QWORD *)(a1 + 364) = 0;
  *(_QWORD *)(a1 + 356) = 0;
  *(_QWORD *)(a1 + 369) = 0;
  *(_QWORD *)(a1 + 384) = 0x7FF8000000000000;
  *(_DWORD *)(a1 + 392) = -1;
  *(_QWORD *)(a1 + 400) = 0;
  *(_BYTE *)(a1 + 408) = 0;
  return a1;
}

void sub_220EE01C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  va_list va;

  va_start(va, a2);
  v4 = v3;
  std::__tree<dmlc::parameter::FieldAccessEntry *>::destroy(v4, *(_QWORD **)(v2 + 304));
  v6 = *(void **)(v2 + 272);
  if (v6)
  {
    *(_QWORD *)(v2 + 280) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(v2 + 248);
  if (v7)
    operator delete(v7);
  v8 = *(void **)(v2 + 224);
  if (v8)
  {
    *(_QWORD *)(v2 + 232) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(v2 + 200);
  if (v9)
  {
    *(_QWORD *)(v2 + 208) = v9;
    operator delete(v9);
  }
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  v10 = *(void **)(v2 + 104);
  if (v10)
  {
    *(_QWORD *)(v2 + 112) = v10;
    operator delete(v10);
  }
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  v11 = *(void **)(v2 + 40);
  if (v11)
  {
    *(_QWORD *)(v2 + 48) = v11;
    operator delete(v11);
  }
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::HistEvaluator(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  std::string *v15;
  std::string *v16;
  __int128 v17;
  float *v18;
  std::vector<unsigned int>::size_type v19;
  uint64_t v20;
  __n128 __p;
  uint64_t v23;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v10 = *(_OWORD *)(a2 + 20);
  v11 = *(_OWORD *)(a2 + 36);
  v12 = *(_OWORD *)(a2 + 52);
  v13 = *(_OWORD *)(a2 + 62);
  v14 = *(_OWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 80) = 0;
  v15 = (std::string *)(a1 + 80);
  *(_OWORD *)(a1 + 4) = v14;
  *(_OWORD *)(a1 + 62) = v13;
  *(_OWORD *)(a1 + 52) = v12;
  *(_OWORD *)(a1 + 36) = v11;
  *(_OWORD *)(a1 + 20) = v10;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 80), *(const void **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2);
  v16 = v15 + 1;
  if (*(char *)(a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)(a2 + 104), *(_QWORD *)(a2 + 112));
  }
  else
  {
    v17 = *(_OWORD *)(a2 + 104);
    v15[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 120);
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
  }
  *(_OWORD *)(a1 + 136) = *(_OWORD *)a5;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  xgboost::tree::TreeEvaluator::TreeEvaluator((std::vector<int> **)(a1 + 152), (const xgboost::tree::TrainParam *)a2, *(_DWORD *)(a3 + 8), -1);
  *(_OWORD *)(a1 + 192) = 0u;
  *(_DWORD *)(a1 + 184) = a4;
  *(_BYTE *)(a1 + 292) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  xgboost::FeatureInteractionConstraintHost::Configure((std::string *)(a1 + 192), (const xgboost::tree::TrainParam *)a2, *(_DWORD *)(a3 + 8));
  v18 = *(float **)(a1 + 136);
  v19 = *(_QWORD *)(a3 + 8);
  v20 = *(_QWORD *)(a3 + 176);
  v23 = 0;
  __p = 0uLL;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, *(const void **)v20, *(_QWORD *)(v20 + 8), (uint64_t)(*(_QWORD *)(v20 + 8) - *(_QWORD *)v20) >> 2);
  xgboost::common::ColumnSampler::Init(v18, v19, &__p, *(float *)(a1 + 56), *(float *)(a1 + 60), *(float *)(a1 + 64));
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  return a1;
}

void sub_220EE03F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void **v12;
  void *v14;

  v14 = *v12;
  if (*v12)
  {
    *(_QWORD *)(v11 + 88) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

float64x2_t rabit::ReducerSafeImpl<xgboost::detail::GradientPairInternal<double>,&xgboost::detail::GradientPairInternal<double>::Reduce>(float64x2_t *a1, float64x2_t *a2, int a3)
{
  uint64_t v3;
  float64x2_t v4;
  float64x2_t result;

  if (a3 >= 1)
  {
    v3 = a3;
    do
    {
      v4 = *a1++;
      result = vaddq_f64(*a2, v4);
      *a2++ = result;
      --v3;
    }
    while (v3);
  }
  return result;
}

void std::vector<xgboost::detail::GradientPairInternal<float>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<xgboost::detail::GradientPairInternal<float>>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<xgboost::detail::GradientPairInternal<float>>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    if (v7 != v8)
    {
      do
      {
        v18 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        *((_QWORD *)v15 - 1) = v18;
        v15 -= 8;
      }
      while (v7 != v8);
      v8 = *a1;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

_QWORD *xgboost::tree::Driver<xgboost::tree::CPUExpandEntry>::Push(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 1;
  v4 = a1[2];
  if (v4 >= a1[3])
  {
    v5 = std::vector<xgboost::tree::CPUExpandEntry>::__push_back_slow_path<xgboost::tree::CPUExpandEntry const&>(v3, a2);
  }
  else
  {
    std::vector<xgboost::tree::CPUExpandEntry>::__construct_one_at_end[abi:ne180100]<xgboost::tree::CPUExpandEntry const&>((uint64_t)v3, a2);
    v5 = v4 + 88;
  }
  a1[2] = v5;
  v6 = a1[1];
  std::__function::__value_func<xgboost::ObjFunction * ()(void)>::__value_func[abi:ne180100]((uint64_t)v10, (uint64_t)(a1 + 4));
  v7.n128_f64[0] = std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(xgboost::tree::CPUExpandEntry,xgboost::tree::CPUExpandEntry)> &,std::__wrap_iter<xgboost::tree::CPUExpandEntry*>>(v6, v5, (uint64_t)v10, 0x2E8BA2E8BA2E8BA3 * ((v5 - v6) >> 3));
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(__n128))(*result + 8 * v9))(v7);
}

void sub_220EE06CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void xgboost::tree::Driver<xgboost::tree::CPUExpandEntry>::Pop(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v3;
  int v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  void *v39;
  _BYTE *v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t *v45;
  char v46;
  _QWORD v47[2];
  int v48;
  void *__p;
  void *v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v3 = *(uint64_t **)(a1 + 8);
  if (v3 == *(uint64_t **)(a1 + 16))
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return;
  }
  if (*(_DWORD *)a1 != 1)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    v13 = *((_DWORD *)v3 + 4);
    v14 = v3[1];
    v36 = *v3;
    v37 = v14;
    v38 = v13;
    v40 = 0;
    v41 = 0;
    v39 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v39, (const void *)v3[3], v3[4], (v3[4] - v3[3]) >> 2);
    v15 = *((_OWORD *)v3 + 3);
    v16 = *((_OWORD *)v3 + 4);
    v44 = v3[10];
    v42 = v15;
    v43 = v16;
    v17 = HIDWORD(v36);
    while (1)
    {
      v18 = *(_QWORD *)(a1 + 8);
      v19 = *(_QWORD *)(a1 + 16);
      if (v18 == v19)
        goto LABEL_31;
      std::__function::__value_func<xgboost::ObjFunction * ()(void)>::__value_func[abi:ne180100]((uint64_t)v47, a1 + 32);
      std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(xgboost::tree::CPUExpandEntry,xgboost::tree::CPUExpandEntry)>,std::__wrap_iter<xgboost::tree::CPUExpandEntry*>>(v18, v19, (uint64_t)v47, 0x2E8BA2E8BA2E8BA3 * ((v19 - v18) >> 3));
      v22 = __p;
      if (__p == v47)
        break;
      if (__p)
      {
        v23 = 5;
LABEL_13:
        (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v22 + 8 * v23))(v22, v20, v21);
      }
      v24 = *(_QWORD *)(a1 + 16);
      v25 = *(void **)(v24 - 64);
      if (v25)
      {
        *(_QWORD *)(v24 - 56) = v25;
        operator delete(v25);
      }
      *(_QWORD *)(a1 + 16) = v24 - 88;
      v26 = a2[1];
      if (v26 >= a2[2])
      {
        v27 = std::vector<xgboost::tree::CPUExpandEntry>::__emplace_back_slow_path<xgboost::tree::CPUExpandEntry&>(a2, (uint64_t)&v36);
      }
      else
      {
        std::vector<xgboost::tree::CPUExpandEntry>::__construct_one_at_end[abi:ne180100]<xgboost::tree::CPUExpandEntry&>((uint64_t)a2, (uint64_t)&v36);
        v27 = v26 + 88;
      }
      a2[1] = v27;
      v28 = *(uint64_t **)(a1 + 8);
      if (v28 != *(uint64_t **)(a1 + 16))
      {
        v29 = v28[1];
        v36 = *v28;
        v30 = *((_DWORD *)v28 + 4);
        v37 = v29;
        v38 = v30;
        if (&v36 != v28)
          std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)&v39, (char *)v28[3], v28[4], (v28[4] - v28[3]) >> 2);
        v31 = *((_OWORD *)v28 + 3);
        v32 = *((_OWORD *)v28 + 4);
        v44 = v28[10];
        v42 = v31;
        v43 = v32;
      }
      if (HIDWORD(v36) != v17)
        goto LABEL_31;
    }
    v22 = v47;
    v23 = 4;
    goto LABEL_13;
  }
  v5 = *((_DWORD *)v3 + 4);
  v6 = v3[1];
  v36 = *v3;
  v37 = v6;
  v38 = v5;
  v40 = 0;
  v41 = 0;
  v39 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v39, (const void *)v3[3], v3[4], (v3[4] - v3[3]) >> 2);
  v7 = *((_OWORD *)v3 + 3);
  v8 = *((_OWORD *)v3 + 4);
  v44 = v3[10];
  v42 = v7;
  v43 = v8;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  std::__function::__value_func<xgboost::ObjFunction * ()(void)>::__value_func[abi:ne180100]((uint64_t)v47, a1 + 32);
  std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(xgboost::tree::CPUExpandEntry,xgboost::tree::CPUExpandEntry)>,std::__wrap_iter<xgboost::tree::CPUExpandEntry*>>(v9, v10, (uint64_t)v47, 0x2E8BA2E8BA2E8BA3 * ((v10 - v9) >> 3));
  v11 = __p;
  if (__p == v47)
  {
    v12 = 4;
    v11 = v47;
  }
  else
  {
    if (!__p)
      goto LABEL_27;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_27:
  v33 = *(_QWORD *)(a1 + 16);
  v34 = *(void **)(v33 - 64);
  if (v34)
  {
    *(_QWORD *)(v33 - 56) = v34;
    operator delete(v34);
  }
  *(_QWORD *)(a1 + 16) = v33 - 88;
  v47[0] = v36;
  v47[1] = v37;
  v48 = v38;
  v50 = 0;
  v51 = 0;
  __p = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v39, (uint64_t)v40, (v40 - (_BYTE *)v39) >> 2);
  v52 = v42;
  v53 = v43;
  v54 = v44;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v45 = a2;
  v46 = 0;
  v35 = operator new(0x58uLL);
  *a2 = (uint64_t)v35;
  a2[1] = (uint64_t)v35;
  a2[2] = (uint64_t)v35 + 88;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<xgboost::tree::CPUExpandEntry>,xgboost::tree::CPUExpandEntry const*,xgboost::tree::CPUExpandEntry const*,xgboost::tree::CPUExpandEntry*>((uint64_t)(a2 + 2), (uint64_t)v47, (uint64_t)&v55, (uint64_t)v35);
  if (__p)
  {
    v50 = __p;
    operator delete(__p);
  }
LABEL_31:
  if (v39)
  {
    v40 = v39;
    operator delete(v39);
  }
}

void sub_220EE0A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;

  *(_QWORD *)(v26 + 8) = v27;
  std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (__p)
  {
    a26 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a12)
    operator delete(a12);
  _Unwind_Resume(a1);
}

BOOL xgboost::tree::CPUExpandEntry::IsValid(xgboost::tree::CPUExpandEntry *this, const xgboost::tree::TrainParam *a2, int a3)
{
  float v3;
  int v5;
  int v7;

  v3 = *((float *)this + 2);
  if (v3 <= 0.000001 || *((double *)this + 8) == 0.0)
    return 0;
  if (*((double *)this + 10) == 0.0 || v3 < *((float *)a2 + 2))
    return 0;
  v5 = *((_DWORD *)a2 + 3);
  if (v5 >= 1 && *((_DWORD *)this + 1) == v5)
    return 0;
  v7 = *((_DWORD *)a2 + 4);
  return v7 < 1 || v7 != a3;
}

void xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::ApplyTreeSplit(uint64_t a1, int *a2, xgboost::RegTree *a3)
{
  uint64_t v6;
  _OWORD *v7;
  int v8;
  _OWORD *v9;
  float64x2_t v10;
  float v11;
  int v12;
  int8x16_t v13;
  float v14;
  int v15;
  int8x16_t v16;
  xgboost::common *v17;
  float v18;
  char *v19;
  uint64_t v20;
  std::vector<unsigned int>::pointer begin;
  std::vector<unsigned int>::pointer end;
  float v23;
  float v24;
  float v25;
  float v26;
  int v27;
  unint64_t v28;
  int v29;
  unsigned int v30;
  float v31;
  float v32;
  float v33;
  _DWORD *v34;
  signed int v35;
  signed int v36;
  int8x16_t v37;
  uint64_t v38;
  int v39;
  float v40;
  float v41;
  int8x16_t v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  float v46;
  float v47;
  uint64_t v48;
  int8x16_t v49;
  _QWORD v50[2];
  std::vector<unsigned int>::value_type __x;
  std::vector<unsigned int> v52;
  _BYTE v53[56];

  v6 = a1 + 152;
  xgboost::tree::TreeEvaluator::GetEvaluator<xgboost::tree::TrainParam>((uint64_t **)(a1 + 152), (uint64_t)v53);
  v7 = a2 + 14;
  v8 = *a2;
  v9 = a2 + 18;
  v10 = *(float64x2_t *)(a2 + 18);
  v49 = (int8x16_t)vaddq_f64(*(float64x2_t *)(a2 + 14), v10);
  *(int8x16_t *)&v52.__begin_ = v49;
  v11 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeight((uint64_t)v53, v8, (float *)a1, (double *)&v52, v49, (int8x16_t)v10);
  v12 = *a2;
  *(_OWORD *)&v52.__begin_ = *(_OWORD *)(a2 + 14);
  v14 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeight((uint64_t)v53, v12, (float *)a1, (double *)&v52, *(int8x16_t *)&v52.__begin_, v13);
  v15 = *a2;
  *(_OWORD *)&v52.__begin_ = *(_OWORD *)(a2 + 18);
  v18 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeight((uint64_t)v53, v15, (float *)a1, (double *)&v52, *(int8x16_t *)&v52.__begin_, v16);
  if (*((_BYTE *)a2 + 48))
  {
    memset(&v52, 0, sizeof(v52));
    v19 = (char *)*((_QWORD *)a2 + 3);
    v20 = *((_QWORD *)a2 + 4);
    if (v19 == (char *)v20)
    {
      v26 = *((float *)a2 + 4);
      if (v26 < 0.0 || v26 >= 16777000.0)
      {
        xgboost::common::InvalidCategory(v17);
        v26 = *((float *)a2 + 4);
      }
      v27 = (int)v26;
      __x = 0;
      std::vector<unsigned int>::resize(&v52, vcvtpd_u64_f64((double)((v27 & ~(v27 >> 31)) + 1) * 0.03125), &__x);
      begin = v52.__begin_;
      end = v52.__end_;
      v28 = (unint64_t)v27 >> 5;
      if (v28 >= v52.__end_ - v52.__begin_)
        std::terminate();
      v52.__begin_[v28] |= 1 << ~(_BYTE)v27;
    }
    else if (&v52 == (std::vector<unsigned int> *)(a2 + 6))
    {
      begin = 0;
      end = 0;
    }
    else
    {
      std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)&v52, v19, v20, (v20 - (uint64_t)v19) >> 2);
      begin = v52.__begin_;
      end = v52.__end_;
    }
    v29 = *a2;
    v30 = a2[3];
    v50[0] = end - begin;
    v50[1] = begin;
    v31 = *(double *)&v49.i64[1];
    v32 = *((double *)a2 + 8);
    v33 = *((double *)a2 + 10);
    xgboost::RegTree::ExpandCategorical((uint64_t)a3, v29, v30 & 0x7FFFFFFF, (uint64_t)v50, v30 >> 31, v11, v14 * *(float *)(a1 + 4), v18 * *(float *)(a1 + 4), *((float *)a2 + 2), v31, v32, v33);
    if (v52.__begin_)
    {
      v52.__end_ = v52.__begin_;
      operator delete(v52.__begin_);
    }
  }
  else
  {
    v23 = *(double *)&v49.i64[1];
    v24 = *((double *)a2 + 8);
    v25 = *((double *)a2 + 10);
    xgboost::RegTree::ExpandNode(a3, *a2, a2[3] & 0x7FFFFFFF, *((float *)a2 + 4), a2[3] >> 31, v11, v14 * *(float *)(a1 + 4), v18 * *(float *)(a1 + 4), *((float *)a2 + 2), v23, v24, v25, -1);
  }
  v34 = (_DWORD *)(*((_QWORD *)a3 + 20) + 20 * *a2);
  v35 = v34[1];
  v36 = v34[2];
  xgboost::tree::TreeEvaluator::AddSplit<false>(v6, *a2, v35, v36, v34[3] & 0x7FFFFFFF, v14, v18);
  std::vector<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry,std::allocator<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry>>::resize(a1 + 296, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)a3 + 21) - *((_QWORD *)a3 + 20)) >> 2));
  v38 = *(_QWORD *)(a1 + 296);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 304) - v38) >> 3) <= v35)
    goto LABEL_22;
  *(_OWORD *)(v38 + 24 * v35) = *v7;
  v39 = *a2;
  *(_OWORD *)&v52.__begin_ = *v7;
  v40 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeight((uint64_t)v53, v39, (float *)a1, (double *)&v52, *(int8x16_t *)&v52.__begin_, v37);
  v41 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcGainGivenWeight((uint64_t)v53, (float *)a1, (double *)&v52, v40);
  v43 = *(_QWORD *)(a1 + 296);
  v44 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 304) - v43) >> 3);
  if (v44 <= v35
    || (*(float *)(v43 + 24 * v35 + 16) = v41, v44 <= v36)
    || (*(_OWORD *)(v43 + 24 * v36) = *v9,
        v45 = *a2,
        *(_OWORD *)&v52.__begin_ = *v9,
        v46 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeight((uint64_t)v53, v45, (float *)a1, (double *)&v52, *(int8x16_t *)&v52.__begin_, v42), v47 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcGainGivenWeight((uint64_t)v53, (float *)a1, (double *)&v52, v46), v48 = *(_QWORD *)(a1 + 296), 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 304) - v48) >> 3) <= v36))
  {
LABEL_22:
    std::vector<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry,std::allocator<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry>>::__throw_out_of_range[abi:ne180100]();
  }
  *(float *)(v48 + 24 * v36 + 16) = v47;
  if (*(_BYTE *)(a1 + 292))
    xgboost::FeatureInteractionConstraintHost::SplitImpl((xgboost::FeatureInteractionConstraintHost *)(a1 + 192), *a2, *(_DWORD *)(*((_QWORD *)a3 + 20) + 20 * *a2 + 12) & 0x7FFFFFFF, v35, v36);
}

void sub_220EE0FEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator!=(uint64_t *a1)
{
  uint64_t v2;
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  char v7;

  v2 = *a1;
  if (!v2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/data.h");
    v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: impl_ != nullptr", 30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
    v2 = *a1;
  }
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2) ^ 1;
}

void sub_220EE109C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

uint64_t xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator*(uint64_t *a1)
{
  uint64_t v2;
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  char v7;

  v2 = *a1;
  if (!v2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/data.h");
    v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: impl_ != nullptr", 30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
    v2 = *a1;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
}

void sub_220EE113C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void xgboost::tree::ApproxRowPartitioner::UpdatePosition(uint64_t *a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t FirstDimension;
  unint64_t Range;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  int v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t *v70;
  float v71;
  unint64_t v74;
  unsigned int v75;
  _QWORD *v76;
  unint64_t v77;
  unint64_t v78;
  int64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unsigned int v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  std::string *Entry;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  int v100;
  void *v101;
  uint64_t v102;
  _QWORD *v103;
  void *ptr;
  uint64_t v105;
  unint64_t v106;
  int64_t v107;
  unint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  _BYTE *v114;
  unint64_t v115;
  _QWORD *v116;
  _BYTE *v117;
  uint64_t v118;
  std::mutex *v119;
  _QWORD v120[2];
  void *v121[2];
  void *v122[2];
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  float v126;
  void *__p;
  void *v128;
  uint64_t v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  unint64_t v133[2];
  uint64_t v134;
  std::exception_ptr v135;
  std::mutex v136;
  std::exception_ptr v137;
  uint64_t v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;

  v144 = *MEMORY[0x24BDAC8D0];
  v6 = *a3;
  v5 = a3[1];
  v116 = *(_QWORD **)(a2 + 120);
  v111 = *(_QWORD **)(a2 + 128);
  *(_OWORD *)v122 = 0u;
  v123 = 0u;
  *(_OWORD *)v121 = 0u;
  v7 = v5 - v6;
  v8 = v7 / 88;
  if (v7)
  {
    v9 = 0;
    do
    {
      v10 = *a3;
      v11 = *a3 + 88 * v9;
      v137.__ptr_ = *(void **)v11;
      v12 = *(_QWORD *)(v11 + 8);
      LODWORD(v139) = *(_DWORD *)(v11 + 16);
      v138 = v12;
      v140 = 0uLL;
      *((_QWORD *)&v139 + 1) = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)&v139 + 1, *(const void **)(v11 + 24), *(_QWORD *)(v11 + 32), (uint64_t)(*(_QWORD *)(v11 + 32) - *(_QWORD *)(v11 + 24)) >> 2);
      v13 = v10 + 88 * v9;
      v14 = *(_OWORD *)(v13 + 48);
      v15 = *(_OWORD *)(v13 + 64);
      v143 = *(_QWORD *)(v13 + 80);
      v141 = v14;
      v142 = v15;
      v16 = (uint64_t *)(a1[13] + 24 * LODWORD(v137.__ptr_));
      v18 = *v16;
      v17 = v16[1];
      if (*((_QWORD *)&v139 + 1))
      {
        *(_QWORD *)&v140 = *((_QWORD *)&v139 + 1);
        operator delete(*((void **)&v139 + 1));
      }
      v19 = v17 - v18;
      v20 = (v17 - v18) >> 3;
      if ((v19 & 0x3FF8) != 0)
        v21 = (v20 >> 11) + 1;
      else
        v21 = v20 >> 11;
      if (v21)
      {
        v22 = 0;
        do
        {
          v23 = v22 + 2048;
          if (v20 >= v22 + 2048)
            v24 = v22 + 2048;
          else
            v24 = v20;
          xgboost::common::BlockedSpace2d::AddBlock((xgboost::common::BlockedSpace2d *)v121, v9, v22, v24);
          v22 = v23;
          --v21;
        }
        while (v21);
      }
      ++v9;
    }
    while (v9 != v8);
    v117 = v121[1];
    v114 = v121[0];
    v25 = (uint64_t)a1;
  }
  else
  {
    v25 = (uint64_t)a1;
    v114 = 0;
    v117 = 0;
  }
  std::vector<std::pair<double,double>>::resize(v25, v8);
  std::vector<unsigned long>::resize(v25 + 24, v8 + 1);
  **(_QWORD **)(v25 + 24) = 0;
  if (v8 + 1 >= 2)
  {
    v26 = 0;
    v27 = 0;
    v28 = 0;
    do
    {
      v29 = v8;
      v30 = *a3 + v26;
      v137.__ptr_ = *(void **)v30;
      v31 = *(_QWORD *)(v30 + 8);
      LODWORD(v139) = *(_DWORD *)(v30 + 16);
      v138 = v31;
      v140 = 0uLL;
      *((_QWORD *)&v139 + 1) = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)&v139 + 1, *(const void **)(v30 + 24), *(_QWORD *)(v30 + 32), (uint64_t)(*(_QWORD *)(v30 + 32) - *(_QWORD *)(v30 + 24)) >> 2);
      v32 = *(_OWORD *)(v30 + 48);
      v33 = *(_OWORD *)(v30 + 64);
      v143 = *(_QWORD *)(v30 + 80);
      v141 = v32;
      v142 = v33;
      v34 = (uint64_t *)(a1[13] + 24 * LODWORD(v137.__ptr_));
      v36 = *v34;
      v35 = v34[1];
      if (*((_QWORD *)&v139 + 1))
      {
        *(_QWORD *)&v140 = *((_QWORD *)&v139 + 1);
        operator delete(*((void **)&v139 + 1));
      }
      v37 = (v35 - v36) >> 3;
      if (((v35 - v36) & 0x3FF8) != 0)
        v28 += (v37 >> 11) + 1;
      else
        v28 += v37 >> 11;
      *(_QWORD *)(*(_QWORD *)(v25 + 24) + 8 * v27++ + 8) = v28;
      v26 += 88;
      v8 = v29;
    }
    while (v29 != v27);
  }
  v38 = (v117 - v114) >> 4;
  if (a1[9] < v38)
  {
    std::vector<std::shared_ptr<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>>::resize((uint64_t)(a1 + 6), (v117 - v114) >> 4);
    a1[9] = v38;
  }
  v39 = a4[32];
  v40 = a4[36];
  v118 = a4[35];
  v120[0] = (a4[33] - v39) >> 2;
  v120[1] = v39;
  v139 = 0u;
  v140 = 0u;
  v141 = 0u;
  v137.__ptr_ = 0;
  v138 = 850045863;
  *(_QWORD *)&v142 = 0;
  if (v121[1] != v121[0])
  {
    v41 = 0;
    v115 = (v40 - v118) >> 4;
    v107 = ((char *)v121[1] - (char *)v121[0]) >> 4;
    v119 = (std::mutex *)(a2 + 24);
    while (1)
    {
      FirstDimension = xgboost::common::BlockedSpace2d::GetFirstDimension((xgboost::common::BlockedSpace2d *)v121, v41);
      Range = xgboost::common::BlockedSpace2d::GetRange((xgboost::common::BlockedSpace2d *)v121, v41);
      v45 = v44;
      v46 = *a3;
      v47 = *a3 + 88 * FirstDimension;
      v124 = *(_QWORD *)v47;
      v48 = *(_QWORD *)(v47 + 8);
      v126 = *(float *)(v47 + 16);
      v125 = v48;
      v128 = 0;
      v129 = 0;
      __p = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v47 + 24), *(_QWORD *)(v47 + 32), (uint64_t)(*(_QWORD *)(v47 + 32) - *(_QWORD *)(v47 + 24)) >> 2);
      v49 = v46 + 88 * FirstDimension;
      v50 = *(_OWORD *)(v49 + 48);
      v51 = *(_OWORD *)(v49 + 64);
      v132 = *(_QWORD *)(v49 + 80);
      v130 = v50;
      v131 = v51;
      v52 = v50;
      v53 = v124;
      v54 = HIDWORD(v125);
      xgboost::common::PartitionBuilder<2048ul>::AllocateForTask((uint64_t)a1, *(_QWORD *)(a1[3] + 8 * (int)FirstDimension) + (Range >> 11));
      v55 = a1[3];
      v109 = Range >> 11;
      v110 = (int)FirstDimension;
      v56 = *(_QWORD *)(v55 + 8 * (int)FirstDimension) + (Range >> 11);
      v57 = a1[6];
      v58 = (a1[7] - v57) >> 4;
      if (v58 <= v56)
LABEL_87:
        std::vector<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry,std::allocator<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry>>::__throw_out_of_range[abi:ne180100]();
      if (v45 != Range)
        break;
      v59 = 0;
      v60 = 0;
LABEL_58:
      if (v58 <= v56)
        goto LABEL_87;
      **(_QWORD **)(v57 + 16 * v56) = v60;
      v77 = *(_QWORD *)(v55 + 8 * v110) + v109;
      if (v58 <= v77)
        goto LABEL_87;
      *(_QWORD *)(*(_QWORD *)(v57 + 16 * v77) + 8) = v59;
      if (__p)
      {
        v128 = __p;
        operator delete(__p);
      }
      if (++v41 == v107)
        goto LABEL_63;
    }
    v106 = v41;
    v60 = 0;
    v59 = 0;
    v61 = *(_QWORD *)(a1[13] + 24 * v53);
    v62 = v54 & 0x7FFFFFFF;
    v63 = (uint64_t *)(v61 + 8 * Range);
    v64 = (v61 + 8 * v45 - (uint64_t)v63) >> 3;
    v65 = *(_QWORD *)(v57 + 16 * v56);
    v66 = v65 + 32;
    v67 = v65 + 16416;
    while (1)
    {
      if (!v64)
LABEL_86:
        std::terminate();
      v68 = *v63;
      if (*(_BYTE *)(a2 + 192))
      {
        v69 = xgboost::common::Index::operator[](v119, *(_QWORD *)(*(_QWORD *)a2 + 8 * (v68 - *(_QWORD *)(a2 + 152))) + v62);
      }
      else
      {
        v70 = (uint64_t *)(*(_QWORD *)a2 + 8 * (v68 - *(_QWORD *)(a2 + 152)));
        v69 = xgboost::common::BinarySearchBin<xgboost::common::Index>(*v70, v70[1], v119, *(_DWORD *)(*v111 + 4 * v62), *(_DWORD *)(*v111 + 4 * (v62 + 1)));
      }
      if (v69 != -1)
      {
        v71 = *(float *)(*v116 + 4 * v69);
        if (v115 <= (int)v124)
          goto LABEL_86;
        xgboost::common::Span<float,18446744073709551615ul>::subspan(v120, *(_QWORD *)(v118 + 16 * (int)v124), *(_QWORD *)(v118 + 16 * (int)v124 + 8), v133);
        if (!v52)
        {
          v75 = v71 <= v126;
          goto LABEL_54;
        }
        if (v71 >= 0.0 && v71 < 16777000.0 && v71 < (float)(32 * v133[0]))
        {
          if (v133[0] <= (unint64_t)v71 >> 5)
          {
            v75 = 1;
          }
          else
          {
            v74 = (unint64_t)(int)v71 >> 5;
            if (v74 >= v133[0])
              goto LABEL_86;
            v75 = ((*(_DWORD *)(v133[1] + 4 * v74) >> ~(int)v71) & 1) == 0;
          }
          goto LABEL_54;
        }
      }
      v75 = HIDWORD(v125) >> 31;
LABEL_54:
      v76 = (_QWORD *)(v67 + 8 * v59);
      if (v75)
        v76 = (_QWORD *)(v66 + 8 * v60);
      *v76 = v68;
      v60 += v75;
      v59 += v75 ^ 1;
      ++v63;
      if (!--v64)
      {
        v55 = a1[3];
        v57 = a1[6];
        v56 = *(_QWORD *)(v55 + 8 * v110) + v109;
        v58 = (a1[7] - v57) >> 4;
        v41 = v106;
        goto LABEL_58;
      }
    }
  }
LABEL_63:
  dmlc::OMPException::Rethrow(&v137);
  std::mutex::~mutex((std::mutex *)&v138);
  std::exception_ptr::~exception_ptr(&v137);
  xgboost::common::PartitionBuilder<2048ul>::CalculateRowOffsets(a1);
  v135.__ptr_ = 0;
  v136.__m_.__sig = 850045863;
  memset(v136.__m_.__opaque, 0, sizeof(v136.__m_.__opaque));
  if (v121[1] != v121[0])
  {
    v78 = 0;
    v79 = ((char *)v121[1] - (char *)v121[0]) >> 4;
    do
    {
      v80 = xgboost::common::BlockedSpace2d::GetFirstDimension((xgboost::common::BlockedSpace2d *)v121, v78);
      v81 = xgboost::common::BlockedSpace2d::GetRange((xgboost::common::BlockedSpace2d *)v121, v78);
      v82 = *a3;
      v83 = *a3 + 88 * v80;
      v137.__ptr_ = *(void **)v83;
      v84 = *(_QWORD *)(v83 + 8);
      LODWORD(v139) = *(_DWORD *)(v83 + 16);
      v138 = v84;
      v140 = 0uLL;
      *((_QWORD *)&v139 + 1) = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)&v139 + 1, *(const void **)(v83 + 24), *(_QWORD *)(v83 + 32), (uint64_t)(*(_QWORD *)(v83 + 32) - *(_QWORD *)(v83 + 24)) >> 2);
      v85 = v82 + 88 * v80;
      v86 = *(_OWORD *)(v85 + 48);
      v87 = *(_OWORD *)(v85 + 64);
      v143 = *(_QWORD *)(v85 + 80);
      v141 = v86;
      v142 = v87;
      xgboost::common::PartitionBuilder<2048ul>::MergeToArray(a1, v80, v81, *(_QWORD *)(a1[13] + 24 * LODWORD(v137.__ptr_)));
      if (*((_QWORD *)&v139 + 1))
      {
        *(_QWORD *)&v140 = *((_QWORD *)&v139 + 1);
        operator delete(*((void **)&v139 + 1));
      }
      ++v78;
    }
    while (v79 != v78);
  }
  dmlc::OMPException::Rethrow(&v135);
  std::mutex::~mutex(&v136);
  std::exception_ptr::~exception_ptr(&v135);
  v88 = *a3;
  if (a3[1] != *a3)
  {
    v89 = 0;
    v90 = 0;
    v91 = 0;
    do
    {
      v92 = *(_DWORD *)(v88 + v89);
      v93 = (uint64_t *)(*a1 + (v90 >> 28));
      v94 = *v93;
      v95 = v93[1];
      v134 = v95 + *v93;
      if (v134 != (uint64_t)(*(_QWORD *)(a1[13] + 24 * v92 + 8) - *(_QWORD *)(a1[13] + 24 * v92)) >> 3)
      {
        dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v135);
        if (v135.__ptr_)
        {
          Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v134);
          dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/updater_approx.h");
          v97 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v134);
          v98 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"Check failed: ", 14);
          v99 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)"n_left + n_right == row_set_collection_[nidx].Size()", 52);
          v100 = *((char *)v135.__ptr_ + 23);
          v101 = v100 >= 0 ? v135.__ptr_ : *(void **)v135.__ptr_;
          v102 = v100 >= 0 ? *((unsigned __int8 *)v135.__ptr_ + 23) : *((_QWORD *)v135.__ptr_ + 1);
          v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)v101, v102);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)": ", 2);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v134);
          ptr = v135.__ptr_;
          v135.__ptr_ = 0;
          if (ptr)
            std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v135, (uint64_t)ptr);
        }
      }
      v105 = a4[20] + 20 * (int)v92;
      xgboost::common::RowSetCollection::AddSplit((xgboost::common::RowSetCollection *)(a1 + 10), v92, *(_DWORD *)(v105 + 4), *(_DWORD *)(v105 + 8), v94, v95);
      ++v91;
      v88 = *a3;
      v90 += 0x100000000;
      v89 += 88;
    }
    while (v91 < 0x2E8BA2E8BA2E8BA3 * ((a3[1] - *a3) >> 3));
  }
  if (v122[1])
  {
    *(void **)&v123 = v122[1];
    operator delete(v122[1]);
  }
  if (v121[0])
  {
    v121[1] = v121[0];
    operator delete(v121[0]);
  }
}

void sub_220EE1AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::mutex *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,std::exception_ptr a51,std::exception_ptr a52)
{
  xgboost::common::Index::~Index((xgboost::common::Index *)&a31);
  _Unwind_Resume(a1);
}

uint64_t *xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator++(uint64_t *a1)
{
  uint64_t v2;
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  char v7;

  v2 = *a1;
  if (!v2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/data.h");
    v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: impl_ != nullptr", 30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
    v2 = *a1;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return a1;
}

void sub_220EE1D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  int i;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  float v50;
  float v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  _DWORD *v55;
  unsigned int v56;
  float *v57;
  float v58;
  float v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  std::string *Entry;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD v69[8];
  __int128 v70[3];
  _QWORD v71[3];
  void *v72[3];
  void *__p;
  void *v74;
  _QWORD v75[4];

  std::vector<std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>::vector(v75, 0x2E8BA2E8BA2E8BA3 * ((a6[1] - *a6) >> 3));
  v10 = a6[1];
  if (v10 == *a6)
  {
    v19 = a6[1];
  }
  else
  {
    v11 = 0;
    v10 = *a6;
    do
    {
      v12 = *(_DWORD *)(v10 + 88 * v11);
      v13 = *(_QWORD *)(a5 + 160);
      v14 = *(_DWORD *)(v13 + 20 * v12);
      if (v14 == -1)
      {
        v15 = 0;
      }
      else
      {
        v15 = 0;
        do
        {
          ++v15;
          v14 = *(_DWORD *)(v13 + 20 * (v14 & 0x7FFFFFFF));
        }
        while (v14 != -1);
      }
      xgboost::common::ColumnSampler::GetFeatureSet(*(xgboost::common::ColumnSampler **)(a1 + 136), v15, (uint64_t)v70);
      std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>::operator=[abi:ne180100](v75[0] + 16 * v11, v70);
      v16 = (std::__shared_weak_count *)*((_QWORD *)&v70[0] + 1);
      if (*((_QWORD *)&v70[0] + 1))
      {
        v17 = (unint64_t *)(*((_QWORD *)&v70[0] + 1) + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      ++v11;
      v10 = *a6;
      v19 = a6[1];
    }
    while (v11 < 0x2E8BA2E8BA2E8BA3 * ((v19 - *a6) >> 3));
  }
  v20 = v75[0];
  if (v75[0] == v75[1])
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v70);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/hist/evaluate_splits.h");
    v65 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v70);
    v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"Check failed: !features.empty()", 31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v70);
    v20 = v75[0];
    v10 = *a6;
    v19 = a6[1];
  }
  v21 = ((uint64_t)(*(_QWORD *)(**(_QWORD **)v20 + 8) - ***(_QWORD ***)v20) >> 2)
      / (unint64_t)*(int *)(a1 + 184);
  if (v21 <= 1)
    v22 = 1;
  else
    v22 = v21;
  xgboost::common::BlockedSpace2d::BlockedSpace2d<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long)#1}>((xgboost::common::BlockedSpace2d *)v72, 0x2E8BA2E8BA2E8BA3 * ((v19 - v10) >> 3), v75, v22);
  std::vector<xgboost::tree::CPUExpandEntry>::vector(v71, 0x2E8BA2E8BA2E8BA3 * ((a6[1] - *a6) >> 3) * *(int *)(a1 + 184));
  v24 = *a6;
  v23 = a6[1];
  if (v23 != *a6)
  {
    v25 = 0;
    LODWORD(v26) = *(_DWORD *)(a1 + 184);
    do
    {
      if ((int)v26 >= 1)
      {
        v27 = 0;
        do
        {
          v28 = *a6;
          v29 = *a6 + 88 * v25;
          v30 = v27 + v25 * (int)v26;
          v31 = v71[0];
          v32 = v71[0] + 88 * v30;
          *(_QWORD *)v32 = *(_QWORD *)v29;
          v33 = *(_QWORD *)(v29 + 8);
          *(_DWORD *)(v32 + 16) = *(_DWORD *)(v29 + 16);
          *(_QWORD *)(v32 + 8) = v33;
          if (v32 != v29)
            std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(v31 + 88 * v30 + 24), *(char **)(v28 + 88 * v25 + 24), *(_QWORD *)(v28 + 88 * v25 + 32), (uint64_t)(*(_QWORD *)(v28 + 88 * v25 + 32) - *(_QWORD *)(v28 + 88 * v25 + 24)) >> 2);
          v34 = v31 + 88 * v30;
          v35 = v28 + 88 * v25;
          v36 = *(_OWORD *)(v35 + 48);
          v37 = *(_OWORD *)(v35 + 64);
          *(_QWORD *)(v34 + 80) = *(_QWORD *)(v35 + 80);
          *(_OWORD *)(v34 + 48) = v36;
          *(_OWORD *)(v34 + 64) = v37;
          ++v27;
          v26 = *(int *)(a1 + 184);
        }
        while (v27 < v26);
        v24 = *a6;
        v23 = a6[1];
      }
      ++v25;
    }
    while (v25 < 0x2E8BA2E8BA2E8BA3 * ((v23 - v24) >> 3));
  }
  xgboost::tree::TreeEvaluator::GetEvaluator<xgboost::tree::TrainParam>((uint64_t **)(a1 + 152), (uint64_t)v70);
  v38 = *(_QWORD *)(a3 + 16);
  v39 = *(_DWORD *)(a1 + 184);
  v69[0] = v71;
  v69[1] = a1;
  v69[2] = a2;
  v69[3] = v75;
  v69[4] = a4;
  v69[5] = v38;
  v69[6] = a3;
  v69[7] = v70;
  xgboost::common::ParallelFor2d<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(v72, v39, (uint64_t)v69);
  v41 = *a6;
  v40 = a6[1];
  if (v40 == *a6)
    goto LABEL_45;
  v42 = 0;
  v43 = 0;
  v44 = *(_DWORD *)(a1 + 184);
  do
  {
    if (v44 < 1)
      goto LABEL_44;
    for (i = 0; i < v44; ++i)
    {
      v46 = i + v43 * v44;
      v47 = v71[0];
      v48 = v71[0] + 88 * v46;
      v50 = *(float *)(v48 + 8);
      v49 = v48 + 8;
      v51 = v50;
      if (fabsf(v50) == INFINITY)
        continue;
      v52 = *a6;
      v53 = *a6 + 88 * v42;
      v54 = *(_DWORD *)(v49 + 4);
      v55 = (_DWORD *)(v53 + 12);
      v56 = *(_DWORD *)(v53 + 12) & 0x7FFFFFFF;
      v58 = *(float *)(v53 + 8);
      v57 = (float *)(v53 + 8);
      v59 = v58;
      if (v56 <= (v54 & 0x7FFFFFFFu))
      {
        if (v59 >= v51)
          continue;
      }
      else if (v59 > v51)
      {
        continue;
      }
      *v57 = v51;
      *v55 = v54;
      v60 = v47 + 88 * v46;
      v61 = v52 + 88 * v42;
      *(_DWORD *)(v61 + 16) = *(_DWORD *)(v60 + 16);
      *(_BYTE *)(v61 + 48) = *(_BYTE *)(v60 + 48);
      if (v57 != (float *)v49)
        std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(v52 + 88 * v42 + 24), *(char **)(v47 + 88 * v46 + 24), *(_QWORD *)(v47 + 88 * v46 + 32), (uint64_t)(*(_QWORD *)(v47 + 88 * v46 + 32) - *(_QWORD *)(v47 + 88 * v46 + 24)) >> 2);
      v62 = v47 + 88 * v46;
      v63 = v52 + 88 * v42;
      *(_OWORD *)(v63 + 56) = *(_OWORD *)(v62 + 56);
      *(_OWORD *)(v63 + 72) = *(_OWORD *)(v62 + 72);
      v44 = *(_DWORD *)(a1 + 184);
    }
    v41 = *a6;
    v40 = a6[1];
LABEL_44:
    v42 = ++v43;
  }
  while (0x2E8BA2E8BA2E8BA3 * ((v40 - v41) >> 3) > (unint64_t)v43);
LABEL_45:
  *(_QWORD *)&v70[0] = v71;
  std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)v70);
  if (__p)
  {
    v74 = __p;
    operator delete(__p);
  }
  if (v72[0])
  {
    v72[1] = v72[0];
    operator delete(v72[0]);
  }
  *(_QWORD *)&v70[0] = v75;
  std::vector<std::shared_ptr<xgboost::DMatrix>>::__destroy_vector::operator()[abi:ne180100]((void ***)v70);
}

void sub_220EE2218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  uint64_t v19;

  a19 = (void **)(v19 - 112);
  std::vector<std::shared_ptr<xgboost::DMatrix>>::__destroy_vector::operator()[abi:ne180100](&a19);
  _Unwind_Resume(a1);
}

_QWORD *xgboost::tree::Driver<xgboost::tree::CPUExpandEntry>::Push<std::__wrap_iter<xgboost::tree::CPUExpandEntry*>>(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (a2 != a3)
  {
    v4 = a2;
    v5 = result;
    v6 = result + 1;
    v7 = (uint64_t)(result + 4);
    do
    {
      if (*(float *)(v4 + 8) > 0.000001)
      {
        v8 = v5[2];
        if (v8 >= v5[3])
        {
          v9 = std::vector<xgboost::tree::CPUExpandEntry>::__push_back_slow_path<xgboost::tree::CPUExpandEntry const&>(v6, v4);
        }
        else
        {
          std::vector<xgboost::tree::CPUExpandEntry>::__construct_one_at_end[abi:ne180100]<xgboost::tree::CPUExpandEntry const&>((uint64_t)v6, v4);
          v9 = v8 + 88;
        }
        v5[2] = v9;
        v10 = v5[1];
        std::__function::__value_func<xgboost::ObjFunction * ()(void)>::__value_func[abi:ne180100]((uint64_t)v13, v7);
        v11.n128_f64[0] = std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(xgboost::tree::CPUExpandEntry,xgboost::tree::CPUExpandEntry)> &,std::__wrap_iter<xgboost::tree::CPUExpandEntry*>>(v10, v9, (uint64_t)v13, 0x2E8BA2E8BA2E8BA3 * ((v9 - v10) >> 3));
        result = v14;
        if (v14 == v13)
        {
          result = v13;
          v12 = 4;
          goto LABEL_11;
        }
        if (v14)
        {
          v12 = 5;
LABEL_11:
          result = (_QWORD *)(*(uint64_t (**)(__n128))(*result + 8 * v12))(v11);
        }
      }
      v4 += 88;
    }
    while (v4 != a3);
  }
  return result;
}

void sub_220EE23CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::tree::Driver<xgboost::tree::CPUExpandEntry>::~Driver(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v6;

  v2 = (_QWORD *)(a1 + 32);
  v3 = *(_QWORD **)(a1 + 56);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  v6 = (void **)(a1 + 8);
  std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100](&v6);
  return a1;
}

void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::Reset(uint64_t a1, unsigned int a2, uint64_t a3, int a4, uint64_t a5, char a6)
{
  std::string *Entry;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;

  v22 = 1;
  v23 = a4;
  if (a4 < 1)
  {
    dmlc::LogCheckFormat<int,int>(&v21);
    if (v21)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v23);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/hist/histogram.h");
      v13 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v23);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Check failed: ", 14);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"n_threads >= 1", 14);
      v16 = *(char *)(v21 + 23);
      v17 = v16 >= 0 ? v21 : *(_QWORD *)v21;
      v18 = v16 >= 0 ? *(unsigned __int8 *)(v21 + 23) : *(_QWORD *)(v21 + 8);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v23);
      v20 = v21;
      v21 = 0;
      if (v20)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v21, v20);
    }
  }
  *(_DWORD *)(a1 + 392) = a4;
  *(_QWORD *)(a1 + 400) = a5;
  *(_QWORD *)(a1 + 352) = *(_QWORD *)a3;
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 376) = *(_OWORD *)(a3 + 24);
  if (*(_DWORD *)a1 != a2)
  {
    *(_DWORD *)a1 = a2;
    std::vector<std::vector<unsigned long>>::__clear[abi:ne180100]((uint64_t *)(a1 + 16));
  }
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 4) = 0;
  if (*(_DWORD *)(a1 + 64) != a2)
  {
    *(_DWORD *)(a1 + 64) = a2;
    std::vector<std::vector<unsigned long>>::__clear[abi:ne180100]((uint64_t *)(a1 + 80));
  }
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
  *(_DWORD *)(a1 + 68) = 0;
  xgboost::common::ParallelGHistBuilder<float>::Init(a1 + 136, a2);
  *(_DWORD *)(a1 + 128) = a2;
  *(_BYTE *)(a1 + 408) = a6;
}

void sub_220EE2600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11)
{
  uint64_t v12;

  v12 = a9;
  a9 = 0;
  if (v12)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a9, v12);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<xgboost::tree::ApproxRowPartitioner>::__emplace_back_slow_path<unsigned long,unsigned long const&>(int64x2_t *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64x2_t v18;
  char *v19;
  char *v21;
  int64x2_t v22;
  char *v23;
  int64x2_t *v24;

  v3 = 0xF0F0F0F0F0F0F0F1 * ((a1->i64[1] - a1->i64[0]) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x1E1E1E1E1E1E1E1)
    std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_length_error[abi:ne180100]();
  if (0xE1E1E1E1E1E1E1E2 * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v4)
    v4 = 0xE1E1E1E1E1E1E1E2 * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  if (0xF0F0F0F0F0F0F0F1 * ((a1[1].i64[0] - a1->i64[0]) >> 3) >= 0xF0F0F0F0F0F0F0)
    v8 = 0x1E1E1E1E1E1E1E1;
  else
    v8 = v4;
  v24 = a1 + 1;
  if (v8)
  {
    if (v8 > 0x1E1E1E1E1E1E1E1)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v9 = (char *)operator new(136 * v8);
  }
  else
  {
    v9 = 0;
  }
  v21 = v9;
  v22.i64[0] = (uint64_t)&v9[136 * v3];
  v23 = &v9[136 * v8];
  xgboost::tree::ApproxRowPartitioner::ApproxRowPartitioner((xgboost::tree::ApproxRowPartitioner *)v22.i64[0], a2, a3);
  v10 = v22.i64[0];
  v11 = v22.i64[0] + 136;
  v22.i64[1] = v22.i64[0] + 136;
  v13 = a1->i64[0];
  v12 = a1->u64[1];
  if (v12 == a1->i64[0])
  {
    v18 = vdupq_n_s64(v12);
  }
  else
  {
    v14 = 0;
    do
    {
      v15 = v10 + v14;
      v16 = v12 + v14;
      *(_QWORD *)(v15 - 136) = 0;
      *(_QWORD *)(v15 - 128) = 0;
      *(_QWORD *)(v15 - 120) = 0;
      *(_OWORD *)(v15 - 136) = *(_OWORD *)(v12 + v14 - 136);
      *(_QWORD *)(v15 - 120) = *(_QWORD *)(v12 + v14 - 120);
      *(_QWORD *)(v16 - 136) = 0;
      *(_QWORD *)(v16 - 128) = 0;
      *(_QWORD *)(v16 - 120) = 0;
      *(_QWORD *)(v15 - 112) = 0;
      *(_QWORD *)(v15 - 104) = 0;
      *(_QWORD *)(v15 - 96) = 0;
      *(_OWORD *)(v15 - 112) = *(_OWORD *)(v12 + v14 - 112);
      *(_QWORD *)(v15 - 96) = *(_QWORD *)(v12 + v14 - 96);
      *(_QWORD *)(v16 - 112) = 0;
      *(_QWORD *)(v16 - 104) = 0;
      *(_QWORD *)(v16 - 96) = 0;
      *(_QWORD *)(v15 - 88) = 0;
      *(_QWORD *)(v15 - 80) = 0;
      *(_QWORD *)(v15 - 72) = 0;
      *(_OWORD *)(v15 - 88) = *(_OWORD *)(v12 + v14 - 88);
      *(_QWORD *)(v15 - 72) = *(_QWORD *)(v12 + v14 - 72);
      *(_QWORD *)(v16 - 80) = 0;
      *(_QWORD *)(v16 - 72) = 0;
      *(_QWORD *)(v16 - 88) = 0;
      v17 = *(_QWORD *)(v12 + v14 - 64);
      *(_QWORD *)(v15 - 48) = 0;
      *(_QWORD *)(v15 - 40) = 0;
      *(_QWORD *)(v15 - 64) = v17;
      *(_QWORD *)(v15 - 56) = 0;
      *(_OWORD *)(v15 - 56) = *(_OWORD *)(v12 + v14 - 56);
      *(_QWORD *)(v15 - 40) = *(_QWORD *)(v12 + v14 - 40);
      *(_QWORD *)(v16 - 56) = 0;
      *(_QWORD *)(v16 - 48) = 0;
      *(_QWORD *)(v16 - 40) = 0;
      *(_QWORD *)(v15 - 24) = 0;
      *(_QWORD *)(v15 - 16) = 0;
      *(_QWORD *)(v15 - 32) = 0;
      *(_OWORD *)(v15 - 32) = *(_OWORD *)(v12 + v14 - 32);
      *(_QWORD *)(v15 - 16) = *(_QWORD *)(v12 + v14 - 16);
      *(_QWORD *)(v16 - 32) = 0;
      *(_QWORD *)(v16 - 24) = 0;
      *(_QWORD *)(v16 - 16) = 0;
      *(_QWORD *)(v15 - 8) = *(_QWORD *)(v12 + v14 - 8);
      v14 -= 136;
    }
    while (v12 + v14 != v13);
    v18 = *a1;
    v11 = v22.i64[1];
    v10 += v14;
  }
  a1->i64[0] = v10;
  a1->i64[1] = v11;
  v22 = v18;
  v19 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v23;
  v23 = v19;
  v21 = (char *)v18.i64[0];
  std::__split_buffer<xgboost::tree::ApproxRowPartitioner>::~__split_buffer((uint64_t)&v21);
  return v11;
}

void sub_220EE2838(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<xgboost::tree::ApproxRowPartitioner>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

xgboost::tree::ApproxRowPartitioner *xgboost::tree::ApproxRowPartitioner::ApproxRowPartitioner(xgboost::tree::ApproxRowPartitioner *this, unint64_t a2, uint64_t a3)
{
  xgboost::common::RowSetCollection *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  *((_OWORD *)this + 5) = 0u;
  v4 = (xgboost::tree::ApproxRowPartitioner *)((char *)this + 80);
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *((_QWORD *)this + 16) = a3;
  std::vector<unsigned long>::resize((uint64_t)this + 80, a2);
  v5 = (_QWORD *)*((_QWORD *)this + 10);
  v6 = (_QWORD *)*((_QWORD *)this + 11);
  if (v5 != v6)
  {
    v7 = *((_QWORD *)this + 16);
    do
      *v5++ = v7++;
    while (v5 != v6);
  }
  xgboost::common::RowSetCollection::Init(v4);
  return this;
}

void sub_220EE28C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  xgboost::common::Index *v2;

  xgboost::common::Index::~Index(v2);
  xgboost::common::PartitionBuilder<2048ul>::~PartitionBuilder(v1);
  _Unwind_Resume(a1);
}

void xgboost::common::RowSetCollection::Init(xgboost::common::RowSetCollection *this)
{
  char **v2;
  uint64_t v3;
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  __int128 v33;
  char *v34;
  __int128 v35;
  unint64_t v36;
  uint64_t v37;

  v2 = (char **)((char *)this + 24);
  v3 = *((_QWORD *)this + 4) - *((_QWORD *)this + 3);
  v36 = 0xAAAAAAAAAAAAAAABLL * (v3 >> 3);
  if (v3)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned int>(&v37);
    if (v37)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v36);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/../common/../data/../common/row_set.h");
      v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v36);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: ", 14);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"elem_of_each_node_.size() == 0U", 31);
      v8 = *(char *)(v37 + 23);
      v9 = v8 >= 0 ? v37 : *(_QWORD *)v37;
      v10 = v8 >= 0 ? *(unsigned __int8 *)(v37 + 23) : *(_QWORD *)(v37 + 8);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v36);
      v12 = v37;
      v37 = 0;
      if (v12)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v37, v12);
    }
  }
  v14 = *(_QWORD *)this;
  v13 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this == v13)
  {
    v18 = *((_QWORD *)this + 5);
    v16 = *((_QWORD *)this + 4);
    if (v16 < v18)
    {
      v17 = (char *)(v16 + 24);
      *(_QWORD *)v16 = 0;
      *(_QWORD *)(v16 + 8) = 0;
      goto LABEL_16;
    }
    v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - (_QWORD)*v2) >> 3);
    v25 = v24 + 1;
    if (v24 + 1 <= 0xAAAAAAAAAAAAAAALL)
    {
      v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - (_QWORD)*v2) >> 3);
      if (2 * v26 > v25)
        v25 = 2 * v26;
      if (v26 >= 0x555555555555555)
        v27 = 0xAAAAAAAAAAAAAAALL;
      else
        v27 = v25;
      if (v27)
        v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<unsigned long>>>((uint64_t)this + 40, v27);
      else
        v28 = 0;
      v29 = &v28[24 * v24];
      v30 = &v28[24 * v27];
      v17 = v29 + 24;
      *(_QWORD *)v29 = 0;
      *((_QWORD *)v29 + 1) = 0;
      *((_DWORD *)v29 + 4) = 0;
      v34 = (char *)*((_QWORD *)this + 3);
      v31 = (char *)*((_QWORD *)this + 4);
      if (v31 == v34)
        goto LABEL_41;
      do
      {
        v35 = *(_OWORD *)(v31 - 24);
        *((_DWORD *)v29 - 2) = *((_DWORD *)v31 - 2);
        *(_OWORD *)(v29 - 24) = v35;
        v29 -= 24;
        v31 -= 24;
      }
      while (v31 != v34);
      goto LABEL_40;
    }
LABEL_44:
    std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_length_error[abi:ne180100]();
  }
  v15 = *((_QWORD *)this + 5);
  v16 = *((_QWORD *)this + 4);
  if (v16 < v15)
  {
    *(_QWORD *)v16 = v14;
    *(_QWORD *)(v16 + 8) = v13;
    v17 = (char *)(v16 + 24);
LABEL_16:
    *(_DWORD *)(v16 + 16) = 0;
    goto LABEL_43;
  }
  v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - (_QWORD)*v2) >> 3);
  v20 = v19 + 1;
  if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_44;
  v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (_QWORD)*v2) >> 3);
  if (2 * v21 > v20)
    v20 = 2 * v21;
  if (v21 >= 0x555555555555555)
    v22 = 0xAAAAAAAAAAAAAAALL;
  else
    v22 = v20;
  if (v22)
    v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<unsigned long>>>((uint64_t)this + 40, v22);
  else
    v23 = 0;
  v29 = &v23[24 * v19];
  v30 = &v23[24 * v22];
  *(_QWORD *)v29 = v14;
  *((_QWORD *)v29 + 1) = v13;
  *((_DWORD *)v29 + 4) = 0;
  v17 = v29 + 24;
  v32 = (char *)*((_QWORD *)this + 3);
  v31 = (char *)*((_QWORD *)this + 4);
  if (v31 == v32)
    goto LABEL_41;
  do
  {
    v33 = *(_OWORD *)(v31 - 24);
    *((_DWORD *)v29 - 2) = *((_DWORD *)v31 - 2);
    *(_OWORD *)(v29 - 24) = v33;
    v29 -= 24;
    v31 -= 24;
  }
  while (v31 != v32);
LABEL_40:
  v31 = *v2;
LABEL_41:
  *((_QWORD *)this + 3) = v29;
  *((_QWORD *)this + 4) = v17;
  *((_QWORD *)this + 5) = v30;
  if (v31)
    operator delete(v31);
LABEL_43:
  *((_QWORD *)this + 4) = v17;
}

void sub_220EE2BA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<xgboost::tree::ApproxRowPartitioner>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 136;
    std::allocator<xgboost::tree::ApproxRowPartitioner>::destroy[abi:ne180100](i - 136);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void xgboost::common::ParallelGHistBuilder<float>::Init(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)a1 != a2)
  {
    if (*(_DWORD *)(a1 + 24) != (_DWORD)a2)
    {
      *(_DWORD *)(a1 + 24) = a2;
      std::vector<std::vector<unsigned long>>::__clear[abi:ne180100]((uint64_t *)(a1 + 40));
    }
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 28) = 0;
    *(_QWORD *)a1 = a2;
  }
}

_DWORD *xgboost::tree::Driver<xgboost::tree::CPUExpandEntry>::Driver(_DWORD *a1, int a2)
{
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  *a1 = a2;
  v3 = a1 + 2;
  v4 = xgboost::tree::LossGuide<xgboost::tree::CPUExpandEntry>;
  if (!a2)
    v4 = xgboost::tree::DepthWise<xgboost::tree::CPUExpandEntry>;
  v8[0] = &unk_24E6BBC18;
  v8[1] = v4;
  v9 = v8;
  std::priority_queue<xgboost::tree::CPUExpandEntry,std::vector<xgboost::tree::CPUExpandEntry>,std::function<BOOL ()(xgboost::tree::CPUExpandEntry,xgboost::tree::CPUExpandEntry)>>::priority_queue[abi:ne180100](v3, (uint64_t)v8);
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_7;
  }
  if (v9)
  {
    v6 = 5;
LABEL_7:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

void sub_220EE2D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

BOOL xgboost::tree::DepthWise<xgboost::tree::CPUExpandEntry>(_DWORD *a1, _DWORD *a2)
{
  return *a1 > *a2;
}

BOOL xgboost::tree::LossGuide<xgboost::tree::CPUExpandEntry>(uint64_t a1, uint64_t a2)
{
  float v2;
  float v3;

  v2 = *(float *)(a1 + 8);
  v3 = *(float *)(a2 + 8);
  if (v2 == v3)
    return *(_DWORD *)a1 > *(_DWORD *)a2;
  else
    return v2 < v3;
}

void std::__function::__func<BOOL (*)(xgboost::tree::CPUExpandEntry const&,xgboost::tree::CPUExpandEntry const&),std::allocator<BOOL (*)(xgboost::tree::CPUExpandEntry const&,xgboost::tree::CPUExpandEntry const&)>,BOOL ()(xgboost::tree::CPUExpandEntry,xgboost::tree::CPUExpandEntry)>::~__func()
{
  JUMPOUT(0x227667068);
}

_QWORD *std::__function::__func<BOOL (*)(xgboost::tree::CPUExpandEntry const&,xgboost::tree::CPUExpandEntry const&),std::allocator<BOOL (*)(xgboost::tree::CPUExpandEntry const&,xgboost::tree::CPUExpandEntry const&)>,BOOL ()(xgboost::tree::CPUExpandEntry,xgboost::tree::CPUExpandEntry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_24E6BBC18;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(xgboost::tree::CPUExpandEntry const&,xgboost::tree::CPUExpandEntry const&),std::allocator<BOOL (*)(xgboost::tree::CPUExpandEntry const&,xgboost::tree::CPUExpandEntry const&)>,BOOL ()(xgboost::tree::CPUExpandEntry,xgboost::tree::CPUExpandEntry)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_24E6BBC18;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(xgboost::tree::CPUExpandEntry const&,xgboost::tree::CPUExpandEntry const&),std::allocator<BOOL (*)(xgboost::tree::CPUExpandEntry const&,xgboost::tree::CPUExpandEntry const&)>,BOOL ()(xgboost::tree::CPUExpandEntry,xgboost::tree::CPUExpandEntry)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(a2, a3);
}

uint64_t std::__function::__func<BOOL (*)(xgboost::tree::CPUExpandEntry const&,xgboost::tree::CPUExpandEntry const&),std::allocator<BOOL (*)(xgboost::tree::CPUExpandEntry const&,xgboost::tree::CPUExpandEntry const&)>,BOOL ()(xgboost::tree::CPUExpandEntry,xgboost::tree::CPUExpandEntry)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BOOL (*)(xgboost::tree::CPUExpandEntry const&,xgboost::tree::CPUExpandEntry const&),std::allocator<BOOL (*)(xgboost::tree::CPUExpandEntry const&,xgboost::tree::CPUExpandEntry const&)>,BOOL ()(xgboost::tree::CPUExpandEntry,xgboost::tree::CPUExpandEntry)>::target_type()
{
}

_QWORD *std::priority_queue<xgboost::tree::CPUExpandEntry,std::vector<xgboost::tree::CPUExpandEntry>,std::function<BOOL ()(xgboost::tree::CPUExpandEntry,xgboost::tree::CPUExpandEntry)>>::priority_queue[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::__function::__value_func<xgboost::ObjFunction * ()(void)>::__value_func[abi:ne180100]((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_220EE2EAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

double std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(xgboost::tree::CPUExpandEntry,xgboost::tree::CPUExpandEntry)> &,std::__wrap_iter<xgboost::tree::CPUExpandEntry*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  _QWORD *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  double result;
  const void *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char v34;
  void *v35;
  __int128 v36;
  __int128 v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const void *v42;
  _QWORD v44[2];
  int v45;
  void *v46;
  void *v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  _QWORD v52[2];
  int v53;
  void *v54;
  void *v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  _QWORD v63[2];
  int v64;
  void *__p;
  void *v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  _QWORD v71[2];
  int v72;
  void *v73;
  void *v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;

  v81 = *MEMORY[0x24BDAC8D0];
  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v7 = v4 >> 1;
    v8 = a1 + 88 * (v4 >> 1);
    v71[0] = *(_QWORD *)v8;
    v9 = *(_QWORD *)(v8 + 8);
    v72 = *(_DWORD *)(v8 + 16);
    v71[1] = v9;
    v74 = 0;
    v75 = 0;
    v73 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v73, *(const void **)(v8 + 24), *(_QWORD *)(v8 + 32), (uint64_t)(*(_QWORD *)(v8 + 32) - *(_QWORD *)(v8 + 24)) >> 2);
    v10 = a1 + 88 * v7;
    v11 = *(_OWORD *)(v10 + 48);
    v12 = *(_OWORD *)(v10 + 64);
    v78 = *(_QWORD *)(v10 + 80);
    v76 = v11;
    v77 = v12;
    v13 = (_QWORD *)(a2 - 88);
    v63[0] = *(_QWORD *)(a2 - 88);
    v14 = *(_QWORD *)(a2 - 80);
    v64 = *(_DWORD *)(a2 - 72);
    v63[1] = v14;
    v66 = 0;
    v67 = 0;
    __p = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(a2 - 64), *(_QWORD *)(a2 - 56), (uint64_t)(*(_QWORD *)(a2 - 56) - *(_QWORD *)(a2 - 64)) >> 2);
    v15 = *(_OWORD *)(a2 - 40);
    v16 = *(_OWORD *)(a2 - 24);
    v70 = *(_QWORD *)(a2 - 8);
    v68 = v15;
    v69 = v16;
    v17 = *(_QWORD *)(a3 + 24);
    if (!v17)
      std::__throw_bad_function_call[abi:ne180100]();
    v18 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, v71, v63);
    if (__p)
    {
      v66 = __p;
      operator delete(__p);
    }
    if (v73)
    {
      v74 = v73;
      operator delete(v73);
    }
    if (v18)
    {
      v40 = a1;
      v41 = *(_QWORD *)(a2 - 88);
      v79 = *(_QWORD *)(a2 - 80);
      v80 = *(_DWORD *)(a2 - 72);
      v20 = *(const void **)(a2 - 64);
      v21 = *(_OWORD *)(a2 - 56);
      *(_QWORD *)(a2 - 64) = 0;
      *(_QWORD *)(a2 - 56) = 0;
      *(_QWORD *)(a2 - 48) = 0;
      v22 = *(_OWORD *)(a2 - 40);
      v23 = *(_OWORD *)(a2 - 24);
      v62 = *(_QWORD *)(a2 - 8);
      v37 = v21;
      v42 = v20;
      v39 = v21;
      v38 = (uint64_t)(v21 - (_QWORD)v20) >> 2;
      v60 = v22;
      v61 = v23;
      do
      {
        v24 = v13;
        v13 = (_QWORD *)v8;
        *v24 = *(_QWORD *)v8;
        v26 = v8 + 8;
        v25 = *(_QWORD *)(v8 + 8);
        *((_DWORD *)v24 + 4) = *(_DWORD *)(v8 + 16);
        v24[1] = v25;
        v27 = (_QWORD *)(v8 + 24);
        std::vector<float>::__move_assign((uint64_t)(v24 + 3), (__n128 *)(v8 + 24));
        v28 = *(_OWORD *)(v8 + 48);
        v29 = *(_OWORD *)(v8 + 64);
        v24[10] = *(_QWORD *)(v8 + 80);
        *((_OWORD *)v24 + 3) = v28;
        *((_OWORD *)v24 + 4) = v29;
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = v40 + 88 * v7;
        v52[0] = *(_QWORD *)v8;
        v30 = *(_QWORD *)(v8 + 8);
        v53 = *(_DWORD *)(v8 + 16);
        v52[1] = v30;
        v55 = 0;
        v56 = 0;
        v54 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v54, *(const void **)(v8 + 24), *(_QWORD *)(v8 + 32), (uint64_t)(*(_QWORD *)(v8 + 32) - *(_QWORD *)(v8 + 24)) >> 2);
        v31 = *(_OWORD *)(v8 + 48);
        v32 = *(_OWORD *)(v8 + 64);
        v59 = *(_QWORD *)(v8 + 80);
        v57 = v31;
        v58 = v32;
        v44[0] = v41;
        v44[1] = v79;
        v45 = v80;
        v47 = 0;
        v48 = 0;
        v46 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v46, v42, v39, v38);
        v49 = v60;
        v50 = v61;
        v51 = v62;
        v33 = *(_QWORD *)(a3 + 24);
        if (!v33)
          std::__throw_bad_function_call[abi:ne180100]();
        v34 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v33 + 48))(v33, v52, v44);
        if (v46)
        {
          v47 = v46;
          operator delete(v46);
        }
        if (v54)
        {
          v55 = v54;
          operator delete(v54);
        }
      }
      while ((v34 & 1) != 0);
      *v13 = v41;
      *(_QWORD *)v26 = v79;
      *(_DWORD *)(v26 + 8) = v80;
      v35 = (void *)v13[3];
      if (v35)
      {
        v13[4] = v35;
        operator delete(v35);
        *v27 = 0;
        v27[1] = 0;
        v27[2] = 0;
      }
      v13[3] = v42;
      *((_OWORD *)v13 + 2) = v37;
      result = *(double *)&v60;
      v36 = v61;
      *(_OWORD *)(v26 + 40) = v60;
      *(_OWORD *)(v26 + 56) = v36;
      *(_QWORD *)(v26 + 72) = v62;
    }
  }
  return result;
}

void sub_220EE3258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52)
{
  uint64_t v52;
  void *v54;

  v54 = *(void **)(v52 - 184);
  if (v54)
  {
    *(_QWORD *)(v52 - 176) = v54;
    operator delete(v54);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::tree::ConstructHistSpace<std::vector<xgboost::tree::ApproxRowPartitioner>>(xgboost::common::BlockedSpace2d *a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  int v28;
  void *__p;
  void *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  void *v35[3];

  v6 = 0x2E8BA2E8BA2E8BA3 * ((a3[1] - *a3) >> 3);
  v27[0] = 0;
  std::vector<unsigned long>::vector(v35, v6, v27);
  v7 = *a2;
  v26 = a2[1];
  if (*a2 != v26)
  {
    do
    {
      v9 = *a3;
      v8 = a3[1];
      if (*a3 != v8)
      {
        v10 = 0;
        do
        {
          v27[0] = *(_QWORD *)v9;
          v11 = *(_QWORD *)(v9 + 8);
          v28 = *(_DWORD *)(v9 + 16);
          v27[1] = v11;
          v30 = 0;
          v31 = 0;
          __p = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v9 + 24), *(_QWORD *)(v9 + 32), (uint64_t)(*(_QWORD *)(v9 + 32) - *(_QWORD *)(v9 + 24)) >> 2);
          v12 = *(_OWORD *)(v9 + 48);
          v13 = *(_OWORD *)(v9 + 64);
          v34 = *(_QWORD *)(v9 + 80);
          v32 = v12;
          v33 = v13;
          v14 = *(_QWORD *)(*(_QWORD *)(v7 + 104) + 24 * LODWORD(v27[0]) + 8)
              - *(_QWORD *)(*(_QWORD *)(v7 + 104) + 24 * LODWORD(v27[0]));
          if (*(_QWORD *)((char *)v35[0] + v10) <= (unint64_t)(v14 >> 3))
            v15 = v14 >> 3;
          else
            v15 = *(_QWORD *)((char *)v35[0] + v10);
          *(_QWORD *)((char *)v35[0] + v10) = v15;
          if (__p)
          {
            v30 = __p;
            operator delete(__p);
          }
          v10 += 8;
          v9 += 88;
        }
        while (v9 != v8);
      }
      v7 += 136;
    }
    while (v7 != v26);
  }
  v17 = *a3;
  v16 = a3[1];
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  v18 = v16 - v17;
  if (v18)
  {
    v19 = 0;
    v20 = 0x2E8BA2E8BA2E8BA3 * (v18 >> 3);
    do
    {
      v21 = *((_QWORD *)v35[0] + v19);
      if ((_BYTE)v21)
        v22 = (v21 >> 8) + 1;
      else
        v22 = v21 >> 8;
      if (v22)
      {
        v23 = 0;
        do
        {
          v24 = v23 + 256;
          if (v21 >= v23 + 256)
            v25 = v23 + 256;
          else
            v25 = v21;
          xgboost::common::BlockedSpace2d::AddBlock(a1, v19, v23, v25);
          v23 = v24;
          --v22;
        }
        while (v22);
      }
      ++v19;
    }
    while (v19 != v20);
  }
  if (v35[0])
  {
    v35[1] = v35[0];
    operator delete(v35[0]);
  }
}

void sub_220EE34BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  uint64_t v23;
  void *v25;
  void *v26;

  v25 = *(void **)(v23 + 24);
  if (v25)
  {
    *(_QWORD *)(v23 + 32) = v25;
    operator delete(v25);
  }
  v26 = *(void **)v23;
  if (*(_QWORD *)v23)
  {
    *(_QWORD *)(v23 + 8) = v26;
    operator delete(v26);
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::BuildHist(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int **a7, int **a8, uint64_t a9)
{
  void *v17;
  void **v18;
  std::string *Entry;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  void *v30[3];
  void *v31;
  void *v32;
  uint64_t v33;
  _QWORD v34[3];
  void *__p;
  void *v36;
  uint64_t v37;
  int v38;
  unsigned int v39;

  v38 = 0;
  v39 = 0x7FFFFFFF;
  if (!a2)
    xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::AddHistRows((unsigned int *)a1, &v39, &v38, a7, a8, a5);
  if (*(_BYTE *)(a4 + 192))
  {
    memset(v34, 0, sizeof(v34));
    std::vector<xgboost::common::Range1d>::__init_with_size[abi:ne180100]<xgboost::common::Range1d*,xgboost::common::Range1d*>(v34, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 4);
    __p = 0;
    v36 = 0;
    v37 = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(a3 + 24), *(_QWORD *)(a3 + 32), (uint64_t)(*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 3);
    xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<false>(a1, a2, (xgboost::common::BlockedSpace2d *)v34, a4, (uint64_t *)a7, a6, a9);
    if (__p)
    {
      v36 = __p;
      operator delete(__p);
    }
    v17 = (void *)v34[0];
    if (v34[0])
    {
      v18 = (void **)v34;
LABEL_12:
      v18[1] = v17;
      operator delete(v17);
    }
  }
  else
  {
    memset(v30, 0, sizeof(v30));
    std::vector<xgboost::common::Range1d>::__init_with_size[abi:ne180100]<xgboost::common::Range1d*,xgboost::common::Range1d*>(v30, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 4);
    v31 = 0;
    v32 = 0;
    v33 = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v31, *(const void **)(a3 + 24), *(_QWORD *)(a3 + 32), (uint64_t)(*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 3);
    xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<true>(a1, a2, (xgboost::common::BlockedSpace2d *)v30, a4, (uint64_t *)a7, a6, a9);
    if (v31)
    {
      v32 = v31;
      operator delete(v31);
    }
    v17 = v30[0];
    if (v30[0])
    {
      v18 = v30;
      goto LABEL_12;
    }
  }
  v28 = 1;
  if (!*(_QWORD *)(a1 + 400))
  {
    dmlc::LogCheckFormat<unsigned long,int>(&v29);
    if (v29)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v28);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/hist/histogram.h");
      v20 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v28);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Check failed: ", 14);
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"n_batches_ >= 1", 15);
      v23 = *(char *)(v29 + 23);
      v24 = v23 >= 0 ? v29 : *(_QWORD *)v29;
      v25 = v23 >= 0 ? *(unsigned __int8 *)(v29 + 23) : *(_QWORD *)(v29 + 8);
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v24, v25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v28);
      v27 = v29;
      v29 = 0;
      if (v27)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v29, v27);
    }
  }
  if (*(_QWORD *)(a1 + 400) - 1 == a2)
  {
    if (*(_BYTE *)(a1 + 408))
      xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed((unsigned int *)a1, a5, a7, a8, v39, v38);
    else
      xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::SyncHistogramLocal(a1, a5, a7, (uint64_t)a8);
  }
}

void sub_220EE3784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  xgboost::common::Index::~Index((xgboost::common::Index *)&__p);
  _Unwind_Resume(a1);
}

float xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::InitRoot(uint64_t a1, int8x16_t *a2)
{
  int8x16_t *v4;
  int8x16_t v5;
  float v6;
  float v7;
  uint64_t v8;
  int8x16_t v9;
  int8x16_t v11;
  _BYTE v12[56];

  std::vector<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry,std::allocator<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry>>::resize(a1 + 296, 1uLL);
  xgboost::tree::TreeEvaluator::GetEvaluator<xgboost::tree::TrainParam>((uint64_t **)(a1 + 152), (uint64_t)v12);
  v4 = *(int8x16_t **)(a1 + 296);
  *v4 = *a2;
  v11 = *v4;
  v6 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeight((uint64_t)v12, 0, (float *)a1, (double *)v11.i64, v11, v5);
  v7 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcGainGivenWeight((uint64_t)v12, (float *)a1, (double *)v11.i64, v6);
  v8 = *(_QWORD *)(a1 + 296);
  *(float *)(v8 + 16) = v7;
  return xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeight((uint64_t)v12, 0, (float *)a1, (double *)v11.i64, *(int8x16_t *)v8, v9);
}

char *std::vector<xgboost::tree::CPUExpandEntry>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x2E8BA2E8BA2E8BBLL)
    std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::io::FileInfo>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[88 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<xgboost::tree::CPUExpandEntry>,xgboost::tree::CPUExpandEntry const*,xgboost::tree::CPUExpandEntry const*,xgboost::tree::CPUExpandEntry*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a4;
  v14 = a4;
  v15 = a4;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)v4 = *(_QWORD *)v6;
      v7 = *(_QWORD *)(v6 + 8);
      v8 = *(_DWORD *)(v6 + 16);
      *(_QWORD *)(v4 + 24) = 0;
      *(_DWORD *)(v4 + 16) = v8;
      *(_QWORD *)(v4 + 8) = v7;
      *(_QWORD *)(v4 + 32) = 0;
      *(_QWORD *)(v4 + 40) = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)(v4 + 24), *(const void **)(v6 + 24), *(_QWORD *)(v6 + 32), (uint64_t)(*(_QWORD *)(v6 + 32) - *(_QWORD *)(v6 + 24)) >> 2);
      v9 = *(_OWORD *)(v6 + 48);
      v10 = *(_OWORD *)(v6 + 64);
      *(_QWORD *)(v4 + 80) = *(_QWORD *)(v6 + 80);
      *(_OWORD *)(v4 + 48) = v9;
      *(_OWORD *)(v4 + 64) = v10;
      v4 = v15 + 88;
      v15 += 88;
      v6 += 88;
    }
    while (v6 != a3);
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::tree::CPUExpandEntry>,xgboost::tree::CPUExpandEntry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v4;
}

void sub_220EE39B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::tree::CPUExpandEntry>,xgboost::tree::CPUExpandEntry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::tree::CPUExpandEntry>,xgboost::tree::CPUExpandEntry*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::tree::CPUExpandEntry>,xgboost::tree::CPUExpandEntry*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::tree::CPUExpandEntry>,xgboost::tree::CPUExpandEntry*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    v3 = *(void **)(v1 - 64);
    if (v3)
    {
      *(_QWORD *)(v1 - 56) = v3;
      operator delete(v3);
    }
    v1 -= 88;
  }
}

void std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<xgboost::tree::CPUExpandEntry>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<xgboost::tree::CPUExpandEntry>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 88)
  {
    v4 = *(void **)(i - 64);
    if (v4)
    {
      *(_QWORD *)(i - 56) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

char *xgboost::common::BlockedSpace2d::AddBlock(xgboost::common::BlockedSpace2d *this, uint64_t a2, unint64_t a3, unint64_t a4)
{
  char *v6;
  unint64_t v7;
  char *v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;

  v20 = a4;
  v21 = a3;
  v6 = (char *)this + 40;
  v7 = *((_QWORD *)this + 5);
  v8 = (char *)*((_QWORD *)this + 4);
  if ((unint64_t)v8 >= v7)
  {
    v10 = (char *)*((_QWORD *)this + 3);
    v11 = (v8 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v12 = v7 - (_QWORD)v10;
    v13 = (uint64_t)(v7 - (_QWORD)v10) >> 2;
    if (v13 <= v11 + 1)
      v13 = v11 + 1;
    if (v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
    {
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)v6, v14);
      v10 = (char *)*((_QWORD *)this + 3);
      v8 = (char *)*((_QWORD *)this + 4);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *(_QWORD *)v16 = a2;
    v9 = v16 + 8;
    while (v8 != v10)
    {
      v18 = *((_QWORD *)v8 - 1);
      v8 -= 8;
      *((_QWORD *)v16 - 1) = v18;
      v16 -= 8;
    }
    *((_QWORD *)this + 3) = v16;
    *((_QWORD *)this + 4) = v9;
    *((_QWORD *)this + 5) = v17;
    if (v10)
      operator delete(v10);
  }
  else
  {
    *(_QWORD *)v8 = a2;
    v9 = v8 + 8;
  }
  *((_QWORD *)this + 4) = v9;
  return std::vector<xgboost::common::Range1d>::emplace_back<unsigned long &,unsigned long &>((xgboost::common::Range1d **)this, &v21, &v20);
}

char *std::vector<xgboost::common::Range1d>::emplace_back<unsigned long &,unsigned long &>(xgboost::common::Range1d **a1, unint64_t *a2, unint64_t *a3)
{
  uint64_t v6;
  xgboost::common::Range1d *v7;
  xgboost::common::Range1d *v8;
  unint64_t v9;
  xgboost::common::Range1d *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  xgboost::common::Range1d *v18;
  xgboost::common::Range1d *v19;
  xgboost::common::Range1d *v20;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD *)(v6 - 8);
  if (v9 >= (unint64_t)v8)
  {
    v11 = (uint64_t)(v9 - (_QWORD)*a1) >> 4;
    if ((unint64_t)(v11 + 1) >> 60)
      std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_length_error[abi:ne180100]();
    v12 = v7 - *a1;
    v13 = v12 >> 3;
    if (v12 >> 3 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
    {
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WQSummary<float,float>::Entry>>(v6, v14);
      v17 = v16;
    }
    else
    {
      v15 = 0;
      v17 = 0;
    }
    v18 = xgboost::common::Range1d::Range1d((xgboost::common::Range1d *)&v15[16 * v11], *a2, *a3);
    v10 = (xgboost::common::Range1d *)((char *)v18 + 16);
    v20 = *a1;
    v19 = a1[1];
    if (v19 != *a1)
    {
      do
      {
        *((_OWORD *)v18 - 1) = *((_OWORD *)v19 - 1);
        v18 = (xgboost::common::Range1d *)((char *)v18 - 16);
        v19 = (xgboost::common::Range1d *)((char *)v19 - 16);
      }
      while (v19 != v20);
      v19 = *a1;
    }
    *a1 = v18;
    a1[1] = v10;
    a1[2] = (xgboost::common::Range1d *)&v15[16 * v17];
    if (v19)
      operator delete(v19);
  }
  else
  {
    xgboost::common::Range1d::Range1d(*(xgboost::common::Range1d **)(v6 - 8), *a2, *a3);
    v10 = (xgboost::common::Range1d *)(v9 + 16);
    a1[1] = (xgboost::common::Range1d *)(v9 + 16);
  }
  a1[1] = v10;
  return (char *)v10 - 16;
}

void sub_220EE3CE4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

xgboost::common::Range1d *xgboost::common::Range1d::Range1d(xgboost::common::Range1d *this, unint64_t a2, unint64_t a3)
{
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char v14;
  uint64_t v15[3];

  v15[1] = a3;
  v15[2] = a2;
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  if (a2 >= a3)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(v15);
    if (v15[0])
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/../common/../data/../common/threading_utils.h");
      v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: ", 14);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"begin < end", 11);
      v8 = *(char *)(v15[0] + 23);
      if (v8 >= 0)
        v9 = v15[0];
      else
        v9 = *(_QWORD *)v15[0];
      if (v8 >= 0)
        v10 = *(unsigned __int8 *)(v15[0] + 23);
      else
        v10 = *(_QWORD *)(v15[0] + 8);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v14);
      v12 = v15[0];
      v15[0] = 0;
      if (v12)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v15, v12);
    }
  }
  return this;
}

void sub_220EE3DE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, uint64_t a13)
{
  uint64_t v14;

  v14 = a13;
  a13 = 0;
  if (v14)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a13, v14);
  _Unwind_Resume(exception_object);
}

void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::AddHistRows(unsigned int *a1, unsigned int *a2, int *a3, int **a4, int **a5, uint64_t a6)
{
  if (*((_BYTE *)a1 + 408))
    xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::AddHistRowsDistributed(a1, a2, a3, a4, a5, a6);
  else
    xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::AddHistRowsLocal(a1, (signed int *)a2, a3, a4, (unsigned int **)a5);
}

void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<false>(uint64_t a1, uint64_t a2, xgboost::common::BlockedSpace2d *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  std::string *Entry;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  int v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  int v31;
  _QWORD v32[5];
  _QWORD v33[2];
  void *__p[3];
  unint64_t v35;

  v15 = *a5;
  v14 = a5[1];
  LODWORD(v33[0]) = 0;
  v16 = v14 - v15;
  v35 = 0x2E8BA2E8BA2E8BA3 * (v16 >> 3);
  if (!v16)
  {
    dmlc::LogCheckFormat<unsigned long,int>((uint64_t *)__p);
    if (__p[0])
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v33);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/hist/histogram.h");
      v23 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v33);
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Check failed: ", 14);
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"n_nodes > 0", 11);
      v26 = *((char *)__p[0] + 23);
      v27 = v26 >= 0 ? __p[0] : *(void **)__p[0];
      v28 = v26 >= 0 ? *((unsigned __int8 *)__p[0] + 23) : *((_QWORD *)__p[0] + 1);
      v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v27, v28);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v33);
      v30 = __p[0];
      __p[0] = 0;
      if (v30)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)__p, (uint64_t)v30);
    }
  }
  std::vector<xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul>>::vector(__p, v35);
  if (v35)
  {
    v17 = 0;
    v18 = 0;
    v19 = 0;
    do
    {
      xgboost::common::HistCollection<float>::operator[]((unsigned int *)a1, *(_DWORD *)(*a5 + v17), v33);
      v20 = (char *)__p[0] + v18;
      *v20 = v33[0];
      v20[1] = v33[1];
      ++v19;
      v21 = v35;
      v18 += 16;
      v17 += 88;
    }
    while (v19 < v35);
    if (a2)
      goto LABEL_18;
  }
  else
  {
    v21 = 0;
    if (a2)
      goto LABEL_18;
  }
  xgboost::common::ParallelGHistBuilder<float>::Reset(a1 + 136, *(int *)(a1 + 392), v21, a3, (uint64_t **)__p);
LABEL_18:
  v31 = *(_DWORD *)(a1 + 392);
  v32[0] = a5;
  v32[1] = a6;
  v32[2] = a1;
  v32[3] = a7;
  v32[4] = a4;
  xgboost::common::ParallelFor2d<void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<false>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(a3, v31, (uint64_t)v32);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_220EE400C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v19;

  v19 = (uint64_t)__p;
  __p = 0;
  if (v19)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&__p, v19);
  _Unwind_Resume(exception_object);
}

void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<true>(uint64_t a1, uint64_t a2, xgboost::common::BlockedSpace2d *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  std::string *Entry;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  int v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  int v31;
  _QWORD v32[5];
  _QWORD v33[2];
  void *__p[3];
  unint64_t v35;

  v15 = *a5;
  v14 = a5[1];
  LODWORD(v33[0]) = 0;
  v16 = v14 - v15;
  v35 = 0x2E8BA2E8BA2E8BA3 * (v16 >> 3);
  if (!v16)
  {
    dmlc::LogCheckFormat<unsigned long,int>((uint64_t *)__p);
    if (__p[0])
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v33);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/hist/histogram.h");
      v23 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v33);
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Check failed: ", 14);
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"n_nodes > 0", 11);
      v26 = *((char *)__p[0] + 23);
      v27 = v26 >= 0 ? __p[0] : *(void **)__p[0];
      v28 = v26 >= 0 ? *((unsigned __int8 *)__p[0] + 23) : *((_QWORD *)__p[0] + 1);
      v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v27, v28);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v33);
      v30 = __p[0];
      __p[0] = 0;
      if (v30)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)__p, (uint64_t)v30);
    }
  }
  std::vector<xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul>>::vector(__p, v35);
  if (v35)
  {
    v17 = 0;
    v18 = 0;
    v19 = 0;
    do
    {
      xgboost::common::HistCollection<float>::operator[]((unsigned int *)a1, *(_DWORD *)(*a5 + v17), v33);
      v20 = (char *)__p[0] + v18;
      *v20 = v33[0];
      v20[1] = v33[1];
      ++v19;
      v21 = v35;
      v18 += 16;
      v17 += 88;
    }
    while (v19 < v35);
    if (a2)
      goto LABEL_18;
  }
  else
  {
    v21 = 0;
    if (a2)
      goto LABEL_18;
  }
  xgboost::common::ParallelGHistBuilder<float>::Reset(a1 + 136, *(int *)(a1 + 392), v21, a3, (uint64_t **)__p);
LABEL_18:
  v31 = *(_DWORD *)(a1 + 392);
  v32[0] = a5;
  v32[1] = a6;
  v32[2] = a1;
  v32[3] = a7;
  v32[4] = a4;
  xgboost::common::ParallelFor2d<void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<true>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(a3, v31, (uint64_t)v32);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_220EE4240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v19;

  v19 = (uint64_t)__p;
  __p = 0;
  if (v19)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&__p, v19);
  _Unwind_Resume(exception_object);
}

void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed(unsigned int *a1, uint64_t a2, _QWORD *a3, _QWORD *a4, unsigned int a5, int a6)
{
  int v11;
  int v12;
  int v13;
  void *v14;
  void *v15;
  unsigned int *v16;
  void *__p;
  void *v18;
  _QWORD v19[4];
  void *v20[3];
  void *v21;
  void *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD v25[4];
  uint64_t v26;

  v23 = a1[32];
  v24 = a2;
  xgboost::common::BlockedSpace2d::BlockedSpace2d<xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long)#1}>((xgboost::common::BlockedSpace2d *)v20, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a3[1] - *a3) >> 3), &v23, 0x400uLL);
  v11 = a1[98];
  v19[0] = a3;
  v19[1] = a1;
  v19[2] = &v24;
  v19[3] = a4;
  xgboost::common::ParallelFor2d<xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(v20, v11, (uint64_t)v19);
  xgboost::common::HistCollection<float>::operator[](a1, a5, &v14);
  rabit::engine::ReduceHandle::Allreduce((rabit::engine::ReduceHandle *)(a1 + 80), v15, (const char *)8, a1[32] * a6, 0, 0);
  v25[0] = v24;
  v12 = a1[98];
  v14 = a3;
  v15 = v25;
  v16 = a1;
  __p = a4;
  xgboost::common::ParallelFor2d<xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::ParallelSubtractionHist(xgboost::common::BlockedSpace2d const&,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::RegTree const*)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(v20, v12, (uint64_t)&v14);
  xgboost::common::BlockedSpace2d::BlockedSpace2d<xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long)#2}>((xgboost::common::BlockedSpace2d *)&v14, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a4[1] - *a4) >> 3), &v23, 0x400uLL);
  v25[3] = a3;
  v26 = v24;
  v13 = a1[98];
  v25[0] = a4;
  v25[1] = &v26;
  v25[2] = a1;
  xgboost::common::ParallelFor2d<xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::ParallelSubtractionHist(xgboost::common::BlockedSpace2d const&,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::RegTree const*)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(&v14, v13, (uint64_t)v25);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  if (v20[0])
  {
    v20[1] = v20[0];
    operator delete(v20[0]);
  }
}

void sub_220EE4410(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  xgboost::common::Index::~Index((xgboost::common::Index *)va);
  xgboost::common::Index::~Index((xgboost::common::Index *)va1);
  _Unwind_Resume(a1);
}

void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::SyncHistogramLocal(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  int v7;
  _QWORD v8[4];
  void *v9[3];
  void *__p;
  void *v11;
  unint64_t v12;
  uint64_t v13;

  v12 = *(unsigned int *)(a1 + 128);
  v13 = a2;
  xgboost::common::BlockedSpace2d::BlockedSpace2d<xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::SyncHistogramLocal(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long)#1}>((xgboost::common::BlockedSpace2d *)v9, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a3[1] - *a3) >> 3), &v12, 0x400uLL);
  v7 = *(_DWORD *)(a1 + 392);
  v8[0] = a3;
  v8[1] = a1;
  v8[2] = &v13;
  v8[3] = a4;
  xgboost::common::ParallelFor2d<xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::SyncHistogramLocal(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(v9, v7, (uint64_t)v8);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  if (v9[0])
  {
    v9[1] = v9[0];
    operator delete(v9[0]);
  }
}

void sub_220EE44E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  xgboost::common::Index::~Index((xgboost::common::Index *)va);
  _Unwind_Resume(a1);
}

void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::AddHistRowsDistributed(unsigned int *a1, unsigned int *a2, int *a3, int **a4, int **a5, uint64_t a6)
{
  int *v11;
  int *v12;
  unint64_t v13;
  int *v14;
  unint64_t v15;
  std::vector<int>::pointer begin;
  int *v17;
  uint64_t v18;
  std::vector<int>::pointer v19;
  int v20;
  int *v21;
  uint64_t v22;
  int *v23;
  int v24;
  unsigned int *v25;
  std::vector<int>::pointer end;
  int v27;
  unsigned int v28;
  unsigned int *v29;
  std::vector<int>::pointer i;
  int v31;
  int *v33;
  std::vector<int> v34;

  v12 = *a4;
  v11 = a4[1];
  v13 = 0x2E8BA2E8BA2E8BA3 * (((char *)v11 - (char *)*a4) >> 3);
  v14 = *a5;
  v33 = a5[1];
  v15 = 0x2E8BA2E8BA2E8BA3 * (((char *)v33 - (char *)*a5) >> 3);
  std::vector<int>::vector(&v34, v15 + v13);
  begin = v34.__begin_;
  if (v11 != v12)
  {
    v17 = *a4;
    if (v13 <= 1)
      v18 = 1;
    else
      v18 = v13;
    v19 = v34.__begin_;
    do
    {
      v20 = *v17;
      v17 += 22;
      *v19++ = v20;
      --v18;
    }
    while (v18);
  }
  if (v33 != v14)
  {
    v21 = *a5;
    if (v15 <= 1)
      v22 = 1;
    else
      v22 = v15;
    v23 = &begin[v13];
    do
    {
      v24 = *v21;
      v21 += 22;
      *v23++ = v24;
      --v22;
    }
    while (v22);
  }
  std::__sort<std::__less<int,int> &,int *>();
  v25 = (unsigned int *)v34.__begin_;
  end = v34.__end_;
  if (v34.__begin_ == v34.__end_)
  {
    v27 = 0;
  }
  else
  {
    v27 = 0;
    do
    {
      if ((*(_DWORD *)(*(_QWORD *)(a6 + 160) + 20 * (int)*v25) & 0x80000000) != 0)
      {
        xgboost::common::HistCollection<float>::AddHistRow((uint64_t)a1, *v25);
        v28 = *a2;
        if ((int)*a2 >= (int)*v25)
          v28 = *v25;
        *a2 = v28;
        xgboost::common::HistCollection<float>::AddHistRow((uint64_t)(a1 + 16), *v25);
        ++v27;
      }
      ++v25;
    }
    while (v25 != (unsigned int *)end);
    v29 = (unsigned int *)v34.__begin_;
    for (i = v34.__end_; v29 != (unsigned int *)i; ++v29)
    {
      if ((*(_DWORD *)(*(_QWORD *)(a6 + 160) + 20 * (int)*v29) & 0x80000000) == 0)
      {
        xgboost::common::HistCollection<float>::AddHistRow((uint64_t)a1, *v29);
        xgboost::common::HistCollection<float>::AddHistRow((uint64_t)(a1 + 16), *v29);
      }
    }
  }
  xgboost::common::HistCollection<float>::AllocateAllData(a1);
  xgboost::common::HistCollection<float>::AllocateAllData(a1 + 16);
  if (v27 <= 1)
    v31 = 1;
  else
    v31 = v27;
  *a3 = v31;
  if (v34.__begin_)
  {
    v34.__end_ = v34.__begin_;
    operator delete(v34.__begin_);
  }
}

void sub_220EE46D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::AddHistRowsLocal(unsigned int *a1, signed int *a2, _DWORD *a3, signed int **a4, unsigned int **a5)
{
  signed int *v8;
  signed int *v9;
  signed int v12;
  signed int v13;
  signed int v14;
  signed int *v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;

  v8 = *a4;
  v9 = a4[1];
  if (*a4 == v9)
  {
    v15 = *a4;
  }
  else
  {
    do
    {
      v13 = *v8;
      v8 += 22;
      v12 = v13;
      xgboost::common::HistCollection<float>::AddHistRow((uint64_t)a1, v13);
      v14 = *a2;
      if (*a2 >= v13)
        v14 = v12;
      *a2 = v14;
    }
    while (v8 != v9);
    v8 = *a4;
    v15 = a4[1];
  }
  *a3 = -1171354717 * ((unint64_t)((char *)v15 - (char *)v8) >> 3);
  v17 = *a5;
  v16 = a5[1];
  while (v17 != v16)
  {
    v18 = *v17;
    v17 += 22;
    xgboost::common::HistCollection<float>::AddHistRow((uint64_t)a1, v18);
  }
  xgboost::common::HistCollection<float>::AllocateAllData(a1);
}

void xgboost::common::HistCollection<float>::AddHistRow(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  std::string *Entry;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  int v20;

  v20 = -1;
  v4 = a2;
  v5 = *(_QWORD *)(a1 + 40);
  v6 = (uint64_t *)(a1 + 40);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 48) - v5) >> 3))
  {
    v19 = 0xFFFFFFFFLL;
    std::vector<unsigned long>::resize(a1 + 40, a2 + 1, &v19);
    v5 = *v6;
  }
  if (*(_QWORD *)(v5 + 8 * v4) != 0xFFFFFFFFLL)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned int>(&v19);
    if (v19)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v18);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/../common/../data/../common/hist_util.h");
      v8 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v18);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed: ", 14);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"row_ptr_[nid] == kMax", 21);
      v11 = *(char *)(v19 + 23);
      v12 = v11 >= 0 ? v19 : *(_QWORD *)v19;
      v13 = v11 >= 0 ? *(unsigned __int8 *)(v19 + 23) : *(_QWORD *)(v19 + 8);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v18);
      v15 = v19;
      v19 = 0;
      if (v15)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v19, v15);
    }
  }
  v16 = a2 + 1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) < v16)
    std::vector<std::vector<xgboost::detail::GradientPairInternal<float>>>::resize((uint64_t *)(a1 + 16), v16);
  v17 = *(unsigned int *)(a1 + 4);
  *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v4) = v17;
  *(_DWORD *)(a1 + 4) = v17 + 1;
}

void sub_220EE4918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14)
{
  uint64_t v15;

  v15 = a14;
  a14 = 0;
  if (v15)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a14, v15);
  _Unwind_Resume(exception_object);
}

void xgboost::common::HistCollection<float>::AllocateAllData(unsigned int *a1)
{
  uint64_t v2;
  _QWORD *v3;
  unsigned int *v4;
  unint64_t v5;

  v2 = *a1;
  v4 = a1 + 4;
  v3 = (_QWORD *)*((_QWORD *)a1 + 2);
  v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v4 + 1) - (_QWORD)v3) >> 3) * v2;
  *((_BYTE *)a1 + 8) = 1;
  if (v5 != (uint64_t)(v3[1] - *v3) >> 3)
    std::vector<xgboost::detail::GradientPairInternal<float>>::resize((uint64_t)v3, v5);
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::vector<int>::pointer end;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_220EE49E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<xgboost::detail::GradientPairInternal<float>>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<xgboost::detail::GradientPairInternal<float>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void std::vector<std::vector<xgboost::detail::GradientPairInternal<float>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<unsigned long>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<xgboost::detail::GradientPairInternal<float>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<xgboost::tree::GradStats>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_220EE4BE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<xgboost::tree::GradStats>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<xgboost::detail::GradientPairInternal<float>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<xgboost::detail::GradientPairInternal<float>>>,std::reverse_iterator<std::vector<xgboost::detail::GradientPairInternal<float>>*>,std::reverse_iterator<std::vector<xgboost::detail::GradientPairInternal<float>>*>,std::reverse_iterator<std::vector<xgboost::detail::GradientPairInternal<float>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<xgboost::detail::GradientPairInternal<float>>>,std::reverse_iterator<std::vector<xgboost::detail::GradientPairInternal<float>>*>,std::reverse_iterator<std::vector<xgboost::detail::GradientPairInternal<float>>*>,std::reverse_iterator<std::vector<xgboost::detail::GradientPairInternal<float>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<xgboost::detail::GradientPairInternal<float>>>,std::reverse_iterator<std::vector<xgboost::detail::GradientPairInternal<float>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<xgboost::detail::GradientPairInternal<float>>>,std::reverse_iterator<std::vector<xgboost::detail::GradientPairInternal<float>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<xgboost::tree::GradStats>>,std::reverse_iterator<std::vector<xgboost::tree::GradStats>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void xgboost::common::HistCollection<float>::operator[](unsigned int *a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  std::string *Entry;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  int v20;

  v20 = -1;
  v5 = *((_QWORD *)a1 + 5);
  if (a2 >= (unint64_t)((*((_QWORD *)a1 + 6) - v5) >> 3))
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v19 = *(_QWORD *)(v5 + 8 * a2);
  if (v19 == 0xFFFFFFFFLL)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned int>(&v18);
    if (v18)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/../common/../data/../common/hist_util.h");
      v7 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: ", 14);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"id != kMax", 10);
      v10 = *(char *)(v18 + 23);
      v11 = v10 >= 0 ? v18 : *(_QWORD *)v18;
      v12 = v10 >= 0 ? *(unsigned __int8 *)(v18 + 23) : *(_QWORD *)(v18 + 8);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v17);
      v14 = v18;
      v18 = 0;
      if (v14)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v18, v14);
    }
  }
  if (*((_BYTE *)a1 + 8))
  {
    v15 = *a1;
    v16 = **((_QWORD **)a1 + 2) + 8 * v19 * v15;
  }
  else
  {
    v16 = *(_QWORD *)(*((_QWORD *)a1 + 2) + 24 * v19);
    v15 = *a1;
  }
  *a3 = v15;
  a3[1] = v16;
  if ((_DWORD)v15)
  {
    if (!v16)
      std::terminate();
  }
}

void sub_220EE4E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, uint64_t a13)
{
  uint64_t v14;

  v14 = a13;
  a13 = 0;
  if (v14)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a13, v14);
  _Unwind_Resume(exception_object);
}

void xgboost::common::ParallelGHistBuilder<float>::Reset(uint64_t a1, uint64_t a2, uint64_t a3, xgboost::common::BlockedSpace2d *a4, uint64_t **a5)
{
  _QWORD *v10;
  std::string *Entry;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = a3;
  if (*(_DWORD *)(a1 + 24) != *(_DWORD *)a1)
  {
    *(_DWORD *)(a1 + 24) = *(_DWORD *)a1;
    std::vector<std::vector<unsigned long>>::__clear[abi:ne180100]((uint64_t *)(a1 + 40));
  }
  v10 = *(_QWORD **)(a1 + 168);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 64);
  *(_DWORD *)(a1 + 28) = 0;
  std::__tree<dmlc::parameter::FieldAccessEntry *>::destroy(a1 + 160, v10);
  *(_QWORD *)(a1 + 160) = a1 + 168;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  if ((uint64_t **)(a1 + 136) != a5)
    std::vector<xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul>>::__assign_with_size[abi:ne180100]<xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul>*,xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul>*>((_QWORD *)(a1 + 136), *a5, a5[1], ((char *)a5[1] - (char *)*a5) >> 4);
  v23 = ((char *)a5[1] - (char *)*a5) >> 4;
  if (v23 != a3)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v24);
    if (v24)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v23);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/../common/../data/../common/hist_util.h");
      v12 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v23);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Check failed: ", 14);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"nodes == targeted_hists.size()", 30);
      v15 = *(char *)(v24 + 23);
      v16 = v15 >= 0 ? v24 : *(_QWORD *)v24;
      v17 = v15 >= 0 ? *(unsigned __int8 *)(v24 + 23) : *(_QWORD *)(v24 + 8);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v23);
      v19 = v24;
      v24 = 0;
      if (v19)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v24, v19);
    }
  }
  v20 = v25;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = v20;
  xgboost::common::ParallelGHistBuilder<float>::MatchThreadsToNodes((_QWORD *)a1, a4);
  xgboost::common::ParallelGHistBuilder<float>::AllocateAdditionalHistograms((_QWORD *)a1);
  xgboost::common::ParallelGHistBuilder<float>::MatchNodeNidPairToHist((_OWORD *)a1);
  std::vector<int>::resize((std::vector<int> *)(a1 + 88), *(_QWORD *)(a1 + 16) * a2);
  v21 = *(void **)(a1 + 88);
  v22 = *(_QWORD *)(a1 + 96) - (_QWORD)v21;
  if (v22 >= 1)
    bzero(v21, 4 * (((unint64_t)v22 >> 2) - ((unint64_t)v22 > 3)) + 4);
}

void sub_220EE5088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v12;

  v12 = a11;
  a11 = 0;
  if (v12)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a11, v12);
  _Unwind_Resume(exception_object);
}

void xgboost::common::ParallelFor2d<void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<false>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(_QWORD *a1, int a2, uint64_t a3)
{
  std::string *Entry;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  void *ptr;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  _QWORD v14[4];
  uint64_t v15;
  _DWORD v16[2];
  int v17;
  std::exception_ptr v18;
  std::mutex v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v15 = (uint64_t)(a1[1] - *a1) >> 4;
  v17 = a2;
  v16[0] = a2;
  v16[1] = 1;
  if (a2 < 1)
  {
    dmlc::LogCheckFormat<int,int>((uint64_t *)&v18);
    if (v18.__ptr_)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/../common/../data/../common/threading_utils.h");
      v6 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: ", 14);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"nthreads >= 1", 13);
      v9 = *((char *)v18.__ptr_ + 23);
      if (v9 >= 0)
        ptr = v18.__ptr_;
      else
        ptr = *(void **)v18.__ptr_;
      if (v9 >= 0)
        v11 = *((unsigned __int8 *)v18.__ptr_ + 23);
      else
        v11 = *((_QWORD *)v18.__ptr_ + 1);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)ptr, v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v17);
      v13 = v18.__ptr_;
      v18.__ptr_ = 0;
      if (v13)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v18, (uint64_t)v13);
    }
  }
  v18.__ptr_ = 0;
  v19.__m_.__sig = 850045863;
  memset(v19.__m_.__opaque, 0, sizeof(v19.__m_.__opaque));
  v14[0] = &v15;
  v14[1] = v16;
  v14[2] = a3;
  v14[3] = a1;
  dmlc::OMPException::Run<void xgboost::common::ParallelFor2d<void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<false>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<false>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}>((uint64_t)&v18, (uint64_t)v14);
  dmlc::OMPException::Rethrow(&v18);
  std::mutex::~mutex(&v19);
  std::exception_ptr::~exception_ptr(&v18);
}

void sub_220EE523C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, char a17, std::exception_ptr a18)
{
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_220EE52F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WQSummary<float,float>::Entry>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void xgboost::common::ParallelGHistBuilder<float>::MatchThreadsToNodes(_QWORD *a1, xgboost::common::BlockedSpace2d *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t FirstDimension;
  unint64_t v12;
  uint64_t v13;

  v4 = (uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 4;
  v5 = a1[1];
  if (v4 % v5)
    v6 = v4 / v5 + 1;
  else
    v6 = v4 / v5;
  v7 = a1 + 14;
  std::vector<BOOL>::resize((uint64_t)(a1 + 14), a1[2] * v5, 0);
  if (a1[1])
  {
    v8 = 0;
    do
    {
      v9 = v8 * v6;
      if (v8 * v6 < v4)
      {
        if (v4 >= v9 + v6)
          v10 = v9 + v6;
        else
          v10 = v4;
        FirstDimension = xgboost::common::BlockedSpace2d::GetFirstDimension(a2, v9);
        v12 = xgboost::common::BlockedSpace2d::GetFirstDimension(a2, v10 - 1);
        if (FirstDimension <= v12)
        {
          v13 = *v7;
          do
          {
            *(_QWORD *)(v13 + (((FirstDimension + v8 * a1[2]) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << (FirstDimension + v8 * *((_BYTE *)a1 + 16));
            ++FirstDimension;
          }
          while (FirstDimension <= v12);
        }
      }
      ++v8;
    }
    while (v8 < a1[1]);
  }
}

void xgboost::common::ParallelGHistBuilder<float>::AllocateAdditionalHistograms(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  v1 = a1[2];
  if (v1)
  {
    v2 = 0;
    v3 = 0;
    do
    {
      v4 = v3;
      v5 = 0;
      if (a1[1])
      {
        v6 = v2;
        v7 = a1[1];
        do
        {
          v5 += (*(_QWORD *)(a1[14] + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v6) & 1;
          v6 += v1;
          --v7;
        }
        while (v7);
      }
      if (v5 <= 1)
        v8 = 1;
      else
        v8 = v5;
      v3 = v4 + (v8 - 1);
      ++v2;
    }
    while (v2 != v1);
    if (v3)
    {
      v9 = 0;
      v10 = (uint64_t)(a1 + 3);
      if (v5 <= 1)
        v11 = 1;
      else
        v11 = v5;
      v12 = v4 + (v11 - 1);
      do
        xgboost::common::HistCollection<float>::AddHistRow(v10, v9++);
      while (v12 != v9);
    }
  }
}

_OWORD *xgboost::common::ParallelGHistBuilder<float>::MatchNodeNidPairToHist(_OWORD *result)
{
  unint64_t v1;
  _QWORD *v2;
  int v3;
  unint64_t v4;
  uint64_t **v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  unint64_t v9[2];
  unint64_t *v10;

  v1 = *((_QWORD *)result + 2);
  if (v1)
  {
    v2 = result;
    v3 = 0;
    v4 = 0;
    v5 = (uint64_t **)(result + 10);
    v6 = *((_QWORD *)result + 1);
    do
    {
      if (v6)
      {
        v7 = 0;
        v8 = 1;
        do
        {
          if (((*(_QWORD *)(v2[14] + (((v4 + v2[2] * v7) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v4
                                                                                           + *((_BYTE *)v2 + 16)
                                                                                           * v7)) & 1) != 0)
          {
            v9[0] = v7;
            v9[1] = v4;
            v10 = v9;
            if ((v8 & 1) != 0)
            {
              result = std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,int>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,int>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,int>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned long,unsigned long>&&>,std::tuple<>>(v5, v9, (uint64_t)&std::piecewise_construct, (_OWORD **)&v10);
              v8 = 0;
              *((_DWORD *)result + 12) = -1;
            }
            else
            {
              result = std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,int>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,int>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,int>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned long,unsigned long>&&>,std::tuple<>>(v5, v9, (uint64_t)&std::piecewise_construct, (_OWORD **)&v10);
              v8 = 0;
              *((_DWORD *)result + 12) = v3++;
            }
          }
          ++v7;
          v6 = v2[1];
        }
        while (v7 < v6);
        v1 = v2[2];
      }
      ++v4;
    }
    while (v4 < v1);
  }
  return result;
}

char *std::vector<xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul>>::__assign_with_size[abi:ne180100]<xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul>*,xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul>*>(_QWORD *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  char *result;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 4)
  {
    v19 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v19;
    v20 = (v19 - result) >> 4;
    if (v20 >= a4)
    {
      v28 = result;
      if (a2 != a3)
      {
        v29 = result;
        do
        {
          v30 = *v6;
          v31 = v6[1];
          v6 += 2;
          *(_QWORD *)v29 = v30;
          *((_QWORD *)v29 + 1) = v31;
          v29 += 16;
          v28 += 16;
        }
        while (v6 != a3);
      }
      v18 = (char *)(v28 - result);
      v12 = result;
    }
    else
    {
      v21 = &a2[2 * v20];
      if (v12 != result)
      {
        do
        {
          v22 = *v6;
          v23 = v6[1];
          v6 += 2;
          *(_QWORD *)result = v22;
          *((_QWORD *)result + 1) = v23;
          result += 16;
        }
        while (v6 != v21);
      }
      v24 = v12;
      if (v21 != a3)
      {
        v25 = v12;
        do
        {
          v26 = *v21;
          v27 = v21[1];
          v21 += 2;
          *(_QWORD *)v25 = v26;
          *((_QWORD *)v25 + 1) = v27;
          v25 += 16;
          v24 += 16;
        }
        while (v21 != a3);
      }
      v18 = (char *)(v24 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60)
      std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul>>::__vallocate[abi:ne180100](a1, v11);
    v14 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v14;
    v15 = v14;
    if (v6 != a3)
    {
      v15 = v12;
      do
      {
        v16 = *v6;
        v17 = v6[1];
        v6 += 2;
        *(_QWORD *)v15 = v16;
        *((_QWORD *)v15 + 1) = v17;
        v15 += 16;
      }
      while (v6 != a3);
    }
    v18 = (char *)(v15 - v12);
  }
  *v13 = &v18[(_QWORD)v12];
  return result;
}

uint64_t xgboost::common::BlockedSpace2d::GetFirstDimension(xgboost::common::BlockedSpace2d *this, unint64_t a2)
{
  std::string *Entry;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v15 = a2;
  v13 = (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3;
  if (v13 <= a2)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v14);
    if (v14)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/../common/../data/../common/threading_utils.h");
      v4 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
      v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: ", 14);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"i < first_dimension_.size()", 27);
      v7 = *(char *)(v14 + 23);
      if (v7 >= 0)
        v8 = v14;
      else
        v8 = *(_QWORD *)v14;
      if (v7 >= 0)
        v9 = *(unsigned __int8 *)(v14 + 23);
      else
        v9 = *(_QWORD *)(v14 + 8);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v13);
      v11 = v14;
      v14 = 0;
      if (v11)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v14, v11);
    }
  }
  return *(_QWORD *)(*((_QWORD *)this + 3) + 8 * v15);
}

void sub_220EE5860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v12;

  v12 = a11;
  a11 = 0;
  if (v12)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a11, v12);
  _Unwind_Resume(exception_object);
}

_OWORD *std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,int>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,int>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,int>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned long,unsigned long>&&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v10;

  v6 = (void **)std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,int>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,int>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,int>>>::__find_equal<std::pair<unsigned long,unsigned long>>((uint64_t)a1, &v10, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x38uLL);
    v7[2] = **a4;
    *((_DWORD *)v7 + 12) = 0;
    std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__insert_node_at(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

_QWORD *std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,int>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,int>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,int>>>::__find_equal<std::pair<unsigned long,unsigned long>>(uint64_t a1, _QWORD *a2, unint64_t *a3)
{
  _QWORD *result;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;

  v5 = *(_QWORD **)(a1 + 8);
  result = (_QWORD *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = *a3;
    v7 = a3[1];
    while (1)
    {
      while (1)
      {
        v8 = v4;
        v9 = v4[4];
        if (v6 >= v9)
          break;
LABEL_4:
        v4 = (_QWORD *)*v8;
        result = v8;
        if (!*v8)
          goto LABEL_12;
      }
      if (v9 >= v6)
      {
        v10 = v8[5];
        if (v7 < v10)
          goto LABEL_4;
        if (v10 >= v7)
          goto LABEL_12;
      }
      result = v8 + 1;
      v4 = (_QWORD *)v8[1];
      if (!v4)
        goto LABEL_12;
    }
  }
  v8 = result;
LABEL_12:
  *a2 = v8;
  return result;
}

void dmlc::OMPException::Run<void xgboost::common::ParallelFor2d<void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<false>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<false>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}>(uint64_t a1, uint64_t a2)
{
  xgboost::common::ParallelFor2d<void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<false>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<false>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}::operator()(a2);
}

void xgboost::common::ParallelFor2d<void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<false>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<false>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}::operator()(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t i;
  uint64_t v7;
  unint64_t FirstDimension;
  unint64_t Range;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD v20[2];
  _QWORD v21[2];
  unsigned int v22;
  _QWORD v23[2];

  v1 = **(_QWORD **)a1;
  v2 = **(int **)(a1 + 8);
  if (v1 % v2)
    v3 = v1 / v2 + 1;
  else
    v3 = v1 / v2;
  if (v1 >= v3)
    v4 = v3;
  else
    v4 = **(_QWORD **)a1;
  if (v4)
  {
    for (i = 0; i != v4; ++i)
    {
      v7 = *(_QWORD *)(a1 + 16);
      FirstDimension = xgboost::common::BlockedSpace2d::GetFirstDimension(*(xgboost::common::BlockedSpace2d **)(a1 + 24), i);
      Range = xgboost::common::BlockedSpace2d::GetRange(*(xgboost::common::BlockedSpace2d **)(a1 + 24), i);
      v11 = *(_DWORD *)(**(_QWORD **)v7 + 88 * FirstDimension);
      v12 = *(_QWORD *)(v7 + 16);
      v13 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 24) + 24 * v11);
      v14 = *v13;
      v15 = (v13[1] - *v13) >> 3;
      if (v15 >= Range)
        v16 = Range;
      else
        v16 = v15;
      if (v15 >= v10)
        v17 = v10;
      else
        v17 = v15;
      xgboost::common::ParallelGHistBuilder<float>::GetInitializedHist(v12 + 136, 0, FirstDimension, (uint64_t)v23);
      if (v17 != v16)
      {
        v21[0] = v14 + 8 * v16;
        v21[1] = v14 + 8 * v17;
        v22 = v11;
        v18 = *(uint64_t **)(v7 + 24);
        v19 = *(_QWORD *)(v7 + 32);
        v20[0] = v23[0];
        v20[1] = v23[1];
        xgboost::common::GHistBuilder<float>::BuildHist<false>(v12 + 128, v18, v21, v19, v20);
      }
    }
  }
}

uint64_t xgboost::common::BlockedSpace2d::GetRange(xgboost::common::BlockedSpace2d *this, unint64_t a2)
{
  std::string *Entry;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v15 = a2;
  v13 = (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4;
  if (v13 <= a2)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v14);
    if (v14)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/../common/../data/../common/threading_utils.h");
      v4 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
      v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: ", 14);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"i < ranges_.size()", 18);
      v7 = *(char *)(v14 + 23);
      if (v7 >= 0)
        v8 = v14;
      else
        v8 = *(_QWORD *)v14;
      if (v7 >= 0)
        v9 = *(unsigned __int8 *)(v14 + 23);
      else
        v9 = *(_QWORD *)(v14 + 8);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v13);
      v11 = v14;
      v14 = 0;
      if (v11)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v14, v11);
    }
  }
  return *(_QWORD *)(*(_QWORD *)this + 16 * v15);
}

void sub_220EE5C58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v12;

  v12 = a11;
  a11 = 0;
  if (v12)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a11, v12);
  _Unwind_Resume(exception_object);
}

void xgboost::common::ParallelGHistBuilder<float>::GetInitializedHist(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::string *Entry;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  std::string *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28[2];
  char v29;
  uint64_t v30;
  uint64_t v31;

  v30 = a3;
  v31 = a2;
  if (*(_QWORD *)(a1 + 16) <= a3)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(v28);
    if (v28[0])
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v29);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/../common/../data/../common/hist_util.h");
      v8 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v29);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed: ", 14);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"nid < nodes_", 12);
      v11 = *(char *)(v28[0] + 23);
      v12 = v11 >= 0 ? v28[0] : *(_QWORD *)v28[0];
      v13 = v11 >= 0 ? *(unsigned __int8 *)(v28[0] + 23) : *(_QWORD *)(v28[0] + 8);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v29);
      v15 = v28[0];
      v28[0] = 0;
      if (v15)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v28, v15);
    }
  }
  if (*(_QWORD *)(a1 + 8) <= a2)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(v28);
    if (v28[0])
    {
      v16 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v29);
      dmlc::LogMessageFatal::Entry::Init(v16, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/../common/../data/../common/hist_util.h");
      v17 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v29);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Check failed: ", 14);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"tid < nthreads_", 15);
      v20 = *(char *)(v28[0] + 23);
      v21 = v20 >= 0 ? v28[0] : *(_QWORD *)v28[0];
      v22 = v20 >= 0 ? *(unsigned __int8 *)(v28[0] + 23) : *(_QWORD *)(v28[0] + 8);
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v21, v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v29);
      v24 = v28[0];
      v28[0] = 0;
      if (v24)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v28, v24);
    }
  }
  v28[0] = v31;
  v28[1] = v30;
  v25 = *(_DWORD *)std::map<std::pair<unsigned long,unsigned long>,int>::at(a1 + 160, (unint64_t *)v28);
  if ((v25 & 0x80000000) == 0)
  {
    xgboost::common::HistCollection<float>::AllocateData((unsigned int *)(a1 + 24), v25);
LABEL_24:
    xgboost::common::HistCollection<float>::operator[]((unsigned int *)(a1 + 24), v25, (_QWORD *)a4);
    v26 = v30;
    goto LABEL_25;
  }
  if (v25 != -1)
    goto LABEL_24;
  v26 = v30;
  v27 = (_QWORD *)(*(_QWORD *)(a1 + 136) + 16 * v30);
  *(_QWORD *)a4 = *v27;
  *(_QWORD *)(a4 + 8) = v27[1];
LABEL_25:
  if (!*(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * (v26 + *(_QWORD *)(a1 + 16) * v31)))
  {
    bzero(*(void **)(a4 + 8), 8 * *(_QWORD *)a4);
    *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * (v30 + *(_QWORD *)(a1 + 16) * v31)) = 1;
  }
}

void sub_220EE5EC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v16;

  v16 = a10;
  a10 = 0;
  if (v16)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a10, v16);
  _Unwind_Resume(exception_object);
}

uint64_t std::map<std::pair<unsigned long,unsigned long>,int>::at(uint64_t a1, unint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,int>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,int>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,int>>>::__find_equal<std::pair<unsigned long,unsigned long>>(a1, &v4, a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  return v2 + 48;
}

void xgboost::common::HistCollection<float>::AllocateData(unsigned int *a1, unsigned int a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = (_QWORD *)(*((_QWORD *)a1 + 2) + 24 * *(_QWORD *)(*((_QWORD *)a1 + 5) + 8 * a2));
  if (v3[1] == *v3)
  {
    v4 = *a1;
    v5 = 0;
    std::vector<xgboost::detail::GradientPairInternal<float>>::resize((uint64_t)v3, v4, &v5);
  }
}

void std::vector<xgboost::detail::GradientPairInternal<float>>::resize(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<xgboost::detail::GradientPairInternal<float>>::__append((void **)a1, a2 - v3, a3);
  }
}

void std::vector<xgboost::detail::GradientPairInternal<float>>::__append(void **a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 3)
  {
    if (a2)
    {
      v16 = 8 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 8;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 3);
    if (v11 >> 61)
      std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_length_error[abi:ne180100]();
    v12 = v10 >> 3;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 2 > v11)
      v11 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v6, v14);
    else
      v15 = 0;
    v18 = &v15[8 * v12];
    v19 = &v18[8 * a2];
    v20 = 8 * a2;
    v21 = v18;
    do
    {
      *(_QWORD *)v21 = *a3;
      v21 += 8;
      v20 -= 8;
    }
    while (v20);
    v22 = &v15[8 * v14];
    v24 = (char *)*a1;
    v23 = (char *)a1[1];
    if (v23 != *a1)
    {
      do
      {
        v25 = *((_QWORD *)v23 - 1);
        v23 -= 8;
        *((_QWORD *)v18 - 1) = v25;
        v18 -= 8;
      }
      while (v23 != v24);
      v23 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

void xgboost::common::ParallelFor2d<void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<true>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(_QWORD *a1, int a2, uint64_t a3)
{
  std::string *Entry;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  void *ptr;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  _QWORD v14[4];
  uint64_t v15;
  _DWORD v16[2];
  int v17;
  std::exception_ptr v18;
  std::mutex v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v15 = (uint64_t)(a1[1] - *a1) >> 4;
  v17 = a2;
  v16[0] = a2;
  v16[1] = 1;
  if (a2 < 1)
  {
    dmlc::LogCheckFormat<int,int>((uint64_t *)&v18);
    if (v18.__ptr_)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/../common/../data/../common/threading_utils.h");
      v6 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: ", 14);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"nthreads >= 1", 13);
      v9 = *((char *)v18.__ptr_ + 23);
      if (v9 >= 0)
        ptr = v18.__ptr_;
      else
        ptr = *(void **)v18.__ptr_;
      if (v9 >= 0)
        v11 = *((unsigned __int8 *)v18.__ptr_ + 23);
      else
        v11 = *((_QWORD *)v18.__ptr_ + 1);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)ptr, v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v17);
      v13 = v18.__ptr_;
      v18.__ptr_ = 0;
      if (v13)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v18, (uint64_t)v13);
    }
  }
  v18.__ptr_ = 0;
  v19.__m_.__sig = 850045863;
  memset(v19.__m_.__opaque, 0, sizeof(v19.__m_.__opaque));
  v14[0] = &v15;
  v14[1] = v16;
  v14[2] = a3;
  v14[3] = a1;
  dmlc::OMPException::Run<void xgboost::common::ParallelFor2d<void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<true>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<true>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}>((uint64_t)&v18, (uint64_t)v14);
  dmlc::OMPException::Rethrow(&v18);
  std::mutex::~mutex(&v19);
  std::exception_ptr::~exception_ptr(&v18);
}

void sub_220EE6260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, char a17, std::exception_ptr a18)
{
  _Unwind_Resume(exception_object);
}

void dmlc::OMPException::Run<void xgboost::common::ParallelFor2d<void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<true>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<true>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}>(uint64_t a1, uint64_t a2)
{
  xgboost::common::ParallelFor2d<void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<true>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<true>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}::operator()(a2);
}

void xgboost::common::ParallelFor2d<void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<true>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<true>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}::operator()(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t i;
  uint64_t v7;
  unint64_t FirstDimension;
  unint64_t Range;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  _QWORD v20[2];
  _QWORD v21[2];
  unsigned int v22;
  _QWORD v23[2];

  v1 = **(_QWORD **)a1;
  v2 = **(int **)(a1 + 8);
  if (v1 % v2)
    v3 = v1 / v2 + 1;
  else
    v3 = v1 / v2;
  if (v1 >= v3)
    v4 = v3;
  else
    v4 = **(_QWORD **)a1;
  if (v4)
  {
    for (i = 0; i != v4; ++i)
    {
      v7 = *(_QWORD *)(a1 + 16);
      FirstDimension = xgboost::common::BlockedSpace2d::GetFirstDimension(*(xgboost::common::BlockedSpace2d **)(a1 + 24), i);
      Range = xgboost::common::BlockedSpace2d::GetRange(*(xgboost::common::BlockedSpace2d **)(a1 + 24), i);
      v11 = *(_DWORD *)(**(_QWORD **)v7 + 88 * FirstDimension);
      v12 = *(_QWORD *)(v7 + 16);
      v13 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 24) + 24 * v11);
      v14 = *v13;
      v15 = (v13[1] - *v13) >> 3;
      if (v15 >= Range)
        v16 = Range;
      else
        v16 = v15;
      if (v15 >= v10)
        v17 = v10;
      else
        v17 = v15;
      xgboost::common::ParallelGHistBuilder<float>::GetInitializedHist(v12 + 136, 0, FirstDimension, (uint64_t)v23);
      if (v17 != v16)
      {
        v21[0] = v14 + 8 * v16;
        v21[1] = v14 + 8 * v17;
        v22 = v11;
        v18 = *(uint64_t **)(v7 + 24);
        v19 = *(uint64_t **)(v7 + 32);
        v20[0] = v23[0];
        v20[1] = v23[1];
        xgboost::common::GHistBuilder<float>::BuildHist<true>(v12 + 128, v18, v21, v19, v20);
      }
    }
  }
}

void xgboost::common::ParallelFor2d<xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(_QWORD *a1, int a2, uint64_t a3)
{
  std::string *Entry;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  void *ptr;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  _QWORD v14[4];
  uint64_t v15;
  _DWORD v16[2];
  int v17;
  std::exception_ptr v18;
  std::mutex v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v15 = (uint64_t)(a1[1] - *a1) >> 4;
  v17 = a2;
  v16[0] = a2;
  v16[1] = 1;
  if (a2 < 1)
  {
    dmlc::LogCheckFormat<int,int>((uint64_t *)&v18);
    if (v18.__ptr_)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/../common/../data/../common/threading_utils.h");
      v6 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: ", 14);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"nthreads >= 1", 13);
      v9 = *((char *)v18.__ptr_ + 23);
      if (v9 >= 0)
        ptr = v18.__ptr_;
      else
        ptr = *(void **)v18.__ptr_;
      if (v9 >= 0)
        v11 = *((unsigned __int8 *)v18.__ptr_ + 23);
      else
        v11 = *((_QWORD *)v18.__ptr_ + 1);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)ptr, v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v17);
      v13 = v18.__ptr_;
      v18.__ptr_ = 0;
      if (v13)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v18, (uint64_t)v13);
    }
  }
  v18.__ptr_ = 0;
  v19.__m_.__sig = 850045863;
  memset(v19.__m_.__opaque, 0, sizeof(v19.__m_.__opaque));
  v14[0] = &v15;
  v14[1] = v16;
  v14[2] = a3;
  v14[3] = a1;
  dmlc::OMPException::Run<void xgboost::common::ParallelFor2d<xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}>((uint64_t)&v18, (uint64_t)v14);
  dmlc::OMPException::Rethrow(&v18);
  std::mutex::~mutex(&v19);
  std::exception_ptr::~exception_ptr(&v18);
}

void sub_220EE6624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, char a17, std::exception_ptr a18)
{
  _Unwind_Resume(exception_object);
}

xgboost::common::BlockedSpace2d *xgboost::common::BlockedSpace2d::BlockedSpace2d<xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long)#1}>(xgboost::common::BlockedSpace2d *this, uint64_t a2, unint64_t *a3, unint64_t a4)
{
  uint64_t i;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  if (a2)
  {
    for (i = 0; i != a2; ++i)
    {
      v9 = *a3;
      if (*a3 % a4)
        v10 = *a3 / a4 + 1;
      else
        v10 = *a3 / a4;
      if (v10)
      {
        v11 = 0;
        do
        {
          if (v9 >= a4 + v11)
            v12 = a4 + v11;
          else
            v12 = v9;
          xgboost::common::BlockedSpace2d::AddBlock(this, i, v11, v12);
          v11 += a4;
          --v10;
        }
        while (v10);
      }
    }
  }
  return this;
}

void sub_220EE672C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  void *v4;

  v3 = *(void **)(v1 + 24);
  if (v3)
  {
    *(_QWORD *)(v1 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void dmlc::OMPException::Run<void xgboost::common::ParallelFor2d<xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t i;
  uint64_t v8;
  unint64_t FirstDimension;
  unint64_t Range;
  unint64_t v11;

  v2 = **(_QWORD **)a2;
  v3 = **(int **)(a2 + 8);
  if (v2 % v3)
    v4 = v2 / v3 + 1;
  else
    v4 = v2 / v3;
  if (v2 >= v4)
    v5 = v4;
  else
    v5 = **(_QWORD **)a2;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 16);
      FirstDimension = xgboost::common::BlockedSpace2d::GetFirstDimension(*(xgboost::common::BlockedSpace2d **)(a2 + 24), i);
      Range = xgboost::common::BlockedSpace2d::GetRange(*(xgboost::common::BlockedSpace2d **)(a2 + 24), i);
      xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator()(v8, FirstDimension, Range, v11);
    }
  }
}

void xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator()(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  int *v15;
  int v16;
  int v17;
  unsigned int v18;
  unint64_t v19;
  float *v20;
  float *v21;
  float *v22;
  unint64_t v23;
  float v24;
  float v25;
  float v26;
  _DWORD *v27;
  int *v28;
  int v29;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36;

  v8 = *(unsigned int **)(a1 + 8);
  v9 = (unsigned int *)(**(_QWORD **)a1 + 88 * a2);
  xgboost::common::HistCollection<float>::operator[](v8, *v9, &v35);
  xgboost::common::ParallelGHistBuilder<float>::ReduceHist((uint64_t)(v8 + 34), a2, a3, a4);
  v10 = v8 + 16;
  xgboost::common::HistCollection<float>::operator[](v8 + 16, *v9, v34);
  v11 = 2 * a3;
  v12 = 2 * a4;
  if (v12 > 2 * a3)
  {
    v13 = v12 - v11;
    v14 = (_DWORD *)(v34[1] + 8 * a3);
    v15 = (int *)(v36 + 8 * a3);
    do
    {
      v16 = *v15++;
      *v14++ = v16;
      --v13;
    }
    while (v13);
  }
  v17 = *(_DWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 16) + 160) + 20 * (int)*v9);
  if (v17 != -1)
  {
    v18 = *(_DWORD *)(**(_QWORD **)(a1 + 24) + 88 * a2);
    xgboost::common::HistCollection<float>::operator[](v8 + 16, v17 & 0x7FFFFFFF, v33);
    xgboost::common::HistCollection<float>::operator[](v8, v18, &v31);
    v19 = v12 - v11;
    if (v12 <= v11)
    {
      xgboost::common::HistCollection<float>::operator[](v10, v18, v30);
    }
    else
    {
      v20 = (float *)(v32 + 8 * a3);
      v21 = (float *)(v36 + 8 * a3);
      v22 = (float *)(v33[1] + 8 * a3);
      v23 = v12 - v11;
      do
      {
        v24 = *v22++;
        v25 = v24;
        v26 = *v21++;
        *v20++ = v25 - v26;
        --v23;
      }
      while (v23);
      xgboost::common::HistCollection<float>::operator[](v10, v18, v30);
      v27 = (_DWORD *)(v30[1] + 8 * a3);
      v28 = (int *)(v32 + 8 * a3);
      do
      {
        v29 = *v28++;
        *v27++ = v29;
        --v19;
      }
      while (v19);
    }
  }
}

void xgboost::common::ParallelGHistBuilder<float>::ReduceHist(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  std::string *Entry;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  std::string *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  float *v34;
  float *v35;
  float v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;

  v41 = a3;
  v42 = a2;
  v40 = a4;
  if (a4 <= a3)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v37);
    if (v37)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v39);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/../common/../data/../common/hist_util.h");
      v6 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v39);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: ", 14);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"end > begin", 11);
      v9 = *(char *)(v37 + 23);
      v10 = v9 >= 0 ? v37 : *(_QWORD *)v37;
      v11 = v9 >= 0 ? *(unsigned __int8 *)(v37 + 23) : *(_QWORD *)(v37 + 8);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v39);
      v13 = v37;
      v37 = 0;
      if (v13)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v37, v13);
    }
  }
  if (v42 >= *(_QWORD *)(a1 + 16))
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v37);
    if (v37)
    {
      v14 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v39);
      dmlc::LogMessageFatal::Entry::Init(v14, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/../common/../data/../common/hist_util.h");
      v15 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v39);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Check failed: ", 14);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"nid < nodes_", 12);
      v18 = *(char *)(v37 + 23);
      v19 = v18 >= 0 ? v37 : *(_QWORD *)v37;
      v20 = v18 >= 0 ? *(unsigned __int8 *)(v37 + 23) : *(_QWORD *)(v37 + 8);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v39);
      v22 = v37;
      v37 = 0;
      if (v22)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v37, v22);
    }
  }
  v23 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 16 * v42 + 8);
  v24 = *(_QWORD *)(a1 + 8);
  if (v24)
  {
    v25 = 0;
    v26 = 0;
    while (2)
    {
      v27 = *(_QWORD *)(a1 + 16);
      v28 = (_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * (v42 + v26 * v27));
      v29 = 4 * v27;
      while (!*v28)
      {
        v28 = (_DWORD *)((char *)v28 + v29);
        if (++v26 >= v24)
        {
          if ((v25 & 1) != 0)
            return;
          goto LABEL_37;
        }
      }
      v37 = v26;
      v38 = v42;
      v30 = *(_DWORD *)std::map<std::pair<unsigned long,unsigned long>,int>::at(a1 + 160, &v37);
      if (v30 == -1)
      {
        v31 = (uint64_t *)(*(_QWORD *)(a1 + 136) + 16 * v42 + 8);
      }
      else
      {
        xgboost::common::HistCollection<float>::operator[]((unsigned int *)(a1 + 24), v30, &v37);
        v31 = (uint64_t *)&v38;
      }
      v32 = *v31;
      if (v23 != *v31 && 2 * v40 > 2 * v41)
      {
        v33 = 2 * v40 - 2 * v41;
        v34 = (float *)(v23 + 8 * v41);
        v35 = (float *)(v32 + 8 * v41);
        do
        {
          v36 = *v35++;
          *v34 = v36 + *v34;
          ++v34;
          --v33;
        }
        while (v33);
      }
      v24 = *(_QWORD *)(a1 + 8);
      ++v26;
      v25 = 1;
      if (v26 < v24)
        continue;
      break;
    }
  }
  else
  {
LABEL_37:
    bzero((void *)(v23 + 8 * v41), 8 * (v40 - v41));
  }
}

void sub_220EE6CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v15;

  v15 = a9;
  a9 = 0;
  if (v15)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a9, v15);
  _Unwind_Resume(exception_object);
}

void xgboost::common::ParallelFor2d<xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::ParallelSubtractionHist(xgboost::common::BlockedSpace2d const&,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::RegTree const*)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(_QWORD *a1, int a2, uint64_t a3)
{
  std::string *Entry;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  void *ptr;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  _QWORD v14[4];
  uint64_t v15;
  _DWORD v16[2];
  int v17;
  std::exception_ptr v18;
  std::mutex v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v15 = (uint64_t)(a1[1] - *a1) >> 4;
  v17 = a2;
  v16[0] = a2;
  v16[1] = 1;
  if (a2 < 1)
  {
    dmlc::LogCheckFormat<int,int>((uint64_t *)&v18);
    if (v18.__ptr_)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/../common/../data/../common/threading_utils.h");
      v6 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: ", 14);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"nthreads >= 1", 13);
      v9 = *((char *)v18.__ptr_ + 23);
      if (v9 >= 0)
        ptr = v18.__ptr_;
      else
        ptr = *(void **)v18.__ptr_;
      if (v9 >= 0)
        v11 = *((unsigned __int8 *)v18.__ptr_ + 23);
      else
        v11 = *((_QWORD *)v18.__ptr_ + 1);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)ptr, v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v17);
      v13 = v18.__ptr_;
      v18.__ptr_ = 0;
      if (v13)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v18, (uint64_t)v13);
    }
  }
  v18.__ptr_ = 0;
  v19.__m_.__sig = 850045863;
  memset(v19.__m_.__opaque, 0, sizeof(v19.__m_.__opaque));
  v14[0] = &v15;
  v14[1] = v16;
  v14[2] = a3;
  v14[3] = a1;
  dmlc::OMPException::Run<void xgboost::common::ParallelFor2d<xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::ParallelSubtractionHist(xgboost::common::BlockedSpace2d const&,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::RegTree const*)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::ParallelSubtractionHist(xgboost::common::BlockedSpace2d const&,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::RegTree const*)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}>((uint64_t)&v18, (uint64_t)v14);
  dmlc::OMPException::Rethrow(&v18);
  std::mutex::~mutex(&v19);
  std::exception_ptr::~exception_ptr(&v18);
}

void sub_220EE6EA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, char a17, std::exception_ptr a18)
{
  _Unwind_Resume(exception_object);
}

void dmlc::OMPException::Run<void xgboost::common::ParallelFor2d<xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::ParallelSubtractionHist(xgboost::common::BlockedSpace2d const&,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::RegTree const*)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::ParallelSubtractionHist(xgboost::common::BlockedSpace2d const&,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::RegTree const*)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t i;
  uint64_t v8;
  uint64_t FirstDimension;
  uint64_t Range;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int *v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  float *v19;
  float *v20;
  float *v21;
  float v22;
  float v23;
  float v24;
  _QWORD v25[2];
  _QWORD v26[2];
  _QWORD v27[2];

  v2 = **(_QWORD **)a2;
  v3 = **(int **)(a2 + 8);
  if (v2 % v3)
    v4 = v2 / v3 + 1;
  else
    v4 = v2 / v3;
  if (v2 >= v4)
    v5 = v4;
  else
    v5 = **(_QWORD **)a2;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 16);
      FirstDimension = xgboost::common::BlockedSpace2d::GetFirstDimension(*(xgboost::common::BlockedSpace2d **)(a2 + 24), i);
      Range = xgboost::common::BlockedSpace2d::GetRange(*(xgboost::common::BlockedSpace2d **)(a2 + 24), i);
      v12 = v11;
      v13 = (unsigned int *)(**(_QWORD **)v8 + 88 * FirstDimension);
      if ((*(_DWORD *)(*(_QWORD *)(**(_QWORD **)(v8 + 8) + 160) + 20 * (int)*v13) & 0x80000000) == 0)
      {
        v14 = Range;
        v15 = *(unsigned int **)(v8 + 16);
        xgboost::common::HistCollection<float>::operator[](v15, *v13, v27);
        v16 = *(_DWORD *)(*(_QWORD *)(**(_QWORD **)(v8 + 8) + 160) + 20 * (int)*v13);
        if (v16 != -1)
        {
          v17 = *(_DWORD *)(**(_QWORD **)(v8 + 24) + 88 * FirstDimension);
          xgboost::common::HistCollection<float>::operator[](v15, v16 & 0x7FFFFFFF, v26);
          xgboost::common::HistCollection<float>::operator[](v15, v17, v25);
          if (2 * v12 > (unint64_t)(2 * v14))
          {
            v18 = 2 * v12 - 2 * v14;
            v19 = (float *)(v27[1] + 8 * v14);
            v20 = (float *)(v25[1] + 8 * v14);
            v21 = (float *)(v26[1] + 8 * v14);
            do
            {
              v22 = *v21++;
              v23 = v22;
              v24 = *v20++;
              *v19++ = v23 - v24;
              --v18;
            }
            while (v18);
          }
        }
      }
    }
  }
}

xgboost::common::BlockedSpace2d *xgboost::common::BlockedSpace2d::BlockedSpace2d<xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long)#2}>(xgboost::common::BlockedSpace2d *this, uint64_t a2, unint64_t *a3, unint64_t a4)
{
  uint64_t i;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  if (a2)
  {
    for (i = 0; i != a2; ++i)
    {
      v9 = *a3;
      if (*a3 % a4)
        v10 = *a3 / a4 + 1;
      else
        v10 = *a3 / a4;
      if (v10)
      {
        v11 = 0;
        do
        {
          if (v9 >= a4 + v11)
            v12 = a4 + v11;
          else
            v12 = v9;
          xgboost::common::BlockedSpace2d::AddBlock(this, i, v11, v12);
          v11 += a4;
          --v10;
        }
        while (v10);
      }
    }
  }
  return this;
}

void sub_220EE71CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  void *v4;

  v3 = *(void **)(v1 + 24);
  if (v3)
  {
    *(_QWORD *)(v1 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::common::ParallelFor2d<xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::SyncHistogramLocal(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(_QWORD *a1, int a2, uint64_t a3)
{
  std::string *Entry;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  void *ptr;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  _QWORD v14[4];
  uint64_t v15;
  _DWORD v16[2];
  int v17;
  std::exception_ptr v18;
  std::mutex v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v15 = (uint64_t)(a1[1] - *a1) >> 4;
  v17 = a2;
  v16[0] = a2;
  v16[1] = 1;
  if (a2 < 1)
  {
    dmlc::LogCheckFormat<int,int>((uint64_t *)&v18);
    if (v18.__ptr_)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/../common/../data/../common/threading_utils.h");
      v6 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: ", 14);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"nthreads >= 1", 13);
      v9 = *((char *)v18.__ptr_ + 23);
      if (v9 >= 0)
        ptr = v18.__ptr_;
      else
        ptr = *(void **)v18.__ptr_;
      if (v9 >= 0)
        v11 = *((unsigned __int8 *)v18.__ptr_ + 23);
      else
        v11 = *((_QWORD *)v18.__ptr_ + 1);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)ptr, v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v17);
      v13 = v18.__ptr_;
      v18.__ptr_ = 0;
      if (v13)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v18, (uint64_t)v13);
    }
  }
  v18.__ptr_ = 0;
  v19.__m_.__sig = 850045863;
  memset(v19.__m_.__opaque, 0, sizeof(v19.__m_.__opaque));
  v14[0] = &v15;
  v14[1] = v16;
  v14[2] = a3;
  v14[3] = a1;
  dmlc::OMPException::Run<void xgboost::common::ParallelFor2d<xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::SyncHistogramLocal(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::SyncHistogramLocal(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}>((uint64_t)&v18, (uint64_t)v14);
  dmlc::OMPException::Rethrow(&v18);
  std::mutex::~mutex(&v19);
  std::exception_ptr::~exception_ptr(&v18);
}

void sub_220EE7378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, char a17, std::exception_ptr a18)
{
  _Unwind_Resume(exception_object);
}

xgboost::common::BlockedSpace2d *xgboost::common::BlockedSpace2d::BlockedSpace2d<xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::SyncHistogramLocal(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long)#1}>(xgboost::common::BlockedSpace2d *this, uint64_t a2, unint64_t *a3, unint64_t a4)
{
  uint64_t i;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  if (a2)
  {
    for (i = 0; i != a2; ++i)
    {
      v9 = *a3;
      if (*a3 % a4)
        v10 = *a3 / a4 + 1;
      else
        v10 = *a3 / a4;
      if (v10)
      {
        v11 = 0;
        do
        {
          if (v9 >= a4 + v11)
            v12 = a4 + v11;
          else
            v12 = v9;
          xgboost::common::BlockedSpace2d::AddBlock(this, i, v11, v12);
          v11 += a4;
          --v10;
        }
        while (v10);
      }
    }
  }
  return this;
}

void sub_220EE7480(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  void *v4;

  v3 = *(void **)(v1 + 24);
  if (v3)
  {
    *(_QWORD *)(v1 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void dmlc::OMPException::Run<void xgboost::common::ParallelFor2d<xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::SyncHistogramLocal(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::SyncHistogramLocal(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t i;
  uint64_t v8;
  unint64_t FirstDimension;
  unint64_t Range;
  unint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  float *v18;
  float *v19;
  float *v20;
  float v21;
  float v22;
  float v23;
  _QWORD v24[2];
  _QWORD v25[2];
  _QWORD v26[2];

  v2 = **(_QWORD **)a2;
  v3 = **(int **)(a2 + 8);
  if (v2 % v3)
    v4 = v2 / v3 + 1;
  else
    v4 = v2 / v3;
  if (v2 >= v4)
    v5 = v4;
  else
    v5 = **(_QWORD **)a2;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 16);
      FirstDimension = xgboost::common::BlockedSpace2d::GetFirstDimension(*(xgboost::common::BlockedSpace2d **)(a2 + 24), i);
      Range = xgboost::common::BlockedSpace2d::GetRange(*(xgboost::common::BlockedSpace2d **)(a2 + 24), i);
      v12 = v11;
      v13 = *(unsigned int **)(v8 + 8);
      v14 = (unsigned int *)(**(_QWORD **)v8 + 88 * FirstDimension);
      xgboost::common::HistCollection<float>::operator[](v13, *v14, v26);
      xgboost::common::ParallelGHistBuilder<float>::ReduceHist((uint64_t)(v13 + 34), FirstDimension, Range, v12);
      v15 = *(_DWORD *)(*(_QWORD *)(**(_QWORD **)(v8 + 16) + 160) + 20 * (int)*v14);
      if (v15 != -1)
      {
        v16 = *(_DWORD *)(**(_QWORD **)(v8 + 24) + 88 * FirstDimension);
        xgboost::common::HistCollection<float>::operator[](v13, v15 & 0x7FFFFFFF, v25);
        xgboost::common::HistCollection<float>::operator[](v13, v16, v24);
        if (2 * v12 > 2 * Range)
        {
          v17 = 2 * v12 - 2 * Range;
          v18 = (float *)(v24[1] + 8 * Range);
          v19 = (float *)(v26[1] + 8 * Range);
          v20 = (float *)(v25[1] + 8 * Range);
          do
          {
            v21 = *v20++;
            v22 = v21;
            v23 = *v19++;
            *v18++ = v22 - v23;
            --v17;
          }
          while (v17);
        }
      }
    }
  }
}

_QWORD *std::vector<xgboost::common::Range1d>::__init_with_size[abi:ne180100]<xgboost::common::Range1d*,xgboost::common::Range1d*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul>>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_220EE771C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry,std::allocator<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry,std::allocator<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry>>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 24 * a2;
  }
}

void std::vector<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry,std::allocator<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry>>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)*a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<unsigned long>>>(v4, v11);
    else
      v12 = 0;
    v14 = &v12[24 * v8];
    v15 = &v12[24 * v11];
    v16 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v14, v16);
    v17 = &v14[v16];
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *(_OWORD *)(v18 - 24);
        *((_DWORD *)v14 - 2) = *((_DWORD *)v18 - 2);
        *(_OWORD *)(v14 - 24) = v20;
        v14 -= 24;
        v18 -= 24;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
      operator delete(v18);
  }
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(xgboost::tree::CPUExpandEntry,xgboost::tree::CPUExpandEntry)>,std::__wrap_iter<xgboost::tree::CPUExpandEntry*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  void *v18;
  void *v19;
  _QWORD *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  int v25;

  if (a4 >= 2)
  {
    v8 = *(_QWORD *)a1;
    v7 = *(_QWORD *)(a1 + 8);
    v25 = *(_DWORD *)(a1 + 16);
    v9 = *(_QWORD *)(a1 + 24);
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    v21 = *(_OWORD *)(a1 + 48);
    v22 = *(_OWORD *)(a1 + 64);
    v23 = *(_QWORD *)(a1 + 80);
    v24 = v7;
    v12 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(xgboost::tree::CPUExpandEntry,xgboost::tree::CPUExpandEntry)> &,std::__wrap_iter<xgboost::tree::CPUExpandEntry*>>(a1, a3, a4);
    v13 = v12;
    if (a2 - 88 == v12)
    {
      *(_QWORD *)v12 = v8;
      *(_QWORD *)(v12 + 8) = v24;
      *(_DWORD *)(v12 + 16) = v25;
      v20 = (_QWORD *)(v12 + 24);
      v19 = *(void **)(v12 + 24);
      if (v19)
      {
        *(_QWORD *)(v13 + 32) = v19;
        operator delete(v19);
        *v20 = 0;
        *(_QWORD *)(v13 + 32) = 0;
        *(_QWORD *)(v13 + 40) = 0;
      }
      *(_QWORD *)(v13 + 24) = v9;
      *(_QWORD *)(v13 + 32) = v10;
      *(_QWORD *)(v13 + 40) = v11;
      *(_OWORD *)(v13 + 48) = v21;
      *(_OWORD *)(v13 + 64) = v22;
      *(_QWORD *)(v13 + 80) = v23;
    }
    else
    {
      *(_QWORD *)v12 = *(_QWORD *)(a2 - 88);
      v14 = *(_QWORD *)(a2 - 80);
      *(_DWORD *)(v12 + 16) = *(_DWORD *)(a2 - 72);
      *(_QWORD *)(v12 + 8) = v14;
      std::vector<float>::__move_assign(v12 + 24, (__n128 *)(a2 - 64));
      v15 = *(_OWORD *)(a2 - 40);
      v16 = *(_OWORD *)(a2 - 24);
      *(_QWORD *)(v13 + 80) = *(_QWORD *)(a2 - 8);
      *(_OWORD *)(v13 + 48) = v15;
      *(_OWORD *)(v13 + 64) = v16;
      v17 = v13 + 88;
      *(_QWORD *)(a2 - 88) = v8;
      *(_QWORD *)(a2 - 80) = v24;
      *(_DWORD *)(a2 - 72) = v25;
      v18 = *(void **)(a2 - 64);
      if (v18)
      {
        *(_QWORD *)(a2 - 56) = v18;
        operator delete(v18);
        *(_QWORD *)(a2 - 64) = 0;
        *(_QWORD *)(a2 - 56) = 0;
        *(_QWORD *)(a2 - 48) = 0;
      }
      *(_QWORD *)(a2 - 64) = v9;
      *(_QWORD *)(a2 - 56) = v10;
      *(_QWORD *)(a2 - 48) = v11;
      *(_OWORD *)(a2 - 40) = v21;
      *(_OWORD *)(a2 - 24) = v22;
      *(_QWORD *)(a2 - 8) = v23;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(xgboost::tree::CPUExpandEntry,xgboost::tree::CPUExpandEntry)> &,std::__wrap_iter<xgboost::tree::CPUExpandEntry*>>(a1, v17, a3, 0x2E8BA2E8BA2E8BA3 * ((v17 - a1) >> 3));
    }
  }
}

void sub_220EE7AB4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(xgboost::tree::CPUExpandEntry,xgboost::tree::CPUExpandEntry)> &,std::__wrap_iter<xgboost::tree::CPUExpandEntry*>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v24;
  _QWORD v26[2];
  int v27;
  void *__p;
  void *v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _QWORD v34[2];
  int v35;
  void *v36;
  void *v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v4 = 0;
  v5 = a3 - 2;
  if (a3 < 2)
    v5 = a3 - 1;
  v24 = v5 >> 1;
  do
  {
    v6 = a1;
    v7 = v4 + 1;
    a1 += 88 * (v4 + 1);
    v8 = 2 * v4;
    v4 = (2 * v4) | 1;
    v9 = v8 + 2;
    if (v8 + 2 >= a3)
      goto LABEL_11;
    v34[0] = *(_QWORD *)a1;
    v10 = v6 + 88 * v7;
    v11 = *(_QWORD *)(v10 + 8);
    v35 = *(_DWORD *)(v10 + 16);
    v34[1] = v11;
    v37 = 0;
    v38 = 0;
    v36 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v36, *(const void **)(v10 + 24), *(_QWORD *)(v10 + 32), (uint64_t)(*(_QWORD *)(v10 + 32) - *(_QWORD *)(v10 + 24)) >> 2);
    v12 = *(_OWORD *)(v10 + 48);
    v13 = *(_OWORD *)(v10 + 64);
    v41 = *(_QWORD *)(v10 + 80);
    v39 = v12;
    v40 = v13;
    v26[0] = *(_QWORD *)(a1 + 88);
    v14 = *(_QWORD *)(a1 + 96);
    v27 = *(_DWORD *)(a1 + 104);
    v26[1] = v14;
    v29 = 0;
    v30 = 0;
    __p = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(a1 + 112), *(_QWORD *)(a1 + 120), (uint64_t)(*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112)) >> 2);
    v15 = *(_OWORD *)(a1 + 136);
    v16 = *(_OWORD *)(a1 + 152);
    v33 = *(_QWORD *)(a1 + 168);
    v31 = v15;
    v32 = v16;
    v17 = *(_QWORD *)(a2 + 24);
    if (!v17)
      std::__throw_bad_function_call[abi:ne180100]();
    v18 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, v34, v26);
    if (__p)
    {
      v29 = __p;
      operator delete(__p);
    }
    if (v36)
    {
      v37 = v36;
      operator delete(v36);
      if ((v18 & 1) == 0)
        goto LABEL_11;
LABEL_10:
      a1 += 88;
      v4 = v9;
      goto LABEL_11;
    }
    if (v18)
      goto LABEL_10;
LABEL_11:
    *(_QWORD *)v6 = *(_QWORD *)a1;
    v19 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(v6 + 16) = *(_DWORD *)(a1 + 16);
    *(_QWORD *)(v6 + 8) = v19;
    std::vector<float>::__move_assign(v6 + 24, (__n128 *)(a1 + 24));
    v20 = *(_OWORD *)(a1 + 48);
    v21 = *(_OWORD *)(a1 + 64);
    *(_QWORD *)(v6 + 80) = *(_QWORD *)(a1 + 80);
    *(_OWORD *)(v6 + 48) = v20;
    *(_OWORD *)(v6 + 64) = v21;
  }
  while (v4 <= v24);
  return a1;
}

void sub_220EE7CC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  if (__p)
    operator delete(__p);
  if (a28)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

__n128 std::vector<xgboost::tree::CPUExpandEntry>::__construct_one_at_end[abi:ne180100]<xgboost::tree::CPUExpandEntry&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;

  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)(v4 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 2);
  result = *(__n128 *)(a2 + 48);
  v7 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(v4 + 80) = *(_QWORD *)(a2 + 80);
  *(__n128 *)(v4 + 48) = result;
  *(_OWORD *)(v4 + 64) = v7;
  *(_QWORD *)(a1 + 8) = v4 + 88;
  return result;
}

void sub_220EE7D7C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<xgboost::tree::CPUExpandEntry>::__emplace_back_slow_path<xgboost::tree::CPUExpandEntry&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _QWORD v19[2];
  char *v20;
  char *v21;
  uint64_t *v22;

  v3 = *a1;
  v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2E8BA2E8BA2E8BALL)
    std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x1745D1745D1745DLL)
    v9 = 0x2E8BA2E8BA2E8BALL;
  else
    v9 = v5;
  v22 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::io::FileInfo>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[88 * v4];
  v19[0] = v10;
  v19[1] = v11;
  v20 = v11;
  v21 = &v10[88 * v9];
  *(_QWORD *)v11 = *(_QWORD *)a2;
  v12 = *(_QWORD *)(a2 + 8);
  v13 = *(_DWORD *)(a2 + 16);
  *((_QWORD *)v11 + 3) = 0;
  v11 += 24;
  *((_DWORD *)v11 - 2) = v13;
  *((_QWORD *)v11 - 2) = v12;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v11, *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 2);
  v14 = &v10[88 * v4];
  v15 = *(_OWORD *)(a2 + 48);
  v16 = *(_OWORD *)(a2 + 64);
  *((_QWORD *)v14 + 10) = *(_QWORD *)(a2 + 80);
  *((_OWORD *)v14 + 3) = v15;
  *((_OWORD *)v14 + 4) = v16;
  v20 += 88;
  std::vector<xgboost::tree::CPUExpandEntry>::__swap_out_circular_buffer(a1, v19);
  v17 = a1[1];
  std::__split_buffer<xgboost::tree::CPUExpandEntry>::~__split_buffer((uint64_t)v19);
  return v17;
}

void sub_220EE7ECC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<xgboost::tree::CPUExpandEntry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<xgboost::tree::CPUExpandEntry>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<xgboost::tree::CPUExpandEntry>,std::reverse_iterator<xgboost::tree::CPUExpandEntry*>,std::reverse_iterator<xgboost::tree::CPUExpandEntry*>,std::reverse_iterator<xgboost::tree::CPUExpandEntry*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<xgboost::tree::CPUExpandEntry>,std::reverse_iterator<xgboost::tree::CPUExpandEntry*>,std::reverse_iterator<xgboost::tree::CPUExpandEntry*>,std::reverse_iterator<xgboost::tree::CPUExpandEntry*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  v7 = a7;
  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  if (a3 == a5)
  {
    v12 = a6;
  }
  else
  {
    do
    {
      v8 = *(_QWORD *)(a3 - 88);
      a3 -= 88;
      *(_QWORD *)(v7 - 88) = v8;
      v9 = *(_QWORD *)(a3 + 8);
      *(_DWORD *)(v7 - 72) = *(_DWORD *)(a3 + 16);
      *(_QWORD *)(v7 - 80) = v9;
      *(_QWORD *)(v7 - 56) = 0;
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 64) = 0;
      *(_OWORD *)(v7 - 64) = *(_OWORD *)(a3 + 24);
      *(_QWORD *)(v7 - 48) = *(_QWORD *)(a3 + 40);
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      v10 = *(_QWORD *)(a3 + 80);
      v11 = *(_OWORD *)(a3 + 64);
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 + 48);
      *(_QWORD *)(v7 - 8) = v10;
      *(_OWORD *)(v7 - 24) = v11;
      v7 = *((_QWORD *)&v17 + 1) - 88;
      *((_QWORD *)&v17 + 1) -= 88;
    }
    while (a3 != a5);
    v12 = v17;
  }
  v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::tree::CPUExpandEntry>,std::reverse_iterator<xgboost::tree::CPUExpandEntry*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v12;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::tree::CPUExpandEntry>,std::reverse_iterator<xgboost::tree::CPUExpandEntry*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::tree::CPUExpandEntry>,std::reverse_iterator<xgboost::tree::CPUExpandEntry*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::tree::CPUExpandEntry>,std::reverse_iterator<xgboost::tree::CPUExpandEntry*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)(v1 + 24);
    if (v3)
    {
      *(_QWORD *)(v1 + 32) = v3;
      operator delete(v3);
    }
    v1 += 88;
  }
}

uint64_t std::__split_buffer<xgboost::tree::CPUExpandEntry>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<xgboost::tree::CPUExpandEntry>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<xgboost::tree::CPUExpandEntry>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    *(_QWORD *)(a1 + 16) = v2 - 88;
    v5 = *(void **)(v2 - 64);
    if (v5)
    {
      *(_QWORD *)(v2 - 56) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 88;
    }
  }
}

void std::vector<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry,std::allocator<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry>>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

__n128 std::vector<xgboost::tree::CPUExpandEntry>::__construct_one_at_end[abi:ne180100]<xgboost::tree::CPUExpandEntry const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;

  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)(v4 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 2);
  result = *(__n128 *)(a2 + 48);
  v7 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(v4 + 80) = *(_QWORD *)(a2 + 80);
  *(__n128 *)(v4 + 48) = result;
  *(_OWORD *)(v4 + 64) = v7;
  *(_QWORD *)(a1 + 8) = v4 + 88;
  return result;
}

void sub_220EE81B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<xgboost::tree::CPUExpandEntry>::__push_back_slow_path<xgboost::tree::CPUExpandEntry const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _QWORD v19[2];
  char *v20;
  char *v21;
  uint64_t *v22;

  v3 = *a1;
  v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2E8BA2E8BA2E8BALL)
    std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x1745D1745D1745DLL)
    v9 = 0x2E8BA2E8BA2E8BALL;
  else
    v9 = v5;
  v22 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::io::FileInfo>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[88 * v4];
  v19[0] = v10;
  v19[1] = v11;
  v20 = v11;
  v21 = &v10[88 * v9];
  *(_QWORD *)v11 = *(_QWORD *)a2;
  v12 = *(_QWORD *)(a2 + 8);
  v13 = *(_DWORD *)(a2 + 16);
  *((_QWORD *)v11 + 3) = 0;
  v11 += 24;
  *((_DWORD *)v11 - 2) = v13;
  *((_QWORD *)v11 - 2) = v12;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v11, *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 2);
  v14 = &v10[88 * v4];
  v15 = *(_OWORD *)(a2 + 48);
  v16 = *(_OWORD *)(a2 + 64);
  *((_QWORD *)v14 + 10) = *(_QWORD *)(a2 + 80);
  *((_OWORD *)v14 + 3) = v15;
  *((_OWORD *)v14 + 4) = v16;
  v20 += 88;
  std::vector<xgboost::tree::CPUExpandEntry>::__swap_out_circular_buffer(a1, v19);
  v17 = a1[1];
  std::__split_buffer<xgboost::tree::CPUExpandEntry>::~__split_buffer((uint64_t)v19);
  return v17;
}

void sub_220EE8304(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<xgboost::tree::CPUExpandEntry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<xgboost::tree::CPUExpandEntry>::__emplace_back_slow_path<xgboost::tree::CPUExpandEntry const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _QWORD v19[2];
  char *v20;
  char *v21;
  uint64_t *v22;

  v3 = *a1;
  v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2E8BA2E8BA2E8BALL)
    std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x1745D1745D1745DLL)
    v9 = 0x2E8BA2E8BA2E8BALL;
  else
    v9 = v5;
  v22 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::io::FileInfo>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[88 * v4];
  v19[0] = v10;
  v19[1] = v11;
  v20 = v11;
  v21 = &v10[88 * v9];
  *(_QWORD *)v11 = *(_QWORD *)a2;
  v12 = *(_QWORD *)(a2 + 8);
  v13 = *(_DWORD *)(a2 + 16);
  *((_QWORD *)v11 + 3) = 0;
  v11 += 24;
  *((_DWORD *)v11 - 2) = v13;
  *((_QWORD *)v11 - 2) = v12;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v11, *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 2);
  v14 = &v10[88 * v4];
  v15 = *(_OWORD *)(a2 + 48);
  v16 = *(_OWORD *)(a2 + 64);
  *((_QWORD *)v14 + 10) = *(_QWORD *)(a2 + 80);
  *((_OWORD *)v14 + 3) = v15;
  *((_OWORD *)v14 + 4) = v16;
  v20 += 88;
  std::vector<xgboost::tree::CPUExpandEntry>::__swap_out_circular_buffer(a1, v19);
  v17 = a1[1];
  std::__split_buffer<xgboost::tree::CPUExpandEntry>::~__split_buffer((uint64_t)v19);
  return v17;
}

void sub_220EE8460(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<xgboost::tree::CPUExpandEntry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *xgboost::common::PartitionBuilder<2048ul>::CalculateRowOffsets(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD **v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;

  v1 = result[3];
  v2 = ((result[4] - v1) >> 3) - 1;
  if ((result[4] - v1) >> 3 != 1)
  {
    v3 = 0;
    v4 = *result;
    do
    {
      v5 = *(_QWORD *)(v1 + 8 * v3);
      v6 = v3 + 1;
      v7 = *(_QWORD *)(v1 + 8 * (v3 + 1));
      if (v5 >= v7)
      {
        v8 = 0;
      }
      else
      {
        v8 = 0;
        v9 = (_QWORD **)(result[6] + 16 * v5);
        do
        {
          v10 = *v9;
          v9 += 2;
          v10[2] = v8;
          v8 += *v10;
          ++v5;
          v7 = *(_QWORD *)(v1 + 8 * v6);
        }
        while (v5 < v7);
        v5 = *(_QWORD *)(v1 + 8 * v3);
      }
      if (v5 >= v7)
      {
        v11 = 0;
      }
      else
      {
        v11 = 0;
        v12 = (uint64_t *)(result[6] + 16 * v5);
        do
        {
          v13 = *v12;
          v12 += 2;
          *(_QWORD *)(v13 + 24) = v11 + v8;
          v11 += *(_QWORD *)(v13 + 8);
          ++v5;
        }
        while (v5 < *(_QWORD *)(v1 + 8 * v6));
      }
      v14 = (_QWORD *)(v4 + 16 * v3);
      *v14 = v8;
      v14[1] = v11;
      v3 = v6;
    }
    while (v6 != v2);
  }
  return result;
}

void xgboost::common::RowSetCollection::AddSplit(xgboost::common::RowSetCollection *this, unsigned int a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::string *Entry;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  std::string *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  std::string *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  std::string *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  std::string *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  int v68;
  uint64_t v69;
  unint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v74 = a5;
  v73 = a6;
  v10 = (uint64_t *)((char *)this + 24);
  v11 = *((_QWORD *)this + 3) + 24 * a2;
  v12 = *(_QWORD *)(v11 + 16);
  v71 = *(_OWORD *)v11;
  v72 = v12;
  v13 = v71;
  if ((_QWORD)v71)
  {
    v14 = v71;
  }
  else
  {
    LODWORD(v70) = 0;
    if (a5)
    {
      dmlc::LogCheckFormat<unsigned long,int>((uint64_t *)&v67);
      if ((_QWORD)v67)
      {
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v70);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/../common/../data/../common/row_set.h");
        v16 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v70);
        v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Check failed: ", 14);
        v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"n_left == 0", 11);
        v19 = *(char *)(v67 + 23);
        v20 = v19 >= 0 ? v67 : *(_QWORD *)v67;
        v21 = v19 >= 0 ? *(unsigned __int8 *)(v67 + 23) : *(_QWORD *)(v67 + 8);
        v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v70);
        v23 = v67;
        *(_QWORD *)&v67 = 0;
        if (v23)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v67, v23);
      }
    }
    LODWORD(v70) = 0;
    if (v73)
    {
      dmlc::LogCheckFormat<unsigned long,int>((uint64_t *)&v67);
      if ((_QWORD)v67)
      {
        v24 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v70);
        dmlc::LogMessageFatal::Entry::Init(v24, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/../common/../data/../common/row_set.h");
        v25 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v70);
        v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Check failed: ", 14);
        v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"n_right == 0", 12);
        v28 = *(char *)(v67 + 23);
        v29 = v28 >= 0 ? v67 : *(_QWORD *)v67;
        v30 = v28 >= 0 ? *(unsigned __int8 *)(v67 + 23) : *(_QWORD *)(v67 + 8);
        v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, v29, v30);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v70);
        v32 = v67;
        *(_QWORD *)&v67 = 0;
        if (v32)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v67, v32);
      }
    }
    v14 = 0;
    a5 = v74;
    a6 = v73;
    v13 = v71;
  }
  v69 = (*((_QWORD *)&v71 + 1) - v13) >> 3;
  v70 = a5 + a6;
  if (a5 + a6 != v69)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v67);
    if ((_QWORD)v67)
    {
      v33 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v70);
      dmlc::LogMessageFatal::Entry::Init(v33, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/../common/../data/../common/row_set.h");
      v34 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v70);
      v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Check failed: ", 14);
      v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"n_left + n_right == e.Size()", 28);
      v37 = *(char *)(v67 + 23);
      v38 = v37 >= 0 ? v67 : *(_QWORD *)v67;
      v39 = v37 >= 0 ? *(unsigned __int8 *)(v67 + 23) : *(_QWORD *)(v67 + 8);
      v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, v38, v39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v70);
      v41 = v67;
      *(_QWORD *)&v67 = 0;
      if (v41)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v67, v41);
    }
  }
  v70 = v14 + 8 * v74;
  if (v70 > *((_QWORD *)&v71 + 1))
  {
    dmlc::LogCheckFormat<unsigned long *,unsigned long const*>((uint64_t *)&v67);
    if ((_QWORD)v67)
    {
      v42 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v70);
      dmlc::LogMessageFatal::Entry::Init(v42, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/../common/../data/../common/row_set.h");
      v43 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v70);
      v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Check failed: ", 14);
      v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"begin + n_left <= e.end", 23);
      v46 = *(char *)(v67 + 23);
      v47 = v46 >= 0 ? v67 : *(_QWORD *)v67;
      v48 = v46 >= 0 ? *(unsigned __int8 *)(v67 + 23) : *(_QWORD *)(v67 + 8);
      v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, v47, v48);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v70);
      v50 = v67;
      *(_QWORD *)&v67 = 0;
      if (v50)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v67, v50);
    }
  }
  v70 = v14 + 8 * v74 + 8 * v73;
  if (v70 != *((_QWORD *)&v71 + 1))
  {
    dmlc::LogCheckFormat<unsigned long *,unsigned long const*>((uint64_t *)&v67);
    if ((_QWORD)v67)
    {
      v51 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v70);
      dmlc::LogMessageFatal::Entry::Init(v51, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/../common/../data/../common/row_set.h");
      v52 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v70);
      v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"Check failed: ", 14);
      v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"begin + n_left + n_right == e.end", 33);
      v55 = *(char *)(v67 + 23);
      v56 = v55 >= 0 ? v67 : *(_QWORD *)v67;
      v57 = v55 >= 0 ? *(unsigned __int8 *)(v67 + 23) : *(_QWORD *)(v67 + 8);
      v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, v56, v57);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v70);
      v59 = v67;
      *(_QWORD *)&v67 = 0;
      if (v59)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v67, v59);
    }
  }
  v60 = *((_QWORD *)this + 3);
  v61 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 4) - v60) >> 3);
  if (v61 <= a3)
  {
    v67 = 0uLL;
    v68 = -1;
    std::vector<xgboost::common::RowSetCollection::Elem>::resize((uint64_t)v10, a3 + 1, &v67);
    v60 = *((_QWORD *)this + 3);
    v61 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 4) - v60) >> 3);
  }
  if (v61 <= a4)
  {
    v67 = 0uLL;
    v68 = -1;
    std::vector<xgboost::common::RowSetCollection::Elem>::resize((uint64_t)v10, a4 + 1, &v67);
    v60 = *v10;
  }
  v62 = v14 + 8 * v74;
  v63 = v60 + 24 * a3;
  *(_QWORD *)v63 = v14;
  *(_QWORD *)(v63 + 8) = v62;
  *(_DWORD *)(v63 + 16) = a3;
  v64 = *((_QWORD *)&v71 + 1);
  v65 = *v10 + 24 * a4;
  *(_QWORD *)v65 = v62;
  *(_QWORD *)(v65 + 8) = v64;
  *(_DWORD *)(v65 + 16) = a4;
  v66 = *v10 + 24 * a2;
  *(_QWORD *)v66 = 0;
  *(_QWORD *)(v66 + 8) = 0;
  *(_DWORD *)(v66 + 16) = -1;
}

void sub_220EE8A28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v15;

  v15 = a10;
  a10 = 0;
  if (v15)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a10, v15);
  _Unwind_Resume(exception_object);
}

void sub_220EE8A78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x220EE8A5CLL);
}

void sub_220EE8A88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x220EE8A5CLL);
}

void sub_220EE8A98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x220EE8A5CLL);
}

void std::vector<std::shared_ptr<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>>::resize(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = (v3 - *(_QWORD *)a1) >> 4;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *(_QWORD *)a1 + 16 * a2;
      while (v3 != v5)
        v3 = std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v3 - 16);
      *(_QWORD *)(a1 + 8) = v5;
    }
  }
  else
  {
    std::vector<std::shared_ptr<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>>::__append((char **)a1, a2 - v4);
  }
}

void std::vector<std::shared_ptr<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  int64x2_t v20;
  char *v21;
  uint64_t v22;
  int64x2_t v23;
  char *v24;
  uint64_t v25;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - *a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = v5 - *a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v25 = v4;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WQSummary<float,float>::Entry>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v10];
    v15 = &v13[16 * v12];
    v24 = v15;
    bzero(v14, 16 * a2);
    v16 = &v14[16 * a2];
    v23.i64[1] = (uint64_t)v16;
    v18 = *a1;
    v17 = a1[1];
    if (v17 == *a1)
    {
      v20 = vdupq_n_s64((unint64_t)v17);
    }
    else
    {
      do
      {
        v19 = *((_OWORD *)v17 - 1);
        v17 -= 16;
        *((_OWORD *)v14 - 1) = v19;
        v14 -= 16;
        *(_QWORD *)v17 = 0;
        *((_QWORD *)v17 + 1) = 0;
      }
      while (v17 != v18);
      v20 = *(int64x2_t *)a1;
      v16 = (char *)v23.i64[1];
      v15 = v24;
    }
    *a1 = v14;
    a1[1] = v16;
    v23 = v20;
    v21 = a1[2];
    a1[2] = v15;
    v24 = v21;
    v22 = v20.i64[0];
    std::__split_buffer<std::shared_ptr<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>>::~__split_buffer((uint64_t)&v22);
  }
}

uint64_t std::__split_buffer<std::shared_ptr<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void xgboost::common::PartitionBuilder<2048ul>::AllocateForTask(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (!*(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * a2))
  {
    v4 = operator new();
    std::shared_ptr<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>::reset[abi:ne180100]<xgboost::common::PartitionBuilder<2048ul>::BlockInfo,void>((_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * a2), v4);
  }
}

void std::shared_ptr<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>::reset[abi:ne180100]<xgboost::common::PartitionBuilder<2048ul>::BlockInfo,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>::shared_ptr[abi:ne180100]<xgboost::common::PartitionBuilder<2048ul>::BlockInfo,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

_QWORD *std::shared_ptr<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>::shared_ptr[abi:ne180100]<xgboost::common::PartitionBuilder<2048ul>::BlockInfo,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24E6BBCC8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_220EE8DB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    MEMORY[0x227667068](v1, 0x1000C402BCDB82FLL);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<xgboost::common::PartitionBuilder<2048ul>::BlockInfo *,std::shared_ptr<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>::__shared_ptr_default_delete<xgboost::common::PartitionBuilder<2048ul>::BlockInfo,xgboost::common::PartitionBuilder<2048ul>::BlockInfo>,std::allocator<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227667068);
}

uint64_t std::__shared_ptr_pointer<xgboost::common::PartitionBuilder<2048ul>::BlockInfo *,std::shared_ptr<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>::__shared_ptr_default_delete<xgboost::common::PartitionBuilder<2048ul>::BlockInfo,xgboost::common::PartitionBuilder<2048ul>::BlockInfo>,std::allocator<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x227667068);
  return result;
}

uint64_t std::__shared_ptr_pointer<xgboost::common::PartitionBuilder<2048ul>::BlockInfo *,std::shared_ptr<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>::__shared_ptr_default_delete<xgboost::common::PartitionBuilder<2048ul>::BlockInfo,xgboost::common::PartitionBuilder<2048ul>::BlockInfo>,std::allocator<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t xgboost::common::Index::operator[](_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[3];
  v3 = a1[4];
  if (v2 == v3)
    return ((uint64_t (*)(_QWORD))a1[7])(*a1);
  else
    return *(_DWORD *)(a1[3] + 4 * (a2 % ((v3 - v2) >> 2))) + ((unsigned int (*)(_QWORD))a1[7])(*a1);
}

uint64_t xgboost::common::BinarySearchBin<xgboost::common::Index>(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned int a4, unsigned int a5)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a2 == a1)
    return 0xFFFFFFFFLL;
  v9 = a2;
  v10 = a1;
  v11 = -1;
  do
  {
    v12 = v11;
    v11 = v10 + ((unint64_t)(v9 - v10) >> 1);
    if (v11 == v12)
      break;
    result = xgboost::common::Index::operator[](a3, v10 + ((unint64_t)(v9 - v10) >> 1));
    if (result >= a4 && result < a5)
      return result;
    if (result < a4)
      v10 += (unint64_t)(v9 - v10) >> 1;
    else
      v9 = v10 + ((unint64_t)(v9 - v10) >> 1);
  }
  while (v9 != v10);
  return 0xFFFFFFFFLL;
}

_QWORD *xgboost::common::PartitionBuilder<2048ul>::MergeToArray(_QWORD *result, int a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v5 = 16 * (*(_QWORD *)(result[3] + 8 * a2) + (a3 >> 11));
  v6 = *(_QWORD **)(result[6] + v5);
  v7 = v6[3];
  if (*v6)
  {
    v8 = result;
    result = memmove((void *)(a4 + 8 * v6[2]), v6 + 4, 8 * *v6);
    v9 = *(_QWORD *)(v8[6] + v5);
  }
  else
  {
    v9 = *(_QWORD *)(result[6] + v5);
  }
  v10 = *(_QWORD *)(v9 + 8);
  if (v10)
    return memmove((void *)(a4 + 8 * v7), v6 + 2052, 8 * v10);
  return result;
}

void std::vector<xgboost::common::RowSetCollection::Elem>::resize(uint64_t a1, unint64_t a2, __int128 *a3)
{
  unint64_t v3;
  BOOL v4;
  unint64_t v5;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v4 = a2 >= v3;
  v5 = a2 - v3;
  if (v5 != 0 && v4)
  {
    std::vector<xgboost::common::RowSetCollection::Elem>::__append((void **)a1, v5, a3);
  }
  else if (!v4)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 24 * a2;
  }
}

uint64_t dmlc::LogCheckFormat<unsigned long *,unsigned long const*>@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[11];
  char v7;
  uint64_t v8;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" (", 2);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" vs. ", 5);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)") ", 2);
  v4 = operator new();
  std::stringbuf::str();
  v6[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  *a1 = v4;
  v6[1] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v8);
}

void sub_220EE9150(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x227667068](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<xgboost::common::RowSetCollection::Elem>::__append(void **a1, unint64_t a2, __int128 *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  __int128 v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD **)(v6 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (_BYTE *)v9) >> 3) >= a2)
  {
    if (a2)
    {
      v15 = &v9[3 * a2];
      v16 = 24 * a2;
      do
      {
        v17 = *a3;
        v9[2] = *((_QWORD *)a3 + 2);
        *(_OWORD *)v9 = v17;
        v9 += 3;
        v16 -= 24;
      }
      while (v16);
      v9 = v15;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (_BYTE *)*a1) >> 3);
    v11 = v10 + a2;
    if (v10 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_length_error[abi:ne180100]();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)*a1) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v11;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<unsigned long>>>(v6, v13);
    else
      v14 = 0;
    v18 = &v14[24 * v10];
    v19 = &v18[24 * a2];
    v20 = 24 * a2;
    v21 = v18;
    do
    {
      v22 = *a3;
      *((_QWORD *)v21 + 2) = *((_QWORD *)a3 + 2);
      *(_OWORD *)v21 = v22;
      v21 += 24;
      v20 -= 24;
    }
    while (v20);
    v23 = &v14[24 * v13];
    v25 = (char *)*a1;
    v24 = (char *)a1[1];
    if (v24 != *a1)
    {
      do
      {
        v26 = *(_OWORD *)(v24 - 24);
        *((_DWORD *)v18 - 2) = *((_DWORD *)v24 - 2);
        *(_OWORD *)(v18 - 24) = v26;
        v18 -= 24;
        v24 -= 24;
      }
      while (v24 != v25);
      v24 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v23;
    if (v24)
      operator delete(v24);
  }
}

uint64_t std::vector<xgboost::tree::CPUExpandEntry>::__push_back_slow_path<xgboost::tree::CPUExpandEntry>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _QWORD v17[5];

  v3 = *a1;
  v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2E8BA2E8BA2E8BALL)
    std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x1745D1745D1745DLL)
    v9 = 0x2E8BA2E8BA2E8BALL;
  else
    v9 = v5;
  v17[4] = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::io::FileInfo>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[88 * v4];
  v17[0] = v10;
  v17[1] = v11;
  v17[3] = &v10[88 * v9];
  *(_QWORD *)v11 = *(_QWORD *)a2;
  v12 = *(_QWORD *)(a2 + 8);
  *((_DWORD *)v11 + 4) = *(_DWORD *)(a2 + 16);
  *((_QWORD *)v11 + 1) = v12;
  *((_QWORD *)v11 + 4) = 0;
  *((_QWORD *)v11 + 5) = 0;
  *((_QWORD *)v11 + 3) = 0;
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  *((_QWORD *)v11 + 5) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v13 = *(_OWORD *)(a2 + 48);
  v14 = *(_OWORD *)(a2 + 64);
  *((_QWORD *)v11 + 10) = *(_QWORD *)(a2 + 80);
  *((_OWORD *)v11 + 3) = v13;
  *((_OWORD *)v11 + 4) = v14;
  v17[2] = v11 + 88;
  std::vector<xgboost::tree::CPUExpandEntry>::__swap_out_circular_buffer(a1, v17);
  v15 = a1[1];
  std::__split_buffer<xgboost::tree::CPUExpandEntry>::~__split_buffer((uint64_t)v17);
  return v15;
}

void sub_220EE9438(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<xgboost::tree::CPUExpandEntry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void xgboost::common::ParallelFor2d<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(_QWORD *a1, int a2, uint64_t a3)
{
  std::string *Entry;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  void *ptr;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  _QWORD v14[4];
  uint64_t v15;
  _DWORD v16[2];
  int v17;
  std::exception_ptr v18;
  std::mutex v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v15 = (uint64_t)(a1[1] - *a1) >> 4;
  v17 = a2;
  v16[0] = a2;
  v16[1] = 1;
  if (a2 < 1)
  {
    dmlc::LogCheckFormat<int,int>((uint64_t *)&v18);
    if (v18.__ptr_)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/../common/../data/../common/threading_utils.h");
      v6 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: ", 14);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"nthreads >= 1", 13);
      v9 = *((char *)v18.__ptr_ + 23);
      if (v9 >= 0)
        ptr = v18.__ptr_;
      else
        ptr = *(void **)v18.__ptr_;
      if (v9 >= 0)
        v11 = *((unsigned __int8 *)v18.__ptr_ + 23);
      else
        v11 = *((_QWORD *)v18.__ptr_ + 1);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)ptr, v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v17);
      v13 = v18.__ptr_;
      v18.__ptr_ = 0;
      if (v13)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v18, (uint64_t)v13);
    }
  }
  v18.__ptr_ = 0;
  v19.__m_.__sig = 850045863;
  memset(v19.__m_.__opaque, 0, sizeof(v19.__m_.__opaque));
  v14[0] = &v15;
  v14[1] = v16;
  v14[2] = a3;
  v14[3] = a1;
  dmlc::OMPException::Run<void xgboost::common::ParallelFor2d<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}>((uint64_t)&v18, (uint64_t)v14);
  dmlc::OMPException::Rethrow(&v18);
  std::mutex::~mutex(&v19);
  std::exception_ptr::~exception_ptr(&v18);
}

void sub_220EE95CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, char a17, std::exception_ptr a18)
{
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_220EE9694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<xgboost::DMatrix>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

xgboost::common::BlockedSpace2d *xgboost::common::BlockedSpace2d::BlockedSpace2d<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long)#1}>(xgboost::common::BlockedSpace2d *this, uint64_t a2, _QWORD *a3, unint64_t a4)
{
  uint64_t i;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  if (a2)
  {
    for (i = 0; i != a2; ++i)
    {
      v9 = (uint64_t)(*(_QWORD *)(**(_QWORD **)(*a3 + 16 * i) + 8) - ***(_QWORD ***)(*a3 + 16 * i)) >> 2;
      if (v9 % a4)
        v10 = v9 / a4 + 1;
      else
        v10 = v9 / a4;
      if (v10)
      {
        v11 = 0;
        do
        {
          if (v9 >= a4 + v11)
            v12 = a4 + v11;
          else
            v12 = v9;
          xgboost::common::BlockedSpace2d::AddBlock(this, i, v11, v12);
          v11 += a4;
          --v10;
        }
        while (v10);
      }
    }
  }
  return this;
}

void sub_220EE9768(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  void *v4;

  v3 = *(void **)(v1 + 24);
  if (v3)
  {
    *(_QWORD *)(v1 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<xgboost::tree::CPUExpandEntry>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<xgboost::tree::CPUExpandEntry>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 88 * ((88 * a2 - 88) / 0x58) + 88;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_220EE9828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void dmlc::OMPException::Run<void xgboost::common::ParallelFor2d<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t i;
  uint64_t v8;
  uint64_t FirstDimension;
  unint64_t Range;
  unint64_t v11;

  v2 = **(_QWORD **)a2;
  v3 = **(int **)(a2 + 8);
  if (v2 % v3)
    v4 = v2 / v3 + 1;
  else
    v4 = v2 / v3;
  if (v2 >= v4)
    v5 = v4;
  else
    v5 = **(_QWORD **)a2;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 16);
      FirstDimension = xgboost::common::BlockedSpace2d::GetFirstDimension(*(xgboost::common::BlockedSpace2d **)(a2 + 24), i);
      Range = xgboost::common::BlockedSpace2d::GetRange(*(xgboost::common::BlockedSpace2d **)(a2 + 24), i);
      xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator()(v8, FirstDimension, Range, v11);
    }
  }
}

void xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator()(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  int v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  double v21;
  double *v22;
  double v23;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  int8x16_t v28;
  int8x16_t v29;
  uint64_t *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  xgboost::FeatureInteractionConstraintHost *v38;
  uint64_t v39;
  _QWORD v40[2];
  _QWORD v41[2];
  unint64_t v42[2];
  unint64_t v43[2];
  uint64_t v44[3];
  unint64_t v45[2];
  void *__p;
  uint64_t *v47;
  _QWORD v48[2];
  _QWORD v49[2];
  unint64_t v50[3];

  v8 = *(_QWORD *)(a1 + 8);
  v9 = (unsigned int *)(**(_QWORD **)a1 + 88 * *(int *)(v8 + 184) * a2);
  v10 = *v9;
  v37 = (uint64_t)(v9 + 2);
  xgboost::common::HistCollection<float>::operator[](*(unsigned int **)(a1 + 16), *v9, v50);
  if (a3 < a4)
  {
    v11 = v10;
    v12 = **(uint64_t ***)(**(_QWORD **)(a1 + 24) + 16 * a2);
    v13 = *v12;
    if (a3 <= (v12[1] - *v12) >> 2)
      v14 = (v12[1] - *v12) >> 2;
    else
      v14 = a3;
    v38 = (xgboost::FeatureInteractionConstraintHost *)(v8 + 192);
    v39 = v14;
    v36 = a4;
    do
    {
      if (a3 == v39)
LABEL_32:
        std::terminate();
      v15 = *(unsigned int *)(v13 + 4 * a3);
      v16 = *(unint64_t **)(a1 + 32);
      if (*v16)
      {
        if (*v16 <= v15)
          goto LABEL_32;
        v17 = *(unsigned __int8 *)(v16[1] + v15);
        if (!xgboost::FeatureInteractionConstraintHost::Query(v38, v11, *(_DWORD *)(v13 + 4 * a3)))
          goto LABEL_30;
        if (v17 != 1)
        {
LABEL_15:
          v41[0] = 0;
          v41[1] = 0;
          xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EnumerateSplit<1,(xgboost::tree::SplitType)0>(v8, *(_QWORD *)(a1 + 48), (uint64_t)v41, v50, v15, v11, *(_QWORD **)(a1 + 56), v37);
          v22 = (double *)(*(_QWORD *)(v8 + 296) + 24 * v11);
          if (v23 != *v22 || v21 != v22[1])
          {
            v40[0] = 0;
            v40[1] = 0;
            xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EnumerateSplit<-1,(xgboost::tree::SplitType)0>(v8, *(_QWORD *)(a1 + 48), (uint64_t)v40, v50, v15, v11, *(_QWORD **)(a1 + 56), v37);
          }
          goto LABEL_30;
        }
        v18 = *(_QWORD **)(a1 + 40);
        v19 = (v15 + 1);
        if (v19 >= (uint64_t)(v18[1] - *v18) >> 2)
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        v20 = (*(_DWORD *)(*v18 + 4 * v19) - *(_DWORD *)(*v18 + 4 * v15));
        if (v20 >= *(_DWORD *)(v8 + 28))
        {
          std::vector<unsigned long>::vector(&__p, v20);
          v25 = (uint64_t *)__p;
          v26 = v47;
          if (__p != v47)
          {
            v27 = 0;
            do
              *v25++ = v27++;
            while (v25 != v26);
          }
          xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul>::subspan(v50, *(unsigned int *)(**(_QWORD **)(a1 + 40) + 4 * v15), v20, v45);
          v31 = (unint64_t *)__p;
          v30 = v47;
          v44[0] = *(_QWORD *)(a1 + 56);
          v44[1] = v8;
          v44[2] = (uint64_t)v45;
          v32 = ((char *)v47 - (_BYTE *)__p) >> 3;
          if ((char *)v47 - (_BYTE *)__p < 1025)
          {
            v33 = 0;
            v35 = 0;
          }
          else
          {
            v33 = (uint64_t *)std::get_temporary_buffer[abi:ne180100]<unsigned long>(((char *)v47 - (_BYTE *)__p) >> 3);
            v35 = v34;
          }
          std::__stable_sort<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(v31, v30, v44, v32, v33, v35, v28, v29);
          if (v33)
            operator delete(v33);
          v43[0] = ((char *)v47 - (_BYTE *)__p) >> 3;
          v43[1] = (unint64_t)__p;
          xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EnumerateSplit<1,(xgboost::tree::SplitType)2>(v8, *(_QWORD *)(a1 + 48), v43, v50, v15, v11, *(_QWORD **)(a1 + 56), v37);
          v42[0] = ((char *)v47 - (_BYTE *)__p) >> 3;
          v42[1] = (unint64_t)__p;
          xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EnumerateSplit<-1,(xgboost::tree::SplitType)2>(v8, *(_QWORD *)(a1 + 48), v42, v50, v15, v11, *(_QWORD **)(a1 + 56), v37);
          a4 = v36;
          if (__p)
          {
            v47 = (uint64_t *)__p;
            operator delete(__p);
          }
        }
        else
        {
          v49[0] = 0;
          v49[1] = 0;
          xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EnumerateSplit<1,(xgboost::tree::SplitType)1>(v8, *(_QWORD *)(a1 + 48), (uint64_t)v49, v50, v15, v11, *(_QWORD **)(a1 + 56), v37);
          v48[0] = 0;
          v48[1] = 0;
          xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EnumerateSplit<-1,(xgboost::tree::SplitType)1>(v8, *(_QWORD *)(a1 + 48), (uint64_t)v48, v50, v15, v11, *(_QWORD **)(a1 + 56), v37);
          a4 = v36;
        }
      }
      else if (xgboost::FeatureInteractionConstraintHost::Query(v38, v11, *(_DWORD *)(v13 + 4 * a3)))
      {
        goto LABEL_15;
      }
LABEL_30:
      ++a3;
    }
    while (a3 != a4);
  }
}

void sub_220EE9CB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EnumerateSplit<1,(xgboost::tree::SplitType)1>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, unsigned int a5, int a6, _QWORD *a7, uint64_t a8)
{
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v14;
  unint64_t v15;
  int8x16_t v16;
  int8x16_t v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  unsigned int v23;
  int v24;
  double v25;
  double v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  float *v31;
  float v32;
  double v33;
  double v34;
  double v36;
  double v37;
  float v38;
  std::string *Entry;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  std::string *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  double v59;
  double v60;
  char v61;
  _QWORD *v62;
  double v65[2];
  uint64_t v66[2];
  unint64_t v67[3];

  v8 = *(uint64_t **)(a2 + 16);
  v9 = a5 + 1;
  v10 = *v8;
  if (v9 >= (v8[1] - *v8) >> 2)
    goto LABEL_46;
  v62 = *(_QWORD **)(a2 + 8);
  v14 = *(_QWORD *)(a1 + 296);
  v15 = *(unsigned int *)(v10 + 4 * a5);
  xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul>::subspan(a4, v15, *(_DWORD *)(v10 + 4 * v9) - (int)v15, v67);
  v18 = (_DWORD *)(*v8 + 4 * a5);
  LODWORD(v65[0]) = 0x7FFFFFFF;
  if ((*v18 & 0x80000000) != 0)
  {
    dmlc::LogCheckFormat<unsigned int,unsigned int>(v66);
    if (v66[0])
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v65);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/hist/evaluate_splits.h");
      v40 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v65);
      v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Check failed: ", 14);
      v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"cut_ptr[fidx] <= static_cast<uint32_t>(std::numeric_limits<int32_t>::max())", 75);
      v43 = *(char *)(v66[0] + 23);
      v44 = v43 >= 0 ? v66[0] : *(_QWORD *)v66[0];
      v45 = v43 >= 0 ? *(unsigned __int8 *)(v66[0] + 23) : *(_QWORD *)(v66[0] + 8);
      v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, v44, v45);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v65);
      v47 = v66[0];
      v66[0] = 0;
      if (v47)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v66, v47);
    }
  }
  v19 = (_DWORD *)(*v8 + 4 * v9);
  LODWORD(v65[0]) = 0x7FFFFFFF;
  if ((*v19 & 0x80000000) != 0)
  {
    dmlc::LogCheckFormat<unsigned int,unsigned int>(v66);
    if (v66[0])
    {
      v48 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v65);
      dmlc::LogMessageFatal::Entry::Init(v48, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/hist/evaluate_splits.h");
      v49 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v65);
      v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"Check failed: ", 14);
      v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"cut_ptr[fidx + 1] <= static_cast<uint32_t>(std::numeric_limits<int32_t>::max())", 79);
      v52 = *(char *)(v66[0] + 23);
      v53 = v52 >= 0 ? v66[0] : *(_QWORD *)v66[0];
      v54 = v52 >= 0 ? *(unsigned __int8 *)(v66[0] + 23) : *(_QWORD *)(v66[0] + 8);
      v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, v53, v54);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v65);
      v56 = v66[0];
      v66[0] = 0;
      if (v56)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v66, v56);
    }
  }
  v20 = *v8;
  if (v9 >= (v8[1] - *v8) >> 2)
LABEL_46:
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v21 = *(int *)(v20 + 4 * a5);
  v22 = *(_DWORD *)(v20 + 4 * v9);
  if (v22 != (_DWORD)v21)
  {
    v61 = 0;
    v23 = 0;
    v28 = v14 + 24 * a6;
    v29 = 8 * v21;
    v30 = v22 - v21;
    v27 = 0.0;
    v59 = 0.0;
    v60 = 0.0;
    v25 = 0.0;
    v24 = 0;
    v26 = 0.0;
    while (1)
    {
      if (*a4 <= v21)
        std::terminate();
      v31 = (float *)(a4[1] + v29);
      v32 = v31[1];
      v33 = v32;
      v17.i64[0] = *(_QWORD *)(v28 + 8);
      v34 = *(double *)v17.i64 - v32;
      v17.i32[0] = *(_DWORD *)(a1 + 32);
      if (v32 < *(float *)v17.i32 || v34 < *(float *)v17.i32)
        goto LABEL_19;
      v36 = *v31;
      v16.i64[0] = *(_QWORD *)v28;
      v37 = *(double *)v28 - v36;
      *(double *)v66 = v37;
      *(double *)&v66[1] = v34;
      v65[0] = v36;
      v65[1] = v33;
      xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcSplitGain(a7, (float *)a1, a6, a5, (double *)v66, v65, v16, v17);
      *(float *)v16.i32 = *(double *)v16.i64 - *(float *)(v28 + 16);
      if (fabsf(*(float *)v16.i32) == INFINITY)
        goto LABEL_19;
      if ((v23 & 0x7FFFFFFF) > a5)
        break;
      if (v27 < *(float *)v16.i32)
        goto LABEL_18;
LABEL_19:
      ++v21;
      v29 += 8;
      if (!--v30)
        goto LABEL_20;
    }
    if (v27 > *(float *)v16.i32)
      goto LABEL_19;
LABEL_18:
    v61 = 1;
    v59 = v36;
    v60 = v33;
    v25 = v34;
    v26 = v37;
    v24 = *(_DWORD *)(*v62 + 4 * v21);
    v27 = *(float *)v16.i32;
    v23 = a5;
    goto LABEL_19;
  }
  v61 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0.0;
  v59 = 0.0;
  v60 = 0.0;
  v26 = 0.0;
  v27 = 0.0;
LABEL_20:
  if (fabsf(v27) != INFINITY)
  {
    v38 = *(float *)a8;
    if ((*(_DWORD *)(a8 + 4) & 0x7FFFFFFFu) > (v23 & 0x7FFFFFFF))
    {
      if (v38 > v27)
        return 0.0;
      goto LABEL_43;
    }
    if (v38 < v27)
    {
LABEL_43:
      *(float *)a8 = v27;
      *(_DWORD *)(a8 + 4) = v23;
      *(_DWORD *)(a8 + 8) = v24;
      *(_BYTE *)(a8 + 40) = v61;
      std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a8 + 16), 0, 0, 0);
      *(double *)(a8 + 48) = v26;
      *(double *)(a8 + 56) = v25;
      *(double *)(a8 + 64) = v59;
      *(double *)(a8 + 72) = v60;
    }
  }
  return 0.0;
}

void sub_220EEA11C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18)
{
  _Unwind_Resume(exception_object);
}

double xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EnumerateSplit<-1,(xgboost::tree::SplitType)1>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, unsigned int a5, int a6, _QWORD *a7, uint64_t a8)
{
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v14;
  unint64_t v15;
  int8x16_t v16;
  int8x16_t v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  int v23;
  double v24;
  double v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  float v32;
  double v33;
  double v34;
  double v36;
  double v37;
  float v39;
  std::string *Entry;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  std::string *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  double v60;
  double v61;
  char v62;
  _QWORD *v63;
  double v66[2];
  uint64_t v67[2];
  unint64_t v68[3];

  v8 = *(uint64_t **)(a2 + 16);
  v9 = a5 + 1;
  v10 = *v8;
  if (v9 >= (v8[1] - *v8) >> 2)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v63 = *(_QWORD **)(a2 + 8);
  v14 = *(_QWORD *)(a1 + 296);
  v15 = *(unsigned int *)(v10 + 4 * a5);
  xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul>::subspan(a4, v15, *(_DWORD *)(v10 + 4 * v9) - (int)v15, v68);
  v18 = (_DWORD *)(*v8 + 4 * a5);
  LODWORD(v66[0]) = 0x7FFFFFFF;
  if ((*v18 & 0x80000000) != 0)
  {
    dmlc::LogCheckFormat<unsigned int,unsigned int>(v67);
    if (v67[0])
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v66);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/hist/evaluate_splits.h");
      v41 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v66);
      v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"Check failed: ", 14);
      v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"cut_ptr[fidx] <= static_cast<uint32_t>(std::numeric_limits<int32_t>::max())", 75);
      v44 = *(char *)(v67[0] + 23);
      v45 = v44 >= 0 ? v67[0] : *(_QWORD *)v67[0];
      v46 = v44 >= 0 ? *(unsigned __int8 *)(v67[0] + 23) : *(_QWORD *)(v67[0] + 8);
      v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, v45, v46);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v66);
      v48 = v67[0];
      v67[0] = 0;
      if (v48)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v67, v48);
    }
  }
  v19 = (_DWORD *)(*v8 + 4 * v9);
  LODWORD(v66[0]) = 0x7FFFFFFF;
  if ((*v19 & 0x80000000) != 0)
  {
    dmlc::LogCheckFormat<unsigned int,unsigned int>(v67);
    if (v67[0])
    {
      v49 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v66);
      dmlc::LogMessageFatal::Entry::Init(v49, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/hist/evaluate_splits.h");
      v50 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v66);
      v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"Check failed: ", 14);
      v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"cut_ptr[fidx + 1] <= static_cast<uint32_t>(std::numeric_limits<int32_t>::max())", 79);
      v53 = *(char *)(v67[0] + 23);
      v54 = v53 >= 0 ? v67[0] : *(_QWORD *)v67[0];
      v55 = v53 >= 0 ? *(unsigned __int8 *)(v67[0] + 23) : *(_QWORD *)(v67[0] + 8);
      v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, v54, v55);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v66);
      v57 = v67[0];
      v67[0] = 0;
      if (v57)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v67, v57);
    }
  }
  v20 = *(int *)(*v8 + 4 * v9);
  v21 = *(_DWORD *)(*v8 + 4 * a5);
  if (v21 != (_DWORD)v20)
  {
    v62 = 0;
    v22 = 0;
    v27 = v14 + 24 * a6;
    v28 = 8 * v20;
    v29 = v21 - v20;
    v30 = v20 - 1;
    v26 = 0.0;
    v60 = 0.0;
    v61 = 0.0;
    v24 = 0.0;
    v23 = 0;
    v25 = 0.0;
    while (1)
    {
      if (*a4 <= v30)
        std::terminate();
      v31 = a4[1] + v28;
      v32 = *(float *)(v31 - 4);
      v33 = v32;
      v17.i64[0] = *(_QWORD *)(v27 + 8);
      v34 = *(double *)v17.i64 - v32;
      v17.i32[0] = *(_DWORD *)(a1 + 32);
      if (v32 < *(float *)v17.i32 || v34 < *(float *)v17.i32)
        goto LABEL_18;
      v36 = *(float *)(v31 - 8);
      v16.i64[0] = *(_QWORD *)v27;
      v37 = *(double *)v27 - v36;
      *(double *)v67 = v36;
      *(double *)&v67[1] = v33;
      v66[0] = v37;
      v66[1] = v34;
      xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcSplitGain(a7, (float *)a1, a6, a5, (double *)v67, v66, v16, v17);
      *(float *)v16.i32 = *(double *)v16.i64 - *(float *)(v27 + 16);
      if (fabsf(*(float *)v16.i32) == INFINITY)
        goto LABEL_18;
      if ((v22 & 0x7FFFFFFF) > a5)
        break;
      if (v26 < *(float *)v16.i32)
        goto LABEL_17;
LABEL_18:
      v28 -= 8;
      --v30;
      if (__CFADD__(v29++, 1))
        goto LABEL_20;
    }
    if (v26 > *(float *)v16.i32)
      goto LABEL_18;
LABEL_17:
    v62 = 1;
    v60 = v37;
    v61 = v34;
    v24 = v33;
    v25 = v36;
    v23 = *(_DWORD *)(*v63 + 4 * v30);
    v26 = *(float *)v16.i32;
    v22 = a5 | 0x80000000;
    goto LABEL_18;
  }
  v62 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0.0;
  v60 = 0.0;
  v61 = 0.0;
  v25 = 0.0;
  v26 = 0.0;
LABEL_20:
  if (fabsf(v26) != INFINITY)
  {
    v39 = *(float *)a8;
    if ((*(_DWORD *)(a8 + 4) & 0x7FFFFFFFu) > (v22 & 0x7FFFFFFF))
    {
      if (v39 > v26)
        return 0.0;
      goto LABEL_43;
    }
    if (v39 < v26)
    {
LABEL_43:
      *(float *)a8 = v26;
      *(_DWORD *)(a8 + 4) = v22;
      *(_DWORD *)(a8 + 8) = v23;
      *(_BYTE *)(a8 + 40) = v62;
      std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a8 + 16), 0, 0, 0);
      *(double *)(a8 + 48) = v25;
      *(double *)(a8 + 56) = v24;
      *(double *)(a8 + 64) = v60;
      *(double *)(a8 + 72) = v61;
    }
  }
  return 0.0;
}

void sub_220EEA5A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20)
{
  _Unwind_Resume(exception_object);
}

_QWORD *xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul>::subspan@<X0>(_QWORD *result@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  uint64_t v4;

  if (a3 == -1)
  {
    a3 = *result - a2;
    if (*result < a2)
      goto LABEL_8;
  }
  else if (a3 + a2 > *result)
  {
    goto LABEL_8;
  }
  v4 = result[1];
  *a4 = a3;
  a4[1] = v4 + 8 * a2;
  if (a3 && !v4)
LABEL_8:
    std::terminate();
  return result;
}

__n128 xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EnumerateSplit<1,(xgboost::tree::SplitType)2>(uint64_t a1, uint64_t a2, unint64_t *a3, _QWORD *a4, unsigned int a5, int a6, _QWORD *a7, uint64_t a8)
{
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  float64x2_t v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  float v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  float64x2_t v31;
  unint64_t v32;
  int64x2_t v33;
  float64x2_t v34;
  int64x2_t v35;
  double v36;
  float v37;
  int v38;
  int64x2_t v39;
  int v40;
  std::string *Entry;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  std::string *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  float v59;
  float64x2_t v60;
  int v62;
  uint64_t v63;
  int v64;
  int v65;
  _QWORD *v66;
  int64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  std::vector<unsigned int>::value_type __x[4];
  _QWORD v73[3];
  float64x2_t v74;
  int v75;
  unint64_t v76;
  int v77;
  std::vector<unsigned int> __p;
  char v79;
  int64x2_t v80;
  float64x2_t v81;
  unint64_t v82[3];

  v8 = *(uint64_t **)(a2 + 16);
  v9 = a5 + 1;
  v10 = *v8;
  if (v9 >= (v8[1] - *v8) >> 2)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v66 = *(_QWORD **)(a2 + 8);
  v15 = *(_QWORD *)(a1 + 296);
  v16 = *(unsigned int *)(v10 + 4 * a5);
  v17 = *(_DWORD *)(v10 + 4 * v9) - (int)v16;
  xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul>::subspan(a4, v16, v17, v82);
  v76 = 0;
  v77 = 0;
  memset(&__p, 0, sizeof(__p));
  v79 = 0;
  v18.f64[1] = 0.0;
  v80 = 0u;
  v81 = 0u;
  v19 = (_DWORD *)(*v8 + 4 * a5);
  LODWORD(v74.f64[0]) = 0x7FFFFFFF;
  if ((*v19 & 0x80000000) != 0)
  {
    dmlc::LogCheckFormat<unsigned int,unsigned int>((uint64_t *)__x);
    if (*(_QWORD *)__x)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v74);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/hist/evaluate_splits.h");
      v42 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v74);
      v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"Check failed: ", 14);
      v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"cut_ptr[fidx] <= static_cast<uint32_t>(std::numeric_limits<int32_t>::max())", 75);
      v45 = *(char *)(*(_QWORD *)__x + 23);
      v46 = v45 >= 0 ? *(_QWORD *)__x : **(_QWORD **)__x;
      v47 = v45 >= 0 ? *(unsigned __int8 *)(*(_QWORD *)__x + 23) : *(_QWORD *)(*(_QWORD *)__x + 8);
      v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, v46, v47);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v74);
      v49 = *(_QWORD *)__x;
      *(_QWORD *)__x = 0;
      if (v49)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)__x, v49);
    }
  }
  v20 = (_DWORD *)(*v8 + 4 * v9);
  LODWORD(v74.f64[0]) = 0x7FFFFFFF;
  if ((*v20 & 0x80000000) != 0)
  {
    dmlc::LogCheckFormat<unsigned int,unsigned int>((uint64_t *)__x);
    if (*(_QWORD *)__x)
    {
      v50 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v74);
      dmlc::LogMessageFatal::Entry::Init(v50, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/hist/evaluate_splits.h");
      v51 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v74);
      v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"Check failed: ", 14);
      v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"cut_ptr[fidx + 1] <= static_cast<uint32_t>(std::numeric_limits<int32_t>::max())", 79);
      v54 = *(char *)(*(_QWORD *)__x + 23);
      v55 = v54 >= 0 ? *(_QWORD *)__x : **(_QWORD **)__x;
      v56 = v54 >= 0 ? *(unsigned __int8 *)(*(_QWORD *)__x + 23) : *(_QWORD *)(*(_QWORD *)__x + 8);
      v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, v55, v56);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v74);
      v58 = *(_QWORD *)__x;
      *(_QWORD *)__x = 0;
      if (v58)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)__x, v58);
    }
  }
  v21 = *v8;
  v22 = v8[1];
  v23 = *(int *)(*v8 + 4 * a5);
  v75 = *(_DWORD *)(*v8 + 4 * a5);
  if (v9 >= (v22 - v21) >> 2)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v24 = *(_DWORD *)(v21 + 4 * v9);
  if (v24 == (_DWORD)v23)
  {
    v25 = 0;
    v26 = 0.0;
    v18.f64[0] = 0.0;
    v70 = v18;
    goto LABEL_40;
  }
  v63 = a8;
  v27 = 0;
  v25 = 0;
  v28 = v15 + 24 * a6;
  v62 = v23;
  v29 = v24 - v23;
  v64 = v23;
  v30 = 4 * v23;
  v31 = 0uLL;
  v65 = -1;
  v26 = 0.0;
  do
  {
    if (*a3 <= v27)
      goto LABEL_51;
    v32 = *(_QWORD *)(a3[1] + 8 * v27);
    if (v82[0] <= v32)
      goto LABEL_51;
    v31 = vaddq_f64(v31, vcvtq_f64_f32(*(float32x2_t *)(v82[1] + 8 * v32)));
    v33 = (int64x2_t)vsubq_f64(*(float64x2_t *)v28, v31);
    v34 = (float64x2_t)vzip2q_s64(v33, (int64x2_t)v31);
    v35 = (int64x2_t)vmvnq_s8((int8x16_t)vcgeq_f64(v34, (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(float *)(a1 + 32)), 0)));
    *(int32x2_t *)v35.i8 = vmovn_s64(v35);
    *(int32x2_t *)&v34.f64[0] = vdup_lane_s32(*(int32x2_t *)v35.i8, 1);
    *(int8x8_t *)v35.i8 = vorr_s8(*(int8x8_t *)v35.i8, *(int8x8_t *)&v34.f64[0]);
    if ((v35.i8[0] & 1) == 0)
    {
      v69 = v33;
      v71 = v31;
      *(int64x2_t *)__x = v33;
      v74 = v31;
      xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcSplitGain(a7, (float *)a1, a6, a5, (double *)__x, v74.f64, (int8x16_t)v35, (int8x16_t)v34);
      v37 = v36 - *(float *)(v28 + 16);
      if (fabsf(v37) == INFINITY)
      {
        v31 = v71;
        goto LABEL_18;
      }
      v38 = *(_DWORD *)(*v66 + v30 + 4 * v27);
      v31 = v71;
      if ((v25 & 0x7FFFFFFF) <= a5)
      {
        v39 = v69;
        if (v26 >= v37)
          goto LABEL_18;
LABEL_17:
        v76 = __PAIR64__(a5, LODWORD(v37));
        v77 = v38;
        v79 = 1;
        v65 = v64 + v27;
        v26 = v37;
        v25 = a5;
        v80 = v39;
        v81 = v71;
        goto LABEL_18;
      }
      v39 = v69;
      if (v26 <= v37)
        goto LABEL_17;
    }
LABEL_18:
    ++v27;
  }
  while (v29 != (_DWORD)v27);
  v70 = v31;
  a8 = v63;
  if (v65 != -1)
  {
    __x[0] = 0;
    std::vector<unsigned int>::resize(&__p, vcvtpd_u64_f64((double)v17 * 0.03125), __x);
    *(_QWORD *)&v74.f64[0] = __p.__end_ - __p.__begin_;
    *(_QWORD *)&v74.f64[1] = __p.__begin_;
    v40 = v65 - v62 + 1;
    if (*a3 < v40)
LABEL_51:
      std::terminate();
    v73[0] = &v74;
    v73[1] = v66;
    v73[2] = &v75;
    std::for_each[abi:ne180100]<xgboost::common::detail::SpanIterator<xgboost::common::Span<unsigned long const,18446744073709551615ul>,false>,xgboost::tree::GradStats xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EnumerateSplit<1,(xgboost::tree::SplitType)2>(xgboost::common::HistogramCuts const&,xgboost::common::Span<unsigned long const,18446744073709551615ul>,xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul> const&,unsigned int,int,xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam> const&,xgboost::tree::SplitEntryContainer<xgboost::tree::GradStats> *)::{lambda(unsigned long)#1}>(a3, 0, a3, v40, (uint64_t)v73, (uint64_t)__x);
    v26 = *(float *)&v76;
    v25 = HIDWORD(v76);
  }
LABEL_40:
  if (fabsf(v26) != INFINITY)
  {
    v59 = *(float *)a8;
    if ((*(_DWORD *)(a8 + 4) & 0x7FFFFFFFu) <= (v25 & 0x7FFFFFFF))
    {
      if (v59 >= v26)
        goto LABEL_48;
    }
    else if (v59 > v26)
    {
      goto LABEL_48;
    }
    *(float *)a8 = v26;
    *(_DWORD *)(a8 + 4) = v25;
    *(_DWORD *)(a8 + 8) = v77;
    *(_BYTE *)(a8 + 40) = v79;
    if (&v76 != (unint64_t *)a8)
      std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a8 + 16), (char *)__p.__begin_, (uint64_t)__p.__end_, __p.__end_ - __p.__begin_);
    v60 = v81;
    *(int64x2_t *)(a8 + 48) = v80;
    *(float64x2_t *)(a8 + 64) = v60;
  }
LABEL_48:
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  return (__n128)v70;
}

void sub_220EEAB9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float64_t xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EnumerateSplit<-1,(xgboost::tree::SplitType)2>(uint64_t a1, uint64_t a2, unint64_t *a3, _QWORD *a4, unsigned int a5, int a6, _QWORD *a7, uint64_t a8)
{
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int8x16_t v18;
  _DWORD *v19;
  _DWORD *v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  float v24;
  float64x2_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  double v32;
  int8x16_t v33;
  double v35;
  double v36;
  float v37;
  unint64_t v38;
  float v39;
  std::string *Entry;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  std::string *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  __int128 v58;
  int v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t v63;
  int v64;
  _QWORD *v65;
  float64x2_t v68;
  float64_t v69;
  float64_t v70;
  float64_t v71;
  std::vector<unsigned int>::value_type __x[4];
  _QWORD v73[4];
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  _QWORD v78[4];
  int64_t v79;
  std::vector<unsigned int>::pointer begin;
  uint64_t v81;
  __int32 v82;
  std::vector<unsigned int> v83;
  char v84;
  float64x2_t v85;
  __int128 v86;
  unint64_t v87[2];
  unsigned int v88;

  v88 = a5;
  v8 = *(_QWORD **)(a2 + 16);
  v9 = a5 + 1;
  v10 = *v8;
  if (v9 >= (uint64_t)(v8[1] - *v8) >> 2)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v65 = *(_QWORD **)(a2 + 8);
  v15 = *(_QWORD *)(a1 + 296);
  v16 = *(unsigned int *)(v10 + 4 * a5);
  v17 = *(_DWORD *)(v10 + 4 * v9) - (int)v16;
  xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul>::subspan(a4, v16, v17, v87);
  v81 = 0;
  v82 = 0;
  memset(&v83, 0, sizeof(v83));
  v84 = 0;
  v85 = 0u;
  v86 = 0u;
  v19 = (_DWORD *)(*v8 + 4 * a5);
  LODWORD(v79) = 0x7FFFFFFF;
  if ((*v19 & 0x80000000) != 0)
  {
    dmlc::LogCheckFormat<unsigned int,unsigned int>((uint64_t *)__x);
    if (*(_QWORD *)__x)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v79);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/hist/evaluate_splits.h");
      v41 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v79);
      v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"Check failed: ", 14);
      v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"cut_ptr[fidx] <= static_cast<uint32_t>(std::numeric_limits<int32_t>::max())", 75);
      v44 = *(char *)(*(_QWORD *)__x + 23);
      v45 = v44 >= 0 ? *(_QWORD *)__x : **(_QWORD **)__x;
      v46 = v44 >= 0 ? *(unsigned __int8 *)(*(_QWORD *)__x + 23) : *(_QWORD *)(*(_QWORD *)__x + 8);
      v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, v45, v46);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v79);
      v48 = *(_QWORD *)__x;
      *(_QWORD *)__x = 0;
      if (v48)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)__x, v48);
    }
  }
  v20 = (_DWORD *)(*v8 + 4 * v9);
  LODWORD(v79) = 0x7FFFFFFF;
  if ((*v20 & 0x80000000) != 0)
  {
    dmlc::LogCheckFormat<unsigned int,unsigned int>((uint64_t *)__x);
    if (*(_QWORD *)__x)
    {
      v49 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v79);
      dmlc::LogMessageFatal::Entry::Init(v49, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/hist/evaluate_splits.h");
      v50 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v79);
      v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"Check failed: ", 14);
      v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"cut_ptr[fidx + 1] <= static_cast<uint32_t>(std::numeric_limits<int32_t>::max())", 79);
      v53 = *(char *)(*(_QWORD *)__x + 23);
      v54 = v53 >= 0 ? *(_QWORD *)__x : **(_QWORD **)__x;
      v55 = v53 >= 0 ? *(unsigned __int8 *)(*(_QWORD *)__x + 23) : *(_QWORD *)(*(_QWORD *)__x + 8);
      v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, v54, v55);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v79);
      v57 = *(_QWORD *)__x;
      *(_QWORD *)__x = 0;
      if (v57)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)__x, v57);
    }
  }
  v21 = *(_DWORD *)(*v8 + 4 * v9);
  v22 = *(int *)(*v8 + 4 * a5);
  if (v21 == (_DWORD)v22)
  {
    v23 = 0;
    v24 = 0.0;
    v25.f64[0] = 0.0;
    goto LABEL_24;
  }
  v62 = v17;
  v63 = a8;
  v26 = 0;
  v23 = 0;
  v27 = v15 + 24 * a6;
  v61 = v8;
  v28 = v21 - 1 - v22 + 1;
  v29 = 4 * (v21 - 1);
  v25 = 0uLL;
  v64 = -1;
  v24 = 0.0;
  v60 = v21 - 1;
  v30 = v21 - 1;
  do
  {
    if (*a3 <= v26)
      goto LABEL_53;
    v31 = *(_QWORD *)(a3[1] + 8 * v26);
    if (v87[0] <= v31)
      goto LABEL_53;
    v33 = (int8x16_t)vcvtq_f64_f32(*(float32x2_t *)(v87[1] + 8 * v31));
    v25 = vaddq_f64(v25, (float64x2_t)v33);
    v32 = *(double *)(v27 + 8) - v25.f64[1];
    *(double *)v33.i64 = *(float *)(a1 + 32);
    if (v32 >= *(double *)v33.i64 && v25.f64[1] >= *(double *)v33.i64)
    {
      v33.i64[0] = *(_QWORD *)v27;
      v35 = *(double *)v27 - v25.f64[0];
      v68 = v25;
      *(float64x2_t *)__x = v25;
      v79 = *(_QWORD *)&v35;
      begin = *(std::vector<unsigned int>::pointer *)&v32;
      xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcSplitGain(a7, (float *)a1, a6, a5, (double *)__x, (double *)&v79, v33, v18);
      *(double *)v18.i64 = *(float *)(v27 + 16);
      v37 = v36 - *(double *)v18.i64;
      *(float *)v18.i32 = fabsf(v37);
      if (*(float *)v18.i32 == INFINITY)
      {
        v25 = v68;
        goto LABEL_20;
      }
      v18.i32[0] = *(_DWORD *)(*v65 + v29);
      v25 = v68;
      if ((v23 & 0x7FFFFFFF) <= a5)
      {
        if (v24 >= v37)
          goto LABEL_20;
LABEL_19:
        *(float *)&v81 = v37;
        v23 = a5 | 0x80000000;
        HIDWORD(v81) = a5 | 0x80000000;
        v82 = v18.i32[0];
        v84 = 1;
        v85 = v68;
        v24 = v37;
        v64 = v30;
        *(double *)&v86 = v35;
        *((double *)&v86 + 1) = v32;
        goto LABEL_20;
      }
      if (v24 <= v37)
        goto LABEL_19;
    }
LABEL_20:
    ++v26;
    --v30;
    v29 -= 4;
  }
  while (v28 != v26);
  a8 = v63;
  if (v64 != -1)
  {
    v69 = v25.f64[0];
    __x[0] = 0;
    std::vector<unsigned int>::resize(&v83, vcvtpd_u64_f64((double)v62 * 0.03125), __x);
    v79 = v83.__end_ - v83.__begin_;
    begin = v83.__begin_;
    v38 = *a3;
    v78[0] = a3;
    v78[1] = v38;
    v78[2] = a3;
    v78[3] = v38;
    if (v38 < v60 - v64)
LABEL_53:
      std::terminate();
    v74 = a3;
    v75 = v38 - (v60 - v64);
    v76 = a3;
    v77 = v75;
    v73[0] = &v79;
    v73[1] = v65;
    v73[2] = v61;
    v73[3] = &v88;
    std::for_each[abi:ne180100]<std::reverse_iterator<xgboost::common::detail::SpanIterator<xgboost::common::Span<unsigned long const,18446744073709551615ul>,false>>,xgboost::tree::GradStats xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EnumerateSplit<-1,(xgboost::tree::SplitType)2>(xgboost::common::HistogramCuts const&,xgboost::common::Span<unsigned long const,18446744073709551615ul>,xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul> const&,unsigned int,int,xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam> const&,xgboost::tree::SplitEntryContainer<xgboost::tree::GradStats> *)::{lambda(unsigned long)#2}>((uint64_t)v78, (uint64_t)&v74, (uint64_t)v73, __x);
    v24 = *(float *)&v81;
    v23 = HIDWORD(v81);
    v25.f64[0] = v69;
  }
LABEL_24:
  if (fabsf(v24) != INFINITY)
  {
    v39 = *(float *)a8;
    if ((*(_DWORD *)(a8 + 4) & 0x7FFFFFFFu) <= (v23 & 0x7FFFFFFF))
    {
      if (v39 >= v24)
        goto LABEL_50;
    }
    else if (v39 > v24)
    {
      goto LABEL_50;
    }
    *(float *)a8 = v24;
    *(_DWORD *)(a8 + 4) = v23;
    *(_DWORD *)(a8 + 8) = v82;
    *(_BYTE *)(a8 + 40) = v84;
    if (&v81 != (uint64_t *)a8)
    {
      v70 = v25.f64[0];
      std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a8 + 16), (char *)v83.__begin_, (uint64_t)v83.__end_, v83.__end_ - v83.__begin_);
      v25.f64[0] = v70;
    }
    v58 = v86;
    *(float64x2_t *)(a8 + 48) = v85;
    *(_OWORD *)(a8 + 64) = v58;
  }
LABEL_50:
  if (v83.__begin_)
  {
    v83.__end_ = v83.__begin_;
    v71 = v25.f64[0];
    operator delete(v83.__begin_);
    v25.f64[0] = v71;
  }
  return v25.f64[0];
}

void sub_220EEB16C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  uint64_t v38;
  void *v40;

  v40 = *(void **)(v38 - 216);
  if (v40)
  {
    *(_QWORD *)(v38 - 208) = v40;
    operator delete(v40);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EnumerateSplit<1,(xgboost::tree::SplitType)0>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, unsigned int a5, int a6, _QWORD *a7, uint64_t a8)
{
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  float v27;
  int8x16_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  double v32;
  int8x16_t v33;
  double v35;
  double v36;
  float v37;
  float v38;
  std::string *Entry;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  std::string *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  double v58;
  _QWORD *v59;
  int8x16_t v61;
  double v62[2];
  int8x16_t v63;
  unint64_t v64[3];

  v8 = *(uint64_t **)(a2 + 16);
  v9 = a5 + 1;
  v10 = *v8;
  if (v9 >= (v8[1] - *v8) >> 2)
    goto LABEL_47;
  v59 = *(_QWORD **)(a2 + 8);
  v15 = *(_QWORD *)(a1 + 296);
  v16 = *(unsigned int *)(v10 + 4 * a5);
  xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul>::subspan(a4, v16, *(_DWORD *)(v10 + 4 * v9) - (int)v16, v64);
  v17 = (_DWORD *)(*v8 + 4 * a5);
  LODWORD(v62[0]) = 0x7FFFFFFF;
  if ((*v17 & 0x80000000) != 0)
  {
    dmlc::LogCheckFormat<unsigned int,unsigned int>(v63.i64);
    if (v63.i64[0])
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v62);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/hist/evaluate_splits.h");
      v40 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v62);
      v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Check failed: ", 14);
      v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"cut_ptr[fidx] <= static_cast<uint32_t>(std::numeric_limits<int32_t>::max())", 75);
      v43 = *(char *)(v63.i64[0] + 23);
      v44 = v43 >= 0 ? v63.i64[0] : *(_QWORD *)v63.i64[0];
      v45 = v43 >= 0 ? *(unsigned __int8 *)(v63.i64[0] + 23) : *(_QWORD *)(v63.i64[0] + 8);
      v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, v44, v45);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v62);
      v47 = v63.i64[0];
      v63.i64[0] = 0;
      if (v47)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v63, v47);
    }
  }
  v18 = (_DWORD *)(*v8 + 4 * v9);
  LODWORD(v62[0]) = 0x7FFFFFFF;
  if ((*v18 & 0x80000000) != 0)
  {
    dmlc::LogCheckFormat<unsigned int,unsigned int>(v63.i64);
    if (v63.i64[0])
    {
      v48 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v62);
      dmlc::LogMessageFatal::Entry::Init(v48, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/hist/evaluate_splits.h");
      v49 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v62);
      v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"Check failed: ", 14);
      v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"cut_ptr[fidx + 1] <= static_cast<uint32_t>(std::numeric_limits<int32_t>::max())", 79);
      v52 = *(char *)(v63.i64[0] + 23);
      v53 = v52 >= 0 ? v63.i64[0] : *(_QWORD *)v63.i64[0];
      v54 = v52 >= 0 ? *(unsigned __int8 *)(v63.i64[0] + 23) : *(_QWORD *)(v63.i64[0] + 8);
      v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, v53, v54);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v62);
      v56 = v63.i64[0];
      v63.i64[0] = 0;
      if (v56)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v63, v56);
    }
  }
  v19 = *v8;
  if (v9 >= (v8[1] - *v8) >> 2)
LABEL_47:
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v20 = *(int *)(v19 + 4 * a5);
  v21 = *(_DWORD *)(v19 + 4 * v9);
  if (v21 != (_DWORD)v20)
  {
    v22 = 0;
    v28 = 0uLL;
    v29 = v15 + 24 * a6;
    v30 = v21 - v20;
    v27 = 0.0;
    v58 = 0.0;
    v25 = 0.0;
    v24 = 0;
    v23 = 0;
    v26 = 0;
    while (1)
    {
      if (*a4 <= v20)
        std::terminate();
      v33 = (int8x16_t)vcvtq_f64_f32(*(float32x2_t *)(a4[1] + 8 * v20));
      v28 = (int8x16_t)vaddq_f64((float64x2_t)v28, (float64x2_t)v33);
      v31 = v28.i64[1];
      v32 = *(double *)(v29 + 8) - *(double *)&v28.i64[1];
      *(double *)v33.i64 = *(float *)(a1 + 32);
      if (*(double *)&v28.i64[1] < *(double *)v33.i64 || v32 < *(double *)v33.i64)
        goto LABEL_20;
      v33.i64[0] = *(_QWORD *)v29;
      v35 = *(double *)v29 - *(double *)v28.i64;
      v61 = v28;
      v63 = v28;
      v62[0] = v35;
      v62[1] = v32;
      xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcSplitGain(a7, (float *)a1, a6, a5, (double *)v63.i64, v62, v28, v33);
      v37 = v36 - *(float *)(v29 + 16);
      if (fabsf(v37) == INFINITY)
      {
        v28 = v61;
      }
      else
      {
        if ((v22 & 0x7FFFFFFF) > a5)
        {
          v28 = v61;
          if (v27 > v37)
            goto LABEL_20;
LABEL_19:
          v58 = v32;
          v25 = v35;
          v24 = v31;
          v26 = v28.i64[0];
          v23 = *(_DWORD *)(*v59 + 4 * v20);
          v27 = v37;
          v22 = a5;
          goto LABEL_20;
        }
        v28 = v61;
        if (v27 < v37)
          goto LABEL_19;
      }
LABEL_20:
      ++v20;
      if (!--v30)
        goto LABEL_21;
    }
  }
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0.0;
  v58 = 0.0;
  v26 = 0;
  v27 = 0.0;
LABEL_21:
  if (fabsf(v27) != INFINITY)
  {
    v38 = *(float *)a8;
    if ((*(_DWORD *)(a8 + 4) & 0x7FFFFFFFu) <= (v22 & 0x7FFFFFFF))
    {
      if (v38 >= v27)
        return;
    }
    else if (v38 > v27)
    {
      return;
    }
    *(float *)a8 = v27;
    *(_DWORD *)(a8 + 4) = v22;
    *(_DWORD *)(a8 + 8) = v23;
    *(_BYTE *)(a8 + 40) = 0;
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a8 + 16), 0, 0, 0);
    *(_QWORD *)(a8 + 48) = v26;
    *(_QWORD *)(a8 + 56) = v24;
    *(double *)(a8 + 64) = v25;
    *(double *)(a8 + 72) = v58;
  }
}

void sub_220EEB624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17)
{
  _Unwind_Resume(exception_object);
}

double xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EnumerateSplit<-1,(xgboost::tree::SplitType)0>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, unsigned int a5, int a6, _QWORD *a7, uint64_t a8)
{
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v16;
  unint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  int64x2_t v28;
  uint64_t v29;
  uint64_t v30;
  float64x2_t *v31;
  float *v32;
  unint64_t v33;
  int64x2_t v34;
  int8x16_t v35;
  int64x2_t v36;
  int v37;
  double v38;
  float v39;
  unint64_t v40;
  _QWORD *v41;
  int v42;
  int64x2_t v43;
  float v44;
  std::string *Entry;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  std::string *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v64;
  unsigned int v65;
  _QWORD *v66;
  int64x2_t v69;
  int64x2_t v70;
  uint64_t v71;
  int64x2_t v72;
  int64x2_t v73;
  unint64_t v74[3];

  v8 = *(uint64_t **)(a2 + 16);
  v9 = a5 + 1;
  v10 = *v8;
  if (v9 >= (v8[1] - *v8) >> 2)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v66 = *(_QWORD **)(a2 + 8);
  v16 = *(_QWORD *)(a1 + 296);
  v17 = *(unsigned int *)(v10 + 4 * a5);
  xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul>::subspan(a4, v17, *(_DWORD *)(v10 + 4 * v9) - (int)v17, v74);
  v18 = (_DWORD *)(*v8 + 4 * a5);
  v72.i32[0] = 0x7FFFFFFF;
  if ((*v18 & 0x80000000) != 0)
  {
    dmlc::LogCheckFormat<unsigned int,unsigned int>(v73.i64);
    if (v73.i64[0])
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v72);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/hist/evaluate_splits.h");
      v46 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v72);
      v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"Check failed: ", 14);
      v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"cut_ptr[fidx] <= static_cast<uint32_t>(std::numeric_limits<int32_t>::max())", 75);
      v49 = *(char *)(v73.i64[0] + 23);
      v50 = v49 >= 0 ? v73.i64[0] : *(_QWORD *)v73.i64[0];
      v51 = v49 >= 0 ? *(unsigned __int8 *)(v73.i64[0] + 23) : *(_QWORD *)(v73.i64[0] + 8);
      v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, v50, v51);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v72);
      v53 = v73.i64[0];
      v73.i64[0] = 0;
      if (v53)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v73, v53);
    }
  }
  v19 = (_DWORD *)(*v8 + 4 * v9);
  v72.i32[0] = 0x7FFFFFFF;
  if ((*v19 & 0x80000000) != 0)
  {
    dmlc::LogCheckFormat<unsigned int,unsigned int>(v73.i64);
    if (v73.i64[0])
    {
      v54 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v72);
      dmlc::LogMessageFatal::Entry::Init(v54, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/hist/evaluate_splits.h");
      v55 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v72);
      v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"Check failed: ", 14);
      v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"cut_ptr[fidx + 1] <= static_cast<uint32_t>(std::numeric_limits<int32_t>::max())", 79);
      v58 = *(char *)(v73.i64[0] + 23);
      v59 = v58 >= 0 ? v73.i64[0] : *(_QWORD *)v73.i64[0];
      v60 = v58 >= 0 ? *(unsigned __int8 *)(v73.i64[0] + 23) : *(_QWORD *)(v73.i64[0] + 8);
      v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, v59, v60);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v72);
      v62 = v73.i64[0];
      v73.i64[0] = 0;
      if (v62)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v73, v62);
    }
  }
  v20 = *(_DWORD *)(*v8 + 4 * a5);
  v21 = *(int *)(*v8 + 4 * v9);
  if ((_DWORD)v21 == v20)
  {
    v65 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0.0;
    v28.i64[0] = 0;
    goto LABEL_22;
  }
  v29 = a2;
  v64 = a8;
  v30 = v16;
  v31 = (float64x2_t *)(v16 + 24 * a6);
  v28 = 0uLL;
  v32 = (float *)(v30 + 24 * a6 + 16);
  v65 = 0;
  v33 = v21 - 1;
  v27 = 0.0;
  v25 = 0;
  v24 = 0;
  v23 = 0;
  v22 = 0;
  v26 = 0;
  do
  {
    if (*a4 <= v33)
      std::terminate();
    LODWORD(v21) = v21 - 1;
    v28 = (int64x2_t)vaddq_f64((float64x2_t)v28, vcvtq_f64_f32(*(float32x2_t *)(a4[1] + 8 * v33)));
    v34 = (int64x2_t)vsubq_f64(*v31, (float64x2_t)v28);
    v35 = (int8x16_t)vzip2q_s64(v34, v28);
    v36 = (int64x2_t)vmvnq_s8((int8x16_t)vcgeq_f64((float64x2_t)v35, (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(float *)(a1 + 32)), 0)));
    *(int32x2_t *)v36.i8 = vmovn_s64(v36);
    if (((v36.i32[1] | v36.i32[0]) & 1) != 0)
    {
      v37 = v33;
      goto LABEL_20;
    }
    v69 = v34;
    v70 = v28;
    v72 = v28;
    v73 = v34;
    xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcSplitGain(a7, (float *)a1, a6, a5, (double *)v73.i64, (double *)v72.i64, (int8x16_t)v36, v35);
    v39 = v38 - *v32;
    v40 = v33 - 1;
    v41 = *(_QWORD **)(v29 + 24);
    if (v20 == (_DWORD)v33)
      v40 = a5;
    else
      v41 = v66;
    if (fabsf(v39) == INFINITY)
    {
      v37 = v21;
      v28 = v70;
      goto LABEL_20;
    }
    v42 = *(_DWORD *)(*v41 + 4 * v40);
    if ((v65 & 0x7FFFFFFF) <= a5)
    {
      v43 = v69;
      v28 = v70;
      if (v27 >= v39)
      {
LABEL_17:
        v37 = v21;
        goto LABEL_20;
      }
    }
    else
    {
      v43 = v69;
      v28 = v70;
      if (v27 > v39)
        goto LABEL_17;
    }
    v23 = v43.i64[1];
    v37 = v21;
    v25 = v28.i64[1];
    v24 = v28.i64[0];
    v26 = v43.i64[0];
    v22 = v42;
    v27 = v39;
    v65 = a5 | 0x80000000;
LABEL_20:
    --v33;
  }
  while (v37 != v20);
  a8 = v64;
LABEL_22:
  if (fabsf(v27) != INFINITY)
  {
    v44 = *(float *)a8;
    if ((*(_DWORD *)(a8 + 4) & 0x7FFFFFFFu) <= (v65 & 0x7FFFFFFF))
    {
      if (v44 < v27)
        goto LABEL_45;
    }
    else
    {
      if (v44 > v27)
        return *(double *)v28.i64;
LABEL_45:
      *(float *)a8 = v27;
      *(_DWORD *)(a8 + 4) = v65;
      *(_DWORD *)(a8 + 8) = v22;
      *(_BYTE *)(a8 + 40) = 0;
      v71 = v28.i64[0];
      std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a8 + 16), 0, 0, 0);
      v28.i64[0] = v71;
      *(_QWORD *)(a8 + 48) = v26;
      *(_QWORD *)(a8 + 56) = v23;
      *(_QWORD *)(a8 + 64) = v24;
      *(_QWORD *)(a8 + 72) = v25;
    }
  }
  return *(double *)v28.i64;
}

void sub_220EEBAFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21)
{
  _Unwind_Resume(exception_object);
}

void std::__stable_sort<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(unint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t a4, uint64_t *a5, uint64_t a6, int8x16_t a7, int8x16_t a8)
{
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  int8x16_t v15;
  int8x16_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;

  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      v11 = *(a2 - 1);
      v12 = (unint64_t *)a3[2];
      if (*v12 <= v11
        || (v13 = *a1,
            v14 = a3[1],
            *(double *)v15.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(a7, a8, *a3, v14, (float *)(v12[1] + 8 * v11)), v17 = (unint64_t *)a3[2], *v17 <= v13))
      {
        std::terminate();
      }
      if (*(double *)v15.i64 < xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(v15, v16, *a3, v14, (float *)(v17[1] + 8 * v13)))
      {
        v18 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v18;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v22 = a4 >> 1;
      v23 = (uint64_t *)&a1[a4 >> 1];
      v24 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(a1, v23, a3, v24, a5, a7, a8);
        std::__stable_sort_move<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[v22], v27, v28);
        std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *,unsigned long *,std::__wrap_iter<unsigned long *>>((unint64_t *)a5, (unint64_t *)&a5[v22], &a5[v22], &a5[a4], a1, a3, v29, v30);
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(a1, v23, a3, v24, a5, a6);
        *(double *)v25.i64 = std::__stable_sort<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
        std::__inplace_merge<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>((char *)a1, (char *)&a1[a4 >> 1], (char *)a2, a3, a4 >> 1, a4 - (a4 >> 1), (char *)a5, a6, v25, v26);
      }
    }
    else
    {
      std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(a1, (unint64_t *)a2, a3, a7, a8);
    }
  }
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(unint64_t *a1, unint64_t *a2, uint64_t *a3, int8x16_t a4, int8x16_t a5)
{
  unint64_t *v7;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  int8x16_t v16;
  int8x16_t v17;
  unint64_t *v18;
  double v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  int8x16_t v25;
  int8x16_t v26;
  unint64_t *v27;
  double v28;
  unint64_t *v29;

  if (a1 != a2)
  {
    v7 = a1 + 1;
    if (a1 + 1 != a2)
    {
      v9 = 0;
      v10 = a1;
      do
      {
        v11 = v7;
        v12 = *v7;
        v13 = (unint64_t *)a3[2];
        if (*v13 <= v12
          || (v14 = *v10,
              v15 = a3[1],
              *(double *)v16.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(a4, a5, *a3, v15, (float *)(v13[1] + 8 * v12)), v18 = (unint64_t *)a3[2], *v18 <= v14))
        {
LABEL_17:
          std::terminate();
        }
        v19 = *(double *)v16.i64;
        *(double *)a4.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(v16, v17, *a3, v15, (float *)(v18[1] + 8 * v14));
        if (v19 < *(double *)a4.i64)
        {
          v20 = *v11;
          v21 = v9;
          while (1)
          {
            *(unint64_t *)((char *)a1 + v21 + 8) = *(unint64_t *)((char *)a1 + v21);
            if (!v21)
              break;
            v22 = (unint64_t *)a3[2];
            if (*v22 <= v20)
              goto LABEL_17;
            v23 = *(unint64_t *)((char *)a1 + v21 - 8);
            v24 = a3[1];
            *(double *)v25.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(a4, a5, *a3, v24, (float *)(v22[1] + 8 * v20));
            v27 = (unint64_t *)a3[2];
            if (*v27 <= v23)
              goto LABEL_17;
            v28 = *(double *)v25.i64;
            *(double *)a4.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(v25, v26, *a3, v24, (float *)(v27[1] + 8 * v23));
            v21 -= 8;
            if (v28 >= *(double *)a4.i64)
            {
              v29 = (unint64_t *)((char *)a1 + v21 + 8);
              goto LABEL_14;
            }
          }
          v29 = a1;
LABEL_14:
          *v29 = v20;
        }
        v7 = v11 + 1;
        v9 += 8;
        v10 = v11;
      }
      while (v11 + 1 != a2);
    }
  }
}

void std::__stable_sort_move<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(unint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t a4, uint64_t *a5, int8x16_t a6, int8x16_t a7)
{
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  int8x16_t v16;
  int8x16_t v17;
  unint64_t *v18;
  unint64_t v19;
  int8x16_t v20;
  int8x16_t v21;

  if (a4)
  {
    if (a4 == 2)
    {
      v12 = *(a2 - 1);
      v13 = (unint64_t *)a3[2];
      if (*v13 <= v12
        || (v14 = *a1,
            v15 = a3[1],
            *(double *)v16.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(a6, a7, *a3, v15, (float *)(v13[1] + 8 * v12)), v18 = (unint64_t *)a3[2], *v18 <= v14))
      {
        std::terminate();
      }
      if (*(double *)v16.i64 >= xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(v16, v17, *a3, v15, (float *)(v18[1] + 8 * v14)))
      {
        *a5 = *a1;
        v19 = *(a2 - 1);
      }
      else
      {
        *a5 = *(a2 - 1);
        v19 = *a1;
      }
      a5[1] = v19;
    }
    else if (a4 == 1)
    {
      *a5 = *a1;
    }
    else if ((uint64_t)a4 > 8)
    {
      std::__stable_sort<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(a1, &a1[a4 >> 1], a3, a4 >> 1, a5, a4 >> 1);
      *(double *)v20.i64 = std::__stable_sort<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[a4 >> 1], a4 - (a4 >> 1));
      std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(a1, &a1[a4 >> 1], (uint64_t *)&a1[a4 >> 1], a2, a5, a3, v20, v21);
    }
    else
    {
      std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>((uint64_t *)a1, a2, a5, a3, a6, a7);
    }
  }
}

void std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *,unsigned long *,std::__wrap_iter<unsigned long *>>(unint64_t *a1, unint64_t *a2, uint64_t *a3, uint64_t *a4, _QWORD *a5, uint64_t *a6, int8x16_t a7, int8x16_t a8)
{
  unint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  int8x16_t v17;
  int8x16_t v18;
  unint64_t *v19;
  double v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;

  if (a1 == a2)
  {
LABEL_12:
    while (a3 != a4)
    {
      v22 = *a3++;
      *a5++ = v22;
    }
  }
  else
  {
    v13 = a1;
    while (a3 != a4)
    {
      v14 = (_QWORD *)a6[2];
      if (*v14 <= (unint64_t)*a3
        || (v15 = *v13,
            v16 = a6[1],
            *(double *)v17.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(a7, a8, *a6, v16, (float *)(v14[1] + 8 * *a3)), v19 = (unint64_t *)a6[2], *v19 <= v15))
      {
        std::terminate();
      }
      v20 = *(double *)v17.i64;
      *(double *)a7.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(v17, v18, *a6, v16, (float *)(v19[1] + 8 * v15));
      if (v20 < *(double *)a7.i64)
        v21 = a3;
      else
        v21 = v13;
      v13 += v20 >= *(double *)a7.i64;
      a3 += v20 < *(double *)a7.i64;
      *a5++ = *v21;
      if (v13 == a2)
        goto LABEL_12;
    }
    if (v13 != a2)
    {
      v23 = 0;
      do
      {
        a5[v23] = v13[v23];
        ++v23;
      }
      while (&v13[v23] != a2);
    }
  }
}

void std::__inplace_merge<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(char *a1, char *a2, char *a3, uint64_t *a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  uint64_t v11;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  int8x16_t v21;
  int8x16_t v22;
  unint64_t *v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  int8x16_t v43;
  uint64_t v44;
  char v45;

  if (a6)
  {
    v11 = a6;
    do
    {
      if (a5 <= a8 || v11 <= a8)
      {
        std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(a1, a2, a3, a4, a5, v11, a7, a9, a10);
        return;
      }
      if (!a5)
        return;
      v16 = 0;
      v17 = 0;
      while (1)
      {
        v18 = (_QWORD *)a4[2];
        if (*v18 <= *(_QWORD *)a2
          || (v19 = *(_QWORD *)&a1[8 * v17],
              v20 = a4[1],
              *(double *)v21.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(a9, a10, *a4, v20, (float *)(v18[1] + 8 * *(_QWORD *)a2)), v23 = (unint64_t *)a4[2], *v23 <= v19))
        {
          std::terminate();
        }
        v24 = *(double *)v21.i64;
        *(double *)a9.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(v21, v22, *a4, v20, (float *)(v23[1] + 8 * v19));
        if (v24 < *(double *)a9.i64)
          break;
        ++v17;
        v16 -= 8;
        if (a5 == v17)
          return;
      }
      v39 = &a1[-v16];
      v40 = a8;
      if (a5 - v17 >= v11)
      {
        if (a5 - 1 == v17)
        {
          v36 = *(_QWORD *)&a1[8 * v17];
          *(_QWORD *)&a1[8 * v17] = *(_QWORD *)a2;
          *(_QWORD *)a2 = v36;
          return;
        }
        v30 = (a5 - v17) / 2;
        v43 = *(int8x16_t *)a4;
        v29 = (unint64_t *)&a1[8 * v30 - v16];
        v44 = a4[2];
        v45 = 0;
        v38 = (char *)std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>,unsigned long,std::__identity,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1}>(a2, a3, v29, v43.i64, v43, a10);
        v26 = (v38 - a2) >> 3;
      }
      else
      {
        if (v11 >= 0)
          v25 = v11;
        else
          v25 = v11 + 1;
        v26 = v25 >> 1;
        v38 = &a2[8 * (v25 >> 1)];
        v27 = (char *)std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>,unsigned long,std::__identity>(&a1[-v16], a2, v38, a4, a9, a10);
        v28 = v27 - a1 + v16;
        v29 = (unint64_t *)v27;
        v30 = v28 >> 3;
      }
      v37 = a5 - v30 - v17;
      v31 = v11 - v26;
      v32 = a2;
      a2 = v38;
      v33 = std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>((char *)v29, v32, v38);
      a1 = v33;
      if (v30 + v26 >= v11 + a5 - (v30 + v26) - v17)
      {
        v35 = v33;
        std::__inplace_merge<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(v33, v38, a3, a4, v37, v11 - v26, a7, v40);
        a1 = v39;
        a2 = (char *)v29;
        v31 = v26;
        a5 = v30;
        a8 = v40;
        a3 = v35;
      }
      else
      {
        v34 = v30;
        a8 = v40;
        std::__inplace_merge<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(v39, v29, v33, a4, v34, v26, a7, v40);
        a5 = v37;
      }
      v11 = v31;
    }
    while (v31);
  }
}

double xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(int8x16_t a1, int8x16_t a2, uint64_t a3, uint64_t a4, float *a5)
{
  float v5;
  float v7;
  float v8;
  float v9;
  BOOL v10;
  int8x16_t v11;
  float v12;

  v5 = a5[1];
  a1.i64[0] = 0;
  if (v5 > 0.0 && *(float *)(a4 + 32) <= v5)
  {
    v7 = *a5;
    v8 = *(float *)(a4 + 40);
    if (v8 >= *a5)
    {
      v9 = 0.0;
      if (v7 < (float)-v8)
        v9 = v7 + v8;
    }
    else
    {
      v9 = v7 - v8;
    }
    *(float *)a1.i32 = (float)-v9 / (float)(v5 + *(float *)(a4 + 36));
    a2.i32[0] = *(_DWORD *)(a4 + 44);
    v10 = fabsf(*(float *)a1.i32) <= *(float *)a2.i32 || *(float *)a2.i32 == 0.0;
    v11.i64[0] = 0x8000000080000000;
    v11.i64[1] = 0x8000000080000000;
    LODWORD(v12) = vbslq_s8(v11, a2, a1).u32[0];
    if (!v10)
      *(float *)a1.i32 = v12;
    *(double *)a1.i64 = *(float *)a1.i32;
  }
  return *(double *)a1.i64;
}

void std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, int8x16_t a5, int8x16_t a6)
{
  uint64_t *v8;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int8x16_t v17;
  int8x16_t v18;
  unint64_t *v19;
  double v20;
  uint64_t *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  int8x16_t v26;
  int8x16_t v27;
  unint64_t *v28;
  double v29;
  uint64_t v30;

  if (a1 != a2)
  {
    v8 = a1 + 1;
    *a3 = *a1;
    if (a1 + 1 != a2)
    {
      v10 = 0;
      v11 = a3;
      do
      {
        v12 = (_QWORD *)a4[2];
        if (*v12 <= (unint64_t)*v8
          || (v13 = v11,
              v15 = *v11,
              ++v11,
              v14 = v15,
              v16 = a4[1],
              *(double *)v17.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(a5, a6, *a4, v16, (float *)(v12[1] + 8 * *v8)), v19 = (unint64_t *)a4[2], *v19 <= v15))
        {
LABEL_17:
          std::terminate();
        }
        v20 = *(double *)v17.i64;
        *(double *)a5.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(v17, v18, *a4, v16, (float *)(v19[1] + 8 * v14));
        v21 = v11;
        if (v20 < *(double *)a5.i64)
        {
          v13[1] = *v13;
          v21 = a3;
          if (v13 != a3)
          {
            v22 = v10;
            while (1)
            {
              v23 = (_QWORD *)a4[2];
              if (*v23 <= (unint64_t)*v8)
                goto LABEL_17;
              v24 = *(uint64_t *)((char *)a3 + v22 - 8);
              v25 = a4[1];
              *(double *)v26.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(a5, a6, *a4, v25, (float *)(v23[1] + 8 * *v8));
              v28 = (unint64_t *)a4[2];
              if (*v28 <= v24)
                goto LABEL_17;
              v29 = *(double *)v26.i64;
              *(double *)a5.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(v26, v27, *a4, v25, (float *)(v28[1] + 8 * v24));
              if (v29 >= *(double *)a5.i64)
                break;
              *(uint64_t *)((char *)a3 + v22) = *(uint64_t *)((char *)a3 + v22 - 8);
              v22 -= 8;
              if (!v22)
              {
                v21 = a3;
                goto LABEL_15;
              }
            }
            v21 = (uint64_t *)((char *)a3 + v22);
          }
        }
LABEL_15:
        v30 = *v8++;
        *v21 = v30;
        v10 += 8;
      }
      while (v8 != a2);
    }
  }
}

void std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(unint64_t *a1, unint64_t *a2, uint64_t *a3, uint64_t *a4, _QWORD *a5, uint64_t *a6, int8x16_t a7, int8x16_t a8)
{
  unint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  int8x16_t v17;
  int8x16_t v18;
  unint64_t *v19;
  double v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;

  if (a1 == a2)
  {
LABEL_12:
    while (a3 != a4)
    {
      v22 = *a3++;
      *a5++ = v22;
    }
  }
  else
  {
    v13 = a1;
    while (a3 != a4)
    {
      v14 = (_QWORD *)a6[2];
      if (*v14 <= (unint64_t)*a3
        || (v15 = *v13,
            v16 = a6[1],
            *(double *)v17.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(a7, a8, *a6, v16, (float *)(v14[1] + 8 * *a3)), v19 = (unint64_t *)a6[2], *v19 <= v15))
      {
        std::terminate();
      }
      v20 = *(double *)v17.i64;
      *(double *)a7.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(v17, v18, *a6, v16, (float *)(v19[1] + 8 * v15));
      if (v20 >= *(double *)a7.i64)
        v21 = v13;
      else
        v21 = a3;
      a3 += v20 < *(double *)a7.i64;
      v13 += v20 >= *(double *)a7.i64;
      *a5++ = *v21;
      if (v13 == a2)
        goto LABEL_12;
    }
    if (v13 != a2)
    {
      v23 = 0;
      do
      {
        a5[v23] = v13[v23];
        ++v23;
      }
      while (&v13[v23] != a2);
    }
  }
}

void std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(char *__dst, char *a2, char *a3, uint64_t *a4, uint64_t a5, uint64_t a6, char *__src, int8x16_t a8, int8x16_t a9)
{
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;

  if (a5 <= a6)
  {
    v14 = __src;
    if (__dst != a2)
    {
      v14 = __src;
      v15 = __dst;
      do
      {
        v16 = *(_QWORD *)v15;
        v15 += 8;
        *(_QWORD *)v14 = v16;
        v14 += 8;
      }
      while (v15 != a2);
    }
    std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *,unsigned long *,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(__src, v14, a2, a3, __dst, a4, a8, a9);
  }
  else
  {
    v11 = __src;
    if (a2 != a3)
    {
      v11 = __src;
      v12 = a2;
      do
      {
        v13 = *(_QWORD *)v12;
        v12 += 8;
        *(_QWORD *)v11 = v13;
        v11 += 8;
      }
      while (v12 != a3);
    }
    v17 = a4;
    std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &>,std::reverse_iterator<unsigned long *>,std::reverse_iterator<unsigned long *>,std::reverse_iterator<std::__wrap_iter<unsigned long *>>,std::reverse_iterator<std::__wrap_iter<unsigned long *>>,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>(a8, a9, (uint64_t)v11, (uint64_t)v11, (uint64_t)__src, (uint64_t)__src, (uint64_t)a2, (uint64_t)a2, (uint64_t)__dst, (uint64_t)__dst, (uint64_t)a3, (uint64_t)a3, &v17);
  }
}

_QWORD *std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>,unsigned long,std::__identity>(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, int8x16_t a5, int8x16_t a6)
{
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  int8x16_t v14;
  int8x16_t v15;
  unint64_t *v16;
  double v17;

  if (a2 != a1)
  {
    v8 = a1;
    v9 = a2 - a1;
    do
    {
      v10 = (_QWORD *)a4[2];
      if (*v10 <= *a3
        || (v11 = &v8[v9 >> 1],
            v12 = *v11,
            v13 = a4[1],
            *(double *)v14.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(a5, a6, *a4, v13, (float *)(v10[1] + 8 * *a3)), v16 = (unint64_t *)a4[2], *v16 <= v12))
      {
        std::terminate();
      }
      v17 = *(double *)v14.i64;
      *(double *)a5.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(v14, v15, *a4, v13, (float *)(v16[1] + 8 * v12));
      if (v17 < *(double *)a5.i64)
      {
        v9 >>= 1;
      }
      else
      {
        v8 = v11 + 1;
        v9 += ~(v9 >> 1);
      }
    }
    while (v9);
    return v8;
  }
  return a2;
}

void std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *,unsigned long *,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(char *__src, char *a2, char *a3, char *a4, _QWORD *__dst, uint64_t *a6, int8x16_t a7, int8x16_t a8)
{
  char *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  int8x16_t v17;
  int8x16_t v18;
  unint64_t *v19;
  double v20;
  char *v21;

  if (__src != a2)
  {
    v13 = __src;
    while (a3 != a4)
    {
      v14 = (_QWORD *)a6[2];
      if (*v14 <= *(_QWORD *)a3
        || (v15 = *(_QWORD *)v13,
            v16 = a6[1],
            *(double *)v17.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(a7, a8, *a6, v16, (float *)(v14[1] + 8 * *(_QWORD *)a3)), v19 = (unint64_t *)a6[2], *v19 <= v15))
      {
        std::terminate();
      }
      v20 = *(double *)v17.i64;
      *(double *)a7.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(v17, v18, *a6, v16, (float *)(v19[1] + 8 * v15));
      if (v20 >= *(double *)a7.i64)
        v21 = v13;
      else
        v21 = a3;
      a3 += 8 * (v20 < *(double *)a7.i64);
      v13 += 8 * (v20 >= *(double *)a7.i64);
      *__dst++ = *(_QWORD *)v21;
      if (v13 == a2)
        return;
    }
    memmove(__dst, v13, a2 - v13);
  }
}

void std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &>,std::reverse_iterator<unsigned long *>,std::reverse_iterator<unsigned long *>,std::reverse_iterator<std::__wrap_iter<unsigned long *>>,std::reverse_iterator<std::__wrap_iter<unsigned long *>>,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>(int8x16_t a1, int8x16_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t **a13)
{
  uint64_t v16;
  _QWORD *v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;

  if (a4 != a6)
  {
    v16 = a4;
    v17 = (_QWORD *)(a12 - 8);
    while (a8 != a10)
    {
      v18 = std::__invert<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &>::operator()[abi:ne180100]<unsigned long,unsigned long>(a13, (unint64_t *)(a8 - 8), (_QWORD *)(v16 - 8), a1, a2);
      if (v18)
        v19 = a8;
      else
        v19 = v16;
      if (v18)
        a8 -= 8;
      else
        v16 -= 8;
      *v17-- = *(_QWORD *)(v19 - 8);
      if (v16 == a6)
        return;
    }
    v20 = 0;
    do
    {
      v17[v20] = *(_QWORD *)(v16 + v20 * 8 - 8);
      --v20;
    }
    while (v16 + v20 * 8 != a6);
  }
}

BOOL std::__invert<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &>::operator()[abi:ne180100]<unsigned long,unsigned long>(uint64_t **a1, unint64_t *a2, _QWORD *a3, int8x16_t a4, int8x16_t a5)
{
  uint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  int8x16_t v9;
  int8x16_t v10;
  unint64_t *v11;

  v5 = *a1;
  v6 = (_QWORD *)(*a1)[2];
  if (*v6 <= *a3
    || (v7 = *a2,
        v8 = v5[1],
        *(double *)v9.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(a4, a5, *v5, v8, (float *)(v6[1] + 8 * *a3)), v11 = (unint64_t *)v5[2], *v11 <= v7))
  {
    std::terminate();
  }
  return *(double *)v9.i64 < xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(v9, v10, *v5, v8, (float *)(v11[1] + 8 * v7));
}

_QWORD *std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>,unsigned long,std::__identity,xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<float> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1}>(_QWORD *a1, _QWORD *a2, unint64_t *a3, uint64_t *a4, int8x16_t a5, int8x16_t a6)
{
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  int8x16_t v14;
  int8x16_t v15;
  unint64_t *v16;
  double v17;

  if (a2 != a1)
  {
    v8 = a1;
    v9 = a2 - a1;
    do
    {
      v10 = &v8[v9 >> 1];
      v11 = (_QWORD *)a4[2];
      if (*v11 <= *v10
        || (v12 = *a3,
            v13 = a4[1],
            *(double *)v14.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(a5, a6, *a4, v13, (float *)(v11[1] + 8 * *v10)), v16 = (unint64_t *)a4[2], *v16 <= v12))
      {
        std::terminate();
      }
      v17 = *(double *)v14.i64;
      *(double *)a5.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<float>>(v14, v15, *a4, v13, (float *)(v16[1] + 8 * v12));
      if (v17 >= *(double *)a5.i64)
        v9 >>= 1;
      else
        v9 += ~(v9 >> 1);
      if (v17 < *(double *)a5.i64)
        v8 = v10 + 1;
    }
    while (v9);
    return v8;
  }
  return a2;
}

__n128 std::for_each[abi:ne180100]<xgboost::common::detail::SpanIterator<xgboost::common::Span<unsigned long const,18446744073709551615ul>,false>,xgboost::tree::GradStats xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EnumerateSplit<1,(xgboost::tree::SplitType)2>(xgboost::common::HistogramCuts const&,xgboost::common::Span<unsigned long const,18446744073709551615ul>,xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul> const&,unsigned int,int,xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam> const&,xgboost::tree::SplitEntryContainer<xgboost::tree::GradStats> *)::{lambda(unsigned long)#1}>@<Q0>(unint64_t *a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  float v8;
  __n128 result;

  if (a1 != a3 || a2 != a4)
  {
    v6 = *a1;
    if (a2 > *a1)
      v6 = a2;
    do
    {
      if (v6 == a2
        || (v7 = a2,
            v8 = *(float *)(**(_QWORD **)(a5 + 8) + 4 * (*(_QWORD *)(a1[1] + 8 * a2) + **(int **)(a5 + 16))),
            **(_QWORD **)a5 <= (unint64_t)v8 >> 5))
      {
        std::terminate();
      }
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 8) + 4 * ((unint64_t)v8 >> 5)) |= 1 << ~(unint64_t)v8;
      ++a2;
    }
    while (a1 != a3 || a4 - 1 != v7);
  }
  result = *(__n128 *)a5;
  *(_OWORD *)a6 = *(_OWORD *)a5;
  *(_QWORD *)(a6 + 16) = *(_QWORD *)(a5 + 16);
  return result;
}

__n128 std::for_each[abi:ne180100]<std::reverse_iterator<xgboost::common::detail::SpanIterator<xgboost::common::Span<unsigned long const,18446744073709551615ul>,false>>,xgboost::tree::GradStats xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EnumerateSplit<-1,(xgboost::tree::SplitType)2>(xgboost::common::HistogramCuts const&,xgboost::common::Span<unsigned long const,18446744073709551615ul>,xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul> const&,unsigned int,int,xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam> const&,xgboost::tree::SplitEntryContainer<xgboost::tree::GradStats> *)::{lambda(unsigned long)#2}>@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  unint64_t *v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  float v12;
  __n128 result;
  __int128 v14;

  v4 = *(unint64_t **)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(unint64_t **)(a2 + 16);
  if (v4 != v6 || v5 != *(_QWORD *)(a2 + 24))
  {
    v8 = v5 - 1;
    do
    {
      v9 = v8;
      v10 = __CFADD__(v8, 1);
      v11 = v8 + 1;
      if (v10
        || v11 > *v4
        || (v12 = *(float *)(**(_QWORD **)(a3 + 8)
                           + 4
                           * (*(_QWORD *)(v4[1] + 8 * v9)
                            + *(unsigned int *)(**(_QWORD **)(a3 + 16) + 4 * **(unsigned int **)(a3 + 24)))),
            **(_QWORD **)a3 <= (unint64_t)v12 >> 5))
      {
        std::terminate();
      }
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + 4 * ((unint64_t)v12 >> 5)) |= 1 << ~(unint64_t)v12;
      *(_QWORD *)(a1 + 24) = v9;
      v8 = v9 - 1;
    }
    while (v4 != v6 || v9 != *(_QWORD *)(a2 + 24));
  }
  result = *(__n128 *)a3;
  v14 = *(_OWORD *)(a3 + 16);
  *a4 = *(_OWORD *)a3;
  a4[1] = v14;
  return result;
}

void std::vector<xgboost::tree::CPUExpandEntry>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<xgboost::tree::CPUExpandEntry>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::ApplyTreeSplit(uint64_t a1, int *a2, xgboost::RegTree *a3)
{
  uint64_t v6;
  _OWORD *v7;
  int v8;
  _OWORD *v9;
  int8x16_t v10;
  float v11;
  int v12;
  int8x16_t v13;
  float v14;
  int v15;
  int8x16_t v16;
  xgboost::common *v17;
  float v18;
  char *v19;
  uint64_t v20;
  std::vector<unsigned int>::pointer begin;
  std::vector<unsigned int>::pointer end;
  float v23;
  float v24;
  float v25;
  float v26;
  int v27;
  unint64_t v28;
  int v29;
  unsigned int v30;
  float v31;
  float v32;
  float v33;
  _DWORD *v34;
  signed int v35;
  signed int v36;
  int8x16_t v37;
  uint64_t v38;
  int v39;
  float v40;
  float v41;
  int8x16_t v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  float v46;
  float v47;
  uint64_t v48;
  int8x16_t v49;
  _QWORD v50[2];
  std::vector<unsigned int>::value_type __x;
  std::vector<unsigned int> v52;
  _BYTE v53[56];

  v6 = a1 + 152;
  xgboost::tree::TreeEvaluator::GetEvaluator<xgboost::tree::TrainParam>((uint64_t **)(a1 + 152), (uint64_t)v53);
  v7 = a2 + 14;
  v8 = *a2;
  v9 = a2 + 18;
  v10 = *(int8x16_t *)(a2 + 18);
  v49 = (int8x16_t)vaddq_f64(*(float64x2_t *)(a2 + 14), (float64x2_t)v10);
  *(int8x16_t *)&v52.__begin_ = v49;
  v11 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeight((uint64_t)v53, v8, (float *)a1, (double *)&v52, v49, v10);
  v12 = *a2;
  *(_OWORD *)&v52.__begin_ = *(_OWORD *)(a2 + 14);
  v14 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeight((uint64_t)v53, v12, (float *)a1, (double *)&v52, *(int8x16_t *)&v52.__begin_, v13);
  v15 = *a2;
  *(_OWORD *)&v52.__begin_ = *(_OWORD *)(a2 + 18);
  v18 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeight((uint64_t)v53, v15, (float *)a1, (double *)&v52, *(int8x16_t *)&v52.__begin_, v16);
  if (*((_BYTE *)a2 + 48))
  {
    memset(&v52, 0, sizeof(v52));
    v19 = (char *)*((_QWORD *)a2 + 3);
    v20 = *((_QWORD *)a2 + 4);
    if (v19 == (char *)v20)
    {
      v26 = *((float *)a2 + 4);
      if (v26 < 0.0 || v26 >= 16777000.0)
      {
        xgboost::common::InvalidCategory(v17);
        v26 = *((float *)a2 + 4);
      }
      v27 = (int)v26;
      __x = 0;
      std::vector<unsigned int>::resize(&v52, vcvtpd_u64_f64((double)((v27 & ~(v27 >> 31)) + 1) * 0.03125), &__x);
      begin = v52.__begin_;
      end = v52.__end_;
      v28 = (unint64_t)v27 >> 5;
      if (v28 >= v52.__end_ - v52.__begin_)
        std::terminate();
      v52.__begin_[v28] |= 1 << ~(_BYTE)v27;
    }
    else if (&v52 == (std::vector<unsigned int> *)(a2 + 6))
    {
      begin = 0;
      end = 0;
    }
    else
    {
      std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)&v52, v19, v20, (v20 - (uint64_t)v19) >> 2);
      begin = v52.__begin_;
      end = v52.__end_;
    }
    v29 = *a2;
    v30 = a2[3];
    v50[0] = end - begin;
    v50[1] = begin;
    v31 = *(double *)&v49.i64[1];
    v32 = *((double *)a2 + 8);
    v33 = *((double *)a2 + 10);
    xgboost::RegTree::ExpandCategorical((uint64_t)a3, v29, v30 & 0x7FFFFFFF, (uint64_t)v50, v30 >> 31, v11, v14 * *(float *)(a1 + 4), v18 * *(float *)(a1 + 4), *((float *)a2 + 2), v31, v32, v33);
    if (v52.__begin_)
    {
      v52.__end_ = v52.__begin_;
      operator delete(v52.__begin_);
    }
  }
  else
  {
    v23 = *(double *)&v49.i64[1];
    v24 = *((double *)a2 + 8);
    v25 = *((double *)a2 + 10);
    xgboost::RegTree::ExpandNode(a3, *a2, a2[3] & 0x7FFFFFFF, *((float *)a2 + 4), a2[3] >> 31, v11, v14 * *(float *)(a1 + 4), v18 * *(float *)(a1 + 4), *((float *)a2 + 2), v23, v24, v25, -1);
  }
  v34 = (_DWORD *)(*((_QWORD *)a3 + 20) + 20 * *a2);
  v35 = v34[1];
  v36 = v34[2];
  xgboost::tree::TreeEvaluator::AddSplit<false>(v6, *a2, v35, v36, v34[3] & 0x7FFFFFFF, v14, v18);
  std::vector<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry,std::allocator<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry>>::resize(a1 + 296, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)a3 + 21) - *((_QWORD *)a3 + 20)) >> 2));
  v38 = *(_QWORD *)(a1 + 296);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 304) - v38) >> 3) <= v35)
    goto LABEL_22;
  *(_OWORD *)(v38 + 24 * v35) = *v7;
  v39 = *a2;
  *(_OWORD *)&v52.__begin_ = *v7;
  v40 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeight((uint64_t)v53, v39, (float *)a1, (double *)&v52, *(int8x16_t *)&v52.__begin_, v37);
  v41 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcGainGivenWeight((uint64_t)v53, (float *)a1, (double *)&v52, v40);
  v43 = *(_QWORD *)(a1 + 296);
  v44 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 304) - v43) >> 3);
  if (v44 <= v35
    || (*(float *)(v43 + 24 * v35 + 16) = v41, v44 <= v36)
    || (*(_OWORD *)(v43 + 24 * v36) = *v9,
        v45 = *a2,
        *(_OWORD *)&v52.__begin_ = *v9,
        v46 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeight((uint64_t)v53, v45, (float *)a1, (double *)&v52, *(int8x16_t *)&v52.__begin_, v42), v47 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcGainGivenWeight((uint64_t)v53, (float *)a1, (double *)&v52, v46), v48 = *(_QWORD *)(a1 + 296), 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 304) - v48) >> 3) <= v36))
  {
LABEL_22:
    std::vector<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry,std::allocator<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry>>::__throw_out_of_range[abi:ne180100]();
  }
  *(float *)(v48 + 24 * v36 + 16) = v47;
  if (*(_BYTE *)(a1 + 292))
    xgboost::FeatureInteractionConstraintHost::SplitImpl((xgboost::FeatureInteractionConstraintHost *)(a1 + 192), *a2, *(_DWORD *)(*((_QWORD *)a3 + 20) + 20 * *a2 + 12) & 0x7FFFFFFF, v35, v36);
}

void sub_220EED148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  int i;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  float v50;
  float v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  _DWORD *v55;
  unsigned int v56;
  float *v57;
  float v58;
  float v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  std::string *Entry;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD v69[8];
  __int128 v70[3];
  _QWORD v71[3];
  void *v72[3];
  void *__p;
  void *v74;
  _QWORD v75[4];

  std::vector<std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>::vector(v75, 0x2E8BA2E8BA2E8BA3 * ((a6[1] - *a6) >> 3));
  v10 = a6[1];
  if (v10 == *a6)
  {
    v19 = a6[1];
  }
  else
  {
    v11 = 0;
    v10 = *a6;
    do
    {
      v12 = *(_DWORD *)(v10 + 88 * v11);
      v13 = *(_QWORD *)(a5 + 160);
      v14 = *(_DWORD *)(v13 + 20 * v12);
      if (v14 == -1)
      {
        v15 = 0;
      }
      else
      {
        v15 = 0;
        do
        {
          ++v15;
          v14 = *(_DWORD *)(v13 + 20 * (v14 & 0x7FFFFFFF));
        }
        while (v14 != -1);
      }
      xgboost::common::ColumnSampler::GetFeatureSet(*(xgboost::common::ColumnSampler **)(a1 + 136), v15, (uint64_t)v70);
      std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>::operator=[abi:ne180100](v75[0] + 16 * v11, v70);
      v16 = (std::__shared_weak_count *)*((_QWORD *)&v70[0] + 1);
      if (*((_QWORD *)&v70[0] + 1))
      {
        v17 = (unint64_t *)(*((_QWORD *)&v70[0] + 1) + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      ++v11;
      v10 = *a6;
      v19 = a6[1];
    }
    while (v11 < 0x2E8BA2E8BA2E8BA3 * ((v19 - *a6) >> 3));
  }
  v20 = v75[0];
  if (v75[0] == v75[1])
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v70);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/hist/evaluate_splits.h");
    v65 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v70);
    v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"Check failed: !features.empty()", 31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v70);
    v20 = v75[0];
    v10 = *a6;
    v19 = a6[1];
  }
  v21 = ((uint64_t)(*(_QWORD *)(**(_QWORD **)v20 + 8) - ***(_QWORD ***)v20) >> 2)
      / (unint64_t)*(int *)(a1 + 184);
  if (v21 <= 1)
    v22 = 1;
  else
    v22 = v21;
  xgboost::common::BlockedSpace2d::BlockedSpace2d<xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long)#1}>((xgboost::common::BlockedSpace2d *)v72, 0x2E8BA2E8BA2E8BA3 * ((v19 - v10) >> 3), v75, v22);
  std::vector<xgboost::tree::CPUExpandEntry>::vector(v71, 0x2E8BA2E8BA2E8BA3 * ((a6[1] - *a6) >> 3) * *(int *)(a1 + 184));
  v24 = *a6;
  v23 = a6[1];
  if (v23 != *a6)
  {
    v25 = 0;
    LODWORD(v26) = *(_DWORD *)(a1 + 184);
    do
    {
      if ((int)v26 >= 1)
      {
        v27 = 0;
        do
        {
          v28 = *a6;
          v29 = *a6 + 88 * v25;
          v30 = v27 + v25 * (int)v26;
          v31 = v71[0];
          v32 = v71[0] + 88 * v30;
          *(_QWORD *)v32 = *(_QWORD *)v29;
          v33 = *(_QWORD *)(v29 + 8);
          *(_DWORD *)(v32 + 16) = *(_DWORD *)(v29 + 16);
          *(_QWORD *)(v32 + 8) = v33;
          if (v32 != v29)
            std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(v31 + 88 * v30 + 24), *(char **)(v28 + 88 * v25 + 24), *(_QWORD *)(v28 + 88 * v25 + 32), (uint64_t)(*(_QWORD *)(v28 + 88 * v25 + 32) - *(_QWORD *)(v28 + 88 * v25 + 24)) >> 2);
          v34 = v31 + 88 * v30;
          v35 = v28 + 88 * v25;
          v36 = *(_OWORD *)(v35 + 48);
          v37 = *(_OWORD *)(v35 + 64);
          *(_QWORD *)(v34 + 80) = *(_QWORD *)(v35 + 80);
          *(_OWORD *)(v34 + 48) = v36;
          *(_OWORD *)(v34 + 64) = v37;
          ++v27;
          v26 = *(int *)(a1 + 184);
        }
        while (v27 < v26);
        v24 = *a6;
        v23 = a6[1];
      }
      ++v25;
    }
    while (v25 < 0x2E8BA2E8BA2E8BA3 * ((v23 - v24) >> 3));
  }
  xgboost::tree::TreeEvaluator::GetEvaluator<xgboost::tree::TrainParam>((uint64_t **)(a1 + 152), (uint64_t)v70);
  v38 = *(_QWORD *)(a3 + 16);
  v39 = *(_DWORD *)(a1 + 184);
  v69[0] = v71;
  v69[1] = a1;
  v69[2] = a2;
  v69[3] = v75;
  v69[4] = a4;
  v69[5] = v38;
  v69[6] = a3;
  v69[7] = v70;
  xgboost::common::ParallelFor2d<xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(v72, v39, (uint64_t)v69);
  v41 = *a6;
  v40 = a6[1];
  if (v40 == *a6)
    goto LABEL_45;
  v42 = 0;
  v43 = 0;
  v44 = *(_DWORD *)(a1 + 184);
  do
  {
    if (v44 < 1)
      goto LABEL_44;
    for (i = 0; i < v44; ++i)
    {
      v46 = i + v43 * v44;
      v47 = v71[0];
      v48 = v71[0] + 88 * v46;
      v50 = *(float *)(v48 + 8);
      v49 = v48 + 8;
      v51 = v50;
      if (fabsf(v50) == INFINITY)
        continue;
      v52 = *a6;
      v53 = *a6 + 88 * v42;
      v54 = *(_DWORD *)(v49 + 4);
      v55 = (_DWORD *)(v53 + 12);
      v56 = *(_DWORD *)(v53 + 12) & 0x7FFFFFFF;
      v58 = *(float *)(v53 + 8);
      v57 = (float *)(v53 + 8);
      v59 = v58;
      if (v56 <= (v54 & 0x7FFFFFFFu))
      {
        if (v59 >= v51)
          continue;
      }
      else if (v59 > v51)
      {
        continue;
      }
      *v57 = v51;
      *v55 = v54;
      v60 = v47 + 88 * v46;
      v61 = v52 + 88 * v42;
      *(_DWORD *)(v61 + 16) = *(_DWORD *)(v60 + 16);
      *(_BYTE *)(v61 + 48) = *(_BYTE *)(v60 + 48);
      if (v57 != (float *)v49)
        std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(v52 + 88 * v42 + 24), *(char **)(v47 + 88 * v46 + 24), *(_QWORD *)(v47 + 88 * v46 + 32), (uint64_t)(*(_QWORD *)(v47 + 88 * v46 + 32) - *(_QWORD *)(v47 + 88 * v46 + 24)) >> 2);
      v62 = v47 + 88 * v46;
      v63 = v52 + 88 * v42;
      *(_OWORD *)(v63 + 56) = *(_OWORD *)(v62 + 56);
      *(_OWORD *)(v63 + 72) = *(_OWORD *)(v62 + 72);
      v44 = *(_DWORD *)(a1 + 184);
    }
    v41 = *a6;
    v40 = a6[1];
LABEL_44:
    v42 = ++v43;
  }
  while (0x2E8BA2E8BA2E8BA3 * ((v40 - v41) >> 3) > (unint64_t)v43);
LABEL_45:
  *(_QWORD *)&v70[0] = v71;
  std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)v70);
  if (__p)
  {
    v74 = __p;
    operator delete(__p);
  }
  if (v72[0])
  {
    v72[1] = v72[0];
    operator delete(v72[0]);
  }
  *(_QWORD *)&v70[0] = v75;
  std::vector<std::shared_ptr<xgboost::DMatrix>>::__destroy_vector::operator()[abi:ne180100]((void ***)v70);
}

void sub_220EED600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  uint64_t v19;

  a19 = (void **)(v19 - 112);
  std::vector<std::shared_ptr<xgboost::DMatrix>>::__destroy_vector::operator()[abi:ne180100](&a19);
  _Unwind_Resume(a1);
}

void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::Reset(uint64_t a1, unsigned int a2, uint64_t a3, int a4, uint64_t a5, char a6)
{
  std::string *Entry;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;

  v22 = 1;
  v23 = a4;
  if (a4 < 1)
  {
    dmlc::LogCheckFormat<int,int>(&v21);
    if (v21)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v23);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/hist/histogram.h");
      v13 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v23);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Check failed: ", 14);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"n_threads >= 1", 14);
      v16 = *(char *)(v21 + 23);
      v17 = v16 >= 0 ? v21 : *(_QWORD *)v21;
      v18 = v16 >= 0 ? *(unsigned __int8 *)(v21 + 23) : *(_QWORD *)(v21 + 8);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v23);
      v20 = v21;
      v21 = 0;
      if (v20)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v21, v20);
    }
  }
  *(_DWORD *)(a1 + 392) = a4;
  *(_QWORD *)(a1 + 400) = a5;
  *(_QWORD *)(a1 + 352) = *(_QWORD *)a3;
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 376) = *(_OWORD *)(a3 + 24);
  if (*(_DWORD *)a1 != a2)
  {
    *(_DWORD *)a1 = a2;
    std::vector<std::vector<unsigned long>>::__clear[abi:ne180100]((uint64_t *)(a1 + 16));
  }
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 4) = 0;
  if (*(_DWORD *)(a1 + 64) != a2)
  {
    *(_DWORD *)(a1 + 64) = a2;
    std::vector<std::vector<unsigned long>>::__clear[abi:ne180100]((uint64_t *)(a1 + 80));
  }
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
  *(_DWORD *)(a1 + 68) = 0;
  xgboost::common::ParallelGHistBuilder<float>::Init(a1 + 136, a2);
  *(_DWORD *)(a1 + 128) = a2;
  *(_BYTE *)(a1 + 408) = a6;
}

void sub_220EED7F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11)
{
  uint64_t v12;

  v12 = a9;
  a9 = 0;
  if (v12)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a9, v12);
  _Unwind_Resume(exception_object);
}

void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::BuildHist(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int **a7, int **a8, uint64_t a9)
{
  void *v17;
  void **v18;
  std::string *Entry;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  void *v30[3];
  void *v31;
  void *v32;
  uint64_t v33;
  _QWORD v34[3];
  void *__p;
  void *v36;
  uint64_t v37;
  int v38;
  unsigned int v39;

  v38 = 0;
  v39 = 0x7FFFFFFF;
  if (!a2)
    xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::AddHistRows((unsigned int *)a1, &v39, &v38, a7, a8, a5);
  if (*(_BYTE *)(a4 + 192))
  {
    memset(v34, 0, sizeof(v34));
    std::vector<xgboost::common::Range1d>::__init_with_size[abi:ne180100]<xgboost::common::Range1d*,xgboost::common::Range1d*>(v34, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 4);
    __p = 0;
    v36 = 0;
    v37 = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(a3 + 24), *(_QWORD *)(a3 + 32), (uint64_t)(*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 3);
    xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<false>(a1, a2, (xgboost::common::BlockedSpace2d *)v34, a4, (uint64_t *)a7, a6, a9);
    if (__p)
    {
      v36 = __p;
      operator delete(__p);
    }
    v17 = (void *)v34[0];
    if (v34[0])
    {
      v18 = (void **)v34;
LABEL_12:
      v18[1] = v17;
      operator delete(v17);
    }
  }
  else
  {
    memset(v30, 0, sizeof(v30));
    std::vector<xgboost::common::Range1d>::__init_with_size[abi:ne180100]<xgboost::common::Range1d*,xgboost::common::Range1d*>(v30, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 4);
    v31 = 0;
    v32 = 0;
    v33 = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v31, *(const void **)(a3 + 24), *(_QWORD *)(a3 + 32), (uint64_t)(*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 3);
    xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<true>(a1, a2, (xgboost::common::BlockedSpace2d *)v30, a4, (uint64_t *)a7, a6, a9);
    if (v31)
    {
      v32 = v31;
      operator delete(v31);
    }
    v17 = v30[0];
    if (v30[0])
    {
      v18 = v30;
      goto LABEL_12;
    }
  }
  v28 = 1;
  if (!*(_QWORD *)(a1 + 400))
  {
    dmlc::LogCheckFormat<unsigned long,int>(&v29);
    if (v29)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v28);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/hist/histogram.h");
      v20 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v28);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Check failed: ", 14);
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"n_batches_ >= 1", 15);
      v23 = *(char *)(v29 + 23);
      v24 = v23 >= 0 ? v29 : *(_QWORD *)v29;
      v25 = v23 >= 0 ? *(unsigned __int8 *)(v29 + 23) : *(_QWORD *)(v29 + 8);
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v24, v25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v28);
      v27 = v29;
      v29 = 0;
      if (v27)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v29, v27);
    }
  }
  if (*(_QWORD *)(a1 + 400) - 1 == a2)
  {
    if (*(_BYTE *)(a1 + 408))
      xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed((unsigned int *)a1, a5, a7, a8, v39, v38);
    else
      xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::SyncHistogramLocal(a1, a5, a7, (uint64_t)a8);
  }
}

void sub_220EEDAAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  xgboost::common::Index::~Index((xgboost::common::Index *)&__p);
  _Unwind_Resume(a1);
}

void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::AddHistRows(unsigned int *a1, unsigned int *a2, int *a3, int **a4, int **a5, uint64_t a6)
{
  if (*((_BYTE *)a1 + 408))
    xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::AddHistRowsDistributed(a1, a2, a3, a4, a5, a6);
  else
    xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::AddHistRowsLocal(a1, (signed int *)a2, a3, a4, (unsigned int **)a5);
}

void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<false>(uint64_t a1, uint64_t a2, xgboost::common::BlockedSpace2d *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  std::string *Entry;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  int v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  int v31;
  _QWORD v32[5];
  _QWORD v33[2];
  void *__p[3];
  unint64_t v35;

  v15 = *a5;
  v14 = a5[1];
  LODWORD(v33[0]) = 0;
  v16 = v14 - v15;
  v35 = 0x2E8BA2E8BA2E8BA3 * (v16 >> 3);
  if (!v16)
  {
    dmlc::LogCheckFormat<unsigned long,int>((uint64_t *)__p);
    if (__p[0])
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v33);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/hist/histogram.h");
      v23 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v33);
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Check failed: ", 14);
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"n_nodes > 0", 11);
      v26 = *((char *)__p[0] + 23);
      v27 = v26 >= 0 ? __p[0] : *(void **)__p[0];
      v28 = v26 >= 0 ? *((unsigned __int8 *)__p[0] + 23) : *((_QWORD *)__p[0] + 1);
      v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v27, v28);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v33);
      v30 = __p[0];
      __p[0] = 0;
      if (v30)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)__p, (uint64_t)v30);
    }
  }
  std::vector<xgboost::common::Span<xgboost::detail::GradientPairInternal<double>,18446744073709551615ul>>::vector(__p, v35);
  if (v35)
  {
    v17 = 0;
    v18 = 0;
    v19 = 0;
    do
    {
      xgboost::common::HistCollection<double>::operator[]((unsigned int *)a1, *(_DWORD *)(*a5 + v17), v33);
      v20 = (char *)__p[0] + v18;
      *v20 = v33[0];
      v20[1] = v33[1];
      ++v19;
      v21 = v35;
      v18 += 16;
      v17 += 88;
    }
    while (v19 < v35);
    if (a2)
      goto LABEL_18;
  }
  else
  {
    v21 = 0;
    if (a2)
      goto LABEL_18;
  }
  xgboost::common::ParallelGHistBuilder<double>::Reset(a1 + 136, *(int *)(a1 + 392), v21, a3, (uint64_t **)__p);
LABEL_18:
  v31 = *(_DWORD *)(a1 + 392);
  v32[0] = a5;
  v32[1] = a6;
  v32[2] = a1;
  v32[3] = a7;
  v32[4] = a4;
  xgboost::common::ParallelFor2d<void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<false>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(a3, v31, (uint64_t)v32);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_220EEDD1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v19;

  v19 = (uint64_t)__p;
  __p = 0;
  if (v19)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&__p, v19);
  _Unwind_Resume(exception_object);
}

void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<true>(uint64_t a1, uint64_t a2, xgboost::common::BlockedSpace2d *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  std::string *Entry;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  int v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  int v31;
  _QWORD v32[5];
  _QWORD v33[2];
  void *__p[3];
  unint64_t v35;

  v15 = *a5;
  v14 = a5[1];
  LODWORD(v33[0]) = 0;
  v16 = v14 - v15;
  v35 = 0x2E8BA2E8BA2E8BA3 * (v16 >> 3);
  if (!v16)
  {
    dmlc::LogCheckFormat<unsigned long,int>((uint64_t *)__p);
    if (__p[0])
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v33);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/hist/histogram.h");
      v23 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v33);
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Check failed: ", 14);
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"n_nodes > 0", 11);
      v26 = *((char *)__p[0] + 23);
      v27 = v26 >= 0 ? __p[0] : *(void **)__p[0];
      v28 = v26 >= 0 ? *((unsigned __int8 *)__p[0] + 23) : *((_QWORD *)__p[0] + 1);
      v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v27, v28);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v33);
      v30 = __p[0];
      __p[0] = 0;
      if (v30)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)__p, (uint64_t)v30);
    }
  }
  std::vector<xgboost::common::Span<xgboost::detail::GradientPairInternal<double>,18446744073709551615ul>>::vector(__p, v35);
  if (v35)
  {
    v17 = 0;
    v18 = 0;
    v19 = 0;
    do
    {
      xgboost::common::HistCollection<double>::operator[]((unsigned int *)a1, *(_DWORD *)(*a5 + v17), v33);
      v20 = (char *)__p[0] + v18;
      *v20 = v33[0];
      v20[1] = v33[1];
      ++v19;
      v21 = v35;
      v18 += 16;
      v17 += 88;
    }
    while (v19 < v35);
    if (a2)
      goto LABEL_18;
  }
  else
  {
    v21 = 0;
    if (a2)
      goto LABEL_18;
  }
  xgboost::common::ParallelGHistBuilder<double>::Reset(a1 + 136, *(int *)(a1 + 392), v21, a3, (uint64_t **)__p);
LABEL_18:
  v31 = *(_DWORD *)(a1 + 392);
  v32[0] = a5;
  v32[1] = a6;
  v32[2] = a1;
  v32[3] = a7;
  v32[4] = a4;
  xgboost::common::ParallelFor2d<void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<true>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(a3, v31, (uint64_t)v32);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_220EEDF50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v19;

  v19 = (uint64_t)__p;
  __p = 0;
  if (v19)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&__p, v19);
  _Unwind_Resume(exception_object);
}

void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed(unsigned int *a1, uint64_t a2, _QWORD *a3, _QWORD *a4, unsigned int a5, int a6)
{
  int v11;
  int v12;
  int v13;
  void *v14;
  void *v15;
  unsigned int *v16;
  void *__p;
  void *v18;
  _QWORD v19[4];
  void *v20[3];
  void *v21;
  void *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD v25[4];
  uint64_t v26;

  v23 = a1[32];
  v24 = a2;
  xgboost::common::BlockedSpace2d::BlockedSpace2d<xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long)#1}>((xgboost::common::BlockedSpace2d *)v20, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a3[1] - *a3) >> 3), &v23, 0x400uLL);
  v11 = a1[98];
  v19[0] = a3;
  v19[1] = a1;
  v19[2] = &v24;
  v19[3] = a4;
  xgboost::common::ParallelFor2d<xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(v20, v11, (uint64_t)v19);
  xgboost::common::HistCollection<double>::operator[](a1, a5, &v14);
  rabit::engine::ReduceHandle::Allreduce((rabit::engine::ReduceHandle *)(a1 + 80), v15, (const char *)0x10, a1[32] * a6, 0, 0);
  v25[0] = v24;
  v12 = a1[98];
  v14 = a3;
  v15 = v25;
  v16 = a1;
  __p = a4;
  xgboost::common::ParallelFor2d<xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::ParallelSubtractionHist(xgboost::common::BlockedSpace2d const&,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::RegTree const*)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(v20, v12, (uint64_t)&v14);
  xgboost::common::BlockedSpace2d::BlockedSpace2d<xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long)#2}>((xgboost::common::BlockedSpace2d *)&v14, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a4[1] - *a4) >> 3), &v23, 0x400uLL);
  v25[3] = a3;
  v26 = v24;
  v13 = a1[98];
  v25[0] = a4;
  v25[1] = &v26;
  v25[2] = a1;
  xgboost::common::ParallelFor2d<xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::ParallelSubtractionHist(xgboost::common::BlockedSpace2d const&,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::RegTree const*)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(&v14, v13, (uint64_t)v25);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  if (v20[0])
  {
    v20[1] = v20[0];
    operator delete(v20[0]);
  }
}

void sub_220EEE120(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  xgboost::common::Index::~Index((xgboost::common::Index *)va);
  xgboost::common::Index::~Index((xgboost::common::Index *)va1);
  _Unwind_Resume(a1);
}

void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::SyncHistogramLocal(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  int v7;
  _QWORD v8[4];
  void *v9[3];
  void *__p;
  void *v11;
  unint64_t v12;
  uint64_t v13;

  v12 = *(unsigned int *)(a1 + 128);
  v13 = a2;
  xgboost::common::BlockedSpace2d::BlockedSpace2d<xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::SyncHistogramLocal(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long)#1}>((xgboost::common::BlockedSpace2d *)v9, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a3[1] - *a3) >> 3), &v12, 0x400uLL);
  v7 = *(_DWORD *)(a1 + 392);
  v8[0] = a3;
  v8[1] = a1;
  v8[2] = &v13;
  v8[3] = a4;
  xgboost::common::ParallelFor2d<xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::SyncHistogramLocal(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(v9, v7, (uint64_t)v8);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  if (v9[0])
  {
    v9[1] = v9[0];
    operator delete(v9[0]);
  }
}

void sub_220EEE1F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  xgboost::common::Index::~Index((xgboost::common::Index *)va);
  _Unwind_Resume(a1);
}

void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::AddHistRowsDistributed(unsigned int *a1, unsigned int *a2, int *a3, int **a4, int **a5, uint64_t a6)
{
  int *v11;
  int *v12;
  unint64_t v13;
  int *v14;
  unint64_t v15;
  std::vector<int>::pointer begin;
  int *v17;
  uint64_t v18;
  std::vector<int>::pointer v19;
  int v20;
  int *v21;
  uint64_t v22;
  int *v23;
  int v24;
  unsigned int *v25;
  std::vector<int>::pointer end;
  int v27;
  unsigned int v28;
  unsigned int *v29;
  std::vector<int>::pointer i;
  int v31;
  int *v33;
  std::vector<int> v34;

  v12 = *a4;
  v11 = a4[1];
  v13 = 0x2E8BA2E8BA2E8BA3 * (((char *)v11 - (char *)*a4) >> 3);
  v14 = *a5;
  v33 = a5[1];
  v15 = 0x2E8BA2E8BA2E8BA3 * (((char *)v33 - (char *)*a5) >> 3);
  std::vector<int>::vector(&v34, v15 + v13);
  begin = v34.__begin_;
  if (v11 != v12)
  {
    v17 = *a4;
    if (v13 <= 1)
      v18 = 1;
    else
      v18 = v13;
    v19 = v34.__begin_;
    do
    {
      v20 = *v17;
      v17 += 22;
      *v19++ = v20;
      --v18;
    }
    while (v18);
  }
  if (v33 != v14)
  {
    v21 = *a5;
    if (v15 <= 1)
      v22 = 1;
    else
      v22 = v15;
    v23 = &begin[v13];
    do
    {
      v24 = *v21;
      v21 += 22;
      *v23++ = v24;
      --v22;
    }
    while (v22);
  }
  std::__sort<std::__less<int,int> &,int *>();
  v25 = (unsigned int *)v34.__begin_;
  end = v34.__end_;
  if (v34.__begin_ == v34.__end_)
  {
    v27 = 0;
  }
  else
  {
    v27 = 0;
    do
    {
      if ((*(_DWORD *)(*(_QWORD *)(a6 + 160) + 20 * (int)*v25) & 0x80000000) != 0)
      {
        xgboost::common::HistCollection<double>::AddHistRow((uint64_t)a1, *v25);
        v28 = *a2;
        if ((int)*a2 >= (int)*v25)
          v28 = *v25;
        *a2 = v28;
        xgboost::common::HistCollection<double>::AddHistRow((uint64_t)(a1 + 16), *v25);
        ++v27;
      }
      ++v25;
    }
    while (v25 != (unsigned int *)end);
    v29 = (unsigned int *)v34.__begin_;
    for (i = v34.__end_; v29 != (unsigned int *)i; ++v29)
    {
      if ((*(_DWORD *)(*(_QWORD *)(a6 + 160) + 20 * (int)*v29) & 0x80000000) == 0)
      {
        xgboost::common::HistCollection<double>::AddHistRow((uint64_t)a1, *v29);
        xgboost::common::HistCollection<double>::AddHistRow((uint64_t)(a1 + 16), *v29);
      }
    }
  }
  xgboost::common::HistCollection<double>::AllocateAllData(a1);
  xgboost::common::HistCollection<double>::AllocateAllData(a1 + 16);
  if (v27 <= 1)
    v31 = 1;
  else
    v31 = v27;
  *a3 = v31;
  if (v34.__begin_)
  {
    v34.__end_ = v34.__begin_;
    operator delete(v34.__begin_);
  }
}

void sub_220EEE3E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::AddHistRowsLocal(unsigned int *a1, signed int *a2, _DWORD *a3, signed int **a4, unsigned int **a5)
{
  signed int *v8;
  signed int *v9;
  signed int v12;
  signed int v13;
  signed int v14;
  signed int *v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;

  v8 = *a4;
  v9 = a4[1];
  if (*a4 == v9)
  {
    v15 = *a4;
  }
  else
  {
    do
    {
      v13 = *v8;
      v8 += 22;
      v12 = v13;
      xgboost::common::HistCollection<double>::AddHistRow((uint64_t)a1, v13);
      v14 = *a2;
      if (*a2 >= v13)
        v14 = v12;
      *a2 = v14;
    }
    while (v8 != v9);
    v8 = *a4;
    v15 = a4[1];
  }
  *a3 = -1171354717 * ((unint64_t)((char *)v15 - (char *)v8) >> 3);
  v17 = *a5;
  v16 = a5[1];
  while (v17 != v16)
  {
    v18 = *v17;
    v17 += 22;
    xgboost::common::HistCollection<double>::AddHistRow((uint64_t)a1, v18);
  }
  xgboost::common::HistCollection<double>::AllocateAllData(a1);
}

void xgboost::common::HistCollection<double>::AddHistRow(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  std::string *Entry;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  int v20;

  v20 = -1;
  v4 = a2;
  v5 = *(_QWORD *)(a1 + 40);
  v6 = (uint64_t *)(a1 + 40);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 48) - v5) >> 3))
  {
    v19 = 0xFFFFFFFFLL;
    std::vector<unsigned long>::resize(a1 + 40, a2 + 1, &v19);
    v5 = *v6;
  }
  if (*(_QWORD *)(v5 + 8 * v4) != 0xFFFFFFFFLL)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned int>(&v19);
    if (v19)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v18);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/../common/../data/../common/hist_util.h");
      v8 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v18);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed: ", 14);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"row_ptr_[nid] == kMax", 21);
      v11 = *(char *)(v19 + 23);
      v12 = v11 >= 0 ? v19 : *(_QWORD *)v19;
      v13 = v11 >= 0 ? *(unsigned __int8 *)(v19 + 23) : *(_QWORD *)(v19 + 8);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v18);
      v15 = v19;
      v19 = 0;
      if (v15)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v19, v15);
    }
  }
  v16 = a2 + 1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) < v16)
    std::vector<std::vector<xgboost::detail::GradientPairInternal<double>>>::resize((uint64_t *)(a1 + 16), v16);
  v17 = *(unsigned int *)(a1 + 4);
  *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v4) = v17;
  *(_DWORD *)(a1 + 4) = v17 + 1;
}

void sub_220EEE628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14)
{
  uint64_t v15;

  v15 = a14;
  a14 = 0;
  if (v15)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a14, v15);
  _Unwind_Resume(exception_object);
}

void xgboost::common::HistCollection<double>::AllocateAllData(unsigned int *a1)
{
  uint64_t v2;
  _QWORD *v3;
  unsigned int *v4;
  unint64_t v5;

  v2 = *a1;
  v4 = a1 + 4;
  v3 = (_QWORD *)*((_QWORD *)a1 + 2);
  v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v4 + 1) - (_QWORD)v3) >> 3) * v2;
  *((_BYTE *)a1 + 8) = 1;
  if (v5 != (uint64_t)(v3[1] - *v3) >> 4)
    std::vector<xgboost::detail::GradientPairInternal<double>>::resize((uint64_t)v3, v5);
}

void std::vector<std::vector<xgboost::detail::GradientPairInternal<double>>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<xgboost::detail::GradientPairInternal<double>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void std::vector<std::vector<xgboost::detail::GradientPairInternal<double>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<unsigned long>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<xgboost::detail::GradientPairInternal<double>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<xgboost::tree::GradStats>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_220EEE884(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<xgboost::tree::GradStats>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<xgboost::detail::GradientPairInternal<double>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<xgboost::detail::GradientPairInternal<double>>>,std::reverse_iterator<std::vector<xgboost::detail::GradientPairInternal<double>>*>,std::reverse_iterator<std::vector<xgboost::detail::GradientPairInternal<double>>*>,std::reverse_iterator<std::vector<xgboost::detail::GradientPairInternal<double>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<xgboost::detail::GradientPairInternal<double>>>,std::reverse_iterator<std::vector<xgboost::detail::GradientPairInternal<double>>*>,std::reverse_iterator<std::vector<xgboost::detail::GradientPairInternal<double>>*>,std::reverse_iterator<std::vector<xgboost::detail::GradientPairInternal<double>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<xgboost::detail::GradientPairInternal<double>>>,std::reverse_iterator<std::vector<xgboost::detail::GradientPairInternal<double>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<xgboost::detail::GradientPairInternal<double>>>,std::reverse_iterator<std::vector<xgboost::detail::GradientPairInternal<double>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<xgboost::tree::GradStats>>,std::reverse_iterator<std::vector<xgboost::tree::GradStats>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::vector<xgboost::detail::GradientPairInternal<double>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    std::vector<xgboost::detail::GradientPairInternal<double>>::__append((void **)a1, a2 - v2);
  }
}

void std::vector<xgboost::detail::GradientPairInternal<double>>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WQSummary<float,float>::Entry>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v10];
    v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    v16 = &v14[16 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void xgboost::common::HistCollection<double>::operator[](unsigned int *a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  std::string *Entry;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  int v20;

  v20 = -1;
  v5 = *((_QWORD *)a1 + 5);
  if (a2 >= (unint64_t)((*((_QWORD *)a1 + 6) - v5) >> 3))
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v19 = *(_QWORD *)(v5 + 8 * a2);
  if (v19 == 0xFFFFFFFFLL)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned int>(&v18);
    if (v18)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/../common/../data/../common/hist_util.h");
      v7 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: ", 14);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"id != kMax", 10);
      v10 = *(char *)(v18 + 23);
      v11 = v10 >= 0 ? v18 : *(_QWORD *)v18;
      v12 = v10 >= 0 ? *(unsigned __int8 *)(v18 + 23) : *(_QWORD *)(v18 + 8);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v17);
      v14 = v18;
      v18 = 0;
      if (v14)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v18, v14);
    }
  }
  if (*((_BYTE *)a1 + 8))
  {
    v15 = *a1;
    v16 = **((_QWORD **)a1 + 2) + 16 * v19 * v15;
  }
  else
  {
    v16 = *(_QWORD *)(*((_QWORD *)a1 + 2) + 24 * v19);
    v15 = *a1;
  }
  *a3 = v15;
  a3[1] = v16;
  if ((_DWORD)v15)
  {
    if (!v16)
      std::terminate();
  }
}

void sub_220EEEC68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, uint64_t a13)
{
  uint64_t v14;

  v14 = a13;
  a13 = 0;
  if (v14)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a13, v14);
  _Unwind_Resume(exception_object);
}

void xgboost::common::ParallelGHistBuilder<double>::Reset(uint64_t a1, uint64_t a2, uint64_t a3, xgboost::common::BlockedSpace2d *a4, uint64_t **a5)
{
  _QWORD *v10;
  std::string *Entry;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = a3;
  if (*(_DWORD *)(a1 + 24) != *(_DWORD *)a1)
  {
    *(_DWORD *)(a1 + 24) = *(_DWORD *)a1;
    std::vector<std::vector<unsigned long>>::__clear[abi:ne180100]((uint64_t *)(a1 + 40));
  }
  v10 = *(_QWORD **)(a1 + 168);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 64);
  *(_DWORD *)(a1 + 28) = 0;
  std::__tree<dmlc::parameter::FieldAccessEntry *>::destroy(a1 + 160, v10);
  *(_QWORD *)(a1 + 160) = a1 + 168;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  if ((uint64_t **)(a1 + 136) != a5)
    std::vector<xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul>>::__assign_with_size[abi:ne180100]<xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul>*,xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul>*>((_QWORD *)(a1 + 136), *a5, a5[1], ((char *)a5[1] - (char *)*a5) >> 4);
  v23 = ((char *)a5[1] - (char *)*a5) >> 4;
  if (v23 != a3)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v24);
    if (v24)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v23);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/../common/../data/../common/hist_util.h");
      v12 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v23);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Check failed: ", 14);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"nodes == targeted_hists.size()", 30);
      v15 = *(char *)(v24 + 23);
      v16 = v15 >= 0 ? v24 : *(_QWORD *)v24;
      v17 = v15 >= 0 ? *(unsigned __int8 *)(v24 + 23) : *(_QWORD *)(v24 + 8);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v23);
      v19 = v24;
      v24 = 0;
      if (v19)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v24, v19);
    }
  }
  v20 = v25;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = v20;
  xgboost::common::ParallelGHistBuilder<float>::MatchThreadsToNodes((_QWORD *)a1, a4);
  xgboost::common::ParallelGHistBuilder<double>::AllocateAdditionalHistograms((_QWORD *)a1);
  xgboost::common::ParallelGHistBuilder<float>::MatchNodeNidPairToHist((_OWORD *)a1);
  std::vector<int>::resize((std::vector<int> *)(a1 + 88), *(_QWORD *)(a1 + 16) * a2);
  v21 = *(void **)(a1 + 88);
  v22 = *(_QWORD *)(a1 + 96) - (_QWORD)v21;
  if (v22 >= 1)
    bzero(v21, 4 * (((unint64_t)v22 >> 2) - ((unint64_t)v22 > 3)) + 4);
}

void sub_220EEEE60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v12;

  v12 = a11;
  a11 = 0;
  if (v12)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a11, v12);
  _Unwind_Resume(exception_object);
}

void xgboost::common::ParallelFor2d<void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<false>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(_QWORD *a1, int a2, uint64_t a3)
{
  std::string *Entry;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  void *ptr;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  _QWORD v14[4];
  uint64_t v15;
  _DWORD v16[2];
  int v17;
  std::exception_ptr v18;
  std::mutex v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v15 = (uint64_t)(a1[1] - *a1) >> 4;
  v17 = a2;
  v16[0] = a2;
  v16[1] = 1;
  if (a2 < 1)
  {
    dmlc::LogCheckFormat<int,int>((uint64_t *)&v18);
    if (v18.__ptr_)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/../common/../data/../common/threading_utils.h");
      v6 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: ", 14);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"nthreads >= 1", 13);
      v9 = *((char *)v18.__ptr_ + 23);
      if (v9 >= 0)
        ptr = v18.__ptr_;
      else
        ptr = *(void **)v18.__ptr_;
      if (v9 >= 0)
        v11 = *((unsigned __int8 *)v18.__ptr_ + 23);
      else
        v11 = *((_QWORD *)v18.__ptr_ + 1);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)ptr, v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v17);
      v13 = v18.__ptr_;
      v18.__ptr_ = 0;
      if (v13)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v18, (uint64_t)v13);
    }
  }
  v18.__ptr_ = 0;
  v19.__m_.__sig = 850045863;
  memset(v19.__m_.__opaque, 0, sizeof(v19.__m_.__opaque));
  v14[0] = &v15;
  v14[1] = v16;
  v14[2] = a3;
  v14[3] = a1;
  dmlc::OMPException::Run<void xgboost::common::ParallelFor2d<void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<false>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<false>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}>((uint64_t)&v18, (uint64_t)v14);
  dmlc::OMPException::Rethrow(&v18);
  std::mutex::~mutex(&v19);
  std::exception_ptr::~exception_ptr(&v18);
}

void sub_220EEF014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, char a17, std::exception_ptr a18)
{
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<xgboost::common::Span<xgboost::detail::GradientPairInternal<double>,18446744073709551615ul>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_220EEF0CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::common::ParallelGHistBuilder<double>::AllocateAdditionalHistograms(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  v1 = a1[2];
  if (v1)
  {
    v2 = 0;
    v3 = 0;
    do
    {
      v4 = v3;
      v5 = 0;
      if (a1[1])
      {
        v6 = v2;
        v7 = a1[1];
        do
        {
          v5 += (*(_QWORD *)(a1[14] + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v6) & 1;
          v6 += v1;
          --v7;
        }
        while (v7);
      }
      if (v5 <= 1)
        v8 = 1;
      else
        v8 = v5;
      v3 = v4 + (v8 - 1);
      ++v2;
    }
    while (v2 != v1);
    if (v3)
    {
      v9 = 0;
      v10 = (uint64_t)(a1 + 3);
      if (v5 <= 1)
        v11 = 1;
      else
        v11 = v5;
      v12 = v4 + (v11 - 1);
      do
        xgboost::common::HistCollection<double>::AddHistRow(v10, v9++);
      while (v12 != v9);
    }
  }
}

void dmlc::OMPException::Run<void xgboost::common::ParallelFor2d<void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<false>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<false>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}>(uint64_t a1, uint64_t a2)
{
  xgboost::common::ParallelFor2d<void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<false>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<false>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}::operator()(a2);
}

void xgboost::common::ParallelFor2d<void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<false>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<false>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}::operator()(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t i;
  uint64_t v7;
  unint64_t FirstDimension;
  unint64_t Range;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD v20[2];
  _QWORD v21[2];
  unsigned int v22;
  _QWORD v23[2];

  v1 = **(_QWORD **)a1;
  v2 = **(int **)(a1 + 8);
  if (v1 % v2)
    v3 = v1 / v2 + 1;
  else
    v3 = v1 / v2;
  if (v1 >= v3)
    v4 = v3;
  else
    v4 = **(_QWORD **)a1;
  if (v4)
  {
    for (i = 0; i != v4; ++i)
    {
      v7 = *(_QWORD *)(a1 + 16);
      FirstDimension = xgboost::common::BlockedSpace2d::GetFirstDimension(*(xgboost::common::BlockedSpace2d **)(a1 + 24), i);
      Range = xgboost::common::BlockedSpace2d::GetRange(*(xgboost::common::BlockedSpace2d **)(a1 + 24), i);
      v11 = *(_DWORD *)(**(_QWORD **)v7 + 88 * FirstDimension);
      v12 = *(_QWORD *)(v7 + 16);
      v13 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 24) + 24 * v11);
      v14 = *v13;
      v15 = (v13[1] - *v13) >> 3;
      if (v15 >= Range)
        v16 = Range;
      else
        v16 = v15;
      if (v15 >= v10)
        v17 = v10;
      else
        v17 = v15;
      xgboost::common::ParallelGHistBuilder<double>::GetInitializedHist(v12 + 136, 0, FirstDimension, (uint64_t)v23);
      if (v17 != v16)
      {
        v21[0] = v14 + 8 * v16;
        v21[1] = v14 + 8 * v17;
        v22 = v11;
        v18 = *(uint64_t **)(v7 + 24);
        v19 = *(_QWORD *)(v7 + 32);
        v20[0] = v23[0];
        v20[1] = v23[1];
        xgboost::common::GHistBuilder<double>::BuildHist<false>(v12 + 128, v18, v21, v19, v20);
      }
    }
  }
}

void xgboost::common::ParallelGHistBuilder<double>::GetInitializedHist(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::string *Entry;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  std::string *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28[2];
  char v29;
  uint64_t v30;
  uint64_t v31;

  v30 = a3;
  v31 = a2;
  if (*(_QWORD *)(a1 + 16) <= a3)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(v28);
    if (v28[0])
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v29);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/../common/../data/../common/hist_util.h");
      v8 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v29);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed: ", 14);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"nid < nodes_", 12);
      v11 = *(char *)(v28[0] + 23);
      v12 = v11 >= 0 ? v28[0] : *(_QWORD *)v28[0];
      v13 = v11 >= 0 ? *(unsigned __int8 *)(v28[0] + 23) : *(_QWORD *)(v28[0] + 8);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v29);
      v15 = v28[0];
      v28[0] = 0;
      if (v15)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v28, v15);
    }
  }
  if (*(_QWORD *)(a1 + 8) <= a2)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(v28);
    if (v28[0])
    {
      v16 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v29);
      dmlc::LogMessageFatal::Entry::Init(v16, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/../common/../data/../common/hist_util.h");
      v17 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v29);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Check failed: ", 14);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"tid < nthreads_", 15);
      v20 = *(char *)(v28[0] + 23);
      v21 = v20 >= 0 ? v28[0] : *(_QWORD *)v28[0];
      v22 = v20 >= 0 ? *(unsigned __int8 *)(v28[0] + 23) : *(_QWORD *)(v28[0] + 8);
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v21, v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v29);
      v24 = v28[0];
      v28[0] = 0;
      if (v24)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v28, v24);
    }
  }
  v28[0] = v31;
  v28[1] = v30;
  v25 = *(_DWORD *)std::map<std::pair<unsigned long,unsigned long>,int>::at(a1 + 160, (unint64_t *)v28);
  if ((v25 & 0x80000000) == 0)
  {
    xgboost::common::HistCollection<double>::AllocateData((unsigned int *)(a1 + 24), v25);
LABEL_24:
    xgboost::common::HistCollection<double>::operator[]((unsigned int *)(a1 + 24), v25, (_QWORD *)a4);
    v26 = v30;
    goto LABEL_25;
  }
  if (v25 != -1)
    goto LABEL_24;
  v26 = v30;
  v27 = (_QWORD *)(*(_QWORD *)(a1 + 136) + 16 * v30);
  *(_QWORD *)a4 = *v27;
  *(_QWORD *)(a4 + 8) = v27[1];
LABEL_25:
  if (!*(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * (v26 + *(_QWORD *)(a1 + 16) * v31)))
  {
    bzero(*(void **)(a4 + 8), 16 * *(_QWORD *)a4);
    *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * (v30 + *(_QWORD *)(a1 + 16) * v31)) = 1;
  }
}

void sub_220EEF5C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v16;

  v16 = a10;
  a10 = 0;
  if (v16)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a10, v16);
  _Unwind_Resume(exception_object);
}

void xgboost::common::HistCollection<double>::AllocateData(unsigned int *a1, unsigned int a2)
{
  _QWORD *v3;
  unint64_t v4;
  __int128 v5;

  v3 = (_QWORD *)(*((_QWORD *)a1 + 2) + 24 * *(_QWORD *)(*((_QWORD *)a1 + 5) + 8 * a2));
  if (v3[1] == *v3)
  {
    v4 = *a1;
    v5 = 0uLL;
    std::vector<xgboost::detail::GradientPairInternal<double>>::resize((uint64_t)v3, v4, &v5);
  }
}

void std::vector<xgboost::detail::GradientPairInternal<double>>::resize(uint64_t a1, unint64_t a2, _OWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    std::vector<xgboost::detail::GradientPairInternal<double>>::__append((void **)a1, a2 - v3, a3);
  }
}

void std::vector<xgboost::detail::GradientPairInternal<double>>::__append(void **a1, unint64_t a2, _OWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _OWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _OWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_OWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 4)
  {
    if (a2)
    {
      v16 = 16 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 16;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 4);
    if (v11 >> 60)
      std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_length_error[abi:ne180100]();
    v12 = v10 >> 4;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 3 > v11)
      v11 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WQSummary<float,float>::Entry>>(v6, v14);
    else
      v15 = 0;
    v18 = &v15[16 * v12];
    v19 = &v18[16 * a2];
    v20 = 16 * a2;
    v21 = v18;
    do
    {
      *(_OWORD *)v21 = *a3;
      v21 += 16;
      v20 -= 16;
    }
    while (v20);
    v22 = &v15[16 * v14];
    v24 = (char *)*a1;
    v23 = (char *)a1[1];
    if (v23 != *a1)
    {
      do
      {
        *((_OWORD *)v18 - 1) = *((_OWORD *)v23 - 1);
        v18 -= 16;
        v23 -= 16;
      }
      while (v23 != v24);
      v23 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

void xgboost::common::ParallelFor2d<void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<true>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(_QWORD *a1, int a2, uint64_t a3)
{
  std::string *Entry;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  void *ptr;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  _QWORD v14[4];
  uint64_t v15;
  _DWORD v16[2];
  int v17;
  std::exception_ptr v18;
  std::mutex v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v15 = (uint64_t)(a1[1] - *a1) >> 4;
  v17 = a2;
  v16[0] = a2;
  v16[1] = 1;
  if (a2 < 1)
  {
    dmlc::LogCheckFormat<int,int>((uint64_t *)&v18);
    if (v18.__ptr_)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/../common/../data/../common/threading_utils.h");
      v6 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: ", 14);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"nthreads >= 1", 13);
      v9 = *((char *)v18.__ptr_ + 23);
      if (v9 >= 0)
        ptr = v18.__ptr_;
      else
        ptr = *(void **)v18.__ptr_;
      if (v9 >= 0)
        v11 = *((unsigned __int8 *)v18.__ptr_ + 23);
      else
        v11 = *((_QWORD *)v18.__ptr_ + 1);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)ptr, v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v17);
      v13 = v18.__ptr_;
      v18.__ptr_ = 0;
      if (v13)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v18, (uint64_t)v13);
    }
  }
  v18.__ptr_ = 0;
  v19.__m_.__sig = 850045863;
  memset(v19.__m_.__opaque, 0, sizeof(v19.__m_.__opaque));
  v14[0] = &v15;
  v14[1] = v16;
  v14[2] = a3;
  v14[3] = a1;
  dmlc::OMPException::Run<void xgboost::common::ParallelFor2d<void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<true>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<true>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}>((uint64_t)&v18, (uint64_t)v14);
  dmlc::OMPException::Rethrow(&v18);
  std::mutex::~mutex(&v19);
  std::exception_ptr::~exception_ptr(&v18);
}

void sub_220EEF930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, char a17, std::exception_ptr a18)
{
  _Unwind_Resume(exception_object);
}

void dmlc::OMPException::Run<void xgboost::common::ParallelFor2d<void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<true>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<true>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}>(uint64_t a1, uint64_t a2)
{
  xgboost::common::ParallelFor2d<void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<true>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<true>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}::operator()(a2);
}

void xgboost::common::ParallelFor2d<void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<true>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::BuildLocalHistograms<true>(unsigned long,xgboost::common::BlockedSpace2d,xgboost::GHistIndexMatrix const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::common::RowSetCollection const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}::operator()(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t i;
  uint64_t v7;
  unint64_t FirstDimension;
  unint64_t Range;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  _QWORD v20[2];
  _QWORD v21[2];
  unsigned int v22;
  _QWORD v23[2];

  v1 = **(_QWORD **)a1;
  v2 = **(int **)(a1 + 8);
  if (v1 % v2)
    v3 = v1 / v2 + 1;
  else
    v3 = v1 / v2;
  if (v1 >= v3)
    v4 = v3;
  else
    v4 = **(_QWORD **)a1;
  if (v4)
  {
    for (i = 0; i != v4; ++i)
    {
      v7 = *(_QWORD *)(a1 + 16);
      FirstDimension = xgboost::common::BlockedSpace2d::GetFirstDimension(*(xgboost::common::BlockedSpace2d **)(a1 + 24), i);
      Range = xgboost::common::BlockedSpace2d::GetRange(*(xgboost::common::BlockedSpace2d **)(a1 + 24), i);
      v11 = *(_DWORD *)(**(_QWORD **)v7 + 88 * FirstDimension);
      v12 = *(_QWORD *)(v7 + 16);
      v13 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 24) + 24 * v11);
      v14 = *v13;
      v15 = (v13[1] - *v13) >> 3;
      if (v15 >= Range)
        v16 = Range;
      else
        v16 = v15;
      if (v15 >= v10)
        v17 = v10;
      else
        v17 = v15;
      xgboost::common::ParallelGHistBuilder<double>::GetInitializedHist(v12 + 136, 0, FirstDimension, (uint64_t)v23);
      if (v17 != v16)
      {
        v21[0] = v14 + 8 * v16;
        v21[1] = v14 + 8 * v17;
        v22 = v11;
        v18 = *(uint64_t **)(v7 + 24);
        v19 = *(uint64_t **)(v7 + 32);
        v20[0] = v23[0];
        v20[1] = v23[1];
        xgboost::common::GHistBuilder<double>::BuildHist<true>(v12 + 128, v18, v21, v19, v20);
      }
    }
  }
}

void xgboost::common::ParallelFor2d<xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(_QWORD *a1, int a2, uint64_t a3)
{
  std::string *Entry;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  void *ptr;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  _QWORD v14[4];
  uint64_t v15;
  _DWORD v16[2];
  int v17;
  std::exception_ptr v18;
  std::mutex v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v15 = (uint64_t)(a1[1] - *a1) >> 4;
  v17 = a2;
  v16[0] = a2;
  v16[1] = 1;
  if (a2 < 1)
  {
    dmlc::LogCheckFormat<int,int>((uint64_t *)&v18);
    if (v18.__ptr_)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/../common/../data/../common/threading_utils.h");
      v6 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: ", 14);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"nthreads >= 1", 13);
      v9 = *((char *)v18.__ptr_ + 23);
      if (v9 >= 0)
        ptr = v18.__ptr_;
      else
        ptr = *(void **)v18.__ptr_;
      if (v9 >= 0)
        v11 = *((unsigned __int8 *)v18.__ptr_ + 23);
      else
        v11 = *((_QWORD *)v18.__ptr_ + 1);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)ptr, v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v17);
      v13 = v18.__ptr_;
      v18.__ptr_ = 0;
      if (v13)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v18, (uint64_t)v13);
    }
  }
  v18.__ptr_ = 0;
  v19.__m_.__sig = 850045863;
  memset(v19.__m_.__opaque, 0, sizeof(v19.__m_.__opaque));
  v14[0] = &v15;
  v14[1] = v16;
  v14[2] = a3;
  v14[3] = a1;
  dmlc::OMPException::Run<void xgboost::common::ParallelFor2d<xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}>((uint64_t)&v18, (uint64_t)v14);
  dmlc::OMPException::Rethrow(&v18);
  std::mutex::~mutex(&v19);
  std::exception_ptr::~exception_ptr(&v18);
}

void sub_220EEFCF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, char a17, std::exception_ptr a18)
{
  _Unwind_Resume(exception_object);
}

xgboost::common::BlockedSpace2d *xgboost::common::BlockedSpace2d::BlockedSpace2d<xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long)#1}>(xgboost::common::BlockedSpace2d *this, uint64_t a2, unint64_t *a3, unint64_t a4)
{
  uint64_t i;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  if (a2)
  {
    for (i = 0; i != a2; ++i)
    {
      v9 = *a3;
      if (*a3 % a4)
        v10 = *a3 / a4 + 1;
      else
        v10 = *a3 / a4;
      if (v10)
      {
        v11 = 0;
        do
        {
          if (v9 >= a4 + v11)
            v12 = a4 + v11;
          else
            v12 = v9;
          xgboost::common::BlockedSpace2d::AddBlock(this, i, v11, v12);
          v11 += a4;
          --v10;
        }
        while (v10);
      }
    }
  }
  return this;
}

void sub_220EEFDFC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  void *v4;

  v3 = *(void **)(v1 + 24);
  if (v3)
  {
    *(_QWORD *)(v1 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void dmlc::OMPException::Run<void xgboost::common::ParallelFor2d<xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t i;
  uint64_t v8;
  unint64_t FirstDimension;
  unint64_t Range;
  unint64_t v11;

  v2 = **(_QWORD **)a2;
  v3 = **(int **)(a2 + 8);
  if (v2 % v3)
    v4 = v2 / v3 + 1;
  else
    v4 = v2 / v3;
  if (v2 >= v4)
    v5 = v4;
  else
    v5 = **(_QWORD **)a2;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 16);
      FirstDimension = xgboost::common::BlockedSpace2d::GetFirstDimension(*(xgboost::common::BlockedSpace2d **)(a2 + 24), i);
      Range = xgboost::common::BlockedSpace2d::GetRange(*(xgboost::common::BlockedSpace2d **)(a2 + 24), i);
      xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator()(v8, FirstDimension, Range, v11);
    }
  }
}

void xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator()(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unint64_t v19;
  double *v20;
  double *v21;
  double *v22;
  unint64_t v23;
  double v24;
  double v25;
  double v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36;

  v8 = *(unsigned int **)(a1 + 8);
  v9 = (unsigned int *)(**(_QWORD **)a1 + 88 * a2);
  xgboost::common::HistCollection<double>::operator[](v8, *v9, &v35);
  xgboost::common::ParallelGHistBuilder<double>::ReduceHist((uint64_t)(v8 + 34), a2, a3, a4);
  v10 = v8 + 16;
  xgboost::common::HistCollection<double>::operator[](v8 + 16, *v9, v34);
  v11 = 2 * a3;
  v12 = 2 * a4;
  if (v12 > 2 * a3)
  {
    v13 = v12 - v11;
    v14 = (_QWORD *)(v34[1] + 16 * a3);
    v15 = (uint64_t *)(v36 + 16 * a3);
    do
    {
      v16 = *v15++;
      *v14++ = v16;
      --v13;
    }
    while (v13);
  }
  v17 = *(_DWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 16) + 160) + 20 * (int)*v9);
  if (v17 != -1)
  {
    v18 = *(_DWORD *)(**(_QWORD **)(a1 + 24) + 88 * a2);
    xgboost::common::HistCollection<double>::operator[](v8 + 16, v17 & 0x7FFFFFFF, v33);
    xgboost::common::HistCollection<double>::operator[](v8, v18, &v31);
    v19 = v12 - v11;
    if (v12 <= v11)
    {
      xgboost::common::HistCollection<double>::operator[](v10, v18, v30);
    }
    else
    {
      v20 = (double *)(v32 + 16 * a3);
      v21 = (double *)(v36 + 16 * a3);
      v22 = (double *)(v33[1] + 16 * a3);
      v23 = v12 - v11;
      do
      {
        v24 = *v22++;
        v25 = v24;
        v26 = *v21++;
        *v20++ = v25 - v26;
        --v23;
      }
      while (v23);
      xgboost::common::HistCollection<double>::operator[](v10, v18, v30);
      v27 = (_QWORD *)(v30[1] + 16 * a3);
      v28 = (uint64_t *)(v32 + 16 * a3);
      do
      {
        v29 = *v28++;
        *v27++ = v29;
        --v19;
      }
      while (v19);
    }
  }
}

void xgboost::common::ParallelGHistBuilder<double>::ReduceHist(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  std::string *Entry;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  std::string *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  double *v34;
  double *v35;
  double v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;

  v41 = a3;
  v42 = a2;
  v40 = a4;
  if (a4 <= a3)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v37);
    if (v37)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v39);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/../common/../data/../common/hist_util.h");
      v6 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v39);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: ", 14);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"end > begin", 11);
      v9 = *(char *)(v37 + 23);
      v10 = v9 >= 0 ? v37 : *(_QWORD *)v37;
      v11 = v9 >= 0 ? *(unsigned __int8 *)(v37 + 23) : *(_QWORD *)(v37 + 8);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v39);
      v13 = v37;
      v37 = 0;
      if (v13)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v37, v13);
    }
  }
  if (v42 >= *(_QWORD *)(a1 + 16))
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v37);
    if (v37)
    {
      v14 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v39);
      dmlc::LogMessageFatal::Entry::Init(v14, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/../common/../data/../common/hist_util.h");
      v15 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v39);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Check failed: ", 14);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"nid < nodes_", 12);
      v18 = *(char *)(v37 + 23);
      v19 = v18 >= 0 ? v37 : *(_QWORD *)v37;
      v20 = v18 >= 0 ? *(unsigned __int8 *)(v37 + 23) : *(_QWORD *)(v37 + 8);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v39);
      v22 = v37;
      v37 = 0;
      if (v22)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v37, v22);
    }
  }
  v23 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 16 * v42 + 8);
  v24 = *(_QWORD *)(a1 + 8);
  if (v24)
  {
    v25 = 0;
    v26 = 0;
    while (2)
    {
      v27 = *(_QWORD *)(a1 + 16);
      v28 = (_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * (v42 + v26 * v27));
      v29 = 4 * v27;
      while (!*v28)
      {
        v28 = (_DWORD *)((char *)v28 + v29);
        if (++v26 >= v24)
        {
          if ((v25 & 1) != 0)
            return;
          goto LABEL_37;
        }
      }
      v37 = v26;
      v38 = v42;
      v30 = *(_DWORD *)std::map<std::pair<unsigned long,unsigned long>,int>::at(a1 + 160, &v37);
      if (v30 == -1)
      {
        v31 = (uint64_t *)(*(_QWORD *)(a1 + 136) + 16 * v42 + 8);
      }
      else
      {
        xgboost::common::HistCollection<double>::operator[]((unsigned int *)(a1 + 24), v30, &v37);
        v31 = (uint64_t *)&v38;
      }
      v32 = *v31;
      if (v23 != *v31 && 2 * v40 > 2 * v41)
      {
        v33 = 2 * v40 - 2 * v41;
        v34 = (double *)(v23 + 16 * v41);
        v35 = (double *)(v32 + 16 * v41);
        do
        {
          v36 = *v35++;
          *v34 = v36 + *v34;
          ++v34;
          --v33;
        }
        while (v33);
      }
      v24 = *(_QWORD *)(a1 + 8);
      ++v26;
      v25 = 1;
      if (v26 < v24)
        continue;
      break;
    }
  }
  else
  {
LABEL_37:
    bzero((void *)(v23 + 16 * v41), 16 * (v40 - v41));
  }
}

void sub_220EF03B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v15;

  v15 = a9;
  a9 = 0;
  if (v15)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a9, v15);
  _Unwind_Resume(exception_object);
}

void xgboost::common::ParallelFor2d<xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::ParallelSubtractionHist(xgboost::common::BlockedSpace2d const&,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::RegTree const*)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(_QWORD *a1, int a2, uint64_t a3)
{
  std::string *Entry;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  void *ptr;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  _QWORD v14[4];
  uint64_t v15;
  _DWORD v16[2];
  int v17;
  std::exception_ptr v18;
  std::mutex v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v15 = (uint64_t)(a1[1] - *a1) >> 4;
  v17 = a2;
  v16[0] = a2;
  v16[1] = 1;
  if (a2 < 1)
  {
    dmlc::LogCheckFormat<int,int>((uint64_t *)&v18);
    if (v18.__ptr_)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/../common/../data/../common/threading_utils.h");
      v6 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: ", 14);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"nthreads >= 1", 13);
      v9 = *((char *)v18.__ptr_ + 23);
      if (v9 >= 0)
        ptr = v18.__ptr_;
      else
        ptr = *(void **)v18.__ptr_;
      if (v9 >= 0)
        v11 = *((unsigned __int8 *)v18.__ptr_ + 23);
      else
        v11 = *((_QWORD *)v18.__ptr_ + 1);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)ptr, v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v17);
      v13 = v18.__ptr_;
      v18.__ptr_ = 0;
      if (v13)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v18, (uint64_t)v13);
    }
  }
  v18.__ptr_ = 0;
  v19.__m_.__sig = 850045863;
  memset(v19.__m_.__opaque, 0, sizeof(v19.__m_.__opaque));
  v14[0] = &v15;
  v14[1] = v16;
  v14[2] = a3;
  v14[3] = a1;
  dmlc::OMPException::Run<void xgboost::common::ParallelFor2d<xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::ParallelSubtractionHist(xgboost::common::BlockedSpace2d const&,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::RegTree const*)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::ParallelSubtractionHist(xgboost::common::BlockedSpace2d const&,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::RegTree const*)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}>((uint64_t)&v18, (uint64_t)v14);
  dmlc::OMPException::Rethrow(&v18);
  std::mutex::~mutex(&v19);
  std::exception_ptr::~exception_ptr(&v18);
}

void sub_220EF0578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, char a17, std::exception_ptr a18)
{
  _Unwind_Resume(exception_object);
}

void dmlc::OMPException::Run<void xgboost::common::ParallelFor2d<xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::ParallelSubtractionHist(xgboost::common::BlockedSpace2d const&,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::RegTree const*)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::ParallelSubtractionHist(xgboost::common::BlockedSpace2d const&,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,xgboost::RegTree const*)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t i;
  uint64_t v8;
  uint64_t FirstDimension;
  uint64_t Range;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int *v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  double *v19;
  double *v20;
  double *v21;
  double v22;
  double v23;
  double v24;
  _QWORD v25[2];
  _QWORD v26[2];
  _QWORD v27[2];

  v2 = **(_QWORD **)a2;
  v3 = **(int **)(a2 + 8);
  if (v2 % v3)
    v4 = v2 / v3 + 1;
  else
    v4 = v2 / v3;
  if (v2 >= v4)
    v5 = v4;
  else
    v5 = **(_QWORD **)a2;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 16);
      FirstDimension = xgboost::common::BlockedSpace2d::GetFirstDimension(*(xgboost::common::BlockedSpace2d **)(a2 + 24), i);
      Range = xgboost::common::BlockedSpace2d::GetRange(*(xgboost::common::BlockedSpace2d **)(a2 + 24), i);
      v12 = v11;
      v13 = (unsigned int *)(**(_QWORD **)v8 + 88 * FirstDimension);
      if ((*(_DWORD *)(*(_QWORD *)(**(_QWORD **)(v8 + 8) + 160) + 20 * (int)*v13) & 0x80000000) == 0)
      {
        v14 = Range;
        v15 = *(unsigned int **)(v8 + 16);
        xgboost::common::HistCollection<double>::operator[](v15, *v13, v27);
        v16 = *(_DWORD *)(*(_QWORD *)(**(_QWORD **)(v8 + 8) + 160) + 20 * (int)*v13);
        if (v16 != -1)
        {
          v17 = *(_DWORD *)(**(_QWORD **)(v8 + 24) + 88 * FirstDimension);
          xgboost::common::HistCollection<double>::operator[](v15, v16 & 0x7FFFFFFF, v26);
          xgboost::common::HistCollection<double>::operator[](v15, v17, v25);
          if (2 * v12 > (unint64_t)(2 * v14))
          {
            v18 = 2 * v12 - 2 * v14;
            v19 = (double *)(v27[1] + 16 * v14);
            v20 = (double *)(v25[1] + 16 * v14);
            v21 = (double *)(v26[1] + 16 * v14);
            do
            {
              v22 = *v21++;
              v23 = v22;
              v24 = *v20++;
              *v19++ = v23 - v24;
              --v18;
            }
            while (v18);
          }
        }
      }
    }
  }
}

xgboost::common::BlockedSpace2d *xgboost::common::BlockedSpace2d::BlockedSpace2d<xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::SyncHistogramDistributed(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long)#2}>(xgboost::common::BlockedSpace2d *this, uint64_t a2, unint64_t *a3, unint64_t a4)
{
  uint64_t i;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  if (a2)
  {
    for (i = 0; i != a2; ++i)
    {
      v9 = *a3;
      if (*a3 % a4)
        v10 = *a3 / a4 + 1;
      else
        v10 = *a3 / a4;
      if (v10)
      {
        v11 = 0;
        do
        {
          if (v9 >= a4 + v11)
            v12 = a4 + v11;
          else
            v12 = v9;
          xgboost::common::BlockedSpace2d::AddBlock(this, i, v11, v12);
          v11 += a4;
          --v10;
        }
        while (v10);
      }
    }
  }
  return this;
}

void sub_220EF089C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  void *v4;

  v3 = *(void **)(v1 + 24);
  if (v3)
  {
    *(_QWORD *)(v1 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::common::ParallelFor2d<xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::SyncHistogramLocal(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(_QWORD *a1, int a2, uint64_t a3)
{
  std::string *Entry;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  void *ptr;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  _QWORD v14[4];
  uint64_t v15;
  _DWORD v16[2];
  int v17;
  std::exception_ptr v18;
  std::mutex v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v15 = (uint64_t)(a1[1] - *a1) >> 4;
  v17 = a2;
  v16[0] = a2;
  v16[1] = 1;
  if (a2 < 1)
  {
    dmlc::LogCheckFormat<int,int>((uint64_t *)&v18);
    if (v18.__ptr_)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/../common/../data/../common/threading_utils.h");
      v6 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: ", 14);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"nthreads >= 1", 13);
      v9 = *((char *)v18.__ptr_ + 23);
      if (v9 >= 0)
        ptr = v18.__ptr_;
      else
        ptr = *(void **)v18.__ptr_;
      if (v9 >= 0)
        v11 = *((unsigned __int8 *)v18.__ptr_ + 23);
      else
        v11 = *((_QWORD *)v18.__ptr_ + 1);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)ptr, v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v17);
      v13 = v18.__ptr_;
      v18.__ptr_ = 0;
      if (v13)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v18, (uint64_t)v13);
    }
  }
  v18.__ptr_ = 0;
  v19.__m_.__sig = 850045863;
  memset(v19.__m_.__opaque, 0, sizeof(v19.__m_.__opaque));
  v14[0] = &v15;
  v14[1] = v16;
  v14[2] = a3;
  v14[3] = a1;
  dmlc::OMPException::Run<void xgboost::common::ParallelFor2d<xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::SyncHistogramLocal(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::SyncHistogramLocal(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}>((uint64_t)&v18, (uint64_t)v14);
  dmlc::OMPException::Rethrow(&v18);
  std::mutex::~mutex(&v19);
  std::exception_ptr::~exception_ptr(&v18);
}

void sub_220EF0A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, char a17, std::exception_ptr a18)
{
  _Unwind_Resume(exception_object);
}

xgboost::common::BlockedSpace2d *xgboost::common::BlockedSpace2d::BlockedSpace2d<xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::SyncHistogramLocal(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long)#1}>(xgboost::common::BlockedSpace2d *this, uint64_t a2, unint64_t *a3, unint64_t a4)
{
  uint64_t i;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  if (a2)
  {
    for (i = 0; i != a2; ++i)
    {
      v9 = *a3;
      if (*a3 % a4)
        v10 = *a3 / a4 + 1;
      else
        v10 = *a3 / a4;
      if (v10)
      {
        v11 = 0;
        do
        {
          if (v9 >= a4 + v11)
            v12 = a4 + v11;
          else
            v12 = v9;
          xgboost::common::BlockedSpace2d::AddBlock(this, i, v11, v12);
          v11 += a4;
          --v10;
        }
        while (v10);
      }
    }
  }
  return this;
}

void sub_220EF0B50(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  void *v4;

  v3 = *(void **)(v1 + 24);
  if (v3)
  {
    *(_QWORD *)(v1 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void dmlc::OMPException::Run<void xgboost::common::ParallelFor2d<xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::SyncHistogramLocal(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::SyncHistogramLocal(xgboost::RegTree *,std::vector<xgboost::tree::CPUExpandEntry> const&,std::vector<xgboost::tree::CPUExpandEntry> const&,int,int)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t i;
  uint64_t v8;
  unint64_t FirstDimension;
  unint64_t Range;
  unint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  double *v18;
  double *v19;
  double *v20;
  double v21;
  double v22;
  double v23;
  _QWORD v24[2];
  _QWORD v25[2];
  _QWORD v26[2];

  v2 = **(_QWORD **)a2;
  v3 = **(int **)(a2 + 8);
  if (v2 % v3)
    v4 = v2 / v3 + 1;
  else
    v4 = v2 / v3;
  if (v2 >= v4)
    v5 = v4;
  else
    v5 = **(_QWORD **)a2;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 16);
      FirstDimension = xgboost::common::BlockedSpace2d::GetFirstDimension(*(xgboost::common::BlockedSpace2d **)(a2 + 24), i);
      Range = xgboost::common::BlockedSpace2d::GetRange(*(xgboost::common::BlockedSpace2d **)(a2 + 24), i);
      v12 = v11;
      v13 = *(unsigned int **)(v8 + 8);
      v14 = (unsigned int *)(**(_QWORD **)v8 + 88 * FirstDimension);
      xgboost::common::HistCollection<double>::operator[](v13, *v14, v26);
      xgboost::common::ParallelGHistBuilder<double>::ReduceHist((uint64_t)(v13 + 34), FirstDimension, Range, v12);
      v15 = *(_DWORD *)(*(_QWORD *)(**(_QWORD **)(v8 + 16) + 160) + 20 * (int)*v14);
      if (v15 != -1)
      {
        v16 = *(_DWORD *)(**(_QWORD **)(v8 + 24) + 88 * FirstDimension);
        xgboost::common::HistCollection<double>::operator[](v13, v15 & 0x7FFFFFFF, v25);
        xgboost::common::HistCollection<double>::operator[](v13, v16, v24);
        if (2 * v12 > 2 * Range)
        {
          v17 = 2 * v12 - 2 * Range;
          v18 = (double *)(v24[1] + 16 * Range);
          v19 = (double *)(v26[1] + 16 * Range);
          v20 = (double *)(v25[1] + 16 * Range);
          do
          {
            v21 = *v20++;
            v22 = v21;
            v23 = *v19++;
            *v18++ = v22 - v23;
            --v17;
          }
          while (v17);
        }
      }
    }
  }
}

void xgboost::common::ParallelFor2d<xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(_QWORD *a1, int a2, uint64_t a3)
{
  std::string *Entry;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  void *ptr;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  _QWORD v14[4];
  uint64_t v15;
  _DWORD v16[2];
  int v17;
  std::exception_ptr v18;
  std::mutex v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v15 = (uint64_t)(a1[1] - *a1) >> 4;
  v17 = a2;
  v16[0] = a2;
  v16[1] = 1;
  if (a2 < 1)
  {
    dmlc::LogCheckFormat<int,int>((uint64_t *)&v18);
    if (v18.__ptr_)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/../common/../data/../common/threading_utils.h");
      v6 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: ", 14);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"nthreads >= 1", 13);
      v9 = *((char *)v18.__ptr_ + 23);
      if (v9 >= 0)
        ptr = v18.__ptr_;
      else
        ptr = *(void **)v18.__ptr_;
      if (v9 >= 0)
        v11 = *((unsigned __int8 *)v18.__ptr_ + 23);
      else
        v11 = *((_QWORD *)v18.__ptr_ + 1);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)ptr, v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v17);
      v13 = v18.__ptr_;
      v18.__ptr_ = 0;
      if (v13)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v18, (uint64_t)v13);
    }
  }
  v18.__ptr_ = 0;
  v19.__m_.__sig = 850045863;
  memset(v19.__m_.__opaque, 0, sizeof(v19.__m_.__opaque));
  v14[0] = &v15;
  v14[1] = v16;
  v14[2] = a3;
  v14[3] = a1;
  dmlc::OMPException::Run<void xgboost::common::ParallelFor2d<xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}>((uint64_t)&v18, (uint64_t)v14);
  dmlc::OMPException::Rethrow(&v18);
  std::mutex::~mutex(&v19);
  std::exception_ptr::~exception_ptr(&v18);
}

void sub_220EF0F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, char a17, std::exception_ptr a18)
{
  _Unwind_Resume(exception_object);
}

xgboost::common::BlockedSpace2d *xgboost::common::BlockedSpace2d::BlockedSpace2d<xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long)#1}>(xgboost::common::BlockedSpace2d *this, uint64_t a2, _QWORD *a3, unint64_t a4)
{
  uint64_t i;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  if (a2)
  {
    for (i = 0; i != a2; ++i)
    {
      v9 = (uint64_t)(*(_QWORD *)(**(_QWORD **)(*a3 + 16 * i) + 8) - ***(_QWORD ***)(*a3 + 16 * i)) >> 2;
      if (v9 % a4)
        v10 = v9 / a4 + 1;
      else
        v10 = v9 / a4;
      if (v10)
      {
        v11 = 0;
        do
        {
          if (v9 >= a4 + v11)
            v12 = a4 + v11;
          else
            v12 = v9;
          xgboost::common::BlockedSpace2d::AddBlock(this, i, v11, v12);
          v11 += a4;
          --v10;
        }
        while (v10);
      }
    }
  }
  return this;
}

void sub_220EF1030(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  void *v4;

  v3 = *(void **)(v1 + 24);
  if (v3)
  {
    *(_QWORD *)(v1 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void dmlc::OMPException::Run<void xgboost::common::ParallelFor2d<xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}>(xgboost::common::BlockedSpace2d const&,int,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1})::{lambda(void)#1}>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t i;
  uint64_t v8;
  uint64_t FirstDimension;
  unint64_t Range;
  unint64_t v11;

  v2 = **(_QWORD **)a2;
  v3 = **(int **)(a2 + 8);
  if (v2 % v3)
    v4 = v2 / v3 + 1;
  else
    v4 = v2 / v3;
  if (v2 >= v4)
    v5 = v4;
  else
    v5 = **(_QWORD **)a2;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 16);
      FirstDimension = xgboost::common::BlockedSpace2d::GetFirstDimension(*(xgboost::common::BlockedSpace2d **)(a2 + 24), i);
      Range = xgboost::common::BlockedSpace2d::GetRange(*(xgboost::common::BlockedSpace2d **)(a2 + 24), i);
      xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator()(v8, FirstDimension, Range, v11);
    }
  }
}

void xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator()(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  int v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  double v21;
  double *v22;
  double v23;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  int8x16_t v28;
  int8x16_t v29;
  uint64_t *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  xgboost::FeatureInteractionConstraintHost *v38;
  uint64_t v39;
  _QWORD v40[2];
  _QWORD v41[2];
  unint64_t v42[2];
  unint64_t v43[2];
  uint64_t v44[3];
  unint64_t v45[2];
  void *__p;
  uint64_t *v47;
  _QWORD v48[2];
  _QWORD v49[2];
  unint64_t v50[3];

  v8 = *(_QWORD *)(a1 + 8);
  v9 = (unsigned int *)(**(_QWORD **)a1 + 88 * *(int *)(v8 + 184) * a2);
  v10 = *v9;
  v37 = (uint64_t)(v9 + 2);
  xgboost::common::HistCollection<double>::operator[](*(unsigned int **)(a1 + 16), *v9, v50);
  if (a3 < a4)
  {
    v11 = v10;
    v12 = **(uint64_t ***)(**(_QWORD **)(a1 + 24) + 16 * a2);
    v13 = *v12;
    if (a3 <= (v12[1] - *v12) >> 2)
      v14 = (v12[1] - *v12) >> 2;
    else
      v14 = a3;
    v38 = (xgboost::FeatureInteractionConstraintHost *)(v8 + 192);
    v39 = v14;
    v36 = a4;
    do
    {
      if (a3 == v39)
LABEL_32:
        std::terminate();
      v15 = *(unsigned int *)(v13 + 4 * a3);
      v16 = *(unint64_t **)(a1 + 32);
      if (*v16)
      {
        if (*v16 <= v15)
          goto LABEL_32;
        v17 = *(unsigned __int8 *)(v16[1] + v15);
        if (!xgboost::FeatureInteractionConstraintHost::Query(v38, v11, *(_DWORD *)(v13 + 4 * a3)))
          goto LABEL_30;
        if (v17 != 1)
        {
LABEL_15:
          v41[0] = 0;
          v41[1] = 0;
          xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EnumerateSplit<1,(xgboost::tree::SplitType)0>(v8, *(_QWORD *)(a1 + 48), (uint64_t)v41, v50, v15, v11, *(_QWORD **)(a1 + 56), v37);
          v22 = (double *)(*(_QWORD *)(v8 + 296) + 24 * v11);
          if (v23 != *v22 || v21 != v22[1])
          {
            v40[0] = 0;
            v40[1] = 0;
            xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EnumerateSplit<-1,(xgboost::tree::SplitType)0>(v8, *(_QWORD *)(a1 + 48), (uint64_t)v40, v50, v15, v11, *(_QWORD **)(a1 + 56), v37);
          }
          goto LABEL_30;
        }
        v18 = *(_QWORD **)(a1 + 40);
        v19 = (v15 + 1);
        if (v19 >= (uint64_t)(v18[1] - *v18) >> 2)
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        v20 = (*(_DWORD *)(*v18 + 4 * v19) - *(_DWORD *)(*v18 + 4 * v15));
        if (v20 >= *(_DWORD *)(v8 + 28))
        {
          std::vector<unsigned long>::vector(&__p, v20);
          v25 = (uint64_t *)__p;
          v26 = v47;
          if (__p != v47)
          {
            v27 = 0;
            do
              *v25++ = v27++;
            while (v25 != v26);
          }
          xgboost::common::Span<xgboost::detail::GradientPairInternal<double>,18446744073709551615ul>::subspan(v50, *(unsigned int *)(**(_QWORD **)(a1 + 40) + 4 * v15), v20, v45);
          v31 = (unint64_t *)__p;
          v30 = v47;
          v44[0] = *(_QWORD *)(a1 + 56);
          v44[1] = v8;
          v44[2] = (uint64_t)v45;
          v32 = ((char *)v47 - (_BYTE *)__p) >> 3;
          if ((char *)v47 - (_BYTE *)__p < 1025)
          {
            v33 = 0;
            v35 = 0;
          }
          else
          {
            v33 = (uint64_t *)std::get_temporary_buffer[abi:ne180100]<unsigned long>(((char *)v47 - (_BYTE *)__p) >> 3);
            v35 = v34;
          }
          std::__stable_sort<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(v31, v30, v44, v32, v33, v35, v28, v29);
          if (v33)
            operator delete(v33);
          v43[0] = ((char *)v47 - (_BYTE *)__p) >> 3;
          v43[1] = (unint64_t)__p;
          xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EnumerateSplit<1,(xgboost::tree::SplitType)2>(v8, *(_QWORD *)(a1 + 48), v43, v50, v15, v11, *(_QWORD **)(a1 + 56), v37);
          v42[0] = ((char *)v47 - (_BYTE *)__p) >> 3;
          v42[1] = (unint64_t)__p;
          xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EnumerateSplit<-1,(xgboost::tree::SplitType)2>(v8, *(_QWORD *)(a1 + 48), v42, v50, v15, v11, *(_QWORD **)(a1 + 56), v37);
          a4 = v36;
          if (__p)
          {
            v47 = (uint64_t *)__p;
            operator delete(__p);
          }
        }
        else
        {
          v49[0] = 0;
          v49[1] = 0;
          xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EnumerateSplit<1,(xgboost::tree::SplitType)1>(v8, *(_QWORD *)(a1 + 48), (uint64_t)v49, v50, v15, v11, *(_QWORD **)(a1 + 56), v37);
          v48[0] = 0;
          v48[1] = 0;
          xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EnumerateSplit<-1,(xgboost::tree::SplitType)1>(v8, *(_QWORD *)(a1 + 48), (uint64_t)v48, v50, v15, v11, *(_QWORD **)(a1 + 56), v37);
          a4 = v36;
        }
      }
      else if (xgboost::FeatureInteractionConstraintHost::Query(v38, v11, *(_DWORD *)(v13 + 4 * a3)))
      {
        goto LABEL_15;
      }
LABEL_30:
      ++a3;
    }
    while (a3 != a4);
  }
}

void sub_220EF14D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EnumerateSplit<1,(xgboost::tree::SplitType)1>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, unsigned int a5, int a6, _QWORD *a7, uint64_t a8)
{
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v15;
  unint64_t v16;
  int8x16_t v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  unsigned int v23;
  int v24;
  double v25;
  uint64_t v26;
  double v27;
  float v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  int8x16_t v32;
  double v33;
  double v34;
  double v35;
  double v37;
  float v38;
  std::string *Entry;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  std::string *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  double v59;
  char v60;
  _QWORD *v61;
  uint64_t v63;
  int8x16_t v64;
  uint64_t v65[2];
  unint64_t v66[3];

  v8 = *(uint64_t **)(a2 + 16);
  v9 = a5 + 1;
  v10 = *v8;
  if (v9 >= (v8[1] - *v8) >> 2)
    goto LABEL_46;
  v61 = *(_QWORD **)(a2 + 8);
  v15 = *(_QWORD *)(a1 + 296);
  v16 = *(unsigned int *)(v10 + 4 * a5);
  xgboost::common::Span<xgboost::detail::GradientPairInternal<double>,18446744073709551615ul>::subspan(a4, v16, *(_DWORD *)(v10 + 4 * v9) - (int)v16, v66);
  v18 = (_DWORD *)(*v8 + 4 * a5);
  v64.i32[0] = 0x7FFFFFFF;
  if ((*v18 & 0x80000000) != 0)
  {
    dmlc::LogCheckFormat<unsigned int,unsigned int>(v65);
    if (v65[0])
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v64);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/hist/evaluate_splits.h");
      v40 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v64);
      v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Check failed: ", 14);
      v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"cut_ptr[fidx] <= static_cast<uint32_t>(std::numeric_limits<int32_t>::max())", 75);
      v43 = *(char *)(v65[0] + 23);
      v44 = v43 >= 0 ? v65[0] : *(_QWORD *)v65[0];
      v45 = v43 >= 0 ? *(unsigned __int8 *)(v65[0] + 23) : *(_QWORD *)(v65[0] + 8);
      v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, v44, v45);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v64);
      v47 = v65[0];
      v65[0] = 0;
      if (v47)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v65, v47);
    }
  }
  v19 = (_DWORD *)(*v8 + 4 * v9);
  v64.i32[0] = 0x7FFFFFFF;
  if ((*v19 & 0x80000000) != 0)
  {
    dmlc::LogCheckFormat<unsigned int,unsigned int>(v65);
    if (v65[0])
    {
      v48 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v64);
      dmlc::LogMessageFatal::Entry::Init(v48, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/hist/evaluate_splits.h");
      v49 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v64);
      v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"Check failed: ", 14);
      v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"cut_ptr[fidx + 1] <= static_cast<uint32_t>(std::numeric_limits<int32_t>::max())", 79);
      v52 = *(char *)(v65[0] + 23);
      v53 = v52 >= 0 ? v65[0] : *(_QWORD *)v65[0];
      v54 = v52 >= 0 ? *(unsigned __int8 *)(v65[0] + 23) : *(_QWORD *)(v65[0] + 8);
      v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, v53, v54);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v64);
      v56 = v65[0];
      v65[0] = 0;
      if (v56)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v65, v56);
    }
  }
  v20 = *v8;
  if (v9 >= (v8[1] - *v8) >> 2)
LABEL_46:
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v21 = *(int *)(v20 + 4 * a5);
  v22 = *(_DWORD *)(v20 + 4 * v9);
  if (v22 != (_DWORD)v21)
  {
    v60 = 0;
    v23 = 0;
    v29 = v15 + 24 * a6;
    v30 = v22 - v21;
    v28 = 0.0;
    v59 = 0.0;
    v26 = 0;
    v25 = 0.0;
    v24 = 0;
    v27 = 0.0;
    while (1)
    {
      if (*a4 <= v21)
        std::terminate();
      v31 = a4[1];
      v32 = *(int8x16_t *)(v31 + 16 * v21);
      v33 = *(double *)(v31 + 16 * v21 + 8);
      v34 = *(double *)(v29 + 8) - v33;
      v35 = *(float *)(a1 + 32);
      if (v34 < v35 || v33 < v35)
        goto LABEL_19;
      v17.i64[0] = *(_QWORD *)v29;
      v37 = *(double *)v29 - *(double *)v32.i64;
      *(double *)v65 = v37;
      *(double *)&v65[1] = v34;
      v63 = v32.i64[0];
      v64 = v32;
      xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcSplitGain(a7, (float *)a1, a6, a5, (double *)v65, (double *)v64.i64, v17, v32);
      *(float *)v17.i32 = *(double *)v17.i64 - *(float *)(v29 + 16);
      if (fabsf(*(float *)v17.i32) == INFINITY)
        goto LABEL_19;
      if ((v23 & 0x7FFFFFFF) > a5)
        break;
      if (v28 < *(float *)v17.i32)
        goto LABEL_18;
LABEL_19:
      ++v21;
      if (!--v30)
        goto LABEL_20;
    }
    if (v28 > *(float *)v17.i32)
      goto LABEL_19;
LABEL_18:
    v60 = 1;
    v59 = v33;
    v26 = v63;
    v25 = v34;
    v27 = v37;
    v24 = *(_DWORD *)(*v61 + 4 * v21);
    v28 = *(float *)v17.i32;
    v23 = a5;
    goto LABEL_19;
  }
  v60 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0.0;
  v26 = 0;
  v59 = 0.0;
  v27 = 0.0;
  v28 = 0.0;
LABEL_20:
  if (fabsf(v28) != INFINITY)
  {
    v38 = *(float *)a8;
    if ((*(_DWORD *)(a8 + 4) & 0x7FFFFFFFu) > (v23 & 0x7FFFFFFF))
    {
      if (v38 > v28)
        return 0.0;
      goto LABEL_43;
    }
    if (v38 < v28)
    {
LABEL_43:
      *(float *)a8 = v28;
      *(_DWORD *)(a8 + 4) = v23;
      *(_DWORD *)(a8 + 8) = v24;
      *(_BYTE *)(a8 + 40) = v60;
      std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a8 + 16), 0, 0, 0);
      *(double *)(a8 + 48) = v27;
      *(double *)(a8 + 56) = v25;
      *(_QWORD *)(a8 + 64) = v26;
      *(double *)(a8 + 72) = v59;
    }
  }
  return 0.0;
}

void sub_220EF193C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  _Unwind_Resume(exception_object);
}

double xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EnumerateSplit<-1,(xgboost::tree::SplitType)1>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, unsigned int a5, int a6, _QWORD *a7, uint64_t a8)
{
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v15;
  unint64_t v16;
  int8x16_t v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  int v23;
  double v24;
  double v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  unint64_t v31;
  int8x16_t v32;
  double v33;
  double v34;
  double v35;
  double v37;
  float v39;
  std::string *Entry;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  std::string *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  double v60;
  char v61;
  _QWORD *v62;
  __int128 v64;
  double v65[2];
  double v66[3];
  unint64_t v67[3];

  v8 = *(uint64_t **)(a2 + 16);
  v9 = a5 + 1;
  v10 = *v8;
  if (v9 >= (v8[1] - *v8) >> 2)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v62 = *(_QWORD **)(a2 + 8);
  v15 = *(_QWORD *)(a1 + 296);
  v16 = *(unsigned int *)(v10 + 4 * a5);
  xgboost::common::Span<xgboost::detail::GradientPairInternal<double>,18446744073709551615ul>::subspan(a4, v16, *(_DWORD *)(v10 + 4 * v9) - (int)v16, v67);
  v18 = (_DWORD *)(*v8 + 4 * a5);
  LODWORD(v65[0]) = 0x7FFFFFFF;
  if ((*v18 & 0x80000000) != 0)
  {
    dmlc::LogCheckFormat<unsigned int,unsigned int>((uint64_t *)v66);
    if (*(_QWORD *)&v66[0])
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v65);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/hist/evaluate_splits.h");
      v41 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v65);
      v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"Check failed: ", 14);
      v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"cut_ptr[fidx] <= static_cast<uint32_t>(std::numeric_limits<int32_t>::max())", 75);
      v44 = *(char *)(*(_QWORD *)&v66[0] + 23);
      v45 = v44 >= 0 ? *(_QWORD *)&v66[0] : **(_QWORD **)&v66[0];
      v46 = v44 >= 0 ? *(unsigned __int8 *)(*(_QWORD *)&v66[0] + 23) : *(_QWORD *)(*(_QWORD *)&v66[0] + 8);
      v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, v45, v46);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v65);
      v48 = *(_QWORD *)&v66[0];
      v66[0] = 0.0;
      if (v48)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v66, v48);
    }
  }
  v19 = (_DWORD *)(*v8 + 4 * v9);
  LODWORD(v65[0]) = 0x7FFFFFFF;
  if ((*v19 & 0x80000000) != 0)
  {
    dmlc::LogCheckFormat<unsigned int,unsigned int>((uint64_t *)v66);
    if (*(_QWORD *)&v66[0])
    {
      v49 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v65);
      dmlc::LogMessageFatal::Entry::Init(v49, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/hist/evaluate_splits.h");
      v50 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v65);
      v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"Check failed: ", 14);
      v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"cut_ptr[fidx + 1] <= static_cast<uint32_t>(std::numeric_limits<int32_t>::max())", 79);
      v53 = *(char *)(*(_QWORD *)&v66[0] + 23);
      v54 = v53 >= 0 ? *(_QWORD *)&v66[0] : **(_QWORD **)&v66[0];
      v55 = v53 >= 0 ? *(unsigned __int8 *)(*(_QWORD *)&v66[0] + 23) : *(_QWORD *)(*(_QWORD *)&v66[0] + 8);
      v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, v54, v55);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v65);
      v57 = *(_QWORD *)&v66[0];
      v66[0] = 0.0;
      if (v57)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v66, v57);
    }
  }
  v20 = *(int *)(*v8 + 4 * v9);
  v21 = *(_DWORD *)(*v8 + 4 * a5);
  if (v21 != (_DWORD)v20)
  {
    v61 = 0;
    v22 = 0;
    v28 = v15 + 24 * a6;
    v29 = v20 - 1;
    v30 = v21 - v20;
    v27 = 0.0;
    v60 = 0.0;
    v25 = 0.0;
    v24 = 0.0;
    v23 = 0;
    v26 = 0;
    while (1)
    {
      if (*a4 <= v29)
        std::terminate();
      v31 = a4[1];
      v32 = *(int8x16_t *)(v31 + 16 * v29);
      v33 = *(double *)(v31 + 16 * v29 + 8);
      v34 = *(double *)(v28 + 8) - v33;
      v35 = *(float *)(a1 + 32);
      if (v34 < v35 || v33 < v35)
        goto LABEL_18;
      v17.i64[0] = *(_QWORD *)v28;
      v37 = *(double *)v28 - *(double *)v32.i64;
      v64 = *(_OWORD *)(v31 + 16 * v29);
      *(_OWORD *)v66 = v64;
      v65[0] = v37;
      v65[1] = v34;
      xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcSplitGain(a7, (float *)a1, a6, a5, v66, v65, v17, v32);
      *(float *)v17.i32 = *(double *)v17.i64 - *(float *)(v28 + 16);
      if (fabsf(*(float *)v17.i32) == INFINITY)
        goto LABEL_18;
      if ((v22 & 0x7FFFFFFF) > a5)
        break;
      if (v27 < *(float *)v17.i32)
        goto LABEL_17;
LABEL_18:
      --v29;
      if (__CFADD__(v30++, 1))
        goto LABEL_20;
    }
    if (v27 > *(float *)v17.i32)
      goto LABEL_18;
LABEL_17:
    v61 = 1;
    v60 = v34;
    v25 = v37;
    v24 = v33;
    v26 = v64;
    v23 = *(_DWORD *)(*v62 + 4 * v29);
    v27 = *(float *)v17.i32;
    v22 = a5 | 0x80000000;
    goto LABEL_18;
  }
  v61 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0.0;
  v25 = 0.0;
  v60 = 0.0;
  v26 = 0;
  v27 = 0.0;
LABEL_20:
  if (fabsf(v27) != INFINITY)
  {
    v39 = *(float *)a8;
    if ((*(_DWORD *)(a8 + 4) & 0x7FFFFFFFu) > (v22 & 0x7FFFFFFF))
    {
      if (v39 > v27)
        return 0.0;
      goto LABEL_43;
    }
    if (v39 < v27)
    {
LABEL_43:
      *(float *)a8 = v27;
      *(_DWORD *)(a8 + 4) = v22;
      *(_DWORD *)(a8 + 8) = v23;
      *(_BYTE *)(a8 + 40) = v61;
      std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a8 + 16), 0, 0, 0);
      *(_QWORD *)(a8 + 48) = v26;
      *(double *)(a8 + 56) = v24;
      *(double *)(a8 + 64) = v25;
      *(double *)(a8 + 72) = v60;
    }
  }
  return 0.0;
}

void sub_220EF1DC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19)
{
  _Unwind_Resume(exception_object);
}

_QWORD *xgboost::common::Span<xgboost::detail::GradientPairInternal<double>,18446744073709551615ul>::subspan@<X0>(_QWORD *result@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  uint64_t v4;

  if (a3 == -1)
  {
    a3 = *result - a2;
    if (*result < a2)
      goto LABEL_8;
  }
  else if (a3 + a2 > *result)
  {
    goto LABEL_8;
  }
  v4 = result[1];
  *a4 = a3;
  a4[1] = v4 + 16 * a2;
  if (a3 && !v4)
LABEL_8:
    std::terminate();
  return result;
}

__n128 xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EnumerateSplit<1,(xgboost::tree::SplitType)2>(uint64_t a1, uint64_t a2, unint64_t *a3, _QWORD *a4, unsigned int a5, int a6, _QWORD *a7, uint64_t a8)
{
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64x2_t v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  float v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int64x2_t v31;
  unint64_t v32;
  int64x2_t v33;
  int8x16_t v34;
  int64x2_t v35;
  double v36;
  float v37;
  int v38;
  int64x2_t v39;
  int v40;
  std::string *Entry;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  std::string *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  float v59;
  int64x2_t v60;
  int v62;
  uint64_t v63;
  int v64;
  int v65;
  _QWORD *v66;
  int64x2_t v69;
  int64x2_t v70;
  int64x2_t v71;
  std::vector<unsigned int>::value_type __x[4];
  _QWORD v73[3];
  int64x2_t v74;
  int v75;
  unint64_t v76;
  int v77;
  std::vector<unsigned int> __p;
  char v79;
  int64x2_t v80;
  int64x2_t v81;
  unint64_t v82[3];

  v8 = *(uint64_t **)(a2 + 16);
  v9 = a5 + 1;
  v10 = *v8;
  if (v9 >= (v8[1] - *v8) >> 2)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v66 = *(_QWORD **)(a2 + 8);
  v15 = *(_QWORD *)(a1 + 296);
  v16 = *(unsigned int *)(v10 + 4 * a5);
  v17 = *(_DWORD *)(v10 + 4 * v9) - (int)v16;
  xgboost::common::Span<xgboost::detail::GradientPairInternal<double>,18446744073709551615ul>::subspan(a4, v16, v17, v82);
  v76 = 0;
  v77 = 0;
  memset(&__p, 0, sizeof(__p));
  v79 = 0;
  v18.i64[1] = 0;
  v80 = 0u;
  v81 = 0u;
  v19 = (_DWORD *)(*v8 + 4 * a5);
  v74.i32[0] = 0x7FFFFFFF;
  if ((*v19 & 0x80000000) != 0)
  {
    dmlc::LogCheckFormat<unsigned int,unsigned int>((uint64_t *)__x);
    if (*(_QWORD *)__x)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v74);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/hist/evaluate_splits.h");
      v42 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v74);
      v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"Check failed: ", 14);
      v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"cut_ptr[fidx] <= static_cast<uint32_t>(std::numeric_limits<int32_t>::max())", 75);
      v45 = *(char *)(*(_QWORD *)__x + 23);
      v46 = v45 >= 0 ? *(_QWORD *)__x : **(_QWORD **)__x;
      v47 = v45 >= 0 ? *(unsigned __int8 *)(*(_QWORD *)__x + 23) : *(_QWORD *)(*(_QWORD *)__x + 8);
      v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, v46, v47);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v74);
      v49 = *(_QWORD *)__x;
      *(_QWORD *)__x = 0;
      if (v49)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)__x, v49);
    }
  }
  v20 = (_DWORD *)(*v8 + 4 * v9);
  v74.i32[0] = 0x7FFFFFFF;
  if ((*v20 & 0x80000000) != 0)
  {
    dmlc::LogCheckFormat<unsigned int,unsigned int>((uint64_t *)__x);
    if (*(_QWORD *)__x)
    {
      v50 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v74);
      dmlc::LogMessageFatal::Entry::Init(v50, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/hist/evaluate_splits.h");
      v51 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v74);
      v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"Check failed: ", 14);
      v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"cut_ptr[fidx + 1] <= static_cast<uint32_t>(std::numeric_limits<int32_t>::max())", 79);
      v54 = *(char *)(*(_QWORD *)__x + 23);
      v55 = v54 >= 0 ? *(_QWORD *)__x : **(_QWORD **)__x;
      v56 = v54 >= 0 ? *(unsigned __int8 *)(*(_QWORD *)__x + 23) : *(_QWORD *)(*(_QWORD *)__x + 8);
      v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, v55, v56);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v74);
      v58 = *(_QWORD *)__x;
      *(_QWORD *)__x = 0;
      if (v58)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)__x, v58);
    }
  }
  v21 = *v8;
  v22 = v8[1];
  v23 = *(int *)(*v8 + 4 * a5);
  v75 = *(_DWORD *)(*v8 + 4 * a5);
  if (v9 >= (v22 - v21) >> 2)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v24 = *(_DWORD *)(v21 + 4 * v9);
  if (v24 == (_DWORD)v23)
  {
    v25 = 0;
    v26 = 0.0;
    v18.i64[0] = 0;
    v70 = v18;
    goto LABEL_40;
  }
  v63 = a8;
  v27 = 0;
  v25 = 0;
  v28 = v15 + 24 * a6;
  v62 = v23;
  v29 = v24 - v23;
  v64 = v23;
  v30 = 4 * v23;
  v31 = 0uLL;
  v65 = -1;
  v26 = 0.0;
  do
  {
    if (*a3 <= v27)
      goto LABEL_51;
    v32 = *(_QWORD *)(a3[1] + 8 * v27);
    if (v82[0] <= v32)
      goto LABEL_51;
    v31 = (int64x2_t)vaddq_f64((float64x2_t)v31, *(float64x2_t *)(v82[1] + 16 * v32));
    v33 = (int64x2_t)vsubq_f64(*(float64x2_t *)v28, (float64x2_t)v31);
    v34 = (int8x16_t)vzip2q_s64(v33, v31);
    v35 = (int64x2_t)vmvnq_s8((int8x16_t)vcgeq_f64((float64x2_t)v34, (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(float *)(a1 + 32)), 0)));
    *(int32x2_t *)v35.i8 = vmovn_s64(v35);
    *(int32x2_t *)v34.i8 = vdup_lane_s32(*(int32x2_t *)v35.i8, 1);
    *(int8x8_t *)v35.i8 = vorr_s8(*(int8x8_t *)v35.i8, *(int8x8_t *)v34.i8);
    if ((v35.i8[0] & 1) == 0)
    {
      v69 = v33;
      v71 = v31;
      *(int64x2_t *)__x = v33;
      v74 = v31;
      xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcSplitGain(a7, (float *)a1, a6, a5, (double *)__x, (double *)v74.i64, (int8x16_t)v35, v34);
      v37 = v36 - *(float *)(v28 + 16);
      if (fabsf(v37) == INFINITY)
      {
        v31 = v71;
        goto LABEL_18;
      }
      v38 = *(_DWORD *)(*v66 + v30 + 4 * v27);
      v31 = v71;
      if ((v25 & 0x7FFFFFFF) <= a5)
      {
        v39 = v69;
        if (v26 >= v37)
          goto LABEL_18;
LABEL_17:
        v76 = __PAIR64__(a5, LODWORD(v37));
        v77 = v38;
        v79 = 1;
        v65 = v64 + v27;
        v26 = v37;
        v25 = a5;
        v80 = v39;
        v81 = v71;
        goto LABEL_18;
      }
      v39 = v69;
      if (v26 <= v37)
        goto LABEL_17;
    }
LABEL_18:
    ++v27;
  }
  while (v29 != (_DWORD)v27);
  v70 = v31;
  a8 = v63;
  if (v65 != -1)
  {
    __x[0] = 0;
    std::vector<unsigned int>::resize(&__p, vcvtpd_u64_f64((double)v17 * 0.03125), __x);
    v74.i64[0] = __p.__end_ - __p.__begin_;
    v74.i64[1] = (uint64_t)__p.__begin_;
    v40 = v65 - v62 + 1;
    if (*a3 < v40)
LABEL_51:
      std::terminate();
    v73[0] = &v74;
    v73[1] = v66;
    v73[2] = &v75;
    std::for_each[abi:ne180100]<xgboost::common::detail::SpanIterator<xgboost::common::Span<unsigned long const,18446744073709551615ul>,false>,xgboost::tree::GradStats xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EnumerateSplit<1,(xgboost::tree::SplitType)2>(xgboost::common::HistogramCuts const&,xgboost::common::Span<unsigned long const,18446744073709551615ul>,xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul> const&,unsigned int,int,xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam> const&,xgboost::tree::SplitEntryContainer<xgboost::tree::GradStats> *)::{lambda(unsigned long)#1}>(a3, 0, a3, v40, (uint64_t)v73, (uint64_t)__x);
    v26 = *(float *)&v76;
    v25 = HIDWORD(v76);
  }
LABEL_40:
  if (fabsf(v26) != INFINITY)
  {
    v59 = *(float *)a8;
    if ((*(_DWORD *)(a8 + 4) & 0x7FFFFFFFu) <= (v25 & 0x7FFFFFFF))
    {
      if (v59 >= v26)
        goto LABEL_48;
    }
    else if (v59 > v26)
    {
      goto LABEL_48;
    }
    *(float *)a8 = v26;
    *(_DWORD *)(a8 + 4) = v25;
    *(_DWORD *)(a8 + 8) = v77;
    *(_BYTE *)(a8 + 40) = v79;
    if (&v76 != (unint64_t *)a8)
      std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a8 + 16), (char *)__p.__begin_, (uint64_t)__p.__end_, __p.__end_ - __p.__begin_);
    v60 = v81;
    *(int64x2_t *)(a8 + 48) = v80;
    *(int64x2_t *)(a8 + 64) = v60;
  }
LABEL_48:
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  return (__n128)v70;
}

void sub_220EF23BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float64_t xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EnumerateSplit<-1,(xgboost::tree::SplitType)2>(uint64_t a1, uint64_t a2, unint64_t *a3, _QWORD *a4, unsigned int a5, int a6, _QWORD *a7, uint64_t a8)
{
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int8x16_t v18;
  _DWORD *v19;
  _DWORD *v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  float v24;
  float64x2_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  double v32;
  int8x16_t v33;
  double v35;
  double v36;
  float v37;
  unint64_t v38;
  float v39;
  std::string *Entry;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  std::string *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  __int128 v58;
  int v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t v63;
  int v64;
  _QWORD *v65;
  float64x2_t v68;
  float64_t v69;
  float64_t v70;
  float64_t v71;
  std::vector<unsigned int>::value_type __x[4];
  _QWORD v73[4];
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  _QWORD v78[4];
  int64_t v79;
  std::vector<unsigned int>::pointer begin;
  uint64_t v81;
  __int32 v82;
  std::vector<unsigned int> v83;
  char v84;
  float64x2_t v85;
  __int128 v86;
  unint64_t v87[2];
  unsigned int v88;

  v88 = a5;
  v8 = *(_QWORD **)(a2 + 16);
  v9 = a5 + 1;
  v10 = *v8;
  if (v9 >= (uint64_t)(v8[1] - *v8) >> 2)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v65 = *(_QWORD **)(a2 + 8);
  v15 = *(_QWORD *)(a1 + 296);
  v16 = *(unsigned int *)(v10 + 4 * a5);
  v17 = *(_DWORD *)(v10 + 4 * v9) - (int)v16;
  xgboost::common::Span<xgboost::detail::GradientPairInternal<double>,18446744073709551615ul>::subspan(a4, v16, v17, v87);
  v81 = 0;
  v82 = 0;
  memset(&v83, 0, sizeof(v83));
  v84 = 0;
  v85 = 0u;
  v86 = 0u;
  v19 = (_DWORD *)(*v8 + 4 * a5);
  LODWORD(v79) = 0x7FFFFFFF;
  if ((*v19 & 0x80000000) != 0)
  {
    dmlc::LogCheckFormat<unsigned int,unsigned int>((uint64_t *)__x);
    if (*(_QWORD *)__x)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v79);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/hist/evaluate_splits.h");
      v41 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v79);
      v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"Check failed: ", 14);
      v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"cut_ptr[fidx] <= static_cast<uint32_t>(std::numeric_limits<int32_t>::max())", 75);
      v44 = *(char *)(*(_QWORD *)__x + 23);
      v45 = v44 >= 0 ? *(_QWORD *)__x : **(_QWORD **)__x;
      v46 = v44 >= 0 ? *(unsigned __int8 *)(*(_QWORD *)__x + 23) : *(_QWORD *)(*(_QWORD *)__x + 8);
      v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, v45, v46);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v79);
      v48 = *(_QWORD *)__x;
      *(_QWORD *)__x = 0;
      if (v48)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)__x, v48);
    }
  }
  v20 = (_DWORD *)(*v8 + 4 * v9);
  LODWORD(v79) = 0x7FFFFFFF;
  if ((*v20 & 0x80000000) != 0)
  {
    dmlc::LogCheckFormat<unsigned int,unsigned int>((uint64_t *)__x);
    if (*(_QWORD *)__x)
    {
      v49 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v79);
      dmlc::LogMessageFatal::Entry::Init(v49, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/hist/evaluate_splits.h");
      v50 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v79);
      v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"Check failed: ", 14);
      v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"cut_ptr[fidx + 1] <= static_cast<uint32_t>(std::numeric_limits<int32_t>::max())", 79);
      v53 = *(char *)(*(_QWORD *)__x + 23);
      v54 = v53 >= 0 ? *(_QWORD *)__x : **(_QWORD **)__x;
      v55 = v53 >= 0 ? *(unsigned __int8 *)(*(_QWORD *)__x + 23) : *(_QWORD *)(*(_QWORD *)__x + 8);
      v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, v54, v55);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v79);
      v57 = *(_QWORD *)__x;
      *(_QWORD *)__x = 0;
      if (v57)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)__x, v57);
    }
  }
  v21 = *(_DWORD *)(*v8 + 4 * v9);
  v22 = *(int *)(*v8 + 4 * a5);
  if (v21 == (_DWORD)v22)
  {
    v23 = 0;
    v24 = 0.0;
    v25.f64[0] = 0.0;
    goto LABEL_24;
  }
  v62 = v17;
  v63 = a8;
  v26 = 0;
  v23 = 0;
  v27 = v15 + 24 * a6;
  v61 = v8;
  v28 = v21 - 1 - v22 + 1;
  v29 = 4 * (v21 - 1);
  v25 = 0uLL;
  v64 = -1;
  v24 = 0.0;
  v60 = v21 - 1;
  v30 = v21 - 1;
  do
  {
    if (*a3 <= v26)
      goto LABEL_53;
    v31 = *(_QWORD *)(a3[1] + 8 * v26);
    if (v87[0] <= v31)
      goto LABEL_53;
    v33 = *(int8x16_t *)(v87[1] + 16 * v31);
    v25 = vaddq_f64(v25, (float64x2_t)v33);
    v32 = *(double *)(v27 + 8) - v25.f64[1];
    *(double *)v33.i64 = *(float *)(a1 + 32);
    if (v32 >= *(double *)v33.i64 && v25.f64[1] >= *(double *)v33.i64)
    {
      v33.i64[0] = *(_QWORD *)v27;
      v35 = *(double *)v27 - v25.f64[0];
      v68 = v25;
      *(float64x2_t *)__x = v25;
      v79 = *(_QWORD *)&v35;
      begin = *(std::vector<unsigned int>::pointer *)&v32;
      xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcSplitGain(a7, (float *)a1, a6, a5, (double *)__x, (double *)&v79, v33, v18);
      *(double *)v18.i64 = *(float *)(v27 + 16);
      v37 = v36 - *(double *)v18.i64;
      *(float *)v18.i32 = fabsf(v37);
      if (*(float *)v18.i32 == INFINITY)
      {
        v25 = v68;
        goto LABEL_20;
      }
      v18.i32[0] = *(_DWORD *)(*v65 + v29);
      v25 = v68;
      if ((v23 & 0x7FFFFFFF) <= a5)
      {
        if (v24 >= v37)
          goto LABEL_20;
LABEL_19:
        *(float *)&v81 = v37;
        v23 = a5 | 0x80000000;
        HIDWORD(v81) = a5 | 0x80000000;
        v82 = v18.i32[0];
        v84 = 1;
        v85 = v68;
        v24 = v37;
        v64 = v30;
        *(double *)&v86 = v35;
        *((double *)&v86 + 1) = v32;
        goto LABEL_20;
      }
      if (v24 <= v37)
        goto LABEL_19;
    }
LABEL_20:
    ++v26;
    --v30;
    v29 -= 4;
  }
  while (v28 != v26);
  a8 = v63;
  if (v64 != -1)
  {
    v69 = v25.f64[0];
    __x[0] = 0;
    std::vector<unsigned int>::resize(&v83, vcvtpd_u64_f64((double)v62 * 0.03125), __x);
    v79 = v83.__end_ - v83.__begin_;
    begin = v83.__begin_;
    v38 = *a3;
    v78[0] = a3;
    v78[1] = v38;
    v78[2] = a3;
    v78[3] = v38;
    if (v38 < v60 - v64)
LABEL_53:
      std::terminate();
    v74 = a3;
    v75 = v38 - (v60 - v64);
    v76 = a3;
    v77 = v75;
    v73[0] = &v79;
    v73[1] = v65;
    v73[2] = v61;
    v73[3] = &v88;
    std::for_each[abi:ne180100]<std::reverse_iterator<xgboost::common::detail::SpanIterator<xgboost::common::Span<unsigned long const,18446744073709551615ul>,false>>,xgboost::tree::GradStats xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EnumerateSplit<-1,(xgboost::tree::SplitType)2>(xgboost::common::HistogramCuts const&,xgboost::common::Span<unsigned long const,18446744073709551615ul>,xgboost::common::Span<xgboost::detail::GradientPairInternal<float>,18446744073709551615ul> const&,unsigned int,int,xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam> const&,xgboost::tree::SplitEntryContainer<xgboost::tree::GradStats> *)::{lambda(unsigned long)#2}>((uint64_t)v78, (uint64_t)&v74, (uint64_t)v73, __x);
    v24 = *(float *)&v81;
    v23 = HIDWORD(v81);
    v25.f64[0] = v69;
  }
LABEL_24:
  if (fabsf(v24) != INFINITY)
  {
    v39 = *(float *)a8;
    if ((*(_DWORD *)(a8 + 4) & 0x7FFFFFFFu) <= (v23 & 0x7FFFFFFF))
    {
      if (v39 >= v24)
        goto LABEL_50;
    }
    else if (v39 > v24)
    {
      goto LABEL_50;
    }
    *(float *)a8 = v24;
    *(_DWORD *)(a8 + 4) = v23;
    *(_DWORD *)(a8 + 8) = v82;
    *(_BYTE *)(a8 + 40) = v84;
    if (&v81 != (uint64_t *)a8)
    {
      v70 = v25.f64[0];
      std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a8 + 16), (char *)v83.__begin_, (uint64_t)v83.__end_, v83.__end_ - v83.__begin_);
      v25.f64[0] = v70;
    }
    v58 = v86;
    *(float64x2_t *)(a8 + 48) = v85;
    *(_OWORD *)(a8 + 64) = v58;
  }
LABEL_50:
  if (v83.__begin_)
  {
    v83.__end_ = v83.__begin_;
    v71 = v25.f64[0];
    operator delete(v83.__begin_);
    v25.f64[0] = v71;
  }
  return v25.f64[0];
}

void sub_220EF2988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  uint64_t v38;
  void *v40;

  v40 = *(void **)(v38 - 216);
  if (v40)
  {
    *(_QWORD *)(v38 - 208) = v40;
    operator delete(v40);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EnumerateSplit<1,(xgboost::tree::SplitType)0>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, unsigned int a5, int a6, _QWORD *a7, uint64_t a8)
{
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  float v27;
  int8x16_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  double v32;
  int8x16_t v33;
  double v35;
  double v36;
  float v37;
  float v38;
  std::string *Entry;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  std::string *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  double v58;
  _QWORD *v59;
  int8x16_t v61;
  double v62[2];
  int8x16_t v63;
  unint64_t v64[3];

  v8 = *(uint64_t **)(a2 + 16);
  v9 = a5 + 1;
  v10 = *v8;
  if (v9 >= (v8[1] - *v8) >> 2)
    goto LABEL_47;
  v59 = *(_QWORD **)(a2 + 8);
  v15 = *(_QWORD *)(a1 + 296);
  v16 = *(unsigned int *)(v10 + 4 * a5);
  xgboost::common::Span<xgboost::detail::GradientPairInternal<double>,18446744073709551615ul>::subspan(a4, v16, *(_DWORD *)(v10 + 4 * v9) - (int)v16, v64);
  v17 = (_DWORD *)(*v8 + 4 * a5);
  LODWORD(v62[0]) = 0x7FFFFFFF;
  if ((*v17 & 0x80000000) != 0)
  {
    dmlc::LogCheckFormat<unsigned int,unsigned int>(v63.i64);
    if (v63.i64[0])
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v62);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/hist/evaluate_splits.h");
      v40 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v62);
      v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Check failed: ", 14);
      v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"cut_ptr[fidx] <= static_cast<uint32_t>(std::numeric_limits<int32_t>::max())", 75);
      v43 = *(char *)(v63.i64[0] + 23);
      v44 = v43 >= 0 ? v63.i64[0] : *(_QWORD *)v63.i64[0];
      v45 = v43 >= 0 ? *(unsigned __int8 *)(v63.i64[0] + 23) : *(_QWORD *)(v63.i64[0] + 8);
      v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, v44, v45);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v62);
      v47 = v63.i64[0];
      v63.i64[0] = 0;
      if (v47)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v63, v47);
    }
  }
  v18 = (_DWORD *)(*v8 + 4 * v9);
  LODWORD(v62[0]) = 0x7FFFFFFF;
  if ((*v18 & 0x80000000) != 0)
  {
    dmlc::LogCheckFormat<unsigned int,unsigned int>(v63.i64);
    if (v63.i64[0])
    {
      v48 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v62);
      dmlc::LogMessageFatal::Entry::Init(v48, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/hist/evaluate_splits.h");
      v49 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v62);
      v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"Check failed: ", 14);
      v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"cut_ptr[fidx + 1] <= static_cast<uint32_t>(std::numeric_limits<int32_t>::max())", 79);
      v52 = *(char *)(v63.i64[0] + 23);
      v53 = v52 >= 0 ? v63.i64[0] : *(_QWORD *)v63.i64[0];
      v54 = v52 >= 0 ? *(unsigned __int8 *)(v63.i64[0] + 23) : *(_QWORD *)(v63.i64[0] + 8);
      v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, v53, v54);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v62);
      v56 = v63.i64[0];
      v63.i64[0] = 0;
      if (v56)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v63, v56);
    }
  }
  v19 = *v8;
  if (v9 >= (v8[1] - *v8) >> 2)
LABEL_47:
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v20 = *(int *)(v19 + 4 * a5);
  v21 = *(_DWORD *)(v19 + 4 * v9);
  if (v21 != (_DWORD)v20)
  {
    v22 = 0;
    v28 = 0uLL;
    v29 = v15 + 24 * a6;
    v30 = v21 - v20;
    v27 = 0.0;
    v58 = 0.0;
    v25 = 0.0;
    v24 = 0;
    v23 = 0;
    v26 = 0;
    while (1)
    {
      if (*a4 <= v20)
        std::terminate();
      v33 = *(int8x16_t *)(a4[1] + 16 * v20);
      v28 = (int8x16_t)vaddq_f64((float64x2_t)v28, (float64x2_t)v33);
      v31 = v28.i64[1];
      v32 = *(double *)(v29 + 8) - *(double *)&v28.i64[1];
      *(double *)v33.i64 = *(float *)(a1 + 32);
      if (*(double *)&v28.i64[1] < *(double *)v33.i64 || v32 < *(double *)v33.i64)
        goto LABEL_20;
      v33.i64[0] = *(_QWORD *)v29;
      v35 = *(double *)v29 - *(double *)v28.i64;
      v61 = v28;
      v63 = v28;
      v62[0] = v35;
      v62[1] = v32;
      xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcSplitGain(a7, (float *)a1, a6, a5, (double *)v63.i64, v62, v28, v33);
      v37 = v36 - *(float *)(v29 + 16);
      if (fabsf(v37) == INFINITY)
      {
        v28 = v61;
      }
      else
      {
        if ((v22 & 0x7FFFFFFF) > a5)
        {
          v28 = v61;
          if (v27 > v37)
            goto LABEL_20;
LABEL_19:
          v58 = v32;
          v25 = v35;
          v24 = v31;
          v26 = v28.i64[0];
          v23 = *(_DWORD *)(*v59 + 4 * v20);
          v27 = v37;
          v22 = a5;
          goto LABEL_20;
        }
        v28 = v61;
        if (v27 < v37)
          goto LABEL_19;
      }
LABEL_20:
      ++v20;
      if (!--v30)
        goto LABEL_21;
    }
  }
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0.0;
  v58 = 0.0;
  v26 = 0;
  v27 = 0.0;
LABEL_21:
  if (fabsf(v27) != INFINITY)
  {
    v38 = *(float *)a8;
    if ((*(_DWORD *)(a8 + 4) & 0x7FFFFFFFu) <= (v22 & 0x7FFFFFFF))
    {
      if (v38 >= v27)
        return;
    }
    else if (v38 > v27)
    {
      return;
    }
    *(float *)a8 = v27;
    *(_DWORD *)(a8 + 4) = v22;
    *(_DWORD *)(a8 + 8) = v23;
    *(_BYTE *)(a8 + 40) = 0;
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a8 + 16), 0, 0, 0);
    *(_QWORD *)(a8 + 48) = v26;
    *(_QWORD *)(a8 + 56) = v24;
    *(double *)(a8 + 64) = v25;
    *(double *)(a8 + 72) = v58;
  }
}

void sub_220EF2E3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17)
{
  _Unwind_Resume(exception_object);
}

double xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EnumerateSplit<-1,(xgboost::tree::SplitType)0>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, unsigned int a5, int a6, _QWORD *a7, uint64_t a8)
{
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v16;
  unint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  int64x2_t v28;
  uint64_t v29;
  uint64_t v30;
  float64x2_t *v31;
  float *v32;
  unint64_t v33;
  int64x2_t v34;
  int8x16_t v35;
  int64x2_t v36;
  int v37;
  double v38;
  float v39;
  unint64_t v40;
  _QWORD *v41;
  int v42;
  int64x2_t v43;
  float v44;
  std::string *Entry;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  std::string *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v64;
  unsigned int v65;
  _QWORD *v66;
  int64x2_t v69;
  int64x2_t v70;
  uint64_t v71;
  int64x2_t v72;
  int64x2_t v73;
  unint64_t v74[3];

  v8 = *(uint64_t **)(a2 + 16);
  v9 = a5 + 1;
  v10 = *v8;
  if (v9 >= (v8[1] - *v8) >> 2)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v66 = *(_QWORD **)(a2 + 8);
  v16 = *(_QWORD *)(a1 + 296);
  v17 = *(unsigned int *)(v10 + 4 * a5);
  xgboost::common::Span<xgboost::detail::GradientPairInternal<double>,18446744073709551615ul>::subspan(a4, v17, *(_DWORD *)(v10 + 4 * v9) - (int)v17, v74);
  v18 = (_DWORD *)(*v8 + 4 * a5);
  v72.i32[0] = 0x7FFFFFFF;
  if ((*v18 & 0x80000000) != 0)
  {
    dmlc::LogCheckFormat<unsigned int,unsigned int>(v73.i64);
    if (v73.i64[0])
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v72);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/hist/evaluate_splits.h");
      v46 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v72);
      v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"Check failed: ", 14);
      v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"cut_ptr[fidx] <= static_cast<uint32_t>(std::numeric_limits<int32_t>::max())", 75);
      v49 = *(char *)(v73.i64[0] + 23);
      v50 = v49 >= 0 ? v73.i64[0] : *(_QWORD *)v73.i64[0];
      v51 = v49 >= 0 ? *(unsigned __int8 *)(v73.i64[0] + 23) : *(_QWORD *)(v73.i64[0] + 8);
      v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, v50, v51);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v72);
      v53 = v73.i64[0];
      v73.i64[0] = 0;
      if (v53)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v73, v53);
    }
  }
  v19 = (_DWORD *)(*v8 + 4 * v9);
  v72.i32[0] = 0x7FFFFFFF;
  if ((*v19 & 0x80000000) != 0)
  {
    dmlc::LogCheckFormat<unsigned int,unsigned int>(v73.i64);
    if (v73.i64[0])
    {
      v54 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v72);
      dmlc::LogMessageFatal::Entry::Init(v54, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/hist/evaluate_splits.h");
      v55 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v72);
      v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"Check failed: ", 14);
      v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"cut_ptr[fidx + 1] <= static_cast<uint32_t>(std::numeric_limits<int32_t>::max())", 79);
      v58 = *(char *)(v73.i64[0] + 23);
      v59 = v58 >= 0 ? v73.i64[0] : *(_QWORD *)v73.i64[0];
      v60 = v58 >= 0 ? *(unsigned __int8 *)(v73.i64[0] + 23) : *(_QWORD *)(v73.i64[0] + 8);
      v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, v59, v60);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v72);
      v62 = v73.i64[0];
      v73.i64[0] = 0;
      if (v62)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v73, v62);
    }
  }
  v20 = *(_DWORD *)(*v8 + 4 * a5);
  v21 = *(int *)(*v8 + 4 * v9);
  if ((_DWORD)v21 == v20)
  {
    v65 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0.0;
    v28.i64[0] = 0;
    goto LABEL_22;
  }
  v29 = a2;
  v64 = a8;
  v30 = v16;
  v31 = (float64x2_t *)(v16 + 24 * a6);
  v28 = 0uLL;
  v32 = (float *)(v30 + 24 * a6 + 16);
  v65 = 0;
  v33 = v21 - 1;
  v27 = 0.0;
  v25 = 0;
  v24 = 0;
  v23 = 0;
  v22 = 0;
  v26 = 0;
  do
  {
    if (*a4 <= v33)
      std::terminate();
    LODWORD(v21) = v21 - 1;
    v28 = (int64x2_t)vaddq_f64((float64x2_t)v28, *(float64x2_t *)(a4[1] + 16 * v33));
    v34 = (int64x2_t)vsubq_f64(*v31, (float64x2_t)v28);
    v35 = (int8x16_t)vzip2q_s64(v34, v28);
    v36 = (int64x2_t)vmvnq_s8((int8x16_t)vcgeq_f64((float64x2_t)v35, (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(float *)(a1 + 32)), 0)));
    *(int32x2_t *)v36.i8 = vmovn_s64(v36);
    if (((v36.i32[1] | v36.i32[0]) & 1) != 0)
    {
      v37 = v33;
      goto LABEL_20;
    }
    v69 = v34;
    v70 = v28;
    v72 = v28;
    v73 = v34;
    xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcSplitGain(a7, (float *)a1, a6, a5, (double *)v73.i64, (double *)v72.i64, (int8x16_t)v36, v35);
    v39 = v38 - *v32;
    v40 = v33 - 1;
    v41 = *(_QWORD **)(v29 + 24);
    if (v20 == (_DWORD)v33)
      v40 = a5;
    else
      v41 = v66;
    if (fabsf(v39) == INFINITY)
    {
      v37 = v21;
      v28 = v70;
      goto LABEL_20;
    }
    v42 = *(_DWORD *)(*v41 + 4 * v40);
    if ((v65 & 0x7FFFFFFF) <= a5)
    {
      v43 = v69;
      v28 = v70;
      if (v27 >= v39)
      {
LABEL_17:
        v37 = v21;
        goto LABEL_20;
      }
    }
    else
    {
      v43 = v69;
      v28 = v70;
      if (v27 > v39)
        goto LABEL_17;
    }
    v23 = v43.i64[1];
    v37 = v21;
    v25 = v28.i64[1];
    v24 = v28.i64[0];
    v26 = v43.i64[0];
    v22 = v42;
    v27 = v39;
    v65 = a5 | 0x80000000;
LABEL_20:
    --v33;
  }
  while (v37 != v20);
  a8 = v64;
LABEL_22:
  if (fabsf(v27) != INFINITY)
  {
    v44 = *(float *)a8;
    if ((*(_DWORD *)(a8 + 4) & 0x7FFFFFFFu) <= (v65 & 0x7FFFFFFF))
    {
      if (v44 < v27)
        goto LABEL_45;
    }
    else
    {
      if (v44 > v27)
        return *(double *)v28.i64;
LABEL_45:
      *(float *)a8 = v27;
      *(_DWORD *)(a8 + 4) = v65;
      *(_DWORD *)(a8 + 8) = v22;
      *(_BYTE *)(a8 + 40) = 0;
      v71 = v28.i64[0];
      std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a8 + 16), 0, 0, 0);
      v28.i64[0] = v71;
      *(_QWORD *)(a8 + 48) = v26;
      *(_QWORD *)(a8 + 56) = v23;
      *(_QWORD *)(a8 + 64) = v24;
      *(_QWORD *)(a8 + 72) = v25;
    }
  }
  return *(double *)v28.i64;
}

void sub_220EF3310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21)
{
  _Unwind_Resume(exception_object);
}

void std::__stable_sort<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(unint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t a4, uint64_t *a5, uint64_t a6, int8x16_t a7, int8x16_t a8)
{
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  float *v14;
  int8x16_t v15;
  int8x16_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;

  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      v11 = *(a2 - 1);
      v12 = (unint64_t *)a3[2];
      if (*v12 <= v11
        || (v13 = *a1,
            v14 = (float *)a3[1],
            *(double *)v15.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(a7, a8, *a3, v14, (double *)(v12[1] + 16 * v11)), v17 = (unint64_t *)a3[2], *v17 <= v13))
      {
        std::terminate();
      }
      if (*(double *)v15.i64 < xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(v15, v16, *a3, v14, (double *)(v17[1] + 16 * v13)))
      {
        v18 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v18;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v22 = a4 >> 1;
      v23 = (uint64_t *)&a1[a4 >> 1];
      v24 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(a1, v23, a3, v24, a5, a7, a8);
        std::__stable_sort_move<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[v22], v27, v28);
        std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *,unsigned long *,std::__wrap_iter<unsigned long *>>((unint64_t *)a5, (unint64_t *)&a5[v22], &a5[v22], &a5[a4], a1, a3, v29, v30);
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(a1, v23, a3, v24, a5, a6);
        *(double *)v25.i64 = std::__stable_sort<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
        std::__inplace_merge<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>((char *)a1, (char *)&a1[a4 >> 1], (char *)a2, a3, a4 >> 1, a4 - (a4 >> 1), (char *)a5, a6, v25, v26);
      }
    }
    else
    {
      std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(a1, (unint64_t *)a2, a3, a7, a8);
    }
  }
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(unint64_t *a1, unint64_t *a2, uint64_t *a3, int8x16_t a4, int8x16_t a5)
{
  unint64_t *v7;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  float *v15;
  int8x16_t v16;
  int8x16_t v17;
  unint64_t *v18;
  double v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  float *v24;
  int8x16_t v25;
  int8x16_t v26;
  unint64_t *v27;
  double v28;
  unint64_t *v29;

  if (a1 != a2)
  {
    v7 = a1 + 1;
    if (a1 + 1 != a2)
    {
      v9 = 0;
      v10 = a1;
      do
      {
        v11 = v7;
        v12 = *v7;
        v13 = (unint64_t *)a3[2];
        if (*v13 <= v12
          || (v14 = *v10,
              v15 = (float *)a3[1],
              *(double *)v16.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(a4, a5, *a3, v15, (double *)(v13[1] + 16 * v12)), v18 = (unint64_t *)a3[2], *v18 <= v14))
        {
LABEL_17:
          std::terminate();
        }
        v19 = *(double *)v16.i64;
        *(double *)a4.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(v16, v17, *a3, v15, (double *)(v18[1] + 16 * v14));
        if (v19 < *(double *)a4.i64)
        {
          v20 = *v11;
          v21 = v9;
          while (1)
          {
            *(unint64_t *)((char *)a1 + v21 + 8) = *(unint64_t *)((char *)a1 + v21);
            if (!v21)
              break;
            v22 = (unint64_t *)a3[2];
            if (*v22 <= v20)
              goto LABEL_17;
            v23 = *(unint64_t *)((char *)a1 + v21 - 8);
            v24 = (float *)a3[1];
            *(double *)v25.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(a4, a5, *a3, v24, (double *)(v22[1] + 16 * v20));
            v27 = (unint64_t *)a3[2];
            if (*v27 <= v23)
              goto LABEL_17;
            v28 = *(double *)v25.i64;
            *(double *)a4.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(v25, v26, *a3, v24, (double *)(v27[1] + 16 * v23));
            v21 -= 8;
            if (v28 >= *(double *)a4.i64)
            {
              v29 = (unint64_t *)((char *)a1 + v21 + 8);
              goto LABEL_14;
            }
          }
          v29 = a1;
LABEL_14:
          *v29 = v20;
        }
        v7 = v11 + 1;
        v9 += 8;
        v10 = v11;
      }
      while (v11 + 1 != a2);
    }
  }
}

void std::__stable_sort_move<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(unint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t a4, uint64_t *a5, int8x16_t a6, int8x16_t a7)
{
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  float *v15;
  int8x16_t v16;
  int8x16_t v17;
  unint64_t *v18;
  unint64_t v19;
  int8x16_t v20;
  int8x16_t v21;

  if (a4)
  {
    if (a4 == 2)
    {
      v12 = *(a2 - 1);
      v13 = (unint64_t *)a3[2];
      if (*v13 <= v12
        || (v14 = *a1,
            v15 = (float *)a3[1],
            *(double *)v16.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(a6, a7, *a3, v15, (double *)(v13[1] + 16 * v12)), v18 = (unint64_t *)a3[2], *v18 <= v14))
      {
        std::terminate();
      }
      if (*(double *)v16.i64 >= xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(v16, v17, *a3, v15, (double *)(v18[1] + 16 * v14)))
      {
        *a5 = *a1;
        v19 = *(a2 - 1);
      }
      else
      {
        *a5 = *(a2 - 1);
        v19 = *a1;
      }
      a5[1] = v19;
    }
    else if (a4 == 1)
    {
      *a5 = *a1;
    }
    else if ((uint64_t)a4 > 8)
    {
      std::__stable_sort<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(a1, &a1[a4 >> 1], a3, a4 >> 1, a5, a4 >> 1);
      *(double *)v20.i64 = std::__stable_sort<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[a4 >> 1], a4 - (a4 >> 1));
      std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(a1, &a1[a4 >> 1], (uint64_t *)&a1[a4 >> 1], a2, a5, a3, v20, v21);
    }
    else
    {
      std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>((uint64_t *)a1, a2, a5, a3, a6, a7);
    }
  }
}

void std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *,unsigned long *,std::__wrap_iter<unsigned long *>>(unint64_t *a1, unint64_t *a2, uint64_t *a3, uint64_t *a4, _QWORD *a5, uint64_t *a6, int8x16_t a7, int8x16_t a8)
{
  unint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  float *v16;
  int8x16_t v17;
  int8x16_t v18;
  unint64_t *v19;
  double v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;

  if (a1 == a2)
  {
LABEL_12:
    while (a3 != a4)
    {
      v22 = *a3++;
      *a5++ = v22;
    }
  }
  else
  {
    v13 = a1;
    while (a3 != a4)
    {
      v14 = (_QWORD *)a6[2];
      if (*v14 <= (unint64_t)*a3
        || (v15 = *v13,
            v16 = (float *)a6[1],
            *(double *)v17.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(a7, a8, *a6, v16, (double *)(v14[1] + 16 * *a3)), v19 = (unint64_t *)a6[2], *v19 <= v15))
      {
        std::terminate();
      }
      v20 = *(double *)v17.i64;
      *(double *)a7.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(v17, v18, *a6, v16, (double *)(v19[1] + 16 * v15));
      if (v20 < *(double *)a7.i64)
        v21 = a3;
      else
        v21 = v13;
      v13 += v20 >= *(double *)a7.i64;
      a3 += v20 < *(double *)a7.i64;
      *a5++ = *v21;
      if (v13 == a2)
        goto LABEL_12;
    }
    if (v13 != a2)
    {
      v23 = 0;
      do
      {
        a5[v23] = v13[v23];
        ++v23;
      }
      while (&v13[v23] != a2);
    }
  }
}

void std::__inplace_merge<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(char *a1, char *a2, char *a3, uint64_t *a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  uint64_t v11;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  float *v20;
  int8x16_t v21;
  int8x16_t v22;
  unint64_t *v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  int8x16_t v43;
  uint64_t v44;
  char v45;

  if (a6)
  {
    v11 = a6;
    do
    {
      if (a5 <= a8 || v11 <= a8)
      {
        std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(a1, a2, a3, a4, a5, v11, a7, a9, a10);
        return;
      }
      if (!a5)
        return;
      v16 = 0;
      v17 = 0;
      while (1)
      {
        v18 = (_QWORD *)a4[2];
        if (*v18 <= *(_QWORD *)a2
          || (v19 = *(_QWORD *)&a1[8 * v17],
              v20 = (float *)a4[1],
              *(double *)v21.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(a9, a10, *a4, v20, (double *)(v18[1] + 16 * *(_QWORD *)a2)), v23 = (unint64_t *)a4[2], *v23 <= v19))
        {
          std::terminate();
        }
        v24 = *(double *)v21.i64;
        *(double *)a9.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(v21, v22, *a4, v20, (double *)(v23[1] + 16 * v19));
        if (v24 < *(double *)a9.i64)
          break;
        ++v17;
        v16 -= 8;
        if (a5 == v17)
          return;
      }
      v39 = &a1[-v16];
      v40 = a8;
      if (a5 - v17 >= v11)
      {
        if (a5 - 1 == v17)
        {
          v36 = *(_QWORD *)&a1[8 * v17];
          *(_QWORD *)&a1[8 * v17] = *(_QWORD *)a2;
          *(_QWORD *)a2 = v36;
          return;
        }
        v30 = (a5 - v17) / 2;
        v43 = *(int8x16_t *)a4;
        v29 = (unint64_t *)&a1[8 * v30 - v16];
        v44 = a4[2];
        v45 = 0;
        v38 = (char *)std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>,unsigned long,std::__identity,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1}>(a2, a3, v29, v43.i64, v43, a10);
        v26 = (v38 - a2) >> 3;
      }
      else
      {
        if (v11 >= 0)
          v25 = v11;
        else
          v25 = v11 + 1;
        v26 = v25 >> 1;
        v38 = &a2[8 * (v25 >> 1)];
        v27 = (char *)std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>,unsigned long,std::__identity>(&a1[-v16], a2, v38, a4, a9, a10);
        v28 = v27 - a1 + v16;
        v29 = (unint64_t *)v27;
        v30 = v28 >> 3;
      }
      v37 = a5 - v30 - v17;
      v31 = v11 - v26;
      v32 = a2;
      a2 = v38;
      v33 = std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>((char *)v29, v32, v38);
      a1 = v33;
      if (v30 + v26 >= v11 + a5 - (v30 + v26) - v17)
      {
        v35 = v33;
        std::__inplace_merge<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(v33, v38, a3, a4, v37, v11 - v26, a7, v40);
        a1 = v39;
        a2 = (char *)v29;
        v31 = v26;
        a5 = v30;
        a8 = v40;
        a3 = v35;
      }
      else
      {
        v34 = v30;
        a8 = v40;
        std::__inplace_merge<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(v39, v29, v33, a4, v34, v26, a7, v40);
        a5 = v37;
      }
      v11 = v31;
    }
    while (v31);
  }
}

double xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(int8x16_t a1, int8x16_t a2, uint64_t a3, float *a4, double *a5)
{
  double v5;
  BOOL v6;
  double v7;
  float v8;
  double v9;
  double v10;
  BOOL v11;
  double v12;
  float v13;
  float64x2_t v14;

  v5 = a5[1];
  a2.i64[0] = 0;
  v6 = v5 <= 0.0 || v5 < a4[8];
  if (!v6)
  {
    v7 = *a5;
    v8 = a4[10];
    v9 = v8;
    v6 = *a5 < (float)-v8;
    v10 = *a5 + v8;
    if (!v6)
      v10 = 0.0;
    v11 = v7 <= v9;
    v12 = v7 - v9;
    if (v11)
      v12 = v10;
    *(double *)a2.i64 = -v12 / (v5 + a4[9]);
    v13 = a4[11];
    if (v13 != 0.0)
    {
      *(double *)a1.i64 = v13;
      if (fabs(*(double *)a2.i64) > *(double *)a1.i64)
      {
        v14.f64[0] = NAN;
        v14.f64[1] = NAN;
        a2.i64[0] = vbslq_s8((int8x16_t)vnegq_f64(v14), a1, a2).u64[0];
      }
    }
  }
  return (float)*(double *)a2.i64;
}

void std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, int8x16_t a5, int8x16_t a6)
{
  uint64_t *v8;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  float *v16;
  int8x16_t v17;
  int8x16_t v18;
  unint64_t *v19;
  double v20;
  uint64_t *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  float *v25;
  int8x16_t v26;
  int8x16_t v27;
  unint64_t *v28;
  double v29;
  uint64_t v30;

  if (a1 != a2)
  {
    v8 = a1 + 1;
    *a3 = *a1;
    if (a1 + 1 != a2)
    {
      v10 = 0;
      v11 = a3;
      do
      {
        v12 = (_QWORD *)a4[2];
        if (*v12 <= (unint64_t)*v8
          || (v13 = v11,
              v15 = *v11,
              ++v11,
              v14 = v15,
              v16 = (float *)a4[1],
              *(double *)v17.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(a5, a6, *a4, v16, (double *)(v12[1] + 16 * *v8)), v19 = (unint64_t *)a4[2], *v19 <= v15))
        {
LABEL_17:
          std::terminate();
        }
        v20 = *(double *)v17.i64;
        *(double *)a5.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(v17, v18, *a4, v16, (double *)(v19[1] + 16 * v14));
        v21 = v11;
        if (v20 < *(double *)a5.i64)
        {
          v13[1] = *v13;
          v21 = a3;
          if (v13 != a3)
          {
            v22 = v10;
            while (1)
            {
              v23 = (_QWORD *)a4[2];
              if (*v23 <= (unint64_t)*v8)
                goto LABEL_17;
              v24 = *(uint64_t *)((char *)a3 + v22 - 8);
              v25 = (float *)a4[1];
              *(double *)v26.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(a5, a6, *a4, v25, (double *)(v23[1] + 16 * *v8));
              v28 = (unint64_t *)a4[2];
              if (*v28 <= v24)
                goto LABEL_17;
              v29 = *(double *)v26.i64;
              *(double *)a5.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(v26, v27, *a4, v25, (double *)(v28[1] + 16 * v24));
              if (v29 >= *(double *)a5.i64)
                break;
              *(uint64_t *)((char *)a3 + v22) = *(uint64_t *)((char *)a3 + v22 - 8);
              v22 -= 8;
              if (!v22)
              {
                v21 = a3;
                goto LABEL_15;
              }
            }
            v21 = (uint64_t *)((char *)a3 + v22);
          }
        }
LABEL_15:
        v30 = *v8++;
        *v21 = v30;
        v10 += 8;
      }
      while (v8 != a2);
    }
  }
}

void std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(unint64_t *a1, unint64_t *a2, uint64_t *a3, uint64_t *a4, _QWORD *a5, uint64_t *a6, int8x16_t a7, int8x16_t a8)
{
  unint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  float *v16;
  int8x16_t v17;
  int8x16_t v18;
  unint64_t *v19;
  double v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;

  if (a1 == a2)
  {
LABEL_12:
    while (a3 != a4)
    {
      v22 = *a3++;
      *a5++ = v22;
    }
  }
  else
  {
    v13 = a1;
    while (a3 != a4)
    {
      v14 = (_QWORD *)a6[2];
      if (*v14 <= (unint64_t)*a3
        || (v15 = *v13,
            v16 = (float *)a6[1],
            *(double *)v17.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(a7, a8, *a6, v16, (double *)(v14[1] + 16 * *a3)), v19 = (unint64_t *)a6[2], *v19 <= v15))
      {
        std::terminate();
      }
      v20 = *(double *)v17.i64;
      *(double *)a7.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(v17, v18, *a6, v16, (double *)(v19[1] + 16 * v15));
      if (v20 >= *(double *)a7.i64)
        v21 = v13;
      else
        v21 = a3;
      a3 += v20 < *(double *)a7.i64;
      v13 += v20 >= *(double *)a7.i64;
      *a5++ = *v21;
      if (v13 == a2)
        goto LABEL_12;
    }
    if (v13 != a2)
    {
      v23 = 0;
      do
      {
        a5[v23] = v13[v23];
        ++v23;
      }
      while (&v13[v23] != a2);
    }
  }
}

void std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(char *__dst, char *a2, char *a3, uint64_t *a4, uint64_t a5, uint64_t a6, char *__src, int8x16_t a8, int8x16_t a9)
{
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;

  if (a5 <= a6)
  {
    v14 = __src;
    if (__dst != a2)
    {
      v14 = __src;
      v15 = __dst;
      do
      {
        v16 = *(_QWORD *)v15;
        v15 += 8;
        *(_QWORD *)v14 = v16;
        v14 += 8;
      }
      while (v15 != a2);
    }
    std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *,unsigned long *,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(__src, v14, a2, a3, __dst, a4, a8, a9);
  }
  else
  {
    v11 = __src;
    if (a2 != a3)
    {
      v11 = __src;
      v12 = a2;
      do
      {
        v13 = *(_QWORD *)v12;
        v12 += 8;
        *(_QWORD *)v11 = v13;
        v11 += 8;
      }
      while (v12 != a3);
    }
    v17 = a4;
    std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &>,std::reverse_iterator<unsigned long *>,std::reverse_iterator<unsigned long *>,std::reverse_iterator<std::__wrap_iter<unsigned long *>>,std::reverse_iterator<std::__wrap_iter<unsigned long *>>,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>(a8, a9, (uint64_t)v11, (uint64_t)v11, (uint64_t)__src, (uint64_t)__src, (uint64_t)a2, (uint64_t)a2, (uint64_t)__dst, (uint64_t)__dst, (uint64_t)a3, (uint64_t)a3, &v17);
  }
}

_QWORD *std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>,unsigned long,std::__identity>(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, int8x16_t a5, int8x16_t a6)
{
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  float *v13;
  int8x16_t v14;
  int8x16_t v15;
  unint64_t *v16;
  double v17;

  if (a2 != a1)
  {
    v8 = a1;
    v9 = a2 - a1;
    do
    {
      v10 = (_QWORD *)a4[2];
      if (*v10 <= *a3
        || (v11 = &v8[v9 >> 1],
            v12 = *v11,
            v13 = (float *)a4[1],
            *(double *)v14.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(a5, a6, *a4, v13, (double *)(v10[1] + 16 * *a3)), v16 = (unint64_t *)a4[2], *v16 <= v12))
      {
        std::terminate();
      }
      v17 = *(double *)v14.i64;
      *(double *)a5.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(v14, v15, *a4, v13, (double *)(v16[1] + 16 * v12));
      if (v17 < *(double *)a5.i64)
      {
        v9 >>= 1;
      }
      else
      {
        v8 = v11 + 1;
        v9 += ~(v9 >> 1);
      }
    }
    while (v9);
    return v8;
  }
  return a2;
}

void std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *,unsigned long *,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(char *__src, char *a2, char *a3, char *a4, _QWORD *__dst, uint64_t *a6, int8x16_t a7, int8x16_t a8)
{
  char *v13;
  _QWORD *v14;
  unint64_t v15;
  float *v16;
  int8x16_t v17;
  int8x16_t v18;
  unint64_t *v19;
  double v20;
  char *v21;

  if (__src != a2)
  {
    v13 = __src;
    while (a3 != a4)
    {
      v14 = (_QWORD *)a6[2];
      if (*v14 <= *(_QWORD *)a3
        || (v15 = *(_QWORD *)v13,
            v16 = (float *)a6[1],
            *(double *)v17.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(a7, a8, *a6, v16, (double *)(v14[1] + 16 * *(_QWORD *)a3)), v19 = (unint64_t *)a6[2], *v19 <= v15))
      {
        std::terminate();
      }
      v20 = *(double *)v17.i64;
      *(double *)a7.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(v17, v18, *a6, v16, (double *)(v19[1] + 16 * v15));
      if (v20 >= *(double *)a7.i64)
        v21 = v13;
      else
        v21 = a3;
      a3 += 8 * (v20 < *(double *)a7.i64);
      v13 += 8 * (v20 >= *(double *)a7.i64);
      *__dst++ = *(_QWORD *)v21;
      if (v13 == a2)
        return;
    }
    memmove(__dst, v13, a2 - v13);
  }
}

void std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &>,std::reverse_iterator<unsigned long *>,std::reverse_iterator<unsigned long *>,std::reverse_iterator<std::__wrap_iter<unsigned long *>>,std::reverse_iterator<std::__wrap_iter<unsigned long *>>,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>(int8x16_t a1, int8x16_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t **a13)
{
  uint64_t v16;
  _QWORD *v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;

  if (a4 != a6)
  {
    v16 = a4;
    v17 = (_QWORD *)(a12 - 8);
    while (a8 != a10)
    {
      v18 = std::__invert<xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &>::operator()[abi:ne180100]<unsigned long,unsigned long>(a13, (unint64_t *)(a8 - 8), (_QWORD *)(v16 - 8), a1, a2);
      if (v18)
        v19 = a8;
      else
        v19 = v16;
      if (v18)
        a8 -= 8;
      else
        v16 -= 8;
      *v17-- = *(_QWORD *)(v19 - 8);
      if (v16 == a6)
        return;
    }
    v20 = 0;
    do
    {
      v17[v20] = *(_QWORD *)(v16 + v20 * 8 - 8);
      --v20;
    }
    while (v16 + v20 * 8 != a6);
  }
}

BOOL std::__invert<xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1} &>::operator()[abi:ne180100]<unsigned long,unsigned long>(uint64_t **a1, unint64_t *a2, _QWORD *a3, int8x16_t a4, int8x16_t a5)
{
  uint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  float *v8;
  int8x16_t v9;
  int8x16_t v10;
  unint64_t *v11;

  v5 = *a1;
  v6 = (_QWORD *)(*a1)[2];
  if (*v6 <= *a3
    || (v7 = *a2,
        v8 = (float *)v5[1],
        *(double *)v9.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(a4, a5, *v5, v8, (double *)(v6[1] + 16 * *a3)), v11 = (unint64_t *)v5[2], *v11 <= v7))
  {
    std::terminate();
  }
  return *(double *)v9.i64 < xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(v9, v10, *v5, v8, (double *)(v11[1] + 16 * v7));
}

_QWORD *std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>,unsigned long,std::__identity,xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(xgboost::common::HistCollection<double> const&,xgboost::common::HistogramCuts const&,xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,xgboost::RegTree const&,std::vector<xgboost::tree::CPUExpandEntry> *)::{lambda(unsigned long,xgboost::common::Range1d)#1}::operator() const(unsigned long,xgboost::common::Range1d)::{lambda(unsigned long,unsigned long)#1}>(_QWORD *a1, _QWORD *a2, unint64_t *a3, uint64_t *a4, int8x16_t a5, int8x16_t a6)
{
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  float *v13;
  int8x16_t v14;
  int8x16_t v15;
  unint64_t *v16;
  double v17;

  if (a2 != a1)
  {
    v8 = a1;
    v9 = a2 - a1;
    do
    {
      v10 = &v8[v9 >> 1];
      v11 = (_QWORD *)a4[2];
      if (*v11 <= *v10
        || (v12 = *a3,
            v13 = (float *)a4[1],
            *(double *)v14.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(a5, a6, *a4, v13, (double *)(v11[1] + 16 * *v10)), v16 = (unint64_t *)a4[2], *v16 <= v12))
      {
        std::terminate();
      }
      v17 = *(double *)v14.i64;
      *(double *)a5.i64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeightCat<xgboost::detail::GradientPairInternal<double>>(v14, v15, *a4, v13, (double *)(v16[1] + 16 * v12));
      if (v17 >= *(double *)a5.i64)
        v9 >>= 1;
      else
        v9 += ~(v9 >> 1);
      if (v17 < *(double *)a5.i64)
        v8 = v10 + 1;
    }
    while (v9);
    return v8;
  }
  return a2;
}

uint64_t xgboost::data::__dmlc_registry_file_tag_gradient_index_format__(xgboost::data *this)
{
  return 0;
}

void std::__function::__func<xgboost::data::$_0,std::allocator<xgboost::data::$_0>,xgboost::data::SparsePageFormat<xgboost::GHistIndexMatrix> * ()(void)>::~__func()
{
  JUMPOUT(0x227667068);
}

_QWORD *std::__function::__func<xgboost::data::$_0,std::allocator<xgboost::data::$_0>,xgboost::data::SparsePageFormat<xgboost::GHistIndexMatrix> * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6BBD50;
  return result;
}

void std::__function::__func<xgboost::data::$_0,std::allocator<xgboost::data::$_0>,xgboost::data::SparsePageFormat<xgboost::GHistIndexMatrix> * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24E6BBD50;
}

_QWORD *std::__function::__func<xgboost::data::$_0,std::allocator<xgboost::data::$_0>,xgboost::data::SparsePageFormat<xgboost::GHistIndexMatrix> * ()(void)>::operator()()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_24E6BBDD0;
  return result;
}

uint64_t std::__function::__func<xgboost::data::$_0,std::allocator<xgboost::data::$_0>,xgboost::data::SparsePageFormat<xgboost::GHistIndexMatrix> * ()(void)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<xgboost::data::$_0,std::allocator<xgboost::data::$_0>,xgboost::data::SparsePageFormat<xgboost::GHistIndexMatrix> * ()(void)>::target_type()
{
}

void xgboost::data::GHistIndexRawFormat::~GHistIndexRawFormat(xgboost::data::GHistIndexRawFormat *this)
{
  JUMPOUT(0x227667068);
}

BOOL xgboost::data::GHistIndexRawFormat::Read(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, unint64_t *, uint64_t))
{
  unint64_t **v5;
  std::vector<char>::pointer begin;
  std::vector<unsigned int> *v7;
  std::vector<char>::pointer v8;
  unint64_t **v9;
  std::vector<char>::pointer v10;
  std::vector<char>::pointer v11;
  unint64_t v12;
  unint64_t v13;
  _BOOL8 v14;
  uint64_t v16;
  std::vector<char>::pointer v17;
  std::vector<char>::pointer end;
  unint64_t v19;
  BOOL v20;
  std::vector<char>::size_type v21;
  int v22;
  uint64_t (*v23)(xgboost::common::Index *, const unsigned __int8 *);
  std::string *Entry;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  std::vector<char> __sz;
  unint64_t v32;

  v5 = *(unint64_t ***)(a2 + 120);
  __sz.__begin_ = 0;
  if ((**a3)(a3, (unint64_t *)&__sz, 8) != 8)
    return 0;
  begin = __sz.__begin_;
  std::vector<float>::resize((uint64_t)v5, (unint64_t)__sz.__begin_);
  if (__sz.__begin_)
  {
    if ((**a3)(a3, *v5, 4 * (_QWORD)begin) != 4 * (_QWORD)begin)
      return 0;
  }
  v7 = *(std::vector<unsigned int> **)(a2 + 128);
  __sz.__begin_ = 0;
  if ((**a3)(a3, (unint64_t *)&__sz, 8) != 8)
    return 0;
  v8 = __sz.__begin_;
  std::vector<unsigned int>::resize(v7, (std::vector<unsigned int>::size_type)__sz.__begin_);
  if (__sz.__begin_)
  {
    if ((**a3)(a3, (unint64_t *)v7->__begin_, 4 * (_QWORD)v8) != 4 * (_QWORD)v8)
      return 0;
  }
  v9 = *(unint64_t ***)(a2 + 136);
  __sz.__begin_ = 0;
  if ((**a3)(a3, (unint64_t *)&__sz, 8) != 8)
    return 0;
  v10 = __sz.__begin_;
  std::vector<float>::resize((uint64_t)v9, (unint64_t)__sz.__begin_);
  if (__sz.__begin_)
  {
    if ((**a3)(a3, *v9, 4 * (_QWORD)v10) != 4 * (_QWORD)v10)
      return 0;
  }
  __sz.__begin_ = 0;
  if ((**a3)(a3, (unint64_t *)&__sz, 8) == 8)
  {
    v11 = __sz.__begin_;
    std::vector<unsigned long>::resize(a2, (unint64_t)__sz.__begin_);
    if (__sz.__begin_)
      (**a3)(a3, *(unint64_t **)a2, 8 * (_QWORD)v11);
  }
  memset(&__sz, 0, sizeof(__sz));
  v32 = 0;
  if ((**a3)(a3, &v32, 8) != 8)
    goto LABEL_47;
  v12 = v32;
  if (v32 <= __sz.__end_ - __sz.__begin_)
  {
    v13 = v32;
    if (v32 < __sz.__end_ - __sz.__begin_)
    {
      __sz.__end_ = &__sz.__begin_[v32];
      v13 = v32;
    }
  }
  else
  {
    std::vector<char>::__append(&__sz, v32 - (__sz.__end_ - __sz.__begin_));
    v13 = v32;
  }
  if (v13 && (**a3)(a3, (unint64_t *)__sz.__begin_, v12) != v12)
    goto LABEL_47;
  v16 = *(_QWORD *)(a2 + 24);
  v17 = __sz.__begin_;
  end = __sz.__end_;
  v19 = *(_QWORD *)(a2 + 32) - v16;
  v20 = __sz.__end_ - __sz.__begin_ >= v19;
  v21 = __sz.__end_ - __sz.__begin_ - v19;
  if (v21 != 0 && v20)
  {
    std::vector<char>::__append((std::vector<char> *)(a2 + 24), v21);
    v17 = __sz.__begin_;
    end = __sz.__end_;
  }
  else if (!v20)
  {
    *(_QWORD *)(a2 + 32) = v16 + __sz.__end_ - __sz.__begin_;
  }
  if (end != v17)
    memmove(*(void **)(a2 + 24), v17, end - v17);
  v30 = 0;
  if ((**a3)(a3, (unint64_t *)&v30, 4) != 4)
    goto LABEL_47;
  v22 = v30;
  *(_DWORD *)(a2 + 72) = v30;
  switch(v22)
  {
    case 4:
      v23 = xgboost::common::Index::GetValueFromUint32;
      goto LABEL_36;
    case 2:
      v23 = xgboost::common::Index::GetValueFromUint16;
      goto LABEL_36;
    case 1:
      v23 = xgboost::common::Index::GetValueFromUint8;
LABEL_36:
      *(_QWORD *)(a2 + 80) = v23;
      goto LABEL_38;
  }
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v32);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../common/hist_util.h");
  v25 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v32);
  v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Check failed: binTypeSize == kUint8BinsTypeSize || binTypeSize == kUint16BinsTypeSize || binTypeSize == kUint32BinsTypeSize", 123);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)": ", 2);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v32);
LABEL_38:
  v32 = 0;
  if ((**a3)(a3, &v32, 8) == 8)
  {
    v27 = v32;
    std::vector<unsigned long>::resize(a2 + 88, v32);
    if ((!v32 || (**a3)(a3, *(unint64_t **)(a2 + 88), 8 * v27) == 8 * v27)
      && (**a3)(a3, (unint64_t *)(a2 + 144), 8) == 8
      && (**a3)(a3, (unint64_t *)(a2 + 152), 8) == 8)
    {
      LOBYTE(v32) = 0;
      v28 = (**a3)(a3, &v32, 1);
      v14 = v28 == 1;
      if (v28 == 1)
      {
        v29 = v32;
        *(_BYTE *)(a2 + 192) = v32;
        if (v29)
          xgboost::common::Index::SetBinOffset((std::vector<unsigned int> *)(a2 + 24), *(_QWORD *)(a2 + 128));
        xgboost::common::ColumnMatrix::Read(*(std::vector<char> **)(a2 + 160), a3, **(char ***)(a2 + 128));
      }
      goto LABEL_48;
    }
  }
LABEL_47:
  v14 = 0;
LABEL_48:
  if (__sz.__begin_)
  {
    __sz.__end_ = __sz.__begin_;
    operator delete(__sz.__begin_);
  }
  return v14;
}

void sub_220EF4900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t xgboost::data::GHistIndexRawFormat::Write(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _BYTE *v11;
  _BYTE *v12;
  size_t v13;
  _BYTE *v14;
  unint64_t v15;
  uint64_t v16;
  int64x2_t v17;
  int64x2_t v18;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int v25;
  void *__dst[2];
  uint64_t v27;
  uint64_t v28;

  v5 = *(_QWORD **)(a2 + 120);
  __dst[0] = (void *)((uint64_t)(v5[1] - *v5) >> 2);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a3 + 8))(a3, __dst, 8);
  if (__dst[0])
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a3 + 8))(a3, *v5, v5[1] - *v5);
  v6 = *(uint64_t **)(a2 + 120);
  v7 = *(_QWORD **)(a2 + 128);
  v8 = *v6;
  v9 = v6[1];
  __dst[0] = (void *)((uint64_t)(v7[1] - *v7) >> 2);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a3 + 8))(a3, __dst, 8);
  if (__dst[0])
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a3 + 8))(a3, *v7, v7[1] - *v7);
  v10 = *(_QWORD **)(a2 + 136);
  v24 = *(int64x2_t *)*(_QWORD *)(a2 + 128);
  __dst[0] = (void *)((uint64_t)(v10[1] - *v10) >> 2);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a3 + 8))(a3, __dst, 8);
  if (__dst[0])
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a3 + 8))(a3, *v10, v10[1] - *v10);
  v23 = *(int64x2_t *)*(_QWORD *)(a2 + 136);
  __dst[0] = (void *)((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a3 + 8))(a3, __dst, 8);
  if (__dst[0])
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a3 + 8))(a3, *(_QWORD *)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  v22 = *(int64x2_t *)a2;
  v12 = *(_BYTE **)(a2 + 24);
  v11 = *(_BYTE **)(a2 + 32);
  __dst[1] = 0;
  v27 = 0;
  __dst[0] = 0;
  v13 = v11 - v12;
  if (v11 == v12)
  {
    v15 = 0;
  }
  else
  {
    std::vector<char>::__vallocate[abi:ne180100](__dst, v11 - v12);
    v14 = __dst[1];
    memmove(__dst[1], v12, v13);
    __dst[1] = &v14[v13];
    v15 = &v14[v13] - (char *)__dst[0];
  }
  v28 = v15;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a3 + 8))(a3, &v28, 8);
  if (v28)
    (*(void (**)(uint64_t, void *, int64_t))(*(_QWORD *)a3 + 8))(a3, __dst[0], (char *)__dst[1] - (char *)__dst[0]);
  v21 = *(int64x2_t *)__dst;
  v25 = *(_DWORD *)(a2 + 72);
  (*(void (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a3 + 8))(a3, &v25, 4);
  v28 = (uint64_t)(*(_QWORD *)(a2 + 96) - *(_QWORD *)(a2 + 88)) >> 3;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a3 + 8))(a3, &v28, 8);
  if (v28)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a3 + 8))(a3, *(_QWORD *)(a2 + 88), *(_QWORD *)(a2 + 96) - *(_QWORD *)(a2 + 88));
  v20 = *(int64x2_t *)(a2 + 88);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 8))(a3, a2 + 144, 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 8))(a3, a2 + 152, 8);
  LOBYTE(v28) = *(_BYTE *)(a2 + 192);
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a3 + 8))(a3, &v28, 1);
  v16 = xgboost::common::ColumnMatrix::Write(*(_QWORD **)(a2 + 160), a3);
  if (__dst[0])
  {
    __dst[1] = __dst[0];
    operator delete(__dst[0]);
  }
  v17.i64[0] = v8;
  v17.i64[1] = v9 + 69;
  v18 = vaddq_s64(v17, vaddq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v24, v23), v22), v21), v20));
  return vsubq_s64(vdupq_laneq_s64(v18, 1), v18).u64[0] + v16;
}

void sub_220EF4C78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *xgboost::HostDeviceVector<float>::HostDeviceVector(_QWORD *a1, unint64_t a2, float a3)
{
  _QWORD *v6;
  float v8;

  *a1 = 0;
  v6 = (_QWORD *)operator new();
  v8 = a3;
  std::vector<float>::vector(v6, a2, &v8);
  *a1 = v6;
  return a1;
}

{
  return __ZN7xgboost16HostDeviceVectorIfEC2Emfi(a1, a2, a3);
}

void sub_220EF4D14(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x80C40D6874129);
  _Unwind_Resume(a1);
}

_QWORD *xgboost::HostDeviceVector<float>::HostDeviceVector(_QWORD *a1, const void *a2, unint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  char *v8;

  *a1 = 0;
  v6 = (_QWORD *)operator new();
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = 0;
  if (a3)
  {
    std::vector<float>::__vallocate[abi:ne180100](v6, a3);
    v8 = (char *)v7[1];
    memmove(v8, a2, 4 * a3);
    v7[1] = &v8[4 * a3];
  }
  *a1 = v7;
  return a1;
}

{
  return __ZN7xgboost16HostDeviceVectorIfEC2ESt16initializer_listIfEi(a1, a2, a3);
}

void sub_220EF4DCC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  MEMORY[0x227667068](v1, 0x80C40D6874129);
  _Unwind_Resume(a1);
}

uint64_t *xgboost::HostDeviceVector<float>::HostDeviceVector(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  *a1 = 0;
  v4 = operator new();
  v7 = 0;
  v6 = 0uLL;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v6, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  *(_OWORD *)v4 = v6;
  *(_QWORD *)(v4 + 16) = v7;
  *a1 = v4;
  return a1;
}

{
  return __ZN7xgboost16HostDeviceVectorIfEC2ERKNSt3__16vectorIfNS2_9allocatorIfEEEEi(a1, a2);
}

void sub_220EF4E88(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x80C40D6874129);
  _Unwind_Resume(a1);
}

uint64_t *xgboost::HostDeviceVector<float>::~HostDeviceVector(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x227667068](v2, 0x80C40D6874129);
  }
  *a1 = 0;
  return a1;
}

{
  return __ZN7xgboost16HostDeviceVectorIfED2Ev(a1);
}

uint64_t *xgboost::HostDeviceVector<float>::HostDeviceVector(uint64_t *a1, _OWORD **a2)
{
  uint64_t v4;
  _QWORD *v5;

  v4 = operator new();
  v5 = *a2;
  *(_OWORD *)v4 = **a2;
  *(_QWORD *)(v4 + 16) = v5[2];
  *v5 = 0;
  v5[1] = 0;
  v5[2] = 0;
  *a1 = v4;
  return a1;
}

{
  uint64_t v4;
  _QWORD *v5;

  v4 = operator new();
  v5 = *a2;
  *(_OWORD *)v4 = **a2;
  *(_QWORD *)(v4 + 16) = v5[2];
  *v5 = 0;
  v5[1] = 0;
  v5[2] = 0;
  *a1 = v4;
  return a1;
}

uint64_t *xgboost::HostDeviceVector<float>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  if (a1 != a2)
  {
    v4 = operator new();
    v5 = (_QWORD *)*a2;
    *(_OWORD *)v4 = *(_OWORD *)*a2;
    *(_QWORD *)(v4 + 16) = v5[2];
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
    v6 = *a1;
    if (*a1)
    {
      v7 = *(void **)v6;
      if (*(_QWORD *)v6)
      {
        *(_QWORD *)(v6 + 8) = v7;
        operator delete(v7);
      }
      MEMORY[0x227667068](v6, 0x80C40D6874129);
    }
    *a1 = v4;
  }
  return a1;
}

{
  return __ZN7xgboost16HostDeviceVectorIfEaSEOS1_(a1, a2);
}

BOOL xgboost::HostDeviceVector<float>::Empty(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 8) == **(_QWORD **)a1;
}

uint64_t xgboost::HostDeviceVector<float>::Size(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 8) - **(_QWORD **)a1) >> 2;
}

uint64_t xgboost::HostDeviceVector<float>::DeviceIdx()
{
  return 0xFFFFFFFFLL;
}

void xgboost::HostDeviceVector<float>::DeviceSpan(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

{
  *a1 = 0;
  a1[1] = 0;
}

void xgboost::HostDeviceVector<float>::ConstDeviceSpan(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t xgboost::HostDeviceVector<float>::DevicePointer()
{
  return 0;
}

{
  return 0;
}

uint64_t xgboost::HostDeviceVector<float>::ConstDevicePointer()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<float>::HostPointer(uint64_t a1)
{
  return **(_QWORD **)a1;
}

{
  return **(_QWORD **)a1;
}

uint64_t xgboost::HostDeviceVector<float>::HostVector(uint64_t a1)
{
  return *(_QWORD *)a1;
}

{
  return *(_QWORD *)a1;
}

uint64_t **xgboost::HostDeviceVector<float>::HostSpan@<X0>(uint64_t **result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = **result;
  *a2 = ((*result)[1] - v2) >> 2;
  a2[1] = v2;
  return result;
}

{
  uint64_t v2;

  v2 = **result;
  *a2 = ((*result)[1] - v2) >> 2;
  a2[1] = v2;
  return result;
}

uint64_t **xgboost::HostDeviceVector<float>::ConstHostSpan@<X0>(uint64_t **result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = **result;
  *a2 = ((*result)[1] - v2) >> 2;
  a2[1] = v2;
  return result;
}

uint64_t xgboost::HostDeviceVector<float>::ConstHostPointer(uint64_t a1)
{
  return **(_QWORD **)a1;
}

uint64_t xgboost::HostDeviceVector<float>::ConstHostVector(uint64_t a1)
{
  return *(_QWORD *)a1;
}

float ***xgboost::HostDeviceVector<float>::Fill(float ***result, float a2)
{
  float *v2;
  uint64_t v3;
  unint64_t v4;

  v2 = **result;
  v3 = (char *)(*result)[1] - (char *)v2;
  if (v3 >= 1)
  {
    v4 = ((unint64_t)v3 >> 2) + 1;
    do
    {
      *v2++ = a2;
      --v4;
    }
    while (v4 > 1);
  }
  return result;
}

void xgboost::HostDeviceVector<float>::Copy(void ***a1, const void ***a2)
{
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;

  v15 = ((_BYTE *)(*a1)[1] - (_BYTE *)**a1) >> 2;
  if (v15 != ((_BYTE *)(*a2)[1] - (_BYTE *)**a2) >> 2)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v16);
    if (v16)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/host_device_vector.cc");
      v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: ", 14);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Size() == other.Size()", 22);
      v8 = *(char *)(v16 + 23);
      v9 = v8 >= 0 ? v16 : *(_QWORD *)v16;
      v10 = v8 >= 0 ? *(unsigned __int8 *)(v16 + 23) : *(_QWORD *)(v16 + 8);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
      v12 = v16;
      v16 = 0;
      if (v12)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v16, v12);
    }
  }
  v13 = **a2;
  v14 = (*a2)[1];
  if (v14 != v13)
    memmove(**a1, v13, v14 - v13);
}

{
  __ZN7xgboost16HostDeviceVectorIfE4CopyERKS1_(a1, a2);
}

void sub_220EF528C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

void xgboost::HostDeviceVector<float>::Copy(void ***a1, uint64_t a2)
{
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v14 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2;
  v15 = ((_BYTE *)(*a1)[1] - (_BYTE *)**a1) >> 2;
  if (v15 != v14)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v16);
    if (v16)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/host_device_vector.cc");
      v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: ", 14);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Size() == other.size()", 22);
      v8 = *(char *)(v16 + 23);
      v9 = v8 >= 0 ? v16 : *(_QWORD *)v16;
      v10 = v8 >= 0 ? *(unsigned __int8 *)(v16 + 23) : *(_QWORD *)(v16 + 8);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
      v12 = v16;
      v16 = 0;
      if (v12)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v16, v12);
    }
  }
  v13 = *(_QWORD *)(a2 + 8);
  if (v13 != *(_QWORD *)a2)
    memmove(**a1, *(const void **)a2, v13 - *(_QWORD *)a2);
}

void sub_220EF53CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

void xgboost::HostDeviceVector<float>::Copy(void ***a1, void *__src, uint64_t a3)
{
  std::string *Entry;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v15 = ((_BYTE *)(*a1)[1] - (_BYTE *)**a1) >> 2;
  if (v15 != a3)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v16);
    if (v16)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/host_device_vector.cc");
      v7 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: ", 14);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Size() == other.size()", 22);
      v10 = *(char *)(v16 + 23);
      v11 = v10 >= 0 ? v16 : *(_QWORD *)v16;
      v12 = v10 >= 0 ? *(unsigned __int8 *)(v16 + 23) : *(_QWORD *)(v16 + 8);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
      v14 = v16;
      v16 = 0;
      if (v14)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v16, v14);
    }
  }
  if (a3)
    memmove(**a1, __src, 4 * a3);
}

void sub_220EF550C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

void xgboost::HostDeviceVector<float>::Extend(_QWORD **a1, const void ***a2)
{
  _QWORD *v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;

  v4 = *a1;
  v5 = v4[1] - *v4;
  std::vector<float>::resize((uint64_t)v4, (((_BYTE *)(*a2)[1] - (_BYTE *)**a2) >> 2) + (v5 >> 2));
  v6 = **a2;
  v7 = (*a2)[1];
  if (v7 != v6)
    memmove((void *)(**a1 + 4 * (v5 >> 2)), v6, v7 - v6);
}

{
  __ZN7xgboost16HostDeviceVectorIfE6ExtendERKS1_(a1, a2);
}

uint64_t xgboost::HostDeviceVector<float>::HostCanRead()
{
  return 1;
}

uint64_t xgboost::HostDeviceVector<float>::HostCanWrite()
{
  return 1;
}

uint64_t xgboost::HostDeviceVector<float>::DeviceCanRead()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<float>::DeviceCanWrite()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<float>::DeviceAccess()
{
  return 0;
}

void xgboost::HostDeviceVector<float>::Resize(uint64_t *a1, unint64_t a2, float a3)
{
  float v3;

  v3 = a3;
  std::vector<float>::resize(*a1, a2, &v3);
}

_QWORD *xgboost::HostDeviceVector<double>::HostDeviceVector(_QWORD *a1, unint64_t a2, double a3)
{
  _QWORD *v6;
  double v8;

  *a1 = 0;
  v6 = (_QWORD *)operator new();
  v8 = a3;
  std::vector<double>::vector(v6, a2, &v8);
  *a1 = v6;
  return a1;
}

{
  return __ZN7xgboost16HostDeviceVectorIdEC2Emdi(a1, a2, a3);
}

void sub_220EF5684(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x80C40D6874129);
  _Unwind_Resume(a1);
}

_QWORD *xgboost::HostDeviceVector<double>::HostDeviceVector(_QWORD *a1, const void *a2, unint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  char *v8;

  *a1 = 0;
  v6 = (_QWORD *)operator new();
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = 0;
  if (a3)
  {
    std::vector<void *>::__vallocate[abi:ne180100](v6, a3);
    v8 = (char *)v7[1];
    memmove(v8, a2, 8 * a3);
    v7[1] = &v8[8 * a3];
  }
  *a1 = v7;
  return a1;
}

{
  return __ZN7xgboost16HostDeviceVectorIdEC2ESt16initializer_listIdEi(a1, a2, a3);
}

void sub_220EF573C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  MEMORY[0x227667068](v1, 0x80C40D6874129);
  _Unwind_Resume(a1);
}

_QWORD *xgboost::HostDeviceVector<double>::HostDeviceVector(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  void *__dst;
  uint64_t v14;

  *a1 = 0;
  v4 = (_QWORD *)operator new();
  __dst = 0;
  v14 = 0;
  v12 = 0;
  v5 = *(const void **)a2;
  v6 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v6)
  {
    std::vector<void *>::__vallocate[abi:ne180100](&v12, v6 >> 3);
    v7 = (char *)__dst;
    memmove(__dst, v5, v6);
    v8 = &v7[8 * (v6 >> 3)];
    v9 = v12;
    v10 = v14;
  }
  else
  {
    v10 = 0;
    v8 = 0;
    v9 = 0;
  }
  *v4 = v9;
  v4[1] = v8;
  v4[2] = v10;
  *a1 = v4;
  return a1;
}

{
  return __ZN7xgboost16HostDeviceVectorIdEC2ERKNSt3__16vectorIdNS2_9allocatorIdEEEEi(a1, a2);
}

void sub_220EF5830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x227667068](v11, 0x80C40D6874129);
  _Unwind_Resume(a1);
}

uint64_t *xgboost::HostDeviceVector<double>::~HostDeviceVector(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x227667068](v2, 0x80C40D6874129);
  }
  *a1 = 0;
  return a1;
}

{
  return __ZN7xgboost16HostDeviceVectorIdED2Ev(a1);
}

uint64_t *xgboost::HostDeviceVector<double>::HostDeviceVector(uint64_t *a1, _OWORD **a2)
{
  uint64_t v4;
  _QWORD *v5;

  v4 = operator new();
  v5 = *a2;
  *(_OWORD *)v4 = **a2;
  *(_QWORD *)(v4 + 16) = v5[2];
  *v5 = 0;
  v5[1] = 0;
  v5[2] = 0;
  *a1 = v4;
  return a1;
}

{
  uint64_t v4;
  _QWORD *v5;

  v4 = operator new();
  v5 = *a2;
  *(_OWORD *)v4 = **a2;
  *(_QWORD *)(v4 + 16) = v5[2];
  *v5 = 0;
  v5[1] = 0;
  v5[2] = 0;
  *a1 = v4;
  return a1;
}

uint64_t *xgboost::HostDeviceVector<double>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  if (a1 != a2)
  {
    v4 = operator new();
    v5 = (_QWORD *)*a2;
    *(_OWORD *)v4 = *(_OWORD *)*a2;
    *(_QWORD *)(v4 + 16) = v5[2];
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
    v6 = *a1;
    if (*a1)
    {
      v7 = *(void **)v6;
      if (*(_QWORD *)v6)
      {
        *(_QWORD *)(v6 + 8) = v7;
        operator delete(v7);
      }
      MEMORY[0x227667068](v6, 0x80C40D6874129);
    }
    *a1 = v4;
  }
  return a1;
}

BOOL xgboost::HostDeviceVector<double>::Empty(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 8) == **(_QWORD **)a1;
}

uint64_t xgboost::HostDeviceVector<double>::Size(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 8) - **(_QWORD **)a1) >> 3;
}

uint64_t xgboost::HostDeviceVector<double>::DeviceIdx()
{
  return 0xFFFFFFFFLL;
}

void xgboost::HostDeviceVector<double>::DeviceSpan(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

{
  *a1 = 0;
  a1[1] = 0;
}

void xgboost::HostDeviceVector<double>::ConstDeviceSpan(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t xgboost::HostDeviceVector<double>::DevicePointer()
{
  return 0;
}

{
  return 0;
}

uint64_t xgboost::HostDeviceVector<double>::ConstDevicePointer()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<double>::HostPointer(uint64_t a1)
{
  return **(_QWORD **)a1;
}

{
  return **(_QWORD **)a1;
}

uint64_t xgboost::HostDeviceVector<double>::HostVector(uint64_t a1)
{
  return *(_QWORD *)a1;
}

{
  return *(_QWORD *)a1;
}

uint64_t **xgboost::HostDeviceVector<double>::HostSpan@<X0>(uint64_t **result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = **result;
  *a2 = ((*result)[1] - v2) >> 3;
  a2[1] = v2;
  return result;
}

{
  uint64_t v2;

  v2 = **result;
  *a2 = ((*result)[1] - v2) >> 3;
  a2[1] = v2;
  return result;
}

uint64_t **xgboost::HostDeviceVector<double>::ConstHostSpan@<X0>(uint64_t **result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = **result;
  *a2 = ((*result)[1] - v2) >> 3;
  a2[1] = v2;
  return result;
}

uint64_t xgboost::HostDeviceVector<double>::ConstHostPointer(uint64_t a1)
{
  return **(_QWORD **)a1;
}

uint64_t xgboost::HostDeviceVector<double>::ConstHostVector(uint64_t a1)
{
  return *(_QWORD *)a1;
}

double ***xgboost::HostDeviceVector<double>::Fill(double ***result, double a2)
{
  double *v2;
  uint64_t v3;
  unint64_t v4;

  v2 = **result;
  v3 = (char *)(*result)[1] - (char *)v2;
  if (v3 >= 1)
  {
    v4 = ((unint64_t)v3 >> 3) + 1;
    do
    {
      *v2++ = a2;
      --v4;
    }
    while (v4 > 1);
  }
  return result;
}

void xgboost::HostDeviceVector<double>::Copy(void ***a1, const void ***a2)
{
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;

  v15 = ((_BYTE *)(*a1)[1] - (_BYTE *)**a1) >> 3;
  if (v15 != ((_BYTE *)(*a2)[1] - (_BYTE *)**a2) >> 3)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v16);
    if (v16)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/host_device_vector.cc");
      v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: ", 14);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Size() == other.Size()", 22);
      v8 = *(char *)(v16 + 23);
      v9 = v8 >= 0 ? v16 : *(_QWORD *)v16;
      v10 = v8 >= 0 ? *(unsigned __int8 *)(v16 + 23) : *(_QWORD *)(v16 + 8);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
      v12 = v16;
      v16 = 0;
      if (v12)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v16, v12);
    }
  }
  v13 = **a2;
  v14 = (*a2)[1];
  if (v14 != v13)
    memmove(**a1, v13, v14 - v13);
}

void sub_220EF5C44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

void xgboost::HostDeviceVector<double>::Copy(void ***a1, uint64_t a2)
{
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v14 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3;
  v15 = ((_BYTE *)(*a1)[1] - (_BYTE *)**a1) >> 3;
  if (v15 != v14)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v16);
    if (v16)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/host_device_vector.cc");
      v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: ", 14);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Size() == other.size()", 22);
      v8 = *(char *)(v16 + 23);
      v9 = v8 >= 0 ? v16 : *(_QWORD *)v16;
      v10 = v8 >= 0 ? *(unsigned __int8 *)(v16 + 23) : *(_QWORD *)(v16 + 8);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
      v12 = v16;
      v16 = 0;
      if (v12)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v16, v12);
    }
  }
  v13 = *(_QWORD *)(a2 + 8);
  if (v13 != *(_QWORD *)a2)
    memmove(**a1, *(const void **)a2, v13 - *(_QWORD *)a2);
}

void sub_220EF5D84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

void xgboost::HostDeviceVector<double>::Copy(void ***a1, void *__src, uint64_t a3)
{
  std::string *Entry;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v15 = ((_BYTE *)(*a1)[1] - (_BYTE *)**a1) >> 3;
  if (v15 != a3)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v16);
    if (v16)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/host_device_vector.cc");
      v7 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: ", 14);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Size() == other.size()", 22);
      v10 = *(char *)(v16 + 23);
      v11 = v10 >= 0 ? v16 : *(_QWORD *)v16;
      v12 = v10 >= 0 ? *(unsigned __int8 *)(v16 + 23) : *(_QWORD *)(v16 + 8);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
      v14 = v16;
      v16 = 0;
      if (v14)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v16, v14);
    }
  }
  if (a3)
    memmove(**a1, __src, 8 * a3);
}

void sub_220EF5EC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

void xgboost::HostDeviceVector<double>::Extend(void ***a1, const void ***a2)
{
  void **v4;
  _BYTE *v5;
  char *v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  _BYTE *v22;
  _BYTE *v23;

  v4 = *a1;
  v5 = **a1;
  v6 = (char *)(*a1)[1];
  v7 = (v6 - v5) >> 3;
  v8 = (_BYTE *)(*a2)[1] - (_BYTE *)**a2;
  v9 = (v8 >> 3) + v7;
  if (v7 >= v9)
  {
    if (v7 <= v9)
      goto LABEL_18;
    v21 = &v5[8 * v9];
    goto LABEL_15;
  }
  v10 = v4[2];
  if (v8 >> 3 <= (unint64_t)((v10 - v6) >> 3))
  {
    bzero(v6, (_BYTE *)(*a2)[1] - (_BYTE *)**a2);
    v21 = &v6[v8];
LABEL_15:
    v4[1] = v21;
    goto LABEL_18;
  }
  if (v9 >> 61)
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  v11 = v10 - v5;
  if (v11 >> 2 > v9)
    v9 = v11 >> 2;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
    v12 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v12 = v9;
  v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(v4 + 2), v12);
  v14 = (char *)*v4;
  v15 = (char *)v4[1];
  v16 = &v13[8 * v7];
  v18 = &v13[8 * v17];
  bzero(v16, v8);
  v19 = &v16[v8];
  while (v15 != v14)
  {
    v20 = *((_QWORD *)v15 - 1);
    v15 -= 8;
    *((_QWORD *)v16 - 1) = v20;
    v16 -= 8;
  }
  *v4 = v16;
  v4[1] = v19;
  v4[2] = v18;
  if (v14)
    operator delete(v14);
LABEL_18:
  v22 = **a2;
  v23 = (*a2)[1];
  if (v23 != v22)
    memmove((char *)**a1 + 8 * v7, v22, v23 - v22);
}

uint64_t xgboost::HostDeviceVector<double>::HostCanRead()
{
  return 1;
}

uint64_t xgboost::HostDeviceVector<double>::HostCanWrite()
{
  return 1;
}

uint64_t xgboost::HostDeviceVector<double>::DeviceCanRead()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<double>::DeviceCanWrite()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<double>::DeviceAccess()
{
  return 0;
}

void xgboost::HostDeviceVector<double>::Resize(void ***a1, unint64_t a2, double a3)
{
  void **v4;
  double *v5;
  _BYTE *v6;
  unint64_t v7;
  _BYTE *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  double *v15;
  char *v16;
  uint64_t v17;
  double *v18;
  char *v19;
  char *v20;
  char *i;
  uint64_t v22;
  double *v23;
  uint64_t v24;

  v4 = *a1;
  v6 = **a1;
  v5 = (double *)(*a1)[1];
  v7 = ((char *)v5 - v6) >> 3;
  if (a2 <= v7)
  {
    if (a2 < v7)
      v4[1] = &v6[8 * a2];
  }
  else
  {
    v9 = v4[2];
    if (a2 - v7 <= (v9 - (_BYTE *)v5) >> 3)
    {
      v23 = &v5[a2 - v7];
      v24 = 8 * a2 - 8 * v7;
      do
      {
        *v5++ = a3;
        v24 -= 8;
      }
      while (v24);
      v4[1] = v23;
    }
    else
    {
      if (a2 >> 61)
        std::vector<void *>::__throw_length_error[abi:ne180100]();
      v10 = v9 - v6;
      v11 = (v9 - v6) >> 2;
      if (v11 <= a2)
        v11 = a2;
      if (v10 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(v4 + 2), v12);
      v15 = (double *)&v13[8 * v7];
      v16 = &v13[8 * a2];
      v17 = 8 * a2 - 8 * v7;
      v18 = v15;
      do
      {
        *v18++ = a3;
        v17 -= 8;
      }
      while (v17);
      v19 = &v13[8 * v14];
      v20 = (char *)*v4;
      for (i = (char *)v4[1]; i != v20; i -= 8)
      {
        v22 = *((_QWORD *)i - 1);
        *((_QWORD *)v15-- - 1) = v22;
      }
      *v4 = v15;
      v4[1] = v16;
      v4[2] = v19;
      if (v20)
        operator delete(v20);
    }
  }
}

_QWORD *xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::HostDeviceVector(_QWORD *a1, unint64_t a2, float a3, float a4)
{
  _QWORD *v8;
  unint64_t v10;

  *a1 = 0;
  v8 = (_QWORD *)operator new();
  v10 = __PAIR64__(LODWORD(a4), LODWORD(a3));
  std::vector<xgboost::detail::GradientPairInternal<float>>::vector(v8, a2, &v10);
  *a1 = v8;
  return a1;
}

{
  return __ZN7xgboost16HostDeviceVectorINS_6detail20GradientPairInternalIfEEEC2EmS3_i(a1, a2, a3, a4);
}

void sub_220EF6214(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x20C40960023A9);
  _Unwind_Resume(a1);
}

_QWORD *xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::HostDeviceVector(_QWORD *a1, const void *a2, unint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  char *v8;

  *a1 = 0;
  v6 = (_QWORD *)operator new();
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = 0;
  if (a3)
  {
    std::vector<xgboost::detail::GradientPairInternal<float>>::__vallocate[abi:ne180100](v6, a3);
    v8 = (char *)v7[1];
    memmove(v8, a2, 8 * a3);
    v7[1] = &v8[8 * a3];
  }
  *a1 = v7;
  return a1;
}

{
  return __ZN7xgboost16HostDeviceVectorINS_6detail20GradientPairInternalIfEEEC2ESt16initializer_listIS3_Ei(a1, a2, a3);
}

void sub_220EF62CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  MEMORY[0x227667068](v1, 0x20C40960023A9);
  _Unwind_Resume(a1);
}

_QWORD *xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::HostDeviceVector(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  void *__dst;
  uint64_t v14;

  *a1 = 0;
  v4 = (_QWORD *)operator new();
  __dst = 0;
  v14 = 0;
  v12 = 0;
  v5 = *(const void **)a2;
  v6 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v6)
  {
    std::vector<xgboost::detail::GradientPairInternal<float>>::__vallocate[abi:ne180100](&v12, v6 >> 3);
    v7 = (char *)__dst;
    memmove(__dst, v5, v6);
    v8 = &v7[8 * (v6 >> 3)];
    v9 = v12;
    v10 = v14;
  }
  else
  {
    v10 = 0;
    v8 = 0;
    v9 = 0;
  }
  *v4 = v9;
  v4[1] = v8;
  v4[2] = v10;
  *a1 = v4;
  return a1;
}

{
  return __ZN7xgboost16HostDeviceVectorINS_6detail20GradientPairInternalIfEEEC2ERKNSt3__16vectorIS3_NS5_9allocatorIS3_EEEEi(a1, a2);
}

void sub_220EF63C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x227667068](v11, 0x20C40960023A9);
  _Unwind_Resume(a1);
}

uint64_t *xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::~HostDeviceVector(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x227667068](v2, 0x20C40960023A9);
  }
  *a1 = 0;
  return a1;
}

{
  return __ZN7xgboost16HostDeviceVectorINS_6detail20GradientPairInternalIfEEED2Ev(a1);
}

uint64_t *xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::HostDeviceVector(uint64_t *a1, _OWORD **a2)
{
  uint64_t v4;
  _QWORD *v5;

  v4 = operator new();
  v5 = *a2;
  *(_OWORD *)v4 = **a2;
  *(_QWORD *)(v4 + 16) = v5[2];
  *v5 = 0;
  v5[1] = 0;
  v5[2] = 0;
  *a1 = v4;
  return a1;
}

{
  uint64_t v4;
  _QWORD *v5;

  v4 = operator new();
  v5 = *a2;
  *(_OWORD *)v4 = **a2;
  *(_QWORD *)(v4 + 16) = v5[2];
  *v5 = 0;
  v5[1] = 0;
  v5[2] = 0;
  *a1 = v4;
  return a1;
}

uint64_t *xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  if (a1 != a2)
  {
    v4 = operator new();
    v5 = (_QWORD *)*a2;
    *(_OWORD *)v4 = *(_OWORD *)*a2;
    *(_QWORD *)(v4 + 16) = v5[2];
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
    v6 = *a1;
    if (*a1)
    {
      v7 = *(void **)v6;
      if (*(_QWORD *)v6)
      {
        *(_QWORD *)(v6 + 8) = v7;
        operator delete(v7);
      }
      MEMORY[0x227667068](v6, 0x20C40960023A9);
    }
    *a1 = v4;
  }
  return a1;
}

BOOL xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::Empty(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 8) == **(_QWORD **)a1;
}

uint64_t xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::Size(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 8) - **(_QWORD **)a1) >> 3;
}

uint64_t xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::DeviceIdx()
{
  return 0xFFFFFFFFLL;
}

void xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::DeviceSpan(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

{
  *a1 = 0;
  a1[1] = 0;
}

void xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::ConstDeviceSpan(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::DevicePointer()
{
  return 0;
}

{
  return 0;
}

uint64_t xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::ConstDevicePointer()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::HostPointer(uint64_t a1)
{
  return **(_QWORD **)a1;
}

{
  return **(_QWORD **)a1;
}

uint64_t xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::HostVector(uint64_t a1)
{
  return *(_QWORD *)a1;
}

{
  return *(_QWORD *)a1;
}

uint64_t **xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::HostSpan@<X0>(uint64_t **result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = **result;
  *a2 = ((*result)[1] - v2) >> 3;
  a2[1] = v2;
  return result;
}

{
  uint64_t v2;

  v2 = **result;
  *a2 = ((*result)[1] - v2) >> 3;
  a2[1] = v2;
  return result;
}

uint64_t **xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::ConstHostSpan@<X0>(uint64_t **result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = **result;
  *a2 = ((*result)[1] - v2) >> 3;
  a2[1] = v2;
  return result;
}

uint64_t xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::ConstHostPointer(uint64_t a1)
{
  return **(_QWORD **)a1;
}

uint64_t xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::ConstHostVector(uint64_t a1)
{
  return *(_QWORD *)a1;
}

float ***xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::Fill(float ***result, float a2, float a3)
{
  float *v3;
  uint64_t v4;
  unint64_t v5;

  v3 = **result;
  v4 = (char *)(*result)[1] - (char *)v3;
  if (v4 >= 1)
  {
    v5 = ((unint64_t)v4 >> 3) + 1;
    do
    {
      *v3 = a2;
      v3[1] = a3;
      v3 += 2;
      --v5;
    }
    while (v5 > 1);
  }
  return result;
}

void xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::Copy(void ***a1, const void ***a2)
{
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;

  v15 = ((_BYTE *)(*a1)[1] - (_BYTE *)**a1) >> 3;
  if (v15 != ((_BYTE *)(*a2)[1] - (_BYTE *)**a2) >> 3)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v16);
    if (v16)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/host_device_vector.cc");
      v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: ", 14);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Size() == other.Size()", 22);
      v8 = *(char *)(v16 + 23);
      v9 = v8 >= 0 ? v16 : *(_QWORD *)v16;
      v10 = v8 >= 0 ? *(unsigned __int8 *)(v16 + 23) : *(_QWORD *)(v16 + 8);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
      v12 = v16;
      v16 = 0;
      if (v12)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v16, v12);
    }
  }
  v13 = **a2;
  v14 = (*a2)[1];
  if (v14 != v13)
    memmove(**a1, v13, v14 - v13);
}

void sub_220EF67D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

void xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::Copy(void ***a1, uint64_t a2)
{
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v14 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3;
  v15 = ((_BYTE *)(*a1)[1] - (_BYTE *)**a1) >> 3;
  if (v15 != v14)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v16);
    if (v16)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/host_device_vector.cc");
      v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: ", 14);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Size() == other.size()", 22);
      v8 = *(char *)(v16 + 23);
      v9 = v8 >= 0 ? v16 : *(_QWORD *)v16;
      v10 = v8 >= 0 ? *(unsigned __int8 *)(v16 + 23) : *(_QWORD *)(v16 + 8);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
      v12 = v16;
      v16 = 0;
      if (v12)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v16, v12);
    }
  }
  v13 = *(_QWORD *)(a2 + 8);
  if (v13 != *(_QWORD *)a2)
    memmove(**a1, *(const void **)a2, v13 - *(_QWORD *)a2);
}

void sub_220EF6914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

void xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::Copy(void ***a1, void *__src, uint64_t a3)
{
  std::string *Entry;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v15 = ((_BYTE *)(*a1)[1] - (_BYTE *)**a1) >> 3;
  if (v15 != a3)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v16);
    if (v16)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/host_device_vector.cc");
      v7 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: ", 14);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Size() == other.size()", 22);
      v10 = *(char *)(v16 + 23);
      v11 = v10 >= 0 ? v16 : *(_QWORD *)v16;
      v12 = v10 >= 0 ? *(unsigned __int8 *)(v16 + 23) : *(_QWORD *)(v16 + 8);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
      v14 = v16;
      v16 = 0;
      if (v14)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v16, v14);
    }
  }
  if (a3)
    memmove(**a1, __src, 8 * a3);
}

void sub_220EF6A54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

void xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::Extend(_QWORD **a1, const void ***a2)
{
  _QWORD *v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;

  v4 = *a1;
  v5 = v4[1] - *v4;
  std::vector<xgboost::detail::GradientPairInternal<float>>::resize((uint64_t)v4, (((_BYTE *)(*a2)[1] - (_BYTE *)**a2) >> 3) + (v5 >> 3));
  v6 = **a2;
  v7 = (*a2)[1];
  if (v7 != v6)
    memmove((void *)(**a1 + 8 * (v5 >> 3)), v6, v7 - v6);
}

uint64_t xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::HostCanRead()
{
  return 1;
}

uint64_t xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::HostCanWrite()
{
  return 1;
}

uint64_t xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::DeviceCanRead()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::DeviceCanWrite()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::DeviceAccess()
{
  return 0;
}

void xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::Resize(uint64_t *a1, unint64_t a2, float a3, float a4)
{
  unint64_t v4;

  v4 = __PAIR64__(LODWORD(a4), LODWORD(a3));
  std::vector<xgboost::detail::GradientPairInternal<float>>::resize(*a1, a2, &v4);
}

std::vector<int> **xgboost::HostDeviceVector<int>::HostDeviceVector(std::vector<int> **a1, std::vector<int>::size_type a2, std::vector<int>::value_type a3)
{
  std::vector<int> *v6;
  std::vector<int>::value_type __x;

  *a1 = 0;
  v6 = (std::vector<int> *)operator new();
  __x = a3;
  std::vector<int>::vector(v6, a2, &__x);
  *a1 = v6;
  return a1;
}

{
  return __ZN7xgboost16HostDeviceVectorIiEC2Emii(a1, a2, a3);
}

void sub_220EF6BC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10C402FEFCB83);
  _Unwind_Resume(a1);
}

_QWORD *xgboost::HostDeviceVector<int>::HostDeviceVector(_QWORD *a1, const void *a2, unint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  char *v8;

  *a1 = 0;
  v6 = (_QWORD *)operator new();
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = 0;
  if (a3)
  {
    std::vector<int>::__vallocate[abi:ne180100](v6, a3);
    v8 = (char *)v7[1];
    memmove(v8, a2, 4 * a3);
    v7[1] = &v8[4 * a3];
  }
  *a1 = v7;
  return a1;
}

{
  return __ZN7xgboost16HostDeviceVectorIiEC2ESt16initializer_listIiEi(a1, a2, a3);
}

void sub_220EF6C7C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  MEMORY[0x227667068](v1, 0x10C402FEFCB83);
  _Unwind_Resume(a1);
}

uint64_t *xgboost::HostDeviceVector<int>::HostDeviceVector(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  *a1 = 0;
  v4 = operator new();
  v7 = 0;
  v6 = 0uLL;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v6, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  *(_OWORD *)v4 = v6;
  *(_QWORD *)(v4 + 16) = v7;
  *a1 = v4;
  return a1;
}

{
  return __ZN7xgboost16HostDeviceVectorIiEC2ERKNSt3__16vectorIiNS2_9allocatorIiEEEEi(a1, a2);
}

void sub_220EF6D38(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10C402FEFCB83);
  _Unwind_Resume(a1);
}

uint64_t *xgboost::HostDeviceVector<int>::~HostDeviceVector(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x227667068](v2, 0x10C402FEFCB83);
  }
  *a1 = 0;
  return a1;
}

{
  return __ZN7xgboost16HostDeviceVectorIiED2Ev(a1);
}

uint64_t *xgboost::HostDeviceVector<int>::HostDeviceVector(uint64_t *a1, _OWORD **a2)
{
  uint64_t v4;
  _QWORD *v5;

  v4 = operator new();
  v5 = *a2;
  *(_OWORD *)v4 = **a2;
  *(_QWORD *)(v4 + 16) = v5[2];
  *v5 = 0;
  v5[1] = 0;
  v5[2] = 0;
  *a1 = v4;
  return a1;
}

{
  uint64_t v4;
  _QWORD *v5;

  v4 = operator new();
  v5 = *a2;
  *(_OWORD *)v4 = **a2;
  *(_QWORD *)(v4 + 16) = v5[2];
  *v5 = 0;
  v5[1] = 0;
  v5[2] = 0;
  *a1 = v4;
  return a1;
}

uint64_t *xgboost::HostDeviceVector<int>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  if (a1 != a2)
  {
    v4 = operator new();
    v5 = (_QWORD *)*a2;
    *(_OWORD *)v4 = *(_OWORD *)*a2;
    *(_QWORD *)(v4 + 16) = v5[2];
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
    v6 = *a1;
    if (*a1)
    {
      v7 = *(void **)v6;
      if (*(_QWORD *)v6)
      {
        *(_QWORD *)(v6 + 8) = v7;
        operator delete(v7);
      }
      MEMORY[0x227667068](v6, 0x10C402FEFCB83);
    }
    *a1 = v4;
  }
  return a1;
}

BOOL xgboost::HostDeviceVector<int>::Empty(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 8) == **(_QWORD **)a1;
}

uint64_t xgboost::HostDeviceVector<int>::Size(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 8) - **(_QWORD **)a1) >> 2;
}

uint64_t xgboost::HostDeviceVector<int>::DeviceIdx()
{
  return 0xFFFFFFFFLL;
}

void xgboost::HostDeviceVector<int>::DeviceSpan(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

{
  *a1 = 0;
  a1[1] = 0;
}

void xgboost::HostDeviceVector<int>::ConstDeviceSpan(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t xgboost::HostDeviceVector<int>::DevicePointer()
{
  return 0;
}

{
  return 0;
}

uint64_t xgboost::HostDeviceVector<int>::ConstDevicePointer()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<int>::HostPointer(uint64_t a1)
{
  return **(_QWORD **)a1;
}

{
  return **(_QWORD **)a1;
}

uint64_t xgboost::HostDeviceVector<int>::HostVector(uint64_t a1)
{
  return *(_QWORD *)a1;
}

{
  return *(_QWORD *)a1;
}

uint64_t **xgboost::HostDeviceVector<int>::HostSpan@<X0>(uint64_t **result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = **result;
  *a2 = ((*result)[1] - v2) >> 2;
  a2[1] = v2;
  return result;
}

{
  uint64_t v2;

  v2 = **result;
  *a2 = ((*result)[1] - v2) >> 2;
  a2[1] = v2;
  return result;
}

uint64_t **xgboost::HostDeviceVector<int>::ConstHostSpan@<X0>(uint64_t **result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = **result;
  *a2 = ((*result)[1] - v2) >> 2;
  a2[1] = v2;
  return result;
}

uint64_t xgboost::HostDeviceVector<int>::ConstHostPointer(uint64_t a1)
{
  return **(_QWORD **)a1;
}

uint64_t xgboost::HostDeviceVector<int>::ConstHostVector(uint64_t a1)
{
  return *(_QWORD *)a1;
}

_QWORD **xgboost::HostDeviceVector<int>::Fill(_QWORD **result, int a2)
{
  _DWORD *v2;
  uint64_t v3;
  unint64_t v4;

  v2 = (_DWORD *)**result;
  v3 = (*result)[1] - (_QWORD)v2;
  if (v3 >= 1)
  {
    v4 = ((unint64_t)v3 >> 2) + 1;
    do
    {
      *v2++ = a2;
      --v4;
    }
    while (v4 > 1);
  }
  return result;
}

void xgboost::HostDeviceVector<int>::Copy(void ***a1, const void ***a2)
{
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;

  v15 = ((_BYTE *)(*a1)[1] - (_BYTE *)**a1) >> 2;
  if (v15 != ((_BYTE *)(*a2)[1] - (_BYTE *)**a2) >> 2)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v16);
    if (v16)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/host_device_vector.cc");
      v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: ", 14);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Size() == other.Size()", 22);
      v8 = *(char *)(v16 + 23);
      v9 = v8 >= 0 ? v16 : *(_QWORD *)v16;
      v10 = v8 >= 0 ? *(unsigned __int8 *)(v16 + 23) : *(_QWORD *)(v16 + 8);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
      v12 = v16;
      v16 = 0;
      if (v12)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v16, v12);
    }
  }
  v13 = **a2;
  v14 = (*a2)[1];
  if (v14 != v13)
    memmove(**a1, v13, v14 - v13);
}

void sub_220EF713C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

void xgboost::HostDeviceVector<int>::Copy(void ***a1, uint64_t a2)
{
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v14 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2;
  v15 = ((_BYTE *)(*a1)[1] - (_BYTE *)**a1) >> 2;
  if (v15 != v14)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v16);
    if (v16)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/host_device_vector.cc");
      v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: ", 14);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Size() == other.size()", 22);
      v8 = *(char *)(v16 + 23);
      v9 = v8 >= 0 ? v16 : *(_QWORD *)v16;
      v10 = v8 >= 0 ? *(unsigned __int8 *)(v16 + 23) : *(_QWORD *)(v16 + 8);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
      v12 = v16;
      v16 = 0;
      if (v12)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v16, v12);
    }
  }
  v13 = *(_QWORD *)(a2 + 8);
  if (v13 != *(_QWORD *)a2)
    memmove(**a1, *(const void **)a2, v13 - *(_QWORD *)a2);
}

void sub_220EF727C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

void xgboost::HostDeviceVector<int>::Copy(void ***a1, void *__src, uint64_t a3)
{
  std::string *Entry;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v15 = ((_BYTE *)(*a1)[1] - (_BYTE *)**a1) >> 2;
  if (v15 != a3)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v16);
    if (v16)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/host_device_vector.cc");
      v7 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: ", 14);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Size() == other.size()", 22);
      v10 = *(char *)(v16 + 23);
      v11 = v10 >= 0 ? v16 : *(_QWORD *)v16;
      v12 = v10 >= 0 ? *(unsigned __int8 *)(v16 + 23) : *(_QWORD *)(v16 + 8);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
      v14 = v16;
      v16 = 0;
      if (v14)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v16, v14);
    }
  }
  if (a3)
    memmove(**a1, __src, 4 * a3);
}

void sub_220EF73BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

void xgboost::HostDeviceVector<int>::Extend(std::vector<int> **a1, const void ***a2)
{
  std::vector<int> *v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;

  v4 = *a1;
  v5 = (char *)v4->__end_ - (char *)v4->__begin_;
  std::vector<int>::resize(v4, (((_BYTE *)(*a2)[1] - (_BYTE *)**a2) >> 2) + (v5 >> 2));
  v6 = **a2;
  v7 = (*a2)[1];
  if (v7 != v6)
    memmove(&(*a1)->__begin_[v5 >> 2], v6, v7 - v6);
}

uint64_t xgboost::HostDeviceVector<int>::HostCanRead()
{
  return 1;
}

uint64_t xgboost::HostDeviceVector<int>::HostCanWrite()
{
  return 1;
}

uint64_t xgboost::HostDeviceVector<int>::DeviceCanRead()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<int>::DeviceCanWrite()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<int>::DeviceAccess()
{
  return 0;
}

void xgboost::HostDeviceVector<int>::Resize(std::vector<int> **a1, std::vector<int>::size_type a2, std::vector<int>::value_type a3)
{
  std::vector<int>::value_type __x;

  __x = a3;
  std::vector<int>::resize(*a1, a2, &__x);
}

_QWORD *xgboost::HostDeviceVector<unsigned char>::HostDeviceVector(_QWORD *a1, size_t a2, int a3)
{
  _QWORD *v6;
  _QWORD *v7;
  char *v8;

  *a1 = 0;
  v6 = (_QWORD *)operator new();
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = 0;
  if (a2)
  {
    std::vector<char>::__vallocate[abi:ne180100](v6, a2);
    v8 = (char *)v7[1];
    memset(v8, a3, a2);
    v7[1] = &v8[a2];
  }
  *a1 = v7;
  return a1;
}

{
  return __ZN7xgboost16HostDeviceVectorIhEC2Emhi(a1, a2, a3);
}

void sub_220EF7550(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  MEMORY[0x227667068](v1, 0x10C402FEFCB83);
  _Unwind_Resume(a1);
}

_QWORD *xgboost::HostDeviceVector<unsigned char>::HostDeviceVector(_QWORD *a1, const void *a2, size_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  char *v8;

  *a1 = 0;
  v6 = (_QWORD *)operator new();
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = 0;
  if (a3)
  {
    std::vector<char>::__vallocate[abi:ne180100](v6, a3);
    v8 = (char *)v7[1];
    memmove(v8, a2, a3);
    v7[1] = &v8[a3];
  }
  *a1 = v7;
  return a1;
}

{
  return __ZN7xgboost16HostDeviceVectorIhEC2ESt16initializer_listIhEi(a1, a2, a3);
}

void sub_220EF7618(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  MEMORY[0x227667068](v1, 0x10C402FEFCB83);
  _Unwind_Resume(a1);
}

_QWORD *xgboost::HostDeviceVector<unsigned char>::HostDeviceVector(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  const void *v5;
  size_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  void *__dst;
  uint64_t v14;

  *a1 = 0;
  v4 = (_QWORD *)operator new();
  __dst = 0;
  v14 = 0;
  v12 = 0;
  v5 = *(const void **)a2;
  v6 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v6)
  {
    std::vector<char>::__vallocate[abi:ne180100](&v12, v6);
    v7 = (char *)__dst;
    memmove(__dst, v5, v6);
    v8 = &v7[v6];
    v9 = v12;
    v10 = v14;
  }
  else
  {
    v10 = 0;
    v8 = 0;
    v9 = 0;
  }
  *v4 = v9;
  v4[1] = v8;
  v4[2] = v10;
  *a1 = v4;
  return a1;
}

{
  return __ZN7xgboost16HostDeviceVectorIhEC2ERKNSt3__16vectorIhNS2_9allocatorIhEEEEi(a1, a2);
}

void sub_220EF7708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x227667068](v11, 0x10C402FEFCB83);
  _Unwind_Resume(a1);
}

uint64_t *xgboost::HostDeviceVector<unsigned char>::~HostDeviceVector(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x227667068](v2, 0x10C402FEFCB83);
  }
  *a1 = 0;
  return a1;
}

{
  return __ZN7xgboost16HostDeviceVectorIhED2Ev(a1);
}

uint64_t *xgboost::HostDeviceVector<unsigned char>::HostDeviceVector(uint64_t *a1, _OWORD **a2)
{
  uint64_t v4;
  _QWORD *v5;

  v4 = operator new();
  v5 = *a2;
  *(_OWORD *)v4 = **a2;
  *(_QWORD *)(v4 + 16) = v5[2];
  *v5 = 0;
  v5[1] = 0;
  v5[2] = 0;
  *a1 = v4;
  return a1;
}

{
  uint64_t v4;
  _QWORD *v5;

  v4 = operator new();
  v5 = *a2;
  *(_OWORD *)v4 = **a2;
  *(_QWORD *)(v4 + 16) = v5[2];
  *v5 = 0;
  v5[1] = 0;
  v5[2] = 0;
  *a1 = v4;
  return a1;
}

uint64_t *xgboost::HostDeviceVector<unsigned char>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  if (a1 != a2)
  {
    v4 = operator new();
    v5 = (_QWORD *)*a2;
    *(_OWORD *)v4 = *(_OWORD *)*a2;
    *(_QWORD *)(v4 + 16) = v5[2];
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
    v6 = *a1;
    if (*a1)
    {
      v7 = *(void **)v6;
      if (*(_QWORD *)v6)
      {
        *(_QWORD *)(v6 + 8) = v7;
        operator delete(v7);
      }
      MEMORY[0x227667068](v6, 0x10C402FEFCB83);
    }
    *a1 = v4;
  }
  return a1;
}

BOOL xgboost::HostDeviceVector<unsigned char>::Empty(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 8) == **(_QWORD **)a1;
}

uint64_t xgboost::HostDeviceVector<unsigned char>::Size(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 8) - **(_QWORD **)a1;
}

uint64_t xgboost::HostDeviceVector<unsigned char>::DeviceIdx()
{
  return 0xFFFFFFFFLL;
}

void xgboost::HostDeviceVector<unsigned char>::DeviceSpan(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

{
  *a1 = 0;
  a1[1] = 0;
}

void xgboost::HostDeviceVector<unsigned char>::ConstDeviceSpan(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t xgboost::HostDeviceVector<unsigned char>::DevicePointer()
{
  return 0;
}

{
  return 0;
}

uint64_t xgboost::HostDeviceVector<unsigned char>::ConstDevicePointer()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<unsigned char>::HostPointer(uint64_t a1)
{
  return **(_QWORD **)a1;
}

{
  return **(_QWORD **)a1;
}

uint64_t xgboost::HostDeviceVector<unsigned char>::HostVector(uint64_t a1)
{
  return *(_QWORD *)a1;
}

{
  return *(_QWORD *)a1;
}

uint64_t **xgboost::HostDeviceVector<unsigned char>::HostSpan@<X0>(uint64_t **result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = **result;
  *a2 = (*result)[1] - v2;
  a2[1] = v2;
  return result;
}

{
  uint64_t v2;

  v2 = **result;
  *a2 = (*result)[1] - v2;
  a2[1] = v2;
  return result;
}

uint64_t **xgboost::HostDeviceVector<unsigned char>::ConstHostSpan@<X0>(uint64_t **result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = **result;
  *a2 = (*result)[1] - v2;
  a2[1] = v2;
  return result;
}

uint64_t xgboost::HostDeviceVector<unsigned char>::ConstHostPointer(uint64_t a1)
{
  return **(_QWORD **)a1;
}

uint64_t xgboost::HostDeviceVector<unsigned char>::ConstHostVector(uint64_t a1)
{
  return *(_QWORD *)a1;
}

_BYTE *xgboost::HostDeviceVector<unsigned char>::Fill(void ***a1, int a2)
{
  void **v2;
  _BYTE *result;
  int64_t v4;

  v2 = *a1;
  result = **a1;
  v4 = (_BYTE *)v2[1] - result;
  if (v4 >= 1)
    return memset(result, a2, v4);
  return result;
}

void xgboost::HostDeviceVector<unsigned char>::Copy(void ***a1, const void ***a2)
{
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  int64_t v15;
  uint64_t v16;

  v15 = (_BYTE *)(*a1)[1] - (_BYTE *)**a1;
  if (v15 != (_BYTE *)(*a2)[1] - (_BYTE *)**a2)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v16);
    if (v16)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/host_device_vector.cc");
      v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: ", 14);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Size() == other.Size()", 22);
      v8 = *(char *)(v16 + 23);
      v9 = v8 >= 0 ? v16 : *(_QWORD *)v16;
      v10 = v8 >= 0 ? *(unsigned __int8 *)(v16 + 23) : *(_QWORD *)(v16 + 8);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
      v12 = v16;
      v16 = 0;
      if (v12)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v16, v12);
    }
  }
  v13 = **a2;
  v14 = (*a2)[1];
  if (v14 != v13)
    memmove(**a1, v13, v14 - v13);
}

void sub_220EF7AF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

void xgboost::HostDeviceVector<unsigned char>::Copy(void ***a1, uint64_t a2)
{
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;

  v14 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  v15 = (_BYTE *)(*a1)[1] - (_BYTE *)**a1;
  if (v15 != v14)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v16);
    if (v16)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/host_device_vector.cc");
      v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: ", 14);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Size() == other.size()", 22);
      v8 = *(char *)(v16 + 23);
      v9 = v8 >= 0 ? v16 : *(_QWORD *)v16;
      v10 = v8 >= 0 ? *(unsigned __int8 *)(v16 + 23) : *(_QWORD *)(v16 + 8);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
      v12 = v16;
      v16 = 0;
      if (v12)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v16, v12);
    }
  }
  v13 = *(_QWORD *)(a2 + 8);
  if (v13 != *(_QWORD *)a2)
    memmove(**a1, *(const void **)a2, v13 - *(_QWORD *)a2);
}

void sub_220EF7C28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

void xgboost::HostDeviceVector<unsigned char>::Copy(void ***a1, void *__src, size_t __len)
{
  std::string *Entry;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;

  v15 = (_BYTE *)(*a1)[1] - (_BYTE *)**a1;
  if (v15 != __len)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v16);
    if (v16)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/host_device_vector.cc");
      v7 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: ", 14);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Size() == other.size()", 22);
      v10 = *(char *)(v16 + 23);
      v11 = v10 >= 0 ? v16 : *(_QWORD *)v16;
      v12 = v10 >= 0 ? *(unsigned __int8 *)(v16 + 23) : *(_QWORD *)(v16 + 8);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
      v14 = v16;
      v16 = 0;
      if (v14)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v16, v14);
    }
  }
  if (__len)
    memmove(**a1, __src, __len);
}

void sub_220EF7D64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

void xgboost::HostDeviceVector<unsigned char>::Extend(std::vector<char> **a1, const void ***a2)
{
  std::vector<char> *v4;
  unint64_t v5;
  const void **v6;
  _BYTE *v7;
  int64_t v8;
  _BYTE *v9;

  v4 = *a1;
  v5 = v4->__end_ - v4->__begin_;
  v6 = *a2;
  v7 = **a2;
  v8 = (_BYTE *)v6[1] - v7;
  if (v5 >= v8 + v5)
  {
    if (v5 > v8 + v5)
      v4->__end_ = &v4->__begin_[v8 + v5];
  }
  else
  {
    std::vector<char>::__append(v4, (_BYTE *)v6[1] - v7);
    v6 = *a2;
    v7 = **a2;
  }
  v9 = v6[1];
  if (v9 != v7)
    memmove(&(*a1)->__begin_[v5], v7, v9 - v7);
}

uint64_t xgboost::HostDeviceVector<unsigned char>::HostCanRead()
{
  return 1;
}

uint64_t xgboost::HostDeviceVector<unsigned char>::HostCanWrite()
{
  return 1;
}

uint64_t xgboost::HostDeviceVector<unsigned char>::DeviceCanRead()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<unsigned char>::DeviceCanWrite()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<unsigned char>::DeviceAccess()
{
  return 0;
}

void xgboost::HostDeviceVector<unsigned char>::Resize(_QWORD **a1, unint64_t a2, char a3)
{
  _QWORD *v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  char v7;

  v7 = a3;
  v3 = *a1;
  v4 = v3[1] - *v3;
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<unsigned char>::__append(v3, v6, &v7);
  }
  else if (!v5)
  {
    v3[1] = *v3 + a2;
  }
}

_QWORD *xgboost::HostDeviceVector<xgboost::FeatureType>::HostDeviceVector(_QWORD *a1, size_t a2, char a3)
{
  _QWORD *v6;
  char v8;

  *a1 = 0;
  v6 = (_QWORD *)operator new();
  v8 = a3;
  std::vector<xgboost::FeatureType>::vector(v6, a2, &v8);
  *a1 = v6;
  return a1;
}

{
  return __ZN7xgboost16HostDeviceVectorINS_11FeatureTypeEEC2EmS1_i(a1, a2, a3);
}

void sub_220EF7F10(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x80C40D6874129);
  _Unwind_Resume(a1);
}

_QWORD *xgboost::HostDeviceVector<xgboost::FeatureType>::HostDeviceVector(_QWORD *a1, const void *a2, size_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  char *v8;

  *a1 = 0;
  v6 = (_QWORD *)operator new();
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = 0;
  if (a3)
  {
    std::vector<xgboost::FeatureType>::__vallocate[abi:ne180100](v6, a3);
    v8 = (char *)v7[1];
    memmove(v8, a2, a3);
    v7[1] = &v8[a3];
  }
  *a1 = v7;
  return a1;
}

{
  return __ZN7xgboost16HostDeviceVectorINS_11FeatureTypeEEC2ESt16initializer_listIS1_Ei(a1, a2, a3);
}

void sub_220EF7FC8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  MEMORY[0x227667068](v1, 0x80C40D6874129);
  _Unwind_Resume(a1);
}

uint64_t *xgboost::HostDeviceVector<xgboost::FeatureType>::HostDeviceVector(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  *a1 = 0;
  v4 = operator new();
  v7 = 0;
  v6 = 0uLL;
  std::vector<xgboost::FeatureType>::__init_with_size[abi:ne180100]<xgboost::FeatureType*,xgboost::FeatureType*>(&v6, *(const void **)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  *(_OWORD *)v4 = v6;
  *(_QWORD *)(v4 + 16) = v7;
  *a1 = v4;
  return a1;
}

{
  return __ZN7xgboost16HostDeviceVectorINS_11FeatureTypeEEC2ERKNSt3__16vectorIS1_NS3_9allocatorIS1_EEEEi(a1, a2);
}

void sub_220EF8080(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x80C40D6874129);
  _Unwind_Resume(a1);
}

uint64_t *xgboost::HostDeviceVector<xgboost::FeatureType>::~HostDeviceVector(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x227667068](v2, 0x80C40D6874129);
  }
  *a1 = 0;
  return a1;
}

{
  return __ZN7xgboost16HostDeviceVectorINS_11FeatureTypeEED2Ev(a1);
}

uint64_t *xgboost::HostDeviceVector<xgboost::FeatureType>::HostDeviceVector(uint64_t *a1, _OWORD **a2)
{
  uint64_t v4;
  _QWORD *v5;

  v4 = operator new();
  v5 = *a2;
  *(_OWORD *)v4 = **a2;
  *(_QWORD *)(v4 + 16) = v5[2];
  *v5 = 0;
  v5[1] = 0;
  v5[2] = 0;
  *a1 = v4;
  return a1;
}

{
  uint64_t v4;
  _QWORD *v5;

  v4 = operator new();
  v5 = *a2;
  *(_OWORD *)v4 = **a2;
  *(_QWORD *)(v4 + 16) = v5[2];
  *v5 = 0;
  v5[1] = 0;
  v5[2] = 0;
  *a1 = v4;
  return a1;
}

uint64_t *xgboost::HostDeviceVector<xgboost::FeatureType>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  if (a1 != a2)
  {
    v4 = operator new();
    v5 = (_QWORD *)*a2;
    *(_OWORD *)v4 = *(_OWORD *)*a2;
    *(_QWORD *)(v4 + 16) = v5[2];
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
    v6 = *a1;
    if (*a1)
    {
      v7 = *(void **)v6;
      if (*(_QWORD *)v6)
      {
        *(_QWORD *)(v6 + 8) = v7;
        operator delete(v7);
      }
      MEMORY[0x227667068](v6, 0x80C40D6874129);
    }
    *a1 = v4;
  }
  return a1;
}

{
  return __ZN7xgboost16HostDeviceVectorINS_11FeatureTypeEEaSEOS2_(a1, a2);
}

BOOL xgboost::HostDeviceVector<xgboost::FeatureType>::Empty(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 8) == **(_QWORD **)a1;
}

uint64_t xgboost::HostDeviceVector<xgboost::FeatureType>::Size(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 8) - **(_QWORD **)a1;
}

uint64_t xgboost::HostDeviceVector<xgboost::FeatureType>::DeviceIdx()
{
  return 0xFFFFFFFFLL;
}

void xgboost::HostDeviceVector<xgboost::FeatureType>::DeviceSpan(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

{
  *a1 = 0;
  a1[1] = 0;
}

void xgboost::HostDeviceVector<xgboost::FeatureType>::ConstDeviceSpan(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t xgboost::HostDeviceVector<xgboost::FeatureType>::DevicePointer()
{
  return 0;
}

{
  return 0;
}

uint64_t xgboost::HostDeviceVector<xgboost::FeatureType>::ConstDevicePointer()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<xgboost::FeatureType>::HostPointer(uint64_t a1)
{
  return **(_QWORD **)a1;
}

{
  return **(_QWORD **)a1;
}

uint64_t xgboost::HostDeviceVector<xgboost::FeatureType>::HostVector(uint64_t a1)
{
  return *(_QWORD *)a1;
}

{
  return *(_QWORD *)a1;
}

uint64_t **xgboost::HostDeviceVector<xgboost::FeatureType>::HostSpan@<X0>(uint64_t **result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = **result;
  *a2 = (*result)[1] - v2;
  a2[1] = v2;
  return result;
}

{
  uint64_t v2;

  v2 = **result;
  *a2 = (*result)[1] - v2;
  a2[1] = v2;
  return result;
}

uint64_t **xgboost::HostDeviceVector<xgboost::FeatureType>::ConstHostSpan@<X0>(uint64_t **result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = **result;
  *a2 = (*result)[1] - v2;
  a2[1] = v2;
  return result;
}

uint64_t xgboost::HostDeviceVector<xgboost::FeatureType>::ConstHostPointer(uint64_t a1)
{
  return **(_QWORD **)a1;
}

uint64_t xgboost::HostDeviceVector<xgboost::FeatureType>::ConstHostVector(uint64_t a1)
{
  return *(_QWORD *)a1;
}

_BYTE *xgboost::HostDeviceVector<xgboost::FeatureType>::Fill(void ***a1, int a2)
{
  void **v2;
  _BYTE *result;
  int64_t v4;

  v2 = *a1;
  result = **a1;
  v4 = (_BYTE *)v2[1] - result;
  if (v4 >= 1)
    return memset(result, a2, v4);
  return result;
}

void xgboost::HostDeviceVector<xgboost::FeatureType>::Copy(void ***a1, const void ***a2)
{
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  int64_t v15;
  uint64_t v16;

  v15 = (_BYTE *)(*a1)[1] - (_BYTE *)**a1;
  if (v15 != (_BYTE *)(*a2)[1] - (_BYTE *)**a2)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v16);
    if (v16)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/host_device_vector.cc");
      v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: ", 14);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Size() == other.Size()", 22);
      v8 = *(char *)(v16 + 23);
      v9 = v8 >= 0 ? v16 : *(_QWORD *)v16;
      v10 = v8 >= 0 ? *(unsigned __int8 *)(v16 + 23) : *(_QWORD *)(v16 + 8);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
      v12 = v16;
      v16 = 0;
      if (v12)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v16, v12);
    }
  }
  v13 = **a2;
  v14 = (*a2)[1];
  if (v14 != v13)
    memmove(**a1, v13, v14 - v13);
}

{
  __ZN7xgboost16HostDeviceVectorINS_11FeatureTypeEE4CopyERKS2_(a1, a2);
}

void sub_220EF8458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

void xgboost::HostDeviceVector<xgboost::FeatureType>::Copy(void ***a1, uint64_t a2)
{
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;

  v14 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  v15 = (_BYTE *)(*a1)[1] - (_BYTE *)**a1;
  if (v15 != v14)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v16);
    if (v16)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/host_device_vector.cc");
      v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: ", 14);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Size() == other.size()", 22);
      v8 = *(char *)(v16 + 23);
      v9 = v8 >= 0 ? v16 : *(_QWORD *)v16;
      v10 = v8 >= 0 ? *(unsigned __int8 *)(v16 + 23) : *(_QWORD *)(v16 + 8);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
      v12 = v16;
      v16 = 0;
      if (v12)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v16, v12);
    }
  }
  v13 = *(_QWORD *)(a2 + 8);
  if (v13 != *(_QWORD *)a2)
    memmove(**a1, *(const void **)a2, v13 - *(_QWORD *)a2);
}

void sub_220EF8590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

void xgboost::HostDeviceVector<xgboost::FeatureType>::Copy(void ***a1, void *__src, size_t __len)
{
  std::string *Entry;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;

  v15 = (_BYTE *)(*a1)[1] - (_BYTE *)**a1;
  if (v15 != __len)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v16);
    if (v16)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/host_device_vector.cc");
      v7 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: ", 14);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Size() == other.size()", 22);
      v10 = *(char *)(v16 + 23);
      v11 = v10 >= 0 ? v16 : *(_QWORD *)v16;
      v12 = v10 >= 0 ? *(unsigned __int8 *)(v16 + 23) : *(_QWORD *)(v16 + 8);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
      v14 = v16;
      v16 = 0;
      if (v14)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v16, v14);
    }
  }
  if (__len)
    memmove(**a1, __src, __len);
}

void sub_220EF86CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

void xgboost::HostDeviceVector<xgboost::FeatureType>::Extend(void ***a1, const void ***a2)
{
  void **v4;
  unint64_t v5;
  char *v6;
  char *v7;
  const void **v8;
  _BYTE *v9;
  _BYTE *v10;
  size_t v11;
  unint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  size_t v15;
  char *v16;
  char *v17;
  char *v18;
  char v19;
  _BYTE *v20;
  char *v21;

  v4 = *a1;
  v5 = (unint64_t)**a1;
  v6 = (char *)(*a1)[1];
  v7 = &v6[-v5];
  v8 = *a2;
  v9 = **a2;
  v10 = v8[1];
  v11 = v10 - v9;
  v12 = (unint64_t)&v6[v10 - v9 - v5];
  if ((unint64_t)&v6[-v5] >= v12)
  {
    if ((unint64_t)&v6[-v5] > v12)
      v4[1] = &v6[v10 - v9];
  }
  else
  {
    v13 = v4[2];
    if (v13 - v6 >= v11)
    {
      if (v10 != v9)
      {
        bzero((*a1)[1], v10 - v9);
        v6 += v11;
      }
      v4[1] = v6;
    }
    else
    {
      if ((v12 & 0x8000000000000000) != 0)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v14 = (unint64_t)&v13[-v5];
      if (2 * v14 > v12)
        v12 = 2 * v14;
      if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
        v15 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v15 = v12;
      v16 = (char *)operator new(v15);
      v17 = &v16[v15];
      v21 = &v7[(_QWORD)v16 + v11];
      bzero(&v7[(_QWORD)v16], v11);
      if (v6 == (char *)v5)
      {
        v16 = &v7[(_QWORD)v16];
      }
      else
      {
        v18 = &v6[~v5];
        do
        {
          v19 = *--v6;
          (v18--)[(_QWORD)v16] = v19;
        }
        while (v6 != (char *)v5);
      }
      *v4 = v16;
      v4[1] = v21;
      v4[2] = v17;
      if (v5)
        operator delete((void *)v5);
    }
    v8 = *a2;
    v9 = **a2;
  }
  v20 = v8[1];
  if (v20 != v9)
    memmove(&v7[(_QWORD)**a1], v9, v20 - v9);
}

uint64_t xgboost::HostDeviceVector<xgboost::FeatureType>::HostCanRead()
{
  return 1;
}

uint64_t xgboost::HostDeviceVector<xgboost::FeatureType>::HostCanWrite()
{
  return 1;
}

uint64_t xgboost::HostDeviceVector<xgboost::FeatureType>::DeviceCanRead()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<xgboost::FeatureType>::DeviceCanWrite()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<xgboost::FeatureType>::DeviceAccess()
{
  return 0;
}

void xgboost::HostDeviceVector<xgboost::FeatureType>::Resize(unint64_t **a1, unint64_t a2, char a3)
{
  unint64_t *v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  char v7;

  v7 = a3;
  v3 = *a1;
  v4 = v3[1] - *v3;
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<xgboost::FeatureType>::__append(v3, v6, &v7);
  }
  else if (!v5)
  {
    v3[1] = *v3 + a2;
  }
}

{
  __ZN7xgboost16HostDeviceVectorINS_11FeatureTypeEE6ResizeEmS1_(a1, a2, a3);
}

_QWORD *xgboost::HostDeviceVector<xgboost::Entry>::HostDeviceVector(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v8;

  *a1 = 0;
  v6 = (_QWORD *)operator new();
  v8 = a3;
  std::vector<xgboost::Entry>::vector(v6, a2, &v8);
  *a1 = v6;
  return a1;
}

{
  return __ZN7xgboost16HostDeviceVectorINS_5EntryEEC2EmS1_i(a1, a2, a3);
}

void sub_220EF896C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x20C40960023A9);
  _Unwind_Resume(a1);
}

_QWORD *xgboost::HostDeviceVector<xgboost::Entry>::HostDeviceVector(_QWORD *a1, const void *a2, unint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  char *v8;

  *a1 = 0;
  v6 = (_QWORD *)operator new();
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = 0;
  if (a3)
  {
    std::vector<xgboost::Json>::__vallocate[abi:ne180100](v6, a3);
    v8 = (char *)v7[1];
    memmove(v8, a2, 8 * a3);
    v7[1] = &v8[8 * a3];
  }
  *a1 = v7;
  return a1;
}

{
  return __ZN7xgboost16HostDeviceVectorINS_5EntryEEC2ESt16initializer_listIS1_Ei(a1, a2, a3);
}

void sub_220EF8A24(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  MEMORY[0x227667068](v1, 0x20C40960023A9);
  _Unwind_Resume(a1);
}

_QWORD *xgboost::HostDeviceVector<xgboost::Entry>::HostDeviceVector(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  void *__dst;
  uint64_t v14;

  *a1 = 0;
  v4 = (_QWORD *)operator new();
  __dst = 0;
  v14 = 0;
  v12 = 0;
  v5 = *(const void **)a2;
  v6 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v6)
  {
    std::vector<xgboost::Json>::__vallocate[abi:ne180100](&v12, v6 >> 3);
    v7 = (char *)__dst;
    memmove(__dst, v5, v6);
    v8 = &v7[8 * (v6 >> 3)];
    v9 = v12;
    v10 = v14;
  }
  else
  {
    v10 = 0;
    v8 = 0;
    v9 = 0;
  }
  *v4 = v9;
  v4[1] = v8;
  v4[2] = v10;
  *a1 = v4;
  return a1;
}

{
  return __ZN7xgboost16HostDeviceVectorINS_5EntryEEC2ERKNSt3__16vectorIS1_NS3_9allocatorIS1_EEEEi(a1, a2);
}

void sub_220EF8B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x227667068](v11, 0x20C40960023A9);
  _Unwind_Resume(a1);
}

uint64_t *xgboost::HostDeviceVector<xgboost::Entry>::~HostDeviceVector(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x227667068](v2, 0x20C40960023A9);
  }
  *a1 = 0;
  return a1;
}

{
  return __ZN7xgboost16HostDeviceVectorINS_5EntryEED2Ev(a1);
}

uint64_t *xgboost::HostDeviceVector<xgboost::Entry>::HostDeviceVector(uint64_t *a1, _OWORD **a2)
{
  uint64_t v4;
  _QWORD *v5;

  v4 = operator new();
  v5 = *a2;
  *(_OWORD *)v4 = **a2;
  *(_QWORD *)(v4 + 16) = v5[2];
  *v5 = 0;
  v5[1] = 0;
  v5[2] = 0;
  *a1 = v4;
  return a1;
}

{
  uint64_t v4;
  _QWORD *v5;

  v4 = operator new();
  v5 = *a2;
  *(_OWORD *)v4 = **a2;
  *(_QWORD *)(v4 + 16) = v5[2];
  *v5 = 0;
  v5[1] = 0;
  v5[2] = 0;
  *a1 = v4;
  return a1;
}

uint64_t *xgboost::HostDeviceVector<xgboost::Entry>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  if (a1 != a2)
  {
    v4 = operator new();
    v5 = (_QWORD *)*a2;
    *(_OWORD *)v4 = *(_OWORD *)*a2;
    *(_QWORD *)(v4 + 16) = v5[2];
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
    v6 = *a1;
    if (*a1)
    {
      v7 = *(void **)v6;
      if (*(_QWORD *)v6)
      {
        *(_QWORD *)(v6 + 8) = v7;
        operator delete(v7);
      }
      MEMORY[0x227667068](v6, 0x20C40960023A9);
    }
    *a1 = v4;
  }
  return a1;
}

BOOL xgboost::HostDeviceVector<xgboost::Entry>::Empty(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 8) == **(_QWORD **)a1;
}

uint64_t xgboost::HostDeviceVector<xgboost::Entry>::Size(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 8) - **(_QWORD **)a1) >> 3;
}

uint64_t xgboost::HostDeviceVector<xgboost::Entry>::DeviceIdx()
{
  return 0xFFFFFFFFLL;
}

void xgboost::HostDeviceVector<xgboost::Entry>::DeviceSpan(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

{
  *a1 = 0;
  a1[1] = 0;
}

void xgboost::HostDeviceVector<xgboost::Entry>::ConstDeviceSpan(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t xgboost::HostDeviceVector<xgboost::Entry>::DevicePointer()
{
  return 0;
}

{
  return 0;
}

uint64_t xgboost::HostDeviceVector<xgboost::Entry>::ConstDevicePointer()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<xgboost::Entry>::HostPointer(uint64_t a1)
{
  return **(_QWORD **)a1;
}

{
  return **(_QWORD **)a1;
}

uint64_t xgboost::HostDeviceVector<xgboost::Entry>::HostVector(uint64_t a1)
{
  return *(_QWORD *)a1;
}

{
  return *(_QWORD *)a1;
}

uint64_t **xgboost::HostDeviceVector<xgboost::Entry>::HostSpan@<X0>(uint64_t **result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = **result;
  *a2 = ((*result)[1] - v2) >> 3;
  a2[1] = v2;
  return result;
}

{
  uint64_t v2;

  v2 = **result;
  *a2 = ((*result)[1] - v2) >> 3;
  a2[1] = v2;
  return result;
}

uint64_t **xgboost::HostDeviceVector<xgboost::Entry>::ConstHostSpan@<X0>(uint64_t **result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = **result;
  *a2 = ((*result)[1] - v2) >> 3;
  a2[1] = v2;
  return result;
}

uint64_t xgboost::HostDeviceVector<xgboost::Entry>::ConstHostPointer(uint64_t a1)
{
  return **(_QWORD **)a1;
}

uint64_t xgboost::HostDeviceVector<xgboost::Entry>::ConstHostVector(uint64_t a1)
{
  return *(_QWORD *)a1;
}

_QWORD **xgboost::HostDeviceVector<xgboost::Entry>::Fill(_QWORD **result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;

  v2 = (_QWORD *)**result;
  v3 = (*result)[1] - (_QWORD)v2;
  if (v3 >= 1)
  {
    v4 = ((unint64_t)v3 >> 3) + 1;
    do
    {
      *v2++ = a2;
      --v4;
    }
    while (v4 > 1);
  }
  return result;
}

void xgboost::HostDeviceVector<xgboost::Entry>::Copy(void ***a1, const void ***a2)
{
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;

  v15 = ((_BYTE *)(*a1)[1] - (_BYTE *)**a1) >> 3;
  if (v15 != ((_BYTE *)(*a2)[1] - (_BYTE *)**a2) >> 3)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v16);
    if (v16)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/host_device_vector.cc");
      v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: ", 14);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Size() == other.Size()", 22);
      v8 = *(char *)(v16 + 23);
      v9 = v8 >= 0 ? v16 : *(_QWORD *)v16;
      v10 = v8 >= 0 ? *(unsigned __int8 *)(v16 + 23) : *(_QWORD *)(v16 + 8);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
      v12 = v16;
      v16 = 0;
      if (v12)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v16, v12);
    }
  }
  v13 = **a2;
  v14 = (*a2)[1];
  if (v14 != v13)
    memmove(**a1, v13, v14 - v13);
}

void sub_220EF8F2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

void xgboost::HostDeviceVector<xgboost::Entry>::Copy(void ***a1, uint64_t a2)
{
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v14 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3;
  v15 = ((_BYTE *)(*a1)[1] - (_BYTE *)**a1) >> 3;
  if (v15 != v14)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v16);
    if (v16)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/host_device_vector.cc");
      v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: ", 14);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Size() == other.size()", 22);
      v8 = *(char *)(v16 + 23);
      v9 = v8 >= 0 ? v16 : *(_QWORD *)v16;
      v10 = v8 >= 0 ? *(unsigned __int8 *)(v16 + 23) : *(_QWORD *)(v16 + 8);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
      v12 = v16;
      v16 = 0;
      if (v12)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v16, v12);
    }
  }
  v13 = *(_QWORD *)(a2 + 8);
  if (v13 != *(_QWORD *)a2)
    memmove(**a1, *(const void **)a2, v13 - *(_QWORD *)a2);
}

void sub_220EF906C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

void xgboost::HostDeviceVector<xgboost::Entry>::Copy(void ***a1, void *__src, uint64_t a3)
{
  std::string *Entry;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v15 = ((_BYTE *)(*a1)[1] - (_BYTE *)**a1) >> 3;
  if (v15 != a3)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v16);
    if (v16)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/host_device_vector.cc");
      v7 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: ", 14);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Size() == other.size()", 22);
      v10 = *(char *)(v16 + 23);
      v11 = v10 >= 0 ? v16 : *(_QWORD *)v16;
      v12 = v10 >= 0 ? *(unsigned __int8 *)(v16 + 23) : *(_QWORD *)(v16 + 8);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
      v14 = v16;
      v16 = 0;
      if (v14)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v16, v14);
    }
  }
  if (a3)
    memmove(**a1, __src, 8 * a3);
}

void sub_220EF91AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

void xgboost::HostDeviceVector<xgboost::Entry>::Extend(_QWORD **a1, const void ***a2)
{
  _QWORD *v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;

  v4 = *a1;
  v5 = v4[1] - *v4;
  std::vector<xgboost::Entry>::resize((uint64_t)v4, (((_BYTE *)(*a2)[1] - (_BYTE *)**a2) >> 3) + (v5 >> 3));
  v6 = **a2;
  v7 = (*a2)[1];
  if (v7 != v6)
    memmove((void *)(**a1 + 8 * (v5 >> 3)), v6, v7 - v6);
}

uint64_t xgboost::HostDeviceVector<xgboost::Entry>::HostCanRead()
{
  return 1;
}

uint64_t xgboost::HostDeviceVector<xgboost::Entry>::HostCanWrite()
{
  return 1;
}

uint64_t xgboost::HostDeviceVector<xgboost::Entry>::DeviceCanRead()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<xgboost::Entry>::DeviceCanWrite()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<xgboost::Entry>::DeviceAccess()
{
  return 0;
}

void xgboost::HostDeviceVector<xgboost::Entry>::Resize(void ***a1, unint64_t a2, uint64_t a3)
{
  void **v4;
  char *v5;
  _BYTE *v6;
  unint64_t v7;
  _BYTE *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;

  v4 = *a1;
  v6 = **a1;
  v5 = (char *)(*a1)[1];
  v7 = (v5 - v6) >> 3;
  if (a2 <= v7)
  {
    if (a2 < v7)
      v4[1] = &v6[8 * a2];
  }
  else
  {
    v9 = v4[2];
    if (a2 - v7 <= (v9 - v5) >> 3)
    {
      v23 = &v5[8 * (a2 - v7)];
      v24 = 8 * a2 - 8 * v7;
      do
      {
        *(_QWORD *)v5 = a3;
        v5 += 8;
        v24 -= 8;
      }
      while (v24);
      v4[1] = v23;
    }
    else
    {
      if (a2 >> 61)
        std::vector<xgboost::Json>::__throw_length_error[abi:ne180100]();
      v10 = v9 - v6;
      v11 = (v9 - v6) >> 2;
      if (v11 <= a2)
        v11 = a2;
      if (v10 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(v4 + 2), v12);
      v15 = &v13[8 * v7];
      v16 = &v13[8 * a2];
      v17 = 8 * a2 - 8 * v7;
      v18 = v15;
      do
      {
        *(_QWORD *)v18 = a3;
        v18 += 8;
        v17 -= 8;
      }
      while (v17);
      v19 = &v13[8 * v14];
      v21 = (char *)*v4;
      v20 = (char *)v4[1];
      if (v20 != *v4)
      {
        do
        {
          v22 = *((_QWORD *)v20 - 1);
          v20 -= 8;
          *((_QWORD *)v15 - 1) = v22;
          v15 -= 8;
        }
        while (v20 != v21);
        v20 = (char *)*v4;
      }
      *v4 = v15;
      v4[1] = v16;
      v4[2] = v19;
      if (v20)
        operator delete(v20);
    }
  }
}

_QWORD *xgboost::HostDeviceVector<unsigned long long>::HostDeviceVector(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  *a1 = 0;
  v6 = (_QWORD *)operator new();
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = 0;
  if (a2)
  {
    std::vector<void *>::__vallocate[abi:ne180100](v6, a2);
    v8 = (_QWORD *)v7[1];
    v9 = &v8[a2];
    v10 = 8 * a2;
    do
    {
      *v8++ = a3;
      v10 -= 8;
    }
    while (v10);
    v7[1] = v9;
  }
  *a1 = v7;
  return a1;
}

{
  return __ZN7xgboost16HostDeviceVectorIyEC2Emyi(a1, a2, a3);
}

void sub_220EF942C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  MEMORY[0x227667068](v1, 0x10C402FEFCB83);
  _Unwind_Resume(a1);
}

_QWORD *xgboost::HostDeviceVector<unsigned long long>::HostDeviceVector(_QWORD *a1, const void *a2, unint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  char *v8;

  *a1 = 0;
  v6 = (_QWORD *)operator new();
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = 0;
  if (a3)
  {
    std::vector<void *>::__vallocate[abi:ne180100](v6, a3);
    v8 = (char *)v7[1];
    memmove(v8, a2, 8 * a3);
    v7[1] = &v8[8 * a3];
  }
  *a1 = v7;
  return a1;
}

{
  return __ZN7xgboost16HostDeviceVectorIyEC2ESt16initializer_listIyEi(a1, a2, a3);
}

void sub_220EF94F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  MEMORY[0x227667068](v1, 0x10C402FEFCB83);
  _Unwind_Resume(a1);
}

uint64_t *xgboost::HostDeviceVector<unsigned long long>::HostDeviceVector(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  *a1 = 0;
  v4 = operator new();
  v7 = 0;
  v6 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v6, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  *(_OWORD *)v4 = v6;
  *(_QWORD *)(v4 + 16) = v7;
  *a1 = v4;
  return a1;
}

{
  return __ZN7xgboost16HostDeviceVectorIyEC2ERKNSt3__16vectorIyNS2_9allocatorIyEEEEi(a1, a2);
}

void sub_220EF95B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10C402FEFCB83);
  _Unwind_Resume(a1);
}

uint64_t *xgboost::HostDeviceVector<unsigned long long>::~HostDeviceVector(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x227667068](v2, 0x10C402FEFCB83);
  }
  *a1 = 0;
  return a1;
}

{
  return __ZN7xgboost16HostDeviceVectorIyED2Ev(a1);
}

uint64_t *xgboost::HostDeviceVector<unsigned long long>::HostDeviceVector(uint64_t *a1, _OWORD **a2)
{
  uint64_t v4;
  _QWORD *v5;

  v4 = operator new();
  v5 = *a2;
  *(_OWORD *)v4 = **a2;
  *(_QWORD *)(v4 + 16) = v5[2];
  *v5 = 0;
  v5[1] = 0;
  v5[2] = 0;
  *a1 = v4;
  return a1;
}

{
  uint64_t v4;
  _QWORD *v5;

  v4 = operator new();
  v5 = *a2;
  *(_OWORD *)v4 = **a2;
  *(_QWORD *)(v4 + 16) = v5[2];
  *v5 = 0;
  v5[1] = 0;
  v5[2] = 0;
  *a1 = v4;
  return a1;
}

uint64_t *xgboost::HostDeviceVector<unsigned long long>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  if (a1 != a2)
  {
    v4 = operator new();
    v5 = (_QWORD *)*a2;
    *(_OWORD *)v4 = *(_OWORD *)*a2;
    *(_QWORD *)(v4 + 16) = v5[2];
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
    v6 = *a1;
    if (*a1)
    {
      v7 = *(void **)v6;
      if (*(_QWORD *)v6)
      {
        *(_QWORD *)(v6 + 8) = v7;
        operator delete(v7);
      }
      MEMORY[0x227667068](v6, 0x10C402FEFCB83);
    }
    *a1 = v4;
  }
  return a1;
}

BOOL xgboost::HostDeviceVector<unsigned long long>::Empty(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 8) == **(_QWORD **)a1;
}

uint64_t xgboost::HostDeviceVector<unsigned long long>::Size(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 8) - **(_QWORD **)a1) >> 3;
}

uint64_t xgboost::HostDeviceVector<unsigned long long>::DeviceIdx()
{
  return 0xFFFFFFFFLL;
}

void xgboost::HostDeviceVector<unsigned long long>::DeviceSpan(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

{
  *a1 = 0;
  a1[1] = 0;
}

void xgboost::HostDeviceVector<unsigned long long>::ConstDeviceSpan(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t xgboost::HostDeviceVector<unsigned long long>::DevicePointer()
{
  return 0;
}

{
  return 0;
}

uint64_t xgboost::HostDeviceVector<unsigned long long>::ConstDevicePointer()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<unsigned long long>::HostPointer(uint64_t a1)
{
  return **(_QWORD **)a1;
}

{
  return **(_QWORD **)a1;
}

uint64_t xgboost::HostDeviceVector<unsigned long long>::HostVector(uint64_t a1)
{
  return *(_QWORD *)a1;
}

{
  return *(_QWORD *)a1;
}

uint64_t **xgboost::HostDeviceVector<unsigned long long>::HostSpan@<X0>(uint64_t **result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = **result;
  *a2 = ((*result)[1] - v2) >> 3;
  a2[1] = v2;
  return result;
}

{
  uint64_t v2;

  v2 = **result;
  *a2 = ((*result)[1] - v2) >> 3;
  a2[1] = v2;
  return result;
}

uint64_t **xgboost::HostDeviceVector<unsigned long long>::ConstHostSpan@<X0>(uint64_t **result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = **result;
  *a2 = ((*result)[1] - v2) >> 3;
  a2[1] = v2;
  return result;
}

uint64_t xgboost::HostDeviceVector<unsigned long long>::ConstHostPointer(uint64_t a1)
{
  return **(_QWORD **)a1;
}

uint64_t xgboost::HostDeviceVector<unsigned long long>::ConstHostVector(uint64_t a1)
{
  return *(_QWORD *)a1;
}

_QWORD **xgboost::HostDeviceVector<unsigned long long>::Fill(_QWORD **result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;

  v2 = (_QWORD *)**result;
  v3 = (*result)[1] - (_QWORD)v2;
  if (v3 >= 1)
  {
    v4 = ((unint64_t)v3 >> 3) + 1;
    do
    {
      *v2++ = a2;
      --v4;
    }
    while (v4 > 1);
  }
  return result;
}

void xgboost::HostDeviceVector<unsigned long long>::Copy(void ***a1, const void ***a2)
{
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;

  v15 = ((_BYTE *)(*a1)[1] - (_BYTE *)**a1) >> 3;
  if (v15 != ((_BYTE *)(*a2)[1] - (_BYTE *)**a2) >> 3)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v16);
    if (v16)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/host_device_vector.cc");
      v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: ", 14);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Size() == other.Size()", 22);
      v8 = *(char *)(v16 + 23);
      v9 = v8 >= 0 ? v16 : *(_QWORD *)v16;
      v10 = v8 >= 0 ? *(unsigned __int8 *)(v16 + 23) : *(_QWORD *)(v16 + 8);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
      v12 = v16;
      v16 = 0;
      if (v12)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v16, v12);
    }
  }
  v13 = **a2;
  v14 = (*a2)[1];
  if (v14 != v13)
    memmove(**a1, v13, v14 - v13);
}

void sub_220EF99B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

void xgboost::HostDeviceVector<unsigned long long>::Copy(void ***a1, uint64_t a2)
{
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v14 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3;
  v15 = ((_BYTE *)(*a1)[1] - (_BYTE *)**a1) >> 3;
  if (v15 != v14)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v16);
    if (v16)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/host_device_vector.cc");
      v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: ", 14);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Size() == other.size()", 22);
      v8 = *(char *)(v16 + 23);
      v9 = v8 >= 0 ? v16 : *(_QWORD *)v16;
      v10 = v8 >= 0 ? *(unsigned __int8 *)(v16 + 23) : *(_QWORD *)(v16 + 8);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
      v12 = v16;
      v16 = 0;
      if (v12)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v16, v12);
    }
  }
  v13 = *(_QWORD *)(a2 + 8);
  if (v13 != *(_QWORD *)a2)
    memmove(**a1, *(const void **)a2, v13 - *(_QWORD *)a2);
}

void sub_220EF9AF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

void xgboost::HostDeviceVector<unsigned long long>::Copy(void ***a1, void *__src, uint64_t a3)
{
  std::string *Entry;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v15 = ((_BYTE *)(*a1)[1] - (_BYTE *)**a1) >> 3;
  if (v15 != a3)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v16);
    if (v16)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/host_device_vector.cc");
      v7 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: ", 14);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Size() == other.size()", 22);
      v10 = *(char *)(v16 + 23);
      v11 = v10 >= 0 ? v16 : *(_QWORD *)v16;
      v12 = v10 >= 0 ? *(unsigned __int8 *)(v16 + 23) : *(_QWORD *)(v16 + 8);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
      v14 = v16;
      v16 = 0;
      if (v14)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v16, v14);
    }
  }
  if (a3)
    memmove(**a1, __src, 8 * a3);
}

void sub_220EF9C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

void xgboost::HostDeviceVector<unsigned long long>::Extend(_QWORD **a1, const void ***a2)
{
  _QWORD *v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;

  v4 = *a1;
  v5 = v4[1] - *v4;
  std::vector<unsigned long>::resize((uint64_t)v4, (((_BYTE *)(*a2)[1] - (_BYTE *)**a2) >> 3) + (v5 >> 3));
  v6 = **a2;
  v7 = (*a2)[1];
  if (v7 != v6)
    memmove((void *)(**a1 + 8 * (v5 >> 3)), v6, v7 - v6);
}

uint64_t xgboost::HostDeviceVector<unsigned long long>::HostCanRead()
{
  return 1;
}

uint64_t xgboost::HostDeviceVector<unsigned long long>::HostCanWrite()
{
  return 1;
}

uint64_t xgboost::HostDeviceVector<unsigned long long>::DeviceCanRead()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<unsigned long long>::DeviceCanWrite()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<unsigned long long>::DeviceAccess()
{
  return 0;
}

void xgboost::HostDeviceVector<unsigned long long>::Resize(void ***a1, unint64_t a2, uint64_t a3)
{
  void **v4;
  char *v5;
  _BYTE *v6;
  unint64_t v7;
  _BYTE *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *i;
  uint64_t v22;
  char *v23;
  uint64_t v24;

  v4 = *a1;
  v6 = **a1;
  v5 = (char *)(*a1)[1];
  v7 = (v5 - v6) >> 3;
  if (a2 <= v7)
  {
    if (a2 < v7)
      v4[1] = &v6[8 * a2];
  }
  else
  {
    v9 = v4[2];
    if (a2 - v7 <= (v9 - v5) >> 3)
    {
      v23 = &v5[8 * (a2 - v7)];
      v24 = 8 * a2 - 8 * v7;
      do
      {
        *(_QWORD *)v5 = a3;
        v5 += 8;
        v24 -= 8;
      }
      while (v24);
      v4[1] = v23;
    }
    else
    {
      if (a2 >> 61)
        std::vector<void *>::__throw_length_error[abi:ne180100]();
      v10 = v9 - v6;
      v11 = (v9 - v6) >> 2;
      if (v11 <= a2)
        v11 = a2;
      if (v10 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(v4 + 2), v12);
      v15 = &v13[8 * v7];
      v16 = &v13[8 * a2];
      v17 = 8 * a2 - 8 * v7;
      v18 = v15;
      do
      {
        *(_QWORD *)v18 = a3;
        v18 += 8;
        v17 -= 8;
      }
      while (v17);
      v19 = &v13[8 * v14];
      v20 = (char *)*v4;
      for (i = (char *)v4[1]; i != v20; i -= 8)
      {
        v22 = *((_QWORD *)i - 1);
        *((_QWORD *)v15 - 1) = v22;
        v15 -= 8;
      }
      *v4 = v15;
      v4[1] = v16;
      v4[2] = v19;
      if (v20)
        operator delete(v20);
    }
  }
}

std::vector<unsigned int> **xgboost::HostDeviceVector<unsigned int>::HostDeviceVector(std::vector<unsigned int> **a1, std::vector<unsigned int>::size_type a2, std::vector<unsigned int>::value_type a3)
{
  std::vector<unsigned int> *v6;
  std::vector<unsigned int>::value_type __x;

  *a1 = 0;
  v6 = (std::vector<unsigned int> *)operator new();
  __x = a3;
  std::vector<unsigned int>::vector(v6, a2, &__x);
  *a1 = v6;
  return a1;
}

{
  return __ZN7xgboost16HostDeviceVectorIjEC2Emji(a1, a2, a3);
}

void sub_220EF9E94(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10C402FEFCB83);
  _Unwind_Resume(a1);
}

_QWORD *xgboost::HostDeviceVector<unsigned int>::HostDeviceVector(_QWORD *a1, const void *a2, unint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  char *v8;

  *a1 = 0;
  v6 = (_QWORD *)operator new();
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = 0;
  if (a3)
  {
    std::vector<float>::__vallocate[abi:ne180100](v6, a3);
    v8 = (char *)v7[1];
    memmove(v8, a2, 4 * a3);
    v7[1] = &v8[4 * a3];
  }
  *a1 = v7;
  return a1;
}

{
  return __ZN7xgboost16HostDeviceVectorIjEC2ESt16initializer_listIjEi(a1, a2, a3);
}

void sub_220EF9F4C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  MEMORY[0x227667068](v1, 0x10C402FEFCB83);
  _Unwind_Resume(a1);
}

uint64_t *xgboost::HostDeviceVector<unsigned int>::HostDeviceVector(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  *a1 = 0;
  v4 = operator new();
  v7 = 0;
  v6 = 0uLL;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v6, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  *(_OWORD *)v4 = v6;
  *(_QWORD *)(v4 + 16) = v7;
  *a1 = v4;
  return a1;
}

{
  return __ZN7xgboost16HostDeviceVectorIjEC2ERKNSt3__16vectorIjNS2_9allocatorIjEEEEi(a1, a2);
}

void sub_220EFA008(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10C402FEFCB83);
  _Unwind_Resume(a1);
}

uint64_t *xgboost::HostDeviceVector<unsigned int>::~HostDeviceVector(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x227667068](v2, 0x10C402FEFCB83);
  }
  *a1 = 0;
  return a1;
}

{
  return __ZN7xgboost16HostDeviceVectorIjED2Ev(a1);
}

uint64_t *xgboost::HostDeviceVector<unsigned int>::HostDeviceVector(uint64_t *a1, _OWORD **a2)
{
  uint64_t v4;
  _QWORD *v5;

  v4 = operator new();
  v5 = *a2;
  *(_OWORD *)v4 = **a2;
  *(_QWORD *)(v4 + 16) = v5[2];
  *v5 = 0;
  v5[1] = 0;
  v5[2] = 0;
  *a1 = v4;
  return a1;
}

{
  uint64_t v4;
  _QWORD *v5;

  v4 = operator new();
  v5 = *a2;
  *(_OWORD *)v4 = **a2;
  *(_QWORD *)(v4 + 16) = v5[2];
  *v5 = 0;
  v5[1] = 0;
  v5[2] = 0;
  *a1 = v4;
  return a1;
}

uint64_t *xgboost::HostDeviceVector<unsigned int>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  if (a1 != a2)
  {
    v4 = operator new();
    v5 = (_QWORD *)*a2;
    *(_OWORD *)v4 = *(_OWORD *)*a2;
    *(_QWORD *)(v4 + 16) = v5[2];
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
    v6 = *a1;
    if (*a1)
    {
      v7 = *(void **)v6;
      if (*(_QWORD *)v6)
      {
        *(_QWORD *)(v6 + 8) = v7;
        operator delete(v7);
      }
      MEMORY[0x227667068](v6, 0x10C402FEFCB83);
    }
    *a1 = v4;
  }
  return a1;
}

{
  return __ZN7xgboost16HostDeviceVectorIjEaSEOS1_(a1, a2);
}

BOOL xgboost::HostDeviceVector<unsigned int>::Empty(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 8) == **(_QWORD **)a1;
}

uint64_t xgboost::HostDeviceVector<unsigned int>::Size(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 8) - **(_QWORD **)a1) >> 2;
}

uint64_t xgboost::HostDeviceVector<unsigned int>::DeviceIdx()
{
  return 0xFFFFFFFFLL;
}

void xgboost::HostDeviceVector<unsigned int>::DeviceSpan(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

{
  *a1 = 0;
  a1[1] = 0;
}

void xgboost::HostDeviceVector<unsigned int>::ConstDeviceSpan(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t xgboost::HostDeviceVector<unsigned int>::DevicePointer()
{
  return 0;
}

{
  return 0;
}

uint64_t xgboost::HostDeviceVector<unsigned int>::ConstDevicePointer()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<unsigned int>::HostPointer(uint64_t a1)
{
  return **(_QWORD **)a1;
}

{
  return **(_QWORD **)a1;
}

uint64_t xgboost::HostDeviceVector<unsigned int>::HostVector(uint64_t a1)
{
  return *(_QWORD *)a1;
}

{
  return *(_QWORD *)a1;
}

uint64_t **xgboost::HostDeviceVector<unsigned int>::HostSpan@<X0>(uint64_t **result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = **result;
  *a2 = ((*result)[1] - v2) >> 2;
  a2[1] = v2;
  return result;
}

{
  uint64_t v2;

  v2 = **result;
  *a2 = ((*result)[1] - v2) >> 2;
  a2[1] = v2;
  return result;
}

uint64_t **xgboost::HostDeviceVector<unsigned int>::ConstHostSpan@<X0>(uint64_t **result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = **result;
  *a2 = ((*result)[1] - v2) >> 2;
  a2[1] = v2;
  return result;
}

uint64_t xgboost::HostDeviceVector<unsigned int>::ConstHostPointer(uint64_t a1)
{
  return **(_QWORD **)a1;
}

uint64_t xgboost::HostDeviceVector<unsigned int>::ConstHostVector(uint64_t a1)
{
  return *(_QWORD *)a1;
}

_QWORD **xgboost::HostDeviceVector<unsigned int>::Fill(_QWORD **result, int a2)
{
  _DWORD *v2;
  uint64_t v3;
  unint64_t v4;

  v2 = (_DWORD *)**result;
  v3 = (*result)[1] - (_QWORD)v2;
  if (v3 >= 1)
  {
    v4 = ((unint64_t)v3 >> 2) + 1;
    do
    {
      *v2++ = a2;
      --v4;
    }
    while (v4 > 1);
  }
  return result;
}

void xgboost::HostDeviceVector<unsigned int>::Copy(void ***a1, const void ***a2)
{
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;

  v15 = ((_BYTE *)(*a1)[1] - (_BYTE *)**a1) >> 2;
  if (v15 != ((_BYTE *)(*a2)[1] - (_BYTE *)**a2) >> 2)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v16);
    if (v16)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/host_device_vector.cc");
      v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: ", 14);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Size() == other.Size()", 22);
      v8 = *(char *)(v16 + 23);
      v9 = v8 >= 0 ? v16 : *(_QWORD *)v16;
      v10 = v8 >= 0 ? *(unsigned __int8 *)(v16 + 23) : *(_QWORD *)(v16 + 8);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
      v12 = v16;
      v16 = 0;
      if (v12)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v16, v12);
    }
  }
  v13 = **a2;
  v14 = (*a2)[1];
  if (v14 != v13)
    memmove(**a1, v13, v14 - v13);
}

{
  __ZN7xgboost16HostDeviceVectorIjE4CopyERKS1_(a1, a2);
}

void sub_220EFA40C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

void xgboost::HostDeviceVector<unsigned int>::Copy(void ***a1, uint64_t a2)
{
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v14 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2;
  v15 = ((_BYTE *)(*a1)[1] - (_BYTE *)**a1) >> 2;
  if (v15 != v14)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v16);
    if (v16)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/host_device_vector.cc");
      v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: ", 14);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Size() == other.size()", 22);
      v8 = *(char *)(v16 + 23);
      v9 = v8 >= 0 ? v16 : *(_QWORD *)v16;
      v10 = v8 >= 0 ? *(unsigned __int8 *)(v16 + 23) : *(_QWORD *)(v16 + 8);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
      v12 = v16;
      v16 = 0;
      if (v12)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v16, v12);
    }
  }
  v13 = *(_QWORD *)(a2 + 8);
  if (v13 != *(_QWORD *)a2)
    memmove(**a1, *(const void **)a2, v13 - *(_QWORD *)a2);
}

void sub_220EFA54C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

void xgboost::HostDeviceVector<unsigned int>::Copy(void ***a1, void *__src, uint64_t a3)
{
  std::string *Entry;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v15 = ((_BYTE *)(*a1)[1] - (_BYTE *)**a1) >> 2;
  if (v15 != a3)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v16);
    if (v16)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/host_device_vector.cc");
      v7 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: ", 14);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Size() == other.size()", 22);
      v10 = *(char *)(v16 + 23);
      v11 = v10 >= 0 ? v16 : *(_QWORD *)v16;
      v12 = v10 >= 0 ? *(unsigned __int8 *)(v16 + 23) : *(_QWORD *)(v16 + 8);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
      v14 = v16;
      v16 = 0;
      if (v14)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v16, v14);
    }
  }
  if (a3)
    memmove(**a1, __src, 4 * a3);
}

void sub_220EFA68C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

void xgboost::HostDeviceVector<unsigned int>::Extend(std::vector<unsigned int> **a1, const void ***a2)
{
  std::vector<unsigned int> *v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;

  v4 = *a1;
  v5 = (char *)v4->__end_ - (char *)v4->__begin_;
  std::vector<unsigned int>::resize(v4, (((_BYTE *)(*a2)[1] - (_BYTE *)**a2) >> 2) + (v5 >> 2));
  v6 = **a2;
  v7 = (*a2)[1];
  if (v7 != v6)
    memmove(&(*a1)->__begin_[v5 >> 2], v6, v7 - v6);
}

uint64_t xgboost::HostDeviceVector<unsigned int>::HostCanRead()
{
  return 1;
}

uint64_t xgboost::HostDeviceVector<unsigned int>::HostCanWrite()
{
  return 1;
}

uint64_t xgboost::HostDeviceVector<unsigned int>::DeviceCanRead()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<unsigned int>::DeviceCanWrite()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<unsigned int>::DeviceAccess()
{
  return 0;
}

void xgboost::HostDeviceVector<unsigned int>::Resize(std::vector<unsigned int> **a1, std::vector<unsigned int>::size_type a2, std::vector<unsigned int>::value_type a3)
{
  std::vector<unsigned int>::value_type __x;

  __x = a3;
  std::vector<unsigned int>::resize(*a1, a2, &__x);
}

_QWORD *xgboost::HostDeviceVector<xgboost::RegTree::Segment>::HostDeviceVector(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;

  *a1 = 0;
  v8 = (_QWORD *)operator new();
  v9 = v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = 0;
  if (a2)
  {
    std::vector<xgboost::tree::GradStats>::__vallocate[abi:ne180100](v8, a2);
    v10 = (_QWORD *)v9[1];
    v11 = &v10[2 * a2];
    do
    {
      *v10 = a3;
      v10[1] = a4;
      v10 += 2;
    }
    while (v10 != v11);
    v9[1] = v11;
  }
  *a1 = v9;
  return a1;
}

{
  return __ZN7xgboost16HostDeviceVectorINS_7RegTree7SegmentEEC2EmS2_i(a1, a2, a3, a4);
}

void sub_220EFA820(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  MEMORY[0x227667068](v1, 0x20C40960023A9);
  _Unwind_Resume(a1);
}

_QWORD *xgboost::HostDeviceVector<xgboost::RegTree::Segment>::HostDeviceVector(_QWORD *a1, const void *a2, unint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  char *v8;

  *a1 = 0;
  v6 = (_QWORD *)operator new();
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = 0;
  if (a3)
  {
    std::vector<xgboost::tree::GradStats>::__vallocate[abi:ne180100](v6, a3);
    v8 = (char *)v7[1];
    memmove(v8, a2, 16 * a3);
    v7[1] = &v8[16 * a3];
  }
  *a1 = v7;
  return a1;
}

{
  return __ZN7xgboost16HostDeviceVectorINS_7RegTree7SegmentEEC2ESt16initializer_listIS2_Ei(a1, a2, a3);
}

void sub_220EFA8E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  MEMORY[0x227667068](v1, 0x20C40960023A9);
  _Unwind_Resume(a1);
}

uint64_t *xgboost::HostDeviceVector<xgboost::RegTree::Segment>::HostDeviceVector(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  *a1 = 0;
  v4 = operator new();
  v7 = 0;
  v6 = 0uLL;
  std::vector<xgboost::RegTree::Segment>::__init_with_size[abi:ne180100]<xgboost::RegTree::Segment*,xgboost::RegTree::Segment*>(&v6, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  *(_OWORD *)v4 = v6;
  *(_QWORD *)(v4 + 16) = v7;
  *a1 = v4;
  return a1;
}

{
  return __ZN7xgboost16HostDeviceVectorINS_7RegTree7SegmentEEC2ERKNSt3__16vectorIS2_NS4_9allocatorIS2_EEEEi(a1, a2);
}

void sub_220EFA9A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x20C40960023A9);
  _Unwind_Resume(a1);
}

uint64_t *xgboost::HostDeviceVector<xgboost::RegTree::Segment>::~HostDeviceVector(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x227667068](v2, 0x20C40960023A9);
  }
  *a1 = 0;
  return a1;
}

{
  return __ZN7xgboost16HostDeviceVectorINS_7RegTree7SegmentEED2Ev(a1);
}

uint64_t *xgboost::HostDeviceVector<xgboost::RegTree::Segment>::HostDeviceVector(uint64_t *a1, _OWORD **a2)
{
  uint64_t v4;
  _QWORD *v5;

  v4 = operator new();
  v5 = *a2;
  *(_OWORD *)v4 = **a2;
  *(_QWORD *)(v4 + 16) = v5[2];
  *v5 = 0;
  v5[1] = 0;
  v5[2] = 0;
  *a1 = v4;
  return a1;
}

{
  uint64_t v4;
  _QWORD *v5;

  v4 = operator new();
  v5 = *a2;
  *(_OWORD *)v4 = **a2;
  *(_QWORD *)(v4 + 16) = v5[2];
  *v5 = 0;
  v5[1] = 0;
  v5[2] = 0;
  *a1 = v4;
  return a1;
}

uint64_t *xgboost::HostDeviceVector<xgboost::RegTree::Segment>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  if (a1 != a2)
  {
    v4 = operator new();
    v5 = (_QWORD *)*a2;
    *(_OWORD *)v4 = *(_OWORD *)*a2;
    *(_QWORD *)(v4 + 16) = v5[2];
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
    v6 = *a1;
    if (*a1)
    {
      v7 = *(void **)v6;
      if (*(_QWORD *)v6)
      {
        *(_QWORD *)(v6 + 8) = v7;
        operator delete(v7);
      }
      MEMORY[0x227667068](v6, 0x20C40960023A9);
    }
    *a1 = v4;
  }
  return a1;
}

BOOL xgboost::HostDeviceVector<xgboost::RegTree::Segment>::Empty(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 8) == **(_QWORD **)a1;
}

uint64_t xgboost::HostDeviceVector<xgboost::RegTree::Segment>::Size(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 8) - **(_QWORD **)a1) >> 4;
}

uint64_t xgboost::HostDeviceVector<xgboost::RegTree::Segment>::DeviceIdx()
{
  return 0xFFFFFFFFLL;
}

void xgboost::HostDeviceVector<xgboost::RegTree::Segment>::DeviceSpan(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

{
  *a1 = 0;
  a1[1] = 0;
}

void xgboost::HostDeviceVector<xgboost::RegTree::Segment>::ConstDeviceSpan(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t xgboost::HostDeviceVector<xgboost::RegTree::Segment>::DevicePointer()
{
  return 0;
}

{
  return 0;
}

uint64_t xgboost::HostDeviceVector<xgboost::RegTree::Segment>::ConstDevicePointer()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<xgboost::RegTree::Segment>::HostPointer(uint64_t a1)
{
  return **(_QWORD **)a1;
}

{
  return **(_QWORD **)a1;
}

uint64_t xgboost::HostDeviceVector<xgboost::RegTree::Segment>::HostVector(uint64_t a1)
{
  return *(_QWORD *)a1;
}

{
  return *(_QWORD *)a1;
}

uint64_t **xgboost::HostDeviceVector<xgboost::RegTree::Segment>::HostSpan@<X0>(uint64_t **result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = **result;
  *a2 = ((*result)[1] - v2) >> 4;
  a2[1] = v2;
  return result;
}

{
  uint64_t v2;

  v2 = **result;
  *a2 = ((*result)[1] - v2) >> 4;
  a2[1] = v2;
  return result;
}

uint64_t **xgboost::HostDeviceVector<xgboost::RegTree::Segment>::ConstHostSpan@<X0>(uint64_t **result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = **result;
  *a2 = ((*result)[1] - v2) >> 4;
  a2[1] = v2;
  return result;
}

uint64_t xgboost::HostDeviceVector<xgboost::RegTree::Segment>::ConstHostPointer(uint64_t a1)
{
  return **(_QWORD **)a1;
}

uint64_t xgboost::HostDeviceVector<xgboost::RegTree::Segment>::ConstHostVector(uint64_t a1)
{
  return *(_QWORD *)a1;
}

_QWORD **xgboost::HostDeviceVector<xgboost::RegTree::Segment>::Fill(_QWORD **result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;

  v3 = (_QWORD *)**result;
  v4 = (*result)[1] - (_QWORD)v3;
  if (v4 >= 1)
  {
    v5 = ((unint64_t)v4 >> 4) + 1;
    do
    {
      *v3 = a2;
      v3[1] = a3;
      v3 += 2;
      --v5;
    }
    while (v5 > 1);
  }
  return result;
}

void xgboost::HostDeviceVector<xgboost::RegTree::Segment>::Copy(void ***a1, const void ***a2)
{
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;

  v15 = ((_BYTE *)(*a1)[1] - (_BYTE *)**a1) >> 4;
  if (v15 != ((_BYTE *)(*a2)[1] - (_BYTE *)**a2) >> 4)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v16);
    if (v16)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/host_device_vector.cc");
      v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: ", 14);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Size() == other.Size()", 22);
      v8 = *(char *)(v16 + 23);
      v9 = v8 >= 0 ? v16 : *(_QWORD *)v16;
      v10 = v8 >= 0 ? *(unsigned __int8 *)(v16 + 23) : *(_QWORD *)(v16 + 8);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
      v12 = v16;
      v16 = 0;
      if (v12)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v16, v12);
    }
  }
  v13 = **a2;
  v14 = (*a2)[1];
  if (v14 != v13)
    memmove(**a1, v13, v14 - v13);
}

void sub_220EFADA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

void xgboost::HostDeviceVector<xgboost::RegTree::Segment>::Copy(void ***a1, uint64_t a2)
{
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v14 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4;
  v15 = ((_BYTE *)(*a1)[1] - (_BYTE *)**a1) >> 4;
  if (v15 != v14)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v16);
    if (v16)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/host_device_vector.cc");
      v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: ", 14);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Size() == other.size()", 22);
      v8 = *(char *)(v16 + 23);
      v9 = v8 >= 0 ? v16 : *(_QWORD *)v16;
      v10 = v8 >= 0 ? *(unsigned __int8 *)(v16 + 23) : *(_QWORD *)(v16 + 8);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
      v12 = v16;
      v16 = 0;
      if (v12)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v16, v12);
    }
  }
  v13 = *(_QWORD *)(a2 + 8);
  if (v13 != *(_QWORD *)a2)
    memmove(**a1, *(const void **)a2, v13 - *(_QWORD *)a2);
}

void sub_220EFAEE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

void xgboost::HostDeviceVector<xgboost::RegTree::Segment>::Copy(void ***a1, void *__src, uint64_t a3)
{
  std::string *Entry;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v15 = ((_BYTE *)(*a1)[1] - (_BYTE *)**a1) >> 4;
  if (v15 != a3)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v16);
    if (v16)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/host_device_vector.cc");
      v7 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: ", 14);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Size() == other.size()", 22);
      v10 = *(char *)(v16 + 23);
      v11 = v10 >= 0 ? v16 : *(_QWORD *)v16;
      v12 = v10 >= 0 ? *(unsigned __int8 *)(v16 + 23) : *(_QWORD *)(v16 + 8);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
      v14 = v16;
      v16 = 0;
      if (v14)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v16, v14);
    }
  }
  if (a3)
    memmove(**a1, __src, 16 * a3);
}

void sub_220EFB028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

void xgboost::HostDeviceVector<xgboost::RegTree::Segment>::Extend(_QWORD **a1, const void ***a2)
{
  _QWORD *v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;

  v4 = *a1;
  v5 = v4[1] - *v4;
  std::vector<xgboost::RTreeNodeStat>::resize((uint64_t)v4, (((_BYTE *)(*a2)[1] - (_BYTE *)**a2) >> 4) + (v5 >> 4));
  v6 = **a2;
  v7 = (*a2)[1];
  if (v7 != v6)
    memmove((void *)(**a1 + 16 * (v5 >> 4)), v6, v7 - v6);
}

uint64_t xgboost::HostDeviceVector<xgboost::RegTree::Segment>::HostCanRead()
{
  return 1;
}

uint64_t xgboost::HostDeviceVector<xgboost::RegTree::Segment>::HostCanWrite()
{
  return 1;
}

uint64_t xgboost::HostDeviceVector<xgboost::RegTree::Segment>::DeviceCanRead()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<xgboost::RegTree::Segment>::DeviceCanWrite()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<xgboost::RegTree::Segment>::DeviceAccess()
{
  return 0;
}

void xgboost::HostDeviceVector<xgboost::RegTree::Segment>::Resize(void ***a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  void **v5;
  char *v6;
  _BYTE *v7;
  unint64_t v8;
  _BYTE *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;

  v5 = *a1;
  v7 = **a1;
  v6 = (char *)(*a1)[1];
  v8 = (v6 - v7) >> 4;
  if (a2 <= v8)
  {
    if (a2 < v8)
      v5[1] = &v7[16 * a2];
  }
  else
  {
    v11 = v5[2];
    if (a2 - v8 <= (v11 - v6) >> 4)
    {
      v23 = &v6[16 * (a2 - v8)];
      do
      {
        *(_QWORD *)v6 = a3;
        *((_QWORD *)v6 + 1) = a4;
        v6 += 16;
      }
      while (v6 != v23);
      v5[1] = v23;
    }
    else
    {
      if (a2 >> 60)
        std::vector<void *>::__throw_length_error[abi:ne180100]();
      v12 = v11 - v7;
      v13 = (v11 - v7) >> 3;
      if (v13 <= a2)
        v13 = a2;
      if (v12 >= 0x7FFFFFFFFFFFFFF0)
        v14 = 0xFFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WQSummary<float,float>::Entry>>((uint64_t)(v5 + 2), v14);
      v17 = &v15[16 * v8];
      v18 = &v15[16 * a2];
      v19 = v17;
      do
      {
        *(_QWORD *)v19 = a3;
        *((_QWORD *)v19 + 1) = a4;
        v19 += 16;
      }
      while (v19 != v18);
      v20 = &v15[16 * v16];
      v22 = (char *)*v5;
      v21 = (char *)v5[1];
      if (v21 != *v5)
      {
        do
        {
          *((_OWORD *)v17 - 1) = *((_OWORD *)v21 - 1);
          v17 -= 16;
          v21 -= 16;
        }
        while (v21 != v22);
        v21 = (char *)*v5;
      }
      *v5 = v17;
      v5[1] = v18;
      v5[2] = v20;
      if (v21)
        operator delete(v21);
    }
  }
}

_QWORD *xgboost::HostDeviceVector<unsigned long>::HostDeviceVector(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v8;

  *a1 = 0;
  v6 = (_QWORD *)operator new();
  v8 = a3;
  std::vector<unsigned long>::vector(v6, a2, &v8);
  *a1 = v6;
  return a1;
}

{
  return __ZN7xgboost16HostDeviceVectorImEC2Emmi(a1, a2, a3);
}

void sub_220EFB298(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10C402FEFCB83);
  _Unwind_Resume(a1);
}

_QWORD *xgboost::HostDeviceVector<unsigned long>::HostDeviceVector(_QWORD *a1, const void *a2, unint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  char *v8;

  *a1 = 0;
  v6 = (_QWORD *)operator new();
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = 0;
  if (a3)
  {
    std::vector<void *>::__vallocate[abi:ne180100](v6, a3);
    v8 = (char *)v7[1];
    memmove(v8, a2, 8 * a3);
    v7[1] = &v8[8 * a3];
  }
  *a1 = v7;
  return a1;
}

{
  return __ZN7xgboost16HostDeviceVectorImEC2ESt16initializer_listImEi(a1, a2, a3);
}

void sub_220EFB350(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  MEMORY[0x227667068](v1, 0x10C402FEFCB83);
  _Unwind_Resume(a1);
}

uint64_t *xgboost::HostDeviceVector<unsigned long>::HostDeviceVector(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  *a1 = 0;
  v4 = operator new();
  v7 = 0;
  v6 = 0uLL;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v6, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  *(_OWORD *)v4 = v6;
  *(_QWORD *)(v4 + 16) = v7;
  *a1 = v4;
  return a1;
}

{
  return __ZN7xgboost16HostDeviceVectorImEC2ERKNSt3__16vectorImNS2_9allocatorImEEEEi(a1, a2);
}

void sub_220EFB40C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10C402FEFCB83);
  _Unwind_Resume(a1);
}

uint64_t *xgboost::HostDeviceVector<unsigned long>::~HostDeviceVector(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x227667068](v2, 0x10C402FEFCB83);
  }
  *a1 = 0;
  return a1;
}

{
  return __ZN7xgboost16HostDeviceVectorImED2Ev(a1);
}

uint64_t *xgboost::HostDeviceVector<unsigned long>::HostDeviceVector(uint64_t *a1, _OWORD **a2)
{
  uint64_t v4;
  _QWORD *v5;

  v4 = operator new();
  v5 = *a2;
  *(_OWORD *)v4 = **a2;
  *(_QWORD *)(v4 + 16) = v5[2];
  *v5 = 0;
  v5[1] = 0;
  v5[2] = 0;
  *a1 = v4;
  return a1;
}

{
  uint64_t v4;
  _QWORD *v5;

  v4 = operator new();
  v5 = *a2;
  *(_OWORD *)v4 = **a2;
  *(_QWORD *)(v4 + 16) = v5[2];
  *v5 = 0;
  v5[1] = 0;
  v5[2] = 0;
  *a1 = v4;
  return a1;
}

uint64_t *xgboost::HostDeviceVector<unsigned long>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  if (a1 != a2)
  {
    v4 = operator new();
    v5 = (_QWORD *)*a2;
    *(_OWORD *)v4 = *(_OWORD *)*a2;
    *(_QWORD *)(v4 + 16) = v5[2];
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
    v6 = *a1;
    if (*a1)
    {
      v7 = *(void **)v6;
      if (*(_QWORD *)v6)
      {
        *(_QWORD *)(v6 + 8) = v7;
        operator delete(v7);
      }
      MEMORY[0x227667068](v6, 0x10C402FEFCB83);
    }
    *a1 = v4;
  }
  return a1;
}

BOOL xgboost::HostDeviceVector<unsigned long>::Empty(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 8) == **(_QWORD **)a1;
}

uint64_t xgboost::HostDeviceVector<unsigned long>::Size(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 8) - **(_QWORD **)a1) >> 3;
}

uint64_t xgboost::HostDeviceVector<unsigned long>::DeviceIdx()
{
  return 0xFFFFFFFFLL;
}

void xgboost::HostDeviceVector<unsigned long>::DeviceSpan(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

{
  *a1 = 0;
  a1[1] = 0;
}

void xgboost::HostDeviceVector<unsigned long>::ConstDeviceSpan(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t xgboost::HostDeviceVector<unsigned long>::DevicePointer()
{
  return 0;
}

{
  return 0;
}

uint64_t xgboost::HostDeviceVector<unsigned long>::ConstDevicePointer()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<unsigned long>::HostPointer(uint64_t a1)
{
  return **(_QWORD **)a1;
}

{
  return **(_QWORD **)a1;
}

uint64_t xgboost::HostDeviceVector<unsigned long>::HostVector(uint64_t a1)
{
  return *(_QWORD *)a1;
}

{
  return *(_QWORD *)a1;
}

uint64_t **xgboost::HostDeviceVector<unsigned long>::HostSpan@<X0>(uint64_t **result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = **result;
  *a2 = ((*result)[1] - v2) >> 3;
  a2[1] = v2;
  return result;
}

{
  uint64_t v2;

  v2 = **result;
  *a2 = ((*result)[1] - v2) >> 3;
  a2[1] = v2;
  return result;
}

uint64_t **xgboost::HostDeviceVector<unsigned long>::ConstHostSpan@<X0>(uint64_t **result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = **result;
  *a2 = ((*result)[1] - v2) >> 3;
  a2[1] = v2;
  return result;
}

uint64_t xgboost::HostDeviceVector<unsigned long>::ConstHostPointer(uint64_t a1)
{
  return **(_QWORD **)a1;
}

uint64_t xgboost::HostDeviceVector<unsigned long>::ConstHostVector(uint64_t a1)
{
  return *(_QWORD *)a1;
}

_QWORD **xgboost::HostDeviceVector<unsigned long>::Fill(_QWORD **result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;

  v2 = (_QWORD *)**result;
  v3 = (*result)[1] - (_QWORD)v2;
  if (v3 >= 1)
  {
    v4 = ((unint64_t)v3 >> 3) + 1;
    do
    {
      *v2++ = a2;
      --v4;
    }
    while (v4 > 1);
  }
  return result;
}

void xgboost::HostDeviceVector<unsigned long>::Copy(void ***a1, const void ***a2)
{
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;

  v15 = ((_BYTE *)(*a1)[1] - (_BYTE *)**a1) >> 3;
  if (v15 != ((_BYTE *)(*a2)[1] - (_BYTE *)**a2) >> 3)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v16);
    if (v16)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/host_device_vector.cc");
      v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: ", 14);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Size() == other.Size()", 22);
      v8 = *(char *)(v16 + 23);
      v9 = v8 >= 0 ? v16 : *(_QWORD *)v16;
      v10 = v8 >= 0 ? *(unsigned __int8 *)(v16 + 23) : *(_QWORD *)(v16 + 8);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
      v12 = v16;
      v16 = 0;
      if (v12)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v16, v12);
    }
  }
  v13 = **a2;
  v14 = (*a2)[1];
  if (v14 != v13)
    memmove(**a1, v13, v14 - v13);
}

void sub_220EFB810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

void xgboost::HostDeviceVector<unsigned long>::Copy(void ***a1, uint64_t a2)
{
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v14 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3;
  v15 = ((_BYTE *)(*a1)[1] - (_BYTE *)**a1) >> 3;
  if (v15 != v14)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v16);
    if (v16)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/host_device_vector.cc");
      v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: ", 14);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Size() == other.size()", 22);
      v8 = *(char *)(v16 + 23);
      v9 = v8 >= 0 ? v16 : *(_QWORD *)v16;
      v10 = v8 >= 0 ? *(unsigned __int8 *)(v16 + 23) : *(_QWORD *)(v16 + 8);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
      v12 = v16;
      v16 = 0;
      if (v12)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v16, v12);
    }
  }
  v13 = *(_QWORD *)(a2 + 8);
  if (v13 != *(_QWORD *)a2)
    memmove(**a1, *(const void **)a2, v13 - *(_QWORD *)a2);
}

void sub_220EFB950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

void xgboost::HostDeviceVector<unsigned long>::Copy(void ***a1, void *__src, uint64_t a3)
{
  std::string *Entry;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v15 = ((_BYTE *)(*a1)[1] - (_BYTE *)**a1) >> 3;
  if (v15 != a3)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v16);
    if (v16)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/host_device_vector.cc");
      v7 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: ", 14);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Size() == other.size()", 22);
      v10 = *(char *)(v16 + 23);
      v11 = v10 >= 0 ? v16 : *(_QWORD *)v16;
      v12 = v10 >= 0 ? *(unsigned __int8 *)(v16 + 23) : *(_QWORD *)(v16 + 8);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
      v14 = v16;
      v16 = 0;
      if (v14)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v16, v14);
    }
  }
  if (a3)
    memmove(**a1, __src, 8 * a3);
}

void sub_220EFBA90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

void xgboost::HostDeviceVector<unsigned long>::Extend(_QWORD **a1, const void ***a2)
{
  _QWORD *v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;

  v4 = *a1;
  v5 = v4[1] - *v4;
  std::vector<unsigned long>::resize((uint64_t)v4, (((_BYTE *)(*a2)[1] - (_BYTE *)**a2) >> 3) + (v5 >> 3));
  v6 = **a2;
  v7 = (*a2)[1];
  if (v7 != v6)
    memmove((void *)(**a1 + 8 * (v5 >> 3)), v6, v7 - v6);
}

uint64_t xgboost::HostDeviceVector<unsigned long>::HostCanRead()
{
  return 1;
}

uint64_t xgboost::HostDeviceVector<unsigned long>::HostCanWrite()
{
  return 1;
}

uint64_t xgboost::HostDeviceVector<unsigned long>::DeviceCanRead()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<unsigned long>::DeviceCanWrite()
{
  return 0;
}

uint64_t xgboost::HostDeviceVector<unsigned long>::DeviceAccess()
{
  return 0;
}

void xgboost::HostDeviceVector<unsigned long>::Resize(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a3;
  std::vector<unsigned long>::resize(*a1, a2, &v3);
}

_QWORD *std::vector<xgboost::detail::GradientPairInternal<float>>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<xgboost::detail::GradientPairInternal<float>>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_220EFBBF8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<xgboost::detail::GradientPairInternal<float>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

_QWORD *std::vector<xgboost::FeatureType>::vector(_QWORD *a1, size_t a2, _BYTE *a3)
{
  size_t v5;
  _BYTE *v6;
  _BYTE *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    v5 = a2;
    std::vector<xgboost::FeatureType>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_BYTE *)a1[1];
    v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_220EFBCB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<xgboost::Entry>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<xgboost::Json>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_220EFBD34(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::tree::QuantileHistMaker::Builder<float>::Builder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  std::chrono::steady_clock::time_point *v13;
  std::string __p;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  _ZNSt3__115allocate_sharedB8ne180100IN7xgboost6common13ColumnSamplerENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((_QWORD *)(a1 + 16));
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 96) = a4;
  v10 = operator new();
  xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::HistogramBuilder(v10, v11, v12);
  *(_QWORD *)(a1 + 104) = v10;
  *(_WORD *)(a1 + 112) = a5;
  *(_QWORD *)(a1 + 120) = a6;
  v13 = (std::chrono::steady_clock::time_point *)operator new();
  xgboost::common::Monitor::Monitor(v13);
  *(_QWORD *)(a1 + 128) = v13;
  std::string::basic_string[abi:ne180100]<0>(&__p, "Quantile::Builder");
  std::string::operator=((std::string *)v13, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

{
  return xgboost::tree::QuantileHistMaker::Builder<float>::Builder(a1, a2, a3, a4, a5, a6);
}

{
  return __ZN7xgboost4tree17QuantileHistMaker7BuilderIfEC2EmRKNS0_10TrainParamEPKNS_7DMatrixENS_7ObjInfoEPKNS_16GenericParameterE(a1, a2, a3, a4, a5, a6);
}

void sub_220EFBE50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  char ***v17;
  uint64_t v18;
  void *v20;

  if (a14 < 0)
    operator delete(__p);
  std::unique_ptr<xgboost::common::Monitor>::reset[abi:ne180100](v17);
  std::unique_ptr<xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>>::reset[abi:ne180100]((uint64_t *)(v18 + 72));
  std::vector<xgboost::tree::ApproxRowPartitioner>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  std::unique_ptr<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>>::reset[abi:ne180100]((uint64_t *)(v18 + 24), 0);
  v20 = *(void **)v18;
  if (*(_QWORD *)v18)
  {
    *(_QWORD *)(v15 + 40) = v20;
    operator delete(v20);
  }
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void xgboost::tree::QuantileHistMaker::Builder<float>::UpdateTree(uint64_t a1, uint64_t *a2, uint64_t a3, xgboost::RegTree *a4)
{
  uint64_t v8;
  void *__p[2];
  char v10;

  std::string::basic_string[abi:ne180100]<0>(__p, "UpdateTree");
  xgboost::common::Monitor::Start();
  if (v10 < 0)
    operator delete(__p[0]);
  v8 = *a2;
  if (*(_QWORD *)a1 != 1)
  {
    std::vector<xgboost::detail::GradientPairInternal<float>>::resize(a1 + 32, (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 3);
    if (a1 + 32 != v8)
    {
      std::vector<xgboost::detail::GradientPairInternal<float>>::__assign_with_size[abi:ne180100]<xgboost::detail::GradientPairInternal<float>*,xgboost::detail::GradientPairInternal<float>*>((char *)(a1 + 32), *(char **)v8, *(_QWORD *)(v8 + 8), (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 3);
      v8 = a1 + 32;
    }
  }
  xgboost::tree::QuantileHistMaker::Builder<float>::InitData(a1, a3, (uint64_t)a4, (_QWORD *)v8);
  xgboost::tree::QuantileHistMaker::Builder<float>::ExpandTree(a1, a3, a4, (float32x2_t **)v8);
  std::string::basic_string[abi:ne180100]<0>(__p, "UpdateTree");
  xgboost::common::Monitor::Stop();
  if (v10 < 0)
    operator delete(__p[0]);
}

{
  __ZN7xgboost4tree17QuantileHistMaker7BuilderIfE10UpdateTreeEPNS_16HostDeviceVectorINS_6detail20GradientPairInternalIfEEEEPNS_7DMatrixEPNS_7RegTreeE(a1, a2, a3, a4);
}

void sub_220EFC024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::tree::QuantileHistMaker::Builder<float>::GetNumberOfTrees(uint64_t a1)
{
  return *(_QWORD *)a1;
}

void xgboost::tree::QuantileHistMaker::Builder<float>::InitData(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t j;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  std::string *Entry;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  void *Engine;
  char v46;
  uint64_t v47;
  int v48;
  std::string *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  int v53;
  void *v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v70;
  uint64_t v72;
  std::__shared_weak_count *v73;
  _DWORD v74[2];
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  void *__p;
  std::__shared_weak_count *v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  void *v88;
  std::__shared_weak_count *v89;
  unsigned int v90;

  std::string::basic_string[abi:ne180100]<0>(&__p, "InitData");
  xgboost::common::Monitor::Start();
  if (SHIBYTE(v85) < 0)
    operator delete(__p);
  v70 = (**(uint64_t (***)(uint64_t))a2)(a2);
  v90 = 0;
  v7 = *(_QWORD *)(a1 + 64);
  for (i = *(_QWORD *)(a1 + 72); i != v7; std::allocator<xgboost::tree::ApproxRowPartitioner>::destroy[abi:ne180100](i))
    i -= 136;
  *(_QWORD *)(a1 + 72) = v7;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_DWORD *)(v8 + 20);
  v10 = *(_QWORD *)(v8 + 128);
  LODWORD(__p) = -1;
  HIDWORD(__p) = v9;
  v84 = 0;
  v85 = 0;
  v86 = 0;
  v87 = v10;
  (*(void (**)(void **__return_ptr, uint64_t, void **))(*(_QWORD *)a2 + 104))(&v88, a2, &__p);
  __p = v88;
  v84 = v89;
  if (v89)
  {
    p_shared_owners = (unint64_t *)&v89->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  xgboost::BatchIterator<xgboost::GHistIndexMatrix>::BatchIterator(&v81, 0);
  for (j = 0; ; ++j)
  {
    v14 = xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator!=((uint64_t *)&__p);
    if ((v14 & 1) == 0)
      break;
    v15 = xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator*((uint64_t *)&__p);
    v16 = (_QWORD *)v15;
    if (v90)
    {
      v79 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v15 + 128) + 8) - 4);
      if (v79 != v90)
      {
        dmlc::LogCheckFormat<int,unsigned long>(&v80);
        if (v80)
        {
          Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v79);
          dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/updater_quantile_hist.cc");
          v18 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v79);
          v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Check failed: ", 14);
          v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"n_total_bins == page.cut.TotalBins()", 36);
          v21 = *(char *)(v80 + 23);
          v22 = v21 >= 0 ? v80 : *(_QWORD *)v80;
          v23 = v21 >= 0 ? *(unsigned __int8 *)(v80 + 23) : *(_QWORD *)(v80 + 8);
          v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)": ", 2);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v79);
          v25 = v80;
          v80 = 0;
          if (v25)
            std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v80, v25);
        }
      }
    }
    else
    {
      v90 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 128) + 8) - 4);
    }
    v26 = v16[1];
    if (v26 == *v16)
      v27 = 0;
    else
      v27 = ((v26 - *v16) >> 3) - 1;
    v28 = *(_QWORD *)(a1 + 72);
    v29 = v16[19];
    if (v28 >= *(_QWORD *)(a1 + 80))
    {
      v30 = std::vector<xgboost::tree::HistRowPartitioner>::__emplace_back_slow_path<unsigned long,unsigned long const&,int>((int64x2_t *)(a1 + 64), v27, v29, 1);
    }
    else
    {
      xgboost::tree::HistRowPartitioner::HistRowPartitioner(*(xgboost::tree::HistRowPartitioner **)(a1 + 72), v27, v29, 1);
      v30 = v28 + 136;
      *(_QWORD *)(a1 + 72) = v28 + 136;
    }
    *(_QWORD *)(a1 + 72) = v30;
    xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator++((uint64_t *)&__p);
  }
  v31 = v82;
  if (v82)
  {
    v32 = (unint64_t *)&v82->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v84;
  if (v84)
  {
    v35 = (unint64_t *)&v84->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = v89;
  if (v89)
  {
    v38 = (unint64_t *)&v89->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = *(_QWORD *)(a1 + 104);
  v41 = v90;
  v42 = *(_QWORD *)(a1 + 8);
  v43 = *(_DWORD *)(v42 + 20);
  v44 = *(_QWORD *)(v42 + 128);
  v74[0] = -1;
  v74[1] = v43;
  v75 = 0;
  v76 = 0;
  v77 = 0;
  v78 = v44;
  Engine = rabit::engine::GetEngine((rabit::engine *)v14);
  v46 = (*(uint64_t (**)(void *))(*(_QWORD *)Engine + 80))(Engine);
  xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::Reset(v40, v41, (uint64_t)v74, 1, j, v46);
  v47 = *(_QWORD *)(a1 + 8);
  if (*(float *)(v47 + 48) < 1.0)
  {
    v48 = *(_DWORD *)(v47 + 52);
    LODWORD(v88) = 0;
    if (v48)
    {
      dmlc::LogCheckFormat<int,xgboost::tree::TrainParam::SamplingMethod>((uint64_t *)&__p);
      if (__p)
      {
        v49 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v88);
        dmlc::LogMessageFatal::Entry::Init(v49, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/updater_quantile_hist.cc");
        v50 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v88);
        v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"Check failed: ", 14);
        v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"param_.sampling_method == TrainParam::kUniform", 46);
        v53 = *((char *)__p + 23);
        v54 = v53 >= 0 ? __p : *(void **)__p;
        v55 = v53 >= 0 ? *((unsigned __int8 *)__p + 23) : *((_QWORD *)__p + 1);
        v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)v54, v55);
        v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)": ", 2);
        v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"Only uniform sampling is supported, ", 36);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"gradient-based sampling is only support by GPU Hist.", 52);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v88);
        v59 = __p;
        __p = 0;
        if (v59)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&__p, (uint64_t)v59);
      }
    }
    xgboost::tree::QuantileHistMaker::Builder<float>::InitSampling(a1, a2, a4);
  }
  *(_QWORD *)(a1 + 88) = a3;
  v60 = operator new();
  v61 = v60;
  v62 = *(_QWORD *)(a1 + 8);
  v63 = *(std::__shared_weak_count **)(a1 + 24);
  v72 = *(_QWORD *)(a1 + 16);
  v73 = v63;
  if (v63)
  {
    v64 = (unint64_t *)&v63->__shared_owners_;
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 + 1, v64));
  }
  xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::HistEvaluator(v60, v62, v70, 1, (uint64_t)&v72);
  std::unique_ptr<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>>::reset[abi:ne180100]((uint64_t *)(a1 + 56), v61);
  v66 = v73;
  if (v73)
  {
    v67 = (unint64_t *)&v73->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "InitData");
  xgboost::common::Monitor::Stop();
  if (SHIBYTE(v85) < 0)
    operator delete(__p);
}

{
  __ZN7xgboost4tree17QuantileHistMaker7BuilderIfE8InitDataEPNS_7DMatrixERKNS_7RegTreeEPNSt3__16vectorINS_6detail20GradientPairInternalIfEENS9_9allocatorISD_EEEE(a1, a2, a3, a4);
}

void sub_220EFC590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v30;

  v30 = (uint64_t)__p;
  __p = 0;
  if (v30)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&__p, v30);
  _Unwind_Resume(exception_object);
}

void xgboost::tree::QuantileHistMaker::Builder<float>::ExpandTree(uint64_t a1, uint64_t a2, xgboost::RegTree *a3, float32x2_t **a4)
{
  int *v7;
  int *v8;
  int v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v16;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  void *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  xgboost::GHistIndexMatrix *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  int *v38;
  int *v39;
  uint64_t v40;
  unsigned int v41;
  std::__shared_weak_count *v42;
  unint64_t p_shared_weak_owners;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  void *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD v70[2];
  uint64_t v71;
  std::__shared_weak_count *v72;
  void **v73;
  std::__shared_weak_count *v74;
  int v75;
  void *v76;
  void *v77;
  uint64_t v78;
  char v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  int *v88;
  unint64_t v89;
  unint64_t v90;
  __int128 v91;
  uint64_t v92;
  void *__p[2];
  uint64_t v94;
  void *v95;
  void *v96;
  uint64_t v97;
  char v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  _BYTE v103[24];
  _BYTE *v104;
  uint64_t v105;

  v105 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(__p, "ExpandTree");
  xgboost::common::Monitor::Start();
  if (SHIBYTE(v94) < 0)
    operator delete(__p[0]);
  xgboost::tree::Driver<xgboost::tree::CPUExpandEntry>::Driver(&v101, *(_DWORD *)(*(_QWORD *)(a1 + 8) + 24));
  xgboost::tree::QuantileHistMaker::Builder<float>::InitRoot((_QWORD *)a1, a4, a2, (uint64_t)a3, (uint64_t)__p);
  xgboost::tree::Driver<xgboost::tree::CPUExpandEntry>::Push(&v101, (uint64_t)__p);
  if (v95)
  {
    v96 = v95;
    operator delete(v95);
  }
  xgboost::tree::Driver<xgboost::tree::CPUExpandEntry>::Pop((uint64_t)&v101, (uint64_t *)&v91);
  v7 = (int *)*((_QWORD *)&v91 + 1);
  v8 = (int *)v91;
  if ((_QWORD)v91 != *((_QWORD *)&v91 + 1))
  {
    v9 = 1;
    do
    {
      v88 = 0;
      v89 = 0;
      v90 = 0;
      v85 = 0;
      v86 = 0;
      v87 = 0;
      v10 = v8[1] + 1;
      do
      {
        if (xgboost::tree::CPUExpandEntry::IsValid((xgboost::tree::CPUExpandEntry *)v8, *(const xgboost::tree::TrainParam **)(a1 + 8), v9))
        {
          xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::ApplyTreeSplit(*(_QWORD *)(a1 + 56), v8, a3);
          v11 = v86;
          if (v86 >= v87)
          {
            v12 = std::vector<xgboost::tree::CPUExpandEntry>::__push_back_slow_path<xgboost::tree::CPUExpandEntry const&>(&v85, (uint64_t)v8);
          }
          else
          {
            std::vector<xgboost::tree::CPUExpandEntry>::__construct_one_at_end[abi:ne180100]<xgboost::tree::CPUExpandEntry const&>((uint64_t)&v85, (uint64_t)v8);
            v12 = v11 + 88;
          }
          v86 = v12;
          ++v9;
          v13 = *(_QWORD *)(a1 + 8);
          v14 = *(_DWORD *)(v13 + 12);
          if (v14 < 1 || v14 > v10)
          {
            v16 = *(_DWORD *)(v13 + 16);
            if (v16 < 1 || v16 > v9)
            {
              v18 = v89;
              if (v89 >= v90)
              {
                v19 = std::vector<xgboost::tree::CPUExpandEntry>::__emplace_back_slow_path<xgboost::tree::CPUExpandEntry const&>((uint64_t *)&v88, (uint64_t)v8);
              }
              else
              {
                std::vector<xgboost::tree::CPUExpandEntry>::__construct_one_at_end[abi:ne180100]<xgboost::tree::CPUExpandEntry const&>((uint64_t)&v88, (uint64_t)v8);
                v19 = v18 + 88;
              }
              v89 = v19;
            }
          }
        }
        v8 += 22;
      }
      while (v8 != v7);
      std::string::basic_string[abi:ne180100]<0>(__p, "UpdatePosition");
      xgboost::common::Monitor::Start();
      if (SHIBYTE(v94) < 0)
        operator delete(__p[0]);
      v20 = *(_QWORD *)(a1 + 8);
      v21 = *(_DWORD *)(v20 + 20);
      v22 = *(void **)(v20 + 128);
      LODWORD(__p[0]) = -1;
      HIDWORD(__p[0]) = v21;
      __p[1] = 0;
      v94 = 0;
      LOBYTE(v95) = 0;
      v96 = v22;
      (*(void (**)(void ***__return_ptr, uint64_t, void **))(*(_QWORD *)a2 + 104))(&v73, a2, __p);
      __p[0] = v73;
      __p[1] = v74;
      if (v74)
      {
        p_shared_owners = (unint64_t *)&v74->__shared_owners_;
        do
          v24 = __ldxr(p_shared_owners);
        while (__stxr(v24 + 1, p_shared_owners));
      }
      xgboost::BatchIterator<xgboost::GHistIndexMatrix>::BatchIterator(&v82, 0);
      v25 = 0;
      v26 = -1;
      while ((xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator!=((uint64_t *)__p) & 1) != 0)
      {
        v27 = (xgboost::GHistIndexMatrix *)xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator*((uint64_t *)__p);
        v28 = *(_QWORD *)(a1 + 64);
        if (0xF0F0F0F0F0F0F0F1 * ((*(_QWORD *)(a1 + 72) - v28) >> 3) <= ++v26)
          std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_out_of_range[abi:ne180100]();
        xgboost::tree::HistRowPartitioner::UpdatePosition((uint64_t *)(v28 + v25), v27, &v85, a3);
        v25 += 136;
        xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator++((uint64_t *)__p);
      }
      v29 = v83;
      if (v83)
      {
        v30 = (unint64_t *)&v83->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      v32 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v33 = (unint64_t *)((char *)__p[1] + 8);
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      v35 = v74;
      if (v74)
      {
        v36 = (unint64_t *)&v74->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "UpdatePosition");
      xgboost::common::Monitor::Stop();
      if (SHIBYTE(v94) < 0)
        operator delete(__p[0]);
      v82 = 0;
      v83 = 0;
      v84 = 0;
      if (v88 == (int *)v89)
      {
        v66 = 0;
        v65 = 0;
      }
      else
      {
        xgboost::tree::QuantileHistMaker::Builder<float>::BuildHistogram((_QWORD *)a1, a2, (uint64_t)a3, &v88, (uint64_t)a4);
        v38 = v88;
        v39 = (int *)v89;
        while (v38 != v39)
        {
          v40 = *((_QWORD *)a3 + 20) + 20 * *v38;
          v41 = *(_DWORD *)(v40 + 4);
          LODWORD(v40) = *(_DWORD *)(v40 + 8);
          __p[0] = (void *)__PAIR64__(v10, v41);
          LODWORD(v94) = 0;
          v96 = 0;
          v97 = 0;
          v95 = 0;
          v98 = 0;
          v99 = 0u;
          v100 = 0u;
          __p[1] = 0;
          v73 = (void **)__PAIR64__(v10, v40);
          v75 = 0;
          v77 = 0;
          v78 = 0;
          v76 = 0;
          v79 = 0;
          v80 = 0u;
          v81 = 0u;
          v74 = 0;
          v42 = v83;
          if ((unint64_t)v83 >= v84)
          {
            p_shared_weak_owners = std::vector<xgboost::tree::CPUExpandEntry>::__push_back_slow_path<xgboost::tree::CPUExpandEntry const&>(&v82, (uint64_t)__p);
          }
          else
          {
            std::vector<xgboost::tree::CPUExpandEntry>::__construct_one_at_end[abi:ne180100]<xgboost::tree::CPUExpandEntry const&>((uint64_t)&v82, (uint64_t)__p);
            p_shared_weak_owners = (unint64_t)&v42[3].__shared_weak_owners_;
          }
          v83 = (std::__shared_weak_count *)p_shared_weak_owners;
          if (p_shared_weak_owners >= v84)
          {
            v44 = std::vector<xgboost::tree::CPUExpandEntry>::__push_back_slow_path<xgboost::tree::CPUExpandEntry const&>(&v82, (uint64_t)&v73);
          }
          else
          {
            std::vector<xgboost::tree::CPUExpandEntry>::__construct_one_at_end[abi:ne180100]<xgboost::tree::CPUExpandEntry const&>((uint64_t)&v82, (uint64_t)&v73);
            v44 = p_shared_weak_owners + 88;
          }
          v83 = (std::__shared_weak_count *)v44;
          if (v76)
          {
            v77 = v76;
            operator delete(v76);
          }
          if (v95)
          {
            v96 = v95;
            operator delete(v95);
          }
          v38 += 22;
        }
        v45 = *(_QWORD *)(a1 + 104);
        v46 = *(uint64_t **)((**(uint64_t (***)(uint64_t))a2)(a2) + 168);
        v47 = *v46;
        v48 = v46[1];
        v49 = *(_QWORD *)(a1 + 8);
        v50 = *(_DWORD *)(v49 + 20);
        v51 = *(void **)(v49 + 128);
        LODWORD(__p[0]) = -1;
        HIDWORD(__p[0]) = v50;
        __p[1] = 0;
        v94 = 0;
        LOBYTE(v95) = 0;
        v96 = v51;
        (*(void (**)(void ***__return_ptr, uint64_t, void **))(*(_QWORD *)a2 + 104))(&v73, a2, __p);
        __p[0] = v73;
        __p[1] = v74;
        if (v74)
        {
          v52 = (unint64_t *)&v74->__shared_owners_;
          do
            v53 = __ldxr(v52);
          while (__stxr(v53 + 1, v52));
        }
        xgboost::BatchIterator<xgboost::GHistIndexMatrix>::BatchIterator(&v71, 0);
        if ((xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator!=((uint64_t *)__p) & 1) != 0)
        {
          v54 = xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator*((uint64_t *)__p);
          v55 = *(_QWORD *)(a1 + 56);
          v70[0] = v48 - v47;
          v70[1] = v47;
          xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(v55, v45, v54 + 112, (uint64_t)v70, (uint64_t)a3, &v82);
        }
        v56 = v72;
        if (v72)
        {
          v57 = (unint64_t *)&v72->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        v59 = (std::__shared_weak_count *)__p[1];
        if (__p[1])
        {
          v60 = (unint64_t *)((char *)__p[1] + 8);
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 - 1, v60));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
        v62 = v74;
        if (v74)
        {
          v63 = (unint64_t *)&v74->__shared_owners_;
          do
            v64 = __ldaxr(v63);
          while (__stlxr(v64 - 1, v63));
          if (!v64)
          {
            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
            std::__shared_weak_count::__release_weak(v62);
          }
        }
        v65 = v82;
        v66 = (uint64_t)v83;
      }
      xgboost::tree::Driver<xgboost::tree::CPUExpandEntry>::Push<std::__wrap_iter<xgboost::tree::CPUExpandEntry*>>(&v101, v65, v66);
      xgboost::tree::Driver<xgboost::tree::CPUExpandEntry>::Pop((uint64_t)&v101, (uint64_t *)__p);
      std::vector<xgboost::tree::CPUExpandEntry>::__vdeallocate((uint64_t *)&v91);
      v91 = *(_OWORD *)__p;
      v92 = v94;
      __p[1] = 0;
      v94 = 0;
      __p[0] = 0;
      v73 = __p;
      std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100](&v73);
      __p[0] = &v82;
      std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      __p[0] = &v85;
      std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      __p[0] = &v88;
      std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      v7 = (int *)*((_QWORD *)&v91 + 1);
      v8 = (int *)v91;
    }
    while ((_QWORD)v91 != *((_QWORD *)&v91 + 1));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ExpandTree");
  xgboost::common::Monitor::Stop();
  if (SHIBYTE(v94) < 0)
    operator delete(__p[0]);
  __p[0] = &v91;
  std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v67 = v104;
  if (v104 == v103)
  {
    v68 = 4;
    v67 = v103;
    goto LABEL_94;
  }
  if (v104)
  {
    v68 = 5;
LABEL_94:
    (*(void (**)(void))(*v67 + 8 * v68))();
  }
  __p[0] = &v102;
  std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

{
  __ZN7xgboost4tree17QuantileHistMaker7BuilderIfE10ExpandTreeEPNS_7DMatrixEPNS_7RegTreeERKNSt3__16vectorINS_6detail20GradientPairInternalIfEENS8_9allocatorISC_EEEE(a1, a2, a3, a4);
}

void sub_220EFCE0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48)
{
  uint64_t v48;

  if (a46 < 0)
    operator delete(__p);
  __p = &a37;
  std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  xgboost::tree::Driver<xgboost::tree::CPUExpandEntry>::~Driver(v48 - 160);
  _Unwind_Resume(a1);
}

uint64_t xgboost::tree::QuantileHistMaker::Builder<float>::UpdatePredictionCache(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  std::string *Entry;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  void *ptr;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  std::string *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  int v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  uint64_t v31;
  std::string *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  int v36;
  void *v37;
  uint64_t v38;
  _QWORD *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t FirstDimension;
  uint64_t Range;
  uint64_t v58;
  int8x16_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  float v64;
  uint64_t v65;
  float v66;
  unint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  std::string *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  int v74;
  void *v75;
  uint64_t v76;
  _QWORD *v77;
  void *v78;
  std::string *v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t i;
  uint64_t v83;
  float *v84;
  uint64_t v85;
  void *v86[2];
  void *__p[2];
  __int128 v88;
  unint64_t v89;
  _QWORD v90[7];
  int8x16_t v91;
  std::exception_ptr v92;
  std::mutex v93;
  uint64_t v94;

  v94 = *MEMORY[0x24BDAC8D0];
  v3 = a1[12];
  if (!v3)
    return 0;
  if (v3 != a2 || a1[11] == 0)
    return 0;
  std::string::basic_string[abi:ne180100]<0>(&v92, "UpdatePredictionCache");
  xgboost::common::Monitor::Start();
  if (v93.__m_.__opaque[7] < 0)
    operator delete(v92.__ptr_);
  v90[0] = a3[5];
  if (v90[0] != *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long long>((uint64_t *)&v92);
    if (v92.__ptr_)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v90);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/updater_quantile_hist.cc");
      v10 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v90);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: ", 14);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"out_preds.Size() == data->Info().num_row_", 41);
      v13 = *((char *)v92.__ptr_ + 23);
      v14 = v13 >= 0 ? v92.__ptr_ : *(void **)v92.__ptr_;
      v15 = v13 >= 0 ? *((unsigned __int8 *)v92.__ptr_ + 23) : *((_QWORD *)v92.__ptr_ + 1);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v14, v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v90);
      ptr = v92.__ptr_;
      v92.__ptr_ = 0;
      if (ptr)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v92, (uint64_t)ptr);
    }
  }
  v83 = a1[7];
  v84 = (float *)a1[1];
  v85 = a1[11];
  v18 = *a3;
  v19 = a3[2];
  v20 = a3[4];
  v21 = *((_DWORD *)a3 + 12);
  v90[0] = a3[5];
  LODWORD(v86[0]) = 0;
  if (!v90[0])
  {
    dmlc::LogCheckFormat<unsigned long,unsigned int>((uint64_t *)&v92);
    if (v92.__ptr_)
    {
      v70 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v90);
      dmlc::LogMessageFatal::Entry::Init(v70, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/./hist/evaluate_splits.h");
      v71 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v90);
      v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)"Check failed: ", 14);
      v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"out_preds.Size() > 0U", 21);
      v74 = *((char *)v92.__ptr_ + 23);
      v75 = v74 >= 0 ? v92.__ptr_ : *(void **)v92.__ptr_;
      v76 = v74 >= 0 ? *((unsigned __int8 *)v92.__ptr_ + 23) : *((_QWORD *)v92.__ptr_ + 1);
      v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)v75, v76);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v90);
      v78 = v92.__ptr_;
      v92.__ptr_ = 0;
      if (v78)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v92, (uint64_t)v78);
    }
  }
  if (!v85)
  {
    v79 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v92);
    dmlc::LogMessageFatal::Entry::Init(v79, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/./hist/evaluate_splits.h");
    v80 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v92);
    v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"Check failed: p_last_tree", 25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v92);
  }
  xgboost::tree::TreeEvaluator::GetEvaluator<xgboost::tree::TrainParam>((uint64_t **)(v83 + 152), (uint64_t)v90);
  LODWORD(v86[0]) = v21;
  v91.i32[0] = -1;
  if (v21 != -1)
  {
    dmlc::LogCheckFormat<int,int>((uint64_t *)&v92);
    if (v92.__ptr_)
    {
      v22 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v86);
      dmlc::LogMessageFatal::Entry::Init(v22, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/./hist/evaluate_splits.h");
      v23 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v86);
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Check failed: ", 14);
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"out_preds.DeviceIdx() == GenericParameter::kCpuId", 49);
      v26 = *((char *)v92.__ptr_ + 23);
      v27 = v26 >= 0 ? v92.__ptr_ : *(void **)v92.__ptr_;
      v28 = v26 >= 0 ? *((unsigned __int8 *)v92.__ptr_ + 23) : *((_QWORD *)v92.__ptr_ + 1);
      v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v27, v28);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v86);
      v30 = v92.__ptr_;
      v92.__ptr_ = 0;
      if (v30)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v92, (uint64_t)v30);
    }
  }
  v89 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v85 + 168) - *(_QWORD *)(v85 + 160)) >> 2);
  v31 = a1[8];
  for (i = a1[9]; v31 != i; v31 += 136)
  {
    v86[0] = (void *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v31 + 112) - *(_QWORD *)(v31 + 104)) >> 3));
    if (v86[0] != (void *)v89)
    {
      dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v92);
      if (v92.__ptr_)
      {
        v32 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v86);
        dmlc::LogMessageFatal::Entry::Init(v32, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/./hist/evaluate_splits.h");
        v33 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v86);
        v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Check failed: ", 14);
        v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"part.Size() == n_nodes", 22);
        v36 = *((char *)v92.__ptr_ + 23);
        v37 = v36 >= 0 ? v92.__ptr_ : *(void **)v92.__ptr_;
        v38 = v36 >= 0 ? *((unsigned __int8 *)v92.__ptr_ + 23) : *((_QWORD *)v92.__ptr_ + 1);
        v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v37, v38);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v86);
        v40 = v92.__ptr_;
        v92.__ptr_ = 0;
        if (v40)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v92, (uint64_t)v40);
      }
    }
    v41 = *(_QWORD *)(v31 + 104);
    v42 = *(_QWORD *)(v31 + 112);
    *(_OWORD *)v86 = 0u;
    *(_OWORD *)__p = 0u;
    v88 = 0u;
    v43 = v42 - v41;
    if (v43)
    {
      v44 = 0;
      v45 = 0xAAAAAAAAAAAAAAABLL * (v43 >> 3);
      do
      {
        v46 = *(_QWORD *)(*(_QWORD *)(v31 + 104) + 24 * v44 + 8)
            - *(_QWORD *)(*(_QWORD *)(v31 + 104) + 24 * v44);
        v47 = v46 >> 3;
        if ((v46 & 0x1FF8) != 0)
          v48 = ((unint64_t)(v46 >> 3) >> 10) + 1;
        else
          v48 = (unint64_t)(v46 >> 3) >> 10;
        if (v48)
        {
          v49 = 0;
          do
          {
            v50 = v49 + 1024;
            if (v47 >= v49 + 1024)
              v51 = v49 + 1024;
            else
              v51 = v47;
            xgboost::common::BlockedSpace2d::AddBlock((xgboost::common::BlockedSpace2d *)v86, v44, v49, v51);
            v49 = v50;
            --v48;
          }
          while (v48);
        }
        ++v44;
      }
      while (v44 != v45);
      v52 = v86[0];
      v43 = (uint64_t)v86[1];
    }
    else
    {
      v52 = 0;
    }
    v92.__ptr_ = 0;
    v93.__m_.__sig = 850045863;
    memset(v93.__m_.__opaque, 0, sizeof(v93.__m_.__opaque));
    v53 = v43 - (_QWORD)v52;
    if (v53)
    {
      v54 = 0;
      v55 = v53 >> 4;
      do
      {
        FirstDimension = xgboost::common::BlockedSpace2d::GetFirstDimension((xgboost::common::BlockedSpace2d *)v86, v54);
        Range = xgboost::common::BlockedSpace2d::GetRange((xgboost::common::BlockedSpace2d *)v86, v54);
        v60 = *(_QWORD *)(v85 + 160);
        if (*(_DWORD *)(v60 + 20 * (int)FirstDimension + 12) != -1
          && *(_DWORD *)(v60 + 20 * (int)FirstDimension + 4) == -1)
        {
          v61 = Range;
          v62 = v58;
          v63 = *(_QWORD *)(v31 + 104);
          v91 = *(int8x16_t *)(*(_QWORD *)(v83 + 296) + 24 * FirstDimension);
          v64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeight((uint64_t)v90, FirstDimension, v84, (double *)v91.i64, v91, v59);
          if (v61 < v62)
          {
            v65 = *(_QWORD *)(v63 + 24 * FirstDimension);
            v66 = v64 * v84[1];
            v67 = v65 + 8 * v62;
            v68 = (_QWORD *)(v65 + 8 * v61);
            do
            {
              v69 = *v68 * v18;
              if (v69 >= v19)
                __assert_rtn("operator()", "linalg.h", 412, "offset < data_.size() && \"Out of bound access.\"");
              *(float *)(v20 + 4 * v69) = v66 + *(float *)(v20 + 4 * v69);
              ++v68;
            }
            while ((unint64_t)v68 < v67);
          }
        }
        ++v54;
      }
      while (v54 != v55);
    }
    dmlc::OMPException::Rethrow(&v92);
    std::mutex::~mutex(&v93);
    std::exception_ptr::~exception_ptr(&v92);
    if (__p[1])
    {
      *(void **)&v88 = __p[1];
      operator delete(__p[1]);
    }
    if (v86[0])
    {
      v86[1] = v86[0];
      operator delete(v86[0]);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v92, "UpdatePredictionCache");
  xgboost::common::Monitor::Stop();
  if (v93.__m_.__opaque[7] < 0)
    operator delete(v92.__ptr_);
  return 1;
}

{
  return __ZNK7xgboost4tree17QuantileHistMaker7BuilderIfE21UpdatePredictionCacheEPKNS_7DMatrixENS_6linalg10TensorViewIfLi1EEE(a1, a2, a3);
}

void sub_220EFD6E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v1 - 168));
  _Unwind_Resume(a1);
}

void sub_220EFD6F8()
{
  uint64_t v0;
  std::mutex *v1;
  uint64_t v2;

  __cxa_end_catch();
  std::mutex::~mutex(v1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v0 - 168));
  xgboost::common::Index::~Index((xgboost::common::Index *)&v2);
  JUMPOUT(0x220EFD7FCLL);
}

void sub_220EFD704()
{
  uint64_t v0;
  std::mutex *v1;
  uint64_t v2;

  __cxa_end_catch();
  std::mutex::~mutex(v1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v0 - 168));
  xgboost::common::Index::~Index((xgboost::common::Index *)&v2);
  JUMPOUT(0x220EFD7FCLL);
}

void sub_220EFD714(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_220EFD7A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x220EFD7B0);
}

void sub_220EFD7C8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_220EFD7D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  if (a17)
    JUMPOUT(0x220EFD7F8);
  _Unwind_Resume(a1);
}

void xgboost::tree::QuantileHistMaker::Builder<float>::InitSampling(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v6;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *v7;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v8;
  uint64_t v9;
  float v10;
  double v11;
  uint64_t v12;
  float *v13;
  void *v14;
  char v15;
  void *__p;
  std::mutex v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&__p, "InitSampling");
  xgboost::common::Monitor::Start();
  if (v17.__m_.__opaque[7] < 0)
    operator delete(__p);
  v6 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  v7 = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)dmlc::ThreadLocalStore<xgboost::common::RandomThreadLocalEntry>::Get();
  v8 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(v7);
  v9 = *v6;
  v10 = *(float *)(*(_QWORD *)(a1 + 8) + 48);
  __p = 0;
  v17.__m_.__sig = 850045863;
  memset(v17.__m_.__opaque, 0, sizeof(v17.__m_.__opaque));
  if (v9)
  {
    v11 = v10;
    if (v8 <= 1)
      v12 = 1;
    else
      v12 = v8;
    v13 = (float *)(*a3 + 4);
    do
    {
      if (*v13 < 0.0
        || (v12 = (16807 * v12) & 0x7FFFFFFFFFFFFFFFLL, (double)(unint64_t)(v12 - 1) * 1.08420217e-19 + 0.0 >= v11))
      {
        *(v13 - 1) = 0.0;
        *v13 = 0.0;
      }
      v13 += 2;
      --v9;
    }
    while (v9);
  }
  dmlc::OMPException::Rethrow((std::exception_ptr *)&__p);
  std::string::basic_string[abi:ne180100]<0>(&v14, "InitSampling");
  xgboost::common::Monitor::Stop();
  if (v15 < 0)
    operator delete(v14);
  std::mutex::~mutex(&v17);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&__p);
}

{
  __ZN7xgboost4tree17QuantileHistMaker7BuilderIfE12InitSamplingERKNS_7DMatrixEPNSt3__16vectorINS_6detail20GradientPairInternalIfEENS7_9allocatorISB_EEEE(a1, a2, a3);
}

void sub_220EFD98C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::exception_ptr a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::mutex *v21;

  if (a15 < 0)
    operator delete(__p);
  std::mutex::~mutex(v21);
  std::exception_ptr::~exception_ptr(&a16);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::~HistEvaluator(result);
    JUMPOUT(0x227667068);
  }
  return result;
}

void xgboost::tree::QuantileHistMaker::Builder<float>::InitRoot(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, float32x2_t **a4@<X3>, uint64_t a5@<X8>)
{
  int *v5;
  int v6;
  int v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int32 v12;
  void *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  rabit::engine *v33;
  uint64_t v34;
  __int32 v35;
  void *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  char **v46;
  uint64_t v47;
  std::string *Entry;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  float32x2_t v60;
  uint64_t v61;
  float32x2_t *v62;
  _QWORD *v63;
  float32x2_t v64;
  float32x2_t *v65;
  float32x2_t *v66;
  float32x2_t v67;
  float32x2_t v68;
  void *Engine;
  uint64_t v70;
  _QWORD *v71;
  float inited;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int32 v81;
  void *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  float64_t v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  uint64_t v103;
  uint64_t *v106;
  __int128 *v107;
  _QWORD v109[2];
  void *v110;
  void *v111;
  uint64_t v112;
  void *__p;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  float32x2_t v118;
  std::__shared_weak_count *v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  float64x2_t v122;
  uint64_t v123;
  void *v124;
  _BYTE *v125;
  void *v126;
  _BYTE *v127;
  float64x2_t v128;
  float64x2_t v129;
  uint64_t v130;
  void *v131;
  void *v132;
  uint64_t v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  _QWORD v137[3];

  v137[0] = *MEMORY[0x24BDAC8D0];
  v5 = *(int **)(a3 + 160);
  v6 = *v5;
  if (*v5 == -1)
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    do
    {
      ++v7;
      v6 = v5[5 * (v6 & 0x7FFFFFFF)];
    }
    while (v6 != -1);
  }
  *(_DWORD *)a5 = 0;
  *(_DWORD *)(a5 + 4) = v7;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 24) = 0;
  *(_DWORD *)(a5 + 16) = 0;
  *(_QWORD *)(a5 + 32) = 0;
  *(_QWORD *)(a5 + 40) = 0;
  *(_BYTE *)(a5 + 48) = 0;
  *(_OWORD *)(a5 + 56) = 0u;
  *(_OWORD *)(a5 + 72) = 0u;
  v106 = (uint64_t *)(a5 + 8);
  v107 = (__int128 *)(a5 + 48);
  v8 = *(_QWORD *)(a5 + 8);
  v103 = *(_QWORD *)a5;
  v129.f64[0] = *(float64_t *)a5;
  *(_QWORD *)&v129.f64[1] = v8;
  LODWORD(v130) = 0;
  v131 = 0;
  v132 = 0;
  v9 = *(_OWORD *)(a5 + 64);
  v134 = *(_OWORD *)(a5 + 48);
  v135 = v9;
  v10 = *(_QWORD *)(a5 + 80);
  v133 = 0;
  v136 = v10;
  v123 = 0;
  v122 = 0uLL;
  *(_QWORD *)&v128.f64[0] = &v122;
  LOBYTE(v128.f64[1]) = 0;
  *(_QWORD *)&v122.f64[0] = operator new(0x58uLL);
  v122.f64[1] = v122.f64[0];
  v123 = *(_QWORD *)&v122.f64[0] + 88;
  *(_QWORD *)&v122.f64[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<xgboost::tree::CPUExpandEntry>,xgboost::tree::CPUExpandEntry const*,xgboost::tree::CPUExpandEntry const*,xgboost::tree::CPUExpandEntry*>((uint64_t)&v123, (uint64_t)&v129, (uint64_t)v137, *(uint64_t *)&v122.f64[0]);
  xgboost::tree::ConstructHistSpace<std::vector<xgboost::tree::HistRowPartitioner>>((xgboost::common::BlockedSpace2d *)&v124, a1 + 8, (uint64_t *)&v122);
  *(_QWORD *)&v128.f64[0] = &v122;
  std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v128);
  if (v131)
  {
    v132 = v131;
    operator delete(v131);
  }
  v11 = a1[1];
  v12 = *(_DWORD *)(v11 + 20);
  v13 = *(void **)(v11 + 128);
  LODWORD(v129.f64[0]) = -1;
  HIDWORD(v129.f64[0]) = v12;
  v129.f64[1] = 0.0;
  v130 = 0;
  LOBYTE(v131) = 0;
  v132 = v13;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, float64x2_t *))(*(_QWORD *)a2 + 104))(&v120, a2, &v129);
  v118 = (float32x2_t)v120;
  v119 = v121;
  if (v121)
  {
    p_shared_owners = (unint64_t *)&v121->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  xgboost::BatchIterator<xgboost::GHistIndexMatrix>::BatchIterator(&v116, 0);
  v16 = 0;
  v17 = 80;
  while ((xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator!=((uint64_t *)&v118) & 1) != 0)
  {
    v18 = xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator*((uint64_t *)&v118);
    *(_QWORD *)&v129.f64[0] = v103;
    *(_QWORD *)&v129.f64[1] = *v106;
    LODWORD(v130) = *(_DWORD *)(a5 + 16);
    v132 = 0;
    v133 = 0;
    v131 = 0;
    v19 = *(_OWORD *)(a5 + 64);
    v134 = *v107;
    v135 = v19;
    v136 = *(_QWORD *)(a5 + 80);
    v122 = 0uLL;
    v123 = 0;
    *(_QWORD *)&v128.f64[0] = &v122;
    LOBYTE(v128.f64[1]) = 0;
    *(_QWORD *)&v122.f64[0] = operator new(0x58uLL);
    v122.f64[1] = v122.f64[0];
    v123 = *(_QWORD *)&v122.f64[0] + 88;
    *(_QWORD *)&v122.f64[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<xgboost::tree::CPUExpandEntry>,xgboost::tree::CPUExpandEntry const*,xgboost::tree::CPUExpandEntry const*,xgboost::tree::CPUExpandEntry*>((uint64_t)&v123, (uint64_t)&v129, (uint64_t)v137, *(uint64_t *)&v122.f64[0]);
    if (v131)
    {
      v132 = v131;
      operator delete(v131);
    }
    v129 = 0uLL;
    v130 = 0;
    v20 = a1[13];
    v111 = 0;
    v112 = 0;
    v110 = 0;
    std::vector<xgboost::common::Range1d>::__init_with_size[abi:ne180100]<xgboost::common::Range1d*,xgboost::common::Range1d*>(&v110, v124, (uint64_t)v125, (v125 - (_BYTE *)v124) >> 4);
    __p = 0;
    v114 = 0;
    v115 = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v126, (uint64_t)v127, (v127 - (_BYTE *)v126) >> 3);
    v21 = a1[8];
    if (0xF0F0F0F0F0F0F0F1 * ((a1[9] - v21) >> 3) <= v16)
      std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_out_of_range[abi:ne180100]();
    xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::BuildHist(v20, v16, (uint64_t)&v110, v18, a3, v21 + v17, (int **)&v122, (int **)&v129, (uint64_t)a4);
    if (__p)
    {
      v114 = __p;
      operator delete(__p);
    }
    if (v110)
    {
      v111 = v110;
      operator delete(v110);
    }
    ++v16;
    *(_QWORD *)&v128.f64[0] = &v129;
    std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v128);
    *(_QWORD *)&v129.f64[0] = &v122;
    std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
    v17 += 136;
    xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator++((uint64_t *)&v118);
  }
  v22 = v117;
  if (v117)
  {
    v23 = (unint64_t *)&v117->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v119;
  if (v119)
  {
    v26 = (unint64_t *)&v119->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v121;
  if (v121)
  {
    v29 = (unint64_t *)&v121->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v118 = 0;
  v31 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) + 16);
  v32 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  v33 = (rabit::engine *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  if (v31 != *((_QWORD *)v33 + 1) * v32)
  {
    v65 = *a4;
    v66 = a4[1];
    if (*a4 != v66)
    {
      v67 = v118;
      do
      {
        v68 = *v65++;
        v67 = vadd_f32(v67, v68);
        v118 = v67;
      }
      while (v65 != v66);
    }
    Engine = rabit::engine::GetEngine(v33);
    (*(void (**)(void *, float32x2_t *, uint64_t, uint64_t, float (*)(float *, float *, int), _QWORD, _QWORD))(*(_QWORD *)Engine + 8))(Engine, &v118, 4, 2, rabit::op::Reducer<rabit::op::Sum,float>, 0, 0);
    v60 = v118;
    goto LABEL_68;
  }
  v34 = a1[1];
  v35 = *(_DWORD *)(v34 + 20);
  v36 = *(void **)(v34 + 128);
  LODWORD(v129.f64[0]) = -1;
  HIDWORD(v129.f64[0]) = v35;
  v129.f64[1] = 0.0;
  v130 = 0;
  LOBYTE(v131) = 0;
  v132 = v36;
  (*(void (**)(float64x2_t *__return_ptr, uint64_t, float64x2_t *))(*(_QWORD *)a2 + 104))(&v128, a2, &v129);
  v122 = v128;
  if (*(_QWORD *)&v128.f64[1])
  {
    v37 = (unint64_t *)(*(_QWORD *)&v128.f64[1] + 8);
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  v39 = xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator*((uint64_t *)&v122);
  v40 = *(std::__shared_weak_count **)&v122.f64[1];
  if (*(_QWORD *)&v122.f64[1])
  {
    v41 = (unint64_t *)(*(_QWORD *)&v122.f64[1] + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = *(std::__shared_weak_count **)&v128.f64[1];
  if (*(_QWORD *)&v128.f64[1])
  {
    v44 = (unint64_t *)(*(_QWORD *)&v128.f64[1] + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = *(char ***)(v39 + 128);
  v47 = v46[1] - *v46;
  *(_QWORD *)&v122.f64[0] = v47 >> 2;
  LODWORD(v128.f64[0]) = 2;
  if ((unint64_t)v47 < 8)
  {
    dmlc::LogCheckFormat<unsigned long,int>((uint64_t *)&v129);
    if (*(_QWORD *)&v129.f64[0])
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v122);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/updater_quantile_hist.cc");
      v49 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v122);
      v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"Check failed: ", 14);
      v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"row_ptr.size() >= 2", 19);
      v52 = *(char *)(*(_QWORD *)&v129.f64[0] + 23);
      v53 = v52 >= 0 ? *(_QWORD *)&v129.f64[0] : **(_QWORD **)&v129.f64[0];
      v54 = v52 >= 0 ? *(unsigned __int8 *)(*(_QWORD *)&v129.f64[0] + 23) : *(_QWORD *)(*(_QWORD *)&v129.f64[0] + 8);
      v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, v53, v54);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v122);
      v56 = *(_QWORD *)&v129.f64[0];
      v129.f64[0] = 0.0;
      if (v56)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v129, v56);
    }
  }
  v57 = *v46;
  v58 = *(unsigned int *)*v46;
  v59 = *((unsigned int *)v57 + 1);
  xgboost::common::HistCollection<float>::operator[]((unsigned int *)a1[13], 0, &v129);
  v60 = v118;
  if (v58 >= v59)
  {
LABEL_68:
    v63 = a1;
    goto LABEL_69;
  }
  v61 = v59 - v58;
  v62 = (float32x2_t *)(*(_QWORD *)&v129.f64[1] + 8 * v58);
  v63 = a1;
  do
  {
    v64 = *v62++;
    v60 = vadd_f32(v60, v64);
    v118 = v60;
    --v61;
  }
  while (v61);
LABEL_69:
  v70 = v63[7];
  v129 = vcvtq_f64_f32(v60);
  v71 = v63;
  inited = xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::InitRoot(v70, (int8x16_t *)&v129);
  v73 = *(_QWORD *)(a3 + 208);
  *(_DWORD *)(v73 + 4) = v118.i32[1];
  *(float *)(v73 + 8) = inited;
  v74 = *(_QWORD *)(a3 + 160);
  *(float *)(v74 + 16) = inited * *(float *)(v71[1] + 4);
  *(_QWORD *)(v74 + 4) = -1;
  v75 = *v106;
  v129.f64[0] = *(float64_t *)a5;
  *(_QWORD *)&v129.f64[1] = v75;
  LODWORD(v130) = *(_DWORD *)(a5 + 16);
  v132 = 0;
  v133 = 0;
  v131 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v131, *(const void **)(a5 + 24), *(_QWORD *)(a5 + 32), (uint64_t)(*(_QWORD *)(a5 + 32) - *(_QWORD *)(a5 + 24)) >> 2);
  v76 = *(_OWORD *)(a5 + 64);
  v134 = *v107;
  v135 = v76;
  v136 = *(_QWORD *)(a5 + 80);
  v123 = 0;
  v122 = 0uLL;
  *(_QWORD *)&v128.f64[0] = &v122;
  LOBYTE(v128.f64[1]) = 0;
  *(_QWORD *)&v122.f64[0] = operator new(0x58uLL);
  v122.f64[1] = v122.f64[0];
  v123 = *(_QWORD *)&v122.f64[0] + 88;
  *(_QWORD *)&v122.f64[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<xgboost::tree::CPUExpandEntry>,xgboost::tree::CPUExpandEntry const*,xgboost::tree::CPUExpandEntry const*,xgboost::tree::CPUExpandEntry*>((uint64_t)&v123, (uint64_t)&v129, (uint64_t)v137, *(uint64_t *)&v122.f64[0]);
  if (v131)
  {
    v132 = v131;
    operator delete(v131);
  }
  std::string::basic_string[abi:ne180100]<0>(&v129, "EvaluateSplits");
  xgboost::common::Monitor::Start();
  if (SHIBYTE(v130) < 0)
    operator delete(*(void **)&v129.f64[0]);
  v77 = *(uint64_t **)((**(uint64_t (***)(uint64_t))a2)(a2) + 168);
  v78 = *v77;
  v79 = v77[1];
  v80 = a1[1];
  v81 = *(_DWORD *)(v80 + 20);
  v82 = *(void **)(v80 + 128);
  LODWORD(v129.f64[0]) = -1;
  HIDWORD(v129.f64[0]) = v81;
  v129.f64[1] = 0.0;
  v130 = 0;
  LOBYTE(v131) = 0;
  v132 = v82;
  (*(void (**)(float64x2_t *__return_ptr, uint64_t, float64x2_t *))(*(_QWORD *)a2 + 104))(&v128, a2, &v129);
  v129 = v128;
  if (*(_QWORD *)&v128.f64[1])
  {
    v83 = (unint64_t *)(*(_QWORD *)&v128.f64[1] + 8);
    do
      v84 = __ldxr(v83);
    while (__stxr(v84 + 1, v83));
  }
  xgboost::BatchIterator<xgboost::GHistIndexMatrix>::BatchIterator(&v120, 0);
  if ((xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator!=((uint64_t *)&v129) & 1) != 0)
  {
    v85 = xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator*((uint64_t *)&v129);
    v86 = a1[7];
    v87 = a1[13];
    v109[0] = v79 - v78;
    v109[1] = v78;
    xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::EvaluateSplits(v86, v87, v85 + 112, (uint64_t)v109, a3, (uint64_t *)&v122);
  }
  v88 = v121;
  if (v121)
  {
    v89 = (unint64_t *)&v121->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = *(std::__shared_weak_count **)&v129.f64[1];
  if (*(_QWORD *)&v129.f64[1])
  {
    v92 = (unint64_t *)(*(_QWORD *)&v129.f64[1] + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v94 = *(std::__shared_weak_count **)&v128.f64[1];
  if (*(_QWORD *)&v128.f64[1])
  {
    v95 = (unint64_t *)(*(_QWORD *)&v128.f64[1] + 8);
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v129, "EvaluateSplits");
  xgboost::common::Monitor::Stop();
  if (SHIBYTE(v130) < 0)
    operator delete(*(void **)&v129.f64[0]);
  v97 = v122.f64[0];
  *(_QWORD *)a5 = **(_QWORD **)&v122.f64[0];
  v98 = *(_QWORD *)(*(_QWORD *)&v97 + 8);
  *(_DWORD *)(a5 + 16) = *(_DWORD *)(*(_QWORD *)&v97 + 16);
  *v106 = v98;
  if (*(_QWORD *)&v97 != a5)
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a5 + 24), *(char **)(*(_QWORD *)&v97 + 24), *(_QWORD *)(*(_QWORD *)&v97 + 32), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v97 + 32) - *(_QWORD *)(*(_QWORD *)&v97 + 24)) >> 2);
  v99 = *(_OWORD *)(*(_QWORD *)&v97 + 48);
  v100 = *(_OWORD *)(*(_QWORD *)&v97 + 64);
  *(_QWORD *)(a5 + 80) = *(_QWORD *)(*(_QWORD *)&v97 + 80);
  *v107 = v99;
  *(_OWORD *)(a5 + 64) = v100;
  *(_QWORD *)&v129.f64[0] = &v122;
  std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
  if (v126)
  {
    v127 = v126;
    operator delete(v126);
  }
  if (v124)
  {
    v125 = v124;
    operator delete(v124);
  }
}

void sub_220EFE478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,char a37)
{
  void *v38;

  xgboost::common::Index::~Index((xgboost::common::Index *)&a37);
  v38 = *a11;
  if (*a11)
  {
    *(_QWORD *)(a12 + 32) = v38;
    operator delete(v38);
  }
  _Unwind_Resume(a1);
}

void xgboost::tree::ConstructHistSpace<std::vector<xgboost::tree::HistRowPartitioner>>(xgboost::common::BlockedSpace2d *a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  int v28;
  void *__p;
  void *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  void *v35[3];

  v6 = 0x2E8BA2E8BA2E8BA3 * ((a3[1] - *a3) >> 3);
  v27[0] = 0;
  std::vector<unsigned long>::vector(v35, v6, v27);
  v7 = *a2;
  v26 = a2[1];
  if (*a2 != v26)
  {
    do
    {
      v9 = *a3;
      v8 = a3[1];
      if (*a3 != v8)
      {
        v10 = 0;
        do
        {
          v27[0] = *(_QWORD *)v9;
          v11 = *(_QWORD *)(v9 + 8);
          v28 = *(_DWORD *)(v9 + 16);
          v27[1] = v11;
          v30 = 0;
          v31 = 0;
          __p = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v9 + 24), *(_QWORD *)(v9 + 32), (uint64_t)(*(_QWORD *)(v9 + 32) - *(_QWORD *)(v9 + 24)) >> 2);
          v12 = *(_OWORD *)(v9 + 48);
          v13 = *(_OWORD *)(v9 + 64);
          v34 = *(_QWORD *)(v9 + 80);
          v32 = v12;
          v33 = v13;
          v14 = *(_QWORD *)(*(_QWORD *)(v7 + 104) + 24 * LODWORD(v27[0]) + 8)
              - *(_QWORD *)(*(_QWORD *)(v7 + 104) + 24 * LODWORD(v27[0]));
          if (*(_QWORD *)((char *)v35[0] + v10) <= (unint64_t)(v14 >> 3))
            v15 = v14 >> 3;
          else
            v15 = *(_QWORD *)((char *)v35[0] + v10);
          *(_QWORD *)((char *)v35[0] + v10) = v15;
          if (__p)
          {
            v30 = __p;
            operator delete(__p);
          }
          v10 += 8;
          v9 += 88;
        }
        while (v9 != v8);
      }
      v7 += 136;
    }
    while (v7 != v26);
  }
  v17 = *a3;
  v16 = a3[1];
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  v18 = v16 - v17;
  if (v18)
  {
    v19 = 0;
    v20 = 0x2E8BA2E8BA2E8BA3 * (v18 >> 3);
    do
    {
      v21 = *((_QWORD *)v35[0] + v19);
      if ((_BYTE)v21)
        v22 = (v21 >> 8) + 1;
      else
        v22 = v21 >> 8;
      if (v22)
      {
        v23 = 0;
        do
        {
          v24 = v23 + 256;
          if (v21 >= v23 + 256)
            v25 = v23 + 256;
          else
            v25 = v21;
          xgboost::common::BlockedSpace2d::AddBlock(a1, v19, v23, v25);
          v23 = v24;
          --v22;
        }
        while (v22);
      }
      ++v19;
    }
    while (v19 != v20);
  }
  if (v35[0])
  {
    v35[1] = v35[0];
    operator delete(v35[0]);
  }
}

void sub_220EFE86C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  uint64_t v23;
  void *v25;
  void *v26;

  v25 = *(void **)(v23 + 24);
  if (v25)
  {
    *(_QWORD *)(v23 + 32) = v25;
    operator delete(v25);
  }
  v26 = *(void **)v23;
  if (*(_QWORD *)v23)
  {
    *(_QWORD *)(v23 + 8) = v26;
    operator delete(v26);
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost::tree::QuantileHistMaker::Builder<float>::BuildHistogram(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  _QWORD *v9;
  double *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  double v16;
  double v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int *v21;
  int *v22;
  void *v23;
  int *v24;
  void *v25;
  int *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  int *v32;
  void *v33;
  int *v34;
  void *v35;
  int *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  void *v60;
  void *v61;
  uint64_t v62;
  void *__p;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  int *v75[3];
  int *v76[3];
  _BYTE v77[40];
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v9 = a4 + 1;
  std::vector<xgboost::tree::CPUExpandEntry>::vector(v76, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a4[1] - *a4) >> 3));
  v56 = a5;
  v57 = a2;
  std::vector<xgboost::tree::CPUExpandEntry>::vector(v75, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*v9 - *a4) >> 3));
  v10 = (double *)*a4;
  v58 = (int *)a4[1];
  v11 = a3;
  if ((int *)*a4 != v58)
  {
    v12 = 0;
    do
    {
      v13 = *(_QWORD *)(v11 + 160);
      v14 = v13 + 20 * *(int *)v10;
      v15 = *(_DWORD *)(v14 + 4);
      LODWORD(v14) = *(_DWORD *)(v14 + 8);
      v16 = v10[10];
      v17 = v10[8];
      if (v16 >= v17)
        v18 = v14;
      else
        v18 = v15;
      if (v16 >= v17)
        v14 = v15;
      else
        v14 = v14;
      v19 = *(_DWORD *)(v13 + 20 * (int)v14);
      if (v19 == -1)
      {
        v20 = 0;
      }
      else
      {
        v20 = 0;
        do
        {
          ++v20;
          v19 = *(_DWORD *)(v13 + 20 * (v19 & 0x7FFFFFFF));
        }
        while (v19 != -1);
      }
      memset(&v77[7], 0, 32);
      v21 = v76[0];
      v22 = &v76[0][22 * v12];
      *(_QWORD *)v22 = v14 | (v20 << 32);
      *((_QWORD *)v22 + 1) = 0;
      v22[4] = 0;
      v25 = (void *)*((_QWORD *)v22 + 3);
      v24 = v22 + 6;
      v23 = v25;
      if (v25)
      {
        *(_QWORD *)&v21[22 * v12 + 8] = v23;
        operator delete(v23);
        *(_QWORD *)v24 = 0;
        *((_QWORD *)v24 + 1) = 0;
        *((_QWORD *)v24 + 2) = 0;
      }
      v26 = &v21[22 * v12];
      *(_QWORD *)v24 = 0;
      *((_QWORD *)v24 + 1) = 0;
      *((_BYTE *)v24 + 24) = 0;
      *((_QWORD *)v24 + 2) = 0;
      *(_OWORD *)((char *)v26 + 49) = *(_OWORD *)v77;
      *(_OWORD *)((char *)v26 + 65) = *(_OWORD *)&v77[16];
      *((_QWORD *)v26 + 10) = *(_QWORD *)&v77[31];
      v11 = a3;
      v27 = *(_QWORD *)(a3 + 160);
      v28 = *(_DWORD *)(v27 + 20 * (int)v18);
      if (v28 == -1)
      {
        v29 = 0;
      }
      else
      {
        v29 = 0;
        do
        {
          ++v29;
          v28 = *(_DWORD *)(v27 + 20 * (v28 & 0x7FFFFFFF));
        }
        while (v28 != -1);
      }
      v30 = v18 | (v29 << 32);
      memset(&v77[7], 0, 32);
      v31 = v75[0];
      v32 = &v75[0][22 * v12];
      *(_QWORD *)v32 = v30;
      *((_QWORD *)v32 + 1) = 0;
      v32[4] = 0;
      v35 = (void *)*((_QWORD *)v32 + 3);
      v34 = v32 + 6;
      v33 = v35;
      if (v35)
      {
        *(_QWORD *)&v31[22 * v12 + 8] = v33;
        operator delete(v33);
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
        *((_QWORD *)v34 + 2) = 0;
      }
      v36 = &v31[22 * v12];
      *(_QWORD *)v34 = 0;
      *((_QWORD *)v34 + 1) = 0;
      *((_BYTE *)v34 + 24) = 0;
      *((_QWORD *)v34 + 2) = 0;
      *(_OWORD *)((char *)v36 + 49) = *(_OWORD *)v77;
      *(_OWORD *)((char *)v36 + 65) = *(_OWORD *)&v77[16];
      *((_QWORD *)v36 + 10) = *(_QWORD *)&v77[31];
      ++v12;
      v10 += 11;
    }
    while (v10 != (double *)v58);
  }
  xgboost::tree::ConstructHistSpace<std::vector<xgboost::tree::HistRowPartitioner>>((xgboost::common::BlockedSpace2d *)v77, a1 + 8, (uint64_t *)v76);
  v37 = a1[1];
  v38 = *(_DWORD *)(v37 + 20);
  v39 = *(_QWORD *)(v37 + 128);
  LODWORD(v68) = -1;
  HIDWORD(v68) = v38;
  v69 = 0;
  v70 = 0;
  v71 = 0;
  v72 = v39;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v57 + 104))(&v73, v57, &v68);
  v68 = v73;
  v69 = v74;
  if (v74)
  {
    p_shared_owners = (unint64_t *)&v74->__shared_owners_;
    do
      v41 = __ldxr(p_shared_owners);
    while (__stxr(v41 + 1, p_shared_owners));
  }
  xgboost::BatchIterator<xgboost::GHistIndexMatrix>::BatchIterator(&v66, 0);
  v42 = 0;
  v43 = 80;
  while ((xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator!=(&v68) & 1) != 0)
  {
    v44 = xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator*(&v68);
    v45 = a1[13];
    v61 = 0;
    v62 = 0;
    v60 = 0;
    std::vector<xgboost::common::Range1d>::__init_with_size[abi:ne180100]<xgboost::common::Range1d*,xgboost::common::Range1d*>(&v60, *(const void **)v77, *(uint64_t *)&v77[8], (uint64_t)(*(_QWORD *)&v77[8] - *(_QWORD *)v77) >> 4);
    __p = 0;
    v64 = 0;
    v65 = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)&v77[24], *(uint64_t *)&v77[32], (uint64_t)(*(_QWORD *)&v77[32] - *(_QWORD *)&v77[24]) >> 3);
    v46 = a1[8];
    if (0xF0F0F0F0F0F0F0F1 * ((a1[9] - v46) >> 3) <= v42)
      std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_out_of_range[abi:ne180100]();
    xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>::BuildHist(v45, v42, (uint64_t)&v60, v44, v11, v46 + v43, v76, v75, v56);
    if (__p)
    {
      v64 = __p;
      operator delete(__p);
    }
    if (v60)
    {
      v61 = v60;
      operator delete(v60);
    }
    ++v42;
    v43 += 136;
    xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator++(&v68);
  }
  v47 = v67;
  if (v67)
  {
    v48 = (unint64_t *)&v67->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = v69;
  if (v69)
  {
    v51 = (unint64_t *)&v69->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = v74;
  if (v74)
  {
    v54 = (unint64_t *)&v74->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  if (*(_QWORD *)&v77[24])
  {
    *(_QWORD *)&v77[32] = *(_QWORD *)&v77[24];
    operator delete(*(void **)&v77[24]);
  }
  if (*(_QWORD *)v77)
  {
    *(_QWORD *)&v77[8] = *(_QWORD *)v77;
    operator delete(*(void **)v77);
  }
  *(_QWORD *)v77 = v75;
  std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)v77);
  *(_QWORD *)v77 = v76;
  std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)v77);
}

{
  __ZN7xgboost4tree17QuantileHistMaker7BuilderIfE14BuildHistogramEPNS_7DMatrixEPNS_7RegTreeERKNSt3__16vectorINS0_14CPUExpandEntryENS8_9allocatorISA_EEEERKNS9_INS_6detail20GradientPairInternalIfEENSB_ISI_EEEE(a1, a2, a3, a4, a5);
}

void sub_220EFED60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29)
{
  uint64_t v29;

  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  xgboost::common::Index::~Index((xgboost::common::Index *)(v29 - 144));
  *(_QWORD *)(v29 - 144) = &a29;
  std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)(v29 - 144));
  *(_QWORD *)(v29 - 144) = v29 - 168;
  std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)(v29 - 144));
  _Unwind_Resume(a1);
}

void xgboost::tree::HistRowPartitioner::UpdatePosition(uint64_t *a1, xgboost::GHistIndexMatrix *this, uint64_t *a3, _QWORD *a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  _BYTE *v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unsigned int *v42;
  uint64_t v43;
  _QWORD *v44;
  unsigned int v45;
  uint64_t v46;
  std::string *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  int v51;
  void *v52;
  uint64_t v53;
  _QWORD *v54;
  void *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  unint64_t v77;
  unint64_t *v78;
  _QWORD *v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  int v87;
  uint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  _QWORD *v92;
  unint64_t v93;
  unint64_t *v94;
  _QWORD *v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  int v103;
  uint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  _QWORD *v108;
  unint64_t v109;
  unint64_t *v110;
  _QWORD *v111;
  unint64_t v112;
  std::string *v113;
  _QWORD *v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t *v121;
  int v122;
  float v123;
  BOOL v124;
  unint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t *v132;
  int v133;
  float v134;
  BOOL v135;
  unint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  uint64_t *v143;
  int v144;
  float v145;
  BOOL v146;
  unint64_t v148;
  _QWORD *v149;
  unint64_t v150;
  _QWORD *v151;
  unint64_t v152;
  unint64_t *v153;
  _QWORD *v154;
  unint64_t v155;
  unint64_t v156;
  _QWORD *v157;
  unint64_t v158;
  unint64_t *v159;
  _QWORD *v160;
  unint64_t v161;
  unint64_t v162;
  _QWORD *v163;
  unint64_t v164;
  unint64_t *v165;
  _QWORD *v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  uint64_t *v173;
  int v174;
  float v175;
  BOOL v176;
  unint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  uint64_t *v185;
  int v186;
  float v187;
  BOOL v188;
  unint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  uint64_t *v197;
  int v198;
  float v199;
  BOOL v200;
  unint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  uint64_t *v207;
  int v208;
  float v209;
  BOOL v210;
  BOOL v211;
  unint64_t v212;
  _QWORD *v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  uint64_t *v217;
  int v218;
  float v219;
  BOOL v220;
  BOOL v221;
  unint64_t v222;
  _QWORD *v223;
  uint64_t v224;
  uint64_t v225;
  int v226;
  uint64_t *v227;
  int v228;
  float v229;
  BOOL v230;
  BOOL v231;
  unint64_t v232;
  _QWORD *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  int v238;
  uint64_t *v239;
  int v240;
  float v241;
  BOOL v242;
  BOOL v243;
  unint64_t v244;
  _QWORD *v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  unint64_t v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  int v255;
  uint64_t *v256;
  int v257;
  float v258;
  BOOL v259;
  BOOL v260;
  unint64_t v261;
  _QWORD *v262;
  uint64_t v263;
  unint64_t v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  int v270;
  uint64_t *v271;
  int v272;
  float v273;
  BOOL v274;
  BOOL v275;
  unint64_t v276;
  _QWORD *v277;
  uint64_t v278;
  unint64_t v279;
  unint64_t v280;
  unint64_t v281;
  int64_t v282;
  uint64_t v283;
  unint64_t v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  unint64_t v288;
  unint64_t v289;
  unint64_t v290;
  unint64_t v291;
  _BYTE *v292;
  _BYTE *v293;
  unint64_t v294;
  _QWORD *v295;
  uint64_t v296;
  unsigned int *v297;
  uint64_t v298;
  _QWORD *v299;
  unsigned int v300;
  uint64_t v301;
  uint64_t v302;
  std::string *Entry;
  _QWORD *v304;
  _QWORD *v305;
  _QWORD *v306;
  int v307;
  void *v308;
  uint64_t v309;
  _QWORD *v310;
  void *ptr;
  unint64_t v312;
  uint64_t FirstDimension;
  unint64_t Range;
  uint64_t v315;
  uint64_t v316;
  int v317;
  unint64_t v318;
  int v319;
  unint64_t v320;
  uint64_t v321;
  int v322;
  uint64_t v323;
  uint64_t v324;
  int v325;
  uint64_t *v326;
  unint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  unint64_t v332;
  _QWORD *v333;
  unint64_t v334;
  unint64_t *v335;
  _QWORD *v336;
  unint64_t v337;
  unint64_t v338;
  uint64_t v339;
  int v340;
  uint64_t v341;
  uint64_t v342;
  int v343;
  uint64_t *v344;
  unint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  unint64_t v349;
  _QWORD *v350;
  unint64_t v351;
  unint64_t *v352;
  _QWORD *v353;
  unint64_t v354;
  unint64_t v355;
  uint64_t v356;
  int v357;
  uint64_t v358;
  uint64_t v359;
  int v360;
  uint64_t *v361;
  unint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  unint64_t v366;
  _QWORD *v367;
  unint64_t v368;
  unint64_t *v369;
  _QWORD *v370;
  unint64_t v371;
  std::string *v372;
  _QWORD *v373;
  _QWORD *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  int v379;
  _QWORD *v380;
  _QWORD *v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  int v387;
  _QWORD *v388;
  _QWORD *v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  int v395;
  _QWORD *v396;
  _QWORD *v397;
  uint64_t v398;
  uint64_t v399;
  unint64_t v400;
  _QWORD *v401;
  unint64_t v402;
  unint64_t *v403;
  _QWORD *v404;
  unint64_t v405;
  unint64_t v406;
  _QWORD *v407;
  unint64_t v408;
  unint64_t *v409;
  _QWORD *v410;
  unint64_t v411;
  unint64_t v412;
  _QWORD *v413;
  unint64_t v414;
  unint64_t *v415;
  _QWORD *v416;
  unint64_t v417;
  uint64_t v418;
  uint64_t v419;
  int v420;
  _QWORD *v421;
  _QWORD *v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  int v427;
  _QWORD *v428;
  _QWORD *v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  int v434;
  _QWORD *v435;
  _QWORD *v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  int v441;
  _QWORD *v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  int v447;
  _QWORD *v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  int v453;
  _QWORD *v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  int BinIdx;
  _QWORD *v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  unint64_t v464;
  uint64_t v465;
  unint64_t v466;
  unint64_t v467;
  uint64_t v468;
  uint64_t v469;
  int v470;
  _QWORD *v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  unint64_t v475;
  unint64_t v476;
  uint64_t v477;
  uint64_t v478;
  int v479;
  _QWORD *v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  unint64_t v484;
  unint64_t v485;
  unint64_t v486;
  int64_t v487;
  uint64_t v488;
  unint64_t v489;
  unint64_t v490;
  _QWORD *v491;
  uint64_t v492;
  unsigned int *v493;
  uint64_t v494;
  _QWORD *v495;
  unsigned int v496;
  uint64_t v497;
  std::string *v498;
  _QWORD *v499;
  _QWORD *v500;
  _QWORD *v501;
  int v502;
  void *v503;
  uint64_t v504;
  _QWORD *v505;
  void *v506;
  unint64_t v507;
  uint64_t v508;
  unint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  unint64_t v513;
  int v514;
  unint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  int v519;
  uint64_t v520;
  int v521;
  uint64_t *v522;
  unint64_t v523;
  uint64_t v524;
  std::string *v525;
  _QWORD *v526;
  _QWORD *v527;
  _QWORD *v528;
  int v529;
  uint64_t v530;
  uint64_t v531;
  _QWORD *v532;
  uint64_t v533;
  uint64_t v534;
  unint64_t v535;
  _QWORD *v536;
  unint64_t v537;
  unint64_t *v538;
  _QWORD *v539;
  unint64_t v540;
  unint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  int v545;
  uint64_t v546;
  int v547;
  uint64_t *v548;
  unint64_t v549;
  std::string *v550;
  _QWORD *v551;
  _QWORD *v552;
  _QWORD *v553;
  int v554;
  uint64_t v555;
  uint64_t v556;
  _QWORD *v557;
  uint64_t v558;
  uint64_t v559;
  unint64_t v560;
  _QWORD *v561;
  unint64_t v562;
  unint64_t *v563;
  _QWORD *v564;
  unint64_t v565;
  unint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  int v570;
  uint64_t v571;
  int v572;
  uint64_t *v573;
  unint64_t v574;
  std::string *v575;
  _QWORD *v576;
  _QWORD *v577;
  _QWORD *v578;
  int v579;
  uint64_t v580;
  uint64_t v581;
  _QWORD *v582;
  uint64_t v583;
  uint64_t v584;
  unint64_t v585;
  _QWORD *v586;
  unint64_t v587;
  unint64_t *v588;
  _QWORD *v589;
  unint64_t v590;
  std::string *v591;
  _QWORD *v592;
  _QWORD *v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t *v600;
  int v601;
  float v602;
  BOOL v603;
  unint64_t v605;
  unsigned int v606;
  uint64_t *v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t *v613;
  int v614;
  float v615;
  BOOL v616;
  unint64_t v618;
  unsigned int v619;
  uint64_t *v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t *v626;
  int v627;
  float v628;
  BOOL v629;
  unint64_t v631;
  unsigned int v632;
  uint64_t *v633;
  unint64_t v634;
  _QWORD *v635;
  unint64_t v636;
  unint64_t *v637;
  _QWORD *v638;
  unint64_t v639;
  unint64_t v640;
  _QWORD *v641;
  unint64_t v642;
  unint64_t *v643;
  _QWORD *v644;
  unint64_t v645;
  unint64_t v646;
  _QWORD *v647;
  unint64_t v648;
  unint64_t *v649;
  _QWORD *v650;
  unint64_t v651;
  uint64_t v652;
  uint64_t v653;
  int v654;
  uint64_t *v655;
  int v656;
  float v657;
  BOOL v658;
  unint64_t v660;
  unsigned int v661;
  uint64_t *v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  int v666;
  uint64_t *v667;
  int v668;
  float v669;
  BOOL v670;
  unint64_t v672;
  unsigned int v673;
  uint64_t *v674;
  uint64_t v675;
  uint64_t v676;
  int v677;
  uint64_t *v678;
  int v679;
  float v680;
  BOOL v681;
  unint64_t v683;
  unsigned int v684;
  uint64_t *v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t *v689;
  int v690;
  float v691;
  BOOL v692;
  BOOL v693;
  unint64_t v694;
  unsigned int v695;
  uint64_t *v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t *v700;
  int v701;
  float v702;
  BOOL v703;
  BOOL v704;
  unint64_t v705;
  unsigned int v706;
  uint64_t *v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t *v711;
  int v712;
  float v713;
  BOOL v714;
  BOOL v715;
  unint64_t v716;
  unsigned int v717;
  uint64_t *v718;
  uint64_t v719;
  uint64_t v720;
  int v721;
  uint64_t *v722;
  int v723;
  float v724;
  BOOL v725;
  BOOL v726;
  unint64_t v727;
  unsigned int v728;
  uint64_t *v729;
  uint64_t v730;
  unint64_t v731;
  uint64_t v732;
  unint64_t v733;
  unint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  int v738;
  uint64_t *v739;
  int v740;
  float v741;
  BOOL v742;
  BOOL v743;
  unint64_t v744;
  unsigned int v745;
  uint64_t *v746;
  uint64_t v747;
  unint64_t v748;
  unint64_t v749;
  uint64_t v750;
  uint64_t v751;
  int v752;
  uint64_t *v753;
  int v754;
  float v755;
  BOOL v756;
  BOOL v757;
  unint64_t v758;
  unsigned int v759;
  uint64_t *v760;
  uint64_t v761;
  unint64_t v762;
  unint64_t v763;
  unint64_t v764;
  int64_t v765;
  uint64_t v766;
  unint64_t v767;
  unint64_t v768;
  _QWORD *v769;
  uint64_t v770;
  unsigned int *v771;
  uint64_t v772;
  _QWORD *v773;
  unsigned int v774;
  uint64_t v775;
  uint64_t v776;
  std::string *v777;
  _QWORD *v778;
  _QWORD *v779;
  _QWORD *v780;
  int v781;
  void *v782;
  uint64_t v783;
  _QWORD *v784;
  void *v785;
  unint64_t v786;
  uint64_t v787;
  unint64_t v788;
  uint64_t v789;
  uint64_t v790;
  int v791;
  unint64_t v792;
  int v793;
  unint64_t v794;
  uint64_t v795;
  int v796;
  uint64_t v797;
  uint64_t v798;
  int v799;
  uint64_t *v800;
  unint64_t v801;
  uint64_t v802;
  uint64_t v803;
  _QWORD *v804;
  std::string *v805;
  _QWORD *v806;
  _QWORD *v807;
  _QWORD *v808;
  int v809;
  uint64_t v810;
  uint64_t v811;
  _QWORD *v812;
  uint64_t v813;
  uint64_t v814;
  unint64_t v815;
  _QWORD *v816;
  unint64_t v817;
  unint64_t *v818;
  _QWORD *v819;
  unint64_t v820;
  unint64_t v821;
  uint64_t v822;
  int v823;
  uint64_t v824;
  uint64_t v825;
  int v826;
  uint64_t *v827;
  unint64_t v828;
  uint64_t v829;
  uint64_t v830;
  std::string *v831;
  _QWORD *v832;
  _QWORD *v833;
  _QWORD *v834;
  int v835;
  uint64_t v836;
  uint64_t v837;
  _QWORD *v838;
  uint64_t v839;
  uint64_t v840;
  unint64_t v841;
  _QWORD *v842;
  unint64_t v843;
  unint64_t *v844;
  _QWORD *v845;
  unint64_t v846;
  unint64_t v847;
  uint64_t v848;
  int v849;
  uint64_t v850;
  uint64_t v851;
  int v852;
  uint64_t *v853;
  unint64_t v854;
  uint64_t v855;
  uint64_t v856;
  std::string *v857;
  _QWORD *v858;
  _QWORD *v859;
  _QWORD *v860;
  int v861;
  uint64_t v862;
  uint64_t v863;
  _QWORD *v864;
  uint64_t v865;
  uint64_t v866;
  unint64_t v867;
  _QWORD *v868;
  unint64_t v869;
  unint64_t *v870;
  _QWORD *v871;
  unint64_t v872;
  std::string *v873;
  _QWORD *v874;
  _QWORD *v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  int v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  int v884;
  BOOL v885;
  _QWORD *v886;
  uint64_t v887;
  uint64_t v888;
  int v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  int v894;
  BOOL v895;
  _QWORD *v896;
  uint64_t v897;
  uint64_t v898;
  int v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  int v904;
  BOOL v905;
  _QWORD *v906;
  unint64_t v907;
  _QWORD *v908;
  unint64_t v909;
  unint64_t *v910;
  _QWORD *v911;
  unint64_t v912;
  unint64_t v913;
  _QWORD *v914;
  unint64_t v915;
  unint64_t *v916;
  _QWORD *v917;
  unint64_t v918;
  unint64_t v919;
  _QWORD *v920;
  unint64_t v921;
  unint64_t *v922;
  _QWORD *v923;
  unint64_t v924;
  uint64_t v925;
  uint64_t v926;
  int v927;
  _QWORD *v928;
  uint64_t v929;
  uint64_t v930;
  int v931;
  _QWORD *v932;
  uint64_t v933;
  uint64_t v934;
  int v935;
  _QWORD *v936;
  int v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  int v942;
  BOOL v943;
  _QWORD *v944;
  int v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  int v950;
  BOOL v951;
  _QWORD *v952;
  int v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  int v958;
  BOOL v959;
  _QWORD *v960;
  uint64_t v961;
  uint64_t v962;
  int v963;
  _QWORD *v964;
  uint64_t v965;
  unint64_t v966;
  uint64_t v967;
  unint64_t v968;
  unint64_t v969;
  uint64_t v970;
  uint64_t v971;
  int v972;
  _QWORD *v973;
  uint64_t v974;
  unint64_t v975;
  unint64_t v976;
  uint64_t v977;
  uint64_t v978;
  int v979;
  _QWORD *v980;
  uint64_t v981;
  unint64_t v982;
  unint64_t v983;
  unint64_t v984;
  int64_t v985;
  uint64_t v986;
  unint64_t v987;
  uint64_t *v988;
  int64_t v989;
  int64_t v990;
  unint64_t v991;
  unint64_t v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  unint64_t v999;
  unint64_t v1000;
  unint64_t v1001;
  unint64_t v1002;
  unint64_t v1003;
  unint64_t v1004;
  _QWORD *v1005;
  _QWORD *v1006;
  _QWORD *v1007;
  _QWORD *v1008;
  _QWORD *v1009;
  _QWORD *v1010;
  std::mutex *v1011;
  std::mutex *v1012;
  std::mutex *v1013;
  std::mutex *v1014;
  std::mutex *v1015;
  std::mutex *v1016;
  int v1017;
  int v1018;
  int v1019;
  int64_t v1020;
  _QWORD *v1021;
  _QWORD *v1022;
  _QWORD *v1023;
  int64_t v1024;
  uint64_t *v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  unint64_t v1029;
  int v1030;
  int v1031;
  int v1032;
  unint64_t v1033;
  uint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t *v1048;
  _QWORD *v1049;
  unint64_t v1050;
  unint64_t v1051;
  unint64_t v1052;
  _QWORD *v1053;
  unint64_t v1054;
  unint64_t v1055;
  unint64_t v1056;
  xgboost::GHistIndexMatrix *v1057;
  uint64_t *v1058;
  uint64_t *v1059;
  void *v1060[2];
  void *__p[2];
  __int128 v1062;
  std::vector<int> v1063;
  char v1064;
  char v1065;
  unint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  std::exception_ptr v1070;
  std::mutex v1071;
  uint64_t v1072;

  v1072 = *MEMORY[0x24BDAC8D0];
  v7 = xgboost::GHistIndexMatrix::Transpose(this);
  v1057 = this;
  v8 = *((unsigned __int8 *)this + 112);
  v1047 = v7;
  v1048 = a1;
  v10 = *a3;
  v9 = a3[1];
  v11 = (v9 - *a3) / 88;
  v1025 = a3;
  if (!v8)
  {
    if (*(_BYTE *)(v7 + 156))
    {
      memset(&v1063, 0, sizeof(v1063));
      xgboost::tree::HistRowPartitioner::FindSplitConditions(a3, (uint64_t)a4, (uint64_t)v1057, &v1063);
      *(_OWORD *)__p = 0u;
      v1062 = 0u;
      *(_OWORD *)v1060 = 0u;
      if (v9 == v10)
      {
        v29 = 0;
        v28 = 0;
      }
      else
      {
        v21 = 0;
        do
        {
          v22 = *(_QWORD *)(a1[13] + 24 * *(unsigned int *)(*a3 + 88 * v21) + 8)
              - *(_QWORD *)(a1[13] + 24 * *(unsigned int *)(*a3 + 88 * v21));
          v23 = v22 >> 3;
          if ((v22 & 0x3FF8) != 0)
            v24 = ((unint64_t)(v22 >> 3) >> 11) + 1;
          else
            v24 = (unint64_t)(v22 >> 3) >> 11;
          if (v24)
          {
            v25 = 0;
            do
            {
              v26 = v25 + 2048;
              if (v23 >= v25 + 2048)
                v27 = v25 + 2048;
              else
                v27 = v23;
              xgboost::common::BlockedSpace2d::AddBlock((xgboost::common::BlockedSpace2d *)v1060, v21, v25, v27);
              v25 = v26;
              --v24;
            }
            while (v24);
          }
          ++v21;
        }
        while (v21 != v11);
        v29 = v1060[0];
        v28 = v1060[1];
      }
      std::vector<std::pair<double,double>>::resize((uint64_t)a1, v11);
      std::vector<unsigned long>::resize((uint64_t)(a1 + 3), v11 + 1);
      v294 = (v28 - v29) >> 4;
      v295 = (_QWORD *)a1[3];
      *v295 = 0;
      if (v11 + 1 >= 2)
      {
        v296 = 0;
        v297 = (unsigned int *)*a3;
        v298 = a1[13];
        v299 = v295 + 1;
        do
        {
          v300 = *v297;
          v297 += 22;
          v301 = *(_QWORD *)(v298 + 24 * v300 + 8) - *(_QWORD *)(v298 + 24 * v300);
          v296 += (unint64_t)(v301 >> 3) >> 11;
          if ((v301 & 0x3FF8) != 0)
            ++v296;
          *v299++ = v296;
          --v11;
        }
        while (v11);
      }
      if (a1[9] < v294)
      {
        std::vector<std::shared_ptr<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>>::resize((uint64_t)(a1 + 6), v294);
        a1[9] = v294;
      }
      v302 = *((_QWORD *)v1057 + 19);
      v1058 = (uint64_t *)((char *)v1057 + 152);
      if (a1[16] != v302)
      {
        dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v1070);
        if (v1070.__ptr_)
        {
          Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v1066);
          dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/./updater_quantile_hist.h");
          v304 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v1066);
          v305 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v304, (uint64_t)"Check failed: ", 14);
          v306 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v305, (uint64_t)"base_rowid == gmat.base_rowid", 29);
          v307 = *((char *)v1070.__ptr_ + 23);
          v308 = v307 >= 0 ? v1070.__ptr_ : *(void **)v1070.__ptr_;
          v309 = v307 >= 0 ? *((unsigned __int8 *)v1070.__ptr_ + 23) : *((_QWORD *)v1070.__ptr_ + 1);
          v310 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v306, (uint64_t)v308, v309);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v310, (uint64_t)": ", 2);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v1066);
          ptr = v1070.__ptr_;
          v1070.__ptr_ = 0;
          if (ptr)
            std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v1070, (uint64_t)ptr);
        }
      }
      v1070.__ptr_ = 0;
      v1071.__m_.__sig = 850045863;
      memset(v1071.__m_.__opaque, 0, sizeof(v1071.__m_.__opaque));
      if (v1060[1] != v1060[0])
      {
        v312 = 0;
        v1020 = ((char *)v1060[1] - (char *)v1060[0]) >> 4;
        while (1)
        {
          FirstDimension = xgboost::common::BlockedSpace2d::GetFirstDimension((xgboost::common::BlockedSpace2d *)v1060, v312);
          Range = xgboost::common::BlockedSpace2d::GetRange((xgboost::common::BlockedSpace2d *)v1060, v312);
          v316 = v315;
          v317 = *(_DWORD *)(*v1025 + 88 * FirstDimension);
          xgboost::common::PartitionBuilder<2048ul>::AllocateForTask((uint64_t)v1048, *(_QWORD *)(v1048[3] + 8 * (int)FirstDimension) + (Range >> 11));
          v318 = Range >> 11;
          v319 = *(_DWORD *)(v1047 + 152);
          if (v319 == 4)
            break;
          if (v319 == 2)
          {
            v1039 = (int)FirstDimension;
            v1051 = Range >> 11;
            v338 = *(_QWORD *)(v1048[3] + 8 * (int)FirstDimension) + v318;
            v339 = v1048[6];
            if (v338 >= (v1048[7] - v339) >> 4)
              goto LABEL_1317;
            v340 = v1063.__begin_[FirstDimension];
            v341 = *(_QWORD *)(v1048[13] + 24 * v317);
            v342 = *(_QWORD *)(v339 + 16 * v338);
            v343 = *(_DWORD *)(a4[20] + 20 * v317 + 12);
            xgboost::common::ColumnMatrix::GetColumn<unsigned short,true>(&v1068, (uint64_t *)v1047, v343 & 0x7FFFFFFF);
            v1029 = v312;
            xgboost::RegTree::NodeCats((xgboost::RegTree *)&v1066, a4, v317);
            v344 = (uint64_t *)(v341 + 8 * Range);
            v345 = (uint64_t)(8 * v316 - 8 * Range) >> 3;
            v346 = v342 + 32;
            v347 = v342 + 16416;
            v330 = v1068;
            v348 = *v1058;
            if (*(_BYTE *)(v1068 + 8))
            {
              if (v343 < 0)
              {
                if (v316 == Range)
                  goto LABEL_1312;
                v1069 = 0;
                v400 = *(_QWORD *)(v1068 + 16);
                if (v400)
                {
                  v401 = *(_QWORD **)(v1068 + 48);
                  do
                  {
                    v402 = v400 >> 1;
                    v403 = &v401[v400 >> 1];
                    v405 = *v403;
                    v404 = v403 + 1;
                    v400 += ~(v400 >> 1);
                    if (v405 < *v344 - v348)
                      v401 = v404;
                    else
                      v400 = v402;
                  }
                  while (v400);
                }
                else
                {
                  v401 = *(_QWORD **)(v1068 + 48);
                }
                v375 = 0;
                v376 = 0;
                v1069 = ((uint64_t)v401 - *(_QWORD *)(v1068 + 48)) >> 3;
                if (v345 <= 1)
                  v345 = 1;
                do
                {
                  v458 = *v344++;
                  v457 = v458;
                  BinIdx = xgboost::common::SparseColumn<unsigned short>::GetBinIdx(v330, v458 - v348, (unint64_t *)&v1069);
                  v460 = (_QWORD *)(v347 + 8 * v375);
                  if (BinIdx > v340)
                  {
                    v461 = v376;
                  }
                  else
                  {
                    v460 = (_QWORD *)(v346 + 8 * v376);
                    v461 = v376 + 1;
                  }
                  if (BinIdx <= v340)
                    v462 = v375;
                  else
                    v462 = v375 + 1;
                  if (BinIdx == -1)
                    v460 = (_QWORD *)(v346 + 8 * v376++);
                  else
                    v376 = v461;
                  if (BinIdx != -1)
                    v375 = v462;
                  *v460 = v457;
                  --v345;
                }
                while (v345);
              }
              else
              {
                if (v316 == Range)
                  goto LABEL_1312;
                v1069 = 0;
                v349 = *(_QWORD *)(v1068 + 16);
                if (v349)
                {
                  v350 = *(_QWORD **)(v1068 + 48);
                  do
                  {
                    v351 = v349 >> 1;
                    v352 = &v350[v349 >> 1];
                    v354 = *v352;
                    v353 = v352 + 1;
                    v349 += ~(v349 >> 1);
                    if (v354 < *v344 - v348)
                      v350 = v353;
                    else
                      v349 = v351;
                  }
                  while (v349);
                }
                else
                {
                  v350 = *(_QWORD **)(v1068 + 48);
                }
                v375 = 0;
                v376 = 0;
                v1069 = ((uint64_t)v350 - *(_QWORD *)(v1068 + 48)) >> 3;
                if (v345 <= 1)
                  v345 = 1;
                do
                {
                  v419 = *v344++;
                  v418 = v419;
                  v420 = xgboost::common::SparseColumn<unsigned short>::GetBinIdx(v330, v419 - v348, (unint64_t *)&v1069);
                  v421 = (_QWORD *)(v347 + 8 * v375);
                  v422 = (_QWORD *)(v346 + 8 * v376);
                  if (v420 <= v340)
                  {
                    v423 = v376 + 1;
                  }
                  else
                  {
                    v422 = (_QWORD *)(v347 + 8 * v375);
                    v423 = v376;
                  }
                  if (v420 <= v340)
                    v424 = v375;
                  else
                    v424 = v375 + 1;
                  if (v420 == -1)
                  {
                    ++v375;
                  }
                  else
                  {
                    v421 = v422;
                    v376 = v423;
                    v375 = v424;
                  }
                  *v421 = v418;
                  --v345;
                }
                while (v345);
              }
            }
            else if (v343 < 0)
            {
              if (v316 == Range)
                goto LABEL_1312;
              v375 = 0;
              v376 = 0;
              do
              {
                v440 = *v344++;
                v439 = v440;
                v441 = xgboost::common::DenseColumn<unsigned short,true>::GetBinIdx(v330, v440 - v348);
                v442 = (_QWORD *)(v347 + 8 * v375);
                if (v441 > v340)
                {
                  v443 = v376;
                }
                else
                {
                  v442 = (_QWORD *)(v346 + 8 * v376);
                  v443 = v376 + 1;
                }
                if (v441 <= v340)
                  v444 = v375;
                else
                  v444 = v375 + 1;
                if (v441 == -1)
                  v442 = (_QWORD *)(v346 + 8 * v376++);
                else
                  v376 = v443;
                if (v441 != -1)
                  v375 = v444;
                *v442 = v439;
                --v345;
              }
              while (v345);
            }
            else
            {
              if (v316 == Range)
                goto LABEL_1312;
              v375 = 0;
              v376 = 0;
              do
              {
                v378 = *v344++;
                v377 = v378;
                v379 = xgboost::common::DenseColumn<unsigned short,true>::GetBinIdx(v330, v378 - v348);
                v380 = (_QWORD *)(v347 + 8 * v375);
                v381 = (_QWORD *)(v346 + 8 * v376);
                if (v379 <= v340)
                {
                  v382 = v376 + 1;
                }
                else
                {
                  v381 = (_QWORD *)(v347 + 8 * v375);
                  v382 = v376;
                }
                if (v379 <= v340)
                  v383 = v375;
                else
                  v383 = v375 + 1;
                if (v379 == -1)
                {
                  ++v375;
                }
                else
                {
                  v380 = v381;
                  v376 = v382;
                  v375 = v383;
                }
                *v380 = v377;
                --v345;
              }
              while (v345);
            }
            a1 = v1048;
            v463 = v1048[3];
            v464 = *(_QWORD *)(v463 + 8 * v1039) + v1051;
            v465 = v1048[6];
            v466 = (v1048[7] - v465) >> 4;
            if (v466 <= v464
              || (**(_QWORD **)(v465 + 16 * v464) = v376, v467 = *(_QWORD *)(v463 + 8 * v1039) + v1051, v466 <= v467))
            {
              std::vector<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry,std::allocator<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry>>::__throw_out_of_range[abi:ne180100]();
            }
LABEL_679:
            *(_QWORD *)(*(_QWORD *)(v465 + 16 * v467) + 8) = v375;
            v312 = v1029;
            if (v330)
              (*(void (**)(uint64_t))(*(_QWORD *)v330 + 8))(v330);
            a3 = v1025;
            goto LABEL_682;
          }
          if (v319 == 1)
          {
            v1038 = (int)FirstDimension;
            v1050 = Range >> 11;
            v320 = *(_QWORD *)(v1048[3] + 8 * (int)FirstDimension) + v318;
            v321 = v1048[6];
            if (v320 >= (v1048[7] - v321) >> 4)
              goto LABEL_1317;
            v322 = v1063.__begin_[FirstDimension];
            v323 = *(_QWORD *)(v1048[13] + 24 * v317);
            v324 = *(_QWORD *)(v321 + 16 * v320);
            v325 = *(_DWORD *)(a4[20] + 20 * v317 + 12);
            xgboost::common::ColumnMatrix::GetColumn<unsigned char,true>(&v1068, (uint64_t *)v1047, v325 & 0x7FFFFFFF);
            v1029 = v312;
            xgboost::RegTree::NodeCats((xgboost::RegTree *)&v1066, a4, v317);
            v326 = (uint64_t *)(v323 + 8 * Range);
            v327 = (uint64_t)(8 * v316 - 8 * Range) >> 3;
            v328 = v324 + 32;
            v329 = v324 + 16416;
            v330 = v1068;
            v331 = *v1058;
            if (*(_BYTE *)(v1068 + 8))
            {
              if (v325 < 0)
              {
                if (v316 == Range)
                  goto LABEL_1312;
                v1069 = 0;
                v412 = *(_QWORD *)(v1068 + 16);
                if (v412)
                {
                  v413 = *(_QWORD **)(v1068 + 48);
                  do
                  {
                    v414 = v412 >> 1;
                    v415 = &v413[v412 >> 1];
                    v417 = *v415;
                    v416 = v415 + 1;
                    v412 += ~(v412 >> 1);
                    if (v417 < *v326 - v331)
                      v413 = v416;
                    else
                      v412 = v414;
                  }
                  while (v412);
                }
                else
                {
                  v413 = *(_QWORD **)(v1068 + 48);
                }
                v375 = 0;
                v392 = 0;
                v1069 = ((uint64_t)v413 - *(_QWORD *)(v1068 + 48)) >> 3;
                if (v327 <= 1)
                  v327 = 1;
                do
                {
                  v478 = *v326++;
                  v477 = v478;
                  v479 = xgboost::common::SparseColumn<unsigned char>::GetBinIdx(v330, v478 - v331, (unint64_t *)&v1069);
                  v480 = (_QWORD *)(v329 + 8 * v375);
                  if (v479 > v322)
                  {
                    v481 = v392;
                  }
                  else
                  {
                    v480 = (_QWORD *)(v328 + 8 * v392);
                    v481 = v392 + 1;
                  }
                  if (v479 <= v322)
                    v482 = v375;
                  else
                    v482 = v375 + 1;
                  if (v479 == -1)
                    v480 = (_QWORD *)(v328 + 8 * v392++);
                  else
                    v392 = v481;
                  if (v479 != -1)
                    v375 = v482;
                  *v480 = v477;
                  --v327;
                }
                while (v327);
              }
              else
              {
                if (v316 == Range)
                  goto LABEL_1312;
                v1069 = 0;
                v332 = *(_QWORD *)(v1068 + 16);
                if (v332)
                {
                  v333 = *(_QWORD **)(v1068 + 48);
                  do
                  {
                    v334 = v332 >> 1;
                    v335 = &v333[v332 >> 1];
                    v337 = *v335;
                    v336 = v335 + 1;
                    v332 += ~(v332 >> 1);
                    if (v337 < *v326 - v331)
                      v333 = v336;
                    else
                      v332 = v334;
                  }
                  while (v332);
                }
                else
                {
                  v333 = *(_QWORD **)(v1068 + 48);
                }
                v375 = 0;
                v392 = 0;
                v1069 = ((uint64_t)v333 - *(_QWORD *)(v1068 + 48)) >> 3;
                if (v327 <= 1)
                  v327 = 1;
                do
                {
                  v433 = *v326++;
                  v432 = v433;
                  v434 = xgboost::common::SparseColumn<unsigned char>::GetBinIdx(v330, v433 - v331, (unint64_t *)&v1069);
                  v435 = (_QWORD *)(v329 + 8 * v375);
                  v436 = (_QWORD *)(v328 + 8 * v392);
                  if (v434 <= v322)
                  {
                    v437 = v392 + 1;
                  }
                  else
                  {
                    v436 = (_QWORD *)(v329 + 8 * v375);
                    v437 = v392;
                  }
                  if (v434 <= v322)
                    v438 = v375;
                  else
                    v438 = v375 + 1;
                  if (v434 == -1)
                  {
                    ++v375;
                  }
                  else
                  {
                    v435 = v436;
                    v392 = v437;
                    v375 = v438;
                  }
                  *v435 = v432;
                  --v327;
                }
                while (v327);
              }
            }
            else if (v325 < 0)
            {
              if (v316 == Range)
                goto LABEL_1312;
              v375 = 0;
              v392 = 0;
              do
              {
                v452 = *v326++;
                v451 = v452;
                v453 = xgboost::common::DenseColumn<unsigned char,true>::GetBinIdx(v330, v452 - v331);
                v454 = (_QWORD *)(v329 + 8 * v375);
                if (v453 > v322)
                {
                  v455 = v392;
                }
                else
                {
                  v454 = (_QWORD *)(v328 + 8 * v392);
                  v455 = v392 + 1;
                }
                if (v453 <= v322)
                  v456 = v375;
                else
                  v456 = v375 + 1;
                if (v453 == -1)
                  v454 = (_QWORD *)(v328 + 8 * v392++);
                else
                  v392 = v455;
                if (v453 != -1)
                  v375 = v456;
                *v454 = v451;
                --v327;
              }
              while (v327);
            }
            else
            {
              if (v316 == Range)
                goto LABEL_1312;
              v375 = 0;
              v392 = 0;
              do
              {
                v394 = *v326++;
                v393 = v394;
                v395 = xgboost::common::DenseColumn<unsigned char,true>::GetBinIdx(v330, v394 - v331);
                v396 = (_QWORD *)(v329 + 8 * v375);
                v397 = (_QWORD *)(v328 + 8 * v392);
                if (v395 <= v322)
                {
                  v398 = v392 + 1;
                }
                else
                {
                  v397 = (_QWORD *)(v329 + 8 * v375);
                  v398 = v392;
                }
                if (v395 <= v322)
                  v399 = v375;
                else
                  v399 = v375 + 1;
                if (v395 == -1)
                {
                  ++v375;
                }
                else
                {
                  v396 = v397;
                  v392 = v398;
                  v375 = v399;
                }
                *v396 = v393;
                --v327;
              }
              while (v327);
            }
            a1 = v1048;
            v483 = v1048[3];
            v484 = *(_QWORD *)(v483 + 8 * v1038) + v1050;
            v465 = v1048[6];
            v485 = (v1048[7] - v465) >> 4;
            if (v485 <= v484
              || (**(_QWORD **)(v465 + 16 * v484) = v392, v467 = *(_QWORD *)(v483 + 8 * v1038) + v1050, v485 <= v467))
            {
              std::vector<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry,std::allocator<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry>>::__throw_out_of_range[abi:ne180100]();
            }
            goto LABEL_679;
          }
          v372 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v1069);
          dmlc::LogMessageFatal::Entry::Init(v372, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/./updater_quantile_hist.h");
          v373 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v1069);
          v374 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v373, (uint64_t)"Check failed: false", 19);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v374, (uint64_t)": ", 2);
          std::ostream::operator<<();
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v1069);
          a3 = v1025;
          a1 = v1048;
LABEL_682:
          if (++v312 == v1020)
            goto LABEL_683;
        }
        v1040 = (int)FirstDimension;
        v1052 = Range >> 11;
        v355 = *(_QWORD *)(v1048[3] + 8 * (int)FirstDimension) + v318;
        v356 = v1048[6];
        if (v355 >= (v1048[7] - v356) >> 4)
LABEL_1317:
          std::vector<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry,std::allocator<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry>>::__throw_out_of_range[abi:ne180100]();
        v357 = v1063.__begin_[FirstDimension];
        v358 = *(_QWORD *)(v1048[13] + 24 * v317);
        v359 = *(_QWORD *)(v356 + 16 * v355);
        v360 = *(_DWORD *)(a4[20] + 20 * v317 + 12);
        xgboost::common::ColumnMatrix::GetColumn<unsigned int,true>(&v1068, (uint64_t *)v1047, v360 & 0x7FFFFFFF);
        v1029 = v312;
        xgboost::RegTree::NodeCats((xgboost::RegTree *)&v1066, a4, v317);
        v361 = (uint64_t *)(v358 + 8 * Range);
        v362 = (uint64_t)(8 * v316 - 8 * Range) >> 3;
        v363 = v359 + 32;
        v364 = v359 + 16416;
        v330 = v1068;
        v365 = *v1058;
        if (*(_BYTE *)(v1068 + 8))
        {
          if (v360 < 0)
          {
            if (v316 == Range)
              goto LABEL_1312;
            v1069 = 0;
            v406 = *(_QWORD *)(v1068 + 16);
            if (v406)
            {
              v407 = *(_QWORD **)(v1068 + 48);
              do
              {
                v408 = v406 >> 1;
                v409 = &v407[v406 >> 1];
                v411 = *v409;
                v410 = v409 + 1;
                v406 += ~(v406 >> 1);
                if (v411 < *v361 - v365)
                  v407 = v410;
                else
                  v406 = v408;
              }
              while (v406);
            }
            else
            {
              v407 = *(_QWORD **)(v1068 + 48);
            }
            v375 = 0;
            v384 = 0;
            v1069 = ((uint64_t)v407 - *(_QWORD *)(v1068 + 48)) >> 3;
            if (v362 <= 1)
              v362 = 1;
            do
            {
              v469 = *v361++;
              v468 = v469;
              v470 = xgboost::common::SparseColumn<unsigned int>::GetBinIdx(v330, v469 - v365, (unint64_t *)&v1069);
              v471 = (_QWORD *)(v364 + 8 * v375);
              if (v470 > v357)
              {
                v472 = v384;
              }
              else
              {
                v471 = (_QWORD *)(v363 + 8 * v384);
                v472 = v384 + 1;
              }
              if (v470 <= v357)
                v473 = v375;
              else
                v473 = v375 + 1;
              if (v470 == -1)
                v471 = (_QWORD *)(v363 + 8 * v384++);
              else
                v384 = v472;
              if (v470 != -1)
                v375 = v473;
              *v471 = v468;
              --v362;
            }
            while (v362);
          }
          else
          {
            if (v316 == Range)
              goto LABEL_1312;
            v1069 = 0;
            v366 = *(_QWORD *)(v1068 + 16);
            if (v366)
            {
              v367 = *(_QWORD **)(v1068 + 48);
              do
              {
                v368 = v366 >> 1;
                v369 = &v367[v366 >> 1];
                v371 = *v369;
                v370 = v369 + 1;
                v366 += ~(v366 >> 1);
                if (v371 < *v361 - v365)
                  v367 = v370;
                else
                  v366 = v368;
              }
              while (v366);
            }
            else
            {
              v367 = *(_QWORD **)(v1068 + 48);
            }
            v375 = 0;
            v384 = 0;
            v1069 = ((uint64_t)v367 - *(_QWORD *)(v1068 + 48)) >> 3;
            if (v362 <= 1)
              v362 = 1;
            do
            {
              v426 = *v361++;
              v425 = v426;
              v427 = xgboost::common::SparseColumn<unsigned int>::GetBinIdx(v330, v426 - v365, (unint64_t *)&v1069);
              v428 = (_QWORD *)(v364 + 8 * v375);
              v429 = (_QWORD *)(v363 + 8 * v384);
              if (v427 <= v357)
              {
                v430 = v384 + 1;
              }
              else
              {
                v429 = (_QWORD *)(v364 + 8 * v375);
                v430 = v384;
              }
              if (v427 <= v357)
                v431 = v375;
              else
                v431 = v375 + 1;
              if (v427 == -1)
              {
                ++v375;
              }
              else
              {
                v428 = v429;
                v384 = v430;
                v375 = v431;
              }
              *v428 = v425;
              --v362;
            }
            while (v362);
          }
        }
        else if (v360 < 0)
        {
          if (v316 == Range)
            goto LABEL_1312;
          v375 = 0;
          v384 = 0;
          do
          {
            v446 = *v361++;
            v445 = v446;
            v447 = xgboost::common::DenseColumn<unsigned int,true>::GetBinIdx(v330, v446 - v365);
            v448 = (_QWORD *)(v364 + 8 * v375);
            if (v447 > v357)
            {
              v449 = v384;
            }
            else
            {
              v448 = (_QWORD *)(v363 + 8 * v384);
              v449 = v384 + 1;
            }
            if (v447 <= v357)
              v450 = v375;
            else
              v450 = v375 + 1;
            if (v447 == -1)
              v448 = (_QWORD *)(v363 + 8 * v384++);
            else
              v384 = v449;
            if (v447 != -1)
              v375 = v450;
            *v448 = v445;
            --v362;
          }
          while (v362);
        }
        else
        {
          if (v316 == Range)
            goto LABEL_1312;
          v375 = 0;
          v384 = 0;
          do
          {
            v386 = *v361++;
            v385 = v386;
            v387 = xgboost::common::DenseColumn<unsigned int,true>::GetBinIdx(v330, v386 - v365);
            v388 = (_QWORD *)(v364 + 8 * v375);
            v389 = (_QWORD *)(v363 + 8 * v384);
            if (v387 <= v357)
            {
              v390 = v384 + 1;
            }
            else
            {
              v389 = (_QWORD *)(v364 + 8 * v375);
              v390 = v384;
            }
            if (v387 <= v357)
              v391 = v375;
            else
              v391 = v375 + 1;
            if (v387 == -1)
            {
              ++v375;
            }
            else
            {
              v388 = v389;
              v384 = v390;
              v375 = v391;
            }
            *v388 = v385;
            --v362;
          }
          while (v362);
        }
        a1 = v1048;
        v474 = v1048[3];
        v475 = *(_QWORD *)(v474 + 8 * v1040) + v1052;
        v465 = v1048[6];
        v476 = (v1048[7] - v465) >> 4;
        if (v476 <= v475
          || (**(_QWORD **)(v465 + 16 * v475) = v384, v467 = *(_QWORD *)(v474 + 8 * v1040) + v1052, v476 <= v467))
        {
          std::vector<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry,std::allocator<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry>>::__throw_out_of_range[abi:ne180100]();
        }
        goto LABEL_679;
      }
LABEL_683:
      dmlc::OMPException::Rethrow(&v1070);
      std::mutex::~mutex(&v1071);
      std::exception_ptr::~exception_ptr(&v1070);
      xgboost::common::PartitionBuilder<2048ul>::CalculateRowOffsets(a1);
      v1070.__ptr_ = 0;
      v1071.__m_.__sig = 850045863;
      memset(v1071.__m_.__opaque, 0, sizeof(v1071.__m_.__opaque));
      if (v1060[1] != v1060[0])
      {
        v486 = 0;
        v487 = ((char *)v1060[1] - (char *)v1060[0]) >> 4;
        do
        {
          v488 = xgboost::common::BlockedSpace2d::GetFirstDimension((xgboost::common::BlockedSpace2d *)v1060, v486);
          v489 = xgboost::common::BlockedSpace2d::GetRange((xgboost::common::BlockedSpace2d *)v1060, v486);
          xgboost::common::PartitionBuilder<2048ul>::MergeToArray(a1, v488, v489, *(_QWORD *)(a1[13] + 24 * *(unsigned int *)(*a3 + 88 * v488)));
          ++v486;
        }
        while (v487 != v486);
      }
LABEL_1304:
      dmlc::OMPException::Rethrow(&v1070);
      std::mutex::~mutex(&v1071);
      std::exception_ptr::~exception_ptr(&v1070);
      xgboost::tree::HistRowPartitioner::AddSplitsToRowSet(a1, a3, (uint64_t)a4);
      goto LABEL_1305;
    }
    memset(&v1063, 0, sizeof(v1063));
    xgboost::tree::HistRowPartitioner::FindSplitConditions(a3, (uint64_t)a4, (uint64_t)v1057, &v1063);
    *(_OWORD *)__p = 0u;
    v1062 = 0u;
    *(_OWORD *)v1060 = 0u;
    if (v9 == v10)
    {
      v293 = 0;
      v292 = 0;
    }
    else
    {
      v285 = 0;
      do
      {
        v286 = *(_QWORD *)(a1[13] + 24 * *(unsigned int *)(*a3 + 88 * v285) + 8)
             - *(_QWORD *)(a1[13] + 24 * *(unsigned int *)(*a3 + 88 * v285));
        v287 = v286 >> 3;
        if ((v286 & 0x3FF8) != 0)
          v288 = ((unint64_t)(v286 >> 3) >> 11) + 1;
        else
          v288 = (unint64_t)(v286 >> 3) >> 11;
        if (v288)
        {
          v289 = 0;
          do
          {
            v290 = v289 + 2048;
            if (v287 >= v289 + 2048)
              v291 = v289 + 2048;
            else
              v291 = v287;
            xgboost::common::BlockedSpace2d::AddBlock((xgboost::common::BlockedSpace2d *)v1060, v285, v289, v291);
            v289 = v290;
            --v288;
          }
          while (v288);
        }
        ++v285;
      }
      while (v285 != v11);
      v293 = v1060[0];
      v292 = v1060[1];
    }
    std::vector<std::pair<double,double>>::resize((uint64_t)a1, v11);
    std::vector<unsigned long>::resize((uint64_t)(a1 + 3), v11 + 1);
    v768 = (v292 - v293) >> 4;
    v769 = (_QWORD *)a1[3];
    *v769 = 0;
    if (v11 + 1 >= 2)
    {
      v770 = 0;
      v771 = (unsigned int *)*a3;
      v772 = a1[13];
      v773 = v769 + 1;
      do
      {
        v774 = *v771;
        v771 += 22;
        v775 = *(_QWORD *)(v772 + 24 * v774 + 8) - *(_QWORD *)(v772 + 24 * v774);
        v770 += (unint64_t)(v775 >> 3) >> 11;
        if ((v775 & 0x3FF8) != 0)
          ++v770;
        *v773++ = v770;
        --v11;
      }
      while (v11);
    }
    if (a1[9] < v768)
    {
      std::vector<std::shared_ptr<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>>::resize((uint64_t)(a1 + 6), v768);
      a1[9] = v768;
    }
    v776 = *((_QWORD *)v1057 + 19);
    v1059 = (uint64_t *)((char *)v1057 + 152);
    if (a1[16] != v776)
    {
      dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v1070);
      if (v1070.__ptr_)
      {
        v777 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v1066);
        dmlc::LogMessageFatal::Entry::Init(v777, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/./updater_quantile_hist.h");
        v778 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v1066);
        v779 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v778, (uint64_t)"Check failed: ", 14);
        v780 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v779, (uint64_t)"base_rowid == gmat.base_rowid", 29);
        v781 = *((char *)v1070.__ptr_ + 23);
        v782 = v781 >= 0 ? v1070.__ptr_ : *(void **)v1070.__ptr_;
        v783 = v781 >= 0 ? *((unsigned __int8 *)v1070.__ptr_ + 23) : *((_QWORD *)v1070.__ptr_ + 1);
        v784 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v780, (uint64_t)v782, v783);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v784, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v1066);
        v785 = v1070.__ptr_;
        v1070.__ptr_ = 0;
        if (v785)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v1070, (uint64_t)v785);
      }
    }
    v1070.__ptr_ = 0;
    v1071.__m_.__sig = 850045863;
    memset(v1071.__m_.__opaque, 0, sizeof(v1071.__m_.__opaque));
    if (v1060[1] == v1060[0])
    {
LABEL_1301:
      dmlc::OMPException::Rethrow(&v1070);
      std::mutex::~mutex(&v1071);
      std::exception_ptr::~exception_ptr(&v1070);
      xgboost::common::PartitionBuilder<2048ul>::CalculateRowOffsets(a1);
      v1070.__ptr_ = 0;
      v1071.__m_.__sig = 850045863;
      memset(v1071.__m_.__opaque, 0, sizeof(v1071.__m_.__opaque));
      if (v1060[1] != v1060[0])
      {
        v984 = 0;
        v985 = ((char *)v1060[1] - (char *)v1060[0]) >> 4;
        do
        {
          v986 = xgboost::common::BlockedSpace2d::GetFirstDimension((xgboost::common::BlockedSpace2d *)v1060, v984);
          v987 = xgboost::common::BlockedSpace2d::GetRange((xgboost::common::BlockedSpace2d *)v1060, v984);
          xgboost::common::PartitionBuilder<2048ul>::MergeToArray(a1, v986, v987, *(_QWORD *)(a1[13] + 24 * *(unsigned int *)(*a3 + 88 * v986)));
          ++v984;
        }
        while (v985 != v984);
      }
      goto LABEL_1304;
    }
    v786 = 0;
    v1024 = ((char *)v1060[1] - (char *)v1060[0]) >> 4;
    while (1)
    {
      v787 = xgboost::common::BlockedSpace2d::GetFirstDimension((xgboost::common::BlockedSpace2d *)v1060, v786);
      v788 = xgboost::common::BlockedSpace2d::GetRange((xgboost::common::BlockedSpace2d *)v1060, v786);
      v790 = v789;
      v791 = *(_DWORD *)(*v1025 + 88 * v787);
      xgboost::common::PartitionBuilder<2048ul>::AllocateForTask((uint64_t)v1048, *(_QWORD *)(v1048[3] + 8 * (int)v787) + (v788 >> 11));
      v792 = v788 >> 11;
      v793 = *(_DWORD *)(v1047 + 152);
      if (v793 == 4)
      {
        v1046 = (int)v787;
        v1056 = v788 >> 11;
        v847 = *(_QWORD *)(v1048[3] + 8 * (int)v787) + v792;
        v848 = v1048[6];
        if (v847 >= (v1048[7] - v848) >> 4)
LABEL_1325:
          std::vector<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry,std::allocator<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry>>::__throw_out_of_range[abi:ne180100]();
        v849 = v1063.__begin_[v787];
        v850 = *(_QWORD *)(v1048[13] + 24 * v791);
        v851 = *(_QWORD *)(v848 + 16 * v847);
        v852 = *(_DWORD *)(a4[20] + 20 * v791 + 12);
        xgboost::common::ColumnMatrix::GetColumn<unsigned int,false>(&v1068, (uint64_t *)v1047, v852 & 0x7FFFFFFF);
        v1033 = v786;
        xgboost::RegTree::NodeCats((xgboost::RegTree *)&v1066, a4, v791);
        v853 = (uint64_t *)(v850 + 8 * v788);
        v854 = (uint64_t)(8 * v790 - 8 * v788) >> 3;
        v855 = v851 + 32;
        v856 = v851 + 16416;
        v804 = (_QWORD *)v1068;
        if (!*(_BYTE *)(v1068 + 8))
        {
          v887 = *v1059;
          if (v852 < 0)
          {
            if (v790 != v788)
            {
              v877 = 0;
              v888 = 0;
              v945 = *(_DWORD *)(v1068 + 32);
              v946 = *(_QWORD *)(v1068 + 24);
              a1 = v1048;
              while (1)
              {
                v948 = *v853++;
                v947 = v948;
                v949 = v948 - v887;
                if (v804[2] <= (unint64_t)(v948 - v887))
                  break;
                v950 = *(_DWORD *)(v946 + 4 * v949) + v945;
                v951 = v950 <= v849;
                if (v950 > v849)
                  v952 = (_QWORD *)(v856 + 8 * v877);
                else
                  v952 = (_QWORD *)(v855 + 8 * v888);
                if (v951)
                  ++v888;
                else
                  ++v877;
                *v952 = v947;
                if (!--v854)
                  goto LABEL_1284;
              }
            }
          }
          else if (v790 != v788)
          {
            v877 = 0;
            v888 = 0;
            v889 = *(_DWORD *)(v1068 + 32);
            v890 = *(_QWORD *)(v1068 + 24);
            a1 = v1048;
            while (1)
            {
              v892 = *v853++;
              v891 = v892;
              v893 = v892 - v887;
              if (v804[2] <= (unint64_t)(v892 - v887))
                break;
              v894 = *(_DWORD *)(v890 + 4 * v893) + v889;
              v895 = v894 <= v849;
              if (v894 > v849)
                v896 = (_QWORD *)(v856 + 8 * v877);
              else
                v896 = (_QWORD *)(v855 + 8 * v888);
              if (v895)
                ++v888;
              else
                ++v877;
              *v896 = v891;
              if (!--v854)
                goto LABEL_1284;
            }
          }
          goto LABEL_1312;
        }
        v1065 = 0;
        v1064 = 1;
        dmlc::LogCheckFormat<BOOL,BOOL>(&v1069);
        if (v1069)
        {
          v857 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v1065);
          dmlc::LogMessageFatal::Entry::Init(v857, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/./../common/partition_builder.h");
          v858 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v1065);
          v859 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v858, (uint64_t)"Check failed: ", 14);
          v860 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v859, (uint64_t)"any_missing == true", 19);
          v861 = *(char *)(v1069 + 23);
          v862 = v861 >= 0 ? v1069 : *(_QWORD *)v1069;
          v863 = v861 >= 0 ? *(unsigned __int8 *)(v1069 + 23) : *(_QWORD *)(v1069 + 8);
          v864 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v860, v862, v863);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v864, (uint64_t)": ", 2);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v1065);
          v865 = v1069;
          v1069 = 0;
          if (v865)
            std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v1069, v865);
        }
        v866 = *v1059;
        if (v852 < 0)
        {
          if (v790 == v788)
            goto LABEL_1312;
          v1069 = 0;
          v913 = v804[2];
          if (v913)
          {
            v914 = (_QWORD *)v804[6];
            do
            {
              v915 = v913 >> 1;
              v916 = &v914[v913 >> 1];
              v918 = *v916;
              v917 = v916 + 1;
              v913 += ~(v913 >> 1);
              if (v918 < *v853 - v866)
                v914 = v917;
              else
                v913 = v915;
            }
            while (v913);
          }
          else
          {
            v914 = (_QWORD *)v804[6];
          }
          v877 = 0;
          v888 = 0;
          v1069 = ((uint64_t)v914 - v804[6]) >> 3;
          if (v854 <= 1)
            v854 = 1;
          do
          {
            v971 = *v853++;
            v970 = v971;
            v972 = xgboost::common::SparseColumn<unsigned int>::GetBinIdx((uint64_t)v804, v971 - v866, (unint64_t *)&v1069);
            v973 = (_QWORD *)(v856 + 8 * v877);
            if (v972 > v849)
              ++v877;
            else
              v973 = (_QWORD *)(v855 + 8 * v888++);
            *v973 = v970;
            --v854;
          }
          while (v854);
        }
        else
        {
          if (v790 == v788)
            goto LABEL_1312;
          v1069 = 0;
          v867 = v804[2];
          if (v867)
          {
            v868 = (_QWORD *)v804[6];
            do
            {
              v869 = v867 >> 1;
              v870 = &v868[v867 >> 1];
              v872 = *v870;
              v871 = v870 + 1;
              v867 += ~(v867 >> 1);
              if (v872 < *v853 - v866)
                v868 = v871;
              else
                v867 = v869;
            }
            while (v867);
          }
          else
          {
            v868 = (_QWORD *)v804[6];
          }
          v877 = 0;
          v888 = 0;
          v1069 = ((uint64_t)v868 - v804[6]) >> 3;
          if (v854 <= 1)
            v854 = 1;
          do
          {
            v930 = *v853++;
            v929 = v930;
            v931 = xgboost::common::SparseColumn<unsigned int>::GetBinIdx((uint64_t)v804, v930 - v866, (unint64_t *)&v1069);
            v932 = (_QWORD *)(v856 + 8 * v877);
            if (v931 > v849)
              ++v877;
            else
              v932 = (_QWORD *)(v855 + 8 * v888++);
            *v932 = v929;
            --v854;
          }
          while (v854);
        }
        a1 = v1048;
LABEL_1284:
        v974 = a1[3];
        v975 = *(_QWORD *)(v974 + 8 * v1046) + v1056;
        v967 = a1[6];
        v976 = (a1[7] - v967) >> 4;
        if (v976 <= v975
          || (**(_QWORD **)(v967 + 16 * v975) = v888, v969 = *(_QWORD *)(v974 + 8 * v1046) + v1056, v976 <= v969))
        {
          std::vector<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry,std::allocator<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry>>::__throw_out_of_range[abi:ne180100]();
        }
        goto LABEL_1297;
      }
      if (v793 == 2)
        break;
      if (v793 == 1)
      {
        v1044 = (int)v787;
        v1054 = v788 >> 11;
        v794 = *(_QWORD *)(v1048[3] + 8 * (int)v787) + v792;
        v795 = v1048[6];
        if (v794 >= (v1048[7] - v795) >> 4)
          goto LABEL_1325;
        v796 = v1063.__begin_[v787];
        v797 = *(_QWORD *)(v1048[13] + 24 * v791);
        v798 = *(_QWORD *)(v795 + 16 * v794);
        v799 = *(_DWORD *)(a4[20] + 20 * v791 + 12);
        xgboost::common::ColumnMatrix::GetColumn<unsigned char,false>(&v1068, (uint64_t *)v1047, v799 & 0x7FFFFFFF);
        v1033 = v786;
        xgboost::RegTree::NodeCats((xgboost::RegTree *)&v1066, a4, v791);
        v800 = (uint64_t *)(v797 + 8 * v788);
        v801 = (uint64_t)(8 * v790 - 8 * v788) >> 3;
        v802 = v798 + 32;
        v803 = v798 + 16416;
        v804 = (_QWORD *)v1068;
        if (!*(_BYTE *)(v1068 + 8))
        {
          v897 = *v1059;
          if (v799 < 0)
          {
            if (v790 != v788)
            {
              v877 = 0;
              v898 = 0;
              v953 = *(_DWORD *)(v1068 + 32);
              v954 = *(_QWORD *)(v1068 + 24);
              a1 = v1048;
              while (1)
              {
                v956 = *v800++;
                v955 = v956;
                v957 = v956 - v897;
                if (v804[2] <= (unint64_t)(v956 - v897))
                  break;
                v958 = v953 + *(unsigned __int8 *)(v954 + v957);
                v959 = v958 <= v796;
                if (v958 > v796)
                  v960 = (_QWORD *)(v803 + 8 * v877);
                else
                  v960 = (_QWORD *)(v802 + 8 * v898);
                if (v959)
                  ++v898;
                else
                  ++v877;
                *v960 = v955;
                if (!--v801)
                  goto LABEL_1295;
              }
            }
          }
          else if (v790 != v788)
          {
            v877 = 0;
            v898 = 0;
            v899 = *(_DWORD *)(v1068 + 32);
            v900 = *(_QWORD *)(v1068 + 24);
            a1 = v1048;
            while (1)
            {
              v902 = *v800++;
              v901 = v902;
              v903 = v902 - v897;
              if (v804[2] <= (unint64_t)(v902 - v897))
                break;
              v904 = v899 + *(unsigned __int8 *)(v900 + v903);
              v905 = v904 <= v796;
              if (v904 > v796)
                v906 = (_QWORD *)(v803 + 8 * v877);
              else
                v906 = (_QWORD *)(v802 + 8 * v898);
              if (v905)
                ++v898;
              else
                ++v877;
              *v906 = v901;
              if (!--v801)
                goto LABEL_1295;
            }
          }
          goto LABEL_1312;
        }
        v1065 = 0;
        v1064 = 1;
        dmlc::LogCheckFormat<BOOL,BOOL>(&v1069);
        if (v1069)
        {
          v805 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v1065);
          dmlc::LogMessageFatal::Entry::Init(v805, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/./../common/partition_builder.h");
          v806 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v1065);
          v807 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v806, (uint64_t)"Check failed: ", 14);
          v808 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v807, (uint64_t)"any_missing == true", 19);
          v809 = *(char *)(v1069 + 23);
          v810 = v809 >= 0 ? v1069 : *(_QWORD *)v1069;
          v811 = v809 >= 0 ? *(unsigned __int8 *)(v1069 + 23) : *(_QWORD *)(v1069 + 8);
          v812 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v808, v810, v811);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v812, (uint64_t)": ", 2);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v1065);
          v813 = v1069;
          v1069 = 0;
          if (v813)
            std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v1069, v813);
        }
        v814 = *v1059;
        if (v799 < 0)
        {
          if (v790 == v788)
            goto LABEL_1312;
          v1069 = 0;
          v919 = v804[2];
          if (v919)
          {
            v920 = (_QWORD *)v804[6];
            do
            {
              v921 = v919 >> 1;
              v922 = &v920[v919 >> 1];
              v924 = *v922;
              v923 = v922 + 1;
              v919 += ~(v919 >> 1);
              if (v924 < *v800 - v814)
                v920 = v923;
              else
                v919 = v921;
            }
            while (v919);
          }
          else
          {
            v920 = (_QWORD *)v804[6];
          }
          v877 = 0;
          v898 = 0;
          v1069 = ((uint64_t)v920 - v804[6]) >> 3;
          if (v801 <= 1)
            v801 = 1;
          do
          {
            v978 = *v800++;
            v977 = v978;
            v979 = xgboost::common::SparseColumn<unsigned char>::GetBinIdx((uint64_t)v804, v978 - v814, (unint64_t *)&v1069);
            v980 = (_QWORD *)(v803 + 8 * v877);
            if (v979 > v796)
              ++v877;
            else
              v980 = (_QWORD *)(v802 + 8 * v898++);
            *v980 = v977;
            --v801;
          }
          while (v801);
        }
        else
        {
          if (v790 == v788)
            goto LABEL_1312;
          v1069 = 0;
          v815 = v804[2];
          if (v815)
          {
            v816 = (_QWORD *)v804[6];
            do
            {
              v817 = v815 >> 1;
              v818 = &v816[v815 >> 1];
              v820 = *v818;
              v819 = v818 + 1;
              v815 += ~(v815 >> 1);
              if (v820 < *v800 - v814)
                v816 = v819;
              else
                v815 = v817;
            }
            while (v815);
          }
          else
          {
            v816 = (_QWORD *)v804[6];
          }
          v877 = 0;
          v898 = 0;
          v1069 = ((uint64_t)v816 - v804[6]) >> 3;
          if (v801 <= 1)
            v801 = 1;
          do
          {
            v934 = *v800++;
            v933 = v934;
            v935 = xgboost::common::SparseColumn<unsigned char>::GetBinIdx((uint64_t)v804, v934 - v814, (unint64_t *)&v1069);
            v936 = (_QWORD *)(v803 + 8 * v877);
            if (v935 > v796)
              ++v877;
            else
              v936 = (_QWORD *)(v802 + 8 * v898++);
            *v936 = v933;
            --v801;
          }
          while (v801);
        }
        a1 = v1048;
LABEL_1295:
        v981 = a1[3];
        v982 = *(_QWORD *)(v981 + 8 * v1044) + v1054;
        v967 = a1[6];
        v983 = (a1[7] - v967) >> 4;
        if (v983 <= v982
          || (**(_QWORD **)(v967 + 16 * v982) = v898, v969 = *(_QWORD *)(v981 + 8 * v1044) + v1054, v983 <= v969))
        {
          std::vector<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry,std::allocator<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry>>::__throw_out_of_range[abi:ne180100]();
        }
LABEL_1297:
        *(_QWORD *)(*(_QWORD *)(v967 + 16 * v969) + 8) = v877;
        v786 = v1033;
        if (v804)
          (*(void (**)(_QWORD *))(*v804 + 8))(v804);
        a3 = v1025;
        goto LABEL_1300;
      }
      v873 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v1069);
      dmlc::LogMessageFatal::Entry::Init(v873, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/./updater_quantile_hist.h");
      v874 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v1069);
      v875 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v874, (uint64_t)"Check failed: false", 19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v875, (uint64_t)": ", 2);
      std::ostream::operator<<();
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v1069);
      a3 = v1025;
      a1 = v1048;
LABEL_1300:
      if (++v786 == v1024)
        goto LABEL_1301;
    }
    v1045 = (int)v787;
    v1055 = v788 >> 11;
    v821 = *(_QWORD *)(v1048[3] + 8 * (int)v787) + v792;
    v822 = v1048[6];
    if (v821 >= (v1048[7] - v822) >> 4)
      goto LABEL_1325;
    v823 = v1063.__begin_[v787];
    v824 = *(_QWORD *)(v1048[13] + 24 * v791);
    v825 = *(_QWORD *)(v822 + 16 * v821);
    v826 = *(_DWORD *)(a4[20] + 20 * v791 + 12);
    xgboost::common::ColumnMatrix::GetColumn<unsigned short,false>(&v1068, (uint64_t *)v1047, v826 & 0x7FFFFFFF);
    v1033 = v786;
    xgboost::RegTree::NodeCats((xgboost::RegTree *)&v1066, a4, v791);
    v827 = (uint64_t *)(v824 + 8 * v788);
    v828 = (uint64_t)(8 * v790 - 8 * v788) >> 3;
    v829 = v825 + 32;
    v830 = v825 + 16416;
    v804 = (_QWORD *)v1068;
    if (!*(_BYTE *)(v1068 + 8))
    {
      v876 = *v1059;
      if (v826 < 0)
      {
        if (v790 != v788)
        {
          v877 = 0;
          v878 = 0;
          v937 = *(_DWORD *)(v1068 + 32);
          v938 = *(_QWORD *)(v1068 + 24);
          a1 = v1048;
          while (1)
          {
            v940 = *v827++;
            v939 = v940;
            v941 = v940 - v876;
            if (v804[2] <= (unint64_t)(v940 - v876))
              break;
            v942 = v937 + *(unsigned __int16 *)(v938 + 2 * v941);
            v943 = v942 <= v823;
            if (v942 > v823)
              v944 = (_QWORD *)(v830 + 8 * v877);
            else
              v944 = (_QWORD *)(v829 + 8 * v878);
            if (v943)
              ++v878;
            else
              ++v877;
            *v944 = v939;
            if (!--v828)
              goto LABEL_1273;
          }
        }
      }
      else if (v790 != v788)
      {
        v877 = 0;
        v878 = 0;
        v879 = *(_DWORD *)(v1068 + 32);
        v880 = *(_QWORD *)(v1068 + 24);
        a1 = v1048;
        while (1)
        {
          v882 = *v827++;
          v881 = v882;
          v883 = v882 - v876;
          if (v804[2] <= (unint64_t)(v882 - v876))
            break;
          v884 = v879 + *(unsigned __int16 *)(v880 + 2 * v883);
          v885 = v884 <= v823;
          if (v884 > v823)
            v886 = (_QWORD *)(v830 + 8 * v877);
          else
            v886 = (_QWORD *)(v829 + 8 * v878);
          if (v885)
            ++v878;
          else
            ++v877;
          *v886 = v881;
          if (!--v828)
            goto LABEL_1273;
        }
      }
      goto LABEL_1312;
    }
    v1065 = 0;
    v1064 = 1;
    dmlc::LogCheckFormat<BOOL,BOOL>(&v1069);
    if (v1069)
    {
      v831 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v1065);
      dmlc::LogMessageFatal::Entry::Init(v831, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/./../common/partition_builder.h");
      v832 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v1065);
      v833 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v832, (uint64_t)"Check failed: ", 14);
      v834 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v833, (uint64_t)"any_missing == true", 19);
      v835 = *(char *)(v1069 + 23);
      v836 = v835 >= 0 ? v1069 : *(_QWORD *)v1069;
      v837 = v835 >= 0 ? *(unsigned __int8 *)(v1069 + 23) : *(_QWORD *)(v1069 + 8);
      v838 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v834, v836, v837);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v838, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v1065);
      v839 = v1069;
      v1069 = 0;
      if (v839)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v1069, v839);
    }
    v840 = *v1059;
    if (v826 < 0)
    {
      if (v790 == v788)
        goto LABEL_1312;
      v1069 = 0;
      v907 = v804[2];
      if (v907)
      {
        v908 = (_QWORD *)v804[6];
        do
        {
          v909 = v907 >> 1;
          v910 = &v908[v907 >> 1];
          v912 = *v910;
          v911 = v910 + 1;
          v907 += ~(v907 >> 1);
          if (v912 < *v827 - v840)
            v908 = v911;
          else
            v907 = v909;
        }
        while (v907);
      }
      else
      {
        v908 = (_QWORD *)v804[6];
      }
      v877 = 0;
      v878 = 0;
      v1069 = ((uint64_t)v908 - v804[6]) >> 3;
      if (v828 <= 1)
        v828 = 1;
      do
      {
        v962 = *v827++;
        v961 = v962;
        v963 = xgboost::common::SparseColumn<unsigned short>::GetBinIdx((uint64_t)v804, v962 - v840, (unint64_t *)&v1069);
        v964 = (_QWORD *)(v830 + 8 * v877);
        if (v963 > v823)
          ++v877;
        else
          v964 = (_QWORD *)(v829 + 8 * v878++);
        *v964 = v961;
        --v828;
      }
      while (v828);
    }
    else
    {
      if (v790 == v788)
        goto LABEL_1312;
      v1069 = 0;
      v841 = v804[2];
      if (v841)
      {
        v842 = (_QWORD *)v804[6];
        do
        {
          v843 = v841 >> 1;
          v844 = &v842[v841 >> 1];
          v846 = *v844;
          v845 = v844 + 1;
          v841 += ~(v841 >> 1);
          if (v846 < *v827 - v840)
            v842 = v845;
          else
            v841 = v843;
        }
        while (v841);
      }
      else
      {
        v842 = (_QWORD *)v804[6];
      }
      v877 = 0;
      v878 = 0;
      v1069 = ((uint64_t)v842 - v804[6]) >> 3;
      if (v828 <= 1)
        v828 = 1;
      do
      {
        v926 = *v827++;
        v925 = v926;
        v927 = xgboost::common::SparseColumn<unsigned short>::GetBinIdx((uint64_t)v804, v926 - v840, (unint64_t *)&v1069);
        v928 = (_QWORD *)(v830 + 8 * v877);
        if (v927 > v823)
          ++v877;
        else
          v928 = (_QWORD *)(v829 + 8 * v878++);
        *v928 = v925;
        --v828;
      }
      while (v828);
    }
    a1 = v1048;
LABEL_1273:
    v965 = a1[3];
    v966 = *(_QWORD *)(v965 + 8 * v1045) + v1055;
    v967 = a1[6];
    v968 = (a1[7] - v967) >> 4;
    if (v968 <= v966
      || (**(_QWORD **)(v967 + 16 * v966) = v878, v969 = *(_QWORD *)(v965 + 8 * v1045) + v1055, v968 <= v969))
    {
      std::vector<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry,std::allocator<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry>>::__throw_out_of_range[abi:ne180100]();
    }
    goto LABEL_1297;
  }
  if (*(_BYTE *)(v7 + 156))
  {
    memset(&v1063, 0, sizeof(v1063));
    xgboost::tree::HistRowPartitioner::FindSplitConditions(a3, (uint64_t)a4, (uint64_t)v1057, &v1063);
    *(_OWORD *)__p = 0u;
    v1062 = 0u;
    *(_OWORD *)v1060 = 0u;
    if (v9 == v10)
    {
      v20 = 0;
      v19 = 0;
    }
    else
    {
      v12 = 0;
      do
      {
        v13 = *(_QWORD *)(a1[13] + 24 * *(unsigned int *)(*a3 + 88 * v12) + 8)
            - *(_QWORD *)(a1[13] + 24 * *(unsigned int *)(*a3 + 88 * v12));
        v14 = v13 >> 3;
        if ((v13 & 0x3FF8) != 0)
          v15 = ((unint64_t)(v13 >> 3) >> 11) + 1;
        else
          v15 = (unint64_t)(v13 >> 3) >> 11;
        if (v15)
        {
          v16 = 0;
          do
          {
            v17 = v16 + 2048;
            if (v14 >= v16 + 2048)
              v18 = v16 + 2048;
            else
              v18 = v14;
            xgboost::common::BlockedSpace2d::AddBlock((xgboost::common::BlockedSpace2d *)v1060, v12, v16, v18);
            v16 = v17;
            --v15;
          }
          while (v15);
        }
        ++v12;
      }
      while (v12 != v11);
      v20 = v1060[0];
      v19 = v1060[1];
    }
    std::vector<std::pair<double,double>>::resize((uint64_t)a1, v11);
    std::vector<unsigned long>::resize((uint64_t)(a1 + 3), v11 + 1);
    v39 = (v19 - v20) >> 4;
    v40 = (_QWORD *)a1[3];
    *v40 = 0;
    if (v11 + 1 >= 2)
    {
      v41 = 0;
      v42 = (unsigned int *)*a3;
      v43 = a1[13];
      v44 = v40 + 1;
      do
      {
        v45 = *v42;
        v42 += 22;
        v46 = *(_QWORD *)(v43 + 24 * v45 + 8) - *(_QWORD *)(v43 + 24 * v45);
        v41 += (unint64_t)(v46 >> 3) >> 11;
        if ((v46 & 0x3FF8) != 0)
          ++v41;
        *v44++ = v41;
        --v11;
      }
      while (v11);
    }
    if (a1[9] < v39)
    {
      std::vector<std::shared_ptr<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>>::resize((uint64_t)(a1 + 6), v39);
      a1[9] = v39;
    }
    if (a1[16] != *((_QWORD *)v1057 + 19))
    {
      dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v1070);
      if (v1070.__ptr_)
      {
        v47 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v1066);
        dmlc::LogMessageFatal::Entry::Init(v47, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/./updater_quantile_hist.h");
        v48 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v1066);
        v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"Check failed: ", 14);
        v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"base_rowid == gmat.base_rowid", 29);
        v51 = *((char *)v1070.__ptr_ + 23);
        v52 = v51 >= 0 ? v1070.__ptr_ : *(void **)v1070.__ptr_;
        v53 = v51 >= 0 ? *((unsigned __int8 *)v1070.__ptr_ + 23) : *((_QWORD *)v1070.__ptr_ + 1);
        v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)v52, v53);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v1066);
        v55 = v1070.__ptr_;
        v1070.__ptr_ = 0;
        if (v55)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v1070, (uint64_t)v55);
      }
    }
    v1070.__ptr_ = 0;
    v1071.__m_.__sig = 850045863;
    memset(v1071.__m_.__opaque, 0, sizeof(v1071.__m_.__opaque));
    if (v1060[1] == v1060[0])
      goto LABEL_399;
    v56 = 0;
    v989 = ((char *)v1060[1] - (char *)v1060[0]) >> 4;
    v1049 = (_QWORD *)((char *)v1057 + 24);
    while (1)
    {
      v57 = xgboost::common::BlockedSpace2d::GetFirstDimension((xgboost::common::BlockedSpace2d *)v1060, v56);
      v58 = xgboost::common::BlockedSpace2d::GetRange((xgboost::common::BlockedSpace2d *)v1060, v56);
      v60 = v59;
      v61 = *(int *)(*v1025 + 88 * v57);
      xgboost::common::PartitionBuilder<2048ul>::AllocateForTask((uint64_t)a1, *(_QWORD *)(a1[3] + 8 * (int)v57) + (v58 >> 11));
      v62 = v58 >> 11;
      v63 = *(_DWORD *)(v1047 + 152);
      if (v63 != 4)
      {
        if (v63 != 2)
        {
          if (v63 != 1)
          {
            v113 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v1069);
            dmlc::LogMessageFatal::Entry::Init(v113, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/./updater_quantile_hist.h");
            v114 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v1069);
            v115 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v114, (uint64_t)"Check failed: false", 19);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)": ", 2);
            std::ostream::operator<<();
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v1069);
            goto LABEL_398;
          }
          v993 = (int)v57;
          v999 = v58 >> 11;
          v64 = *(_QWORD *)(a1[3] + 8 * (int)v57) + v62;
          v65 = a1[6];
          if (v64 < (a1[7] - v65) >> 4)
          {
            v1017 = v1063.__begin_[v57];
            v66 = *(_QWORD *)(a1[13] + 24 * v61);
            v67 = *(_QWORD *)(v65 + 16 * v64);
            v68 = *(_DWORD *)(a4[20] + 20 * (int)v61 + 12);
            v69 = v68 & 0x7FFFFFFF;
            xgboost::common::ColumnMatrix::GetColumn<unsigned char,true>(&v1068, (uint64_t *)v1047, v68 & 0x7FFFFFFF);
            v991 = v56;
            v70 = *(unsigned __int8 *)(a4[29] + v61);
            xgboost::RegTree::NodeCats((xgboost::RegTree *)&v1066, a4, v61);
            v71 = (uint64_t *)(v66 + 8 * v58);
            v72 = (uint64_t)(8 * v60 - 8 * v58) >> 3;
            v1026 = v67 + 32;
            v1035 = v67 + 16416;
            v1005 = (_QWORD *)*((_QWORD *)v1057 + 15);
            v1011 = (std::mutex *)*((_QWORD *)v1057 + 16);
            v73 = v1068;
            v74 = *((_QWORD *)v1057 + 19);
            if (*(_BYTE *)(v1068 + 8))
            {
              if ((v68 & 0x80000000) == 0)
              {
                if (v60 == v58)
                  goto LABEL_1312;
                v1069 = 0;
                v75 = *(_QWORD *)(v1068 + 16);
                if (v75)
                {
                  v76 = *(_QWORD **)(v1068 + 48);
                  do
                  {
                    v77 = v75 >> 1;
                    v78 = &v76[v75 >> 1];
                    v80 = *v78;
                    v79 = v78 + 1;
                    v75 += ~(v75 >> 1);
                    if (v80 < *v71 - v74)
                      v76 = v79;
                    else
                      v75 = v77;
                  }
                  while (v75);
                }
                else
                {
                  v76 = *(_QWORD **)(v1068 + 48);
                }
                v116 = 0;
                v139 = 0;
                v1069 = ((uint64_t)v76 - *(_QWORD *)(v1068 + 48)) >> 3;
                if (v72 <= 1)
                  v72 = 1;
                v192 = v69;
                v193 = (v69 + 1);
                while (1)
                {
                  v195 = *v71++;
                  v194 = v195;
                  v196 = xgboost::common::SparseColumn<unsigned char>::GetBinIdx(v73, v195 - v74, (unint64_t *)&v1069);
                  if (v196 != -1)
                  {
                    if (v70 == 1)
                    {
                      v197 = (uint64_t *)(*(_QWORD *)v1057 + 8 * (v194 - *((_QWORD *)v1057 + 19)));
                      v198 = xgboost::common::BinarySearchBin<xgboost::common::Index>(*v197, v197[1], v1049, *(_DWORD *)(v1011->__m_.__sig + 4 * v192), *(_DWORD *)(v1011->__m_.__sig + 4 * v193));
                      if (v198 != -1)
                      {
                        v199 = *(float *)(*v1005 + 4 * v198);
                        v200 = v199 >= 0.0 && v199 < 16777000.0;
                        if (v200 && v199 < (float)(32 * v1066))
                        {
                          if (v1066 <= (unint64_t)v199 >> 5)
                            goto LABEL_256;
                          v202 = (unint64_t)(int)v199 >> 5;
                          if (v202 >= v1066)
                            goto LABEL_1312;
                          if (((*(_DWORD *)(v1067 + 4 * v202) >> ~(int)v199) & 1) == 0)
                          {
LABEL_256:
                            v203 = (_QWORD *)(v1026 + 8 * v139++);
                            goto LABEL_257;
                          }
                        }
                      }
                    }
                    else if (v196 <= v1017)
                    {
                      goto LABEL_256;
                    }
                  }
                  v203 = (_QWORD *)(v1035 + 8 * v116++);
LABEL_257:
                  *v203 = v194;
                  if (!--v72)
                    goto LABEL_394;
                }
              }
              if (v60 == v58)
                goto LABEL_1312;
              v1069 = 0;
              v162 = *(_QWORD *)(v1068 + 16);
              if (v162)
              {
                v163 = *(_QWORD **)(v1068 + 48);
                do
                {
                  v164 = v162 >> 1;
                  v165 = &v163[v162 >> 1];
                  v167 = *v165;
                  v166 = v165 + 1;
                  v162 += ~(v162 >> 1);
                  if (v167 < *v71 - v74)
                    v163 = v166;
                  else
                    v162 = v164;
                }
                while (v162);
              }
              else
              {
                v163 = *(_QWORD **)(v1068 + 48);
              }
              v116 = 0;
              v139 = 0;
              v1069 = ((uint64_t)v163 - *(_QWORD *)(v1068 + 48)) >> 3;
              if (v72 <= 1)
                v72 = 1;
              v266 = v69;
              v267 = (v69 + 1);
              while (1)
              {
                v269 = *v71++;
                v268 = v269;
                v270 = xgboost::common::SparseColumn<unsigned char>::GetBinIdx(v73, v269 - v74, (unint64_t *)&v1069);
                if (v270 == -1)
                  break;
                if (v70 == 1)
                {
                  v271 = (uint64_t *)(*(_QWORD *)v1057 + 8 * (v268 - *((_QWORD *)v1057 + 19)));
                  v272 = xgboost::common::BinarySearchBin<xgboost::common::Index>(*v271, v271[1], v1049, *(_DWORD *)(v1011->__m_.__sig + 4 * v266), *(_DWORD *)(v1011->__m_.__sig + 4 * v267));
                  if (v272 == -1)
                    break;
                  v273 = *(float *)(*v1005 + 4 * v272);
                  v274 = v273 >= 0.0 && v273 < 16777000.0;
                  v275 = v274 && v273 < (float)(32 * v1066);
                  if (!v275 || v1066 <= (unint64_t)v273 >> 5)
                    break;
                  v276 = (unint64_t)(int)v273 >> 5;
                  if (v276 >= v1066)
                    goto LABEL_1312;
                  if (((*(_DWORD *)(v1067 + 4 * v276) >> ~(int)v273) & 1) == 0)
                    break;
                }
                else if (v270 <= v1017)
                {
                  break;
                }
                v277 = (_QWORD *)(v1035 + 8 * v116++);
LABEL_393:
                *v277 = v268;
                if (!--v72)
                  goto LABEL_394;
              }
              v277 = (_QWORD *)(v1026 + 8 * v139++);
              goto LABEL_393;
            }
            if ((v68 & 0x80000000) == 0)
            {
              if (v60 == v58)
                goto LABEL_1312;
              v116 = 0;
              v139 = 0;
              while (1)
              {
                v141 = *v71++;
                v140 = v141;
                v142 = xgboost::common::DenseColumn<unsigned char,true>::GetBinIdx(v73, v141 - v74);
                if (v142 != -1)
                {
                  if (v70 == 1)
                  {
                    v143 = (uint64_t *)(*(_QWORD *)v1057 + 8 * (v140 - *((_QWORD *)v1057 + 19)));
                    v144 = xgboost::common::BinarySearchBin<xgboost::common::Index>(*v143, v143[1], v1049, *(_DWORD *)(v1011->__m_.__sig + 4 * v69), *(_DWORD *)(v1011->__m_.__sig + 4 * (v69 + 1)));
                    if (v144 != -1)
                    {
                      v145 = *(float *)(*v1005 + 4 * v144);
                      v146 = v145 >= 0.0 && v145 < 16777000.0;
                      if (v146 && v145 < (float)(32 * v1066))
                      {
                        if (v1066 <= (unint64_t)v145 >> 5)
                          goto LABEL_163;
                        v148 = (unint64_t)(int)v145 >> 5;
                        if (v148 >= v1066)
                          goto LABEL_1312;
                        if (((*(_DWORD *)(v1067 + 4 * v148) >> ~(int)v145) & 1) == 0)
                        {
LABEL_163:
                          v149 = (_QWORD *)(v1026 + 8 * v139++);
                          goto LABEL_164;
                        }
                      }
                    }
                  }
                  else if (v142 <= v1017)
                  {
                    goto LABEL_163;
                  }
                }
                v149 = (_QWORD *)(v1035 + 8 * v116++);
LABEL_164:
                *v149 = v140;
                if (!--v72)
                  goto LABEL_394;
              }
            }
            if (v60 == v58)
              goto LABEL_1312;
            v116 = 0;
            v139 = 0;
            while (1)
            {
              v225 = *v71++;
              v224 = v225;
              v226 = xgboost::common::DenseColumn<unsigned char,true>::GetBinIdx(v73, v225 - v74);
              if (v226 == -1)
                break;
              if (v70 == 1)
              {
                v227 = (uint64_t *)(*(_QWORD *)v1057 + 8 * (v224 - *((_QWORD *)v1057 + 19)));
                v228 = xgboost::common::BinarySearchBin<xgboost::common::Index>(*v227, v227[1], v1049, *(_DWORD *)(v1011->__m_.__sig + 4 * v69), *(_DWORD *)(v1011->__m_.__sig + 4 * (v69 + 1)));
                if (v228 == -1)
                  break;
                v229 = *(float *)(*v1005 + 4 * v228);
                v230 = v229 >= 0.0 && v229 < 16777000.0;
                v231 = v230 && v229 < (float)(32 * v1066);
                if (!v231 || v1066 <= (unint64_t)v229 >> 5)
                  break;
                v232 = (unint64_t)(int)v229 >> 5;
                if (v232 >= v1066)
                  goto LABEL_1312;
                if (((*(_DWORD *)(v1067 + 4 * v232) >> ~(int)v229) & 1) == 0)
                  break;
              }
              else if (v226 <= v1017)
              {
                break;
              }
              v233 = (_QWORD *)(v1035 + 8 * v116++);
LABEL_320:
              *v233 = v224;
              if (!--v72)
              {
LABEL_394:
                a1 = v1048;
                v278 = v1048[3];
                v279 = *(_QWORD *)(v278 + 8 * v993) + v999;
                v248 = v1048[6];
                v280 = (v1048[7] - v248) >> 4;
                if (v280 <= v279
                  || (**(_QWORD **)(v248 + 16 * v279) = v139, v250 = *(_QWORD *)(v278 + 8 * v993) + v999, v280 <= v250))
                {
                  std::vector<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry,std::allocator<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry>>::__throw_out_of_range[abi:ne180100]();
                }
                goto LABEL_396;
              }
            }
            v233 = (_QWORD *)(v1026 + 8 * v139++);
            goto LABEL_320;
          }
LABEL_1313:
          std::vector<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry,std::allocator<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry>>::__throw_out_of_range[abi:ne180100]();
        }
        v994 = (int)v57;
        v1000 = v58 >> 11;
        v81 = *(_QWORD *)(a1[3] + 8 * (int)v57) + v62;
        v82 = a1[6];
        if (v81 >= (a1[7] - v82) >> 4)
          goto LABEL_1313;
        v1018 = v1063.__begin_[v57];
        v83 = *(_QWORD *)(a1[13] + 24 * v61);
        v84 = *(_QWORD *)(v82 + 16 * v81);
        v85 = *(_DWORD *)(a4[20] + 20 * (int)v61 + 12);
        v86 = v85 & 0x7FFFFFFF;
        xgboost::common::ColumnMatrix::GetColumn<unsigned short,true>(&v1068, (uint64_t *)v1047, v85 & 0x7FFFFFFF);
        v991 = v56;
        v87 = *(unsigned __int8 *)(a4[29] + v61);
        xgboost::RegTree::NodeCats((xgboost::RegTree *)&v1066, a4, v61);
        v88 = (uint64_t *)(v83 + 8 * v58);
        v89 = (uint64_t)(8 * v60 - 8 * v58) >> 3;
        v1027 = v84 + 32;
        v1036 = v84 + 16416;
        v1006 = (_QWORD *)*((_QWORD *)v1057 + 15);
        v1012 = (std::mutex *)*((_QWORD *)v1057 + 16);
        v73 = v1068;
        v90 = *((_QWORD *)v1057 + 19);
        if (*(_BYTE *)(v1068 + 8))
        {
          if ((v85 & 0x80000000) == 0)
          {
            if (v60 == v58)
              goto LABEL_1312;
            v1069 = 0;
            v91 = *(_QWORD *)(v1068 + 16);
            if (v91)
            {
              v92 = *(_QWORD **)(v1068 + 48);
              do
              {
                v93 = v91 >> 1;
                v94 = &v92[v91 >> 1];
                v96 = *v94;
                v95 = v94 + 1;
                v91 += ~(v91 >> 1);
                if (v96 < *v88 - v90)
                  v92 = v95;
                else
                  v91 = v93;
              }
              while (v91);
            }
            else
            {
              v92 = *(_QWORD **)(v1068 + 48);
            }
            v116 = 0;
            v117 = 0;
            v1069 = ((uint64_t)v92 - *(_QWORD *)(v1068 + 48)) >> 3;
            if (v89 <= 1)
              v89 = 1;
            v168 = v86;
            v169 = (v86 + 1);
            while (1)
            {
              v171 = *v88++;
              v170 = v171;
              v172 = xgboost::common::SparseColumn<unsigned short>::GetBinIdx(v73, v171 - v90, (unint64_t *)&v1069);
              if (v172 != -1)
              {
                if (v87 == 1)
                {
                  v173 = (uint64_t *)(*(_QWORD *)v1057 + 8 * (v170 - *((_QWORD *)v1057 + 19)));
                  v174 = xgboost::common::BinarySearchBin<xgboost::common::Index>(*v173, v173[1], v1049, *(_DWORD *)(v1012->__m_.__sig + 4 * v168), *(_DWORD *)(v1012->__m_.__sig + 4 * v169));
                  if (v174 != -1)
                  {
                    v175 = *(float *)(*v1006 + 4 * v174);
                    v176 = v175 >= 0.0 && v175 < 16777000.0;
                    if (v176 && v175 < (float)(32 * v1066))
                    {
                      if (v1066 <= (unint64_t)v175 >> 5)
                        goto LABEL_210;
                      v178 = (unint64_t)(int)v175 >> 5;
                      if (v178 >= v1066)
                        goto LABEL_1312;
                      if (((*(_DWORD *)(v1067 + 4 * v178) >> ~(int)v175) & 1) == 0)
                      {
LABEL_210:
                        v179 = (_QWORD *)(v1027 + 8 * v117++);
                        goto LABEL_211;
                      }
                    }
                  }
                }
                else if (v172 <= v1018)
                {
                  goto LABEL_210;
                }
              }
              v179 = (_QWORD *)(v1036 + 8 * v116++);
LABEL_211:
              *v179 = v170;
              if (!--v89)
                goto LABEL_344;
            }
          }
          if (v60 == v58)
            goto LABEL_1312;
          v1069 = 0;
          v150 = *(_QWORD *)(v1068 + 16);
          if (v150)
          {
            v151 = *(_QWORD **)(v1068 + 48);
            do
            {
              v152 = v150 >> 1;
              v153 = &v151[v150 >> 1];
              v155 = *v153;
              v154 = v153 + 1;
              v150 += ~(v150 >> 1);
              if (v155 < *v88 - v90)
                v151 = v154;
              else
                v150 = v152;
            }
            while (v150);
          }
          else
          {
            v151 = *(_QWORD **)(v1068 + 48);
          }
          v116 = 0;
          v117 = 0;
          v1069 = ((uint64_t)v151 - *(_QWORD *)(v1068 + 48)) >> 3;
          if (v89 <= 1)
            v89 = 1;
          v234 = v86;
          v235 = (v86 + 1);
          while (1)
          {
            v237 = *v88++;
            v236 = v237;
            v238 = xgboost::common::SparseColumn<unsigned short>::GetBinIdx(v73, v237 - v90, (unint64_t *)&v1069);
            if (v238 == -1)
              break;
            if (v87 == 1)
            {
              v239 = (uint64_t *)(*(_QWORD *)v1057 + 8 * (v236 - *((_QWORD *)v1057 + 19)));
              v240 = xgboost::common::BinarySearchBin<xgboost::common::Index>(*v239, v239[1], v1049, *(_DWORD *)(v1012->__m_.__sig + 4 * v234), *(_DWORD *)(v1012->__m_.__sig + 4 * v235));
              if (v240 == -1)
                break;
              v241 = *(float *)(*v1006 + 4 * v240);
              v242 = v241 >= 0.0 && v241 < 16777000.0;
              v243 = v242 && v241 < (float)(32 * v1066);
              if (!v243 || v1066 <= (unint64_t)v241 >> 5)
                break;
              v244 = (unint64_t)(int)v241 >> 5;
              if (v244 >= v1066)
                goto LABEL_1312;
              if (((*(_DWORD *)(v1067 + 4 * v244) >> ~(int)v241) & 1) == 0)
                break;
            }
            else if (v238 <= v1018)
            {
              break;
            }
            v245 = (_QWORD *)(v1036 + 8 * v116++);
LABEL_343:
            *v245 = v236;
            if (!--v89)
              goto LABEL_344;
          }
          v245 = (_QWORD *)(v1027 + 8 * v117++);
          goto LABEL_343;
        }
        if ((v85 & 0x80000000) == 0)
        {
          if (v60 == v58)
            goto LABEL_1312;
          v116 = 0;
          v117 = 0;
          while (1)
          {
            v119 = *v88++;
            v118 = v119;
            v120 = xgboost::common::DenseColumn<unsigned short,true>::GetBinIdx(v73, v119 - v90);
            if (v120 != -1)
            {
              if (v87 == 1)
              {
                v121 = (uint64_t *)(*(_QWORD *)v1057 + 8 * (v118 - *((_QWORD *)v1057 + 19)));
                v122 = xgboost::common::BinarySearchBin<xgboost::common::Index>(*v121, v121[1], v1049, *(_DWORD *)(v1012->__m_.__sig + 4 * v86), *(_DWORD *)(v1012->__m_.__sig + 4 * (v86 + 1)));
                if (v122 != -1)
                {
                  v123 = *(float *)(*v1006 + 4 * v122);
                  v124 = v123 >= 0.0 && v123 < 16777000.0;
                  if (v124 && v123 < (float)(32 * v1066))
                  {
                    if (v1066 <= (unint64_t)v123 >> 5)
                      goto LABEL_119;
                    v126 = (unint64_t)(int)v123 >> 5;
                    if (v126 >= v1066)
                      goto LABEL_1312;
                    if (((*(_DWORD *)(v1067 + 4 * v126) >> ~(int)v123) & 1) == 0)
                    {
LABEL_119:
                      v127 = (_QWORD *)(v1027 + 8 * v117++);
                      goto LABEL_120;
                    }
                  }
                }
              }
              else if (v120 <= v1018)
              {
                goto LABEL_119;
              }
            }
            v127 = (_QWORD *)(v1036 + 8 * v116++);
LABEL_120:
            *v127 = v118;
            if (!--v89)
              goto LABEL_344;
          }
        }
        if (v60 == v58)
          goto LABEL_1312;
        v116 = 0;
        v117 = 0;
        while (1)
        {
          v205 = *v88++;
          v204 = v205;
          v206 = xgboost::common::DenseColumn<unsigned short,true>::GetBinIdx(v73, v205 - v90);
          if (v206 == -1)
            break;
          if (v87 == 1)
          {
            v207 = (uint64_t *)(*(_QWORD *)v1057 + 8 * (v204 - *((_QWORD *)v1057 + 19)));
            v208 = xgboost::common::BinarySearchBin<xgboost::common::Index>(*v207, v207[1], v1049, *(_DWORD *)(v1012->__m_.__sig + 4 * v86), *(_DWORD *)(v1012->__m_.__sig + 4 * (v86 + 1)));
            if (v208 == -1)
              break;
            v209 = *(float *)(*v1006 + 4 * v208);
            v210 = v209 >= 0.0 && v209 < 16777000.0;
            v211 = v210 && v209 < (float)(32 * v1066);
            if (!v211 || v1066 <= (unint64_t)v209 >> 5)
              break;
            v212 = (unint64_t)(int)v209 >> 5;
            if (v212 >= v1066)
              goto LABEL_1312;
            if (((*(_DWORD *)(v1067 + 4 * v212) >> ~(int)v209) & 1) == 0)
              break;
          }
          else if (v206 <= v1018)
          {
            break;
          }
          v213 = (_QWORD *)(v1036 + 8 * v116++);
LABEL_278:
          *v213 = v204;
          if (!--v89)
          {
LABEL_344:
            a1 = v1048;
            v246 = v1048[3];
            v247 = *(_QWORD *)(v246 + 8 * v994) + v1000;
            v248 = v1048[6];
            v249 = (v1048[7] - v248) >> 4;
            if (v249 <= v247
              || (**(_QWORD **)(v248 + 16 * v247) = v117, v250 = *(_QWORD *)(v246 + 8 * v994) + v1000, v249 <= v250))
            {
              std::vector<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry,std::allocator<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry>>::__throw_out_of_range[abi:ne180100]();
            }
            goto LABEL_396;
          }
        }
        v213 = (_QWORD *)(v1027 + 8 * v117++);
        goto LABEL_278;
      }
      v995 = (int)v57;
      v1001 = v58 >> 11;
      v97 = *(_QWORD *)(a1[3] + 8 * (int)v57) + v62;
      v98 = a1[6];
      if (v97 >= (a1[7] - v98) >> 4)
        goto LABEL_1313;
      v1019 = v1063.__begin_[v57];
      v99 = *(_QWORD *)(a1[13] + 24 * v61);
      v100 = *(_QWORD *)(v98 + 16 * v97);
      v101 = *(_DWORD *)(a4[20] + 20 * (int)v61 + 12);
      v102 = v101 & 0x7FFFFFFF;
      xgboost::common::ColumnMatrix::GetColumn<unsigned int,true>(&v1068, (uint64_t *)v1047, v101 & 0x7FFFFFFF);
      v991 = v56;
      v103 = *(unsigned __int8 *)(a4[29] + v61);
      xgboost::RegTree::NodeCats((xgboost::RegTree *)&v1066, a4, v61);
      v104 = (uint64_t *)(v99 + 8 * v58);
      v105 = (uint64_t)(8 * v60 - 8 * v58) >> 3;
      v1028 = v100 + 32;
      v1037 = v100 + 16416;
      v1007 = (_QWORD *)*((_QWORD *)v1057 + 15);
      v1013 = (std::mutex *)*((_QWORD *)v1057 + 16);
      v73 = v1068;
      v106 = *((_QWORD *)v1057 + 19);
      if (*(_BYTE *)(v1068 + 8))
      {
        if ((v101 & 0x80000000) == 0)
        {
          if (v60 == v58)
            goto LABEL_1312;
          v1069 = 0;
          v107 = *(_QWORD *)(v1068 + 16);
          if (v107)
          {
            v108 = *(_QWORD **)(v1068 + 48);
            do
            {
              v109 = v107 >> 1;
              v110 = &v108[v107 >> 1];
              v112 = *v110;
              v111 = v110 + 1;
              v107 += ~(v107 >> 1);
              if (v112 < *v104 - v106)
                v108 = v111;
              else
                v107 = v109;
            }
            while (v107);
          }
          else
          {
            v108 = *(_QWORD **)(v1068 + 48);
          }
          v116 = 0;
          v128 = 0;
          v1069 = ((uint64_t)v108 - *(_QWORD *)(v1068 + 48)) >> 3;
          if (v105 <= 1)
            v105 = 1;
          v180 = v102;
          v181 = (v102 + 1);
          while (2)
          {
            v183 = *v104++;
            v182 = v183;
            v184 = xgboost::common::SparseColumn<unsigned int>::GetBinIdx(v73, v183 - v106, (unint64_t *)&v1069);
            if (v184 == -1)
            {
LABEL_231:
              v191 = (_QWORD *)(v1037 + 8 * v116++);
            }
            else
            {
              if (v103 == 1)
              {
                v185 = (uint64_t *)(*(_QWORD *)v1057 + 8 * (v182 - *((_QWORD *)v1057 + 19)));
                v186 = xgboost::common::BinarySearchBin<xgboost::common::Index>(*v185, v185[1], v1049, *(_DWORD *)(v1013->__m_.__sig + 4 * v180), *(_DWORD *)(v1013->__m_.__sig + 4 * v181));
                if (v186 == -1)
                  goto LABEL_231;
                v187 = *(float *)(*v1007 + 4 * v186);
                v188 = v187 >= 0.0 && v187 < 16777000.0;
                if (!v188 || v187 >= (float)(32 * v1066))
                  goto LABEL_231;
                if (v1066 > (unint64_t)v187 >> 5)
                {
                  v190 = (unint64_t)(int)v187 >> 5;
                  if (v190 >= v1066)
                    goto LABEL_1312;
                  if (((*(_DWORD *)(v1067 + 4 * v190) >> ~(int)v187) & 1) != 0)
                    goto LABEL_231;
                }
              }
              else if (v184 > v1019)
              {
                goto LABEL_231;
              }
              v191 = (_QWORD *)(v1028 + 8 * v128++);
            }
            *v191 = v182;
            if (!--v105)
              goto LABEL_369;
            continue;
          }
        }
        if (v60 != v58)
        {
          v1069 = 0;
          v156 = *(_QWORD *)(v1068 + 16);
          if (v156)
          {
            v157 = *(_QWORD **)(v1068 + 48);
            do
            {
              v158 = v156 >> 1;
              v159 = &v157[v156 >> 1];
              v161 = *v159;
              v160 = v159 + 1;
              v156 += ~(v156 >> 1);
              if (v161 < *v104 - v106)
                v157 = v160;
              else
                v156 = v158;
            }
            while (v156);
          }
          else
          {
            v157 = *(_QWORD **)(v1068 + 48);
          }
          v116 = 0;
          v128 = 0;
          v1069 = ((uint64_t)v157 - *(_QWORD *)(v1068 + 48)) >> 3;
          if (v105 <= 1)
            v105 = 1;
          v251 = v102;
          v252 = (v102 + 1);
          while (1)
          {
            v254 = *v104++;
            v253 = v254;
            v255 = xgboost::common::SparseColumn<unsigned int>::GetBinIdx(v73, v254 - v106, (unint64_t *)&v1069);
            if (v255 == -1)
              break;
            if (v103 == 1)
            {
              v256 = (uint64_t *)(*(_QWORD *)v1057 + 8 * (v253 - *((_QWORD *)v1057 + 19)));
              v257 = xgboost::common::BinarySearchBin<xgboost::common::Index>(*v256, v256[1], v1049, *(_DWORD *)(v1013->__m_.__sig + 4 * v251), *(_DWORD *)(v1013->__m_.__sig + 4 * v252));
              if (v257 == -1)
                break;
              v258 = *(float *)(*v1007 + 4 * v257);
              v259 = v258 >= 0.0 && v258 < 16777000.0;
              v260 = v259 && v258 < (float)(32 * v1066);
              if (!v260 || v1066 <= (unint64_t)v258 >> 5)
                break;
              v261 = (unint64_t)(int)v258 >> 5;
              if (v261 >= v1066)
                goto LABEL_1312;
              if (((*(_DWORD *)(v1067 + 4 * v261) >> ~(int)v258) & 1) == 0)
                break;
            }
            else if (v255 <= v1019)
            {
              break;
            }
            v262 = (_QWORD *)(v1037 + 8 * v116++);
LABEL_368:
            *v262 = v253;
            if (!--v105)
              goto LABEL_369;
          }
          v262 = (_QWORD *)(v1028 + 8 * v128++);
          goto LABEL_368;
        }
LABEL_1312:
        std::terminate();
      }
      if ((v101 & 0x80000000) == 0)
      {
        if (v60 == v58)
          goto LABEL_1312;
        v116 = 0;
        v128 = 0;
        while (2)
        {
          v130 = *v104++;
          v129 = v130;
          v131 = xgboost::common::DenseColumn<unsigned int,true>::GetBinIdx(v73, v130 - v106);
          if (v131 == -1)
          {
LABEL_139:
            v138 = (_QWORD *)(v1037 + 8 * v116++);
          }
          else
          {
            if (v103 == 1)
            {
              v132 = (uint64_t *)(*(_QWORD *)v1057 + 8 * (v129 - *((_QWORD *)v1057 + 19)));
              v133 = xgboost::common::BinarySearchBin<xgboost::common::Index>(*v132, v132[1], v1049, *(_DWORD *)(v1013->__m_.__sig + 4 * v102), *(_DWORD *)(v1013->__m_.__sig + 4 * (v102 + 1)));
              if (v133 == -1)
                goto LABEL_139;
              v134 = *(float *)(*v1007 + 4 * v133);
              v135 = v134 >= 0.0 && v134 < 16777000.0;
              if (!v135 || v134 >= (float)(32 * v1066))
                goto LABEL_139;
              if (v1066 > (unint64_t)v134 >> 5)
              {
                v137 = (unint64_t)(int)v134 >> 5;
                if (v137 >= v1066)
                  goto LABEL_1312;
                if (((*(_DWORD *)(v1067 + 4 * v137) >> ~(int)v134) & 1) != 0)
                  goto LABEL_139;
              }
            }
            else if (v131 > v1019)
            {
              goto LABEL_139;
            }
            v138 = (_QWORD *)(v1028 + 8 * v128++);
          }
          *v138 = v129;
          if (!--v105)
            goto LABEL_369;
          continue;
        }
      }
      if (v60 == v58)
        goto LABEL_1312;
      v116 = 0;
      v128 = 0;
      do
      {
        v215 = *v104++;
        v214 = v215;
        v216 = xgboost::common::DenseColumn<unsigned int,true>::GetBinIdx(v73, v215 - v106);
        if (v216 != -1)
        {
          if (v103 == 1)
          {
            v217 = (uint64_t *)(*(_QWORD *)v1057 + 8 * (v214 - *((_QWORD *)v1057 + 19)));
            v218 = xgboost::common::BinarySearchBin<xgboost::common::Index>(*v217, v217[1], v1049, *(_DWORD *)(v1013->__m_.__sig + 4 * v102), *(_DWORD *)(v1013->__m_.__sig + 4 * (v102 + 1)));
            if (v218 != -1)
            {
              v219 = *(float *)(*v1007 + 4 * v218);
              v220 = v219 >= 0.0 && v219 < 16777000.0;
              v221 = v220 && v219 < (float)(32 * v1066);
              if (v221 && v1066 > (unint64_t)v219 >> 5)
              {
                v222 = (unint64_t)(int)v219 >> 5;
                if (v222 >= v1066)
                  goto LABEL_1312;
                if (((*(_DWORD *)(v1067 + 4 * v222) >> ~(int)v219) & 1) != 0)
                {
LABEL_296:
                  v223 = (_QWORD *)(v1037 + 8 * v116++);
                  goto LABEL_299;
                }
              }
            }
          }
          else if (v216 > v1019)
          {
            goto LABEL_296;
          }
        }
        v223 = (_QWORD *)(v1028 + 8 * v128++);
LABEL_299:
        *v223 = v214;
        --v105;
      }
      while (v105);
LABEL_369:
      a1 = v1048;
      v263 = v1048[3];
      v264 = *(_QWORD *)(v263 + 8 * v995) + v1001;
      v248 = v1048[6];
      v265 = (v1048[7] - v248) >> 4;
      if (v265 <= v264
        || (**(_QWORD **)(v248 + 16 * v264) = v128, v250 = *(_QWORD *)(v263 + 8 * v995) + v1001, v265 <= v250))
      {
        std::vector<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry,std::allocator<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry>>::__throw_out_of_range[abi:ne180100]();
      }
LABEL_396:
      *(_QWORD *)(*(_QWORD *)(v248 + 16 * v250) + 8) = v116;
      v56 = v991;
      if (v73)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
LABEL_398:
      if (++v56 == v989)
      {
LABEL_399:
        dmlc::OMPException::Rethrow(&v1070);
        std::mutex::~mutex(&v1071);
        std::exception_ptr::~exception_ptr(&v1070);
        xgboost::common::PartitionBuilder<2048ul>::CalculateRowOffsets(a1);
        v1070.__ptr_ = 0;
        v1071.__m_.__sig = 850045863;
        memset(v1071.__m_.__opaque, 0, sizeof(v1071.__m_.__opaque));
        if (v1060[1] != v1060[0])
        {
          v281 = 0;
          v282 = ((char *)v1060[1] - (char *)v1060[0]) >> 4;
          do
          {
            v283 = xgboost::common::BlockedSpace2d::GetFirstDimension((xgboost::common::BlockedSpace2d *)v1060, v281);
            v284 = xgboost::common::BlockedSpace2d::GetRange((xgboost::common::BlockedSpace2d *)v1060, v281);
            xgboost::common::PartitionBuilder<2048ul>::MergeToArray(a1, v283, v284, *(_QWORD *)(a1[13] + 24 * *(unsigned int *)(*v1025 + 88 * v283)));
            ++v281;
          }
          while (v282 != v281);
        }
        dmlc::OMPException::Rethrow(&v1070);
        std::mutex::~mutex(&v1071);
        std::exception_ptr::~exception_ptr(&v1070);
        xgboost::tree::HistRowPartitioner::AddSplitsToRowSet(a1, v1025, (uint64_t)a4);
        goto LABEL_1305;
      }
    }
  }
  memset(&v1063, 0, sizeof(v1063));
  xgboost::tree::HistRowPartitioner::FindSplitConditions(a3, (uint64_t)a4, (uint64_t)v1057, &v1063);
  *(_OWORD *)__p = 0u;
  v1062 = 0u;
  *(_OWORD *)v1060 = 0u;
  if (v9 == v10)
  {
    v38 = 0;
    v37 = 0;
  }
  else
  {
    v30 = 0;
    do
    {
      v31 = *(_QWORD *)(a1[13] + 24 * *(unsigned int *)(*a3 + 88 * v30) + 8)
          - *(_QWORD *)(a1[13] + 24 * *(unsigned int *)(*a3 + 88 * v30));
      v32 = v31 >> 3;
      if ((v31 & 0x3FF8) != 0)
        v33 = ((unint64_t)(v31 >> 3) >> 11) + 1;
      else
        v33 = (unint64_t)(v31 >> 3) >> 11;
      if (v33)
      {
        v34 = 0;
        do
        {
          v35 = v34 + 2048;
          if (v32 >= v34 + 2048)
            v36 = v34 + 2048;
          else
            v36 = v32;
          xgboost::common::BlockedSpace2d::AddBlock((xgboost::common::BlockedSpace2d *)v1060, v30, v34, v36);
          v34 = v35;
          --v33;
        }
        while (v33);
      }
      ++v30;
    }
    while (v30 != v11);
    v38 = v1060[0];
    v37 = v1060[1];
  }
  std::vector<std::pair<double,double>>::resize((uint64_t)a1, v11);
  std::vector<unsigned long>::resize((uint64_t)(a1 + 3), v11 + 1);
  v490 = (v37 - v38) >> 4;
  v491 = (_QWORD *)a1[3];
  *v491 = 0;
  if (v11 + 1 >= 2)
  {
    v492 = 0;
    v493 = (unsigned int *)*a3;
    v494 = a1[13];
    v495 = v491 + 1;
    do
    {
      v496 = *v493;
      v493 += 22;
      v497 = *(_QWORD *)(v494 + 24 * v496 + 8) - *(_QWORD *)(v494 + 24 * v496);
      v492 += (unint64_t)(v497 >> 3) >> 11;
      if ((v497 & 0x3FF8) != 0)
        ++v492;
      *v495++ = v492;
      --v11;
    }
    while (v11);
  }
  if (a1[9] < v490)
  {
    std::vector<std::shared_ptr<xgboost::common::PartitionBuilder<2048ul>::BlockInfo>>::resize((uint64_t)(a1 + 6), v490);
    a1[9] = v490;
  }
  v988 = (uint64_t *)((char *)v1057 + 152);
  if (a1[16] != *((_QWORD *)v1057 + 19))
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v1070);
    if (v1070.__ptr_)
    {
      v498 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v1066);
      dmlc::LogMessageFatal::Entry::Init(v498, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/./updater_quantile_hist.h");
      v499 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v1066);
      v500 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v499, (uint64_t)"Check failed: ", 14);
      v501 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v500, (uint64_t)"base_rowid == gmat.base_rowid", 29);
      v502 = *((char *)v1070.__ptr_ + 23);
      v503 = v502 >= 0 ? v1070.__ptr_ : *(void **)v1070.__ptr_;
      v504 = v502 >= 0 ? *((unsigned __int8 *)v1070.__ptr_ + 23) : *((_QWORD *)v1070.__ptr_ + 1);
      v505 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v501, (uint64_t)v503, v504);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v505, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v1066);
      v506 = v1070.__ptr_;
      v1070.__ptr_ = 0;
      if (v506)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v1070, (uint64_t)v506);
    }
  }
  v1070.__ptr_ = 0;
  v1071.__m_.__sig = 850045863;
  memset(v1071.__m_.__opaque, 0, sizeof(v1071.__m_.__opaque));
  if (v1060[1] == v1060[0])
    goto LABEL_1060;
  v507 = 0;
  v990 = ((char *)v1060[1] - (char *)v1060[0]) >> 4;
  v1053 = (_QWORD *)((char *)v1057 + 24);
  do
  {
    v508 = xgboost::common::BlockedSpace2d::GetFirstDimension((xgboost::common::BlockedSpace2d *)v1060, v507);
    v509 = xgboost::common::BlockedSpace2d::GetRange((xgboost::common::BlockedSpace2d *)v1060, v507);
    v511 = v510;
    v512 = *(int *)(*a3 + 88 * v508);
    xgboost::common::PartitionBuilder<2048ul>::AllocateForTask((uint64_t)v1048, *(_QWORD *)(v1048[3] + 8 * (int)v508) + (v509 >> 11));
    v513 = v509 >> 11;
    v514 = *(_DWORD *)(v1047 + 152);
    if (v514 != 4)
    {
      if (v514 != 2)
      {
        if (v514 != 1)
        {
          v591 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v1069);
          dmlc::LogMessageFatal::Entry::Init(v591, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/./updater_quantile_hist.h");
          v592 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v1069);
          v593 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v592, (uint64_t)"Check failed: false", 19);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v593, (uint64_t)": ", 2);
          std::ostream::operator<<();
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v1069);
          goto LABEL_1059;
        }
        v996 = (int)v508;
        v1002 = v509 >> 11;
        v515 = *(_QWORD *)(v1048[3] + 8 * (int)v508) + v513;
        v516 = v1048[6];
        if (v515 < (v1048[7] - v516) >> 4)
        {
          v1030 = v1063.__begin_[v508];
          v517 = *(_QWORD *)(v1048[13] + 24 * v512);
          v518 = *(_QWORD *)(v516 + 16 * v515);
          v519 = *(_DWORD *)(a4[20] + 20 * (int)v512 + 12);
          v520 = v519 & 0x7FFFFFFF;
          xgboost::common::ColumnMatrix::GetColumn<unsigned char,false>(&v1068, (uint64_t *)v1047, v519 & 0x7FFFFFFF);
          v521 = *(unsigned __int8 *)(a4[29] + v512);
          xgboost::RegTree::NodeCats((xgboost::RegTree *)&v1066, a4, v512);
          v522 = (uint64_t *)(v517 + 8 * v509);
          v523 = (uint64_t)(8 * v511 - 8 * v509) >> 3;
          v1041 = v518 + 32;
          v1014 = (std::mutex *)(v518 + 16416);
          v1008 = (_QWORD *)*((_QWORD *)v1057 + 15);
          v1021 = (_QWORD *)*((_QWORD *)v1057 + 16);
          v524 = v1068;
          v992 = v507;
          if (*(_BYTE *)(v1068 + 8))
          {
            v1065 = 0;
            v1064 = 1;
            dmlc::LogCheckFormat<BOOL,BOOL>(&v1069);
            if (v1069)
            {
              v525 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v1065);
              dmlc::LogMessageFatal::Entry::Init(v525, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/./../common/partition_builder.h");
              v526 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v1065);
              v527 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v526, (uint64_t)"Check failed: ", 14);
              v528 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v527, (uint64_t)"any_missing == true", 19);
              v529 = *(char *)(v1069 + 23);
              v530 = v529 >= 0 ? v1069 : *(_QWORD *)v1069;
              v531 = v529 >= 0 ? *(unsigned __int8 *)(v1069 + 23) : *(_QWORD *)(v1069 + 8);
              v532 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v528, v530, v531);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v532, (uint64_t)": ", 2);
              dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v1065);
              v533 = v1069;
              v1069 = 0;
              if (v533)
                std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v1069, v533);
            }
            v534 = *v988;
            if ((v519 & 0x80000000) == 0)
            {
              if (v511 == v509)
                goto LABEL_1312;
              v1069 = 0;
              v535 = *(_QWORD *)(v524 + 16);
              if (v535)
              {
                v536 = *(_QWORD **)(v524 + 48);
                do
                {
                  v537 = v535 >> 1;
                  v538 = &v536[v535 >> 1];
                  v540 = *v538;
                  v539 = v538 + 1;
                  v535 += ~(v535 >> 1);
                  if (v540 < *v522 - v534)
                    v536 = v539;
                  else
                    v535 = v537;
                }
                while (v535);
              }
              else
              {
                v536 = *(_QWORD **)(v524 + 48);
              }
              v595 = 0;
              v622 = 0;
              v1069 = ((uint64_t)v536 - *(_QWORD *)(v524 + 48)) >> 3;
              if (v523 <= 1)
                v523 = 1;
              while (1)
              {
                v676 = *v522++;
                v675 = v676;
                v677 = xgboost::common::SparseColumn<unsigned char>::GetBinIdx(v524, v676 - v534, (unint64_t *)&v1069);
                if (v521 == 1)
                {
                  v678 = (uint64_t *)(*(_QWORD *)v1057 + 8 * (v675 - *((_QWORD *)v1057 + 19)));
                  v679 = xgboost::common::BinarySearchBin<xgboost::common::Index>(*v678, v678[1], v1053, *(_DWORD *)(*v1021 + 4 * v520), *(_DWORD *)(*v1021 + 4 * (v520 + 1)));
                  if (v679 != -1)
                  {
                    v680 = *(float *)(*v1008 + 4 * v679);
                    v681 = v680 >= 0.0 && v680 < 16777000.0;
                    if (v681 && v680 < (float)(32 * v1066))
                    {
                      if (v1066 <= (unint64_t)v680 >> 5)
                        goto LABEL_922;
                      v683 = (unint64_t)(int)v680 >> 5;
                      if (v683 >= v1066)
                        goto LABEL_1312;
                      if (((*(_DWORD *)(v1067 + 4 * v683) >> ~(int)v680) & 1) == 0)
                      {
LABEL_922:
                        v685 = (uint64_t *)(v1041 + 8 * v622);
                        v684 = 1;
                        goto LABEL_923;
                      }
                    }
                  }
                }
                else if (v677 <= v1030)
                {
                  goto LABEL_922;
                }
                v684 = 0;
                v685 = &v1014->__m_.__sig + v595;
LABEL_923:
                v622 += v684;
                v595 += v684 ^ 1;
                *v685 = v675;
                if (!--v523)
                  goto LABEL_1055;
              }
            }
            if (v511 == v509)
              goto LABEL_1312;
            v1069 = 0;
            v646 = *(_QWORD *)(v524 + 16);
            if (v646)
            {
              v647 = *(_QWORD **)(v524 + 48);
              do
              {
                v648 = v646 >> 1;
                v649 = &v647[v646 >> 1];
                v651 = *v649;
                v650 = v649 + 1;
                v646 += ~(v646 >> 1);
                if (v651 < *v522 - v534)
                  v647 = v650;
                else
                  v646 = v648;
              }
              while (v646);
            }
            else
            {
              v647 = *(_QWORD **)(v524 + 48);
            }
            v595 = 0;
            v622 = 0;
            v1069 = ((uint64_t)v647 - *(_QWORD *)(v524 + 48)) >> 3;
            if (v523 <= 1)
              v523 = 1;
            while (1)
            {
              v751 = *v522++;
              v750 = v751;
              v752 = xgboost::common::SparseColumn<unsigned char>::GetBinIdx(v524, v751 - v534, (unint64_t *)&v1069);
              if (v521 == 1)
              {
                v753 = (uint64_t *)(*(_QWORD *)v1057 + 8 * (v750 - *((_QWORD *)v1057 + 19)));
                v754 = xgboost::common::BinarySearchBin<xgboost::common::Index>(*v753, v753[1], v1053, *(_DWORD *)(*v1021 + 4 * v520), *(_DWORD *)(*v1021 + 4 * (v520 + 1)));
                if (v754 == -1)
                  goto LABEL_1053;
                v755 = *(float *)(*v1008 + 4 * v754);
                v756 = v755 >= 0.0 && v755 < 16777000.0;
                v757 = v756 && v755 < (float)(32 * v1066);
                if (!v757 || v1066 <= (unint64_t)v755 >> 5)
                  goto LABEL_1053;
                v758 = (unint64_t)(int)v755 >> 5;
                if (v758 >= v1066)
                  goto LABEL_1312;
                if (((*(_DWORD *)(v1067 + 4 * v758) >> ~(int)v755) & 1) == 0)
                {
LABEL_1053:
                  v760 = (uint64_t *)(v1041 + 8 * v622);
                  v759 = 1;
                  goto LABEL_1054;
                }
              }
              else if (v752 <= v1030)
              {
                goto LABEL_1053;
              }
              v759 = 0;
              v760 = &v1014->__m_.__sig + v595;
LABEL_1054:
              v622 += v759;
              v595 += v759 ^ 1;
              *v760 = v750;
              if (!--v523)
                goto LABEL_1055;
            }
          }
          v621 = *v988;
          if ((v519 & 0x80000000) == 0)
          {
            if (v511 == v509)
              goto LABEL_1312;
            v595 = 0;
            v622 = 0;
            while (1)
            {
              v624 = *v522++;
              v623 = v624;
              v625 = v624 - v621;
              if (*(_QWORD *)(v524 + 16) <= (unint64_t)(v624 - v621))
                goto LABEL_1312;
              if (v521 == 1)
              {
                v626 = (uint64_t *)(*(_QWORD *)v1057 + 8 * (v623 - *((_QWORD *)v1057 + 19)));
                v627 = xgboost::common::BinarySearchBin<xgboost::common::Index>(*v626, v626[1], v1053, *(_DWORD *)(*v1021 + 4 * v520), *(_DWORD *)(*v1021 + 4 * (v520 + 1)));
                if (v627 != -1)
                {
                  v628 = *(float *)(*v1008 + 4 * v627);
                  v629 = v628 >= 0.0 && v628 < 16777000.0;
                  if (v629 && v628 < (float)(32 * v1066))
                  {
                    if (v1066 <= (unint64_t)v628 >> 5)
                      goto LABEL_834;
                    v631 = (unint64_t)(int)v628 >> 5;
                    if (v631 >= v1066)
                      goto LABEL_1312;
                    if (((*(_DWORD *)(v1067 + 4 * v631) >> ~(int)v628) & 1) == 0)
                    {
LABEL_834:
                      v633 = (uint64_t *)(v1041 + 8 * v622);
                      v632 = 1;
                      goto LABEL_835;
                    }
                  }
                }
              }
              else if (*(_DWORD *)(v524 + 32) + *(unsigned __int8 *)(*(_QWORD *)(v524 + 24) + v625) <= v1030)
              {
                goto LABEL_834;
              }
              v632 = 0;
              v633 = &v1014->__m_.__sig + v595;
LABEL_835:
              v622 += v632;
              v595 += v632 ^ 1;
              *v633 = v623;
              if (!--v523)
                goto LABEL_1055;
            }
          }
          if (v511 == v509)
            goto LABEL_1312;
          v595 = 0;
          v622 = 0;
          while (1)
          {
            v709 = *v522++;
            v708 = v709;
            v710 = v709 - v621;
            if (*(_QWORD *)(v524 + 16) <= (unint64_t)(v709 - v621))
              goto LABEL_1312;
            if (v521 == 1)
            {
              v711 = (uint64_t *)(*(_QWORD *)v1057 + 8 * (v708 - *((_QWORD *)v1057 + 19)));
              v712 = xgboost::common::BinarySearchBin<xgboost::common::Index>(*v711, v711[1], v1053, *(_DWORD *)(*v1021 + 4 * v520), *(_DWORD *)(*v1021 + 4 * (v520 + 1)));
              if (v712 == -1)
                goto LABEL_985;
              v713 = *(float *)(*v1008 + 4 * v712);
              v714 = v713 >= 0.0 && v713 < 16777000.0;
              v715 = v714 && v713 < (float)(32 * v1066);
              if (!v715 || v1066 <= (unint64_t)v713 >> 5)
                goto LABEL_985;
              v716 = (unint64_t)(int)v713 >> 5;
              if (v716 >= v1066)
                goto LABEL_1312;
              if (((*(_DWORD *)(v1067 + 4 * v716) >> ~(int)v713) & 1) == 0)
              {
LABEL_985:
                v718 = (uint64_t *)(v1041 + 8 * v622);
                v717 = 1;
                goto LABEL_986;
              }
            }
            else if (*(_DWORD *)(v524 + 32) + *(unsigned __int8 *)(*(_QWORD *)(v524 + 24) + v710) <= v1030)
            {
              goto LABEL_985;
            }
            v717 = 0;
            v718 = &v1014->__m_.__sig + v595;
LABEL_986:
            v622 += v717;
            v595 += v717 ^ 1;
            *v718 = v708;
            if (!--v523)
            {
LABEL_1055:
              v761 = v1048[3];
              v762 = *(_QWORD *)(v761 + 8 * v996) + v1002;
              v732 = v1048[6];
              v763 = (v1048[7] - v732) >> 4;
              if (v763 <= v762
                || (**(_QWORD **)(v732 + 16 * v762) = v622, v734 = *(_QWORD *)(v761 + 8 * v996) + v1002, v763 <= v734))
              {
                std::vector<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry,std::allocator<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry>>::__throw_out_of_range[abi:ne180100]();
              }
              goto LABEL_1057;
            }
          }
        }
LABEL_1318:
        std::vector<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry,std::allocator<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry>>::__throw_out_of_range[abi:ne180100]();
      }
      v997 = (int)v508;
      v1003 = v509 >> 11;
      v541 = *(_QWORD *)(v1048[3] + 8 * (int)v508) + v513;
      v542 = v1048[6];
      if (v541 >= (v1048[7] - v542) >> 4)
        goto LABEL_1318;
      v1031 = v1063.__begin_[v508];
      v543 = *(_QWORD *)(v1048[13] + 24 * v512);
      v544 = *(_QWORD *)(v542 + 16 * v541);
      v545 = *(_DWORD *)(a4[20] + 20 * (int)v512 + 12);
      v546 = v545 & 0x7FFFFFFF;
      xgboost::common::ColumnMatrix::GetColumn<unsigned short,false>(&v1068, (uint64_t *)v1047, v545 & 0x7FFFFFFF);
      v547 = *(unsigned __int8 *)(a4[29] + v512);
      xgboost::RegTree::NodeCats((xgboost::RegTree *)&v1066, a4, v512);
      v548 = (uint64_t *)(v543 + 8 * v509);
      v549 = (uint64_t)(8 * v511 - 8 * v509) >> 3;
      v1042 = v544 + 32;
      v1015 = (std::mutex *)(v544 + 16416);
      v1009 = (_QWORD *)*((_QWORD *)v1057 + 15);
      v1022 = (_QWORD *)*((_QWORD *)v1057 + 16);
      v524 = v1068;
      v992 = v507;
      if (*(_BYTE *)(v1068 + 8))
      {
        v1065 = 0;
        v1064 = 1;
        dmlc::LogCheckFormat<BOOL,BOOL>(&v1069);
        if (v1069)
        {
          v550 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v1065);
          dmlc::LogMessageFatal::Entry::Init(v550, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/./../common/partition_builder.h");
          v551 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v1065);
          v552 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v551, (uint64_t)"Check failed: ", 14);
          v553 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v552, (uint64_t)"any_missing == true", 19);
          v554 = *(char *)(v1069 + 23);
          v555 = v554 >= 0 ? v1069 : *(_QWORD *)v1069;
          v556 = v554 >= 0 ? *(unsigned __int8 *)(v1069 + 23) : *(_QWORD *)(v1069 + 8);
          v557 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v553, v555, v556);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v557, (uint64_t)": ", 2);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v1065);
          v558 = v1069;
          v1069 = 0;
          if (v558)
            std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v1069, v558);
        }
        v559 = *v988;
        if ((v545 & 0x80000000) == 0)
        {
          if (v511 == v509)
            goto LABEL_1312;
          v1069 = 0;
          v560 = *(_QWORD *)(v524 + 16);
          if (v560)
          {
            v561 = *(_QWORD **)(v524 + 48);
            do
            {
              v562 = v560 >> 1;
              v563 = &v561[v560 >> 1];
              v565 = *v563;
              v564 = v563 + 1;
              v560 += ~(v560 >> 1);
              if (v565 < *v548 - v559)
                v561 = v564;
              else
                v560 = v562;
            }
            while (v560);
          }
          else
          {
            v561 = *(_QWORD **)(v524 + 48);
          }
          v595 = 0;
          v596 = 0;
          v1069 = ((uint64_t)v561 - *(_QWORD *)(v524 + 48)) >> 3;
          if (v549 <= 1)
            v549 = 1;
          while (1)
          {
            v653 = *v548++;
            v652 = v653;
            v654 = xgboost::common::SparseColumn<unsigned short>::GetBinIdx(v524, v653 - v559, (unint64_t *)&v1069);
            if (v547 == 1)
            {
              v655 = (uint64_t *)(*(_QWORD *)v1057 + 8 * (v652 - *((_QWORD *)v1057 + 19)));
              v656 = xgboost::common::BinarySearchBin<xgboost::common::Index>(*v655, v655[1], v1053, *(_DWORD *)(*v1022 + 4 * v546), *(_DWORD *)(*v1022 + 4 * (v546 + 1)));
              if (v656 != -1)
              {
                v657 = *(float *)(*v1009 + 4 * v656);
                v658 = v657 >= 0.0 && v657 < 16777000.0;
                if (v658 && v657 < (float)(32 * v1066))
                {
                  if (v1066 <= (unint64_t)v657 >> 5)
                    goto LABEL_879;
                  v660 = (unint64_t)(int)v657 >> 5;
                  if (v660 >= v1066)
                    goto LABEL_1312;
                  if (((*(_DWORD *)(v1067 + 4 * v660) >> ~(int)v657) & 1) == 0)
                  {
LABEL_879:
                    v662 = (uint64_t *)(v1042 + 8 * v596);
                    v661 = 1;
                    goto LABEL_880;
                  }
                }
              }
            }
            else if (v654 <= v1031)
            {
              goto LABEL_879;
            }
            v661 = 0;
            v662 = &v1015->__m_.__sig + v595;
LABEL_880:
            v596 += v661;
            v595 += v661 ^ 1;
            *v662 = v652;
            if (!--v549)
              goto LABEL_1008;
          }
        }
        if (v511 == v509)
          goto LABEL_1312;
        v1069 = 0;
        v634 = *(_QWORD *)(v524 + 16);
        if (v634)
        {
          v635 = *(_QWORD **)(v524 + 48);
          do
          {
            v636 = v634 >> 1;
            v637 = &v635[v634 >> 1];
            v639 = *v637;
            v638 = v637 + 1;
            v634 += ~(v634 >> 1);
            if (v639 < *v548 - v559)
              v635 = v638;
            else
              v634 = v636;
          }
          while (v634);
        }
        else
        {
          v635 = *(_QWORD **)(v524 + 48);
        }
        v595 = 0;
        v596 = 0;
        v1069 = ((uint64_t)v635 - *(_QWORD *)(v524 + 48)) >> 3;
        if (v549 <= 1)
          v549 = 1;
        while (1)
        {
          v720 = *v548++;
          v719 = v720;
          v721 = xgboost::common::SparseColumn<unsigned short>::GetBinIdx(v524, v720 - v559, (unint64_t *)&v1069);
          if (v547 == 1)
          {
            v722 = (uint64_t *)(*(_QWORD *)v1057 + 8 * (v719 - *((_QWORD *)v1057 + 19)));
            v723 = xgboost::common::BinarySearchBin<xgboost::common::Index>(*v722, v722[1], v1053, *(_DWORD *)(*v1022 + 4 * v546), *(_DWORD *)(*v1022 + 4 * (v546 + 1)));
            if (v723 == -1)
              goto LABEL_1006;
            v724 = *(float *)(*v1009 + 4 * v723);
            v725 = v724 >= 0.0 && v724 < 16777000.0;
            v726 = v725 && v724 < (float)(32 * v1066);
            if (!v726 || v1066 <= (unint64_t)v724 >> 5)
              goto LABEL_1006;
            v727 = (unint64_t)(int)v724 >> 5;
            if (v727 >= v1066)
              goto LABEL_1312;
            if (((*(_DWORD *)(v1067 + 4 * v727) >> ~(int)v724) & 1) == 0)
            {
LABEL_1006:
              v729 = (uint64_t *)(v1042 + 8 * v596);
              v728 = 1;
              goto LABEL_1007;
            }
          }
          else if (v721 <= v1031)
          {
            goto LABEL_1006;
          }
          v728 = 0;
          v729 = &v1015->__m_.__sig + v595;
LABEL_1007:
          v596 += v728;
          v595 += v728 ^ 1;
          *v729 = v719;
          if (!--v549)
            goto LABEL_1008;
        }
      }
      v594 = *v988;
      if ((v545 & 0x80000000) == 0)
      {
        if (v511 == v509)
          goto LABEL_1312;
        v595 = 0;
        v596 = 0;
        while (1)
        {
          v598 = *v548++;
          v597 = v598;
          v599 = v598 - v594;
          if (*(_QWORD *)(v524 + 16) <= (unint64_t)(v598 - v594))
            goto LABEL_1312;
          if (v547 == 1)
          {
            v600 = (uint64_t *)(*(_QWORD *)v1057 + 8 * (v597 - *((_QWORD *)v1057 + 19)));
            v601 = xgboost::common::BinarySearchBin<xgboost::common::Index>(*v600, v600[1], v1053, *(_DWORD *)(*v1022 + 4 * v546), *(_DWORD *)(*v1022 + 4 * (v546 + 1)));
            if (v601 != -1)
            {
              v602 = *(float *)(*v1009 + 4 * v601);
              v603 = v602 >= 0.0 && v602 < 16777000.0;
              if (v603 && v602 < (float)(32 * v1066))
              {
                if (v1066 <= (unint64_t)v602 >> 5)
                  goto LABEL_790;
                v605 = (unint64_t)(int)v602 >> 5;
                if (v605 >= v1066)
                  goto LABEL_1312;
                if (((*(_DWORD *)(v1067 + 4 * v605) >> ~(int)v602) & 1) == 0)
                {
LABEL_790:
                  v607 = (uint64_t *)(v1042 + 8 * v596);
                  v606 = 1;
                  goto LABEL_791;
                }
              }
            }
          }
          else if (*(_DWORD *)(v524 + 32) + *(unsigned __int16 *)(*(_QWORD *)(v524 + 24) + 2 * v599) <= v1031)
          {
            goto LABEL_790;
          }
          v606 = 0;
          v607 = &v1015->__m_.__sig + v595;
LABEL_791:
          v596 += v606;
          v595 += v606 ^ 1;
          *v607 = v597;
          if (!--v549)
            goto LABEL_1008;
        }
      }
      if (v511 == v509)
        goto LABEL_1312;
      v595 = 0;
      v596 = 0;
      while (1)
      {
        v687 = *v548++;
        v686 = v687;
        v688 = v687 - v594;
        if (*(_QWORD *)(v524 + 16) <= (unint64_t)(v687 - v594))
          goto LABEL_1312;
        if (v547 == 1)
        {
          v689 = (uint64_t *)(*(_QWORD *)v1057 + 8 * (v686 - *((_QWORD *)v1057 + 19)));
          v690 = xgboost::common::BinarySearchBin<xgboost::common::Index>(*v689, v689[1], v1053, *(_DWORD *)(*v1022 + 4 * v546), *(_DWORD *)(*v1022 + 4 * (v546 + 1)));
          if (v690 == -1)
            goto LABEL_943;
          v691 = *(float *)(*v1009 + 4 * v690);
          v692 = v691 >= 0.0 && v691 < 16777000.0;
          v693 = v692 && v691 < (float)(32 * v1066);
          if (!v693 || v1066 <= (unint64_t)v691 >> 5)
            goto LABEL_943;
          v694 = (unint64_t)(int)v691 >> 5;
          if (v694 >= v1066)
            goto LABEL_1312;
          if (((*(_DWORD *)(v1067 + 4 * v694) >> ~(int)v691) & 1) == 0)
          {
LABEL_943:
            v696 = (uint64_t *)(v1042 + 8 * v596);
            v695 = 1;
            goto LABEL_944;
          }
        }
        else if (*(_DWORD *)(v524 + 32) + *(unsigned __int16 *)(*(_QWORD *)(v524 + 24) + 2 * v688) <= v1031)
        {
          goto LABEL_943;
        }
        v695 = 0;
        v696 = &v1015->__m_.__sig + v595;
LABEL_944:
        v596 += v695;
        v595 += v695 ^ 1;
        *v696 = v686;
        if (!--v549)
        {
LABEL_1008:
          v730 = v1048[3];
          v731 = *(_QWORD *)(v730 + 8 * v997) + v1003;
          v732 = v1048[6];
          v733 = (v1048[7] - v732) >> 4;
          if (v733 <= v731
            || (**(_QWORD **)(v732 + 16 * v731) = v596, v734 = *(_QWORD *)(v730 + 8 * v997) + v1003, v733 <= v734))
          {
            std::vector<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry,std::allocator<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry>>::__throw_out_of_range[abi:ne180100]();
          }
          goto LABEL_1057;
        }
      }
    }
    v998 = (int)v508;
    v1004 = v509 >> 11;
    v566 = *(_QWORD *)(v1048[3] + 8 * (int)v508) + v513;
    v567 = v1048[6];
    if (v566 >= (v1048[7] - v567) >> 4)
      goto LABEL_1318;
    v1032 = v1063.__begin_[v508];
    v568 = *(_QWORD *)(v1048[13] + 24 * v512);
    v569 = *(_QWORD *)(v567 + 16 * v566);
    v570 = *(_DWORD *)(a4[20] + 20 * (int)v512 + 12);
    v571 = v570 & 0x7FFFFFFF;
    xgboost::common::ColumnMatrix::GetColumn<unsigned int,false>(&v1068, (uint64_t *)v1047, v570 & 0x7FFFFFFF);
    v992 = v507;
    v572 = *(unsigned __int8 *)(a4[29] + v512);
    xgboost::RegTree::NodeCats((xgboost::RegTree *)&v1066, a4, v512);
    v573 = (uint64_t *)(v568 + 8 * v509);
    v574 = (uint64_t)(8 * v511 - 8 * v509) >> 3;
    v1043 = v569 + 32;
    v1016 = (std::mutex *)(v569 + 16416);
    v1010 = (_QWORD *)*((_QWORD *)v1057 + 15);
    v1023 = (_QWORD *)*((_QWORD *)v1057 + 16);
    v524 = v1068;
    if (*(_BYTE *)(v1068 + 8))
    {
      v1065 = 0;
      v1064 = 1;
      dmlc::LogCheckFormat<BOOL,BOOL>(&v1069);
      if (v1069)
      {
        v575 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v1065);
        dmlc::LogMessageFatal::Entry::Init(v575, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/./../common/partition_builder.h");
        v576 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v1065);
        v577 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v576, (uint64_t)"Check failed: ", 14);
        v578 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v577, (uint64_t)"any_missing == true", 19);
        v579 = *(char *)(v1069 + 23);
        v580 = v579 >= 0 ? v1069 : *(_QWORD *)v1069;
        v581 = v579 >= 0 ? *(unsigned __int8 *)(v1069 + 23) : *(_QWORD *)(v1069 + 8);
        v582 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v578, v580, v581);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v582, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v1065);
        v583 = v1069;
        v1069 = 0;
        if (v583)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v1069, v583);
      }
      v584 = *v988;
      if ((v570 & 0x80000000) == 0)
      {
        if (v511 == v509)
          goto LABEL_1312;
        v1069 = 0;
        v585 = *(_QWORD *)(v524 + 16);
        if (v585)
        {
          v586 = *(_QWORD **)(v524 + 48);
          do
          {
            v587 = v585 >> 1;
            v588 = &v586[v585 >> 1];
            v590 = *v588;
            v589 = v588 + 1;
            v585 += ~(v585 >> 1);
            if (v590 < *v573 - v584)
              v586 = v589;
            else
              v585 = v587;
          }
          while (v585);
        }
        else
        {
          v586 = *(_QWORD **)(v524 + 48);
        }
        v595 = 0;
        v609 = 0;
        v1069 = ((uint64_t)v586 - *(_QWORD *)(v524 + 48)) >> 3;
        if (v574 <= 1)
          v663 = 1;
        else
          v663 = v574;
        while (2)
        {
          v665 = *v573++;
          v664 = v665;
          v666 = xgboost::common::SparseColumn<unsigned int>::GetBinIdx(v524, v665 - v584, (unint64_t *)&v1069);
          if (v572 == 1)
          {
            v667 = (uint64_t *)(*(_QWORD *)v1057 + 8 * (v664 - *((_QWORD *)v1057 + 19)));
            v668 = xgboost::common::BinarySearchBin<xgboost::common::Index>(*v667, v667[1], v1053, *(_DWORD *)(*v1023 + 4 * v571), *(_DWORD *)(*v1023 + 4 * (v571 + 1)));
            if (v668 == -1)
              goto LABEL_899;
            v669 = *(float *)(*v1010 + 4 * v668);
            v670 = v669 >= 0.0 && v669 < 16777000.0;
            if (!v670 || v669 >= (float)(32 * v1066))
              goto LABEL_899;
            if (v1066 > (unint64_t)v669 >> 5)
            {
              v672 = (unint64_t)(int)v669 >> 5;
              if (v672 >= v1066)
                goto LABEL_1312;
              if (((*(_DWORD *)(v1067 + 4 * v672) >> ~(int)v669) & 1) != 0)
              {
LABEL_899:
                v673 = 0;
                v674 = &v1016->__m_.__sig + v595;
                goto LABEL_902;
              }
            }
          }
          else if (v666 > v1032)
          {
            goto LABEL_899;
          }
          v674 = (uint64_t *)(v1043 + 8 * v609);
          v673 = 1;
LABEL_902:
          v609 += v673;
          v595 += v673 ^ 1;
          *v674 = v664;
          if (!--v663)
            goto LABEL_1032;
          continue;
        }
      }
      if (v511 == v509)
        goto LABEL_1312;
      v1069 = 0;
      v640 = *(_QWORD *)(v524 + 16);
      if (v640)
      {
        v641 = *(_QWORD **)(v524 + 48);
        do
        {
          v642 = v640 >> 1;
          v643 = &v641[v640 >> 1];
          v645 = *v643;
          v644 = v643 + 1;
          v640 += ~(v640 >> 1);
          if (v645 < *v573 - v584)
            v641 = v644;
          else
            v640 = v642;
        }
        while (v640);
      }
      else
      {
        v641 = *(_QWORD **)(v524 + 48);
      }
      v595 = 0;
      v609 = 0;
      v1069 = ((uint64_t)v641 - *(_QWORD *)(v524 + 48)) >> 3;
      if (v574 <= 1)
        v735 = 1;
      else
        v735 = v574;
      while (2)
      {
        v737 = *v573++;
        v736 = v737;
        v738 = xgboost::common::SparseColumn<unsigned int>::GetBinIdx(v524, v737 - v584, (unint64_t *)&v1069);
        if (v572 == 1)
        {
          v739 = (uint64_t *)(*(_QWORD *)v1057 + 8 * (v736 - *((_QWORD *)v1057 + 19)));
          v740 = xgboost::common::BinarySearchBin<xgboost::common::Index>(*v739, v739[1], v1053, *(_DWORD *)(*v1023 + 4 * v571), *(_DWORD *)(*v1023 + 4 * (v571 + 1)));
          if (v740 != -1)
          {
            v741 = *(float *)(*v1010 + 4 * v740);
            v742 = v741 >= 0.0 && v741 < 16777000.0;
            v743 = v742 && v741 < (float)(32 * v1066);
            if (v743 && v1066 > (unint64_t)v741 >> 5)
            {
              v744 = (unint64_t)(int)v741 >> 5;
              if (v744 >= v1066)
                goto LABEL_1312;
              if (((*(_DWORD *)(v1067 + 4 * v744) >> ~(int)v741) & 1) != 0)
              {
LABEL_1028:
                v745 = 0;
                v746 = &v1016->__m_.__sig + v595;
                goto LABEL_1031;
              }
            }
          }
        }
        else if (v738 > v1032)
        {
          goto LABEL_1028;
        }
        v746 = (uint64_t *)(v1043 + 8 * v609);
        v745 = 1;
LABEL_1031:
        v609 += v745;
        v595 += v745 ^ 1;
        *v746 = v736;
        if (!--v735)
          goto LABEL_1032;
        continue;
      }
    }
    v608 = *v988;
    if ((v570 & 0x80000000) == 0)
    {
      if (v511 == v509)
        goto LABEL_1312;
      v595 = 0;
      v609 = 0;
      while (2)
      {
        v611 = *v573++;
        v610 = v611;
        v612 = v611 - v608;
        if (*(_QWORD *)(v524 + 16) <= (unint64_t)(v611 - v608))
          goto LABEL_1312;
        if (v572 == 1)
        {
          v613 = (uint64_t *)(*(_QWORD *)v1057 + 8 * (v610 - *((_QWORD *)v1057 + 19)));
          v614 = xgboost::common::BinarySearchBin<xgboost::common::Index>(*v613, v613[1], v1053, *(_DWORD *)(*v1023 + 4 * v571), *(_DWORD *)(*v1023 + 4 * (v571 + 1)));
          if (v614 == -1)
            goto LABEL_810;
          v615 = *(float *)(*v1010 + 4 * v614);
          v616 = v615 >= 0.0 && v615 < 16777000.0;
          if (!v616 || v615 >= (float)(32 * v1066))
            goto LABEL_810;
          if (v1066 > (unint64_t)v615 >> 5)
          {
            v618 = (unint64_t)(int)v615 >> 5;
            if (v618 >= v1066)
              goto LABEL_1312;
            if (((*(_DWORD *)(v1067 + 4 * v618) >> ~(int)v615) & 1) != 0)
            {
LABEL_810:
              v619 = 0;
              v620 = &v1016->__m_.__sig + v595;
              goto LABEL_813;
            }
          }
        }
        else if (*(_DWORD *)(v524 + 32) + *(_DWORD *)(*(_QWORD *)(v524 + 24) + 4 * v612) > v1032)
        {
          goto LABEL_810;
        }
        v620 = (uint64_t *)(v1043 + 8 * v609);
        v619 = 1;
LABEL_813:
        v609 += v619;
        v595 += v619 ^ 1;
        *v620 = v610;
        if (!--v574)
          goto LABEL_1032;
        continue;
      }
    }
    if (v511 == v509)
      goto LABEL_1312;
    v595 = 0;
    v609 = 0;
    do
    {
      v698 = *v573++;
      v697 = v698;
      v699 = v698 - v608;
      if (*(_QWORD *)(v524 + 16) <= (unint64_t)(v698 - v608))
        goto LABEL_1312;
      if (v572 == 1)
      {
        v700 = (uint64_t *)(*(_QWORD *)v1057 + 8 * (v697 - *((_QWORD *)v1057 + 19)));
        v701 = xgboost::common::BinarySearchBin<xgboost::common::Index>(*v700, v700[1], v1053, *(_DWORD *)(*v1023 + 4 * v571), *(_DWORD *)(*v1023 + 4 * (v571 + 1)));
        if (v701 != -1)
        {
          v702 = *(float *)(*v1010 + 4 * v701);
          v703 = v702 >= 0.0 && v702 < 16777000.0;
          v704 = v703 && v702 < (float)(32 * v1066);
          if (v704 && v1066 > (unint64_t)v702 >> 5)
          {
            v705 = (unint64_t)(int)v702 >> 5;
            if (v705 >= v1066)
              goto LABEL_1312;
            if (((*(_DWORD *)(v1067 + 4 * v705) >> ~(int)v702) & 1) != 0)
            {
LABEL_962:
              v706 = 0;
              v707 = &v1016->__m_.__sig + v595;
              goto LABEL_965;
            }
          }
        }
      }
      else if (*(_DWORD *)(v524 + 32) + *(_DWORD *)(*(_QWORD *)(v524 + 24) + 4 * v699) > v1032)
      {
        goto LABEL_962;
      }
      v707 = (uint64_t *)(v1043 + 8 * v609);
      v706 = 1;
LABEL_965:
      v609 += v706;
      v595 += v706 ^ 1;
      *v707 = v697;
      --v574;
    }
    while (v574);
LABEL_1032:
    v747 = v1048[3];
    v748 = *(_QWORD *)(v747 + 8 * v998) + v1004;
    v732 = v1048[6];
    v749 = (v1048[7] - v732) >> 4;
    if (v749 <= v748
      || (**(_QWORD **)(v732 + 16 * v748) = v609, v734 = *(_QWORD *)(v747 + 8 * v998) + v1004, v749 <= v734))
    {
      std::vector<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry,std::allocator<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::NodeEntry>>::__throw_out_of_range[abi:ne180100]();
    }
LABEL_1057:
    *(_QWORD *)(*(_QWORD *)(v732 + 16 * v734) + 8) = v595;
    a3 = v1025;
    v507 = v992;
    if (v524)
      (*(void (**)(uint64_t))(*(_QWORD *)v524 + 8))(v524);
LABEL_1059:
    ++v507;
  }
  while (v507 != v990);
LABEL_1060:
  dmlc::OMPException::Rethrow(&v1070);
  std::mutex::~mutex(&v1071);
  std::exception_ptr::~exception_ptr(&v1070);
  xgboost::common::PartitionBuilder<2048ul>::CalculateRowOffsets(v1048);
  v1070.__ptr_ = 0;
  v1071.__m_.__sig = 850045863;
  memset(v1071.__m_.__opaque, 0, sizeof(v1071.__m_.__opaque));
  if (v1060[1] != v1060[0])
  {
    v764 = 0;
    v765 = ((char *)v1060[1] - (char *)v1060[0]) >> 4;
    do
    {
      v766 = xgboost::common::BlockedSpace2d::GetFirstDimension((xgboost::common::BlockedSpace2d *)v1060, v764);
      v767 = xgboost::common::BlockedSpace2d::GetRange((xgboost::common::BlockedSpace2d *)v1060, v764);
      xgboost::common::PartitionBuilder<2048ul>::MergeToArray(v1048, v766, v767, *(_QWORD *)(v1048[13] + 24 * *(unsigned int *)(*a3 + 88 * v766)));
      ++v764;
    }
    while (v765 != v764);
  }
  dmlc::OMPException::Rethrow(&v1070);
  std::mutex::~mutex(&v1071);
  std::exception_ptr::~exception_ptr(&v1070);
  xgboost::tree::HistRowPartitioner::AddSplitsToRowSet(v1048, a3, (uint64_t)a4);
LABEL_1305:
  if (__p[1])
  {
    *(void **)&v1062 = __p[1];
    operator delete(__p[1]);
  }
  if (v1060[0])
  {
    v1060[1] = v1060[0];
    operator delete(v1060[0]);
  }
  if (v1063.__begin_)
  {
    v1063.__end_ = v1063.__begin_;
    operator delete(v1063.__begin_);
  }
}

void sub_220F03BB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::mutex *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35)
{
  xgboost::common::Index::~Index((xgboost::common::Index *)&a27);
  if (__p)
  {
    a35 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t xgboost::tree::QuantileHistMaker::Builder<double>::Builder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  std::chrono::steady_clock::time_point *v13;
  std::string __p;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  _ZNSt3__115allocate_sharedB8ne180100IN7xgboost6common13ColumnSamplerENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((_QWORD *)(a1 + 16));
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 96) = a4;
  v10 = operator new();
  xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::HistogramBuilder(v10, v11, v12);
  *(_QWORD *)(a1 + 104) = v10;
  *(_WORD *)(a1 + 112) = a5;
  *(_QWORD *)(a1 + 120) = a6;
  v13 = (std::chrono::steady_clock::time_point *)operator new();
  xgboost::common::Monitor::Monitor(v13);
  *(_QWORD *)(a1 + 128) = v13;
  std::string::basic_string[abi:ne180100]<0>(&__p, "Quantile::Builder");
  std::string::operator=((std::string *)v13, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

{
  return xgboost::tree::QuantileHistMaker::Builder<double>::Builder(a1, a2, a3, a4, a5, a6);
}

{
  return __ZN7xgboost4tree17QuantileHistMaker7BuilderIdEC2EmRKNS0_10TrainParamEPKNS_7DMatrixENS_7ObjInfoEPKNS_16GenericParameterE(a1, a2, a3, a4, a5, a6);
}

void sub_220F04578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  char ***v17;
  uint64_t v18;
  void *v20;

  if (a14 < 0)
    operator delete(__p);
  std::unique_ptr<xgboost::common::Monitor>::reset[abi:ne180100](v17);
  std::unique_ptr<xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>>::reset[abi:ne180100]((uint64_t *)(v18 + 72));
  std::vector<xgboost::tree::ApproxRowPartitioner>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  std::unique_ptr<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>>::reset[abi:ne180100]((uint64_t *)(v18 + 24), 0);
  v20 = *(void **)v18;
  if (*(_QWORD *)v18)
  {
    *(_QWORD *)(v15 + 40) = v20;
    operator delete(v20);
  }
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void xgboost::tree::QuantileHistMaker::Builder<double>::UpdateTree(uint64_t a1, uint64_t *a2, uint64_t a3, xgboost::RegTree *a4)
{
  uint64_t v8;
  void *__p[2];
  char v10;

  std::string::basic_string[abi:ne180100]<0>(__p, "UpdateTree");
  xgboost::common::Monitor::Start();
  if (v10 < 0)
    operator delete(__p[0]);
  v8 = *a2;
  if (*(_QWORD *)a1 != 1)
  {
    std::vector<xgboost::detail::GradientPairInternal<float>>::resize(a1 + 32, (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 3);
    if (a1 + 32 != v8)
    {
      std::vector<xgboost::detail::GradientPairInternal<float>>::__assign_with_size[abi:ne180100]<xgboost::detail::GradientPairInternal<float>*,xgboost::detail::GradientPairInternal<float>*>((char *)(a1 + 32), *(char **)v8, *(_QWORD *)(v8 + 8), (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 3);
      v8 = a1 + 32;
    }
  }
  xgboost::tree::QuantileHistMaker::Builder<double>::InitData(a1, a3, (uint64_t)a4, (_QWORD *)v8);
  xgboost::tree::QuantileHistMaker::Builder<double>::ExpandTree(a1, a3, a4, (float32x2_t **)v8);
  std::string::basic_string[abi:ne180100]<0>(__p, "UpdateTree");
  xgboost::common::Monitor::Stop();
  if (v10 < 0)
    operator delete(__p[0]);
}

{
  __ZN7xgboost4tree17QuantileHistMaker7BuilderIdE10UpdateTreeEPNS_16HostDeviceVectorINS_6detail20GradientPairInternalIfEEEEPNS_7DMatrixEPNS_7RegTreeE(a1, a2, a3, a4);
}

void sub_220F0474C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::tree::QuantileHistMaker::Builder<double>::GetNumberOfTrees(uint64_t a1)
{
  return *(_QWORD *)a1;
}

void xgboost::tree::QuantileHistMaker::Builder<double>::InitData(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t j;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  std::string *Entry;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  void *Engine;
  char v46;
  uint64_t v47;
  int v48;
  std::string *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  int v53;
  void *v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v70;
  uint64_t v72;
  std::__shared_weak_count *v73;
  _DWORD v74[2];
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  void *__p;
  std::__shared_weak_count *v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  void *v88;
  std::__shared_weak_count *v89;
  unsigned int v90;

  std::string::basic_string[abi:ne180100]<0>(&__p, "InitData");
  xgboost::common::Monitor::Start();
  if (SHIBYTE(v85) < 0)
    operator delete(__p);
  v70 = (**(uint64_t (***)(uint64_t))a2)(a2);
  v90 = 0;
  v7 = *(_QWORD *)(a1 + 64);
  for (i = *(_QWORD *)(a1 + 72); i != v7; std::allocator<xgboost::tree::ApproxRowPartitioner>::destroy[abi:ne180100](i))
    i -= 136;
  *(_QWORD *)(a1 + 72) = v7;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_DWORD *)(v8 + 20);
  v10 = *(_QWORD *)(v8 + 128);
  LODWORD(__p) = -1;
  HIDWORD(__p) = v9;
  v84 = 0;
  v85 = 0;
  v86 = 0;
  v87 = v10;
  (*(void (**)(void **__return_ptr, uint64_t, void **))(*(_QWORD *)a2 + 104))(&v88, a2, &__p);
  __p = v88;
  v84 = v89;
  if (v89)
  {
    p_shared_owners = (unint64_t *)&v89->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  xgboost::BatchIterator<xgboost::GHistIndexMatrix>::BatchIterator(&v81, 0);
  for (j = 0; ; ++j)
  {
    v14 = xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator!=((uint64_t *)&__p);
    if ((v14 & 1) == 0)
      break;
    v15 = xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator*((uint64_t *)&__p);
    v16 = (_QWORD *)v15;
    if (v90)
    {
      v79 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v15 + 128) + 8) - 4);
      if (v79 != v90)
      {
        dmlc::LogCheckFormat<int,unsigned long>(&v80);
        if (v80)
        {
          Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v79);
          dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/updater_quantile_hist.cc");
          v18 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v79);
          v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Check failed: ", 14);
          v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"n_total_bins == page.cut.TotalBins()", 36);
          v21 = *(char *)(v80 + 23);
          v22 = v21 >= 0 ? v80 : *(_QWORD *)v80;
          v23 = v21 >= 0 ? *(unsigned __int8 *)(v80 + 23) : *(_QWORD *)(v80 + 8);
          v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)": ", 2);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v79);
          v25 = v80;
          v80 = 0;
          if (v25)
            std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v80, v25);
        }
      }
    }
    else
    {
      v90 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 128) + 8) - 4);
    }
    v26 = v16[1];
    if (v26 == *v16)
      v27 = 0;
    else
      v27 = ((v26 - *v16) >> 3) - 1;
    v28 = *(_QWORD *)(a1 + 72);
    v29 = v16[19];
    if (v28 >= *(_QWORD *)(a1 + 80))
    {
      v30 = std::vector<xgboost::tree::HistRowPartitioner>::__emplace_back_slow_path<unsigned long,unsigned long const&,int>((int64x2_t *)(a1 + 64), v27, v29, 1);
    }
    else
    {
      xgboost::tree::HistRowPartitioner::HistRowPartitioner(*(xgboost::tree::HistRowPartitioner **)(a1 + 72), v27, v29, 1);
      v30 = v28 + 136;
      *(_QWORD *)(a1 + 72) = v28 + 136;
    }
    *(_QWORD *)(a1 + 72) = v30;
    xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator++((uint64_t *)&__p);
  }
  v31 = v82;
  if (v82)
  {
    v32 = (unint64_t *)&v82->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v84;
  if (v84)
  {
    v35 = (unint64_t *)&v84->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = v89;
  if (v89)
  {
    v38 = (unint64_t *)&v89->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = *(_QWORD *)(a1 + 104);
  v41 = v90;
  v42 = *(_QWORD *)(a1 + 8);
  v43 = *(_DWORD *)(v42 + 20);
  v44 = *(_QWORD *)(v42 + 128);
  v74[0] = -1;
  v74[1] = v43;
  v75 = 0;
  v76 = 0;
  v77 = 0;
  v78 = v44;
  Engine = rabit::engine::GetEngine((rabit::engine *)v14);
  v46 = (*(uint64_t (**)(void *))(*(_QWORD *)Engine + 80))(Engine);
  xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::Reset(v40, v41, (uint64_t)v74, 1, j, v46);
  v47 = *(_QWORD *)(a1 + 8);
  if (*(float *)(v47 + 48) < 1.0)
  {
    v48 = *(_DWORD *)(v47 + 52);
    LODWORD(v88) = 0;
    if (v48)
    {
      dmlc::LogCheckFormat<int,xgboost::tree::TrainParam::SamplingMethod>((uint64_t *)&__p);
      if (__p)
      {
        v49 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v88);
        dmlc::LogMessageFatal::Entry::Init(v49, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/updater_quantile_hist.cc");
        v50 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v88);
        v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"Check failed: ", 14);
        v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"param_.sampling_method == TrainParam::kUniform", 46);
        v53 = *((char *)__p + 23);
        v54 = v53 >= 0 ? __p : *(void **)__p;
        v55 = v53 >= 0 ? *((unsigned __int8 *)__p + 23) : *((_QWORD *)__p + 1);
        v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)v54, v55);
        v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)": ", 2);
        v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"Only uniform sampling is supported, ", 36);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"gradient-based sampling is only support by GPU Hist.", 52);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v88);
        v59 = __p;
        __p = 0;
        if (v59)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&__p, (uint64_t)v59);
      }
    }
    xgboost::tree::QuantileHistMaker::Builder<double>::InitSampling(a1, a2, a4);
  }
  *(_QWORD *)(a1 + 88) = a3;
  v60 = operator new();
  v61 = v60;
  v62 = *(_QWORD *)(a1 + 8);
  v63 = *(std::__shared_weak_count **)(a1 + 24);
  v72 = *(_QWORD *)(a1 + 16);
  v73 = v63;
  if (v63)
  {
    v64 = (unint64_t *)&v63->__shared_owners_;
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 + 1, v64));
  }
  xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::HistEvaluator(v60, v62, v70, 1, (uint64_t)&v72);
  std::unique_ptr<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>>::reset[abi:ne180100]((uint64_t *)(a1 + 56), v61);
  v66 = v73;
  if (v73)
  {
    v67 = (unint64_t *)&v73->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "InitData");
  xgboost::common::Monitor::Stop();
  if (SHIBYTE(v85) < 0)
    operator delete(__p);
}

{
  __ZN7xgboost4tree17QuantileHistMaker7BuilderIdE8InitDataEPNS_7DMatrixERKNS_7RegTreeEPNSt3__16vectorINS_6detail20GradientPairInternalIfEENS9_9allocatorISD_EEEE(a1, a2, a3, a4);
}

void sub_220F04CB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v30;

  v30 = (uint64_t)__p;
  __p = 0;
  if (v30)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&__p, v30);
  _Unwind_Resume(exception_object);
}

void xgboost::tree::QuantileHistMaker::Builder<double>::ExpandTree(uint64_t a1, uint64_t a2, xgboost::RegTree *a3, float32x2_t **a4)
{
  int *v7;
  int *v8;
  int v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v16;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  void *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  xgboost::GHistIndexMatrix *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  int *v38;
  int *v39;
  uint64_t v40;
  unsigned int v41;
  std::__shared_weak_count *v42;
  unint64_t p_shared_weak_owners;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  void *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD v70[2];
  uint64_t v71;
  std::__shared_weak_count *v72;
  void **v73;
  std::__shared_weak_count *v74;
  int v75;
  void *v76;
  void *v77;
  uint64_t v78;
  char v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  int *v88;
  unint64_t v89;
  unint64_t v90;
  __int128 v91;
  uint64_t v92;
  void *__p[2];
  uint64_t v94;
  void *v95;
  void *v96;
  uint64_t v97;
  char v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  _BYTE v103[24];
  _BYTE *v104;
  uint64_t v105;

  v105 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(__p, "ExpandTree");
  xgboost::common::Monitor::Start();
  if (SHIBYTE(v94) < 0)
    operator delete(__p[0]);
  xgboost::tree::Driver<xgboost::tree::CPUExpandEntry>::Driver(&v101, *(_DWORD *)(*(_QWORD *)(a1 + 8) + 24));
  xgboost::tree::QuantileHistMaker::Builder<double>::InitRoot((_QWORD *)a1, a4, a2, (uint64_t)a3, (uint64_t)__p);
  xgboost::tree::Driver<xgboost::tree::CPUExpandEntry>::Push(&v101, (uint64_t)__p);
  if (v95)
  {
    v96 = v95;
    operator delete(v95);
  }
  xgboost::tree::Driver<xgboost::tree::CPUExpandEntry>::Pop((uint64_t)&v101, (uint64_t *)&v91);
  v7 = (int *)*((_QWORD *)&v91 + 1);
  v8 = (int *)v91;
  if ((_QWORD)v91 != *((_QWORD *)&v91 + 1))
  {
    v9 = 1;
    do
    {
      v88 = 0;
      v89 = 0;
      v90 = 0;
      v85 = 0;
      v86 = 0;
      v87 = 0;
      v10 = v8[1] + 1;
      do
      {
        if (xgboost::tree::CPUExpandEntry::IsValid((xgboost::tree::CPUExpandEntry *)v8, *(const xgboost::tree::TrainParam **)(a1 + 8), v9))
        {
          xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::ApplyTreeSplit(*(_QWORD *)(a1 + 56), v8, a3);
          v11 = v86;
          if (v86 >= v87)
          {
            v12 = std::vector<xgboost::tree::CPUExpandEntry>::__push_back_slow_path<xgboost::tree::CPUExpandEntry const&>(&v85, (uint64_t)v8);
          }
          else
          {
            std::vector<xgboost::tree::CPUExpandEntry>::__construct_one_at_end[abi:ne180100]<xgboost::tree::CPUExpandEntry const&>((uint64_t)&v85, (uint64_t)v8);
            v12 = v11 + 88;
          }
          v86 = v12;
          ++v9;
          v13 = *(_QWORD *)(a1 + 8);
          v14 = *(_DWORD *)(v13 + 12);
          if (v14 < 1 || v14 > v10)
          {
            v16 = *(_DWORD *)(v13 + 16);
            if (v16 < 1 || v16 > v9)
            {
              v18 = v89;
              if (v89 >= v90)
              {
                v19 = std::vector<xgboost::tree::CPUExpandEntry>::__emplace_back_slow_path<xgboost::tree::CPUExpandEntry const&>((uint64_t *)&v88, (uint64_t)v8);
              }
              else
              {
                std::vector<xgboost::tree::CPUExpandEntry>::__construct_one_at_end[abi:ne180100]<xgboost::tree::CPUExpandEntry const&>((uint64_t)&v88, (uint64_t)v8);
                v19 = v18 + 88;
              }
              v89 = v19;
            }
          }
        }
        v8 += 22;
      }
      while (v8 != v7);
      std::string::basic_string[abi:ne180100]<0>(__p, "UpdatePosition");
      xgboost::common::Monitor::Start();
      if (SHIBYTE(v94) < 0)
        operator delete(__p[0]);
      v20 = *(_QWORD *)(a1 + 8);
      v21 = *(_DWORD *)(v20 + 20);
      v22 = *(void **)(v20 + 128);
      LODWORD(__p[0]) = -1;
      HIDWORD(__p[0]) = v21;
      __p[1] = 0;
      v94 = 0;
      LOBYTE(v95) = 0;
      v96 = v22;
      (*(void (**)(void ***__return_ptr, uint64_t, void **))(*(_QWORD *)a2 + 104))(&v73, a2, __p);
      __p[0] = v73;
      __p[1] = v74;
      if (v74)
      {
        p_shared_owners = (unint64_t *)&v74->__shared_owners_;
        do
          v24 = __ldxr(p_shared_owners);
        while (__stxr(v24 + 1, p_shared_owners));
      }
      xgboost::BatchIterator<xgboost::GHistIndexMatrix>::BatchIterator(&v82, 0);
      v25 = 0;
      v26 = -1;
      while ((xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator!=((uint64_t *)__p) & 1) != 0)
      {
        v27 = (xgboost::GHistIndexMatrix *)xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator*((uint64_t *)__p);
        v28 = *(_QWORD *)(a1 + 64);
        if (0xF0F0F0F0F0F0F0F1 * ((*(_QWORD *)(a1 + 72) - v28) >> 3) <= ++v26)
          std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_out_of_range[abi:ne180100]();
        xgboost::tree::HistRowPartitioner::UpdatePosition((uint64_t *)(v28 + v25), v27, &v85, a3);
        v25 += 136;
        xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator++((uint64_t *)__p);
      }
      v29 = v83;
      if (v83)
      {
        v30 = (unint64_t *)&v83->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      v32 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v33 = (unint64_t *)((char *)__p[1] + 8);
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      v35 = v74;
      if (v74)
      {
        v36 = (unint64_t *)&v74->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "UpdatePosition");
      xgboost::common::Monitor::Stop();
      if (SHIBYTE(v94) < 0)
        operator delete(__p[0]);
      v82 = 0;
      v83 = 0;
      v84 = 0;
      if (v88 == (int *)v89)
      {
        v66 = 0;
        v65 = 0;
      }
      else
      {
        xgboost::tree::QuantileHistMaker::Builder<double>::BuildHistogram((_QWORD *)a1, a2, (uint64_t)a3, &v88, (uint64_t)a4);
        v38 = v88;
        v39 = (int *)v89;
        while (v38 != v39)
        {
          v40 = *((_QWORD *)a3 + 20) + 20 * *v38;
          v41 = *(_DWORD *)(v40 + 4);
          LODWORD(v40) = *(_DWORD *)(v40 + 8);
          __p[0] = (void *)__PAIR64__(v10, v41);
          LODWORD(v94) = 0;
          v96 = 0;
          v97 = 0;
          v95 = 0;
          v98 = 0;
          v99 = 0u;
          v100 = 0u;
          __p[1] = 0;
          v73 = (void **)__PAIR64__(v10, v40);
          v75 = 0;
          v77 = 0;
          v78 = 0;
          v76 = 0;
          v79 = 0;
          v80 = 0u;
          v81 = 0u;
          v74 = 0;
          v42 = v83;
          if ((unint64_t)v83 >= v84)
          {
            p_shared_weak_owners = std::vector<xgboost::tree::CPUExpandEntry>::__push_back_slow_path<xgboost::tree::CPUExpandEntry const&>(&v82, (uint64_t)__p);
          }
          else
          {
            std::vector<xgboost::tree::CPUExpandEntry>::__construct_one_at_end[abi:ne180100]<xgboost::tree::CPUExpandEntry const&>((uint64_t)&v82, (uint64_t)__p);
            p_shared_weak_owners = (unint64_t)&v42[3].__shared_weak_owners_;
          }
          v83 = (std::__shared_weak_count *)p_shared_weak_owners;
          if (p_shared_weak_owners >= v84)
          {
            v44 = std::vector<xgboost::tree::CPUExpandEntry>::__push_back_slow_path<xgboost::tree::CPUExpandEntry const&>(&v82, (uint64_t)&v73);
          }
          else
          {
            std::vector<xgboost::tree::CPUExpandEntry>::__construct_one_at_end[abi:ne180100]<xgboost::tree::CPUExpandEntry const&>((uint64_t)&v82, (uint64_t)&v73);
            v44 = p_shared_weak_owners + 88;
          }
          v83 = (std::__shared_weak_count *)v44;
          if (v76)
          {
            v77 = v76;
            operator delete(v76);
          }
          if (v95)
          {
            v96 = v95;
            operator delete(v95);
          }
          v38 += 22;
        }
        v45 = *(_QWORD *)(a1 + 104);
        v46 = *(uint64_t **)((**(uint64_t (***)(uint64_t))a2)(a2) + 168);
        v47 = *v46;
        v48 = v46[1];
        v49 = *(_QWORD *)(a1 + 8);
        v50 = *(_DWORD *)(v49 + 20);
        v51 = *(void **)(v49 + 128);
        LODWORD(__p[0]) = -1;
        HIDWORD(__p[0]) = v50;
        __p[1] = 0;
        v94 = 0;
        LOBYTE(v95) = 0;
        v96 = v51;
        (*(void (**)(void ***__return_ptr, uint64_t, void **))(*(_QWORD *)a2 + 104))(&v73, a2, __p);
        __p[0] = v73;
        __p[1] = v74;
        if (v74)
        {
          v52 = (unint64_t *)&v74->__shared_owners_;
          do
            v53 = __ldxr(v52);
          while (__stxr(v53 + 1, v52));
        }
        xgboost::BatchIterator<xgboost::GHistIndexMatrix>::BatchIterator(&v71, 0);
        if ((xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator!=((uint64_t *)__p) & 1) != 0)
        {
          v54 = xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator*((uint64_t *)__p);
          v55 = *(_QWORD *)(a1 + 56);
          v70[0] = v48 - v47;
          v70[1] = v47;
          xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(v55, v45, v54 + 112, (uint64_t)v70, (uint64_t)a3, &v82);
        }
        v56 = v72;
        if (v72)
        {
          v57 = (unint64_t *)&v72->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        v59 = (std::__shared_weak_count *)__p[1];
        if (__p[1])
        {
          v60 = (unint64_t *)((char *)__p[1] + 8);
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 - 1, v60));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
        v62 = v74;
        if (v74)
        {
          v63 = (unint64_t *)&v74->__shared_owners_;
          do
            v64 = __ldaxr(v63);
          while (__stlxr(v64 - 1, v63));
          if (!v64)
          {
            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
            std::__shared_weak_count::__release_weak(v62);
          }
        }
        v65 = v82;
        v66 = (uint64_t)v83;
      }
      xgboost::tree::Driver<xgboost::tree::CPUExpandEntry>::Push<std::__wrap_iter<xgboost::tree::CPUExpandEntry*>>(&v101, v65, v66);
      xgboost::tree::Driver<xgboost::tree::CPUExpandEntry>::Pop((uint64_t)&v101, (uint64_t *)__p);
      std::vector<xgboost::tree::CPUExpandEntry>::__vdeallocate((uint64_t *)&v91);
      v91 = *(_OWORD *)__p;
      v92 = v94;
      __p[1] = 0;
      v94 = 0;
      __p[0] = 0;
      v73 = __p;
      std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100](&v73);
      __p[0] = &v82;
      std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      __p[0] = &v85;
      std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      __p[0] = &v88;
      std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      v7 = (int *)*((_QWORD *)&v91 + 1);
      v8 = (int *)v91;
    }
    while ((_QWORD)v91 != *((_QWORD *)&v91 + 1));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ExpandTree");
  xgboost::common::Monitor::Stop();
  if (SHIBYTE(v94) < 0)
    operator delete(__p[0]);
  __p[0] = &v91;
  std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v67 = v104;
  if (v104 == v103)
  {
    v68 = 4;
    v67 = v103;
    goto LABEL_94;
  }
  if (v104)
  {
    v68 = 5;
LABEL_94:
    (*(void (**)(void))(*v67 + 8 * v68))();
  }
  __p[0] = &v102;
  std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

{
  __ZN7xgboost4tree17QuantileHistMaker7BuilderIdE10ExpandTreeEPNS_7DMatrixEPNS_7RegTreeERKNSt3__16vectorINS_6detail20GradientPairInternalIfEENS8_9allocatorISC_EEEE(a1, a2, a3, a4);
}

void sub_220F05534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48)
{
  uint64_t v48;

  if (a46 < 0)
    operator delete(__p);
  __p = &a37;
  std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  xgboost::tree::Driver<xgboost::tree::CPUExpandEntry>::~Driver(v48 - 160);
  _Unwind_Resume(a1);
}

uint64_t xgboost::tree::QuantileHistMaker::Builder<double>::UpdatePredictionCache(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  std::string *Entry;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  void *ptr;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  std::string *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  int v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  uint64_t v31;
  std::string *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  int v36;
  void *v37;
  uint64_t v38;
  _QWORD *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t FirstDimension;
  uint64_t Range;
  uint64_t v58;
  int8x16_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  float v64;
  uint64_t v65;
  float v66;
  unint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  std::string *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  int v74;
  void *v75;
  uint64_t v76;
  _QWORD *v77;
  void *v78;
  std::string *v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t i;
  uint64_t v83;
  float *v84;
  uint64_t v85;
  void *v86[2];
  void *__p[2];
  __int128 v88;
  unint64_t v89;
  _QWORD v90[7];
  int8x16_t v91;
  std::exception_ptr v92;
  std::mutex v93;
  uint64_t v94;

  v94 = *MEMORY[0x24BDAC8D0];
  v3 = a1[12];
  if (!v3)
    return 0;
  if (v3 != a2 || a1[11] == 0)
    return 0;
  std::string::basic_string[abi:ne180100]<0>(&v92, "UpdatePredictionCache");
  xgboost::common::Monitor::Start();
  if (v93.__m_.__opaque[7] < 0)
    operator delete(v92.__ptr_);
  v90[0] = a3[5];
  if (v90[0] != *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long long>((uint64_t *)&v92);
    if (v92.__ptr_)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v90);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/updater_quantile_hist.cc");
      v10 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v90);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: ", 14);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"out_preds.Size() == data->Info().num_row_", 41);
      v13 = *((char *)v92.__ptr_ + 23);
      v14 = v13 >= 0 ? v92.__ptr_ : *(void **)v92.__ptr_;
      v15 = v13 >= 0 ? *((unsigned __int8 *)v92.__ptr_ + 23) : *((_QWORD *)v92.__ptr_ + 1);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v14, v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v90);
      ptr = v92.__ptr_;
      v92.__ptr_ = 0;
      if (ptr)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v92, (uint64_t)ptr);
    }
  }
  v83 = a1[7];
  v84 = (float *)a1[1];
  v85 = a1[11];
  v18 = *a3;
  v19 = a3[2];
  v20 = a3[4];
  v21 = *((_DWORD *)a3 + 12);
  v90[0] = a3[5];
  LODWORD(v86[0]) = 0;
  if (!v90[0])
  {
    dmlc::LogCheckFormat<unsigned long,unsigned int>((uint64_t *)&v92);
    if (v92.__ptr_)
    {
      v70 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v90);
      dmlc::LogMessageFatal::Entry::Init(v70, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/./hist/evaluate_splits.h");
      v71 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v90);
      v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)"Check failed: ", 14);
      v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"out_preds.Size() > 0U", 21);
      v74 = *((char *)v92.__ptr_ + 23);
      v75 = v74 >= 0 ? v92.__ptr_ : *(void **)v92.__ptr_;
      v76 = v74 >= 0 ? *((unsigned __int8 *)v92.__ptr_ + 23) : *((_QWORD *)v92.__ptr_ + 1);
      v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)v75, v76);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v90);
      v78 = v92.__ptr_;
      v92.__ptr_ = 0;
      if (v78)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v92, (uint64_t)v78);
    }
  }
  if (!v85)
  {
    v79 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v92);
    dmlc::LogMessageFatal::Entry::Init(v79, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/./hist/evaluate_splits.h");
    v80 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v92);
    v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"Check failed: p_last_tree", 25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v92);
  }
  xgboost::tree::TreeEvaluator::GetEvaluator<xgboost::tree::TrainParam>((uint64_t **)(v83 + 152), (uint64_t)v90);
  LODWORD(v86[0]) = v21;
  v91.i32[0] = -1;
  if (v21 != -1)
  {
    dmlc::LogCheckFormat<int,int>((uint64_t *)&v92);
    if (v92.__ptr_)
    {
      v22 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v86);
      dmlc::LogMessageFatal::Entry::Init(v22, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/./hist/evaluate_splits.h");
      v23 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v86);
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Check failed: ", 14);
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"out_preds.DeviceIdx() == GenericParameter::kCpuId", 49);
      v26 = *((char *)v92.__ptr_ + 23);
      v27 = v26 >= 0 ? v92.__ptr_ : *(void **)v92.__ptr_;
      v28 = v26 >= 0 ? *((unsigned __int8 *)v92.__ptr_ + 23) : *((_QWORD *)v92.__ptr_ + 1);
      v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v27, v28);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v86);
      v30 = v92.__ptr_;
      v92.__ptr_ = 0;
      if (v30)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v92, (uint64_t)v30);
    }
  }
  v89 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v85 + 168) - *(_QWORD *)(v85 + 160)) >> 2);
  v31 = a1[8];
  for (i = a1[9]; v31 != i; v31 += 136)
  {
    v86[0] = (void *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v31 + 112) - *(_QWORD *)(v31 + 104)) >> 3));
    if (v86[0] != (void *)v89)
    {
      dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v92);
      if (v92.__ptr_)
      {
        v32 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v86);
        dmlc::LogMessageFatal::Entry::Init(v32, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/./hist/evaluate_splits.h");
        v33 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v86);
        v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Check failed: ", 14);
        v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"part.Size() == n_nodes", 22);
        v36 = *((char *)v92.__ptr_ + 23);
        v37 = v36 >= 0 ? v92.__ptr_ : *(void **)v92.__ptr_;
        v38 = v36 >= 0 ? *((unsigned __int8 *)v92.__ptr_ + 23) : *((_QWORD *)v92.__ptr_ + 1);
        v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v37, v38);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v86);
        v40 = v92.__ptr_;
        v92.__ptr_ = 0;
        if (v40)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v92, (uint64_t)v40);
      }
    }
    v41 = *(_QWORD *)(v31 + 104);
    v42 = *(_QWORD *)(v31 + 112);
    *(_OWORD *)v86 = 0u;
    *(_OWORD *)__p = 0u;
    v88 = 0u;
    v43 = v42 - v41;
    if (v43)
    {
      v44 = 0;
      v45 = 0xAAAAAAAAAAAAAAABLL * (v43 >> 3);
      do
      {
        v46 = *(_QWORD *)(*(_QWORD *)(v31 + 104) + 24 * v44 + 8)
            - *(_QWORD *)(*(_QWORD *)(v31 + 104) + 24 * v44);
        v47 = v46 >> 3;
        if ((v46 & 0x1FF8) != 0)
          v48 = ((unint64_t)(v46 >> 3) >> 10) + 1;
        else
          v48 = (unint64_t)(v46 >> 3) >> 10;
        if (v48)
        {
          v49 = 0;
          do
          {
            v50 = v49 + 1024;
            if (v47 >= v49 + 1024)
              v51 = v49 + 1024;
            else
              v51 = v47;
            xgboost::common::BlockedSpace2d::AddBlock((xgboost::common::BlockedSpace2d *)v86, v44, v49, v51);
            v49 = v50;
            --v48;
          }
          while (v48);
        }
        ++v44;
      }
      while (v44 != v45);
      v52 = v86[0];
      v43 = (uint64_t)v86[1];
    }
    else
    {
      v52 = 0;
    }
    v92.__ptr_ = 0;
    v93.__m_.__sig = 850045863;
    memset(v93.__m_.__opaque, 0, sizeof(v93.__m_.__opaque));
    v53 = v43 - (_QWORD)v52;
    if (v53)
    {
      v54 = 0;
      v55 = v53 >> 4;
      do
      {
        FirstDimension = xgboost::common::BlockedSpace2d::GetFirstDimension((xgboost::common::BlockedSpace2d *)v86, v54);
        Range = xgboost::common::BlockedSpace2d::GetRange((xgboost::common::BlockedSpace2d *)v86, v54);
        v60 = *(_QWORD *)(v85 + 160);
        if (*(_DWORD *)(v60 + 20 * (int)FirstDimension + 12) != -1
          && *(_DWORD *)(v60 + 20 * (int)FirstDimension + 4) == -1)
        {
          v61 = Range;
          v62 = v58;
          v63 = *(_QWORD *)(v31 + 104);
          v91 = *(int8x16_t *)(*(_QWORD *)(v83 + 296) + 24 * FirstDimension);
          v64 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeight((uint64_t)v90, FirstDimension, v84, (double *)v91.i64, v91, v59);
          if (v61 < v62)
          {
            v65 = *(_QWORD *)(v63 + 24 * FirstDimension);
            v66 = v64 * v84[1];
            v67 = v65 + 8 * v62;
            v68 = (_QWORD *)(v65 + 8 * v61);
            do
            {
              v69 = *v68 * v18;
              if (v69 >= v19)
                __assert_rtn("operator()", "linalg.h", 412, "offset < data_.size() && \"Out of bound access.\"");
              *(float *)(v20 + 4 * v69) = v66 + *(float *)(v20 + 4 * v69);
              ++v68;
            }
            while ((unint64_t)v68 < v67);
          }
        }
        ++v54;
      }
      while (v54 != v55);
    }
    dmlc::OMPException::Rethrow(&v92);
    std::mutex::~mutex(&v93);
    std::exception_ptr::~exception_ptr(&v92);
    if (__p[1])
    {
      *(void **)&v88 = __p[1];
      operator delete(__p[1]);
    }
    if (v86[0])
    {
      v86[1] = v86[0];
      operator delete(v86[0]);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v92, "UpdatePredictionCache");
  xgboost::common::Monitor::Stop();
  if (v93.__m_.__opaque[7] < 0)
    operator delete(v92.__ptr_);
  return 1;
}

{
  return __ZNK7xgboost4tree17QuantileHistMaker7BuilderIdE21UpdatePredictionCacheEPKNS_7DMatrixENS_6linalg10TensorViewIfLi1EEE(a1, a2, a3);
}

void sub_220F05E10(_Unwind_Exception *a1)
{
  uint64_t v1;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v1 - 168));
  _Unwind_Resume(a1);
}

void sub_220F05E20()
{
  uint64_t v0;
  std::mutex *v1;
  uint64_t v2;

  __cxa_end_catch();
  std::mutex::~mutex(v1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v0 - 168));
  xgboost::common::Index::~Index((xgboost::common::Index *)&v2);
  JUMPOUT(0x220F05F24);
}

void sub_220F05E2C()
{
  uint64_t v0;
  std::mutex *v1;
  uint64_t v2;

  __cxa_end_catch();
  std::mutex::~mutex(v1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v0 - 168));
  xgboost::common::Index::~Index((xgboost::common::Index *)&v2);
  JUMPOUT(0x220F05F24);
}

void sub_220F05E3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_220F05ECC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x220F05ED8);
}

void sub_220F05EF0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_220F05F00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  if (a17)
    JUMPOUT(0x220F05F20);
  _Unwind_Resume(a1);
}

void xgboost::tree::QuantileHistMaker::Builder<double>::InitSampling(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v6;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *v7;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v8;
  uint64_t v9;
  float v10;
  double v11;
  uint64_t v12;
  float *v13;
  void *v14;
  char v15;
  void *__p;
  std::mutex v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&__p, "InitSampling");
  xgboost::common::Monitor::Start();
  if (v17.__m_.__opaque[7] < 0)
    operator delete(__p);
  v6 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  v7 = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)dmlc::ThreadLocalStore<xgboost::common::RandomThreadLocalEntry>::Get();
  v8 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(v7);
  v9 = *v6;
  v10 = *(float *)(*(_QWORD *)(a1 + 8) + 48);
  __p = 0;
  v17.__m_.__sig = 850045863;
  memset(v17.__m_.__opaque, 0, sizeof(v17.__m_.__opaque));
  if (v9)
  {
    v11 = v10;
    if (v8 <= 1)
      v12 = 1;
    else
      v12 = v8;
    v13 = (float *)(*a3 + 4);
    do
    {
      if (*v13 < 0.0
        || (v12 = (16807 * v12) & 0x7FFFFFFFFFFFFFFFLL, (double)(unint64_t)(v12 - 1) * 1.08420217e-19 + 0.0 >= v11))
      {
        *(v13 - 1) = 0.0;
        *v13 = 0.0;
      }
      v13 += 2;
      --v9;
    }
    while (v9);
  }
  dmlc::OMPException::Rethrow((std::exception_ptr *)&__p);
  std::string::basic_string[abi:ne180100]<0>(&v14, "InitSampling");
  xgboost::common::Monitor::Stop();
  if (v15 < 0)
    operator delete(v14);
  std::mutex::~mutex(&v17);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&__p);
}

{
  __ZN7xgboost4tree17QuantileHistMaker7BuilderIdE12InitSamplingERKNS_7DMatrixEPNSt3__16vectorINS_6detail20GradientPairInternalIfEENS7_9allocatorISB_EEEE(a1, a2, a3);
}

void sub_220F060B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::exception_ptr a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::mutex *v21;

  if (a15 < 0)
    operator delete(__p);
  std::mutex::~mutex(v21);
  std::exception_ptr::~exception_ptr(&a16);
  _Unwind_Resume(a1);
}

void xgboost::tree::QuantileHistMaker::Builder<double>::InitRoot(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, float32x2_t **a4@<X3>, uint64_t a5@<X8>)
{
  int *v5;
  int v6;
  int v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int32 v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  rabit::engine *v32;
  uint64_t v33;
  __int32 v34;
  void *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  char **v45;
  uint64_t v46;
  std::string *Entry;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  float64x2_t v59;
  uint64_t v60;
  float64x2_t *v61;
  float64x2_t v62;
  float32x2_t *v63;
  float32x2_t *v64;
  float64x2_t v65;
  float32x2_t v66;
  void *Engine;
  uint64_t v68;
  float inited;
  float v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int32 v79;
  void *v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  uint64_t v101;
  uint64_t *v104;
  __int128 *v105;
  _QWORD v107[2];
  void *v108;
  void *v109;
  uint64_t v110;
  void *__p;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  int8x16_t v116;
  int8x16_t v117;
  int8x16_t v118;
  uint64_t v119;
  void *v120;
  _BYTE *v121;
  void *v122;
  _BYTE *v123;
  int8x16_t v124;
  int8x16_t v125;
  uint64_t v126;
  void *v127;
  void *v128;
  uint64_t v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  _QWORD v133[3];

  v133[1] = *MEMORY[0x24BDAC8D0];
  v5 = *(int **)(a3 + 160);
  v6 = *v5;
  if (*v5 == -1)
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    do
    {
      ++v7;
      v6 = v5[5 * (v6 & 0x7FFFFFFF)];
    }
    while (v6 != -1);
  }
  *(_DWORD *)a5 = 0;
  *(_DWORD *)(a5 + 4) = v7;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 24) = 0;
  *(_DWORD *)(a5 + 16) = 0;
  *(_QWORD *)(a5 + 32) = 0;
  *(_QWORD *)(a5 + 40) = 0;
  *(_BYTE *)(a5 + 48) = 0;
  *(_OWORD *)(a5 + 56) = 0u;
  *(_OWORD *)(a5 + 72) = 0u;
  v104 = (uint64_t *)(a5 + 8);
  v105 = (__int128 *)(a5 + 48);
  v8 = *(_QWORD *)(a5 + 8);
  v101 = *(_QWORD *)a5;
  v125.i64[0] = *(_QWORD *)a5;
  v125.i64[1] = v8;
  LODWORD(v126) = 0;
  v128 = 0;
  v129 = 0;
  v127 = 0;
  v9 = *(_OWORD *)(a5 + 64);
  v130 = *(_OWORD *)(a5 + 48);
  v131 = v9;
  v132 = *(_QWORD *)(a5 + 80);
  v119 = 0;
  v118 = 0uLL;
  v124.i64[0] = (uint64_t)&v118;
  v124.i8[8] = 0;
  v118.i64[0] = (uint64_t)operator new(0x58uLL);
  v118.i64[1] = v118.i64[0];
  v119 = v118.i64[0] + 88;
  v118.i64[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<xgboost::tree::CPUExpandEntry>,xgboost::tree::CPUExpandEntry const*,xgboost::tree::CPUExpandEntry const*,xgboost::tree::CPUExpandEntry*>((uint64_t)&v119, (uint64_t)&v125, (uint64_t)v133, v118.i64[0]);
  xgboost::tree::ConstructHistSpace<std::vector<xgboost::tree::HistRowPartitioner>>((xgboost::common::BlockedSpace2d *)&v120, a1 + 8, v118.i64);
  v124.i64[0] = (uint64_t)&v118;
  std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v124);
  if (v127)
  {
    v128 = v127;
    operator delete(v127);
  }
  v10 = a1[1];
  v11 = *(_DWORD *)(v10 + 20);
  v12 = *(void **)(v10 + 128);
  v125.i32[0] = -1;
  v125.i32[1] = v11;
  v125.i64[1] = 0;
  v126 = 0;
  LOBYTE(v127) = 0;
  v128 = v12;
  (*(void (**)(int8x16_t *__return_ptr, uint64_t, int8x16_t *))(*(_QWORD *)a2 + 104))(&v117, a2, &v125);
  v116 = v117;
  if (v117.i64[1])
  {
    v13 = (unint64_t *)(v117.i64[1] + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  xgboost::BatchIterator<xgboost::GHistIndexMatrix>::BatchIterator(&v114, 0);
  v15 = 0;
  v16 = 80;
  while ((xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator!=(v116.i64) & 1) != 0)
  {
    v17 = xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator*(v116.i64);
    v125.i64[0] = v101;
    v125.i64[1] = *v104;
    LODWORD(v126) = *(_DWORD *)(a5 + 16);
    v128 = 0;
    v129 = 0;
    v127 = 0;
    v18 = *(_OWORD *)(a5 + 64);
    v130 = *v105;
    v131 = v18;
    v132 = *(_QWORD *)(a5 + 80);
    v118 = 0uLL;
    v119 = 0;
    v124.i64[0] = (uint64_t)&v118;
    v124.i8[8] = 0;
    v118.i64[0] = (uint64_t)operator new(0x58uLL);
    v118.i64[1] = v118.i64[0];
    v119 = v118.i64[0] + 88;
    v118.i64[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<xgboost::tree::CPUExpandEntry>,xgboost::tree::CPUExpandEntry const*,xgboost::tree::CPUExpandEntry const*,xgboost::tree::CPUExpandEntry*>((uint64_t)&v119, (uint64_t)&v125, (uint64_t)v133, v118.i64[0]);
    if (v127)
    {
      v128 = v127;
      operator delete(v127);
    }
    v125 = 0uLL;
    v126 = 0;
    v19 = a1[13];
    v109 = 0;
    v110 = 0;
    v108 = 0;
    std::vector<xgboost::common::Range1d>::__init_with_size[abi:ne180100]<xgboost::common::Range1d*,xgboost::common::Range1d*>(&v108, v120, (uint64_t)v121, (v121 - (_BYTE *)v120) >> 4);
    __p = 0;
    v112 = 0;
    v113 = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v122, (uint64_t)v123, (v123 - (_BYTE *)v122) >> 3);
    v20 = a1[8];
    if (0xF0F0F0F0F0F0F0F1 * ((a1[9] - v20) >> 3) <= v15)
      std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_out_of_range[abi:ne180100]();
    xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::BuildHist(v19, v15, (uint64_t)&v108, v17, a3, v20 + v16, (int **)&v118, (int **)&v125, (uint64_t)a4);
    if (__p)
    {
      v112 = __p;
      operator delete(__p);
    }
    if (v108)
    {
      v109 = v108;
      operator delete(v108);
    }
    ++v15;
    v124.i64[0] = (uint64_t)&v125;
    std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v124);
    v125.i64[0] = (uint64_t)&v118;
    std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v125);
    v16 += 136;
    xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator++(v116.i64);
  }
  v21 = v115;
  if (v115)
  {
    p_shared_owners = (unint64_t *)&v115->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = (std::__shared_weak_count *)v116.i64[1];
  if (v116.i64[1])
  {
    v25 = (unint64_t *)(v116.i64[1] + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = (std::__shared_weak_count *)v117.i64[1];
  if (v117.i64[1])
  {
    v28 = (unint64_t *)(v117.i64[1] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v117 = 0uLL;
  v30 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) + 16);
  v31 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  v32 = (rabit::engine *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  if (v30 == *((_QWORD *)v32 + 1) * v31)
  {
    v33 = a1[1];
    v34 = *(_DWORD *)(v33 + 20);
    v35 = *(void **)(v33 + 128);
    v125.i32[0] = -1;
    v125.i32[1] = v34;
    v125.i64[1] = 0;
    v126 = 0;
    LOBYTE(v127) = 0;
    v128 = v35;
    (*(void (**)(int8x16_t *__return_ptr, uint64_t, int8x16_t *))(*(_QWORD *)a2 + 104))(&v124, a2, &v125);
    v118 = v124;
    if (v124.i64[1])
    {
      v36 = (unint64_t *)(v124.i64[1] + 8);
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    v38 = xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator*(v118.i64);
    v39 = (std::__shared_weak_count *)v118.i64[1];
    if (v118.i64[1])
    {
      v40 = (unint64_t *)(v118.i64[1] + 8);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    v42 = (std::__shared_weak_count *)v124.i64[1];
    if (v124.i64[1])
    {
      v43 = (unint64_t *)(v124.i64[1] + 8);
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    v45 = *(char ***)(v38 + 128);
    v46 = v45[1] - *v45;
    v118.i64[0] = v46 >> 2;
    v124.i32[0] = 2;
    if ((unint64_t)v46 < 8)
    {
      dmlc::LogCheckFormat<unsigned long,int>(v125.i64);
      if (v125.i64[0])
      {
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v118);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/updater_quantile_hist.cc");
        v48 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v118);
        v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"Check failed: ", 14);
        v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"row_ptr.size() >= 2", 19);
        v51 = *(char *)(v125.i64[0] + 23);
        v52 = v51 >= 0 ? v125.i64[0] : *(_QWORD *)v125.i64[0];
        v53 = v51 >= 0 ? *(unsigned __int8 *)(v125.i64[0] + 23) : *(_QWORD *)(v125.i64[0] + 8);
        v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, v52, v53);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v118);
        v55 = v125.i64[0];
        v125.i64[0] = 0;
        if (v55)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v125, v55);
      }
    }
    v56 = *v45;
    v57 = *(unsigned int *)*v45;
    v58 = *((unsigned int *)v56 + 1);
    xgboost::common::HistCollection<double>::operator[]((unsigned int *)a1[13], 0, &v125);
    if (v57 < v58)
    {
      v59 = (float64x2_t)v117;
      v60 = v58 - v57;
      v61 = (float64x2_t *)(v125.i64[1] + 16 * v57);
      do
      {
        v62 = *v61++;
        v59 = vaddq_f64(v59, v62);
        v117 = (int8x16_t)v59;
        --v60;
      }
      while (v60);
    }
  }
  else
  {
    v63 = *a4;
    v64 = a4[1];
    if (*a4 != v64)
    {
      v65 = (float64x2_t)v117;
      do
      {
        v66 = *v63++;
        v65 = vaddq_f64(v65, vcvtq_f64_f32(v66));
      }
      while (v63 != v64);
      v117 = (int8x16_t)v65;
    }
    Engine = rabit::engine::GetEngine(v32);
    (*(void (**)(void *, int8x16_t *, uint64_t, uint64_t, double (*)(double *, double *, int), _QWORD, _QWORD))(*(_QWORD *)Engine + 8))(Engine, &v117, 8, 2, rabit::op::Reducer<rabit::op::Sum,double>, 0, 0);
  }
  v68 = a1[7];
  v125 = v117;
  inited = xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>::InitRoot(v68, &v125);
  v70 = *(double *)&v117.i64[1];
  v71 = *(_QWORD *)(a3 + 208);
  *(float *)(v71 + 4) = v70;
  *(float *)(v71 + 8) = inited;
  v72 = *(_QWORD *)(a3 + 160);
  *(float *)(v72 + 16) = inited * *(float *)(a1[1] + 4);
  *(_QWORD *)(v72 + 4) = -1;
  v73 = *v104;
  v125.i64[0] = *(_QWORD *)a5;
  v125.i64[1] = v73;
  LODWORD(v126) = *(_DWORD *)(a5 + 16);
  v128 = 0;
  v129 = 0;
  v127 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v127, *(const void **)(a5 + 24), *(_QWORD *)(a5 + 32), (uint64_t)(*(_QWORD *)(a5 + 32) - *(_QWORD *)(a5 + 24)) >> 2);
  v74 = *(_OWORD *)(a5 + 64);
  v130 = *v105;
  v131 = v74;
  v132 = *(_QWORD *)(a5 + 80);
  v119 = 0;
  v118 = 0uLL;
  v124.i64[0] = (uint64_t)&v118;
  v124.i8[8] = 0;
  v118.i64[0] = (uint64_t)operator new(0x58uLL);
  v118.i64[1] = v118.i64[0];
  v119 = v118.i64[0] + 88;
  v118.i64[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<xgboost::tree::CPUExpandEntry>,xgboost::tree::CPUExpandEntry const*,xgboost::tree::CPUExpandEntry const*,xgboost::tree::CPUExpandEntry*>((uint64_t)&v119, (uint64_t)&v125, (uint64_t)v133, v118.i64[0]);
  if (v127)
  {
    v128 = v127;
    operator delete(v127);
  }
  std::string::basic_string[abi:ne180100]<0>(&v125, "EvaluateSplits");
  xgboost::common::Monitor::Start();
  if (SHIBYTE(v126) < 0)
    operator delete((void *)v125.i64[0]);
  v75 = *(uint64_t **)((**(uint64_t (***)(uint64_t))a2)(a2) + 168);
  v76 = *v75;
  v77 = v75[1];
  v78 = a1[1];
  v79 = *(_DWORD *)(v78 + 20);
  v80 = *(void **)(v78 + 128);
  v125.i32[0] = -1;
  v125.i32[1] = v79;
  v125.i64[1] = 0;
  v126 = 0;
  LOBYTE(v127) = 0;
  v128 = v80;
  (*(void (**)(int8x16_t *__return_ptr, uint64_t, int8x16_t *))(*(_QWORD *)a2 + 104))(&v124, a2, &v125);
  v125 = v124;
  if (v124.i64[1])
  {
    v81 = (unint64_t *)(v124.i64[1] + 8);
    do
      v82 = __ldxr(v81);
    while (__stxr(v82 + 1, v81));
  }
  xgboost::BatchIterator<xgboost::GHistIndexMatrix>::BatchIterator(&v116, 0);
  if ((xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator!=(v125.i64) & 1) != 0)
  {
    v83 = xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator*(v125.i64);
    v84 = a1[7];
    v85 = a1[13];
    v107[0] = v77 - v76;
    v107[1] = v76;
    xgboost::tree::HistEvaluator<double,xgboost::tree::CPUExpandEntry>::EvaluateSplits(v84, v85, v83 + 112, (uint64_t)v107, a3, v118.i64);
  }
  v86 = (std::__shared_weak_count *)v116.i64[1];
  if (v116.i64[1])
  {
    v87 = (unint64_t *)(v116.i64[1] + 8);
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = (std::__shared_weak_count *)v125.i64[1];
  if (v125.i64[1])
  {
    v90 = (unint64_t *)(v125.i64[1] + 8);
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = (std::__shared_weak_count *)v124.i64[1];
  if (v124.i64[1])
  {
    v93 = (unint64_t *)(v124.i64[1] + 8);
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v125, "EvaluateSplits");
  xgboost::common::Monitor::Stop();
  if (SHIBYTE(v126) < 0)
    operator delete((void *)v125.i64[0]);
  v95 = v118.i64[0];
  *(_QWORD *)a5 = *(_QWORD *)v118.i64[0];
  v96 = *(_QWORD *)(v95 + 8);
  *(_DWORD *)(a5 + 16) = *(_DWORD *)(v95 + 16);
  *v104 = v96;
  if (v95 != a5)
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a5 + 24), *(char **)(v95 + 24), *(_QWORD *)(v95 + 32), (uint64_t)(*(_QWORD *)(v95 + 32) - *(_QWORD *)(v95 + 24)) >> 2);
  v97 = *(_OWORD *)(v95 + 48);
  v98 = *(_OWORD *)(v95 + 64);
  *(_QWORD *)(a5 + 80) = *(_QWORD *)(v95 + 80);
  *v105 = v97;
  *(_OWORD *)(a5 + 64) = v98;
  v125.i64[0] = (uint64_t)&v118;
  std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v125);
  if (v122)
  {
    v123 = v122;
    operator delete(v122);
  }
  if (v120)
  {
    v121 = v120;
    operator delete(v120);
  }
}

void sub_220F06B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,char a37)
{
  void *v38;

  xgboost::common::Index::~Index((xgboost::common::Index *)&a37);
  v38 = *a10;
  if (*a10)
  {
    *(_QWORD *)(a11 + 32) = v38;
    operator delete(v38);
  }
  _Unwind_Resume(a1);
}

void xgboost::tree::QuantileHistMaker::Builder<double>::BuildHistogram(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  _QWORD *v9;
  double *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  double v16;
  double v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int *v21;
  int *v22;
  void *v23;
  int *v24;
  void *v25;
  int *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  int *v32;
  void *v33;
  int *v34;
  void *v35;
  int *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  void *v60;
  void *v61;
  uint64_t v62;
  void *__p;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  int *v75[3];
  int *v76[3];
  _BYTE v77[40];
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v9 = a4 + 1;
  std::vector<xgboost::tree::CPUExpandEntry>::vector(v76, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a4[1] - *a4) >> 3));
  v56 = a5;
  v57 = a2;
  std::vector<xgboost::tree::CPUExpandEntry>::vector(v75, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*v9 - *a4) >> 3));
  v10 = (double *)*a4;
  v58 = (int *)a4[1];
  v11 = a3;
  if ((int *)*a4 != v58)
  {
    v12 = 0;
    do
    {
      v13 = *(_QWORD *)(v11 + 160);
      v14 = v13 + 20 * *(int *)v10;
      v15 = *(_DWORD *)(v14 + 4);
      LODWORD(v14) = *(_DWORD *)(v14 + 8);
      v16 = v10[10];
      v17 = v10[8];
      if (v16 >= v17)
        v18 = v14;
      else
        v18 = v15;
      if (v16 >= v17)
        v14 = v15;
      else
        v14 = v14;
      v19 = *(_DWORD *)(v13 + 20 * (int)v14);
      if (v19 == -1)
      {
        v20 = 0;
      }
      else
      {
        v20 = 0;
        do
        {
          ++v20;
          v19 = *(_DWORD *)(v13 + 20 * (v19 & 0x7FFFFFFF));
        }
        while (v19 != -1);
      }
      memset(&v77[7], 0, 32);
      v21 = v76[0];
      v22 = &v76[0][22 * v12];
      *(_QWORD *)v22 = v14 | (v20 << 32);
      *((_QWORD *)v22 + 1) = 0;
      v22[4] = 0;
      v25 = (void *)*((_QWORD *)v22 + 3);
      v24 = v22 + 6;
      v23 = v25;
      if (v25)
      {
        *(_QWORD *)&v21[22 * v12 + 8] = v23;
        operator delete(v23);
        *(_QWORD *)v24 = 0;
        *((_QWORD *)v24 + 1) = 0;
        *((_QWORD *)v24 + 2) = 0;
      }
      v26 = &v21[22 * v12];
      *(_QWORD *)v24 = 0;
      *((_QWORD *)v24 + 1) = 0;
      *((_BYTE *)v24 + 24) = 0;
      *((_QWORD *)v24 + 2) = 0;
      *(_OWORD *)((char *)v26 + 49) = *(_OWORD *)v77;
      *(_OWORD *)((char *)v26 + 65) = *(_OWORD *)&v77[16];
      *((_QWORD *)v26 + 10) = *(_QWORD *)&v77[31];
      v11 = a3;
      v27 = *(_QWORD *)(a3 + 160);
      v28 = *(_DWORD *)(v27 + 20 * (int)v18);
      if (v28 == -1)
      {
        v29 = 0;
      }
      else
      {
        v29 = 0;
        do
        {
          ++v29;
          v28 = *(_DWORD *)(v27 + 20 * (v28 & 0x7FFFFFFF));
        }
        while (v28 != -1);
      }
      v30 = v18 | (v29 << 32);
      memset(&v77[7], 0, 32);
      v31 = v75[0];
      v32 = &v75[0][22 * v12];
      *(_QWORD *)v32 = v30;
      *((_QWORD *)v32 + 1) = 0;
      v32[4] = 0;
      v35 = (void *)*((_QWORD *)v32 + 3);
      v34 = v32 + 6;
      v33 = v35;
      if (v35)
      {
        *(_QWORD *)&v31[22 * v12 + 8] = v33;
        operator delete(v33);
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
        *((_QWORD *)v34 + 2) = 0;
      }
      v36 = &v31[22 * v12];
      *(_QWORD *)v34 = 0;
      *((_QWORD *)v34 + 1) = 0;
      *((_BYTE *)v34 + 24) = 0;
      *((_QWORD *)v34 + 2) = 0;
      *(_OWORD *)((char *)v36 + 49) = *(_OWORD *)v77;
      *(_OWORD *)((char *)v36 + 65) = *(_OWORD *)&v77[16];
      *((_QWORD *)v36 + 10) = *(_QWORD *)&v77[31];
      ++v12;
      v10 += 11;
    }
    while (v10 != (double *)v58);
  }
  xgboost::tree::ConstructHistSpace<std::vector<xgboost::tree::HistRowPartitioner>>((xgboost::common::BlockedSpace2d *)v77, a1 + 8, (uint64_t *)v76);
  v37 = a1[1];
  v38 = *(_DWORD *)(v37 + 20);
  v39 = *(_QWORD *)(v37 + 128);
  LODWORD(v68) = -1;
  HIDWORD(v68) = v38;
  v69 = 0;
  v70 = 0;
  v71 = 0;
  v72 = v39;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v57 + 104))(&v73, v57, &v68);
  v68 = v73;
  v69 = v74;
  if (v74)
  {
    p_shared_owners = (unint64_t *)&v74->__shared_owners_;
    do
      v41 = __ldxr(p_shared_owners);
    while (__stxr(v41 + 1, p_shared_owners));
  }
  xgboost::BatchIterator<xgboost::GHistIndexMatrix>::BatchIterator(&v66, 0);
  v42 = 0;
  v43 = 80;
  while ((xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator!=(&v68) & 1) != 0)
  {
    v44 = xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator*(&v68);
    v45 = a1[13];
    v61 = 0;
    v62 = 0;
    v60 = 0;
    std::vector<xgboost::common::Range1d>::__init_with_size[abi:ne180100]<xgboost::common::Range1d*,xgboost::common::Range1d*>(&v60, *(const void **)v77, *(uint64_t *)&v77[8], (uint64_t)(*(_QWORD *)&v77[8] - *(_QWORD *)v77) >> 4);
    __p = 0;
    v64 = 0;
    v65 = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)&v77[24], *(uint64_t *)&v77[32], (uint64_t)(*(_QWORD *)&v77[32] - *(_QWORD *)&v77[24]) >> 3);
    v46 = a1[8];
    if (0xF0F0F0F0F0F0F0F1 * ((a1[9] - v46) >> 3) <= v42)
      std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_out_of_range[abi:ne180100]();
    xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::BuildHist(v45, v42, (uint64_t)&v60, v44, v11, v46 + v43, v76, v75, v56);
    if (__p)
    {
      v64 = __p;
      operator delete(__p);
    }
    if (v60)
    {
      v61 = v60;
      operator delete(v60);
    }
    ++v42;
    v43 += 136;
    xgboost::BatchIterator<xgboost::GHistIndexMatrix>::operator++(&v68);
  }
  v47 = v67;
  if (v67)
  {
    v48 = (unint64_t *)&v67->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = v69;
  if (v69)
  {
    v51 = (unint64_t *)&v69->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = v74;
  if (v74)
  {
    v54 = (unint64_t *)&v74->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  if (*(_QWORD *)&v77[24])
  {
    *(_QWORD *)&v77[32] = *(_QWORD *)&v77[24];
    operator delete(*(void **)&v77[24]);
  }
  if (*(_QWORD *)v77)
  {
    *(_QWORD *)&v77[8] = *(_QWORD *)v77;
    operator delete(*(void **)v77);
  }
  *(_QWORD *)v77 = v75;
  std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)v77);
  *(_QWORD *)v77 = v76;
  std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)v77);
}

{
  __ZN7xgboost4tree17QuantileHistMaker7BuilderIdE14BuildHistogramEPNS_7DMatrixEPNS_7RegTreeERKNSt3__16vectorINS0_14CPUExpandEntryENS8_9allocatorISA_EEEERKNS9_INS_6detail20GradientPairInternalIfEENSB_ISI_EEEE(a1, a2, a3, a4, a5);
}

void sub_220F07214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29)
{
  uint64_t v29;

  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  xgboost::common::Index::~Index((xgboost::common::Index *)(v29 - 144));
  *(_QWORD *)(v29 - 144) = &a29;
  std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)(v29 - 144));
  *(_QWORD *)(v29 - 144) = v29 - 168;
  std::vector<xgboost::tree::CPUExpandEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)(v29 - 144));
  _Unwind_Resume(a1);
}

uint64_t xgboost::tree::__dmlc_registry_file_tag_updater_quantile_hist__(xgboost::tree *this)
{
  return 0;
}

void xgboost::tree::QuantileHistMaker::Configure(uint64_t a1, uint64_t *a2)
{
  uint64_t v4[3];
  uint64_t v5[3];
  void **v6;

  xgboost::XGBoostParameter<xgboost::tree::TrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::tree::TrainParam *)(a1 + 24), a2, v5);
  v6 = (void **)v5;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v6);
  xgboost::XGBoostParameter<xgboost::tree::CPUHistMakerTrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::tree::CPUHistMakerTrainParam *)(a1 + 16), a2, v4);
  v6 = (void **)v4;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v6);
}

void xgboost::tree::QuantileHistMaker::Update(uint64_t a1, uint64_t *a2, uint64_t a3, xgboost::RegTree ***a4)
{
  uint64_t v8;
  float v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  xgboost::RegTree **v15;
  xgboost::RegTree **v16;
  xgboost::RegTree *v17;

  v8 = a1 + 24;
  v9 = *(float *)(a1 + 28);
  v10 = a4[1] - *a4;
  *(float *)(a1 + 28) = v9 / (float)v10;
  if (*(_BYTE *)(a1 + 17))
  {
    if (!*(_QWORD *)(a1 + 160))
    {
      v11 = operator new();
      xgboost::tree::QuantileHistMaker::Builder<float>::Builder(v11, v10, v8, a3, *(_WORD *)(a1 + 176), *(_QWORD *)(a1 + 8));
      v12 = *(_QWORD *)(a1 + 160);
      *(_QWORD *)(a1 + 160) = v11;
      if (v12)
        std::default_delete<xgboost::tree::QuantileHistMaker::Builder<float>>::operator()[abi:ne180100](v12);
    }
  }
  else if (!*(_QWORD *)(a1 + 168))
  {
    v13 = operator new();
    xgboost::tree::QuantileHistMaker::Builder<double>::Builder(v13, v10, v8, a3, *(_WORD *)(a1 + 176), *(_QWORD *)(a1 + 8));
    v14 = *(_QWORD *)(a1 + 168);
    *(_QWORD *)(a1 + 168) = v13;
    if (v14)
      std::default_delete<xgboost::tree::QuantileHistMaker::Builder<float>>::operator()[abi:ne180100](v14);
  }
  v16 = *a4;
  v15 = a4[1];
  while (v16 != v15)
  {
    v17 = *v16;
    if (*(_BYTE *)(a1 + 17))
      xgboost::tree::QuantileHistMaker::Builder<float>::UpdateTree(*(_QWORD *)(a1 + 160), a2, a3, v17);
    else
      xgboost::tree::QuantileHistMaker::Builder<double>::UpdateTree(*(_QWORD *)(a1 + 168), a2, a3, v17);
    ++v16;
  }
  *(float *)(a1 + 28) = v9;
}

void sub_220F07480(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x1060C4027D9941CLL);
  _Unwind_Resume(a1);
}

_QWORD *xgboost::tree::QuantileHistMaker::UpdatePredictionCache(uint64_t a1, uint64_t a2, __int128 *a3)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  int v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  int v17;

  if (*(_BYTE *)(a1 + 17) && (v4 = *(_QWORD **)(a1 + 160)) != 0)
  {
    v13 = *a3;
    v5 = *((_QWORD *)a3 + 3);
    v14 = *((_QWORD *)a3 + 2);
    v15 = v5;
    v16 = a3[2];
    v17 = *((_DWORD *)a3 + 12);
    return (_QWORD *)xgboost::tree::QuantileHistMaker::Builder<float>::UpdatePredictionCache(v4, a2, (uint64_t *)&v13);
  }
  else
  {
    result = *(_QWORD **)(a1 + 168);
    if (result)
    {
      v8 = *a3;
      v7 = *((_QWORD *)a3 + 3);
      v9 = *((_QWORD *)a3 + 2);
      v10 = v7;
      v11 = a3[2];
      v12 = *((_DWORD *)a3 + 12);
      return (_QWORD *)xgboost::tree::QuantileHistMaker::Builder<double>::UpdatePredictionCache(result, a2, (uint64_t *)&v8);
    }
  }
  return result;
}

void xgboost::tree::HistRowPartitioner::FindSplitConditions(uint64_t *a1, uint64_t a2, uint64_t a3, std::vector<int> *this)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  std::string *Entry;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  unsigned int v27;

  std::vector<int>::resize(this, 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3));
  v8 = *a1;
  if (a1[1] != *a1)
  {
    v9 = 0;
    do
    {
      v10 = *(_QWORD *)(a2 + 160) + 20 * *(int *)(v8 + 88 * v9);
      v11 = *(_DWORD *)(v10 + 12) & 0x7FFFFFFF;
      v12 = *(float *)(v10 + 16);
      v13 = **(_QWORD **)(a3 + 128);
      v14 = *(unsigned int *)(v13 + 4 * v11);
      v27 = 0;
      v27 = *(_DWORD *)(v13 + 4 * (v11 + 1));
      v25 = 0x7FFFFFFF;
      if (v27 > 0x7FFFFFFE)
      {
        dmlc::LogCheckFormat<unsigned int,unsigned int>(&v26);
        if (v26)
        {
          Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v25);
          dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/updater_quantile_hist.cc");
          v16 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v25);
          v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Check failed: ", 14);
          v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"upper_bound < static_cast<uint32_t>(std::numeric_limits<int32_t>::max())", 72);
          v19 = *(char *)(v26 + 23);
          v20 = v19 >= 0 ? v26 : *(_QWORD *)v26;
          v21 = v19 >= 0 ? *(unsigned __int8 *)(v26 + 23) : *(_QWORD *)(v26 + 8);
          v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)": ", 2);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v25);
          v23 = v26;
          v26 = 0;
          if (v23)
            std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v26, v23);
        }
      }
      if (v14 >= v27)
      {
        v24 = -1;
      }
      else
      {
        v24 = -1;
        do
        {
          if (v12 == *(float *)(**(_QWORD **)(a3 + 120) + 4 * v14))
            v24 = v14;
          ++v14;
        }
        while (v27 != v14);
      }
      this->__begin_[v9++] = v24;
      v8 = *a1;
    }
    while (v9 < 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3));
  }
}

void sub_220F07714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

void xgboost::tree::HistRowPartitioner::AddSplitsToRowSet(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  unint64_t v9;
  xgboost::common::RowSetCollection *v10;
  unsigned int v11;
  signed int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  std::string *Entry;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  int v30;
  int v31;

  v3 = a2[1];
  v4 = v3 - *a2;
  if (v3 != *a2)
  {
    v8 = 0;
    v9 = 0x2E8BA2E8BA2E8BA3 * (v4 >> 3);
    v10 = (xgboost::common::RowSetCollection *)(a1 + 10);
    v11 = 1;
    do
    {
      v12 = *(_DWORD *)(*a2 + 88 * v8);
      v13 = (uint64_t *)(*a1 + 16 * (int)(v11 - 1));
      v15 = *v13;
      v14 = v13[1];
      v16 = *(_QWORD *)(a3 + 160) + 20 * v12;
      v17 = *(_DWORD *)(v16 + 4);
      v30 = *(_DWORD *)(v16 + 8);
      v31 = v17 + 1;
      if (v17 + 1 != v30)
      {
        dmlc::LogCheckFormat<int,int>(&v29);
        if (v29)
        {
          Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v31);
          dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/updater_quantile_hist.cc");
          v19 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v31);
          v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Check failed: ", 14);
          v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"(*p_tree)[nid].LeftChild() + 1 == (*p_tree)[nid].RightChild()", 61);
          v22 = *(char *)(v29 + 23);
          if (v22 >= 0)
            v23 = v29;
          else
            v23 = *(_QWORD *)v29;
          if (v22 >= 0)
            v24 = *(unsigned __int8 *)(v29 + 23);
          else
            v24 = *(_QWORD *)(v29 + 8);
          v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v23, v24);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)": ", 2);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v31);
          v26 = v29;
          v29 = 0;
          if (v26)
            std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v29, v26);
        }
      }
      v27 = *(_QWORD *)(a3 + 160) + 20 * v12;
      xgboost::common::RowSetCollection::AddSplit(v10, v12, *(_DWORD *)(v27 + 4), *(_DWORD *)(v27 + 8), v15, v14);
      v8 = v11;
    }
    while (v9 > v11++);
  }
}

void sub_220F078D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11)
{
  uint64_t v12;

  v12 = a9;
  a9 = 0;
  if (v12)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a9, v12);
  _Unwind_Resume(exception_object);
}

void xgboost::tree::QuantileHistMaker::~QuantileHistMaker(xgboost::tree::QuantileHistMaker *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = off_24E6BBE38;
  v2 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v2)
    std::default_delete<xgboost::tree::QuantileHistMaker::Builder<float>>::operator()[abi:ne180100](v2);
  v3 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v3)
    std::default_delete<xgboost::tree::QuantileHistMaker::Builder<float>>::operator()[abi:ne180100](v3);
  if (*((char *)this + 151) < 0)
    operator delete(*((void **)this + 16));
  v4 = (void *)*((_QWORD *)this + 13);
  if (v4)
  {
    *((_QWORD *)this + 14) = v4;
    operator delete(v4);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = off_24E6BBE38;
  v2 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v2)
    std::default_delete<xgboost::tree::QuantileHistMaker::Builder<float>>::operator()[abi:ne180100](v2);
  v3 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v3)
    std::default_delete<xgboost::tree::QuantileHistMaker::Builder<float>>::operator()[abi:ne180100](v3);
  if (*((char *)this + 151) < 0)
    operator delete(*((void **)this + 16));
  v4 = (void *)*((_QWORD *)this + 13);
  if (v4)
  {
    *((_QWORD *)this + 14) = v4;
    operator delete(v4);
  }
  JUMPOUT(0x227667068);
}

void xgboost::tree::QuantileHistMaker::LoadConfig(xgboost::tree::QuantileHistMaker *this, const xgboost::Json *a2)
{
  char *v3;
  _DWORD **v4;
  _DWORD **v5;
  void **v6[3];
  void *__p[2];
  char v8;
  std::vector<std::pair<std::string, std::string>> v9;
  std::vector<std::pair<std::string, std::string>> v10;

  v3 = (char *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*(_DWORD **)a2) + 16;
  std::string::basic_string[abi:ne180100]<0>(__p, "train_param");
  v4 = (_DWORD **)std::map<std::string,xgboost::Json>::at((uint64_t)v3, (const void **)__p);
  xgboost::FromJson<xgboost::tree::TrainParam>(v4, (xgboost::tree::QuantileHistMaker *)((char *)this + 24), &v10);
  v6[0] = (void **)&v10;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](v6);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "cpu_hist_train_param");
  v5 = (_DWORD **)std::map<std::string,xgboost::Json>::at((uint64_t)v3, (const void **)__p);
  xgboost::FromJson<xgboost::tree::CPUHistMakerTrainParam>(v5, (xgboost::tree::QuantileHistMaker *)((char *)this + 16), &v9);
  v6[0] = (void **)&v9;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](v6);
  if (v8 < 0)
    operator delete(__p[0]);
}

void sub_220F07ABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  __n128 v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;

  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst(v21) + 4) >= 1)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/./updater_quantile_hist.h");
      xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)&a18, (uint64_t)&__p, 248, 1);
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a18, (uint64_t)"Attempted to load internal configuration for a model file that was generated ", 77);
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"by a previous version of XGBoost. A likely cause for this warning is that the model ", 84);
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"was saved with saveRDS() in R or pickle.dump() in Python. We strongly ADVISE AGAINST ", 85);
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"using saveRDS() or pickle.dump() so that the model remains accessible in current and ", 85);
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"upcoming XGBoost releases. Please use xgb.save() instead to preserve models for the ", 84);
      v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"long term. For more details and explanation, see ", 49);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"https://xgboost.readthedocs.io/en/latest/tutorials/saving_model.html", 68);
      xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)&a18);
      if (a17 < 0)
        operator delete(__p);
    }
    a18 = 0;
    a19 = 0;
    a20 = 0;
    xgboost::XGBoostParameter<xgboost::tree::CPUHistMakerTrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::tree::CPUHistMakerTrainParam *)(v20 + 16), (uint64_t *)&a18, &a9);
    __p = &a9;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    __p = (uint64_t *)&a18;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    __cxa_end_catch();
    JUMPOUT(0x220F07AA8);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::tree::QuantileHistMaker::SaveConfig(xgboost::tree::QuantileHistMaker *this, xgboost::Json *a2)
{
  unsigned int **v4;
  unsigned int **v5;
  void *__p[2];
  char v7;
  _QWORD v8[2];
  uint64_t v9;
  _QWORD *v10;

  xgboost::ToJson<xgboost::tree::TrainParam>((xgboost::tree::QuantileHistMaker *)((char *)this + 24), (uint64_t)v8);
  std::string::basic_string[abi:ne180100]<0>(__p, "train_param");
  v4 = (unsigned int **)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, __p);
  xgboost::Json::operator=(v4, (uint64_t)v8);
  if (v7 < 0)
    operator delete(__p[0]);
  v8[0] = &off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&v9, v10);
  xgboost::ToJson<xgboost::tree::CPUHistMakerTrainParam>((xgboost::tree::QuantileHistMaker *)((char *)this + 16), (uint64_t)v8);
  std::string::basic_string[abi:ne180100]<0>(__p, "cpu_hist_train_param");
  v5 = (unsigned int **)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, __p);
  xgboost::Json::operator=(v5, (uint64_t)v8);
  if (v7 < 0)
    operator delete(__p[0]);
  v8[0] = &off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&v9, v10);
}

void sub_220F07D5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, _QWORD *a18)
{
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&a17, a18);
  _Unwind_Resume(a1);
}

const char *xgboost::tree::QuantileHistMaker::Name(xgboost::tree::QuantileHistMaker *this)
{
  return "grow_quantile_histmaker";
}

uint64_t xgboost::common::ColumnMatrix::GetColumn<unsigned char,true>(uint64_t *a1, uint64_t *a2, unsigned int a3)
{
  std::string *Entry;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  int v26;
  int v27;
  std::string *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v37 = 1;
  if (*((_DWORD *)a2 + 38) != 1)
  {
    dmlc::LogCheckFormat<unsigned long,xgboost::common::BinTypeSize>(&v38);
    if (v38)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/./../common/column_matrix.h");
      v7 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: ", 14);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"sizeof(BinIdxType) == bins_type_size_", 37);
      v10 = *(char *)(v38 + 23);
      v11 = v10 >= 0 ? v38 : *(_QWORD *)v38;
      v12 = v10 >= 0 ? *(unsigned __int8 *)(v38 + 23) : *(_QWORD *)(v38 + 8);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v37);
      v14 = v38;
      v38 = 0;
      if (v14)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v38, v14);
    }
  }
  v15 = a2[12];
  v16 = *(_QWORD *)(v15 + 8 * a3);
  v17 = *(_QWORD *)(v15 + 8 * (a3 + 1));
  v18 = v17 - v16;
  v19 = *a2;
  if (v17 != v16 && v19 == 0)
    goto LABEL_33;
  v21 = a3;
  v22 = v19 + v16 * *((unsigned int *)a2 + 38);
  *a1 = 0;
  if (*(_BYTE *)(a2[6] + v21))
  {
    result = operator new();
    v24 = a2[9];
    if (v17 == v16 || v24 != 0)
    {
      v26 = *(_DWORD *)(a2[15] + 4 * v21);
      *(_BYTE *)(result + 8) = *(_BYTE *)(a2[6] + v21);
      *(_QWORD *)(result + 16) = v18;
      *(_QWORD *)(result + 24) = v22;
      *(_DWORD *)(result + 32) = v26;
      *(_QWORD *)result = &off_24E6BBEF0;
      *(_QWORD *)(result + 40) = v18;
      *(_QWORD *)(result + 48) = v24 + 8 * v16;
      goto LABEL_23;
    }
LABEL_33:
    std::terminate();
  }
  LOBYTE(v37) = 1;
  if (!*((_BYTE *)a2 + 156))
  {
    dmlc::LogCheckFormat<BOOL,BOOL>(&v38);
    if (v38)
    {
      v28 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
      dmlc::LogMessageFatal::Entry::Init(v28, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/./../common/column_matrix.h");
      v29 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
      v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Check failed: ", 14);
      v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"any_missing == any_missing_", 27);
      v32 = *(char *)(v38 + 23);
      v33 = v32 >= 0 ? v38 : *(_QWORD *)v38;
      v34 = v32 >= 0 ? *(unsigned __int8 *)(v38 + 23) : *(_QWORD *)(v38 + 8);
      v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, v33, v34);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v37);
      v36 = v38;
      v38 = 0;
      if (v36)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v38, v36);
    }
  }
  result = operator new();
  v27 = *(_DWORD *)(a2[15] + 4 * v21);
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2[6] + v21);
  *(_QWORD *)(result + 16) = v18;
  *(_QWORD *)(result + 24) = v22;
  *(_DWORD *)(result + 32) = v27;
  *(_QWORD *)result = &off_24E6BBEA8;
  *(_QWORD *)(result + 40) = a2 + 16;
  *(_QWORD *)(result + 48) = v16;
LABEL_23:
  *a1 = result;
  return result;
}

void sub_220F0806C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  *v10 = 0;
  _Unwind_Resume(exception_object);
}

_QWORD *xgboost::RegTree::NodeCats(xgboost::RegTree *this, _QWORD *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v3 = a2[32];
  v4 = a2[35];
  v5 = a2[36] - v4;
  v7[0] = (a2[33] - v3) >> 2;
  v7[1] = v3;
  if (a3 >= (unint64_t)(v5 >> 4))
    std::terminate();
  return xgboost::common::Span<float,18446744073709551615ul>::subspan(v7, *(_QWORD *)(v4 + 16 * a3), *(_QWORD *)(v4 + 16 * a3 + 8), (unint64_t *)this);
}

uint64_t dmlc::LogCheckFormat<unsigned long,xgboost::common::BinTypeSize>(uint64_t *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[11];
  char v7;
  uint64_t v8;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" (", 2);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" vs. ", 5);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)") ", 2);
  v4 = operator new();
  std::stringbuf::str();
  v6[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  *a1 = v4;
  v6[1] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v8);
}

void sub_220F08248(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x227667068](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void xgboost::common::DenseColumn<unsigned char,true>::~DenseColumn()
{
  JUMPOUT(0x227667068);
}

void xgboost::common::SparseColumn<unsigned char>::~SparseColumn()
{
  JUMPOUT(0x227667068);
}

uint64_t xgboost::common::DenseColumn<unsigned char,true>::GetBinIdx(uint64_t a1, unint64_t a2)
{
  if (((*(_QWORD *)(**(_QWORD **)(a1 + 40) + (((*(_QWORD *)(a1 + 48) + a2) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (*(_BYTE *)(a1 + 48) + a2)) & 1) != 0)
    return 0xFFFFFFFFLL;
  if (*(_QWORD *)(a1 + 16) <= a2)
    std::terminate();
  return *(_DWORD *)(a1 + 32) + *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + a2);
}

uint64_t xgboost::common::SparseColumn<unsigned char>::GetBinIdx(uint64_t a1, unint64_t a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *a3;
  if (*a3 >= v3)
    return 0xFFFFFFFFLL;
  v5 = *(_QWORD *)(a1 + 48);
  while (1)
  {
    v6 = *(_QWORD *)(v5 + 8 * v4);
    if (v6 >= a2)
      break;
    *a3 = ++v4;
    if (v3 == v4)
      return 0xFFFFFFFFLL;
  }
  if (v6 != a2)
    return 0xFFFFFFFFLL;
  if (*(_QWORD *)(a1 + 16) <= v4)
    std::terminate();
  return *(_DWORD *)(a1 + 32) + *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + v4);
}

uint64_t xgboost::common::ColumnMatrix::GetColumn<unsigned short,true>(uint64_t *a1, uint64_t *a2, unsigned int a3)
{
  std::string *Entry;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  int v26;
  int v27;
  std::string *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v37 = 2;
  if (*((_DWORD *)a2 + 38) != 2)
  {
    dmlc::LogCheckFormat<unsigned long,xgboost::common::BinTypeSize>(&v38);
    if (v38)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/./../common/column_matrix.h");
      v7 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: ", 14);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"sizeof(BinIdxType) == bins_type_size_", 37);
      v10 = *(char *)(v38 + 23);
      v11 = v10 >= 0 ? v38 : *(_QWORD *)v38;
      v12 = v10 >= 0 ? *(unsigned __int8 *)(v38 + 23) : *(_QWORD *)(v38 + 8);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v37);
      v14 = v38;
      v38 = 0;
      if (v14)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v38, v14);
    }
  }
  v15 = a2[12];
  v16 = *(_QWORD *)(v15 + 8 * a3);
  v17 = *(_QWORD *)(v15 + 8 * (a3 + 1));
  v18 = v17 - v16;
  v19 = *a2;
  if (v17 != v16 && v19 == 0)
    goto LABEL_33;
  v21 = a3;
  v22 = v19 + v16 * *((unsigned int *)a2 + 38);
  *a1 = 0;
  if (*(_BYTE *)(a2[6] + v21))
  {
    result = operator new();
    v24 = a2[9];
    if (v17 == v16 || v24 != 0)
    {
      v26 = *(_DWORD *)(a2[15] + 4 * v21);
      *(_BYTE *)(result + 8) = *(_BYTE *)(a2[6] + v21);
      *(_QWORD *)(result + 16) = v18;
      *(_QWORD *)(result + 24) = v22;
      *(_DWORD *)(result + 32) = v26;
      *(_QWORD *)result = &off_24E6BBF70;
      *(_QWORD *)(result + 40) = v18;
      *(_QWORD *)(result + 48) = v24 + 8 * v16;
      goto LABEL_23;
    }
LABEL_33:
    std::terminate();
  }
  LOBYTE(v37) = 1;
  if (!*((_BYTE *)a2 + 156))
  {
    dmlc::LogCheckFormat<BOOL,BOOL>(&v38);
    if (v38)
    {
      v28 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
      dmlc::LogMessageFatal::Entry::Init(v28, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/./../common/column_matrix.h");
      v29 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
      v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Check failed: ", 14);
      v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"any_missing == any_missing_", 27);
      v32 = *(char *)(v38 + 23);
      v33 = v32 >= 0 ? v38 : *(_QWORD *)v38;
      v34 = v32 >= 0 ? *(unsigned __int8 *)(v38 + 23) : *(_QWORD *)(v38 + 8);
      v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, v33, v34);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v37);
      v36 = v38;
      v38 = 0;
      if (v36)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v38, v36);
    }
  }
  result = operator new();
  v27 = *(_DWORD *)(a2[15] + 4 * v21);
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2[6] + v21);
  *(_QWORD *)(result + 16) = v18;
  *(_QWORD *)(result + 24) = v22;
  *(_DWORD *)(result + 32) = v27;
  *(_QWORD *)result = &off_24E6BBF28;
  *(_QWORD *)(result + 40) = a2 + 16;
  *(_QWORD *)(result + 48) = v16;
LABEL_23:
  *a1 = result;
  return result;
}

void sub_220F08610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  *v10 = 0;
  _Unwind_Resume(exception_object);
}

void xgboost::common::DenseColumn<unsigned short,true>::~DenseColumn()
{
  JUMPOUT(0x227667068);
}

void xgboost::common::SparseColumn<unsigned short>::~SparseColumn()
{
  JUMPOUT(0x227667068);
}

uint64_t xgboost::common::DenseColumn<unsigned short,true>::GetBinIdx(uint64_t a1, unint64_t a2)
{
  if (((*(_QWORD *)(**(_QWORD **)(a1 + 40) + (((*(_QWORD *)(a1 + 48) + a2) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (*(_BYTE *)(a1 + 48) + a2)) & 1) != 0)
    return 0xFFFFFFFFLL;
  if (*(_QWORD *)(a1 + 16) <= a2)
    std::terminate();
  return *(_DWORD *)(a1 + 32) + *(unsigned __int16 *)(*(_QWORD *)(a1 + 24) + 2 * a2);
}

uint64_t xgboost::common::SparseColumn<unsigned short>::GetBinIdx(uint64_t a1, unint64_t a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *a3;
  if (*a3 >= v3)
    return 0xFFFFFFFFLL;
  v5 = *(_QWORD *)(a1 + 48);
  while (1)
  {
    v6 = *(_QWORD *)(v5 + 8 * v4);
    if (v6 >= a2)
      break;
    *a3 = ++v4;
    if (v3 == v4)
      return 0xFFFFFFFFLL;
  }
  if (v6 != a2)
    return 0xFFFFFFFFLL;
  if (*(_QWORD *)(a1 + 16) <= v4)
    std::terminate();
  return *(_DWORD *)(a1 + 32) + *(unsigned __int16 *)(*(_QWORD *)(a1 + 24) + 2 * v4);
}

uint64_t xgboost::common::ColumnMatrix::GetColumn<unsigned int,true>(uint64_t *a1, uint64_t *a2, unsigned int a3)
{
  std::string *Entry;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  int v26;
  int v27;
  std::string *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v37 = 4;
  if (*((_DWORD *)a2 + 38) != 4)
  {
    dmlc::LogCheckFormat<unsigned long,xgboost::common::BinTypeSize>(&v38);
    if (v38)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/./../common/column_matrix.h");
      v7 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: ", 14);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"sizeof(BinIdxType) == bins_type_size_", 37);
      v10 = *(char *)(v38 + 23);
      v11 = v10 >= 0 ? v38 : *(_QWORD *)v38;
      v12 = v10 >= 0 ? *(unsigned __int8 *)(v38 + 23) : *(_QWORD *)(v38 + 8);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v37);
      v14 = v38;
      v38 = 0;
      if (v14)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v38, v14);
    }
  }
  v15 = a2[12];
  v16 = *(_QWORD *)(v15 + 8 * a3);
  v17 = *(_QWORD *)(v15 + 8 * (a3 + 1));
  v18 = v17 - v16;
  v19 = *a2;
  if (v17 != v16 && v19 == 0)
    goto LABEL_33;
  v21 = a3;
  v22 = v19 + v16 * *((unsigned int *)a2 + 38);
  *a1 = 0;
  if (*(_BYTE *)(a2[6] + v21))
  {
    result = operator new();
    v24 = a2[9];
    if (v17 == v16 || v24 != 0)
    {
      v26 = *(_DWORD *)(a2[15] + 4 * v21);
      *(_BYTE *)(result + 8) = *(_BYTE *)(a2[6] + v21);
      *(_QWORD *)(result + 16) = v18;
      *(_QWORD *)(result + 24) = v22;
      *(_DWORD *)(result + 32) = v26;
      *(_QWORD *)result = &off_24E6BBFF0;
      *(_QWORD *)(result + 40) = v18;
      *(_QWORD *)(result + 48) = v24 + 8 * v16;
      goto LABEL_23;
    }
LABEL_33:
    std::terminate();
  }
  LOBYTE(v37) = 1;
  if (!*((_BYTE *)a2 + 156))
  {
    dmlc::LogCheckFormat<BOOL,BOOL>(&v38);
    if (v38)
    {
      v28 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
      dmlc::LogMessageFatal::Entry::Init(v28, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/./../common/column_matrix.h");
      v29 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
      v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Check failed: ", 14);
      v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"any_missing == any_missing_", 27);
      v32 = *(char *)(v38 + 23);
      v33 = v32 >= 0 ? v38 : *(_QWORD *)v38;
      v34 = v32 >= 0 ? *(unsigned __int8 *)(v38 + 23) : *(_QWORD *)(v38 + 8);
      v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, v33, v34);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v37);
      v36 = v38;
      v38 = 0;
      if (v36)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v38, v36);
    }
  }
  result = operator new();
  v27 = *(_DWORD *)(a2[15] + 4 * v21);
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2[6] + v21);
  *(_QWORD *)(result + 16) = v18;
  *(_QWORD *)(result + 24) = v22;
  *(_DWORD *)(result + 32) = v27;
  *(_QWORD *)result = &off_24E6BBFA8;
  *(_QWORD *)(result + 40) = a2 + 16;
  *(_QWORD *)(result + 48) = v16;
LABEL_23:
  *a1 = result;
  return result;
}

void sub_220F08A14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  *v10 = 0;
  _Unwind_Resume(exception_object);
}

void xgboost::common::DenseColumn<unsigned int,true>::~DenseColumn()
{
  JUMPOUT(0x227667068);
}

void xgboost::common::SparseColumn<unsigned int>::~SparseColumn()
{
  JUMPOUT(0x227667068);
}

uint64_t xgboost::common::DenseColumn<unsigned int,true>::GetBinIdx(uint64_t a1, unint64_t a2)
{
  if (((*(_QWORD *)(**(_QWORD **)(a1 + 40) + (((*(_QWORD *)(a1 + 48) + a2) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (*(_BYTE *)(a1 + 48) + a2)) & 1) != 0)
    return 0xFFFFFFFFLL;
  if (*(_QWORD *)(a1 + 16) <= a2)
    std::terminate();
  return (*(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * a2) + *(_DWORD *)(a1 + 32));
}

uint64_t xgboost::common::SparseColumn<unsigned int>::GetBinIdx(uint64_t a1, unint64_t a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *a3;
  if (*a3 >= v3)
    return 0xFFFFFFFFLL;
  v5 = *(_QWORD *)(a1 + 48);
  while (1)
  {
    v6 = *(_QWORD *)(v5 + 8 * v4);
    if (v6 >= a2)
      break;
    *a3 = ++v4;
    if (v3 == v4)
      return 0xFFFFFFFFLL;
  }
  if (v6 != a2)
    return 0xFFFFFFFFLL;
  if (*(_QWORD *)(a1 + 16) <= v4)
    std::terminate();
  return (*(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v4) + *(_DWORD *)(a1 + 32));
}

uint64_t xgboost::common::ColumnMatrix::GetColumn<unsigned char,false>(uint64_t *a1, uint64_t *a2, unsigned int a3)
{
  std::string *Entry;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  int v26;
  std::string *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;

  v37 = 1;
  if (*((_DWORD *)a2 + 38) != 1)
  {
    dmlc::LogCheckFormat<unsigned long,xgboost::common::BinTypeSize>(&v38);
    if (v38)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/./../common/column_matrix.h");
      v7 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: ", 14);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"sizeof(BinIdxType) == bins_type_size_", 37);
      v10 = *(char *)(v38 + 23);
      v11 = v10 >= 0 ? v38 : *(_QWORD *)v38;
      v12 = v10 >= 0 ? *(unsigned __int8 *)(v38 + 23) : *(_QWORD *)(v38 + 8);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v37);
      v14 = v38;
      v38 = 0;
      if (v14)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v38, v14);
    }
  }
  v15 = a2[12];
  v16 = *(_QWORD *)(v15 + 8 * a3);
  v17 = *(_QWORD *)(v15 + 8 * (a3 + 1));
  v18 = v17 - v16;
  v19 = *a2;
  if (v17 != v16 && v19 == 0)
    goto LABEL_33;
  v21 = a3;
  v22 = v19 + v16 * *((unsigned int *)a2 + 38);
  *a1 = 0;
  if (*(_BYTE *)(a2[6] + v21))
  {
    result = operator new();
    v24 = a2[9];
    if (v17 == v16 || v24 != 0)
    {
      v26 = *(_DWORD *)(a2[15] + 4 * v21);
      *(_BYTE *)(result + 8) = *(_BYTE *)(a2[6] + v21);
      *(_QWORD *)(result + 16) = v18;
      *(_QWORD *)(result + 24) = v22;
      *(_DWORD *)(result + 32) = v26;
      *(_QWORD *)result = &off_24E6BBEF0;
      *(_QWORD *)(result + 40) = v18;
      *(_QWORD *)(result + 48) = v24 + 8 * v16;
      goto LABEL_32;
    }
LABEL_33:
    std::terminate();
  }
  LOBYTE(v37) = 0;
  if (*((_BYTE *)a2 + 156))
  {
    dmlc::LogCheckFormat<BOOL,BOOL>(&v38);
    if (v38)
    {
      v27 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
      dmlc::LogMessageFatal::Entry::Init(v27, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/./../common/column_matrix.h");
      v28 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
      v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Check failed: ", 14);
      v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"any_missing == any_missing_", 27);
      v31 = *(char *)(v38 + 23);
      v32 = v31 >= 0 ? v38 : *(_QWORD *)v38;
      v33 = v31 >= 0 ? *(unsigned __int8 *)(v38 + 23) : *(_QWORD *)(v38 + 8);
      v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, v32, v33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v37);
      v35 = v38;
      v38 = 0;
      if (v35)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v38, v35);
    }
  }
  result = operator new();
  v36 = *(_DWORD *)(a2[15] + 4 * v21);
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2[6] + v21);
  *(_QWORD *)(result + 16) = v18;
  *(_QWORD *)(result + 24) = v22;
  *(_DWORD *)(result + 32) = v36;
  *(_QWORD *)result = &off_24E6BC028;
  *(_QWORD *)(result + 40) = a2 + 16;
  *(_QWORD *)(result + 48) = v16;
LABEL_32:
  *a1 = result;
  return result;
}

void sub_220F08E10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  *v10 = 0;
  _Unwind_Resume(exception_object);
}

void xgboost::common::DenseColumn<unsigned char,false>::~DenseColumn()
{
  JUMPOUT(0x227667068);
}

uint64_t xgboost::common::ColumnMatrix::GetColumn<unsigned short,false>(uint64_t *a1, uint64_t *a2, unsigned int a3)
{
  std::string *Entry;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  int v26;
  std::string *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;

  v37 = 2;
  if (*((_DWORD *)a2 + 38) != 2)
  {
    dmlc::LogCheckFormat<unsigned long,xgboost::common::BinTypeSize>(&v38);
    if (v38)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/./../common/column_matrix.h");
      v7 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: ", 14);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"sizeof(BinIdxType) == bins_type_size_", 37);
      v10 = *(char *)(v38 + 23);
      v11 = v10 >= 0 ? v38 : *(_QWORD *)v38;
      v12 = v10 >= 0 ? *(unsigned __int8 *)(v38 + 23) : *(_QWORD *)(v38 + 8);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v37);
      v14 = v38;
      v38 = 0;
      if (v14)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v38, v14);
    }
  }
  v15 = a2[12];
  v16 = *(_QWORD *)(v15 + 8 * a3);
  v17 = *(_QWORD *)(v15 + 8 * (a3 + 1));
  v18 = v17 - v16;
  v19 = *a2;
  if (v17 != v16 && v19 == 0)
    goto LABEL_33;
  v21 = a3;
  v22 = v19 + v16 * *((unsigned int *)a2 + 38);
  *a1 = 0;
  if (*(_BYTE *)(a2[6] + v21))
  {
    result = operator new();
    v24 = a2[9];
    if (v17 == v16 || v24 != 0)
    {
      v26 = *(_DWORD *)(a2[15] + 4 * v21);
      *(_BYTE *)(result + 8) = *(_BYTE *)(a2[6] + v21);
      *(_QWORD *)(result + 16) = v18;
      *(_QWORD *)(result + 24) = v22;
      *(_DWORD *)(result + 32) = v26;
      *(_QWORD *)result = &off_24E6BBF70;
      *(_QWORD *)(result + 40) = v18;
      *(_QWORD *)(result + 48) = v24 + 8 * v16;
      goto LABEL_32;
    }
LABEL_33:
    std::terminate();
  }
  LOBYTE(v37) = 0;
  if (*((_BYTE *)a2 + 156))
  {
    dmlc::LogCheckFormat<BOOL,BOOL>(&v38);
    if (v38)
    {
      v27 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
      dmlc::LogMessageFatal::Entry::Init(v27, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/./../common/column_matrix.h");
      v28 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
      v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Check failed: ", 14);
      v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"any_missing == any_missing_", 27);
      v31 = *(char *)(v38 + 23);
      v32 = v31 >= 0 ? v38 : *(_QWORD *)v38;
      v33 = v31 >= 0 ? *(unsigned __int8 *)(v38 + 23) : *(_QWORD *)(v38 + 8);
      v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, v32, v33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v37);
      v35 = v38;
      v38 = 0;
      if (v35)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v38, v35);
    }
  }
  result = operator new();
  v36 = *(_DWORD *)(a2[15] + 4 * v21);
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2[6] + v21);
  *(_QWORD *)(result + 16) = v18;
  *(_QWORD *)(result + 24) = v22;
  *(_DWORD *)(result + 32) = v36;
  *(_QWORD *)result = &off_24E6BC060;
  *(_QWORD *)(result + 40) = a2 + 16;
  *(_QWORD *)(result + 48) = v16;
LABEL_32:
  *a1 = result;
  return result;
}

void sub_220F0912C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  *v10 = 0;
  _Unwind_Resume(exception_object);
}

void xgboost::common::DenseColumn<unsigned short,false>::~DenseColumn()
{
  JUMPOUT(0x227667068);
}

uint64_t xgboost::common::ColumnMatrix::GetColumn<unsigned int,false>(uint64_t *a1, uint64_t *a2, unsigned int a3)
{
  std::string *Entry;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  int v26;
  std::string *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;

  v37 = 4;
  if (*((_DWORD *)a2 + 38) != 4)
  {
    dmlc::LogCheckFormat<unsigned long,xgboost::common::BinTypeSize>(&v38);
    if (v38)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/./../common/column_matrix.h");
      v7 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: ", 14);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"sizeof(BinIdxType) == bins_type_size_", 37);
      v10 = *(char *)(v38 + 23);
      v11 = v10 >= 0 ? v38 : *(_QWORD *)v38;
      v12 = v10 >= 0 ? *(unsigned __int8 *)(v38 + 23) : *(_QWORD *)(v38 + 8);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v37);
      v14 = v38;
      v38 = 0;
      if (v14)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v38, v14);
    }
  }
  v15 = a2[12];
  v16 = *(_QWORD *)(v15 + 8 * a3);
  v17 = *(_QWORD *)(v15 + 8 * (a3 + 1));
  v18 = v17 - v16;
  v19 = *a2;
  if (v17 != v16 && v19 == 0)
    goto LABEL_33;
  v21 = a3;
  v22 = v19 + v16 * *((unsigned int *)a2 + 38);
  *a1 = 0;
  if (*(_BYTE *)(a2[6] + v21))
  {
    result = operator new();
    v24 = a2[9];
    if (v17 == v16 || v24 != 0)
    {
      v26 = *(_DWORD *)(a2[15] + 4 * v21);
      *(_BYTE *)(result + 8) = *(_BYTE *)(a2[6] + v21);
      *(_QWORD *)(result + 16) = v18;
      *(_QWORD *)(result + 24) = v22;
      *(_DWORD *)(result + 32) = v26;
      *(_QWORD *)result = &off_24E6BBFF0;
      *(_QWORD *)(result + 40) = v18;
      *(_QWORD *)(result + 48) = v24 + 8 * v16;
      goto LABEL_32;
    }
LABEL_33:
    std::terminate();
  }
  LOBYTE(v37) = 0;
  if (*((_BYTE *)a2 + 156))
  {
    dmlc::LogCheckFormat<BOOL,BOOL>(&v38);
    if (v38)
    {
      v27 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
      dmlc::LogMessageFatal::Entry::Init(v27, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/./../common/column_matrix.h");
      v28 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
      v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Check failed: ", 14);
      v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"any_missing == any_missing_", 27);
      v31 = *(char *)(v38 + 23);
      v32 = v31 >= 0 ? v38 : *(_QWORD *)v38;
      v33 = v31 >= 0 ? *(unsigned __int8 *)(v38 + 23) : *(_QWORD *)(v38 + 8);
      v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, v32, v33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v37);
      v35 = v38;
      v38 = 0;
      if (v35)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v38, v35);
    }
  }
  result = operator new();
  v36 = *(_DWORD *)(a2[15] + 4 * v21);
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2[6] + v21);
  *(_QWORD *)(result + 16) = v18;
  *(_QWORD *)(result + 24) = v22;
  *(_DWORD *)(result + 32) = v36;
  *(_QWORD *)result = &off_24E6BC098;
  *(_QWORD *)(result + 40) = a2 + 16;
  *(_QWORD *)(result + 48) = v16;
LABEL_32:
  *a1 = result;
  return result;
}

void sub_220F09448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  *v10 = 0;
  _Unwind_Resume(exception_object);
}

void xgboost::common::DenseColumn<unsigned int,false>::~DenseColumn()
{
  JUMPOUT(0x227667068);
}

void std::default_delete<xgboost::tree::QuantileHistMaker::Builder<float>>::operator()[abi:ne180100](uint64_t a1)
{
  void *v2;
  void **v3;

  std::unique_ptr<xgboost::common::Monitor>::reset[abi:ne180100]((char ***)(a1 + 128));
  std::unique_ptr<xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>>::reset[abi:ne180100]((uint64_t *)(a1 + 104));
  v3 = (void **)(a1 + 64);
  std::vector<xgboost::tree::ApproxRowPartitioner>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::unique_ptr<xgboost::tree::HistEvaluator<float,xgboost::tree::CPUExpandEntry>>::reset[abi:ne180100]((uint64_t *)(a1 + 56), 0);
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](a1 + 16);
  JUMPOUT(0x227667068);
}

char **std::unique_ptr<xgboost::common::Monitor>::reset[abi:ne180100](char ***a1)
{
  char **result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    xgboost::common::Monitor::~Monitor(result);
    JUMPOUT(0x227667068);
  }
  return result;
}

uint64_t std::unique_ptr<xgboost::tree::HistogramBuilder<float,xgboost::tree::CPUExpandEntry>>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    xgboost::tree::HistogramBuilder<double,xgboost::tree::CPUExpandEntry>::~HistogramBuilder(result);
    JUMPOUT(0x227667068);
  }
  return result;
}

char *std::vector<xgboost::detail::GradientPairInternal<float>>::__assign_with_size[abi:ne180100]<xgboost::detail::GradientPairInternal<float>*,xgboost::detail::GradientPairInternal<float>*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<xgboost::detail::GradientPairInternal<float>>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

uint64_t std::vector<xgboost::tree::HistRowPartitioner>::__emplace_back_slow_path<unsigned long,unsigned long const&,int>(int64x2_t *a1, unint64_t a2, uint64_t a3, int a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  char *v23;
  int64x2_t v24;
  char *v25;
  int64x2_t *v26;

  v4 = 0xF0F0F0F0F0F0F0F1 * ((a1->i64[1] - a1->i64[0]) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x1E1E1E1E1E1E1E1)
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  if (0xE1E1E1E1E1E1E1E2 * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v5)
    v5 = 0xE1E1E1E1E1E1E1E2 * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  if (0xF0F0F0F0F0F0F0F1 * ((a1[1].i64[0] - a1->i64[0]) >> 3) >= 0xF0F0F0F0F0F0F0)
    v10 = 0x1E1E1E1E1E1E1E1;
  else
    v10 = v5;
  v26 = a1 + 1;
  if (v10)
  {
    if (v10 > 0x1E1E1E1E1E1E1E1)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v11 = (char *)operator new(136 * v10);
  }
  else
  {
    v11 = 0;
  }
  v23 = v11;
  v24.i64[0] = (uint64_t)&v11[136 * v4];
  v25 = &v11[136 * v10];
  xgboost::tree::HistRowPartitioner::HistRowPartitioner((xgboost::tree::HistRowPartitioner *)v24.i64[0], a2, a3, a4);
  v12 = v24.i64[0];
  v13 = v24.i64[0] + 136;
  v24.i64[1] = v24.i64[0] + 136;
  v15 = a1->i64[0];
  v14 = a1->u64[1];
  if (v14 == a1->i64[0])
  {
    v20 = vdupq_n_s64(v14);
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = v12 + v16;
      v18 = v14 + v16;
      *(_QWORD *)(v17 - 136) = 0;
      *(_QWORD *)(v17 - 128) = 0;
      *(_QWORD *)(v17 - 120) = 0;
      *(_OWORD *)(v17 - 136) = *(_OWORD *)(v14 + v16 - 136);
      *(_QWORD *)(v17 - 120) = *(_QWORD *)(v14 + v16 - 120);
      *(_QWORD *)(v18 - 136) = 0;
      *(_QWORD *)(v18 - 128) = 0;
      *(_QWORD *)(v18 - 120) = 0;
      *(_QWORD *)(v17 - 112) = 0;
      *(_QWORD *)(v17 - 104) = 0;
      *(_QWORD *)(v17 - 96) = 0;
      *(_OWORD *)(v17 - 112) = *(_OWORD *)(v14 + v16 - 112);
      *(_QWORD *)(v17 - 96) = *(_QWORD *)(v14 + v16 - 96);
      *(_QWORD *)(v18 - 112) = 0;
      *(_QWORD *)(v18 - 104) = 0;
      *(_QWORD *)(v18 - 96) = 0;
      *(_QWORD *)(v17 - 88) = 0;
      *(_QWORD *)(v17 - 80) = 0;
      *(_QWORD *)(v17 - 72) = 0;
      *(_OWORD *)(v17 - 88) = *(_OWORD *)(v14 + v16 - 88);
      *(_QWORD *)(v17 - 72) = *(_QWORD *)(v14 + v16 - 72);
      *(_QWORD *)(v18 - 80) = 0;
      *(_QWORD *)(v18 - 72) = 0;
      *(_QWORD *)(v18 - 88) = 0;
      v19 = *(_QWORD *)(v14 + v16 - 64);
      *(_QWORD *)(v17 - 48) = 0;
      *(_QWORD *)(v17 - 40) = 0;
      *(_QWORD *)(v17 - 64) = v19;
      *(_QWORD *)(v17 - 56) = 0;
      *(_OWORD *)(v17 - 56) = *(_OWORD *)(v14 + v16 - 56);
      *(_QWORD *)(v17 - 40) = *(_QWORD *)(v14 + v16 - 40);
      *(_QWORD *)(v18 - 56) = 0;
      *(_QWORD *)(v18 - 48) = 0;
      *(_QWORD *)(v18 - 40) = 0;
      *(_QWORD *)(v17 - 24) = 0;
      *(_QWORD *)(v17 - 16) = 0;
      *(_QWORD *)(v17 - 32) = 0;
      *(_OWORD *)(v17 - 32) = *(_OWORD *)(v14 + v16 - 32);
      *(_QWORD *)(v17 - 16) = *(_QWORD *)(v14 + v16 - 16);
      *(_QWORD *)(v18 - 32) = 0;
      *(_QWORD *)(v18 - 24) = 0;
      *(_QWORD *)(v18 - 16) = 0;
      *(_QWORD *)(v17 - 8) = *(_QWORD *)(v14 + v16 - 8);
      v16 -= 136;
    }
    while (v14 + v16 != v15);
    v20 = *a1;
    v13 = v24.i64[1];
    v12 += v16;
  }
  a1->i64[0] = v12;
  a1->i64[1] = v13;
  v24 = v20;
  v21 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v25;
  v25 = v21;
  v23 = (char *)v20.i64[0];
  std::__split_buffer<xgboost::tree::ApproxRowPartitioner>::~__split_buffer((uint64_t)&v23);
  return v13;
}

void sub_220F098D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<xgboost::tree::ApproxRowPartitioner>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

xgboost::tree::HistRowPartitioner *xgboost::tree::HistRowPartitioner::HistRowPartitioner(xgboost::tree::HistRowPartitioner *this, unint64_t a2, uint64_t a3, int a4)
{
  xgboost::common::RowSetCollection *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::exception_ptr v13;
  std::mutex v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  *((_OWORD *)this + 5) = 0u;
  v8 = (xgboost::tree::HistRowPartitioner *)((char *)this + 80);
  *((_QWORD *)this + 16) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  v13.__ptr_ = 0;
  v14.__m_.__sig = 850045863;
  memset(v14.__m_.__opaque, 0, sizeof(v14.__m_.__opaque));
  std::vector<unsigned long>::resize((uint64_t)this + 80, a2);
  if (a2 % a4)
    v9 = a2 / a4 + 1;
  else
    v9 = a2 / a4;
  if (a2 < v9)
    v9 = a2;
  if (v9)
  {
    v10 = *(_QWORD **)v8;
    v11 = a3;
    do
    {
      *v10++ = v11++;
      --v9;
    }
    while (v9);
  }
  xgboost::common::RowSetCollection::Init(v8);
  *((_QWORD *)this + 16) = a3;
  std::mutex::~mutex(&v14);
  std::exception_ptr::~exception_ptr(&v13);
  return this;
}

void sub_220F099F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  uint64_t v9;
  xgboost::common::Index *v10;
  std::mutex *v11;

  std::mutex::~mutex(v11);
  std::exception_ptr::~exception_ptr(&a9);
  xgboost::common::Index::~Index(v10);
  xgboost::common::PartitionBuilder<2048ul>::~PartitionBuilder(v9);
  _Unwind_Resume(a1);
}

double std::__function::__func<xgboost::tree::$_0,std::allocator<xgboost::tree::$_0>,xgboost::TreeUpdater * ()(xgboost::ObjInfo)>::operator()(uint64_t a1, __int16 *a2)
{
  __int16 v2;
  uint64_t v3;
  double result;

  v2 = *a2;
  v3 = operator new();
  *(_QWORD *)v3 = off_24E6BBE38;
  *(_QWORD *)(v3 + 8) = 0;
  *(_BYTE *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 52) = 4;
  result = 0.0;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_QWORD *)(v3 + 160) = 0;
  *(_QWORD *)(v3 + 168) = 0;
  *(_WORD *)(v3 + 176) = v2;
  return result;
}

uint64_t xgboost::Learner::AllowLazyCheckPoint(xgboost::Learner *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 64))(*((_QWORD *)this + 4));
}

void xgboost::Learner::~Learner(xgboost::Learner *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)this = off_24E6BC150;
  *((_QWORD *)this + 1) = &unk_24E6BC258;
  *((_QWORD *)this + 2) = &unk_24E6BC288;
  v2 = (_QWORD *)*((_QWORD *)this + 5);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 6);
    v4 = (void *)*((_QWORD *)this + 5);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v2;
    operator delete(v4);
  }
  v7 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

uint64_t xgboost::LearnerModelParam::LearnerModelParam(uint64_t a1, _DWORD *a2, __int16 a3, float a4)
{
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  std::string *Entry;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  char v17;

  *(float *)a1 = a4;
  v5 = a2[1];
  *(_WORD *)(a1 + 12) = a3;
  v6 = a2[2];
  if (v6 <= 1)
    v7 = 1;
  else
    v7 = a2[2];
  v8 = a2[7];
  if (v7 <= v8)
    v9 = a2[7];
  else
    v9 = v7;
  *(_DWORD *)(a1 + 4) = v5;
  *(_DWORD *)(a1 + 8) = v9;
  if (v6 >= 2 && v8 >= 2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
    v13 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Check failed: n_classes <= 1 || n_targets <= 1", 46);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Multi-class multi-output is not yet supported. n_classes:", 57);
    v16 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", n_targets:", 12);
    std::ostream::operator<<();
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v17);
  }
  return a1;
}

{
  return xgboost::LearnerModelParam::LearnerModelParam(a1, a2, a3, a4);
}

void sub_220F09CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

double xgboost::GenericParameter::GenericParameter(xgboost::GenericParameter *this)
{
  double result;

  *(_BYTE *)this = 0;
  *((_DWORD *)this + 1) = -1;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = 0;
  result = NAN;
  *(_QWORD *)((char *)this + 20) = 0xFFFFFFFF00000000;
  *((_WORD *)this + 14) = 0;
  return result;
}

{
  double result;

  *(_BYTE *)this = 0;
  *((_DWORD *)this + 1) = -1;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = 0;
  result = NAN;
  *(_QWORD *)((char *)this + 20) = 0xFFFFFFFF00000000;
  *((_WORD *)this + 14) = 0;
  return result;
}

void xgboost::GenericParameter::ConfigureGpuId(xgboost::GenericParameter *this)
{
  std::string v2;
  std::string *v3;
  std::string *v4;
  std::string *v5;
  _BYTE v6[24];
  std::string **v7;
  char v8;
  void *v9[2];
  char v10;
  std::string __p;
  __int128 v12;

  *(_QWORD *)&v12 = *MEMORY[0x24BDAC8D0];
  std::to_string(&v2, -1);
  std::string::basic_string[abi:ne180100]<0>(v9, "gpu_id");
  __p = v2;
  memset(&v2, 0, sizeof(v2));
  v4 = 0;
  v5 = 0;
  v3 = 0;
  v7 = &v3;
  v8 = 0;
  v3 = (std::string *)operator new(0x30uLL);
  v4 = v3;
  v5 = v3 + 2;
  v4 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)&v5, (__int128 *)v9, &v12, v3);
  xgboost::XGBoostParameter<xgboost::GenericParameter>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::GenericParameter *)v6, this, (uint64_t *)&v3);
  v7 = (std::string **)v6;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  v7 = &v3;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v10 < 0)
    operator delete(v9[0]);
  if (SHIBYTE(v2.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v2.__r_.__value_.__l.__data_);
}

void sub_220F09E7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  std::pair<std::string,std::string>::~pair((uint64_t)&a23);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void xgboost::XGBoostParameter<xgboost::GenericParameter>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>(xgboost::GenericParameter *a1, _BYTE *a2, uint64_t *a3)
{
  if (*a2)
  {
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    *((_QWORD *)a1 + 2) = 0;
    xgboost::GenericParameter::__MANAGER__(a1);
    dmlc::parameter::ParamManager::RunUpdate<std::__wrap_iter<std::pair<std::string,std::string> const*>>(&stru_253F36BF0, (uint64_t)a2, *a3, a3[1], 0, (uint64_t *)a1, 0);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    *((_QWORD *)a1 + 2) = 0;
    xgboost::GenericParameter::__MANAGER__(a1);
    dmlc::parameter::ParamManager::RunInit<std::__wrap_iter<std::pair<std::string,std::string> const*>>(&stru_253F36BF0, (uint64_t)a2, *a3, a3[1], (uint64_t *)a1, 0);
    *a2 = 1;
  }
}

void sub_220F09F6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t xgboost::GenericParameter::Threads(xgboost::GenericParameter *this)
{
  return 1;
}

unint64_t xgboost::Learner::Create(_QWORD **a1)
{
  unint64_t v2;
  _QWORD *v4[3];
  void **v5;

  v2 = operator new();
  memset(v4, 0, sizeof(v4));
  std::vector<std::shared_ptr<xgboost::DMatrix>>::__init_with_size[abi:ne180100]<std::shared_ptr<xgboost::DMatrix>*,std::shared_ptr<xgboost::DMatrix>*>((char *)v4, *a1, a1[1], ((char *)a1[1] - (char *)*a1) >> 4);
  xgboost::LearnerImpl::LearnerImpl(v2, v4);
  v5 = (void **)v4;
  std::vector<std::shared_ptr<xgboost::DMatrix>>::__destroy_vector::operator()[abi:ne180100](&v5);
  return v2;
}

void sub_220F0A00C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  uint64_t v12;

  a12 = (void **)&a9;
  std::vector<std::shared_ptr<xgboost::DMatrix>>::__destroy_vector::operator()[abi:ne180100](&a12);
  MEMORY[0x227667068](v12, 0x10B3C4034DAC208);
  _Unwind_Resume(a1);
}

unint64_t xgboost::LearnerImpl::LearnerImpl(unint64_t a1, _QWORD **a2)
{
  _QWORD *v4[3];
  void **v5;

  memset(v4, 0, sizeof(v4));
  std::vector<std::shared_ptr<xgboost::DMatrix>>::__init_with_size[abi:ne180100]<std::shared_ptr<xgboost::DMatrix>*,std::shared_ptr<xgboost::DMatrix>*>((char *)v4, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  xgboost::LearnerIO::LearnerIO(a1, v4);
  v5 = (void **)v4;
  std::vector<std::shared_ptr<xgboost::DMatrix>>::__destroy_vector::operator()[abi:ne180100](&v5);
  *(_QWORD *)a1 = &off_24E6BC300;
  *(_QWORD *)(a1 + 8) = &unk_24E6BC430;
  *(_QWORD *)(a1 + 16) = &unk_24E6BC460;
  xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::HostDeviceVector((_QWORD *)(a1 + 616), 0, 0.0, 0.0);
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_DWORD *)(a1 + 656) = 1065353216;
  return a1;
}

void sub_220F0A0EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  xgboost::LearnerIO *v12;

  xgboost::LearnerIO::~LearnerIO(v12);
  _Unwind_Resume(a1);
}

unint64_t xgboost::LearnerIO::LearnerIO(unint64_t a1, _QWORD **a2)
{
  uint64_t **v3;
  char *v4;
  uint64_t *v5;
  uint64_t *v6;
  int8x8_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD **v13;
  uint64_t **v14;
  uint64_t *v15;
  std::string *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23[3];
  std::string __str;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v21 = 0;
  v22 = 0;
  v20 = 0;
  std::vector<std::shared_ptr<xgboost::DMatrix>>::__init_with_size[abi:ne180100]<std::shared_ptr<xgboost::DMatrix>*,std::shared_ptr<xgboost::DMatrix>*>((char *)&v20, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  *(_OWORD *)(a1 + 49) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 68) = -1;
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 84) = 0xFFFFFFFF00000000;
  *(_WORD *)(a1 + 92) = 0;
  *(_QWORD *)a1 = off_24E6BC668;
  *(_QWORD *)(a1 + 8) = &unk_24E6BC788;
  *(_QWORD *)(a1 + 16) = &unk_24E6BC7B8;
  *(_QWORD *)(a1 + 96) = 850045863;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 160) = 1;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 168) = a1 + 176;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 192) = a1 + 200;
  *(_QWORD *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  xgboost::common::Monitor::Monitor((std::chrono::steady_clock::time_point *)(a1 + 264));
  *(_OWORD *)(a1 + 348) = 0u;
  *(_OWORD *)(a1 + 444) = 0u;
  *(_OWORD *)(a1 + 428) = 0u;
  *(_OWORD *)(a1 + 412) = 0u;
  *(_OWORD *)(a1 + 396) = 0u;
  *(_OWORD *)(a1 + 380) = 0u;
  *(_OWORD *)(a1 + 364) = 0u;
  *(_OWORD *)(a1 + 332) = 0u;
  *(_QWORD *)(a1 + 460) = 0x3F00000000000000;
  *(_DWORD *)(a1 + 328) = 1056964608;
  *(_DWORD *)(a1 + 348) = 1;
  *(_QWORD *)(a1 + 352) = 0x100000006;
  *(_WORD *)(a1 + 476) = 0;
  *(_QWORD *)(a1 + 468) = 0;
  *(_BYTE *)(a1 + 480) = 0;
  *(_DWORD *)(a1 + 484) = 0;
  *(_BYTE *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 560) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  std::string::basic_string[abi:ne180100]<0>(&__str, "Learner");
  std::string::operator=((std::string *)(a1 + 264), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v3 = (uint64_t **)dmlc::ThreadLocalStore<std::map<xgboost::Learner const*,xgboost::PredictionContainer>>::Get();
  v23[0] = a1;
  v4 = std::__tree<std::__value_type<xgboost::Learner const*,xgboost::PredictionContainer>,std::__map_value_compare<xgboost::Learner const*,std::__value_type<xgboost::Learner const*,xgboost::PredictionContainer>,std::less<xgboost::Learner const*>,true>,std::allocator<std::__value_type<xgboost::Learner const*,xgboost::PredictionContainer>>>::__emplace_unique_key_args<xgboost::Learner const*,std::piecewise_construct_t const&,std::tuple<xgboost::Learner const*&&>,std::tuple<>>(v3, a1, v23);
  v5 = v20;
  v6 = v21;
  if (v20 != v21)
  {
    v7 = (int8x8_t *)(v4 + 40);
    do
    {
      v8 = (std::__shared_weak_count *)v5[1];
      v23[0] = *v5;
      v23[1] = (uint64_t)v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      xgboost::PredictionContainer::Cache(v7, v23, -1);
      if (v8)
      {
        v11 = (unint64_t *)&v8->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v5 += 2;
    }
    while (v5 != v6);
  }
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v20;
  std::vector<std::shared_ptr<xgboost::DMatrix>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  *(_QWORD *)a1 = off_24E6BC4D8;
  *(_QWORD *)(a1 + 8) = &unk_24E6BC608;
  *(_QWORD *)(a1 + 16) = &unk_24E6BC638;
  std::string::basic_string[abi:ne180100]<0>(&__str, "num_round");
  v13 = (_QWORD **)(a1 + 568);
  *(_QWORD *)(a1 + 584) = 0;
  v14 = (uint64_t **)(a1 + 576);
  *(_QWORD *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 568) = a1 + 576;
  v15 = (uint64_t *)operator new(0x38uLL);
  v16 = (std::string *)(v15 + 4);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v16, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
    v17 = *v13;
  }
  else
  {
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
    v15[6] = __str.__r_.__value_.__r.__words[2];
    v17 = (_QWORD *)(a1 + 576);
  }
  *v15 = 0;
  v15[1] = 0;
  v15[2] = (uint64_t)v14;
  *v14 = v15;
  v18 = (_QWORD *)*v17;
  if (v18)
    *v13 = v18;
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v15, v15);
  ++*(_QWORD *)(a1 + 584);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 592), "CONFIG-offset:");
  return a1;
}

void sub_220F0A45C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  xgboost::LearnerConfiguration *v20;
  uint64_t v21;
  void *v22;
  char **v23;

  operator delete(v22);
  std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::destroy(v21, *v23);
  if (a20 < 0)
    operator delete(__p);
  xgboost::LearnerConfiguration::~LearnerConfiguration(v20);
  _Unwind_Resume(a1);
}

void xgboost::LearnerIO::~LearnerIO(xgboost::LearnerIO *this)
{
  *(_QWORD *)this = off_24E6BC4D8;
  *((_QWORD *)this + 1) = &unk_24E6BC608;
  *((_QWORD *)this + 2) = &unk_24E6BC638;
  if (*((char *)this + 615) < 0)
    operator delete(*((void **)this + 74));
  std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::destroy((uint64_t)this + 568, *((char **)this + 72));
  xgboost::LearnerConfiguration::~LearnerConfiguration(this);
}

void xgboost::LearnerImpl::~LearnerImpl(xgboost::LearnerImpl *this)
{
  xgboost::LearnerImpl::~LearnerImpl(this);
  JUMPOUT(0x227667068);
}

{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  BOOL v18;

  *(_QWORD *)this = &off_24E6BC300;
  *((_QWORD *)this + 1) = &unk_24E6BC430;
  *((_QWORD *)this + 2) = &unk_24E6BC460;
  v2 = (_QWORD *)dmlc::ThreadLocalStore<std::map<xgboost::Learner const*,xgboost::XGBAPIThreadLocalEntry>>::Get();
  v4 = v2 + 1;
  v3 = (uint64_t *)v2[1];
  if (v3)
  {
    v5 = v2 + 1;
    v6 = (_QWORD *)v2[1];
    do
    {
      v7 = v6[4];
      v8 = v7 >= (unint64_t)this;
      if (v7 >= (unint64_t)this)
        v9 = v6;
      else
        v9 = v6 + 1;
      if (v8)
        v5 = v6;
      v6 = (_QWORD *)*v9;
    }
    while (*v9);
    if (v5 != v4 && v5[4] <= (unint64_t)this)
    {
      v10 = v2 + 1;
      v11 = (_QWORD *)v2[1];
      do
      {
        v12 = v11[4];
        v13 = v12 >= (unint64_t)this;
        if (v12 >= (unint64_t)this)
          v14 = v11;
        else
          v14 = v11 + 1;
        if (v13)
          v10 = v11;
        v11 = (_QWORD *)*v14;
      }
      while (*v14);
      if (v10 != v4 && v10[4] <= (unint64_t)this)
      {
        v15 = (uint64_t *)v10[1];
        if (v15)
        {
          do
          {
            v16 = v15;
            v15 = (uint64_t *)*v15;
          }
          while (v15);
        }
        else
        {
          v17 = v10;
          do
          {
            v16 = (uint64_t *)v17[2];
            v18 = *v16 == (_QWORD)v17;
            v17 = v16;
          }
          while (!v18);
        }
        if ((uint64_t *)*v2 == v10)
          *v2 = v16;
        --v2[2];
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v3, v10);
        xgboost::XGBAPIThreadLocalEntry::~XGBAPIThreadLocalEntry((xgboost::XGBAPIThreadLocalEntry *)(v10 + 5));
        operator delete(v10);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::__unordered_map_hasher<xgboost::DMatrix *,std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::hash<xgboost::DMatrix *>,std::equal_to<xgboost::DMatrix *>,true>,std::__unordered_map_equal<xgboost::DMatrix *,std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::equal_to<xgboost::DMatrix *>,std::hash<xgboost::DMatrix *>,true>,std::allocator<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>>>::~__hash_table((uint64_t)this + 624);
  xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>>::~HostDeviceVector((uint64_t *)this + 77);
  *(_QWORD *)this = off_24E6BC4D8;
  *((_QWORD *)this + 1) = &unk_24E6BC608;
  *((_QWORD *)this + 2) = &unk_24E6BC638;
  if (*((char *)this + 615) < 0)
    operator delete(*((void **)this + 74));
  std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::destroy((uint64_t)this + 568, *((char **)this + 72));
  xgboost::LearnerConfiguration::~LearnerConfiguration(this);
}

void xgboost::LearnerIO::LoadModel(xgboost::LearnerIO *this, const xgboost::Json *a2)
{
  unint64_t v4;
  __n128 v5;
  _DWORD **v6;
  char *v7;
  uint64_t v8;
  _DWORD **v9;
  char *v10;
  uint64_t v11;
  _DWORD **v12;
  char *v13;
  _OWORD *v14;
  _DWORD **v15;
  char *v16;
  _OWORD *v17;
  xgboost::LearnerModelParamLegacy *v18;
  xgboost::LearnerModelParamLegacy *v19;
  char *v20;
  _OWORD *v21;
  _DWORD **v22;
  char *v23;
  float *v24;
  std::string *v25;
  const char *v26;
  _QWORD *v27;
  _DWORD **v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _DWORD **v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD **v37;
  _QWORD *v38;
  const void **v39;
  char *v40;
  uint64_t *v41;
  const void **v42;
  const void ***v43;
  BOOL v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  _DWORD **v48;
  _DWORD **v49;
  uint64_t v50;
  char *v51;
  __int128 v52;
  uint64_t v53;
  _QWORD *v54;
  _DWORD **v55;
  _DWORD **v56;
  uint64_t v57;
  char *v58;
  __int128 v59;
  std::string *Entry;
  _QWORD *v61;
  _QWORD *v62;
  _BYTE v63[24];
  _BYTE v64[24];
  void *p_p_p;
  char v66;
  char v67;
  void *p_p;
  void *v69;
  char *v70;
  std::string __p;
  void **v72;
  std::string v73;
  std::string v74;
  __int128 v75[14];
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(*(_QWORD *)a2 + 12) != 3)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v73);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
    v61 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v73);
    v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"Check failed: IsA<Object>(in)", 29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v73);
  }
  v4 = xgboost::Version::Load(a2, a2);
  if ((_DWORD)v4 == 1
    && SHIDWORD(v4) <= 5
    && *(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst(v5) + 4) >= 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
    xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)&v73, (uint64_t)&__p, 749, 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v73, (uint64_t)"Found JSON model saved before XGBoost 1.6, please save the model using current version again. The support for old JSON model will be discontinued in XGBoost 2.3.", 161);
    xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)&v73);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v73, "learner");
  v6 = (_DWORD **)(*(uint64_t (**)(_QWORD, std::string *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v73);
  v7 = (char *)xgboost::Cast<xgboost::JsonObject,xgboost::Value>(*v6);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&p_p_p, "learner_model_param");
  v8 = (uint64_t)(v7 + 16);
  v9 = (_DWORD **)std::map<std::string,xgboost::Json>::at((uint64_t)(v7 + 16), (const void **)&p_p_p);
  v10 = (char *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*v9);
  *(_OWORD *)&v73.__r_.__value_.__r.__words[1] = 0uLL;
  v73.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73.__r_.__value_.__l.__size_;
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_feature");
  v11 = (uint64_t)(v10 + 16);
  v12 = (_DWORD **)std::map<std::string,xgboost::Json>::at((uint64_t)(v10 + 16), (const void **)&__p.__r_.__value_.__l.__data_);
  v13 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>(*v12);
  std::string::basic_string[abi:ne180100]<0>(&p_p, "num_feature");
  v72 = &p_p;
  v14 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v73, (const void **)&p_p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v72);
  std::string::operator=((std::string *)((char *)v14 + 56), (const std::string *)(v13 + 16));
  if (SHIBYTE(v70) < 0)
    operator delete(p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_class");
  v15 = (_DWORD **)std::map<std::string,xgboost::Json>::at((uint64_t)(v10 + 16), (const void **)&__p.__r_.__value_.__l.__data_);
  v16 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>(*v15);
  std::string::basic_string[abi:ne180100]<0>(&p_p, "num_class");
  v72 = &p_p;
  v17 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v73, (const void **)&p_p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v72);
  std::string::operator=((std::string *)((char *)v17 + 56), (const std::string *)(v16 + 16));
  if (SHIBYTE(v70) < 0)
    operator delete(p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_target");
  v18 = (xgboost::LearnerModelParamLegacy *)std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)(v10 + 16), (const void **)&__p.__r_.__value_.__l.__data_);
  v19 = v18;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v10 + 24 != (char *)v19)
  {
    v20 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>(*((_DWORD **)v19 + 7));
    std::string::basic_string[abi:ne180100]<0>(&__p, "num_target");
    p_p = &__p;
    v21 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v73, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
    v18 = (xgboost::LearnerModelParamLegacy *)std::string::operator=((std::string *)((char *)v21 + 56), (const std::string *)(v20 + 16));
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  xgboost::LearnerModelParamLegacy::__MANAGER__(v18);
  dmlc::parameter::ParamManager::RunInit<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&xmmword_253F36B60, (uint64_t)this + 328, v73.__r_.__value_.__l.__data_, &v73.__r_.__value_.__l.__size_, 0, 2);
  std::string::basic_string[abi:ne180100]<0>(&p_p, "base_score");
  v22 = (_DWORD **)std::map<std::string,xgboost::Json>::at(v11, (const void **)&p_p);
  v23 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>(*v22);
  if (v23[39] < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v23 + 2), *((_QWORD *)v23 + 3));
  else
    __p = *(std::string *)(v23 + 16);
  if (SHIBYTE(v70) < 0)
    operator delete(p_p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = &__p;
  else
    v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v26 = (const char *)HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v26 = (const char *)LODWORD(__p.__r_.__value_.__r.__words[1]);
  xgboost::detail::FromCharFloatImpl(v25, v26, (float *)this + 82, v24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v73, (_QWORD *)v73.__r_.__value_.__l.__size_);
  if (v67 < 0)
    operator delete(p_p_p);
  std::string::basic_string[abi:ne180100]<0>(&v73, "objective");
  v27 = (_QWORD *)std::map<std::string,xgboost::Json>::at((uint64_t)(v7 + 16), (const void **)&v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v73, "name");
  v28 = (_DWORD **)(*(uint64_t (**)(_QWORD, std::string *))(*(_QWORD *)*v27 + 24))(*v27, &v73);
  v29 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>(*v28);
  if (v29[39] < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v29 + 2), *((_QWORD *)v29 + 3));
  else
    __p = *(std::string *)(v29 + 16);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],std::string&,0>(&v73, (__int128 *)&__p);
  p_p = 0;
  v69 = 0;
  v70 = 0;
  p_p_p = &p_p;
  v66 = 0;
  p_p = operator new(0x30uLL);
  v69 = p_p;
  v70 = (char *)p_p + 48;
  v69 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)&v70, (__int128 *)&v73, v75, (std::string *)p_p);
  xgboost::XGBoostParameter<xgboost::LearnerTrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::LearnerTrainParam *)v64, (_BYTE *)this + 480, (uint64_t *)&p_p);
  p_p_p = v64;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p_p);
  p_p_p = &p_p;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p_p);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v74.__r_.__value_.__l.__data_);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  v30 = xgboost::ObjFunction::Create((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this + 64);
  v31 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v30;
  if (v31)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    v30 = *((_QWORD *)this + 3);
  }
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v30 + 16))(v30, v27);
  std::string::basic_string[abi:ne180100]<0>(&v73, "gradient_booster");
  v32 = (_QWORD *)std::map<std::string,xgboost::Json>::at((uint64_t)(v7 + 16), (const void **)&v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v73, "name");
  v33 = (_DWORD **)(*(uint64_t (**)(_QWORD, std::string *))(*(_QWORD *)*v32 + 24))(*v32, &v73);
  v34 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>(*v33);
  std::string::operator=(&__p, (const std::string *)(v34 + 16));
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v73, "booster");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v74, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v74 = __p;
  p_p = 0;
  v69 = 0;
  v70 = 0;
  p_p_p = &p_p;
  v66 = 0;
  p_p = operator new(0x30uLL);
  v69 = p_p;
  v70 = (char *)p_p + 48;
  v69 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)&v70, (__int128 *)&v73, v75, (std::string *)p_p);
  xgboost::XGBoostParameter<xgboost::LearnerTrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::LearnerTrainParam *)v63, (_BYTE *)this + 480, (uint64_t *)&p_p);
  p_p_p = v63;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p_p);
  p_p_p = &p_p;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p_p);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v74.__r_.__value_.__l.__data_);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  v35 = xgboost::GradientBooster::Create((uint64_t)this + 496, (uint64_t)this + 64, (uint64_t)this + 464);
  v36 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v35;
  if (v36)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
    v35 = *((_QWORD *)this + 4);
  }
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v35 + 16))(v35, v32);
  std::string::basic_string[abi:ne180100]<0>(&v73, "attributes");
  v37 = (_DWORD **)std::map<std::string,xgboost::Json>::at((uint64_t)(v7 + 16), (const void **)&v73.__r_.__value_.__l.__data_);
  v38 = xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*v37);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 192, *((_QWORD **)this + 25));
  *((_QWORD *)this + 24) = (char *)this + 200;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  v39 = (const void **)v38[2];
  if (v39 != v38 + 3)
  {
    do
    {
      v40 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>(v39[7]);
      v73.__r_.__value_.__r.__words[0] = (std::string::size_type)(v39 + 4);
      v41 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 24, v39 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)&v73);
      std::string::operator=((std::string *)(v41 + 7), (const std::string *)(v40 + 16));
      v42 = (const void **)v39[1];
      if (v42)
      {
        do
        {
          v43 = (const void ***)v42;
          v42 = (const void **)*v42;
        }
        while (v42);
      }
      else
      {
        do
        {
          v43 = (const void ***)v39[2];
          v44 = *v43 == v39;
          v39 = (const void **)v43;
        }
        while (!v44);
      }
      v39 = (const void **)v43;
    }
    while (v43 != v38 + 3);
  }
  std::string::basic_string[abi:ne180100]<0>(&v73, "feature_names");
  v45 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)(v7 + 16), (const void **)&v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  v46 = v7 + 24;
  if (v7 + 24 != (char *)v45)
  {
    v47 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*(_DWORD **)(v45 + 56));
    std::vector<std::string>::resize((std::vector<std::string> *)this + 9, (uint64_t)(v47[3] - v47[2]) >> 3);
    v49 = (_DWORD **)v47[2];
    v48 = (_DWORD **)v47[3];
    if (v49 != v48)
    {
      v50 = *((_QWORD *)this + 27);
      do
      {
        v51 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>(*v49);
        if (v51[39] < 0)
          std::string::__init_copy_ctor_external(&v73, *((const std::string::value_type **)v51 + 2), *((_QWORD *)v51 + 3));
        else
          v73 = *(std::string *)(v51 + 16);
        if (*(char *)(v50 + 23) < 0)
          operator delete(*(void **)v50);
        v52 = *(_OWORD *)&v73.__r_.__value_.__l.__data_;
        *(_QWORD *)(v50 + 16) = *((_QWORD *)&v73.__r_.__value_.__l + 2);
        *(_OWORD *)v50 = v52;
        v50 += 24;
        ++v49;
      }
      while (v49 != v48);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v73, "feature_types");
  v53 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(v8, (const void **)&v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  if (v46 != (char *)v53)
  {
    v54 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*(_DWORD **)(v53 + 56));
    std::vector<std::string>::resize((std::vector<std::string> *)this + 10, (uint64_t)(v54[3] - v54[2]) >> 3);
    v56 = (_DWORD **)v54[2];
    v55 = (_DWORD **)v54[3];
    if (v56 != v55)
    {
      v57 = *((_QWORD *)this + 30);
      do
      {
        v58 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>(*v56);
        if (v58[39] < 0)
          std::string::__init_copy_ctor_external(&v73, *((const std::string::value_type **)v58 + 2), *((_QWORD *)v58 + 3));
        else
          v73 = *(std::string *)(v58 + 16);
        if (*(char *)(v57 + 23) < 0)
          operator delete(*(void **)v57);
        v59 = *(_OWORD *)&v73.__r_.__value_.__l.__data_;
        *(_QWORD *)(v57 + 16) = *((_QWORD *)&v73.__r_.__value_.__l + 2);
        *(_OWORD *)v57 = v59;
        v57 += 24;
        ++v56;
      }
      while (v56 != v55);
    }
  }
  atomic_store(1u, (unsigned __int8 *)this + 160);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_220F0AFEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a36);
  _Unwind_Resume(a1);
}

void xgboost::LearnerIO::SaveModel(xgboost::LearnerIO *this, xgboost::Json *a2)
{
  unsigned __int8 v4;
  unsigned int **v5;
  _QWORD *v6;
  void **v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int **v12;
  uint64_t v13;
  unsigned int **v14;
  uint64_t v15;
  unsigned int **v16;
  xgboost::LearnerIO *v17;
  _QWORD *v18;
  uint64_t *v19;
  xgboost::LearnerIO *v20;
  xgboost::LearnerIO *v21;
  BOOL v22;
  uint64_t *v23;
  _DWORD **v24;
  char *v25;
  __int128 *v26;
  __int128 *v27;
  uint64_t *v28;
  uint64_t *v29;
  _DWORD **v30;
  uint64_t *v31;
  __int128 *v32;
  __int128 *i;
  std::string *Entry;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  void *__p[2];
  char v39;
  void *v40;
  uint64_t v41;
  void *v42;
  _QWORD *v43;
  uint64_t v44;

  v4 = atomic_load((unsigned __int8 *)this + 160);
  if ((v4 & 1) != 0)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v40);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
    v35 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v40);
    v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"Check failed: !this->need_configuration_", 40);
    v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Call Configure before saving model.", 35);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v40);
  }
  xgboost::Version::Save(a2, a2);
  v41 = 0x300000000;
  v40 = &off_24E6BE1D0;
  v43 = 0;
  v44 = 0;
  v42 = &v43;
  std::string::basic_string[abi:ne180100]<0>(__p, "learner");
  v5 = (unsigned int **)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, __p);
  xgboost::Json::operator=(v5, (uint64_t)&v40);
  if (v39 < 0)
    operator delete(__p[0]);
  v40 = &off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&v42, v43);
  std::string::basic_string[abi:ne180100]<0>(&v40, "learner");
  v6 = (_QWORD *)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v40);
  if (SHIBYTE(v42) < 0)
    operator delete(v40);
  xgboost::LearnerModelParamLegacy::ToJson((xgboost::LearnerModelParamLegacy *)__p, (uint64_t)this + 328);
  std::string::basic_string[abi:ne180100]<0>(&v40, "learner_model_param");
  v7 = (void **)(*(uint64_t (**)(_QWORD, void **))(*(_QWORD *)*v6 + 24))(*v6, &v40);
  v8 = (unsigned int *)*v7;
  *v7 = __p[0];
  __p[0] = v8;
  if (SHIBYTE(v42) < 0)
    operator delete(v40);
  if (v8)
  {
    v9 = v8 + 2;
    do
    {
      v10 = __ldxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      __dmb(9u);
      (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
    }
  }
  v41 = 0x300000000;
  v40 = &off_24E6BE1D0;
  v43 = 0;
  v44 = 0;
  v42 = &v43;
  std::string::basic_string[abi:ne180100]<0>(__p, "gradient_booster");
  v12 = (unsigned int **)(*(uint64_t (**)(_QWORD, void **))(*(_QWORD *)*v6 + 24))(*v6, __p);
  xgboost::Json::operator=(v12, (uint64_t)&v40);
  if (v39 < 0)
    operator delete(__p[0]);
  v40 = &off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&v42, v43);
  std::string::basic_string[abi:ne180100]<0>(&v40, "gradient_booster");
  v13 = (*(uint64_t (**)(_QWORD, void **))(*(_QWORD *)*v6 + 24))(*v6, &v40);
  if (SHIBYTE(v42) < 0)
    operator delete(v40);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 4) + 24))(*((_QWORD *)this + 4), v13);
  v41 = 0x300000000;
  v40 = &off_24E6BE1D0;
  v43 = 0;
  v44 = 0;
  v42 = &v43;
  std::string::basic_string[abi:ne180100]<0>(__p, "objective");
  v14 = (unsigned int **)(*(uint64_t (**)(_QWORD, void **))(*(_QWORD *)*v6 + 24))(*v6, __p);
  xgboost::Json::operator=(v14, (uint64_t)&v40);
  if (v39 < 0)
    operator delete(__p[0]);
  v40 = &off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&v42, v43);
  std::string::basic_string[abi:ne180100]<0>(&v40, "objective");
  v15 = (*(uint64_t (**)(_QWORD, void **))(*(_QWORD *)*v6 + 24))(*v6, &v40);
  if (SHIBYTE(v42) < 0)
    operator delete(v40);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 3) + 24))(*((_QWORD *)this + 3), v15);
  v41 = 0x300000000;
  v40 = &off_24E6BE1D0;
  v43 = 0;
  v44 = 0;
  v42 = &v43;
  std::string::basic_string[abi:ne180100]<0>(__p, "attributes");
  v16 = (unsigned int **)(*(uint64_t (**)(_QWORD, void **))(*(_QWORD *)*v6 + 24))(*v6, __p);
  xgboost::Json::operator=(v16, (uint64_t)&v40);
  if (v39 < 0)
    operator delete(__p[0]);
  v40 = &off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&v42, v43);
  v17 = (xgboost::LearnerIO *)*((_QWORD *)this + 24);
  if (v17 != (xgboost::LearnerIO *)((char *)this + 200))
  {
    do
    {
      xgboost::JsonString::JsonString(&v40, (__int128 *)((char *)v17 + 56));
      std::string::basic_string[abi:ne180100]<0>(__p, "attributes");
      v18 = (_QWORD *)(*(uint64_t (**)(_QWORD, void **))(*(_QWORD *)*v6 + 24))(*v6, __p);
      v19 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v18 + 24))(*v18, (uint64_t)v17 + 32);
      xgboost::Json::operator=(v19, (uint64_t)&v40);
      if (v39 < 0)
        operator delete(__p[0]);
      v40 = off_24E6BE2B8;
      if (SHIBYTE(v44) < 0)
        operator delete(v42);
      v20 = (xgboost::LearnerIO *)*((_QWORD *)v17 + 1);
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = *(xgboost::LearnerIO **)v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (xgboost::LearnerIO *)*((_QWORD *)v17 + 2);
          v22 = *(_QWORD *)v21 == (_QWORD)v17;
          v17 = v21;
        }
        while (!v22);
      }
      v17 = v21;
    }
    while (v21 != (xgboost::LearnerIO *)((char *)this + 200));
  }
  v41 = 0x400000000;
  v40 = off_24E6BE218;
  v43 = 0;
  v44 = 0;
  v42 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "feature_names");
  v23 = (uint64_t *)(*(uint64_t (**)(_QWORD, void **))(*(_QWORD *)*v6 + 24))(*v6, __p);
  xgboost::Json::operator=(v23, (uint64_t)&v40);
  if (v39 < 0)
    operator delete(__p[0]);
  v40 = off_24E6BE218;
  __p[0] = &v42;
  std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  std::string::basic_string[abi:ne180100]<0>(&v40, "feature_names");
  v24 = (_DWORD **)(*(uint64_t (**)(_QWORD, void **))(*(_QWORD *)*v6 + 24))(*v6, &v40);
  v25 = (char *)xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v24);
  if (SHIBYTE(v42) < 0)
    operator delete(v40);
  v26 = (__int128 *)*((_QWORD *)this + 27);
  v27 = (__int128 *)*((_QWORD *)this + 28);
  if (v26 != v27)
  {
    v28 = (uint64_t *)(v25 + 16);
    do
    {
      std::vector<xgboost::Json>::emplace_back<std::string const&>(v28, v26);
      v26 = (__int128 *)((char *)v26 + 24);
    }
    while (v26 != v27);
  }
  v41 = 0x400000000;
  v40 = off_24E6BE218;
  v43 = 0;
  v44 = 0;
  v42 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "feature_types");
  v29 = (uint64_t *)(*(uint64_t (**)(_QWORD, void **))(*(_QWORD *)*v6 + 24))(*v6, __p);
  xgboost::Json::operator=(v29, (uint64_t)&v40);
  if (v39 < 0)
    operator delete(__p[0]);
  v40 = off_24E6BE218;
  __p[0] = &v42;
  std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  std::string::basic_string[abi:ne180100]<0>(&v40, "feature_types");
  v30 = (_DWORD **)(*(uint64_t (**)(_QWORD, void **))(*(_QWORD *)*v6 + 24))(*v6, &v40);
  v31 = (uint64_t *)xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v30);
  if (SHIBYTE(v42) < 0)
    operator delete(v40);
  v32 = (__int128 *)*((_QWORD *)this + 30);
  for (i = (__int128 *)*((_QWORD *)this + 31); v32 != i; v32 = (__int128 *)((char *)v32 + 24))
    std::vector<xgboost::Json>::emplace_back<std::string const&>(v31 + 2, v32);
}

void sub_220F0B800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
  _Unwind_Resume(a1);
}

void xgboost::LearnerConfiguration::Configure(xgboost::LearnerConfiguration *this)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;
  std::mutex *v4;
  unsigned __int8 v5;
  std::string *p_s1;
  unsigned __int8 *v7;
  const void **v8;
  _QWORD **v9;
  float v10;
  xgboost::LearnerModelParamLegacy *v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  __n128 v15;
  rabit::engine *v16;
  void *Engine;
  uint64_t v18;
  unsigned int v19;
  uint64_t i;
  int *v21;
  int8x8_t *v22;
  std::__split_buffer<std::string>::pointer *v23;
  _QWORD *j;
  uint64_t v25;
  std::string *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  int first;
  std::string *v38;
  _QWORD *v39;
  _QWORD *v40;
  std::string *Entry;
  _QWORD *v42;
  _QWORD *v43;
  void *v44;
  int v45;
  _OWORD *v46;
  char *v47;
  _OWORD *v48;
  char *v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  _OWORD *v58;
  _OWORD *v59;
  _OWORD *v60;
  const char *v61;
  _BOOL4 v62;
  _BOOL4 v63;
  int v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  _OWORD *v69;
  uint64_t v70;
  uint64_t v71;
  std::string::size_type size;
  std::string *v73;
  const void **v74;
  uint64_t v75;
  uint64_t v76;
  int8x8_t *v77;
  int8x8_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  std::string *v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  __int16 v90;
  __n128 v91;
  float v92;
  uint64_t v93;
  uint64_t v94;
  std::string::size_type v95;
  uint64_t v96;
  int v97;
  unsigned __int8 *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  const char *v104;
  size_t v105;
  size_t v106;
  const void *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t *v111;
  std::__split_buffer<std::string>::pointer end;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  std::string *value;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t v123;
  int64x2_t v124;
  std::string *v125;
  _QWORD *v126;
  _QWORD *v127;
  _QWORD *v128;
  unsigned int *v129;
  std::string *v130;
  std::allocator<std::string> *v131;
  unsigned int v132;
  xgboost::GlobalConfiguration *v133;
  dmlc::parameter::ParamManager *v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t *v137;
  uint64_t **v138;
  _QWORD *v139;
  unsigned int *v140;
  _QWORD *v141;
  uint64_t v142;
  unsigned int v143;
  _QWORD *v144;
  _QWORD *v145;
  _QWORD *v146;
  std::string *v147;
  __int128 *v148;
  __int128 v149;
  _QWORD *v150;
  _QWORD *v151;
  uint64_t v152;
  unsigned int *v153;
  unsigned int *v154;
  unsigned int v155;
  unsigned int *v156;
  unsigned int *v157;
  unsigned int v158;
  unsigned int v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  xgboost::GenericParameter *v163;
  xgboost::GenericParameter *v164;
  int v165;
  unint64_t v166;
  unint64_t v167;
  void **v168;
  void **v169;
  _QWORD *v170;
  unsigned __int8 *v171;
  int v172;
  int v173;
  int v174;
  _QWORD *v175;
  const void **v176;
  const void ***v177;
  std::string *v178;
  uint64_t **v179;
  std::string **v180;
  std::string **v181;
  std::string **v182;
  std::string *v183;
  std::string *v184;
  __int128 v185;
  std::string::size_type v186;
  unsigned int *v187;
  unsigned int v188;
  std::string::size_type v189;
  std::__split_buffer<std::string>::pointer v190;
  const void **v191;
  const void ***v192;
  uint64_t v193;
  std::vector<std::string>::pointer v194;
  __int128 v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  std::string *v199;
  std::string *v200;
  __int128 v201;
  std::string *v202;
  uint64_t *v203;
  uint64_t **v204;
  xgboost::GenericParameter *v205;
  xgboost::GenericParameter *v206;
  unsigned int *v207;
  unsigned int v208;
  unsigned int v209;
  std::vector<std::string>::pointer v210;
  _QWORD *v211;
  __int128 v212;
  std::string *v213;
  std::string *v214;
  unint64_t v215;
  uint64_t v216;
  _QWORD *v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  unsigned int v221;
  std::string *v223;
  _QWORD *v224;
  _QWORD *v225;
  int v226;
  uint64_t v227;
  uint64_t v228;
  _QWORD *v229;
  std::string *v230;
  __int128 v231;
  __n128 *v232;
  _QWORD *v233;
  _QWORD *v234;
  __n128 *v235;
  unint64_t v236;
  uint64_t v237;
  __int128 *v238;
  uint64_t *v239;
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer v241;
  void **v242;
  __int128 **v243;
  uint64_t v244;
  unint64_t v245;
  _QWORD *v246;
  int v247;
  char *v248;
  uint64_t v249;
  _QWORD *v250;
  _QWORD *v251;
  int v252;
  uint64_t v253;
  uint64_t v254;
  _QWORD *v255;
  void **v256;
  uint64_t v257;
  std::string *v258;
  unsigned int v259;
  unsigned int v260;
  uint64_t v261;
  unsigned int *v262;
  unsigned int v263;
  unsigned int v264;
  std::string *v265;
  _QWORD *v266;
  _QWORD *v267;
  _QWORD *v268;
  int v269;
  std::__split_buffer<std::string>::pointer v270;
  uint64_t v271;
  _QWORD *v272;
  _QWORD *v273;
  std::__split_buffer<std::string>::pointer v274;
  std::string *v275;
  _QWORD *v276;
  _QWORD *v277;
  std::string *v278;
  _QWORD *v279;
  _QWORD *v280;
  _QWORD *v281;
  _QWORD *v282;
  char *v283;
  _DWORD *v284;
  std::mutex *v285;
  int *v286;
  _QWORD *v287;
  unsigned int *v288;
  xgboost::GenericParameter *v289;
  xgboost::GenericParameter *v290;
  _BYTE v291[24];
  uint64_t v292[3];
  _BYTE v293[24];
  std::vector<std::pair<std::string, std::string>> v294;
  char v295;
  int v296;
  char v297;
  std::string __s1;
  std::string v299;
  void *v300[2];
  unsigned __int8 v301;
  void *v302[2];
  char v303;
  std::string v304;
  _QWORD *v305;
  uint64_t v306;
  std::__split_buffer<std::string> __p[2];
  void *v308;
  char v309;
  uint64_t v310;
  char *v311;
  __int128 *v312;
  uint64_t v313;
  std::vector<std::string> v314;
  void **v315;
  unint64_t v316;
  unsigned __int8 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  _QWORD *v321;
  __int128 **v322;
  std::vector<std::string>::pointer v323;
  uint64_t *v324;
  std::string *v325;
  unint64_t v326[3];

  v1 = (unsigned __int8 *)this + 160;
  v2 = atomic_load((unsigned __int8 *)this + 160);
  if ((v2 & 1) != 0)
  {
    v4 = (std::mutex *)((char *)this + 96);
    std::mutex::lock((std::mutex *)((char *)this + 96));
    v5 = atomic_load(v1);
    if ((v5 & 1) == 0)
    {
LABEL_448:
      std::mutex::unlock(v4);
      return;
    }
    v285 = v4;
    std::string::basic_string[abi:ne180100]<0>(__p, "Configure");
    xgboost::common::Monitor::Start();
    if (SHIBYTE(__p[0].__end_) < 0)
      operator delete(__p[0].__first_);
    v295 = *((_BYTE *)this + 480);
    v296 = *((_DWORD *)this + 121);
    v297 = *((_BYTE *)this + 488);
    p_s1 = &__s1;
    v7 = (unsigned __int8 *)this + 496;
    if (*((char *)this + 519) < 0)
    {
      std::string::__init_copy_ctor_external(&__s1, *((const std::string::value_type **)this + 62), *((_QWORD *)this + 63));
    }
    else
    {
      *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = *(_OWORD *)v7;
      __s1.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 64);
    }
    v8 = (const void **)((char *)this + 520);
    if (*((char *)this + 543) < 0)
    {
      std::string::__init_copy_ctor_external(&v299, *((const std::string::value_type **)this + 65), *((_QWORD *)this + 66));
    }
    else
    {
      *(_OWORD *)&v299.__r_.__value_.__l.__data_ = *(_OWORD *)v8;
      v299.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 67);
    }
    v9 = (_QWORD **)((char *)this + 168);
    v287 = (_QWORD *)((char *)this + 176);
    std::vector<std::pair<std::string,std::string>>::vector<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,0>(&v294, *((_QWORD **)this + 21), (_QWORD *)this + 22);
    xgboost::XGBoostParameter<xgboost::LearnerTrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::LearnerTrainParam *)v293, (_BYTE *)this + 480, (uint64_t *)&v294);
    __p[0].__first_ = (std::__split_buffer<std::string>::pointer)v293;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    v10 = *((float *)this + 82);
    memset(v292, 0, sizeof(v292));
    xgboost::LearnerModelParamLegacy::__MANAGER__(v11);
    v12 = (_DWORD *)((char *)this + 328);
    dmlc::parameter::ParamManager::RunUpdate<std::__wrap_iter<std::pair<std::string,std::string> const*>>(&xmmword_253F36B60, (uint64_t)this + 328, (uint64_t)v294.__begin_, (uint64_t)v294.__end_, 0, v292, 0);
    __p[0].__first_ = (std::__split_buffer<std::string>::pointer)v292;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    v13 = *((unsigned __int8 *)this + 64);
    v14 = *((_QWORD *)this + 9);
    v289 = (xgboost::LearnerConfiguration *)((char *)this + 64);
    xgboost::XGBoostParameter<xgboost::GenericParameter>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::GenericParameter *)v291, (_BYTE *)this + 64, (uint64_t *)&v294);
    __p[0].__first_ = (std::__split_buffer<std::string>::pointer)v291;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    v286 = (int *)dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst(v15);
    xgboost::XGBoostParameter<xgboost::GlobalConfiguration>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::GlobalConfiguration *)v286, (uint64_t *)&v294, (uint64_t *)__p);
    v304.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v304);
    if (!*((_DWORD *)this + 121))
    {
      Engine = rabit::engine::GetEngine(v16);
      if ((*(unsigned int (**)(void *))(*(_QWORD *)Engine + 80))(Engine))
        *((_DWORD *)this + 121) = 2;
    }
    if (!v13 || *((_QWORD *)this + 9) != v14)
    {
      v18 = dmlc::ThreadLocalStore<xgboost::common::RandomThreadLocalEntry>::Get();
      v19 = *((_DWORD *)this + 18);
      *(_DWORD *)v18 = v19;
      for (i = 1; i != 624; ++i)
      {
        v19 = i + 1812433253 * (v19 ^ (v19 >> 30));
        *(_DWORD *)(v18 + 4 * i) = v19;
      }
      *(_QWORD *)(v18 + 2496) = 0;
    }
    v21 = (int *)((char *)this + 332);
    if (!*((_DWORD *)this + 83))
    {
      LODWORD(v324) = 0;
      v22 = (int8x8_t *)(*(uint64_t (**)(xgboost::LearnerConfiguration *))(*(_QWORD *)this + 248))(this);
      xgboost::PredictionContainer::ClearExpiredEntries(v22);
      for (j = (_QWORD *)v22[2]; j; j = (_QWORD *)*j)
      {
        if (!j[2])
        {
          Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
          dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
          v42 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
          v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"Check failed: matrix.first", 26);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)": ", 2);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
        }
        v25 = j[6];
        if (!v25 || *(_QWORD *)(v25 + 8) == -1)
        {
          v38 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
          dmlc::LogMessageFatal::Entry::Init(v38, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
          v39 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
          v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Check failed: !matrix.second.ref.expired()", 42);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)": ", 2);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
        }
        __p[0].__first_ = 0;
        v23 = (std::__split_buffer<std::string>::pointer *)(**(uint64_t (***)(_QWORD))j[2])(j[2]);
        __p[0].__first_ = v23[1];
        *(_QWORD *)&v318 = 0xFFFFFFFFLL;
        if ((unint64_t)__p[0].__first_ >> 32)
        {
          v23 = (std::__split_buffer<std::string>::pointer *)dmlc::LogCheckFormat<unsigned long long,unsigned long long>((uint64_t *)&v304);
          if (v304.__r_.__value_.__r.__words[0])
          {
            v26 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v318);
            dmlc::LogMessageFatal::Entry::Init(v26, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
            v27 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v318);
            v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Check failed: ", 14);
            v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"num_col <= static_cast<uint64_t>(std::numeric_limits<unsigned>::max())", 70);
            v30 = *(char *)(v304.__r_.__value_.__r.__words[0] + 23);
            v31 = v30 >= 0 ? v304.__r_.__value_.__r.__words[0] : *(_QWORD *)v304.__r_.__value_.__l.__data_;
            v32 = v30 >= 0
                ? *(unsigned __int8 *)(v304.__r_.__value_.__r.__words[0] + 23)
                : *(_QWORD *)(v304.__r_.__value_.__r.__words[0] + 8);
            v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, v31, v32);
            v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)": ", 2);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Unfortunately, XGBoost does not support data matrices with ", 59);
            v35 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" features or greater", 20);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v318);
            v36 = v304.__r_.__value_.__r.__words[0];
            v304.__r_.__value_.__r.__words[0] = 0;
            if (v36)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v304, v36);
          }
        }
        first = (int)__p[0].__first_;
        if (v324 > LODWORD(__p[0].__first_))
          first = (int)v324;
        LODWORD(v324) = first;
      }
      v44 = rabit::engine::GetEngine((rabit::engine *)v23);
      v12 = (_DWORD *)((char *)this + 328);
      v7 = (unsigned __int8 *)this + 496;
      v8 = (const void **)((char *)this + 520);
      (*(void (**)(void *, uint64_t **, uint64_t, uint64_t, unsigned int *(*)(unsigned int *, unsigned int *, int), _QWORD, _QWORD))(*(_QWORD *)v44 + 8))(v44, &v324, 4, 1, rabit::op::Reducer<rabit::op::Max,unsigned int>, 0, 0);
      v45 = *v21;
      if (v324 <= *v21)
      {
        LODWORD(v304.__r_.__value_.__l.__data_) = 0;
        if (!v45)
        {
          dmlc::LogCheckFormat<unsigned int,int>((uint64_t *)__p);
          if (__p[0].__first_)
          {
            v265 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v304);
            dmlc::LogMessageFatal::Entry::Init(v265, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
            v266 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v304);
            v267 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v266, (uint64_t)"Check failed: ", 14);
            v268 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v267, (uint64_t)"mparam_.num_feature != 0", 24);
            v269 = SHIBYTE(__p[0].__first_->__r_.__value_.__r.__words[2]);
            v270 = v269 >= 0
                 ? __p[0].__first_
                 : (std::__split_buffer<std::string>::pointer)__p[0].__first_->__r_.__value_.__r.__words[0];
            v271 = v269 >= 0
                 ? HIBYTE(__p[0].__first_->__r_.__value_.__r.__words[2])
                 : __p[0].__first_->__r_.__value_.__l.__size_;
            v272 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v268, (uint64_t)v270, v271);
            v273 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v272, (uint64_t)": ", 2);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v273, (uint64_t)"0 feature is supplied.  Are you using raw Booster interface?", 60);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v304);
            v274 = __p[0].__first_;
            __p[0].__first_ = 0;
            if (v274)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)__p, (uint64_t)v274);
          }
        }
      }
      else
      {
        *v21 = (int)v324;
      }
    }
    xgboost::common::ToString<unsigned int>();
    std::string::basic_string[abi:ne180100]<0>(&v304, "num_feature");
    *(_QWORD *)&v318 = &v304;
    v46 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 21, (const void **)&v304.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v318);
    v47 = (char *)v46 + 56;
    if (*((char *)v46 + 79) < 0)
      operator delete(*(void **)v47);
    *(_OWORD *)v47 = *(_OWORD *)&__p[0].__first_;
    *((_QWORD *)v47 + 2) = __p[0].__end_;
    HIBYTE(__p[0].__end_) = 0;
    LOBYTE(__p[0].__first_) = 0;
    if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v304.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p[0].__end_) < 0)
        operator delete(__p[0].__first_);
    }
    xgboost::common::ToString<int>();
    std::string::basic_string[abi:ne180100]<0>(&v304, "num_class");
    *(_QWORD *)&v318 = &v304;
    v48 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 21, (const void **)&v304.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v318);
    v49 = (char *)v48 + 56;
    if (*((char *)v48 + 79) < 0)
      operator delete(*(void **)v49);
    *(_OWORD *)v49 = *(_OWORD *)&__p[0].__first_;
    *((_QWORD *)v49 + 2) = __p[0].__end_;
    HIBYTE(__p[0].__end_) = 0;
    LOBYTE(__p[0].__first_) = 0;
    if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v304.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p[0].__end_) < 0)
        operator delete(__p[0].__first_);
    }
    std::vector<std::pair<std::string,std::string>>::vector<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,0>(__p, *v9, v287);
    std::vector<std::pair<std::string,std::string>>::__vdeallocate(&v294);
    *(_OWORD *)&v294.__begin_ = *(_OWORD *)&__p[0].__first_;
    v294.__end_cap_.__value_ = (std::pair<std::string, std::string> *)__p[0].__end_;
    memset(__p, 0, 24);
    v304.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v304);
    std::string::basic_string[abi:ne180100]<0>(__p, "num_class");
    if (v287 == (_QWORD *)std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)this + 168, (const void **)&__p[0].__first_))
    {
      v52 = 0;
      goto LABEL_76;
    }
    std::string::basic_string[abi:ne180100]<0>(&v304, "num_class");
    v50 = std::map<std::string,xgboost::Json>::at((uint64_t)this + 168, (const void **)&v304.__r_.__value_.__l.__data_);
    v51 = *(char *)(v50 + 23);
    if (v51 < 0)
    {
      if (*(_QWORD *)(v50 + 8) != 1)
        goto LABEL_62;
      v50 = *(_QWORD *)v50;
    }
    else if (v51 != 1)
    {
      goto LABEL_62;
    }
    if (*(_BYTE *)v50 == 48)
    {
      v52 = 0;
      goto LABEL_74;
    }
LABEL_62:
    v53 = *((char *)this + 543);
    if (v53 < 0)
    {
      if (*((_QWORD *)this + 66) != 14)
      {
LABEL_73:
        v52 = 1;
        goto LABEL_74;
      }
      v54 = (uint64_t *)*v8;
    }
    else
    {
      v54 = (uint64_t *)v8;
      if (v53 != 14)
        goto LABEL_73;
    }
    v55 = *v54;
    v56 = *(uint64_t *)((char *)v54 + 6);
    v57 = v55 == 0x6F733A69746C756DLL && v56 == 0x626F727074666F73;
    v52 = !v57;
LABEL_74:
    if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v304.__r_.__value_.__l.__data_);
LABEL_76:
    if (SHIBYTE(__p[0].__end_) < 0)
    {
      operator delete(__p[0].__first_);
      if (!v52)
        goto LABEL_95;
    }
    else if (!v52)
    {
      goto LABEL_95;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "num_class");
    v304.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    v58 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 21, (const void **)&__p[0].__first_, (uint64_t)&std::piecewise_construct, &v304);
    std::string::basic_string[abi:ne180100]<0>(&v304, "num_output_group");
    *(_QWORD *)&v318 = &v304;
    v59 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 21, (const void **)&v304.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v318);
    std::string::operator=((std::string *)((char *)v59 + 56), (const std::string *)((char *)v58 + 56));
    if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v304.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p[0].__end_) < 0)
      operator delete(__p[0].__first_);
    std::string::basic_string[abi:ne180100]<0>(__p, "num_class");
    v304.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    v60 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 21, (const void **)&__p[0].__first_, (uint64_t)&std::piecewise_construct, &v304);
    v61 = (char *)v60 + 56;
    if (*((char *)v60 + 79) < 0)
      v61 = *(const char **)v61;
    if (atoi(v61) < 2)
    {
      v62 = 0;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v304, "objective");
      v62 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__count_unique<std::string>((uint64_t)this + 168, (const void **)&v304.__r_.__value_.__l.__data_) == 0;
      if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v304.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p[0].__end_) < 0)
    {
      operator delete(__p[0].__first_);
      if (!v62)
        goto LABEL_95;
    }
    else if (!v62)
    {
LABEL_95:
      std::string::basic_string[abi:ne180100]<0>(__p, "max_delta_step");
      if (v287 != (_QWORD *)std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)this + 168, (const void **)&__p[0].__first_))
      {
        v63 = 0;
        goto LABEL_112;
      }
      std::string::basic_string[abi:ne180100]<0>(&v304, "objective");
      if (v287 == (_QWORD *)std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)this + 168, (const void **)&v304.__r_.__value_.__l.__data_))goto LABEL_109;
      v64 = *((char *)this + 543);
      if (v64 < 0)
      {
        if (*((_QWORD *)this + 66) != 13)
        {
LABEL_109:
          v63 = 0;
          goto LABEL_110;
        }
        v65 = (uint64_t *)*v8;
      }
      else
      {
        v65 = (uint64_t *)v8;
        if (v64 != 13)
          goto LABEL_109;
      }
      v66 = *v65;
      v67 = *(uint64_t *)((char *)v65 + 5);
      v63 = v66 == 0x6F703A746E756F63 && v67 == 0x6E6F7373696F703ALL;
LABEL_110:
      if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v304.__r_.__value_.__l.__data_);
LABEL_112:
      if (SHIBYTE(__p[0].__end_) < 0)
      {
        operator delete(__p[0].__first_);
        if (!v63)
          goto LABEL_118;
      }
      else if (!v63)
      {
        goto LABEL_118;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "max_delta_step");
      v304.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      v69 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 21, (const void **)&__p[0].__first_, (uint64_t)&std::piecewise_construct, &v304);
      MEMORY[0x227666C18]((char *)v69 + 56, "0.7");
      if (SHIBYTE(__p[0].__end_) < 0)
        operator delete(__p[0].__first_);
LABEL_118:
      if (*((_QWORD *)this + 3))
      {
        v70 = *((unsigned __int8 *)this + 543);
        if ((v70 & 0x80u) == 0)
          v71 = *((unsigned __int8 *)this + 543);
        else
          v71 = *((_QWORD *)this + 66);
        size = HIBYTE(v299.__r_.__value_.__r.__words[2]);
        if ((v299.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v299.__r_.__value_.__l.__size_;
        if (v71 == size)
        {
          if ((v299.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v73 = &v299;
          else
            v73 = (std::string *)v299.__r_.__value_.__r.__words[0];
          if ((v70 & 0x80) != 0)
          {
            if (!memcmp(*v8, v73, *((_QWORD *)this + 66)))
              goto LABEL_137;
          }
          else
          {
            if (!*((_BYTE *)this + 543))
              goto LABEL_137;
            v74 = v8;
            while (*(unsigned __int8 *)v74 == v73->__r_.__value_.__s.__data_[0])
            {
              v74 = (const void **)((char *)v74 + 1);
              v73 = (std::string *)((char *)v73 + 1);
              if (!--v70)
                goto LABEL_137;
            }
          }
        }
      }
      v75 = xgboost::ObjFunction::Create(v8, (uint64_t)v289);
      v76 = *((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = v75;
      if (v76)
        (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
LABEL_137:
      std::vector<std::pair<std::string,std::string>>::vector<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,0>(__p, *v9, v287);
      std::vector<std::pair<std::string,std::string>>::__vdeallocate(&v294);
      *(_OWORD *)&v294.__begin_ = *(_OWORD *)&__p[0].__first_;
      v294.__end_cap_.__value_ = (std::pair<std::string, std::string> *)__p[0].__end_;
      memset(__p, 0, 24);
      v304.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v304);
      (*(void (**)(_QWORD, std::vector<std::pair<std::string, std::string>> *))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3), &v294);
      if (!*((_QWORD *)this + 3))
      {
        v275 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        dmlc::LogMessageFatal::Entry::Init(v275, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
        v276 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        v277 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v276, (uint64_t)"Check failed: this->obj_", 24);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v277, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
      }
      v77 = (int8x8_t *)(*(uint64_t (**)(xgboost::LearnerConfiguration *))(*(_QWORD *)this + 248))(this);
      xgboost::PredictionContainer::ClearExpiredEntries(v77);
      v78 = v77[2];
      if (v78)
      {
        v79 = 1;
        do
        {
          v80 = *((_QWORD *)this + 3);
          v81 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)&v78 + 16))(*(_QWORD *)(*(_QWORD *)&v78 + 16));
          v82 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v80 + 88))(v80, v81);
          if (v79 == 1)
          {
            v79 = v82;
          }
          else if (v82 != 1 && v79 != v82)
          {
            v84 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
            dmlc::LogMessageFatal::Entry::Init(v84, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
            v85 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
            v86 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)"Check failed: n_targets == t || 1 == t", 38);
            v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)": ", 2);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"Inconsistent labels.", 20);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
          }
          v78 = **(int8x8_t **)&v78;
        }
        while (v78);
      }
      else
      {
        v79 = 1;
      }
      v88 = *((unsigned int *)this + 89);
      if ((_DWORD)v88 == 1)
      {
        *((_DWORD *)this + 89) = v79;
      }
      else if (v79 != 1 && v79 != v88)
      {
        v278 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        dmlc::LogMessageFatal::Entry::Init(v278, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
        v279 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        v280 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v279, (uint64_t)"Check failed: n_targets == 1 || n_targets == mparam_.num_target", 63);
        v281 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v280, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v281, (uint64_t)"Inconsistent configuration of num_target.  Configuration result from input data:", 80);
        v282 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v282, (uint64_t)", configuration from parameter:", 31);
        std::ostream::operator<<();
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
      }
      v90 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 80))(*((_QWORD *)this + 3));
      v91.n128_u32[0] = *((_DWORD *)this + 82);
      if (!*((_DWORD *)this + 117) || v91.n128_f32[0] != v10)
      {
        v92 = (*(float (**)(_QWORD, __n128))(**((_QWORD **)this + 3) + 72))(*((_QWORD *)this + 3), v91);
        xgboost::LearnerModelParam::LearnerModelParam((uint64_t)__p, v12, v90, v92);
        *((_QWORD *)this + 58) = __p[0].__first_;
        *(_QWORD *)((char *)this + 470) = *(std::__split_buffer<std::string>::pointer *)((char *)&__p[0].__first_ + 6);
      }
      v93 = *((_QWORD *)this + 4);
      if (v93)
      {
        v94 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v95 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        else
          v95 = __s1.__r_.__value_.__l.__size_;
        v96 = *((unsigned __int8 *)this + 519);
        v97 = (char)v96;
        if ((v96 & 0x80u) != 0)
          v96 = *((_QWORD *)this + 63);
        if (v95 == v96)
        {
          if (v97 >= 0)
            v98 = v7;
          else
            v98 = *(unsigned __int8 **)v7;
          if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
          {
            if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
            {
              while (p_s1->__r_.__value_.__s.__data_[0] == *v98)
              {
                p_s1 = (std::string *)((char *)p_s1 + 1);
                ++v98;
                if (!--v94)
                  goto LABEL_179;
              }
              goto LABEL_177;
            }
LABEL_179:
            (*(void (**)(uint64_t, std::vector<std::pair<std::string, std::string>> *))(*(_QWORD *)v93 + 32))(v93, &v294);
            (*(void (**)(_QWORD))(**((_QWORD **)this + 4) + 152))(*((_QWORD *)this + 4));
            xgboost::GenericParameter::ConfigureGpuId(v289);
            v283 = (char *)this + 168;
            v100 = *((_QWORD *)this + 68);
            v101 = *((_QWORD *)this + 69);
            if (v100 == v101)
              goto LABEL_208;
            do
            {
              v102 = (_QWORD *)*((_QWORD *)this + 5);
              v103 = (_QWORD *)*((_QWORD *)this + 6);
              while (v102 != v103)
              {
                v104 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v102 + 48))(*v102);
                v105 = strlen(v104);
                v106 = v105;
                if (*(char *)(v100 + 23) < 0)
                {
                  if (v105 != *(_QWORD *)(v100 + 8))
                    goto LABEL_189;
                  if (v105 == -1)
                    std::string::__throw_out_of_range[abi:ne180100]();
                  v107 = *(const void **)v100;
                }
                else
                {
                  v107 = (const void *)v100;
                  if (v106 != *(unsigned __int8 *)(v100 + 23))
                    goto LABEL_189;
                }
                if (!memcmp(v107, v104, v106))
                  goto LABEL_207;
LABEL_189:
                ++v102;
              }
              v108 = xgboost::Metric::Create(v100, (uint64_t)v289);
              v109 = v108;
              v111 = (uint64_t *)*((_QWORD *)this + 6);
              v110 = *((_QWORD *)this + 7);
              if ((unint64_t)v111 >= v110)
              {
                v113 = *((_QWORD *)this + 5);
                v114 = ((uint64_t)v111 - v113) >> 3;
                if ((unint64_t)(v114 + 1) >> 61)
                  std::vector<void *>::__throw_length_error[abi:ne180100]();
                v115 = v110 - v113;
                v116 = v115 >> 2;
                if (v115 >> 2 <= (unint64_t)(v114 + 1))
                  v116 = v114 + 1;
                if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFF8)
                  v117 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v117 = v116;
                __p[0].__end_cap_.__value_ = (std::allocator<std::string> *)((char *)this + 56);
                if (v117)
                  v117 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v117);
                else
                  v118 = 0;
                v119 = v117 + 8 * v114;
                value = (std::string *)(v117 + 8 * v118);
                __p[0].__end_cap_.__value_ = value;
                *(_QWORD *)v119 = v109;
                end = (std::__split_buffer<std::string>::pointer)(v119 + 8);
                __p[0].__end_ = (std::__split_buffer<std::string>::pointer)(v119 + 8);
                v122 = (_QWORD *)*((_QWORD *)this + 5);
                v121 = (_QWORD *)*((_QWORD *)this + 6);
                if (v121 == v122)
                {
                  v124 = vdupq_n_s64((unint64_t)v121);
                }
                else
                {
                  do
                  {
                    v123 = *--v121;
                    *v121 = 0;
                    *(_QWORD *)(v119 - 8) = v123;
                    v119 -= 8;
                  }
                  while (v121 != v122);
                  v124 = *(int64x2_t *)((char *)this + 40);
                  end = __p[0].__end_;
                  value = __p[0].__end_cap_.__value_;
                }
                *((_QWORD *)this + 5) = v119;
                *((_QWORD *)this + 6) = end;
                *(int64x2_t *)&__p[0].__begin_ = v124;
                v125 = (std::string *)*((_QWORD *)this + 7);
                *((_QWORD *)this + 7) = value;
                __p[0].__end_cap_.__value_ = v125;
                __p[0].__first_ = (std::__split_buffer<std::string>::pointer)v124.i64[0];
                std::__split_buffer<std::unique_ptr<xgboost::RegTree>>::~__split_buffer((uint64_t)__p);
              }
              else
              {
                *v111 = v108;
                end = (std::__split_buffer<std::string>::pointer)(v111 + 1);
              }
              *((_QWORD *)this + 6) = end;
              *((_DWORD *)this + 86) = 1;
LABEL_207:
              v100 += 24;
            }
            while (v100 != v101);
LABEL_208:
            v126 = (_QWORD *)*((_QWORD *)this + 5);
            v127 = (_QWORD *)*((_QWORD *)this + 6);
            while (v126 != v127)
            {
              (*(void (**)(_QWORD, std::vector<std::pair<std::string, std::string>> *))(*(_QWORD *)*v126
                                                                                                 + 32))(*v126, &v294);
              ++v126;
            }
            atomic_store(0, (unsigned __int8 *)this + 160);
            if (*((_BYTE *)this + 93))
            {
              __p[0].__begin_ = (std::__split_buffer<std::string>::pointer)0x300000000;
              __p[0].__first_ = (std::__split_buffer<std::string>::pointer)&off_24E6BE1D0;
              __p[0].__end_cap_.__value_ = 0;
              __p[0].__end_cap_.__value_ = 0;
              __p[0].__end_ = (std::__split_buffer<std::string>::pointer)&__p[0].__end_cap_;
              v128 = (_QWORD *)operator new();
              v128[1] = 0x300000000;
              v129 = (unsigned int *)(v128 + 1);
              *v128 = &off_24E6BE1D0;
              v130 = __p[0].__end_cap_.__value_;
              v128[2] = __p[0].__end_;
              v128[3] = v130;
              v131 = __p[0].__end_cap_.__value_;
              __p[0].__end_cap_.__value_ = 0;
              v128[4] = v131;
              __p[0].__end_cap_.__value_ = 0;
              __p[0].__end_ = (std::__split_buffer<std::string>::pointer)&__p[0].__end_cap_;
              if (!v131)
                v130 = (std::string *)v128;
              v130->__r_.__value_.__r.__words[2] = (std::string::size_type)(v128 + 3);
              v321 = v128;
              do
                v132 = __ldxr(v129);
              while (__stxr(v132 + 1, v129));
              __p[0].__first_ = (std::__split_buffer<std::string>::pointer)&off_24E6BE1D0;
              std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&__p[0].__end_, __p[0].__end_cap_.__value_->__r_.__value_.__r.__words);
              (*(void (**)(xgboost::LearnerConfiguration *, _QWORD **))(*(_QWORD *)this + 264))(this, &v321);
              v319 = 0u;
              v320 = 0u;
              v318 = 0u;
              std::deque<xgboost::Json>::push_back(&v318, (uint64_t *)&v321);
              v133 = (xgboost::GlobalConfiguration *)std::string::basic_string[abi:ne180100]<0>(&v315, "_param");
              memset(&v314, 0, sizeof(v314));
              v304.__r_.__value_.__l.__size_ = 0x300000000;
              v304.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24E6BE1D0;
              v305 = 0;
              v306 = 0;
              v304.__r_.__value_.__r.__words[2] = (std::string::size_type)&v305;
              v134 = (dmlc::parameter::ParamManager *)xgboost::GlobalConfiguration::__MANAGER__(v133);
              dmlc::parameter::ParamManager::GetDict(v134, v286, (std::vector<std::pair<std::string, std::string>> *)__p);
              std::map<std::string,std::string>::map[abi:ne180100]<std::__wrap_iter<std::pair<std::string,std::string> *>>((uint64_t)&v324, (const void **)&__p[0].__first_->__r_.__value_.__l.__data_, (const void **)&__p[0].__begin_->__r_.__value_.__l.__data_);
              v311 = (char *)__p;
              std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v311);
              v135 = (uint64_t)v324;
              if (v324 != (uint64_t *)&v325)
              {
                do
                {
                  xgboost::JsonString::JsonString(__p, (__int128 *)(v135 + 56));
                  v311 = (char *)(v135 + 32);
                  v136 = std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v304.__r_.__value_.__r.__words[2], (const void **)(v135 + 32), (uint64_t)&std::piecewise_construct, (__int128 **)&v311);
                  xgboost::Json::operator=(v136 + 7, (uint64_t)__p);
                  __p[0].__first_ = (std::__split_buffer<std::string>::pointer)off_24E6BE2B8;
                  if (SHIBYTE(__p[0].__end_cap_.__value_) < 0)
                    operator delete(__p[0].__end_);
                  v137 = *(uint64_t **)(v135 + 8);
                  if (v137)
                  {
                    do
                    {
                      v138 = (uint64_t **)v137;
                      v137 = (uint64_t *)*v137;
                    }
                    while (v137);
                  }
                  else
                  {
                    do
                    {
                      v138 = *(uint64_t ***)(v135 + 16);
                      v57 = *v138 == (uint64_t *)v135;
                      v135 = (uint64_t)v138;
                    }
                    while (!v57);
                  }
                  v135 = (uint64_t)v138;
                }
                while (v138 != (uint64_t **)&v325);
              }
              std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v324, v325);
              v139 = (_QWORD *)operator new();
              v139[1] = 0x300000000;
              v140 = (unsigned int *)(v139 + 1);
              *v139 = &off_24E6BE1D0;
              v141 = v305;
              v139[2] = *((_QWORD *)&v304.__r_.__value_.__l + 2);
              v139[3] = v141;
              v142 = v306;
              v305 = 0;
              v306 = 0;
              v139[4] = v142;
              v304.__r_.__value_.__r.__words[2] = (std::string::size_type)&v305;
              v284 = v139;
              if (!v142)
                v141 = v139;
              v141[2] = v139 + 3;
              do
                v143 = __ldxr(v140);
              while (__stxr(v143 + 1, v140));
              v304.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24E6BE1D0;
              std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&v304.__r_.__value_.__r.__words[2], v305);
              v144 = xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(v284);
              v145 = (_QWORD *)v144[2];
              v146 = v144 + 3;
              if (v145 != v144 + 3)
              {
                v147 = v314.__end_;
                do
                {
                  v148 = (__int128 *)(v145 + 4);
                  if (v147 >= v314.__end_cap_.__value_)
                  {
                    v147 = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string const&>((uint64_t *)&v314, v148);
                  }
                  else
                  {
                    if (*((char *)v145 + 55) < 0)
                    {
                      std::string::__init_copy_ctor_external(v147, (const std::string::value_type *)v145[4], v145[5]);
                    }
                    else
                    {
                      v149 = *v148;
                      v147->__r_.__value_.__r.__words[2] = v145[6];
                      *(_OWORD *)&v147->__r_.__value_.__l.__data_ = v149;
                    }
                    ++v147;
                  }
                  v314.__end_ = v147;
                  v150 = (_QWORD *)v145[1];
                  if (v150)
                  {
                    do
                    {
                      v151 = v150;
                      v150 = (_QWORD *)*v150;
                    }
                    while (v150);
                  }
                  else
                  {
                    do
                    {
                      v151 = (_QWORD *)v145[2];
                      v57 = *v151 == (_QWORD)v145;
                      v145 = v151;
                    }
                    while (!v57);
                  }
                  v145 = v151;
                }
                while (v151 != v146);
              }
              v152 = *((_QWORD *)&v320 + 1);
              while (*((_QWORD *)&v320 + 1))
              {
                v153 = *(unsigned int **)(*(_QWORD *)(*((_QWORD *)&v318 + 1)
                                                    + (((unint64_t)(v152 + v320 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                        + 8 * ((v152 + v320 - 1) & 0x1FF));
                v288 = v153;
                if (v153)
                {
                  v154 = v153 + 2;
                  do
                    v155 = __ldxr(v154);
                  while (__stxr(v155 + 1, v154));
                  v156 = *(unsigned int **)(*(_QWORD *)(*((_QWORD *)&v318 + 1)
                                                      + (((unint64_t)(*((_QWORD *)&v320 + 1) + v320 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                          + 8 * ((*((_QWORD *)&v320 + 1) + v320 - 1) & 0x1FF));
                  if (v156)
                  {
                    v157 = v156 + 2;
                    do
                    {
                      v158 = __ldxr(v157);
                      v159 = v158 - 1;
                    }
                    while (__stlxr(v159, v157));
                    if (!v159)
                    {
                      __dmb(9u);
                      (*(void (**)(unsigned int *))(*(_QWORD *)v156 + 8))(v156);
                    }
                  }
                }
                v160 = (*((_QWORD *)&v320 + 1))--;
                v161 = (((_QWORD)v319 - *((_QWORD *)&v318 + 1)) << 6) - 1;
                if ((_QWORD)v319 == *((_QWORD *)&v318 + 1))
                  v161 = 0;
                if ((unint64_t)(v161 - (v160 + v320) - 1023) <= 0xFFFFFFFFFFFFFBFFLL)
                {
                  operator delete(*(void **)(v319 - 8));
                  *(_QWORD *)&v319 = v319 - 8;
                }
                v162 = xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(v288);
                v163 = (xgboost::GenericParameter *)v162[2];
                v164 = (xgboost::GenericParameter *)(v162 + 3);
                v290 = (xgboost::GenericParameter *)(v162 + 3);
                if (v163 == (xgboost::GenericParameter *)(v162 + 3))
                  goto LABEL_333;
                do
                {
                  v165 = *((char *)v163 + 55);
                  if (v165 >= 0)
                    v166 = *((unsigned __int8 *)v163 + 55);
                  else
                    v166 = *((_QWORD *)v163 + 5);
                  if ((char)v317 < 0)
                  {
                    v167 = v316;
                    if (v166 <= v316)
                    {
LABEL_271:
                      if (*(_DWORD *)(*((_QWORD *)v163 + 7) + 12) == 3)
                        std::deque<xgboost::Json>::push_back(&v318, (uint64_t *)v163 + 7);
                      goto LABEL_327;
                    }
                    v168 = v315;
                  }
                  else
                  {
                    v167 = v317;
                    if (v166 <= v317)
                      goto LABEL_271;
                    v168 = (void **)&v315;
                  }
                  v169 = (void **)((char *)v168 + v167);
                  if (v165 >= 0)
                    v170 = (_QWORD *)((char *)v163 + 32);
                  else
                    v170 = (_QWORD *)*((_QWORD *)v163 + 4);
                  v171 = (unsigned __int8 *)v170 + v166 - 1;
                  while (v169 != v168)
                  {
                    v173 = *((unsigned __int8 *)v169 - 1);
                    v169 = (void **)((char *)v169 - 1);
                    v172 = v173;
                    v174 = *v171--;
                    if (v172 != v174)
                      goto LABEL_271;
                  }
                  v175 = xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*((_DWORD **)v163 + 7));
                  v325 = 0;
                  v326[0] = 0;
                  v324 = (uint64_t *)&v325;
                  v176 = (const void **)v175[2];
                  v177 = (const void ***)(v175 + 3);
                  if (v176 == v175 + 3)
                    goto LABEL_326;
                  v178 = 0;
                  v179 = (uint64_t **)&v325;
                  while (1)
                  {
                    if (v179 == (uint64_t **)&v325)
                    {
                      v181 = &v325;
                      if (v178)
                      {
LABEL_284:
                        v304.__r_.__value_.__r.__words[0] = (std::string::size_type)v181;
                        v182 = v181 + 1;
                        goto LABEL_286;
                      }
                    }
                    else
                    {
                      v180 = &v325;
                      if (v178)
                      {
                        do
                        {
                          v181 = (std::string **)v178;
                          v178 = (std::string *)v178->__r_.__value_.__l.__size_;
                        }
                        while (v178);
                      }
                      else
                      {
                        do
                        {
                          v181 = (std::string **)v180[2];
                          v57 = *v181 == (std::string *)v180;
                          v180 = v181;
                        }
                        while (v57);
                      }
                      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)v326, (const void **)v181 + 4, v176 + 4))
                      {
                        v182 = (std::string **)std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__find_equal<std::string>((uint64_t)&v324, &v304, v176 + 4);
LABEL_286:
                        if (*v182)
                          goto LABEL_296;
                        goto LABEL_287;
                      }
                      if (v325)
                        goto LABEL_284;
                    }
                    v304.__r_.__value_.__r.__words[0] = (std::string::size_type)&v325;
                    v182 = &v325;
LABEL_287:
                    v183 = (std::string *)operator new(0x40uLL);
                    __p[0].__first_ = v183;
                    __p[0].__begin_ = (std::__split_buffer<std::string>::pointer)&v325;
                    LOBYTE(__p[0].__end_) = 0;
                    v184 = (std::string *)((char *)v183 + 32);
                    if (*((char *)v176 + 55) < 0)
                    {
                      std::string::__init_copy_ctor_external(v184, (const std::string::value_type *)v176[4], (std::string::size_type)v176[5]);
                    }
                    else
                    {
                      v185 = *((_OWORD *)v176 + 2);
                      v183[2].__r_.__value_.__r.__words[0] = (std::string::size_type)v176[6];
                      *(_OWORD *)&v184->__r_.__value_.__l.__data_ = v185;
                    }
                    v186 = (std::string::size_type)v176[7];
                    v183[2].__r_.__value_.__l.__size_ = v186;
                    if (v186)
                    {
                      v187 = (unsigned int *)(v186 + 8);
                      do
                        v188 = __ldxr(v187);
                      while (__stxr(v188 + 1, v187));
                    }
                    LOBYTE(__p[0].__end_) = 1;
                    v189 = v304.__r_.__value_.__r.__words[0];
                    v190 = __p[0].__first_;
                    __p[0].__first_->__r_.__value_.__r.__words[0] = 0;
                    v190->__r_.__value_.__l.__size_ = 0;
                    v190->__r_.__value_.__r.__words[2] = v189;
                    *v182 = v190;
                    if (*v324)
                    {
                      v324 = (uint64_t *)*v324;
                      v190 = *v182;
                    }
                    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v325, (uint64_t *)v190);
                    ++v326[0];
                    __p[0].__first_ = 0;
                    std::unique_ptr<std::__tree_node<std::__value_type<std::string,xgboost::Json>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,xgboost::Json>,void *>>>>::reset[abi:ne180100]((uint64_t)__p, 0);
LABEL_296:
                    v191 = (const void **)v176[1];
                    if (v191)
                    {
                      do
                      {
                        v192 = (const void ***)v191;
                        v191 = (const void **)*v191;
                      }
                      while (v191);
                    }
                    else
                    {
                      do
                      {
                        v192 = (const void ***)v176[2];
                        v57 = *v192 == v176;
                        v176 = (const void **)v192;
                      }
                      while (!v57);
                    }
                    if (v192 == v177)
                      break;
                    v179 = (uint64_t **)v324;
                    v178 = v325;
                    v176 = (const void **)v192;
                  }
                  v193 = (uint64_t)v324;
                  if (v324 != (uint64_t *)&v325)
                  {
                    do
                    {
                      if (*(char *)(v193 + 55) < 0)
                        std::string::__init_copy_ctor_external(&v304, *(const std::string::value_type **)(v193 + 32), *(_QWORD *)(v193 + 40));
                      else
                        v304 = *(std::string *)(v193 + 32);
                      v194 = v314.__end_;
                      if (v314.__end_ >= v314.__end_cap_.__value_)
                      {
                        v196 = 0xAAAAAAAAAAAAAAABLL * (((char *)v314.__end_ - (char *)v314.__begin_) >> 3);
                        v197 = v196 + 1;
                        if (v196 + 1 > 0xAAAAAAAAAAAAAAALL)
                          std::vector<void *>::__throw_length_error[abi:ne180100]();
                        if (0x5555555555555556 * (((char *)v314.__end_cap_.__value_ - (char *)v314.__begin_) >> 3) > v197)
                          v197 = 0x5555555555555556
                               * (((char *)v314.__end_cap_.__value_ - (char *)v314.__begin_) >> 3);
                        if (0xAAAAAAAAAAAAAAABLL * (((char *)v314.__end_cap_.__value_ - (char *)v314.__begin_) >> 3) >= 0x555555555555555)
                          v198 = 0xAAAAAAAAAAAAAAALL;
                        else
                          v198 = v197;
                        __p[0].__end_cap_.__value_ = (std::allocator<std::string> *)&v314.__end_cap_;
                        if (v198)
                          v199 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<unsigned long>>>((uint64_t)&v314.__end_cap_, v198);
                        else
                          v199 = 0;
                        v200 = v199 + v196;
                        __p[0].__first_ = v199;
                        __p[0].__begin_ = v200;
                        __p[0].__end_cap_.__value_ = &v199[v198];
                        v201 = *(_OWORD *)&v304.__r_.__value_.__l.__data_;
                        v200->__r_.__value_.__r.__words[2] = v304.__r_.__value_.__r.__words[2];
                        *(_OWORD *)&v200->__r_.__value_.__l.__data_ = v201;
                        memset(&v304, 0, sizeof(v304));
                        __p[0].__end_ = v200 + 1;
                        std::vector<std::string>::__swap_out_circular_buffer(&v314, __p);
                        v202 = v314.__end_;
                        std::__split_buffer<std::string>::~__split_buffer(__p);
                        v314.__end_ = v202;
                        if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v304.__r_.__value_.__l.__data_);
                      }
                      else
                      {
                        v195 = *(_OWORD *)&v304.__r_.__value_.__l.__data_;
                        v314.__end_->__r_.__value_.__r.__words[2] = v304.__r_.__value_.__r.__words[2];
                        *(_OWORD *)&v194->__r_.__value_.__l.__data_ = v195;
                        v314.__end_ = v194 + 1;
                      }
                      v203 = *(uint64_t **)(v193 + 8);
                      if (v203)
                      {
                        do
                        {
                          v204 = (uint64_t **)v203;
                          v203 = (uint64_t *)*v203;
                        }
                        while (v203);
                      }
                      else
                      {
                        do
                        {
                          v204 = *(uint64_t ***)(v193 + 16);
                          v57 = *v204 == (uint64_t *)v193;
                          v193 = (uint64_t)v204;
                        }
                        while (!v57);
                      }
                      v193 = (uint64_t)v204;
                    }
                    while (v204 != (uint64_t **)&v325);
                  }
LABEL_326:
                  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&v324, v325);
                  v164 = v290;
LABEL_327:
                  v205 = (xgboost::GenericParameter *)*((_QWORD *)v163 + 1);
                  if (v205)
                  {
                    do
                    {
                      v206 = v205;
                      v205 = *(xgboost::GenericParameter **)v205;
                    }
                    while (v205);
                  }
                  else
                  {
                    do
                    {
                      v206 = (xgboost::GenericParameter *)*((_QWORD *)v163 + 2);
                      v57 = *(_QWORD *)v206 == (_QWORD)v163;
                      v163 = v206;
                    }
                    while (!v57);
                  }
                  v163 = v206;
                }
                while (v206 != v164);
LABEL_333:
                if (v288)
                {
                  v207 = v288 + 2;
                  do
                  {
                    v208 = __ldxr(v207);
                    v209 = v208 - 1;
                  }
                  while (__stlxr(v209, v207));
                  if (!v209)
                  {
                    __dmb(9u);
                    (*(void (**)(unsigned int *))(*(_QWORD *)v288 + 8))(v288);
                  }
                }
                v152 = *((_QWORD *)&v320 + 1);
              }
              v210 = v314.__end_;
              if (v314.__end_ >= v314.__end_cap_.__value_)
              {
                v211 = v283;
                v213 = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string const&>((uint64_t *)&v314, &xgboost::LearnerConfiguration::kEvalMetric);
              }
              else
              {
                v211 = v283;
                if (byte_253F376EF < 0)
                {
                  std::string::__init_copy_ctor_external(v314.__end_, (const std::string::value_type *)xgboost::LearnerConfiguration::kEvalMetric, *((std::string::size_type *)&xgboost::LearnerConfiguration::kEvalMetric + 1));
                }
                else
                {
                  v212 = xgboost::LearnerConfiguration::kEvalMetric;
                  v314.__end_->__r_.__value_.__r.__words[2] = unk_253F376E8;
                  *(_OWORD *)&v210->__r_.__value_.__l.__data_ = v212;
                }
                v213 = v210 + 1;
              }
              v314.__end_ = v213;
              if (v213 >= v314.__end_cap_.__value_)
              {
                v214 = (std::string *)std::vector<std::string>::__emplace_back_slow_path<char const(&)[17]>((uint64_t *)&v314, "num_output_group");
              }
              else
              {
                std::string::basic_string[abi:ne180100]<0>(v213, "num_output_group");
                v214 = v213 + 1;
              }
              v215 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v214 - (char *)v314.__begin_) >> 3));
              v314.__end_ = v214;
              if (v214 == v314.__begin_)
                v216 = 0;
              else
                v216 = v215;
              std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>((__n128 *)v314.__begin_, (__n128 *)v214, v216, 1);
              v324 = 0;
              v325 = 0;
              v326[0] = 0;
              v217 = (_QWORD *)*v211;
              if ((_QWORD *)*v211 == v287)
              {
                v232 = 0;
                v235 = 0;
              }
              else
              {
                v218 = MEMORY[0x24BDAC740];
                do
                {
                  if (*((char *)v217 + 55) < 0)
                  {
                    v220 = (char *)v217[4];
                    v219 = v217[5];
                    if (v219)
                    {
LABEL_357:
                      while (1)
                      {
                        v221 = *v220;
                        if ((v221 & 0x80000000) != 0
                           ? __maskrune(v221, 0x4000uLL)
                           : *(_DWORD *)(v218 + 4 * v221 + 60) & 0x4000)
                        {
                          break;
                        }
                        ++v220;
                        if (!--v219)
                          goto LABEL_370;
                      }
                      v223 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
                      dmlc::LogMessageFatal::Entry::Init(v223, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
                      v224 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
                      v225 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v224, (uint64_t)"Invalid parameter \"", 19);
                      v226 = *((char *)v217 + 55);
                      if (v226 >= 0)
                        v227 = (uint64_t)(v217 + 4);
                      else
                        v227 = v217[4];
                      if (v226 >= 0)
                        v228 = *((unsigned __int8 *)v217 + 55);
                      else
                        v228 = v217[5];
                      v229 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v225, v227, v228);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v229, (uint64_t)"\" contains whitespace.", 22);
                      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
                    }
                  }
                  else
                  {
                    v219 = *((unsigned __int8 *)v217 + 55);
                    v220 = (char *)(v217 + 4);
                    if (*((_BYTE *)v217 + 55))
                      goto LABEL_357;
                  }
LABEL_370:
                  v230 = v325;
                  if ((unint64_t)v325 >= v326[0])
                  {
                    v232 = (__n128 *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v324, (__int128 *)v217 + 2);
                  }
                  else
                  {
                    if (*((char *)v217 + 55) < 0)
                    {
                      std::string::__init_copy_ctor_external(v325, (const std::string::value_type *)v217[4], v217[5]);
                    }
                    else
                    {
                      v231 = *((_OWORD *)v217 + 2);
                      v325->__r_.__value_.__r.__words[2] = v217[6];
                      *(_OWORD *)&v230->__r_.__value_.__l.__data_ = v231;
                    }
                    v232 = (__n128 *)&v230[1];
                  }
                  v325 = (std::string *)v232;
                  v233 = (_QWORD *)v217[1];
                  if (v233)
                  {
                    do
                    {
                      v234 = v233;
                      v233 = (_QWORD *)*v233;
                    }
                    while (v233);
                  }
                  else
                  {
                    do
                    {
                      v234 = (_QWORD *)v217[2];
                      v57 = *v234 == (_QWORD)v217;
                      v217 = v234;
                    }
                    while (!v57);
                  }
                  v217 = v234;
                }
                while (v234 != v287);
                v235 = (__n128 *)v324;
              }
              v236 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v232 - (char *)v235) >> 3));
              if (v232 == v235)
                v237 = 0;
              else
                v237 = v236;
              std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(v235, v232, v237, 1);
              v312 = 0;
              v311 = 0;
              v313 = 0;
              v239 = (uint64_t *)v325;
              begin = v314.__begin_;
              v241 = v314.__end_;
              v300[0] = v324;
              v238 = (__int128 *)v324;
              v322 = (__int128 **)&v311;
              v323 = v314.__begin_;
              if (v324 != (uint64_t *)v325)
              {
                if (v314.__begin_ == v314.__end_)
                {
                  v243 = (__int128 **)&v311;
LABEL_398:
                  __p[0].__first_ = (std::__split_buffer<std::string>::pointer)v243;
                  do
                  {
                    std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100]((uint64_t **)__p, v238);
                    v238 = (__int128 *)((char *)v238 + 24);
                  }
                  while (v238 != (__int128 *)v239);
                }
                else
                {
                  while (1)
                  {
                    if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v238, begin))
                    {
                      std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100]((uint64_t **)&v322, v238);
                      v242 = v300;
                    }
                    else
                    {
                      if (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(begin, v238))
                        v300[0] = (char *)v238 + 24;
                      v242 = (void **)&v323;
                      v238 = (__int128 *)begin;
                    }
                    *v242 = (char *)v238 + 24;
                    v238 = (__int128 *)v300[0];
                    if (v300[0] == v239)
                      break;
                    begin = v323;
                    if (v323 == v241)
                    {
                      v243 = v322;
                      goto LABEL_398;
                    }
                  }
                }
              }
              if (v312 != (__int128 *)v311)
              {
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__end_, (uint64_t)"\nParameters: { ", 15);
                if ((char *)v312 - v311 != 24)
                {
                  v244 = 0;
                  v245 = 0;
                  do
                  {
                    v246 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__end_, (uint64_t)"\"", 1);
                    v247 = v311[v244 + 23];
                    if (v247 >= 0)
                      v248 = &v311[v244];
                    else
                      v248 = *(char **)&v311[v244];
                    if (v247 >= 0)
                      v249 = v311[v244 + 23];
                    else
                      v249 = *(_QWORD *)&v311[v244 + 8];
                    v250 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v246, (uint64_t)v248, v249);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v250, (uint64_t)"\", ", 3);
                    ++v245;
                    v244 += 24;
                  }
                  while (v245 < -1 - 0x5555555555555555 * (((char *)v312 - v311) >> 3));
                }
                v251 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__end_, (uint64_t)"\"", 1);
                v252 = *((char *)v312 - 1);
                if (v252 >= 0)
                  v253 = (uint64_t)v312 - 24;
                else
                  v253 = *((_QWORD *)v312 - 3);
                if (v252 >= 0)
                  v254 = *((unsigned __int8 *)v312 - 1);
                else
                  v254 = *((_QWORD *)v312 - 2);
                v255 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v251, v253, v254);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v255, (uint64_t)"\"", 1);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__end_, (uint64_t)" } might not be used.\n\n  This could be a false alarm, with some parameters getting used by language bindings but\n  then being mistakenly passed down to XGBoost core, or some parameter actually being used\n  but getting flagged wrongly here. Please open an issue if you find any such cases.\n\n", 290);
                if (v286[1] >= 1)
                {
                  std::string::basic_string[abi:ne180100]<0>(v302, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
                  xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)&v304, (uint64_t)v302, 627, 1);
                  std::stringbuf::str();
                  if ((v301 & 0x80u) == 0)
                    v256 = v300;
                  else
                    v256 = (void **)v300[0];
                  if ((v301 & 0x80u) == 0)
                    v257 = v301;
                  else
                    v257 = (uint64_t)v300[1];
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v304, (uint64_t)v256, v257);
                  if ((char)v301 < 0)
                    operator delete(v300[0]);
                  xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)&v304);
                  if (v303 < 0)
                    operator delete(v302[0]);
                }
                __p[0].__first_ = (std::__split_buffer<std::string>::pointer)*MEMORY[0x24BEDB7F0];
                v258 = *(std::string **)(MEMORY[0x24BEDB7F0] + 72);
                *(std::__split_buffer<std::string>::pointer *)((char *)&__p[0].__first_
                                                             + __p[0].__first_[-1].__r_.__value_.__r.__words[0]) = *(std::__split_buffer<std::string>::pointer *)(MEMORY[0x24BEDB7F0] + 64);
                __p[0].__end_ = v258;
                __p[0].__end_cap_.__value_ = (std::string *)(MEMORY[0x24BEDB848] + 16);
                if (v309 < 0)
                  operator delete(v308);
                std::streambuf::~streambuf();
                std::iostream::~basic_iostream();
                MEMORY[0x227666FE4](&v310);
              }
              __p[0].__first_ = (std::__split_buffer<std::string>::pointer)&v311;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              __p[0].__first_ = (std::__split_buffer<std::string>::pointer)&v324;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              do
              {
                v259 = __ldxr(v140);
                v260 = v259 - 1;
              }
              while (__stlxr(v260, v140));
              if (!v260)
              {
                __dmb(9u);
                (*(void (**)(_DWORD *))(*(_QWORD *)v284 + 8))(v284);
              }
              __p[0].__first_ = (std::__split_buffer<std::string>::pointer)&v314;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              if ((char)v317 < 0)
                operator delete(v315);
              std::deque<xgboost::Json>::~deque[abi:ne180100]((uint64_t)&v318);
              v261 = (uint64_t)v321;
              if (v321)
              {
                v262 = (unsigned int *)(v321 + 1);
                do
                {
                  v263 = __ldxr(v262);
                  v264 = v263 - 1;
                }
                while (__stlxr(v264, v262));
                if (!v264)
                {
                  __dmb(9u);
                  (*(void (**)(uint64_t))(*(_QWORD *)v261 + 8))(v261);
                }
              }
            }
            std::string::basic_string[abi:ne180100]<0>(__p, "Configure");
            xgboost::common::Monitor::Stop();
            if (SHIBYTE(__p[0].__end_) < 0)
              operator delete(__p[0].__first_);
            __p[0].__first_ = (std::__split_buffer<std::string>::pointer)&v294;
            std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            if (SHIBYTE(v299.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v299.__r_.__value_.__l.__data_);
            if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__s1.__r_.__value_.__l.__data_);
            v4 = v285;
            goto LABEL_448;
          }
          if (!memcmp(__s1.__r_.__value_.__l.__data_, v98, __s1.__r_.__value_.__l.__size_))
            goto LABEL_179;
        }
      }
LABEL_177:
      v93 = xgboost::GradientBooster::Create((uint64_t)v7, (uint64_t)v289, (uint64_t)this + 464);
      v99 = *((_QWORD *)this + 4);
      *((_QWORD *)this + 4) = v93;
      if (v99)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v99 + 8))(v99);
        v93 = *((_QWORD *)this + 4);
      }
      goto LABEL_179;
    }
    MEMORY[0x227666C18](v8, "multi:softmax");
    goto LABEL_95;
  }
}

void sub_220F0D898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::mutex *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31)
{
  uint64_t v31;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&STACK[0x230]);
  *(_QWORD *)(v31 - 232) = &a27;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 232));
  xgboost::LearnerTrainParam::~LearnerTrainParam(&a31);
  std::mutex::unlock(a13);
  _Unwind_Resume(a1);
}

void xgboost::LearnerImpl::UpdateOneIter(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t i;
  int8x8_t *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  xgboost::PredictionCacheEntry *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  uint64_t v22[2];
  void *__p[2];
  char v24;

  std::string::basic_string[abi:ne180100]<0>(__p, "UpdateOneIter");
  xgboost::common::Monitor::Start();
  if (v24 < 0)
    operator delete(__p[0]);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  if (*(_BYTE *)(a1 + 80))
  {
    v6 = dmlc::ThreadLocalStore<xgboost::common::RandomThreadLocalEntry>::Get();
    v7 = a2 - *(_DWORD *)(a1 + 72) + (*(_DWORD *)(a1 + 72) << 7);
    *(_DWORD *)v6 = v7;
    for (i = 1; i != 624; ++i)
    {
      v7 = i + 1812433253 * (v7 ^ (v7 >> 30));
      *(_DWORD *)(v6 + 4 * i) = v7;
    }
    *(_QWORD *)(v6 + 2496) = 0;
  }
  xgboost::LearnerImpl::CheckDataSplitMode((xgboost::LearnerImpl *)a1);
  xgboost::LearnerImpl::ValidateDMatrix((xgboost::LearnerImpl *)a1, (xgboost::DMatrix *)*a3, 1);
  v9 = (int8x8_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 248))(a1);
  v10 = (std::__shared_weak_count *)a3[1];
  v22[0] = *a3;
  v22[1] = (uint64_t)v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = (xgboost::PredictionCacheEntry *)xgboost::PredictionContainer::Cache(v9, v22, *(_DWORD *)(a1 + 88));
  if (v10)
  {
    v14 = (unint64_t *)&v10->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "PredictRaw");
  xgboost::common::Monitor::Start();
  if (v24 < 0)
    operator delete(__p[0]);
  xgboost::LearnerImpl::PredictRaw((xgboost::LearnerImpl *)a1, (xgboost::DMatrix *)*a3, v13, 1, 0, 0);
  std::string::basic_string[abi:ne180100]<0>(&v20, "Predictions");
  if (v21 < 0)
    operator delete(v20);
  std::string::basic_string[abi:ne180100]<0>(__p, "PredictRaw");
  xgboost::common::Monitor::Stop();
  if (v24 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "GetGradient");
  xgboost::common::Monitor::Start();
  if (v24 < 0)
    operator delete(__p[0]);
  v16 = *(_QWORD *)(a1 + 24);
  v17 = (**(uint64_t (***)(_QWORD))*a3)(*a3);
  (*(void (**)(uint64_t, xgboost::PredictionCacheEntry *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 40))(v16, v13, v17, a2, a1 + 616);
  std::string::basic_string[abi:ne180100]<0>(__p, "GetGradient");
  xgboost::common::Monitor::Stop();
  if (v24 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(&v18, "Gradients");
  if (v19 < 0)
    operator delete(v18);
  (*(void (**)(_QWORD, _QWORD, uint64_t, xgboost::PredictionCacheEntry *))(**(_QWORD **)(a1 + 32) + 80))(*(_QWORD *)(a1 + 32), *a3, a1 + 616, v13);
  std::string::basic_string[abi:ne180100]<0>(__p, "UpdateOneIter");
  xgboost::common::Monitor::Stop();
  if (v24 < 0)
    operator delete(__p[0]);
}

void sub_220F0E010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost::LearnerImpl::BoostOneIter(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t i;
  int8x8_t *v11;
  xgboost::PredictionContainer *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  xgboost::DMatrix *v19;
  _QWORD *v20;
  uint64_t v21[2];
  void *__p[2];
  char v23;

  std::string::basic_string[abi:ne180100]<0>(__p, "BoostOneIter");
  xgboost::common::Monitor::Start();
  if (v23 < 0)
    operator delete(__p[0]);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  if (*(_BYTE *)(a1 + 80))
  {
    v8 = dmlc::ThreadLocalStore<xgboost::common::RandomThreadLocalEntry>::Get();
    v9 = a2 - *(_DWORD *)(a1 + 72) + (*(_DWORD *)(a1 + 72) << 7);
    *(_DWORD *)v8 = v9;
    for (i = 1; i != 624; ++i)
    {
      v9 = i + 1812433253 * (v9 ^ (v9 >> 30));
      *(_DWORD *)(v8 + 4 * i) = v9;
    }
    *(_QWORD *)(v8 + 2496) = 0;
  }
  xgboost::LearnerImpl::CheckDataSplitMode((xgboost::LearnerImpl *)a1);
  xgboost::LearnerImpl::ValidateDMatrix((xgboost::LearnerImpl *)a1, *(xgboost::DMatrix **)a3, 1);
  v11 = (int8x8_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 248))(a1);
  v12 = (xgboost::PredictionContainer *)v11;
  v13 = *(std::__shared_weak_count **)(a3 + 8);
  v21[0] = *(_QWORD *)a3;
  v21[1] = (uint64_t)v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  xgboost::PredictionContainer::Cache(v11, v21, *(_DWORD *)(a1 + 88));
  if (v13)
  {
    v16 = (unint64_t *)&v13->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v18 = *(_QWORD *)(a1 + 32);
  v19 = *(xgboost::DMatrix **)a3;
  v20 = xgboost::PredictionContainer::Entry(v12, v19);
  (*(void (**)(uint64_t, xgboost::DMatrix *, uint64_t, _QWORD *))(*(_QWORD *)v18 + 80))(v18, v19, a4, v20);
  std::string::basic_string[abi:ne180100]<0>(__p, "BoostOneIter");
  xgboost::common::Monitor::Stop();
  if (v23 < 0)
    operator delete(__p[0]);
}

void sub_220F0E200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::LearnerImpl::EvalOneIter(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v12;
  _QWORD *v13;
  void **v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  void **v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void **v28;
  void *v29;
  _QWORD *v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  __int128 v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  __int128 v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  xgboost::PredictionCacheEntry *v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  xgboost::DMatrix *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  const char *v77;
  size_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  int8x8_t *v86;
  uint64_t v89[2];
  uint64_t v90;
  uint64_t v91;
  void *v92[2];
  unsigned __int8 v93;
  void *v94[2];
  unsigned __int8 v95;
  void *v96[2];
  unsigned __int8 v97;
  _QWORD v98[11];
  char v99;
  uint64_t v100;
  void *v101[2];
  char v102;
  _BYTE __p[24];
  unint64_t v104;
  uint64_t v105;

  std::string::basic_string[abi:ne180100]<0>(__p, "EvalOneIter");
  xgboost::common::Monitor::Start();
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v98);
  *(_QWORD *)((char *)&v98[2] + *(_QWORD *)(v98[0] - 24)) = 17;
  __p[0] = 91;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)__p, 1);
  v5 = (_QWORD *)std::ostream::operator<<();
  __p[0] = 93;
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)__p, 1);
  *(_DWORD *)((char *)v6 + *(_QWORD *)(*v6 - 24) + 8) |= 4u;
  if (*(_QWORD *)(a1 + 48) == *(_QWORD *)(a1 + 40) && !*(_BYTE *)(a1 + 488))
  {
    v7 = *(char *)(a1 + 543);
    if (v7 < 0)
    {
      if (*(_QWORD *)(a1 + 528) != 15)
      {
LABEL_48:
        v32 = (char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 48))(*(_QWORD *)(a1 + 24));
        std::string::basic_string[abi:ne180100]<0>(v101, v32);
        v33 = xgboost::Metric::Create((uint64_t)v101, a1 + 64);
        v34 = v33;
        v35 = *(_QWORD *)(a1 + 56);
        v36 = *(uint64_t **)(a1 + 48);
        if ((unint64_t)v36 >= v35)
        {
          v38 = *(_QWORD **)(a1 + 40);
          v39 = v36 - v38;
          v40 = v39 + 1;
          if ((unint64_t)(v39 + 1) >> 61)
            std::vector<void *>::__throw_length_error[abi:ne180100]();
          v41 = v35 - (_QWORD)v38;
          if (v41 >> 2 > v40)
            v40 = v41 >> 2;
          if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
            v42 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v42 = v40;
          v105 = a1 + 56;
          if (v42)
          {
            v42 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v42);
            v38 = *(_QWORD **)(a1 + 40);
            v36 = *(uint64_t **)(a1 + 48);
          }
          else
          {
            v43 = 0;
          }
          v44 = (uint64_t *)(v42 + 8 * v39);
          v45 = v42 + 8 * v43;
          v104 = v45;
          *v44 = v34;
          *(_QWORD *)&__p[16] = v44 + 1;
          if (v36 == v38)
          {
            v37 = v44 + 1;
          }
          else
          {
            do
            {
              v46 = *--v36;
              *v36 = 0;
              *--v44 = v46;
            }
            while (v36 != v38);
            v37 = *(_QWORD **)&__p[16];
            v45 = v104;
          }
          v47 = *(_OWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v44;
          *(_QWORD *)(a1 + 48) = v37;
          *(_OWORD *)&__p[8] = v47;
          v48 = *(_QWORD *)(a1 + 56);
          *(_QWORD *)(a1 + 56) = v45;
          v104 = v48;
          *(_QWORD *)__p = v47;
          std::__split_buffer<std::unique_ptr<xgboost::RegTree>>::~__split_buffer((uint64_t)__p);
        }
        else
        {
          *v36 = v33;
          v37 = v36 + 1;
        }
        *(_QWORD *)(a1 + 48) = v37;
        if (v102 < 0)
        {
          operator delete(v101[0]);
          v37 = *(_QWORD **)(a1 + 48);
        }
        v49 = *(v37 - 1);
        std::vector<std::pair<std::string,std::string>>::vector<std::__map_iterator<std::__tree_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,0>(__p, *(_QWORD **)(a1 + 168), (_QWORD *)(a1 + 176));
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v49 + 32))(v49, __p);
        v101[0] = __p;
        std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)v101);
        goto LABEL_67;
      }
      v8 = *(uint64_t **)(a1 + 520);
    }
    else
    {
      v8 = (uint64_t *)(a1 + 520);
      if (v7 != 15)
        goto LABEL_48;
    }
    v9 = *v8;
    v10 = *(uint64_t *)((char *)v8 + 7);
    if (v9 == 0x6C3A7972616E6962 && v10 == 0x7761727469676F6CLL)
    {
      std::string::basic_string[abi:ne180100]<0>(v96, "auc");
      std::string::basic_string[abi:ne180100]<0>(v94, "logloss");
      std::string::basic_string[abi:ne180100]<0>(v92, "1.4.0");
      if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst(v12) + 4) >= 1)
      {
        std::string::basic_string[abi:ne180100]<0>(v101, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
        xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)__p, (uint64_t)v101, 1205, 1);
        v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Starting in XGBoost ", 20);
        v14 = (v93 & 0x80u) == 0 ? v92 : (void **)v92[0];
        v15 = (v93 & 0x80u) == 0 ? (void *)v93 : v92[1];
        v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, (uint64_t)v15);
        v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", the default evaluation metric ", 32);
        v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"used with the objective '", 25);
        v19 = *(char *)(a1 + 543);
        v20 = v19 >= 0 ? a1 + 520 : *(_QWORD *)(a1 + 520);
        v21 = v19 >= 0 ? *(unsigned __int8 *)(a1 + 543) : *(_QWORD *)(a1 + 528);
        v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
        v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"' was changed from '", 20);
        v24 = (v97 & 0x80u) == 0 ? v96 : (void **)v96[0];
        v25 = (v97 & 0x80u) == 0 ? (void *)v97 : v96[1];
        v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, (uint64_t)v25);
        v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"' to '", 6);
        v28 = (v95 & 0x80u) == 0 ? v94 : (void **)v94[0];
        v29 = (v95 & 0x80u) == 0 ? (void *)v95 : v94[1];
        v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, (uint64_t)v29);
        v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"'. Explicitly set eval_metric if you'd ", 39);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"like to restore the old behavior.", 33);
        xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)__p);
        if (v102 < 0)
          operator delete(v101[0]);
      }
      if ((char)v93 < 0)
        operator delete(v92[0]);
      if ((char)v95 < 0)
        operator delete(v94[0]);
      if ((char)v97 < 0)
        operator delete(v96[0]);
    }
    goto LABEL_48;
  }
LABEL_67:
  v86 = (int8x8_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 248))(a1);
  v50 = *a3;
  if (a3[1] != *a3)
  {
    v51 = 0;
    do
    {
      v52 = *(_OWORD *)(v50 + 16 * v51);
      *(_OWORD *)__p = v52;
      v53 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
      if (*((_QWORD *)&v52 + 1))
      {
        v54 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
        do
          v55 = __ldxr(v54);
        while (__stxr(v55 + 1, v54));
        v91 = *((_QWORD *)&v52 + 1);
        do
          v56 = __ldxr(v54);
        while (__stxr(v56 + 1, v54));
      }
      else
      {
        v91 = 0;
      }
      v90 = v52;
      v57 = (xgboost::PredictionCacheEntry *)xgboost::PredictionContainer::Cache(v86, &v90, *(_DWORD *)(a1 + 88));
      if (v53)
      {
        p_shared_owners = (unint64_t *)&v53->__shared_owners_;
        do
          v59 = __ldaxr(p_shared_owners);
        while (__stlxr(v59 - 1, p_shared_owners));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      v60 = *(xgboost::DMatrix **)__p;
      xgboost::LearnerImpl::ValidateDMatrix((xgboost::LearnerImpl *)a1, *(xgboost::DMatrix **)__p, 0);
      xgboost::LearnerImpl::PredictRaw((xgboost::LearnerImpl *)a1, v60, v57, 0, 0, 0);
      v61 = *(std::__shared_weak_count **)&__p[8];
      v89[0] = (uint64_t)v60;
      v89[1] = *(_QWORD *)&__p[8];
      if (*(_QWORD *)&__p[8])
      {
        v62 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
        do
          v63 = __ldxr(v62);
        while (__stxr(v63 + 1, v62));
      }
      v64 = xgboost::PredictionContainer::Cache((int8x8_t *)(a1 + 624), v89, *(_DWORD *)(a1 + 88));
      if (v61)
      {
        v65 = (unint64_t *)&v61->__shared_owners_;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      v67 = (uint64_t)(*(_QWORD *)(*(_QWORD *)v57 + 8) - **(_QWORD **)v57) >> 2;
      LODWORD(v101[0]) = 0;
      std::vector<float>::resize(*v64, v67, v101);
      xgboost::HostDeviceVector<float>::Copy((void ***)v64, (const void ***)v57);
      (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 24) + 64))(*(_QWORD *)(a1 + 24), v64);
      v69 = *(_QWORD **)(a1 + 40);
      v68 = *(_QWORD **)(a1 + 48);
      while (v69 != v68)
      {
        LOBYTE(v101[0]) = 9;
        v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)v101, 1);
        v71 = *a4 + 24 * v51;
        v72 = *(char *)(v71 + 23);
        if (v72 >= 0)
          v73 = *a4 + 24 * v51;
        else
          v73 = *(_QWORD *)v71;
        if (v72 >= 0)
          v74 = *(unsigned __int8 *)(v71 + 23);
        else
          v74 = *(_QWORD *)(v71 + 8);
        v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, v73, v74);
        LOBYTE(v101[0]) = 45;
        v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)v101, 1);
        v77 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v69 + 48))(*v69);
        v78 = strlen(v77);
        v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)v77, v78);
        LOBYTE(v101[0]) = 58;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)v101, 1);
        v80 = *v69;
        v81 = (***(uint64_t (****)(_QWORD))__p)(*(_QWORD *)__p);
        (*(void (**)(uint64_t, uint64_t *, uint64_t, BOOL))(*(_QWORD *)v80 + 40))(v80, v64, v81, *(_DWORD *)(a1 + 484) == 2);
        std::ostream::operator<<();
        ++v69;
      }
      v82 = *(std::__shared_weak_count **)&__p[8];
      if (*(_QWORD *)&__p[8])
      {
        v83 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
      ++v51;
      v50 = *a3;
    }
    while (v51 < (a3[1] - *a3) >> 4);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "EvalOneIter");
  xgboost::common::Monitor::Stop();
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::stringbuf::str();
  v98[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v98 + *(_QWORD *)(v98[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v98[1] = MEMORY[0x24BEDB848] + 16;
  if (v99 < 0)
    operator delete((void *)v98[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v100);
}

void sub_220F0EA20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a72;

  if (a72 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a31 < 0)
    operator delete(a26);
  if (a37 < 0)
    operator delete(a32);
  std::ostringstream::~ostringstream((uint64_t)&a38);
  _Unwind_Resume(a1);
}

void xgboost::LearnerImpl::Predict(_QWORD **a1, xgboost::DMatrix **a2, char a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, unsigned __int8 a9, unsigned __int8 a10, unsigned __int8 a11)
{
  unsigned int v18;
  std::string *Entry;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  int8x8_t *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  xgboost::PredictionCacheEntry *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v38[2];
  uint64_t v39;
  int v40;
  unsigned int v41;

  v18 = a9 + a8 + a11;
  ((void (*)(_QWORD **))(*a1)[4])(a1);
  v40 = 1;
  v41 = v18;
  if (v18 > 1)
  {
    dmlc::LogCheckFormat<int,int>(&v39);
    if (v39)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v41);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
      v20 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v41);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Check failed: ", 14);
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"multiple_predictions <= 1", 25);
      v23 = *(char *)(v39 + 23);
      v24 = v23 >= 0 ? v39 : *(_QWORD *)v39;
      v25 = v23 >= 0 ? *(unsigned __int8 *)(v39 + 23) : *(_QWORD *)(v39 + 8);
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v24, v25);
      v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Perform one kind of prediction at a time.", 41);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v41);
      v28 = v39;
      v39 = 0;
      if (v28)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v39, v28);
    }
  }
  if (a9)
  {
    (*(void (**)(_QWORD *, xgboost::DMatrix *, uint64_t *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*a1[4] + 120))(a1[4], *a2, a4, a5, a6, a10, 0, 0);
  }
  else if (a11)
  {
    (*(void (**)(_QWORD *, xgboost::DMatrix *, uint64_t *, uint64_t, uint64_t, _QWORD))(*a1[4] + 128))(a1[4], *a2, a4, a5, a6, a10);
  }
  else if (a8)
  {
    (*(void (**)(_QWORD *, xgboost::DMatrix *, uint64_t *, uint64_t, uint64_t, _QWORD))(*a1[4] + 112))(a1[4], *a2, a4, a5, a6, a10);
  }
  else
  {
    v29 = (int8x8_t *)((uint64_t (*)(_QWORD **))(*a1)[31])(a1);
    v30 = (std::__shared_weak_count *)a2[1];
    v38[0] = (uint64_t)*a2;
    v38[1] = (uint64_t)v30;
    if (v30)
    {
      p_shared_owners = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(p_shared_owners);
      while (__stxr(v32 + 1, p_shared_owners));
    }
    v33 = (xgboost::PredictionCacheEntry *)xgboost::PredictionContainer::Cache(v29, v38, *((_DWORD *)a1 + 22));
    if (v30)
    {
      v34 = (unint64_t *)&v30->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    xgboost::LearnerImpl::PredictRaw((xgboost::LearnerImpl *)a1, *a2, v33, a7, a5, a6);
    v36 = (uint64_t)(*(_QWORD *)(*(_QWORD *)v33 + 8) - **(_QWORD **)v33) >> 2;
    LODWORD(v39) = 0;
    std::vector<float>::resize(*a4, v36, &v39);
    xgboost::HostDeviceVector<float>::Copy((void ***)a4, (const void ***)v33);
    if ((a3 & 1) == 0)
      (*(void (**)(_QWORD *, uint64_t *))(*a1[3] + 56))(a1[3], a4);
  }
}

void sub_220F0EDDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void xgboost::LearnerImpl::InplacePredict(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, uint64_t *a5, uint64_t a6, uint64_t a7, float a8)
{
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::string *Entry;
  _QWORD *v25;
  char v26;
  uint64_t v27;
  std::__shared_weak_count *v28;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1) + 144;
  v17 = *(_QWORD *)(a1 + 32);
  v18 = (std::__shared_weak_count *)a3[1];
  v27 = *a3;
  v28 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)v17 + 96))(v17, a2, &v27, v16, a6, a7, a8);
  v21 = v28;
  if (v28)
  {
    v22 = (unint64_t *)&v28->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (a4 != 1)
  {
    if (a4)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v26);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
      v25 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Unsupported prediction type:", 28);
      std::ostream::operator<<();
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v26);
    }
    else
    {
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 56))(*(_QWORD *)(a1 + 24), v16);
    }
  }
  *a5 = v16;
}

void sub_220F0EF88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

uint64_t xgboost::LearnerImpl::CalcFeatureScore(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];

  (*(void (**)(_QWORD *))(*a1 + 32))(a1);
  v10 = a1[4];
  v11 = a3[1];
  v13[0] = *a3;
  v13[1] = v11;
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v10 + 144))(v10, a2, v13, a4, a5);
}

uint64_t xgboost::LearnerImpl::BoostedRounds(xgboost::LearnerImpl *this)
{
  unsigned __int8 v2;
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  char v7;

  if (!*((_QWORD *)this + 4))
    return 0;
  v2 = atomic_load((unsigned __int8 *)this + 160);
  if ((v2 & 1) != 0)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
    v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: !this->need_configuration_", 40);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
  }
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 72))(*((_QWORD *)this + 4));
}

void sub_220F0F0C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

uint64_t xgboost::LearnerImpl::Groups(xgboost::LearnerImpl *this)
{
  unsigned __int8 v2;
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  char v7;

  v2 = atomic_load((unsigned __int8 *)this + 160);
  if ((v2 & 1) != 0)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
    v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: !this->need_configuration_", 40);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
  }
  return *((unsigned int *)this + 118);
}

void sub_220F0F15C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void xgboost::LearnerIO::LoadModel(xgboost::LearnerIO *this, void **a2)
{
  xgboost::LearnerIO *v3;
  char *v4;
  xgboost::LearnerTrainParam *v5;
  std::string *v6;
  size_t v7;
  char v8;
  std::string *v9;
  std::string *v10;
  int data;
  std::string *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v17;
  uint64_t v18;
  _QWORD *v19;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v20;
  std::pair<std::string, std::string> *v21;
  unsigned int *v22;
  unsigned int v23;
  int v24;
  std::string *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  int v29;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v34;
  const void **v35;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v36;
  char *v37;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 *v44;
  std::vector<std::pair<std::string, std::string>>::pointer end;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  std::pair<std::string, std::string> *v50;
  std::pair<std::string, std::string> *v51;
  uint64_t v52;
  std::pair<std::string, std::string> *v53;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v54;
  uint64_t end_high;
  unsigned int v56;
  BOOL v57;
  int v58;
  std::string *Entry;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  int v63;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer first;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v69;
  uint64_t v70;
  unsigned int v71;
  std::string *v72;
  _QWORD *v73;
  std::vector<std::pair<std::string, std::string>>::pointer begin;
  unsigned int *v75;
  unsigned int v76;
  unsigned int v77;
  std::pair<std::string, std::string> *v78;
  std::vector<std::pair<std::string, std::string>>::pointer v79;
  __int128 *v80;
  std::pair<std::string, std::string> *v81;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v82;
  std::pair<std::string, std::string> *v83;
  std::string *p_second;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v85;
  std::vector<std::pair<std::string, std::string>>::pointer v86;
  std::vector<std::pair<std::string, std::string>>::pointer v87;
  const void **v88;
  uint64_t v89;
  char *v90;
  int64_t size;
  std::vector<std::pair<std::string, std::string>>::pointer v92;
  char v93;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v94;
  int64_t v95;
  char *v96;
  char *v97;
  int v98;
  std::vector<std::pair<std::string, std::string>>::pointer v99;
  int64_t v100;
  std::pair<std::string, std::string> *v101;
  std::vector<std::pair<std::string, std::string>>::pointer v102;
  char *v103;
  const void **v104;
  _BOOL4 v105;
  void **v106;
  uint64_t *v107;
  std::vector<std::pair<std::string, std::string>>::pointer v108;
  std::string::size_type v109;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v110;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v111;
  const void **v112;
  uint64_t v113;
  char *v114;
  _BOOL4 v115;
  const std::string *v116;
  _OWORD *v117;
  char v118;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v119;
  size_t v120;
  const void *v121;
  float v122;
  __int16 v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v127;
  uint64_t v128;
  std::string::size_type v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int v132;
  uint64_t v133;
  __n128 v134;
  uint64_t v135;
  __int128 v136;
  std::vector<std::pair<std::string, std::string>>::pointer i;
  std::vector<std::pair<std::string, std::string>>::pointer v138;
  _OWORD *v139;
  char *v140;
  char *v141;
  char *v142;
  uint64_t *v143;
  void *Engine;
  std::string *v145;
  _QWORD *v146;
  _QWORD *v147;
  _QWORD *v148;
  std::string *v149;
  _QWORD *v150;
  _QWORD *v151;
  _QWORD *v152;
  const void **v153;
  xgboost::LearnerIO *v154;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer *v155;
  _DWORD *v156;
  void *v157;
  std::vector<std::pair<std::string, std::string>>::pointer v158;
  std::__split_buffer<std::pair<std::string, std::string>> __n[6];
  std::string v160;
  std::vector<std::pair<std::string, std::string>> v161;
  std::string v162;
  void **v163[2];
  __int128 v164;
  __int128 v165;
  _BYTE v166[31];
  __int128 *v167[3];

  v3 = this;
  v4 = (char *)this + 64;
  memset(__n, 0, 24);
  xgboost::XGBoostParameter<xgboost::GenericParameter>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::GenericParameter *)v166, (_BYTE *)this + 64, (uint64_t *)__n);
  v163[0] = (void **)v166;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](v163);
  v163[0] = (void **)__n;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](v163);
  memset(__n, 0, 24);
  xgboost::LearnerTrainParam::__MANAGER__(v5);
  v157 = (char *)v3 + 480;
  dmlc::parameter::ParamManager::RunInit<std::__wrap_iter<std::pair<std::string,std::string> const*>>(&stru_253F36BA8, (uint64_t)v3 + 480, (uint64_t)__n[0].__first_, (uint64_t)__n[0].__begin_, 0, 2);
  v163[0] = (void **)__n;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](v163);
  v163[0] = (void **)&off_24E6B8AC8;
  v163[1] = a2;
  v164 = 0u;
  v165 = 0u;
  memset(&v162, 0, sizeof(v162));
  std::string::resize(&v162, 4uLL, 0);
  if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &v162;
  else
    v6 = (std::string *)v162.__r_.__value_.__r.__words[0];
  v7 = xgboost::common::PeekableInStream::PeekRead((xgboost::common::PeekableInStream *)v163, v6, 4uLL);
  v8 = HIBYTE(v162.__r_.__value_.__r.__words[2]);
  if (v7 != 4)
  {
LABEL_28:
    if (v8 >= 0)
      v10 = &v162;
    else
      v10 = (std::string *)v162.__r_.__value_.__r.__words[0];
    goto LABEL_31;
  }
  if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v162.__r_.__value_.__l.__size_ != 4)
      goto LABEL_11;
    v9 = (std::string *)v162.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) != 4)
      goto LABEL_11;
    v9 = &v162;
  }
  if (LODWORD(v9->__r_.__value_.__l.__data_) == 875983714)
  {
    dmlc::LogCheckFormat<std::string,char [5]>((uint64_t)&v162, "bs64", (uint64_t *)__n);
    if (__n[0].__first_)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v161);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
      v60 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v161);
      v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"Check failed: ", 14);
      v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"header != \"bs64\"", 16);
      v63 = SHIBYTE(__n[0].__first_->first.__r_.__value_.__r.__words[2]);
      v64 = v63 >= 0
          ? __n[0].__first_
          : (std::__split_buffer<std::pair<std::string, std::string>>::pointer)__n[0].__first_->first.__r_.__value_.__r.__words[0];
      v65 = v63 >= 0
          ? HIBYTE(__n[0].__first_->first.__r_.__value_.__r.__words[2])
          : __n[0].__first_->first.__r_.__value_.__l.__size_;
      v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)v64, v65);
      v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"Base64 format is no longer supported in brick.", 46);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v161);
      first = __n[0].__first_;
      __n[0].__first_ = 0;
      if (first)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)__n, (uint64_t)first);
    }
  }
LABEL_11:
  if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
  {
    v10 = (std::string *)v162.__r_.__value_.__r.__words[0];
    if (v162.__r_.__value_.__l.__size_ != 4)
      goto LABEL_31;
    data = *(_DWORD *)v162.__r_.__value_.__l.__data_;
  }
  else
  {
    v10 = &v162;
    if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) != 4)
      goto LABEL_31;
    data = (int)v162.__r_.__value_.__l.__data_;
  }
  if (data == 1718511970)
  {
    v161.__begin_ = (std::vector<std::pair<std::string, std::string>>::pointer)xgboost::common::PeekableInStream::Read((xgboost::common::PeekableInStream *)v163, (char *)v10, 4uLL);
    LODWORD(v160.__r_.__value_.__l.__data_) = 4;
    if (v161.__begin_ != (std::vector<std::pair<std::string, std::string>>::pointer)4)
    {
      dmlc::LogCheckFormat<unsigned long,unsigned int>((uint64_t *)__n);
      if (__n[0].__first_)
      {
        v12 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v161);
        dmlc::LogMessageFatal::Entry::Init(v12, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
        v13 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v161);
        v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Check failed: ", 14);
        v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"fp.Read(&header[0], 4) == 4U", 28);
        v16 = SHIBYTE(__n[0].__first_->first.__r_.__value_.__r.__words[2]);
        v17 = v16 >= 0
            ? __n[0].__first_
            : (std::__split_buffer<std::pair<std::string, std::string>>::pointer)__n[0].__first_->first.__r_.__value_.__r.__words[0];
        v18 = v16 >= 0
            ? HIBYTE(__n[0].__first_->first.__r_.__value_.__r.__words[2])
            : __n[0].__first_->first.__r_.__value_.__l.__size_;
        v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v17, v18);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v161);
        v20 = __n[0].__first_;
        __n[0].__first_ = 0;
        if (v20)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)__n, (uint64_t)v20);
      }
    }
    v8 = HIBYTE(v162.__r_.__value_.__r.__words[2]);
    goto LABEL_28;
  }
LABEL_31:
  if (v10->__r_.__value_.__s.__data_[0] == 123)
  {
    xgboost::common::ReadAll((std::string *)__n, a2, (xgboost::common::PeekableInStream *)v163);
    v21 = (std::pair<std::string, std::string> *)operator new();
    v21->first.__r_.__value_.__l.__size_ = 0x600000000;
    v22 = (unsigned int *)&v21->first.__r_.__value_.__r.__words[1];
    v21->first.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24E6BE408;
    v161.__begin_ = v21;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
      v24 = *(unsigned __int8 *)(v162.__r_.__value_.__r.__words[0] + 1);
    else
      v24 = v162.__r_.__value_.__s.__data_[1];
    if (v24 == 34)
    {
      if (SHIBYTE(__n[0].__end_) >= 0)
        v54 = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)__n;
      else
        v54 = __n[0].__first_;
      if (SHIBYTE(__n[0].__end_) >= 0)
        end_high = HIBYTE(__n[0].__end_);
      else
        end_high = (uint64_t)__n[0].__begin_;
      xgboost::Json::Load((uint64_t)v54, end_high, 8, (unsigned int **)&v160);
      v161.__begin_ = (std::vector<std::pair<std::string, std::string>>::pointer)v160.__r_.__value_.__r.__words[0];
      v160.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
      do
      {
        v56 = __ldxr(v22);
        v57 = --v56 == 0;
      }
      while (__stlxr(v56, v22));
    }
    else
    {
      if ((v24 & 0x80) != 0)
        v58 = __maskrune((char)v24, 0x100uLL);
      else
        v58 = *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * (char)v24 + 60) & 0x100;
      if (!v58)
      {
        v72 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v160);
        dmlc::LogMessageFatal::Entry::Init(v72, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
        v73 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v160);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"Invalid model format", 20);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v160);
LABEL_109:
        (*(void (**)(xgboost::LearnerIO *, std::vector<std::pair<std::string, std::string>> *))(*(_QWORD *)v3 + 16))(v3, &v161);
        begin = v161.__begin_;
        if (v161.__begin_)
        {
          v75 = (unsigned int *)&v161.__begin_->first.__r_.__value_.__r.__words[1];
          do
          {
            v76 = __ldxr(v75);
            v77 = v76 - 1;
          }
          while (__stlxr(v77, v75));
          if (!v77)
          {
            __dmb(9u);
            (*(void (**)(std::vector<std::pair<std::string, std::string>>::pointer))(begin->first.__r_.__value_.__r.__words[0]
                                                                                              + 8))(begin);
          }
        }
        if (SHIBYTE(__n[0].__end_) < 0)
          operator delete(__n[0].__first_);
        goto LABEL_268;
      }
      if (SHIBYTE(__n[0].__end_) >= 0)
        v69 = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)__n;
      else
        v69 = __n[0].__first_;
      if (SHIBYTE(__n[0].__end_) >= 0)
        v70 = HIBYTE(__n[0].__end_);
      else
        v70 = (uint64_t)__n[0].__begin_;
      xgboost::Json::Load((uint64_t)v69, v70, 4, (unsigned int **)&v160);
      v161.__begin_ = (std::vector<std::pair<std::string, std::string>>::pointer)v160.__r_.__value_.__r.__words[0];
      v160.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
      do
      {
        v71 = __ldxr(v22);
        v57 = --v71 == 0;
      }
      while (__stlxr(v71, v22));
    }
    if (v57)
    {
      __dmb(9u);
      (*(void (**)(std::pair<std::string, std::string> *))(v21->first.__r_.__value_.__r.__words[0] + 8))(v21);
    }
    goto LABEL_109;
  }
  v156 = (_DWORD *)((char *)v3 + 328);
  v161.__begin_ = (std::vector<std::pair<std::string, std::string>>::pointer)(*(uint64_t (**)(void ***))v163[0])(v163);
  v160.__r_.__value_.__r.__words[0] = 136;
  if (v161.__begin_ != (std::vector<std::pair<std::string, std::string>>::pointer)136)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)__n);
    if (__n[0].__first_)
    {
      v25 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v161);
      dmlc::LogMessageFatal::Entry::Init(v25, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
      v26 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v161);
      v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Check failed: ", 14);
      v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"fi->Read(&mparam_, sizeof(mparam_)) == sizeof(mparam_)", 54);
      v29 = SHIBYTE(__n[0].__first_->first.__r_.__value_.__r.__words[2]);
      v30 = v29 >= 0
          ? __n[0].__first_
          : (std::__split_buffer<std::pair<std::string, std::string>>::pointer)__n[0].__first_->first.__r_.__value_.__r.__words[0];
      v31 = v29 >= 0
          ? HIBYTE(__n[0].__first_->first.__r_.__value_.__r.__words[2])
          : __n[0].__first_->first.__r_.__value_.__l.__size_;
      v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v30, v31);
      v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"BoostLearner: wrong model format", 32);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v161);
      v34 = __n[0].__first_;
      __n[0].__first_ = 0;
      if (v34)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)__n, (uint64_t)v34);
    }
  }
  if (!*((_DWORD *)v3 + 89))
    *((_DWORD *)v3 + 89) = 1;
  __n[0].__first_ = 0;
  v35 = (const void **)((char *)v3 + 520);
  if ((*(uint64_t (**)(void ***, std::__split_buffer<std::pair<std::string, std::string>> *, uint64_t))v163[0])(v163, __n, 8) != 8)goto LABEL_273;
  v36 = __n[0].__first_;
  std::string::resize((std::string *)((char *)v3 + 520), (std::string::size_type)__n[0].__first_, 0);
  if (__n[0].__first_)
  {
    v37 = (char *)v3 + 520;
    if (*((char *)v3 + 543) < 0)
      v37 = (char *)*v35;
    if ((std::__split_buffer<std::pair<std::string, std::string>>::pointer)(*(uint64_t (**)(void ***, char *, std::__split_buffer<std::pair<std::string, std::string>>::pointer))v163[0])(v163, v37, v36) != v36)
    {
LABEL_273:
      v145 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__n);
      dmlc::LogMessageFatal::Entry::Init(v145, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
      v146 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__n);
      v147 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v146, (uint64_t)"Check failed: fi->Read(&tparam_.objective)", 42);
      v148 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v147, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v148, (uint64_t)"BoostLearner: wrong model format", 32);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__n);
    }
  }
  __n[0].__first_ = 0;
  if ((*(uint64_t (**)(void ***, std::__split_buffer<std::pair<std::string, std::string>> *, uint64_t))v163[0])(v163, __n, 8) != 8)goto LABEL_274;
  v38 = __n[0].__first_;
  std::string::resize((std::string *)((char *)v3 + 496), (std::string::size_type)__n[0].__first_, 0);
  if (__n[0].__first_)
  {
    v39 = (char *)v3 + 496;
    if (*((char *)v3 + 519) < 0)
      v39 = (char *)*((_QWORD *)v3 + 62);
    if ((std::__split_buffer<std::pair<std::string, std::string>>::pointer)(*(uint64_t (**)(void ***, char *, std::__split_buffer<std::pair<std::string, std::string>>::pointer))v163[0])(v163, v39, v38) != v38)
    {
LABEL_274:
      v149 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__n);
      dmlc::LogMessageFatal::Entry::Init(v149, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
      v150 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__n);
      v151 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v150, (uint64_t)"Check failed: fi->Read(&tparam_.booster)", 40);
      v152 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v151, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v152, (uint64_t)"BoostLearner: wrong model format", 32);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__n);
    }
  }
  v40 = xgboost::ObjFunction::Create((const void **)v3 + 65, (uint64_t)v4);
  v41 = *((_QWORD *)v3 + 3);
  *((_QWORD *)v3 + 3) = v40;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  v155 = (std::__split_buffer<std::pair<std::string, std::string>>::pointer *)((char *)v3 + 464);
  v42 = xgboost::GradientBooster::Create((uint64_t)v3 + 496, (uint64_t)v4, (uint64_t)v3 + 464);
  v43 = *((_QWORD *)v3 + 4);
  *((_QWORD *)v3 + 4) = v42;
  if (v43)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
    v42 = *((_QWORD *)v3 + 4);
  }
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v42 + 40))(v42, v163);
  if (*((_DWORD *)v3 + 85))
  {
    v153 = (const void **)((char *)v3 + 520);
    v154 = v3;
    memset(&v161, 0, sizeof(v161));
    v167[0] = 0;
    if ((*(uint64_t (**)(void ***, __int128 **, uint64_t))v163[0])(v163, v167, 8) == 8)
    {
      v44 = v167[0];
      end = v161.__end_;
      v46 = (char *)(0xAAAAAAAAAAAAAAABLL * (((char *)v161.__end_ - (char *)v161.__begin_) >> 4));
      v47 = (char *)v167[0] - v46;
      if (v167[0] <= (__int128 *)v46)
      {
        if (v167[0] >= (__int128 *)v46)
        {
          v78 = v161.__end_;
        }
        else
        {
          v78 = &v161.__begin_[(uint64_t)v167[0]];
          if (v161.__end_ != v78)
          {
            do
              std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100]((uint64_t)&v161.__end_cap_, (uint64_t)--end);
            while (end != v78);
          }
          v161.__end_ = v78;
        }
        if (v78 == v161.__begin_)
          v79 = 0;
        else
          v79 = v161.__begin_;
        if (!v44)
          goto LABEL_141;
      }
      else
      {
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v161.__end_cap_.__value_ - (char *)v161.__end_) >> 4) >= v47)
        {
          bzero(v161.__end_, 48 * ((48 * v47 - 48) / 0x30) + 48);
          v53 = &end[(48 * v47 - 48) / 0x30 + 1];
          v161.__end_ = v53;
        }
        else
        {
          if (v167[0] > (__int128 *)0x555555555555555)
            std::vector<void *>::__throw_length_error[abi:ne180100]();
          v48 = 0x5555555555555556 * (((char *)v161.__end_cap_.__value_ - (char *)v161.__begin_) >> 4);
          if ((__int128 *)v48 <= v167[0])
            v48 = (unint64_t)v167[0];
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v161.__end_cap_.__value_ - (char *)v161.__begin_) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v49 = 0x555555555555555;
          else
            v49 = v48;
          __n[0].__end_cap_.__value_ = (std::allocator<std::pair<std::string, std::string>> *)&v161.__end_cap_;
          v50 = (std::pair<std::string, std::string> *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>((uint64_t)&v161.__end_cap_, v49);
          v51 = &v50[(_QWORD)v46];
          __n[0].__first_ = v50;
          __n[0].__begin_ = v51;
          __n[0].__end_cap_.__value_ = &v50[v52];
          bzero(v51, 48 * ((48 * v47 - 48) / 0x30) + 48);
          __n[0].__end_ = &v51[(48 * v47 - 48) / 0x30 + 1];
          std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(&v161, __n);
          std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(__n);
          v53 = v161.__end_;
        }
        if (v53 == v161.__begin_)
          v79 = 0;
        else
          v79 = v161.__begin_;
      }
      v80 = 0;
      do
      {
        __n[0].__first_ = 0;
        if ((*(uint64_t (**)(void ***, std::__split_buffer<std::pair<std::string, std::string>> *, uint64_t))v163[0])(v163, __n, 8) != 8)break;
        v81 = &v79[(_QWORD)v80];
        v82 = __n[0].__first_;
        std::string::resize(&v81->first, (std::string::size_type)__n[0].__first_, 0);
        if (__n[0].__first_)
        {
          v83 = &v79[(_QWORD)v80];
          if (SHIBYTE(v81->first.__r_.__value_.__r.__words[2]) < 0)
            v83 = (std::pair<std::string, std::string> *)v81->first.__r_.__value_.__r.__words[0];
          if ((std::__split_buffer<std::pair<std::string, std::string>>::pointer)(*(uint64_t (**)(void ***, std::pair<std::string, std::string> *, std::__split_buffer<std::pair<std::string, std::string>>::pointer))v163[0])(v163, v83, v82) != v82)break;
        }
        __n[0].__first_ = 0;
        if ((*(uint64_t (**)(void ***, std::__split_buffer<std::pair<std::string, std::string>> *, uint64_t))v163[0])(v163, __n, 8) != 8)break;
        p_second = &v79[(_QWORD)v80].second;
        v85 = __n[0].__first_;
        std::string::resize(p_second, (std::string::size_type)__n[0].__first_, 0);
        if (__n[0].__first_)
        {
          if (SHIBYTE(v81->second.__r_.__value_.__r.__words[2]) < 0)
            p_second = (std::string *)p_second->__r_.__value_.__r.__words[0];
          if ((std::__split_buffer<std::pair<std::string, std::string>>::pointer)(*(uint64_t (**)(void ***, std::string *, std::__split_buffer<std::pair<std::string, std::string>>::pointer))v163[0])(v163, p_second, v85) != v85)break;
        }
        v80 = (__int128 *)((char *)v80 + 1);
      }
      while (v80 != v44);
    }
LABEL_141:
    v86 = v161.__begin_;
    v87 = v161.__end_;
    if (v161.__begin_ != v161.__end_)
    {
      v88 = (const void **)((char *)v154 + 576);
      v89 = (uint64_t)v154 + 584;
      v90 = "SAVED_PARAM_";
      v158 = v161.__end_;
      while (1)
      {
        std::string::basic_string[abi:ne180100]<0>(__n, v90);
        if (SHIBYTE(v86->first.__r_.__value_.__r.__words[2]) < 0)
        {
          v92 = (std::vector<std::pair<std::string, std::string>>::pointer)v86->first.__r_.__value_.__r.__words[0];
          size = v86->first.__r_.__value_.__l.__size_;
        }
        else
        {
          size = HIBYTE(v86->first.__r_.__value_.__r.__words[2]);
          v92 = v86;
        }
        v93 = HIBYTE(__n[0].__end_);
        if (SHIBYTE(__n[0].__end_) >= 0)
          v94 = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)__n;
        else
          v94 = __n[0].__first_;
        if (SHIBYTE(__n[0].__end_) >= 0)
          v95 = HIBYTE(__n[0].__end_);
        else
          v95 = (int64_t)__n[0].__begin_;
        if (!v95)
        {
LABEL_165:
          std::string::basic_string(&v160, &v86->first, v95, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v167);
          v103 = (char *)*v88;
          if (*v88)
          {
            v104 = v88;
            do
            {
              v105 = std::less<std::string>::operator()[abi:ne180100](v89, (const void **)v103 + 4, (const void **)&v160.__r_.__value_.__l.__data_);
              v106 = (void **)(v103 + 8);
              if (!v105)
              {
                v106 = (void **)v103;
                v104 = (const void **)v103;
              }
              v103 = (char *)*v106;
            }
            while (*v106);
            if (v104 != v88
              && !std::less<std::string>::operator()[abi:ne180100](v89, (const void **)&v160.__r_.__value_.__l.__data_, v104 + 4))
            {
              v167[0] = (__int128 *)&v160;
              v107 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v154 + 21, (const void **)&v160.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v167);
              std::string::operator=((std::string *)(v107 + 7), &v86->second);
            }
          }
          if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v160.__r_.__value_.__l.__data_);
          v93 = HIBYTE(__n[0].__end_);
          goto LABEL_176;
        }
        if (size < v95)
          goto LABEL_176;
        v96 = v90;
        v97 = (char *)v92 + size;
        v98 = v94->first.__r_.__value_.__s.__data_[0];
        v99 = v92;
        while (1)
        {
          v100 = size - v95;
          if (v100 == -1 || (v101 = (std::pair<std::string, std::string> *)memchr(v99, v98, v100 + 1)) == 0)
          {
LABEL_159:
            v88 = (const void **)((char *)v154 + 576);
            v87 = v158;
            v90 = v96;
            goto LABEL_160;
          }
          v102 = v101;
          if (!memcmp(v101, v94, v95))
            break;
          v99 = (std::vector<std::pair<std::string, std::string>>::pointer)((char *)&v102->first.__r_.__value_.__l.__data_
                                                                          + 1);
          size = v97 - ((char *)&v102->first.__r_.__value_.__l.__data_ + 1);
          if (size < v95)
            goto LABEL_159;
        }
        v90 = v96;
        if (v102 == (std::vector<std::pair<std::string, std::string>>::pointer)v97)
        {
          v88 = (const void **)((char *)v154 + 576);
          v87 = v158;
LABEL_160:
          if ((v93 & 0x80) == 0)
            goto LABEL_178;
          goto LABEL_177;
        }
        v57 = v102 == v92;
        v88 = (const void **)((char *)v154 + 576);
        v87 = v158;
        if (v57)
          goto LABEL_165;
LABEL_176:
        if (v93 < 0)
LABEL_177:
          operator delete(__n[0].__first_);
LABEL_178:
        if (++v86 == v87)
        {
          v108 = v161.__begin_;
          v86 = v161.__end_;
          goto LABEL_182;
        }
      }
    }
    v108 = v161.__begin_;
LABEL_182:
    std::map<std::string,std::string>::map[abi:ne180100]<std::__wrap_iter<std::pair<std::string,std::string> *>>((uint64_t)__n, (const void **)&v108->first.__r_.__value_.__l.__data_, (const void **)&v86->first.__r_.__value_.__l.__data_);
    v3 = v154;
    v109 = (std::string::size_type)v154 + 200;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v154 + 192, *((_QWORD **)v154 + 25));
    v110 = __n[0].__begin_;
    *((_QWORD *)v154 + 24) = __n[0].__first_;
    *((_QWORD *)v154 + 25) = v110;
    v111 = __n[0].__end_;
    *((_QWORD *)v154 + 26) = __n[0].__end_;
    if (v111)
    {
      v110->first.__r_.__value_.__r.__words[2] = v109;
      __n[0].__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)&__n[0].__begin_;
      __n[0].__begin_ = 0;
      __n[0].__end_ = 0;
      v110 = 0;
    }
    else
    {
      *((_QWORD *)v154 + 24) = v109;
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)__n, v110);
    __n[0].__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)&v161;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)__n);
    v35 = v153;
  }
  std::string::basic_string[abi:ne180100]<0>(__n, "count_poisson_max_delta_step");
  v112 = v35;
  v113 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)v3 + 192, (const void **)&__n[0].__first_);
  v114 = (char *)v3 + 200;
  v115 = (xgboost::LearnerIO *)((char *)v3 + 200) != (xgboost::LearnerIO *)v113;
  if (SHIBYTE(__n[0].__end_) < 0)
    operator delete(__n[0].__first_);
  if (v114 != (char *)v113)
  {
    std::string::basic_string[abi:ne180100]<0>(__n, "count_poisson_max_delta_step");
    v116 = (const std::string *)std::map<std::string,xgboost::Json>::at((uint64_t)v3 + 192, (const void **)&__n[0].__first_);
    std::string::basic_string[abi:ne180100]<0>(&v161, "max_delta_step");
    v160.__r_.__value_.__r.__words[0] = (std::string::size_type)&v161;
    v117 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v3 + 21, (const void **)&v161.__begin_, (uint64_t)&std::piecewise_construct, &v160);
    std::string::operator=((std::string *)((char *)v117 + 56), v116);
    if (SHIBYTE(v161.__end_cap_.__value_) < 0)
      operator delete(v161.__begin_);
    if (SHIBYTE(__n[0].__end_) < 0)
      operator delete(__n[0].__first_);
    std::string::basic_string[abi:ne180100]<0>(__n, "count_poisson_max_delta_step");
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__erase_unique<std::string>((uint64_t **)v3 + 24, (const void **)&__n[0].__first_);
    if (SHIBYTE(__n[0].__end_) < 0)
      operator delete(__n[0].__first_);
  }
  if (!*((_DWORD *)v3 + 87))
  {
    std::string::basic_string[abi:ne180100]<0>(__n, "multi:");
    v118 = HIBYTE(__n[0].__end_);
    if (SHIBYTE(__n[0].__end_) >= 0)
      v119 = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)__n;
    else
      v119 = __n[0].__first_;
    if (SHIBYTE(__n[0].__end_) >= 0)
      v120 = HIBYTE(__n[0].__end_);
    else
      v120 = (size_t)__n[0].__begin_;
    if (*((char *)v3 + 543) < 0)
      v121 = *v112;
    else
      v121 = v112;
    if (memcmp(v119, v121, v120))
    {
      xgboost::HostDeviceVector<float>::HostDeviceVector(&v161, 0, 0.0);
      std::vector<float>::resize((uint64_t)v161.__begin_, 1uLL);
      if (v161.__begin_->first.__r_.__value_.__l.__size_ == v161.__begin_->first.__r_.__value_.__r.__words[0])
        std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_out_of_range[abi:ne180100]();
      *(_DWORD *)v161.__begin_->first.__r_.__value_.__l.__data_ = *((_DWORD *)v3 + 82);
      (*(void (**)(_QWORD, std::vector<std::pair<std::string, std::string>> *))(**((_QWORD **)v3 + 3) + 56))(*((_QWORD *)v3 + 3), &v161);
      if (v161.__begin_->first.__r_.__value_.__l.__size_ == v161.__begin_->first.__r_.__value_.__r.__words[0])
        std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_out_of_range[abi:ne180100]();
      *v156 = *(_DWORD *)v161.__begin_->first.__r_.__value_.__l.__data_;
      xgboost::HostDeviceVector<float>::~HostDeviceVector((uint64_t *)&v161);
      v118 = HIBYTE(__n[0].__end_);
    }
    if (v118 < 0)
      operator delete(__n[0].__first_);
    v115 = 1;
  }
  v122 = (*(float (**)(_QWORD, float))(**((_QWORD **)v3 + 3) + 72))(*((_QWORD *)v3 + 3), *((float *)v3 + 82));
  v123 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v3 + 3) + 80))(*((_QWORD *)v3 + 3));
  xgboost::LearnerModelParam::LearnerModelParam((uint64_t)__n, v156, v123, v122);
  *v155 = __n[0].__first_;
  *(std::__split_buffer<std::pair<std::string, std::string>>::pointer *)((char *)v155 + 6) = *(std::__split_buffer<std::pair<std::string, std::string>>::pointer *)((char *)&__n[0].__first_ + 6);
  std::string::basic_string[abi:ne180100]<0>(__n, "objective");
  v124 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)v3 + 192, (const void **)&__n[0].__first_);
  if (SHIBYTE(__n[0].__end_) < 0)
    operator delete(__n[0].__first_);
  if (v114 == (char *)v124)
  {
    v115 = 1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v161, "objective");
    v125 = std::map<std::string,xgboost::Json>::at((uint64_t)v3 + 192, (const void **)&v161.__begin_);
    if (*(char *)(v125 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)__n, *(const std::string::value_type **)v125, *(_QWORD *)(v125 + 8));
    }
    else
    {
      v126 = *(_OWORD *)v125;
      __n[0].__end_ = *(std::__split_buffer<std::pair<std::string, std::string>>::pointer *)(v125 + 16);
      *(_OWORD *)&__n[0].__first_ = v126;
    }
    if (SHIBYTE(v161.__end_cap_.__value_) < 0)
      operator delete(v161.__begin_);
    if (SHIBYTE(__n[0].__end_) >= 0)
      v127 = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)__n;
    else
      v127 = __n[0].__first_;
    if (SHIBYTE(__n[0].__end_) >= 0)
      v128 = HIBYTE(__n[0].__end_);
    else
      v128 = (uint64_t)__n[0].__begin_;
    xgboost::Json::Load((uint64_t)v127, v128, 8, (unsigned int **)&v160);
    (*(void (**)(_QWORD, std::string *))(**((_QWORD **)v3 + 3) + 16))(*((_QWORD *)v3 + 3), &v160);
    std::string::basic_string[abi:ne180100]<0>(&v161, "objective");
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__erase_unique<std::string>((uint64_t **)v3 + 24, (const void **)&v161.__begin_);
    if (SHIBYTE(v161.__end_cap_.__value_) < 0)
      operator delete(v161.__begin_);
    v129 = v160.__r_.__value_.__r.__words[0];
    if (v160.__r_.__value_.__r.__words[0])
    {
      v130 = (unsigned int *)(v160.__r_.__value_.__r.__words[0] + 8);
      do
      {
        v131 = __ldxr(v130);
        v132 = v131 - 1;
      }
      while (__stlxr(v132, v130));
      if (!v132)
      {
        __dmb(9u);
        (*(void (**)(std::string::size_type))(*(_QWORD *)v129 + 8))(v129);
      }
    }
    if (SHIBYTE(__n[0].__end_) < 0)
      operator delete(__n[0].__first_);
  }
  std::string::basic_string[abi:ne180100]<0>(__n, "metrics");
  v133 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)v3 + 192, (const void **)&__n[0].__first_);
  if (SHIBYTE(__n[0].__end_) < 0)
    operator delete(__n[0].__first_);
  if (v114 == (char *)v133)
    goto LABEL_249;
  std::string::basic_string[abi:ne180100]<0>(&v161, "metrics");
  v135 = std::map<std::string,xgboost::Json>::at((uint64_t)v3 + 192, (const void **)&v161.__begin_);
  if (*(char *)(v135 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)__n, *(const std::string::value_type **)v135, *(_QWORD *)(v135 + 8));
  }
  else
  {
    v136 = *(_OWORD *)v135;
    __n[0].__end_ = *(std::__split_buffer<std::pair<std::string, std::string>>::pointer *)(v135 + 16);
    *(_OWORD *)&__n[0].__first_ = v136;
  }
  if (SHIBYTE(v161.__end_cap_.__value_) < 0)
    operator delete(v161.__begin_);
  xgboost::common::Split((const std::string *)__n, 0x3Bu, (uint64_t *)&v161);
  std::string::basic_string[abi:ne180100]<0>(&v160, "metrics");
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__erase_unique<std::string>((uint64_t **)v3 + 24, (const void **)&v160.__r_.__value_.__l.__data_);
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v160.__r_.__value_.__l.__data_);
  v138 = v161.__begin_;
  for (i = v161.__end_; v138 != i; v138 = (std::vector<std::pair<std::string, std::string>>::pointer)((char *)v138 + 24))
    (*(void (**)(xgboost::LearnerIO *, __int128 *, std::vector<std::pair<std::string, std::string>>::pointer))(*(_QWORD *)v3 + 128))(v3, &xgboost::LearnerConfiguration::kEvalMetric, v138);
  v160.__r_.__value_.__r.__words[0] = (std::string::size_type)&v161;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v160);
  if (SHIBYTE(__n[0].__end_) < 0)
  {
    operator delete(__n[0].__first_);
    if (v115)
      goto LABEL_250;
  }
  else
  {
LABEL_249:
    if (v115)
    {
LABEL_250:
      if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst(v134) + 4) >= 1)
      {
        std::string::basic_string[abi:ne180100]<0>(&v161, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
        xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)__n, (uint64_t)&v161, 940, 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__n, (uint64_t)"Loading model from XGBoost < 1.0.0, consider saving it again for improved compatibility", 87);
        xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)__n);
        if (SHIBYTE(v161.__end_cap_.__value_) < 0)
          operator delete(v161.__begin_);
      }
    }
  }
  *(_QWORD *)((char *)v3 + 348) = 0x600000001;
  xgboost::common::ToString<int>();
  std::string::basic_string[abi:ne180100]<0>(&v161, "num_class");
  v160.__r_.__value_.__r.__words[0] = (std::string::size_type)&v161;
  v139 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v3 + 21, (const void **)&v161.__begin_, (uint64_t)&std::piecewise_construct, &v160);
  v140 = (char *)v139 + 56;
  if (*((char *)v139 + 79) < 0)
    operator delete(*(void **)v140);
  *(_OWORD *)v140 = *(_OWORD *)&__n[0].__first_;
  *((_QWORD *)v140 + 2) = __n[0].__end_;
  HIBYTE(__n[0].__end_) = 0;
  LOBYTE(__n[0].__first_) = 0;
  if (SHIBYTE(v161.__end_cap_.__value_) < 0)
  {
    operator delete(v161.__begin_);
    if (SHIBYTE(__n[0].__end_) < 0)
      operator delete(__n[0].__first_);
  }
  xgboost::common::ToString<unsigned int>();
  std::string::basic_string[abi:ne180100]<0>(&v161, "num_feature");
  v160.__r_.__value_.__r.__words[0] = (std::string::size_type)&v161;
  v141 = (char *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v3 + 21, (const void **)&v161.__begin_, (uint64_t)&std::piecewise_construct, &v160);
  v142 = v141 + 56;
  if (v141[79] < 0)
    operator delete(*(void **)v142);
  *(_OWORD *)v142 = *(_OWORD *)&__n[0].__first_;
  *((_QWORD *)v142 + 2) = __n[0].__end_;
  HIBYTE(__n[0].__end_) = 0;
  LOBYTE(__n[0].__first_) = 0;
  if (SHIBYTE(v161.__end_cap_.__value_) < 0)
  {
    operator delete(v161.__begin_);
    if (SHIBYTE(__n[0].__end_) < 0)
      operator delete(__n[0].__first_);
  }
  xgboost::LearnerTrainParam::__MANAGER__((xgboost::LearnerTrainParam *)v141);
  dmlc::parameter::ParamManager::GetDict((dmlc::parameter::ParamManager *)&stru_253F36BA8, v157, (std::vector<std::pair<std::string, std::string>> *)__n);
  std::map<std::string,std::string>::map[abi:ne180100]<std::__wrap_iter<std::pair<std::string,std::string> *>>((uint64_t)&v161, (const void **)&__n[0].__first_->first.__r_.__value_.__l.__data_, (const void **)&__n[0].__begin_->first.__r_.__value_.__l.__data_);
  v160.__r_.__value_.__r.__words[0] = (std::string::size_type)__n;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v160);
  v143 = std::map<std::string,std::string>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t *)v3 + 21, (const void **)&v161.__begin_->first.__r_.__value_.__l.__data_, (const void ***)&v161.__end_);
  if (!*((_DWORD *)v3 + 121))
  {
    Engine = rabit::engine::GetEngine((rabit::engine *)v143);
    if ((*(unsigned int (**)(void *))(*(_QWORD *)Engine + 80))(Engine))
      *((_DWORD *)v3 + 121) = 2;
  }
  atomic_store(1u, (unsigned __int8 *)v3 + 160);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v161, v161.__end_->first.__r_.__value_.__r.__words);
LABEL_268:
  if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v162.__r_.__value_.__l.__data_);
  v163[0] = (void **)&off_24E6B8AC8;
  if (SHIBYTE(v165) < 0)
    operator delete(*((void **)&v164 + 1));
}

void sub_220F10580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__split_buffer<std::pair<std::string, std::string>> *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  uint64_t v52;

  if (*(char *)(v52 - 201) < 0)
    operator delete(*(void **)(v52 - 224));
  *(_QWORD *)(v52 - 200) = &off_24E6B8AC8;
  if (*(char *)(v52 - 153) < 0)
    operator delete(*(void **)(v52 - 176));
  _Unwind_Resume(exception_object);
}

void xgboost::LearnerIO::SaveModel(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _QWORD *v8;
  unsigned int *v9;
  std::pair<std::string, std::string> *value;
  std::allocator<std::pair<std::string, std::string>> *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  std::vector<std::pair<std::string, std::string>>::pointer end;
  std::pair<std::string, std::string> *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  std::pair<std::string, std::string> *v24;
  void *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  _QWORD *v29;
  _QWORD *i;
  const char *v31;
  size_t v32;
  _QWORD *v33;
  std::vector<std::pair<std::string, std::string>>::pointer v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  std::pair<std::string, std::string> *v38;
  std::pair<std::string, std::string> *v39;
  __int128 v40;
  std::pair<std::string, std::string> *v41;
  std::pair<std::string, std::string> *v42;
  void *p_v;
  std::pair<std::string, std::string> *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  std::pair<std::string, std::string> *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  __int128 *begin;
  std::vector<std::pair<std::string, std::string>>::pointer j;
  uint64_t *v54;
  const std::string *v55;
  _QWORD *v56;
  int64_t v57;
  void **v58;
  int v59;
  _QWORD *v60;
  uint64_t v61;
  void **v62;
  int v63;
  char *v64;
  uint64_t v65;
  void *__p[2];
  std::string::size_type v67;
  std::__split_buffer<std::pair<std::string, std::string>> __v;
  void *v69;
  char v70;
  uint64_t v71;
  unsigned int *v72;
  std::vector<std::pair<std::string, std::string>> v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  std::__split_buffer<std::pair<std::string, std::string>> v83;
  unint64_t v84;
  void **v85;

  v82 = *(_QWORD *)(a1 + 456);
  v4 = *(_OWORD *)(a1 + 440);
  v80 = *(_OWORD *)(a1 + 424);
  v81 = v4;
  v5 = *(_OWORD *)(a1 + 376);
  v76 = *(_OWORD *)(a1 + 360);
  v77 = v5;
  v6 = *(_OWORD *)(a1 + 408);
  v78 = *(_OWORD *)(a1 + 392);
  v79 = v6;
  v7 = *(_OWORD *)(a1 + 344);
  v74 = *(_OWORD *)(a1 + 328);
  v75 = v7;
  memset(&v73, 0, sizeof(v73));
  HIDWORD(v74) = 1;
  memset(&__v, 0, 24);
  v83.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)&__v;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v83);
  __v.__begin_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)0x300000000;
  __v.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)&off_24E6BE1D0;
  __v.__end_cap_.__value_ = 0;
  __v.__end_cap_.__value_ = 0;
  __v.__end_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)&__v.__end_cap_;
  v8 = (_QWORD *)operator new();
  v8[1] = 0x300000000;
  v9 = (unsigned int *)(v8 + 1);
  *v8 = &off_24E6BE1D0;
  value = __v.__end_cap_.__value_;
  v8[2] = __v.__end_;
  v8[3] = value;
  v11 = __v.__end_cap_.__value_;
  __v.__end_cap_.__value_ = 0;
  __v.__end_cap_.__value_ = 0;
  v8[4] = v11;
  __v.__end_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)&__v.__end_cap_;
  if (!v11)
    value = (std::pair<std::string, std::string> *)v8;
  value->first.__r_.__value_.__r.__words[2] = (std::string::size_type)(v8 + 3);
  __p[0] = v8;
  do
    v12 = __ldxr(v9);
  while (__stxr(v12 + 1, v9));
  __v.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)&off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&__v.__end_, __v.__end_cap_.__value_->first.__r_.__value_.__r.__words);
  (*(void (**)(_QWORD, void **))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24), __p);
  memset(&v83, 0, 24);
  v13 = (unsigned int *)__p[0];
  v72 = (unsigned int *)__p[0];
  if (__p[0])
  {
    v14 = (unsigned int *)((char *)__p[0] + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  xgboost::Json::Dump(&v72, (std::string *)&v83, 16);
  if (v13)
  {
    v16 = v13 + 2;
    do
    {
      v17 = __ldxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      __dmb(9u);
      (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 8))(v13);
    }
  }
  end = v73.__end_;
  if (v73.__end_ >= v73.__end_cap_.__value_)
  {
    v21 = 0xAAAAAAAAAAAAAAABLL * (((char *)v73.__end_ - (char *)v73.__begin_) >> 4);
    if (v21 + 1 > 0x555555555555555)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v22 = 0x5555555555555556 * (((char *)v73.__end_cap_.__value_ - (char *)v73.__begin_) >> 4);
    if (v22 <= v21 + 1)
      v22 = v21 + 1;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v73.__end_cap_.__value_ - (char *)v73.__begin_) >> 4) >= 0x2AAAAAAAAAAAAAALL)
      v23 = 0x555555555555555;
    else
      v23 = v22;
    __v.__end_cap_.__value_ = (std::allocator<std::pair<std::string, std::string>> *)&v73.__end_cap_;
    if (v23)
      v24 = (std::pair<std::string, std::string> *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>((uint64_t)&v73.__end_cap_, v23);
    else
      v24 = 0;
    __v.__first_ = v24;
    __v.__begin_ = v24 + v21;
    __v.__end_ = __v.__begin_;
    __v.__end_cap_.__value_ = &v24[v23];
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],std::string&,0>(__v.__begin_->first.__r_.__value_.__r.__words, (__int128 *)&v83);
    ++__v.__end_;
    std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(&v73, &__v);
    v20 = v73.__end_;
    std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(&__v);
  }
  else
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],std::string&,0>(v73.__end_->first.__r_.__value_.__r.__words, (__int128 *)&v83);
    v20 = end + 1;
  }
  v73.__end_ = v20;
  if (SHIBYTE(v83.__end_) < 0)
    operator delete(v83.__first_);
  v25 = __p[0];
  if (__p[0])
  {
    v26 = (unsigned int *)((char *)__p[0] + 8);
    do
    {
      v27 = __ldxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      __dmb(9u);
      (*(void (**)(void *))(*(_QWORD *)v25 + 8))(v25);
    }
  }
  if ((_DWORD)v75)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__v);
    v29 = *(_QWORD **)(a1 + 40);
    for (i = *(_QWORD **)(a1 + 48); v29 != i; ++v29)
    {
      v31 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v29 + 48))(*v29);
      v32 = strlen(v31);
      v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__v.__end_, (uint64_t)v31, v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)";", 1);
    }
    std::stringbuf::str();
    v34 = v73.__end_;
    if (v73.__end_ >= v73.__end_cap_.__value_)
    {
      v35 = 0xAAAAAAAAAAAAAAABLL * (((char *)v73.__end_ - (char *)v73.__begin_) >> 4);
      if (v35 + 1 > 0x555555555555555)
        std::vector<void *>::__throw_length_error[abi:ne180100]();
      v36 = 0x5555555555555556 * (((char *)v73.__end_cap_.__value_ - (char *)v73.__begin_) >> 4);
      if (v36 <= v35 + 1)
        v36 = v35 + 1;
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v73.__end_cap_.__value_ - (char *)v73.__begin_) >> 4) >= 0x2AAAAAAAAAAAAAALL)
        v37 = 0x555555555555555;
      else
        v37 = v36;
      v83.__end_cap_.__value_ = (std::allocator<std::pair<std::string, std::string>> *)&v73.__end_cap_;
      if (v37)
        v38 = (std::pair<std::string, std::string> *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>((uint64_t)&v73.__end_cap_, v37);
      else
        v38 = 0;
      v83.__first_ = v38;
      v83.__begin_ = v38 + v35;
      v83.__end_ = v83.__begin_;
      v83.__end_cap_.__value_ = &v38[v37];
      std::string::basic_string[abi:ne180100]<0>(v83.__begin_->first.__r_.__value_.__r.__words, "metrics");
      v39 = v38 + v35;
      v40 = *(_OWORD *)__p;
      v39->second.__r_.__value_.__r.__words[2] = v67;
      *(_OWORD *)&v39->second.__r_.__value_.__l.__data_ = v40;
      __p[1] = 0;
      v67 = 0;
      __p[0] = 0;
      ++v83.__end_;
      std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(&v73, &v83);
      v41 = v73.__end_;
      std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(&v83);
      v73.__end_ = v41;
      if (SHIBYTE(v67) < 0)
        operator delete(__p[0]);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v73.__end_->first.__r_.__value_.__r.__words, "metrics");
      *(_OWORD *)&v34->second.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v34->second.__r_.__value_.__r.__words[2] = v67;
      v73.__end_ = v34 + 1;
    }
    __v.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)*MEMORY[0x24BEDB7F0];
    v42 = *(std::pair<std::string, std::string> **)(MEMORY[0x24BEDB7F0] + 72);
    *(std::__split_buffer<std::pair<std::string, std::string>>::pointer *)((char *)&__v.__first_
                                                                         + __v.__first_[-1].second.__r_.__value_.__r.__words[0]) = *(std::__split_buffer<std::pair<std::string, std::string>>::pointer *)(MEMORY[0x24BEDB7F0] + 64);
    __v.__end_ = v42;
    __v.__end_cap_.__value_ = (std::pair<std::string, std::string> *)(MEMORY[0x24BEDB848] + 16);
    if (v70 < 0)
      operator delete(v69);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227666FE4](&v71);
  }
  std::string::basic_string[abi:ne180100]<0>(&__v, "binf");
  if (SHIBYTE(__v.__end_) >= 0)
    p_v = &__v;
  else
    p_v = __v.__first_;
  (*(void (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a2 + 8))(a2, p_v, 4);
  (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v74, 136);
  v44 = (std::pair<std::string, std::string> *)*(unsigned __int8 *)(a1 + 543);
  if ((char)v44 < 0)
    v44 = *(std::pair<std::string, std::string> **)(a1 + 528);
  v83.__first_ = v44;
  (*(void (**)(uint64_t, std::__split_buffer<std::pair<std::string, std::string>> *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v83, 8);
  if (v83.__first_)
  {
    v45 = *(char *)(a1 + 543);
    if (v45 >= 0)
      v46 = a1 + 520;
    else
      v46 = *(_QWORD *)(a1 + 520);
    if (v45 >= 0)
      v47 = *(unsigned __int8 *)(a1 + 543);
    else
      v47 = *(_QWORD *)(a1 + 528);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 8))(a2, v46, v47);
  }
  v48 = (std::pair<std::string, std::string> *)*(unsigned __int8 *)(a1 + 519);
  if ((char)v48 < 0)
    v48 = *(std::pair<std::string, std::string> **)(a1 + 504);
  v83.__first_ = v48;
  (*(void (**)(uint64_t, std::__split_buffer<std::pair<std::string, std::string>> *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v83, 8);
  if (v83.__first_)
  {
    v49 = *(char *)(a1 + 519);
    if (v49 >= 0)
      v50 = a1 + 496;
    else
      v50 = *(_QWORD *)(a1 + 496);
    if (v49 >= 0)
      v51 = *(unsigned __int8 *)(a1 + 519);
    else
      v51 = *(_QWORD *)(a1 + 504);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 8))(a2, v50, v51);
  }
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 48))(*(_QWORD *)(a1 + 32), a2);
  if (HIDWORD(v74))
  {
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t *)&v83, (const void ***)(a1 + 192));
    begin = (__int128 *)v73.__begin_;
    for (j = v73.__end_; begin != (__int128 *)j; begin = (__int128 *)&v55[1])
    {
      v85 = (void **)begin;
      v54 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v83, (const void **)begin, (uint64_t)&std::piecewise_construct, (__int128 **)&v85);
      v55 = (const std::string *)((char *)begin + 24);
      std::string::operator=((std::string *)(v54 + 7), v55);
    }
    std::vector<std::pair<std::string,std::string>>::vector<std::__map_iterator<std::__tree_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,0>(__p, v83.__first_->first.__r_.__value_.__r.__words, &v83.__begin_);
    v84 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 4);
    (*(void (**)(uint64_t, unint64_t *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v84, 8);
    if (__p[1] == __p[0])
      v56 = 0;
    else
      v56 = __p[0];
    if (__p[1] != __p[0])
    {
      v57 = ((char *)__p[1] - (char *)__p[0]) / 48;
      do
      {
        v58 = (void **)*((unsigned __int8 *)v56 + 23);
        if ((char)v58 < 0)
          v58 = (void **)v56[1];
        v85 = v58;
        (*(void (**)(uint64_t, void ***, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v85, 8);
        if (v85)
        {
          v59 = *((char *)v56 + 23);
          if (v59 >= 0)
            v60 = v56;
          else
            v60 = (_QWORD *)*v56;
          if (v59 >= 0)
            v61 = *((unsigned __int8 *)v56 + 23);
          else
            v61 = v56[1];
          (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a2 + 8))(a2, v60, v61);
        }
        v62 = (void **)*((unsigned __int8 *)v56 + 47);
        if ((char)v62 < 0)
          v62 = (void **)v56[4];
        v85 = v62;
        (*(void (**)(uint64_t, void ***, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v85, 8);
        if (v85)
        {
          v63 = *((char *)v56 + 47);
          if (v63 >= 0)
            v64 = (char *)(v56 + 3);
          else
            v64 = (char *)v56[3];
          if (v63 >= 0)
            v65 = *((unsigned __int8 *)v56 + 47);
          else
            v65 = v56[4];
          (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)a2 + 8))(a2, v64, v65);
        }
        v56 += 6;
        --v57;
      }
      while (v57);
    }
    v85 = __p;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v85);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v83, v83.__begin_->first.__r_.__value_.__r.__words);
  }
  if (SHIBYTE(__v.__end_) < 0)
    operator delete(__v.__first_);
  __v.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)&v73;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_220F110B8(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, std::__split_buffer<std::pair<std::string, std::string>> *a7, uint64_t a8, char *__pa, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  if (SHIBYTE(a11) < 0)
    operator delete(__pa);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a12);
  __pa = &a48;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(__p);
}

uint64_t xgboost::LearnerConfiguration::SetParams(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = result;
    do
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 128))(v4, v2, v2 + 24);
      v2 += 48;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t xgboost::LearnerConfiguration::SetParam(uint64_t result, unsigned __int8 *a2, std::string *a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  unsigned __int8 *v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 v15;
  std::string::size_type size;
  std::string *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  __int128 *v22;

  v5 = result;
  atomic_store(1u, (unsigned __int8 *)(result + 160));
  v6 = a2[23];
  v7 = *((_QWORD *)a2 + 1);
  if ((v6 & 0x80u) == 0)
    v8 = a2[23];
  else
    v8 = *((_QWORD *)a2 + 1);
  v9 = *((_QWORD *)&xgboost::LearnerConfiguration::kEvalMetric + 1);
  if (byte_253F376EF >= 0)
    v9 = byte_253F376EF;
  if (v8 != v9)
    goto LABEL_17;
  if (byte_253F376EF >= 0)
    v10 = &xgboost::LearnerConfiguration::kEvalMetric;
  else
    v10 = (__int128 *)xgboost::LearnerConfiguration::kEvalMetric;
  if ((v6 & 0x80) != 0)
  {
    result = memcmp(*(const void **)a2, v10, v7);
    if (!(_DWORD)result)
      goto LABEL_19;
LABEL_17:
    v22 = (__int128 *)a2;
    v12 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v5 + 168), (const void **)a2, (uint64_t)&std::piecewise_construct, &v22);
    return (uint64_t)std::string::operator=((std::string *)(v12 + 7), a3);
  }
  if ((_DWORD)v6)
  {
    v11 = a2;
    while (*v11 == *(unsigned __int8 *)v10)
    {
      ++v11;
      v10 = (__int128 *)((char *)v10 + 1);
      if (!--v6)
        goto LABEL_19;
    }
    goto LABEL_17;
  }
LABEL_19:
  v13 = *(_QWORD *)(v5 + 544);
  v14 = *(_QWORD *)(v5 + 552);
  if (v13 != v14)
  {
    v15 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    if ((v15 & 0x80u) == 0)
      size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    else
      size = a3->__r_.__value_.__l.__size_;
    if ((v15 & 0x80u) == 0)
      v17 = a3;
    else
      v17 = (std::string *)a3->__r_.__value_.__r.__words[0];
    do
    {
      v18 = *(unsigned __int8 *)(v13 + 23);
      if ((v18 & 0x80u) == 0)
        v19 = *(unsigned __int8 *)(v13 + 23);
      else
        v19 = *(_QWORD *)(v13 + 8);
      if (v19 == size)
      {
        if ((v18 & 0x80) != 0)
        {
          result = memcmp(*(const void **)v13, v17, *(_QWORD *)(v13 + 8));
          if (!(_DWORD)result)
            goto LABEL_39;
        }
        else
        {
          if (!*(_BYTE *)(v13 + 23))
            goto LABEL_39;
          v20 = 0;
          while (*(unsigned __int8 *)(v13 + v20) == v17->__r_.__value_.__s.__data_[v20])
          {
            if (v18 == ++v20)
              goto LABEL_39;
          }
        }
      }
      v13 += 24;
    }
    while (v13 != v14);
    v13 = v14;
  }
LABEL_39:
  if (v13 == v14)
  {
    v21 = (uint64_t *)(v5 + 544);
    if (v14 >= *(_QWORD *)(v5 + 560))
    {
      result = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(v21, (__int128 *)a3);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v21, (__int128 *)a3);
      result = v14 + 24;
    }
    *(_QWORD *)(v5 + 552) = result;
  }
  return result;
}

uint64_t xgboost::LearnerConfiguration::GetNumFeature(xgboost::LearnerConfiguration *this)
{
  return *((unsigned int *)this + 117);
}

std::string *xgboost::LearnerConfiguration::SetAttr(uint64_t a1, __int128 *a2, const std::string *a3)
{
  uint64_t *v5;
  std::string *result;
  __int128 *v7;

  v7 = a2;
  v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 192), (const void **)a2, (uint64_t)&std::piecewise_construct, &v7);
  result = std::string::operator=((std::string *)(v5 + 7), a3);
  *(_DWORD *)(a1 + 340) = 1;
  return result;
}

uint64_t xgboost::LearnerConfiguration::GetAttr(uint64_t a1, const void **a2, std::string *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t *v10;

  v3 = a1 + 200;
  v4 = *(_QWORD *)(a1 + 200);
  if (!v4)
    return 0;
  v7 = a1 + 208;
  v8 = a1 + 200;
  do
  {
    v9 = std::less<std::string>::operator()[abi:ne180100](v7, (const void **)(v4 + 32), a2);
    v10 = (uint64_t *)(v4 + 8);
    if (!v9)
    {
      v10 = (uint64_t *)v4;
      v8 = v4;
    }
    v4 = *v10;
  }
  while (*v10);
  if (v8 == v3 || std::less<std::string>::operator()[abi:ne180100](v7, a2, (const void **)(v8 + 32)))
    return 0;
  std::string::operator=(a3, (const std::string *)(v8 + 56));
  return 1;
}

BOOL xgboost::LearnerConfiguration::DelAttr(uint64_t a1, const void **a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;

  v3 = (uint64_t **)(a1 + 192);
  v4 = (uint64_t *)std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(a1 + 192, a2);
  v5 = (uint64_t *)(a1 + 200);
  if (v5 != v4)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer(v3, v4);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v4 + 4));
    operator delete(v4);
  }
  return v5 != v4;
}

void xgboost::LearnerConfiguration::GetAttrNames(xgboost::LearnerConfiguration *this@<X0>, uint64_t *a2@<X8>)
{
  char *v2;
  char *v3;
  unint64_t v5;
  __int128 *v6;
  char *v7;
  char *v8;
  BOOL v9;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = (char *)*((_QWORD *)this + 24);
  v3 = (char *)this + 200;
  if (v2 != (char *)this + 200)
  {
    v5 = 0;
    do
    {
      v6 = (__int128 *)(v2 + 32);
      if (v5 >= a2[2])
      {
        v5 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(a2, v6);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a2, v6);
        v5 += 24;
      }
      a2[1] = v5;
      v7 = (char *)*((_QWORD *)v2 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (char *)*((_QWORD *)v2 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v2;
          v2 = v8;
        }
        while (!v9);
      }
      v2 = v8;
    }
    while (v8 != v3);
  }
}

void sub_220F11654(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void xgboost::LearnerConfiguration::SetFeatureNames(std::vector<std::string> *a1, uint64_t a2)
{
  std::vector<std::string> *v2;

  v2 = a1 + 9;
  if (v2 != (std::vector<std::string> *)a2)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v2, *(std::string **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
}

void xgboost::LearnerConfiguration::GetFeatureNames(uint64_t a1, std::vector<std::string> *this)
{
  if ((std::vector<std::string> *)(a1 + 216) != this)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(this, *(std::string **)(a1 + 216), *(__int128 **)(a1 + 224), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 224) - *(_QWORD *)(a1 + 216)) >> 3));
}

void xgboost::LearnerConfiguration::SetFeatureTypes(std::vector<std::string> *a1, uint64_t a2)
{
  std::vector<std::string> *v2;

  v2 = a1 + 10;
  if (v2 != (std::vector<std::string> *)a2)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v2, *(std::string **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
}

void xgboost::LearnerConfiguration::GetFeatureTypes(uint64_t a1, std::vector<std::string> *this)
{
  if ((std::vector<std::string> *)(a1 + 240) != this)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(this, *(std::string **)(a1 + 240), *(__int128 **)(a1 + 248), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 248) - *(_QWORD *)(a1 + 240)) >> 3));
}

unint64_t xgboost::LearnerImpl::Slice(xgboost::LearnerImpl *this, uint64_t a2, uint64_t a3, uint64_t a4, BOOL *a5)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int *v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  int v22;
  std::string *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  void **v28;
  void *v29;
  _QWORD *v30;
  void **v31;
  uint64_t *v32;
  uint64_t *v33;
  _QWORD *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  std::string *Entry;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  int v43;
  void **v44;
  void *v45;
  _QWORD *v46;
  void **v47;
  std::string *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  int v52;
  void **v53;
  void *v54;
  _QWORD *v55;
  void **v56;
  std::string *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  int v61;
  void **v62;
  void *v63;
  _QWORD *v64;
  void **v65;
  void *v66[2];
  char v67;
  void *__p[2];
  char v69;
  void **v70[2];
  _QWORD **v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75[3];
  int v76;

  (*(void (**)(xgboost::LearnerImpl *))(*(_QWORD *)this + 32))(this);
  LODWORD(v74) = 0;
  if (!*((_DWORD *)this + 117))
  {
    dmlc::LogCheckFormat<unsigned int,int>((uint64_t *)v70);
    if (v70[0])
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v74);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
      v40 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v74);
      v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Check failed: ", 14);
      v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"this->learner_model_param_.num_feature != 0", 43);
      v43 = *((char *)v70[0] + 23);
      v44 = v43 >= 0 ? v70[0] : (void **)*v70[0];
      v45 = v43 >= 0 ? (void *)*((unsigned __int8 *)v70[0] + 23) : v70[0][1];
      v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v44, (uint64_t)v45);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v74);
      v47 = v70[0];
      v70[0] = 0;
      if (v47)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v70, (uint64_t)v47);
    }
  }
  LODWORD(v74) = a2;
  v76 = 0;
  if ((a2 & 0x80000000) != 0)
  {
    dmlc::LogCheckFormat<int,int>((uint64_t *)v70);
    if (v70[0])
    {
      v48 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v74);
      dmlc::LogMessageFatal::Entry::Init(v48, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
      v49 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v74);
      v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"Check failed: ", 14);
      v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"begin_layer >= 0", 16);
      v52 = *((char *)v70[0] + 23);
      v53 = v52 >= 0 ? v70[0] : (void **)*v70[0];
      v54 = v52 >= 0 ? (void *)*((unsigned __int8 *)v70[0] + 23) : v70[0][1];
      v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)v53, (uint64_t)v54);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v74);
      v56 = v70[0];
      v70[0] = 0;
      if (v56)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v70, (uint64_t)v56);
    }
  }
  v10 = operator new();
  memset(v75, 0, sizeof(v75));
  xgboost::LearnerImpl::LearnerImpl(v10, v75);
  v70[0] = (void **)v75;
  std::vector<std::shared_ptr<xgboost::DMatrix>>::__destroy_vector::operator()[abi:ne180100](v70);
  *(_QWORD *)(v10 + 464) = *((_QWORD *)this + 58);
  *(_QWORD *)(v10 + 470) = *(_QWORD *)((char *)this + 470);
  *(_OWORD *)(v10 + 64) = *((_OWORD *)this + 4);
  *(_OWORD *)(v10 + 78) = *(_OWORD *)((char *)this + 78);
  v11 = xgboost::GradientBooster::Create((uint64_t)this + 496, v10 + 64, v10 + 464);
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, BOOL *))(**((_QWORD **)this + 4) + 56))(*((_QWORD *)this + 4), a2, a3, a4, v11, a5);
  v12 = *(_QWORD *)(v10 + 32);
  *(_QWORD *)(v10 + 32) = v11;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v70[1] = (void **)0x300000000;
  v70[0] = (void **)&off_24E6BE1D0;
  v72 = 0;
  v73 = 0;
  v71 = &v72;
  v13 = (_QWORD *)operator new();
  v13[1] = 0x300000000;
  v14 = (unsigned int *)(v13 + 1);
  *v13 = &off_24E6BE1D0;
  v15 = v72;
  v13[2] = v71;
  v13[3] = v15;
  v16 = v73;
  v72 = 0;
  v73 = 0;
  v13[4] = v16;
  v71 = &v72;
  if (!v16)
    v15 = v13;
  v15[2] = v13 + 3;
  v74 = v13;
  do
    v17 = __ldxr(v14);
  while (__stxr(v17 + 1, v14));
  v70[0] = (void **)&off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&v71, v72);
  (*(void (**)(xgboost::LearnerImpl *, _QWORD **))(*(_QWORD *)this + 264))(this, &v74);
  *(_QWORD *)(v10 + 456) = *((_QWORD *)this + 57);
  v18 = *(_OWORD *)((char *)this + 440);
  *(_OWORD *)(v10 + 424) = *(_OWORD *)((char *)this + 424);
  *(_OWORD *)(v10 + 440) = v18;
  v19 = *(_OWORD *)((char *)this + 376);
  *(_OWORD *)(v10 + 360) = *(_OWORD *)((char *)this + 360);
  *(_OWORD *)(v10 + 376) = v19;
  v20 = *(_OWORD *)((char *)this + 408);
  *(_OWORD *)(v10 + 392) = *(_OWORD *)((char *)this + 392);
  *(_OWORD *)(v10 + 408) = v20;
  v21 = *(_OWORD *)((char *)this + 344);
  *(_OWORD *)(v10 + 328) = *(_OWORD *)((char *)this + 328);
  *(_OWORD *)(v10 + 344) = v21;
  if ((xgboost::LearnerImpl *)v10 != this)
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(v10 + 192), *((__int128 **)this + 24), (__int128 *)((char *)this + 200));
  (*(void (**)(unint64_t, char *))(*(_QWORD *)v10 + 176))(v10, (char *)this + 216);
  (*(void (**)(unint64_t, char *))(*(_QWORD *)v10 + 192))(v10, (char *)this + 240);
  (*(void (**)(unint64_t, _QWORD **))(*(_QWORD *)v10 + 256))(v10, &v74);
  (*(void (**)(unint64_t))(*(_QWORD *)v10 + 32))(v10);
  v22 = *(_DWORD *)(v10 + 468);
  if (v22 != *((_DWORD *)this + 117))
  {
    dmlc::LogCheckFormat<unsigned int,unsigned int>((uint64_t *)v70);
    if (v70[0])
    {
      v23 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v76);
      dmlc::LogMessageFatal::Entry::Init(v23, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
      v24 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v76);
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Check failed: ", 14);
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"out_impl->learner_model_param_.num_feature == this->learner_model_param_.num_feature", 84);
      v27 = *((char *)v70[0] + 23);
      v28 = v27 >= 0 ? v70[0] : (void **)*v70[0];
      v29 = v27 >= 0 ? (void *)*((unsigned __int8 *)v70[0] + 23) : v70[0][1];
      v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v28, (uint64_t)v29);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v76);
      v31 = v70[0];
      v70[0] = 0;
      if (v31)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v70, (uint64_t)v31);
    }
    v22 = *(_DWORD *)(v10 + 468);
  }
  v76 = 0;
  if (!v22)
  {
    dmlc::LogCheckFormat<unsigned int,int>((uint64_t *)v70);
    if (v70[0])
    {
      v57 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v76);
      dmlc::LogMessageFatal::Entry::Init(v57, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
      v58 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v76);
      v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Check failed: ", 14);
      v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"out_impl->learner_model_param_.num_feature != 0", 47);
      v61 = *((char *)v70[0] + 23);
      v62 = v61 >= 0 ? v70[0] : (void **)*v70[0];
      v63 = v61 >= 0 ? (void *)*((unsigned __int8 *)v70[0] + 23) : v70[0][1];
      v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)v62, (uint64_t)v63);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v76);
      v65 = v70[0];
      v70[0] = 0;
      if (v65)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v70, (uint64_t)v65);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "best_iteration");
  v32 = (uint64_t *)std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(v10 + 192, (const void **)__p);
  if ((uint64_t *)(v10 + 200) != v32)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer((uint64_t **)(v10 + 192), v32);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v32 + 4));
    operator delete(v32);
  }
  if (v69 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(v66, "best_score");
  v33 = (uint64_t *)std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(v10 + 192, (const void **)v66);
  if ((uint64_t *)(v10 + 200) != v33)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer((uint64_t **)(v10 + 192), v33);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v33 + 4));
    operator delete(v33);
  }
  if (v67 < 0)
    operator delete(v66[0]);
  v34 = v74;
  if (v74)
  {
    v35 = (unsigned int *)(v74 + 1);
    do
    {
      v36 = __ldxr(v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v35));
    if (!v37)
    {
      __dmb(9u);
      (*(void (**)(_QWORD *))(*v34 + 8))(v34);
    }
  }
  return v10;
}

void sub_220F11D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,unsigned int *a26)
{
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;

  if (a26)
  {
    v27 = a26 + 2;
    do
    {
      v28 = __ldxr(v27);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v27));
    if (!v29)
    {
      __dmb(9u);
      (*(void (**)(unsigned int *))(*(_QWORD *)a26 + 8))(a26);
    }
  }
  _Unwind_Resume(exception_object);
}

void xgboost::LearnerImpl::DumpModel(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  std::string __p;

  (*(void (**)(_QWORD *))(*a1 + 32))(a1);
  v8 = a1[4];
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    __p = *(std::string *)a4;
  (*(void (**)(uint64_t, uint64_t, uint64_t, std::string *))(*(_QWORD *)v8 + 136))(v8, a2, a3, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_220F11F58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char **xgboost::LearnerImpl::GetThreadLocal(xgboost::LearnerImpl *this)
{
  uint64_t v2;
  char *v3;
  char **v4;
  char **v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10[2];
  char v11;

  v2 = dmlc::ThreadLocalStore<std::map<xgboost::Learner const*,xgboost::XGBAPIThreadLocalEntry>>::Get();
  v3 = *(char **)(v2 + 8);
  v4 = (char **)(v2 + 8);
  v5 = (char **)(v2 + 8);
  if (v3)
  {
    while (1)
    {
      while (1)
      {
        v5 = (char **)v3;
        v6 = *((_QWORD *)v3 + 4);
        if (v6 <= (unint64_t)this)
          break;
        v3 = *v5;
        v4 = v5;
        if (!*v5)
          goto LABEL_8;
      }
      if (v6 >= (unint64_t)this)
        break;
      v3 = v5[1];
      if (!v3)
      {
        v4 = v5 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    v7 = (char *)operator new(0xF0uLL);
    v10[0] = (uint64_t)v7;
    v10[1] = v2 + 8;
    *((_QWORD *)v7 + 4) = this;
    *(_OWORD *)(v7 + 56) = 0u;
    *(_OWORD *)(v7 + 72) = 0u;
    *(_OWORD *)(v7 + 88) = 0u;
    *(_OWORD *)(v7 + 104) = 0u;
    *(_OWORD *)(v7 + 120) = 0u;
    *(_OWORD *)(v7 + 136) = 0u;
    *(_OWORD *)(v7 + 152) = 0u;
    *(_OWORD *)(v7 + 168) = 0u;
    *(_OWORD *)(v7 + 184) = 0u;
    *(_OWORD *)(v7 + 200) = 0u;
    *(_OWORD *)(v7 + 216) = 0u;
    *((_QWORD *)v7 + 29) = 0;
    *(_OWORD *)(v7 + 40) = 0u;
    xgboost::XGBAPIThreadLocalEntry::XGBAPIThreadLocalEntry((xgboost::XGBAPIThreadLocalEntry *)(v7 + 40));
    v11 = 1;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v5;
    *v4 = v7;
    v8 = **(_QWORD **)v2;
    if (v8)
    {
      *(_QWORD *)v2 = v8;
      v7 = *v4;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 8), (uint64_t *)v7);
    ++*(_QWORD *)(v2 + 16);
    v5 = (char **)v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>,void *>>>>::reset[abi:ne180100](v10);
  }
  return v5 + 5;
}

void sub_220F1209C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>,void *>>>>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t xgboost::LearnerConfiguration::Ctx(xgboost::LearnerConfiguration *this)
{
  return (uint64_t)this + 64;
}

uint64_t xgboost::LearnerImpl::GetConfigurationArguments(xgboost::LearnerImpl *this)
{
  return (uint64_t)this + 168;
}

char *xgboost::LearnerConfiguration::GetPredictionCache(xgboost::LearnerConfiguration *this)
{
  uint64_t **v2;
  xgboost::LearnerConfiguration *v4;

  v2 = (uint64_t **)dmlc::ThreadLocalStore<std::map<xgboost::Learner const*,xgboost::PredictionContainer>>::Get();
  v4 = this;
  return std::__tree<std::__value_type<xgboost::Learner const*,xgboost::PredictionContainer>,std::__map_value_compare<xgboost::Learner const*,std::__value_type<xgboost::Learner const*,xgboost::PredictionContainer>,std::less<xgboost::Learner const*>,true>,std::allocator<std::__value_type<xgboost::Learner const*,xgboost::PredictionContainer>>>::__emplace_unique_key_args<xgboost::Learner const*,std::piecewise_construct_t const&,std::tuple<xgboost::Learner const*&&>,std::tuple<>>(v2, (unint64_t)this, &v4)+ 40;
}

void xgboost::LearnerConfiguration::LoadConfig(xgboost::LearnerConfiguration *this, const xgboost::Json *a2)
{
  _DWORD **v4;
  char *v5;
  _DWORD **v6;
  xgboost::LearnerTrainParam *v7;
  _QWORD *v8;
  _QWORD *v9;
  char *v10;
  uint64_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD **v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  std::vector<std::string>::size_type v27;
  _QWORD *v28;
  __n128 v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  std::vector<std::string>::size_type v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  _QWORD *v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t i;
  int v53;
  _QWORD *v54;
  _DWORD **v55;
  char *v56;
  uint64_t j;
  _DWORD **v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _DWORD **v65;
  xgboost::GenericParameter *v66;
  _QWORD *v67;
  _QWORD *v68;
  char *v69;
  uint64_t *v70;
  _QWORD *v71;
  _QWORD *v72;
  std::string *Entry;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  std::vector<std::pair<std::string, std::string>> v79;
  void *__p;
  __int128 v81;
  uint64_t v82;
  char *v83;
  const void *v84[2];
  char v85;
  std::vector<std::pair<std::string, std::string>> v86;
  __int128 *v87[2];

  if (*(_DWORD *)(*(_QWORD *)a2 + 12) != 3)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
    v74 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"Check failed: IsA<Object>(in)", 29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
  }
  xgboost::Version::Load(a2, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, "learner");
  v4 = (_DWORD **)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &__p);
  v5 = (char *)xgboost::Cast<xgboost::JsonObject,xgboost::Value>(*v4) + 16;
  if (SHIBYTE(v81) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(v84, "learner_train_param");
  v6 = (_DWORD **)std::map<std::string,xgboost::Json>::at((uint64_t)v5, v84);
  v7 = (xgboost::LearnerTrainParam *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*v6);
  v81 = 0uLL;
  __p = &v81;
  v8 = (_QWORD *)*((_QWORD *)v7 + 2);
  v9 = (_QWORD *)((char *)v7 + 24);
  if (v8 != (_QWORD *)((char *)v7 + 24))
  {
    do
    {
      v10 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>((_DWORD *)v8[7]);
      v87[0] = (__int128 *)(v8 + 4);
      v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&__p, (const void **)v8 + 4, (uint64_t)&std::piecewise_construct, v87);
      v7 = (xgboost::LearnerTrainParam *)std::string::operator=((std::string *)(v11 + 7), (const std::string *)(v10 + 16));
      v12 = (_QWORD *)v8[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v8[2];
          v14 = *v13 == (_QWORD)v8;
          v8 = v13;
        }
        while (!v14);
      }
      v8 = v13;
    }
    while (v13 != v9);
  }
  if (*((_BYTE *)this + 480))
  {
    memset(&v86, 0, sizeof(v86));
    xgboost::LearnerTrainParam::__MANAGER__(v7);
    dmlc::parameter::ParamManager::RunUpdate<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&stru_253F36BA8, (uint64_t)this + 480, __p, &v81, 0, &v86, 0);
  }
  else
  {
    memset(&v86, 0, sizeof(v86));
    xgboost::LearnerTrainParam::__MANAGER__(v7);
    dmlc::parameter::ParamManager::RunInit<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&stru_253F36BA8, (uint64_t)this + 480, __p, &v81, &v86, 0);
    *((_BYTE *)this + 480) = 1;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&__p, (_QWORD *)v81);
  __p = &v86;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v85 < 0)
    operator delete((void *)v84[0]);
  std::string::basic_string[abi:ne180100]<0>(&__p, "gradient_booster");
  v15 = (_QWORD *)std::map<std::string,xgboost::Json>::at((uint64_t)v5, (const void **)&__p);
  if (SHIBYTE(v81) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "objective");
  v16 = std::map<std::string,xgboost::Json>::at((uint64_t)v5, (const void **)&__p);
  if (SHIBYTE(v81) < 0)
    operator delete(__p);
  v17 = *((_QWORD *)this + 3);
  if (!v17)
  {
    v17 = xgboost::ObjFunction::Create((const void **)this + 65, (uint64_t)this + 64);
    v18 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v17;
    if (v18)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      v17 = *((_QWORD *)this + 3);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v16);
  *((_WORD *)this + 238) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 80))(*((_QWORD *)this + 3));
  std::string::basic_string[abi:ne180100]<0>(&__p, "name");
  v19 = (_DWORD **)(*(uint64_t (**)(_QWORD, void **))(*(_QWORD *)*v15 + 24))(*v15, &__p);
  v20 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>(*v19);
  std::string::operator=((std::string *)((char *)this + 496), (const std::string *)(v20 + 16));
  if (SHIBYTE(v81) < 0)
    operator delete(__p);
  v21 = *((_QWORD *)this + 4);
  if (!v21)
  {
    v21 = xgboost::GradientBooster::Create((uint64_t)this + 496, (uint64_t)this + 64, (uint64_t)this + 464);
    v22 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v21;
    if (v22)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
      v21 = *((_QWORD *)this + 4);
    }
  }
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(v21 + 8) + 16))(v21 + 8, v15);
  std::string::basic_string[abi:ne180100]<0>(&__p, "metrics");
  v23 = (_QWORD *)std::map<std::string,xgboost::Json>::at((uint64_t)v5, (const void **)&__p);
  v76 = (uint64_t)v5;
  if (SHIBYTE(v81) < 0)
    operator delete(__p);
  v24 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>((_DWORD *)*v23);
  v25 = v24[2];
  v26 = v24[3];
  v27 = (v26 - v25) >> 3;
  v28 = (_QWORD *)((char *)this + 544);
  std::vector<std::string>::resize((std::vector<std::string> *)((char *)this + 544), v27);
  v30 = *((_QWORD *)this + 5);
  v31 = (_QWORD *)*((_QWORD *)this + 6);
  v32 = ((uint64_t)v31 - v30) >> 3;
  if (v27 <= v32)
  {
    if (v27 < v32)
    {
      v46 = (_QWORD *)(v30 + 8 * v27);
      while (v31 != v46)
      {
        v48 = *--v31;
        v47 = v48;
        *v31 = 0;
        if (v48)
          (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
      }
      *((_QWORD *)this + 6) = v46;
    }
  }
  else
  {
    v33 = v27 - v32;
    v34 = *((_QWORD *)this + 7);
    if (v27 - v32 <= (v34 - (uint64_t)v31) >> 3)
    {
      bzero(*((void **)this + 6), 8 * v33);
      *((_QWORD *)this + 6) = &v31[v33];
    }
    else
    {
      v77 = v26;
      if (v26 - v25 < 0)
        std::vector<void *>::__throw_length_error[abi:ne180100]();
      v35 = v34 - v30;
      v36 = v35 >> 2;
      if (v35 >> 2 <= v27)
        v36 = (v26 - v25) >> 3;
      if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
        v37 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v37 = v36;
      v83 = (char *)this + 56;
      v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v37);
      v39 = (_QWORD *)*((_QWORD *)this + 5);
      v40 = (_QWORD *)*((_QWORD *)this + 6);
      v41 = &v38[8 * v32];
      v43 = &v38[8 * v42];
      bzero(v41, 8 * v33);
      v44 = &v41[8 * v33];
      while (v40 != v39)
      {
        v45 = *--v40;
        *v40 = 0;
        *((_QWORD *)v41 - 1) = v45;
        v41 -= 8;
      }
      v49 = *(_OWORD *)((char *)this + 40);
      *((_QWORD *)this + 5) = v41;
      *((_QWORD *)this + 6) = v44;
      v81 = v49;
      v50 = *((_QWORD *)this + 7);
      *((_QWORD *)this + 7) = v43;
      v82 = v50;
      __p = (void *)v49;
      std::__split_buffer<std::unique_ptr<xgboost::RegTree>>::~__split_buffer((uint64_t)&__p);
      v26 = v77;
    }
  }
  if (v26 != v25)
  {
    if (v27 <= 1)
      v51 = 1;
    else
      v51 = v27;
    v78 = dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst(v29);
    for (i = 0; i != v51; ++i)
    {
      v53 = *(_DWORD *)(*(_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v23 + 32))(*v23, i) + 12);
      if (v53)
      {
        v54 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v23 + 32))(*v23, i);
        std::string::basic_string[abi:ne180100]<0>(&__p, "name");
        v55 = (_DWORD **)(*(uint64_t (**)(_QWORD, void **))(*(_QWORD *)*v54 + 24))(*v54, &__p);
        v56 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>(*v55);
        std::string::operator=((std::string *)(*v28 + 24 * i), (const std::string *)(v56 + 16));
        if (SHIBYTE(v81) < 0)
          operator delete(__p);
      }
      else
      {
        if (*(int *)(v78 + 4) >= 1)
        {
          std::string::basic_string[abi:ne180100]<0>(v84, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
          xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)&__p, (uint64_t)v84, 438, 1);
          for (j = 0; j != 381; ++j)
            std::ostream::put();
          xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)&__p);
          if (v85 < 0)
            operator delete((void *)v84[0]);
        }
        v58 = (_DWORD **)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v23 + 32))(*v23, i);
        v59 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>(*v58);
        std::string::operator=((std::string *)(*v28 + 24 * i), (const std::string *)(v59 + 16));
      }
      v60 = xgboost::Metric::Create(*((_QWORD *)this + 68) + 24 * i, (uint64_t)this + 64);
      v61 = *((_QWORD *)this + 5);
      v62 = *(_QWORD *)(v61 + 8 * i);
      *(_QWORD *)(v61 + 8 * i) = v60;
      if (v62)
        (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
      if (v53)
      {
        v63 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * i);
        v64 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v23 + 32))(*v23, i);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v63 + 16))(v63, v64);
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v84, "generic_param");
  v65 = (_DWORD **)std::map<std::string,xgboost::Json>::at(v76, v84);
  v66 = (xgboost::GenericParameter *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*v65);
  v81 = 0uLL;
  __p = &v81;
  v67 = (_QWORD *)*((_QWORD *)v66 + 2);
  v68 = (_QWORD *)((char *)v66 + 24);
  if (v67 != (_QWORD *)((char *)v66 + 24))
  {
    do
    {
      v69 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>((_DWORD *)v67[7]);
      v87[0] = (__int128 *)(v67 + 4);
      v70 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&__p, (const void **)v67 + 4, (uint64_t)&std::piecewise_construct, v87);
      v66 = (xgboost::GenericParameter *)std::string::operator=((std::string *)(v70 + 7), (const std::string *)(v69 + 16));
      v71 = (_QWORD *)v67[1];
      if (v71)
      {
        do
        {
          v72 = v71;
          v71 = (_QWORD *)*v71;
        }
        while (v71);
      }
      else
      {
        do
        {
          v72 = (_QWORD *)v67[2];
          v14 = *v72 == (_QWORD)v67;
          v67 = v72;
        }
        while (!v14);
      }
      v67 = v72;
    }
    while (v72 != v68);
  }
  if (*((_BYTE *)this + 64))
  {
    memset(&v79, 0, sizeof(v79));
    xgboost::GenericParameter::__MANAGER__(v66);
    dmlc::parameter::ParamManager::RunUpdate<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&stru_253F36BF0, (uint64_t)this + 64, __p, &v81, 0, &v79, 0);
  }
  else
  {
    memset(&v79, 0, sizeof(v79));
    xgboost::GenericParameter::__MANAGER__(v66);
    dmlc::parameter::ParamManager::RunInit<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&stru_253F36BF0, (uint64_t)this + 64, __p, &v81, &v79, 0);
    *((_BYTE *)this + 64) = 1;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&__p, (_QWORD *)v81);
  __p = &v79;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v85 < 0)
    operator delete((void *)v84[0]);
  xgboost::GenericParameter::ConfigureGpuId((xgboost::LearnerConfiguration *)((char *)this + 64));
  atomic_store(1u, (unsigned __int8 *)this + 160);
}

void sub_220F12928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  _Unwind_Resume(a1);
}

void xgboost::LearnerConfiguration::SaveConfig(xgboost::LearnerConfiguration *this, xgboost::Json *a2)
{
  unsigned __int8 v4;
  unsigned int **v5;
  xgboost::LearnerTrainParam *v6;
  xgboost::LearnerTrainParam *v7;
  _QWORD **v8;
  uint64_t *v9;
  _QWORD *v10;
  _QWORD **v11;
  BOOL v12;
  unsigned int **v13;
  void **v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int **v19;
  uint64_t v20;
  unsigned int **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  _QWORD *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t *v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  xgboost::GenericParameter *v39;
  _QWORD **v40;
  uint64_t *v41;
  _QWORD *v42;
  _QWORD **v43;
  unsigned int **v44;
  std::string *Entry;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  __int128 v49;
  uint64_t v50;
  void *__p;
  uint64_t v52;
  uint64_t *v53;
  _QWORD *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  void *v58[2];
  uint64_t v59;
  _QWORD **v60;
  _QWORD *v61[2];
  __int128 *v62[2];

  v4 = atomic_load((unsigned __int8 *)this + 160);
  if ((v4 & 1) != 0)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v56);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
    v46 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v56);
    v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"Check failed: !this->need_configuration_", 40);
    v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"Call Configure before saving model.", 35);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v56);
  }
  xgboost::Version::Save(a2, a2);
  v57 = 0x300000000;
  v56 = &off_24E6BE1D0;
  v58[1] = 0;
  v59 = 0;
  v58[0] = &v58[1];
  std::string::basic_string[abi:ne180100]<0>(&__p, "learner");
  v5 = (unsigned int **)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &__p);
  xgboost::Json::operator=(v5, (uint64_t)&v56);
  if (SHIBYTE(v53) < 0)
    operator delete(__p);
  v56 = &off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)v58, (_QWORD *)v58[1]);
  std::string::basic_string[abi:ne180100]<0>(&v56, "learner");
  v6 = (xgboost::LearnerTrainParam *)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v56);
  v7 = v6;
  if (SHIBYTE(v58[0]) < 0)
    operator delete(v56);
  v52 = 0x300000000;
  __p = &off_24E6BE1D0;
  v54 = 0;
  v55 = 0;
  v53 = (uint64_t *)&v54;
  xgboost::LearnerTrainParam::__MANAGER__(v6);
  dmlc::parameter::ParamManager::GetDict((dmlc::parameter::ParamManager *)&stru_253F36BA8, (char *)this + 480, (std::vector<std::pair<std::string, std::string>> *)&v56);
  std::map<std::string,std::string>::map[abi:ne180100]<std::__wrap_iter<std::pair<std::string,std::string> *>>((uint64_t)&v60, (const void **)v56, (const void **)v57);
  *(_QWORD *)&v49 = &v56;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
  v8 = v60;
  if (v60 != v61)
  {
    do
    {
      xgboost::JsonString::JsonString(&v56, (__int128 *)(v8 + 7));
      *(_QWORD *)&v49 = v8 + 4;
      v9 = std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v53, (const void **)v8 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)&v49);
      xgboost::Json::operator=(v9 + 7, (uint64_t)&v56);
      v56 = off_24E6BE2B8;
      if (SHIBYTE(v59) < 0)
        operator delete(v58[0]);
      v10 = v8[1];
      if (v10)
      {
        do
        {
          v11 = (_QWORD **)v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD **)v8[2];
          v12 = *v11 == v8;
          v8 = v11;
        }
        while (!v12);
      }
      v8 = v11;
    }
    while (v11 != v61);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v60, v61[0]);
  std::string::basic_string[abi:ne180100]<0>(&v56, "learner_train_param");
  v13 = (unsigned int **)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)v7 + 24))(*(_QWORD *)v7, &v56);
  xgboost::Json::operator=(v13, (uint64_t)&__p);
  if (SHIBYTE(v58[0]) < 0)
    operator delete(v56);
  __p = &off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&v53, v54);
  xgboost::LearnerModelParamLegacy::ToJson((xgboost::LearnerModelParamLegacy *)&__p, (uint64_t)this + 328);
  std::string::basic_string[abi:ne180100]<0>(&v56, "learner_model_param");
  v14 = (void **)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)v7 + 24))(*(_QWORD *)v7, &v56);
  v15 = (unsigned int *)*v14;
  *v14 = __p;
  __p = v15;
  if (SHIBYTE(v58[0]) < 0)
    operator delete(v56);
  if (v15)
  {
    v16 = v15 + 2;
    do
    {
      v17 = __ldxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      __dmb(9u);
      (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 8))(v15);
    }
  }
  v57 = 0x300000000;
  v56 = &off_24E6BE1D0;
  v58[1] = 0;
  v59 = 0;
  v58[0] = &v58[1];
  std::string::basic_string[abi:ne180100]<0>(&__p, "gradient_booster");
  v19 = (unsigned int **)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)v7 + 24))(*(_QWORD *)v7, &__p);
  xgboost::Json::operator=(v19, (uint64_t)&v56);
  if (SHIBYTE(v53) < 0)
    operator delete(__p);
  v56 = &off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)v58, (_QWORD *)v58[1]);
  std::string::basic_string[abi:ne180100]<0>(&v56, "gradient_booster");
  v20 = (*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)v7 + 24))(*(_QWORD *)v7, &v56);
  if (SHIBYTE(v58[0]) < 0)
    operator delete(v56);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 24))(*((_QWORD *)this + 4) + 8, v20);
  v57 = 0x300000000;
  v56 = &off_24E6BE1D0;
  v58[1] = 0;
  v59 = 0;
  v58[0] = &v58[1];
  std::string::basic_string[abi:ne180100]<0>(&__p, "objective");
  v21 = (unsigned int **)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)v7 + 24))(*(_QWORD *)v7, &__p);
  xgboost::Json::operator=(v21, (uint64_t)&v56);
  if (SHIBYTE(v53) < 0)
    operator delete(__p);
  v56 = &off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)v58, (_QWORD *)v58[1]);
  std::string::basic_string[abi:ne180100]<0>(&v56, "objective");
  v22 = (*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)v7 + 24))(*(_QWORD *)v7, &v56);
  if (SHIBYTE(v58[0]) < 0)
    operator delete(v56);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 3) + 24))(*((_QWORD *)this + 3), v22);
  v24 = *((_QWORD *)this + 5);
  v23 = *((_QWORD *)this + 6);
  v57 = 0x300000000;
  v56 = &off_24E6BE1D0;
  v58[1] = 0;
  v59 = 0;
  v58[0] = &v58[1];
  v25 = operator new();
  v26 = v25;
  *(_QWORD *)(v25 + 8) = 0x300000000;
  v27 = (unsigned int *)(v25 + 8);
  *(_QWORD *)v25 = &off_24E6BE1D0;
  v28 = v58[1];
  *(void **)(v25 + 16) = v58[0];
  *(_QWORD *)(v25 + 24) = v28;
  v29 = v59;
  v58[1] = 0;
  v59 = 0;
  *(_QWORD *)(v25 + 32) = v29;
  v58[0] = &v58[1];
  if (!v29)
    v28 = (_QWORD *)v25;
  v28[2] = v25 + 24;
  do
    v30 = __ldxr(v27);
  while (__stxr(v30 + 1, v27));
  v49 = 0uLL;
  v50 = 0;
  __p = &v49;
  LOBYTE(v52) = 0;
  if (v23 != v24)
  {
    std::vector<xgboost::Json>::__vallocate[abi:ne180100](&v49, (v23 - v24) >> 3);
    v31 = (uint64_t *)*((_QWORD *)&v49 + 1);
    v32 = *((_QWORD *)&v49 + 1) + 8 * ((v23 - v24) >> 3);
    do
    {
      *v31 = v26;
      do
        v33 = __ldxr(v27);
      while (__stxr(v33 + 1, v27));
      ++v31;
    }
    while (v31 != (uint64_t *)v32);
    *((_QWORD *)&v49 + 1) = v32;
  }
  do
  {
    v34 = __ldxr(v27);
    v35 = v34 - 1;
  }
  while (__stlxr(v35, v27));
  if (!v35)
  {
    __dmb(9u);
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  }
  v56 = &off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)v58, (_QWORD *)v58[1]);
  v36 = *((_QWORD *)this + 5);
  if (*((_QWORD *)this + 6) != v36)
  {
    v37 = 0;
    do
    {
      (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(v36 + 8 * v37) + 24))(*(_QWORD *)(v36 + 8 * v37), v49 + 8 * v37);
      ++v37;
      v36 = *((_QWORD *)this + 5);
    }
    while (v37 < (*((_QWORD *)this + 6) - v36) >> 3);
  }
  v57 = 0x400000000;
  v56 = off_24E6BE218;
  *(_OWORD *)v58 = v49;
  v59 = v50;
  v49 = 0uLL;
  v50 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "metrics");
  v38 = (uint64_t *)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)v7 + 24))(*(_QWORD *)v7, &__p);
  xgboost::Json::operator=(v38, (uint64_t)&v56);
  if (SHIBYTE(v53) < 0)
    operator delete(__p);
  v56 = off_24E6BE218;
  __p = v58;
  std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v52 = 0x300000000;
  __p = &off_24E6BE1D0;
  v54 = 0;
  v55 = 0;
  v53 = (uint64_t *)&v54;
  xgboost::GenericParameter::__MANAGER__(v39);
  dmlc::parameter::ParamManager::GetDict((dmlc::parameter::ParamManager *)&stru_253F36BF0, (char *)this + 64, (std::vector<std::pair<std::string, std::string>> *)&v56);
  std::map<std::string,std::string>::map[abi:ne180100]<std::__wrap_iter<std::pair<std::string,std::string> *>>((uint64_t)&v60, (const void **)v56, (const void **)v57);
  v62[0] = (__int128 *)&v56;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)v62);
  v40 = v60;
  if (v60 != v61)
  {
    do
    {
      xgboost::JsonString::JsonString(&v56, (__int128 *)(v40 + 7));
      v62[0] = (__int128 *)(v40 + 4);
      v41 = std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v53, (const void **)v40 + 4, (uint64_t)&std::piecewise_construct, v62);
      xgboost::Json::operator=(v41 + 7, (uint64_t)&v56);
      v56 = off_24E6BE2B8;
      if (SHIBYTE(v59) < 0)
        operator delete(v58[0]);
      v42 = v40[1];
      if (v42)
      {
        do
        {
          v43 = (_QWORD **)v42;
          v42 = (_QWORD *)*v42;
        }
        while (v42);
      }
      else
      {
        do
        {
          v43 = (_QWORD **)v40[2];
          v12 = *v43 == v40;
          v40 = v43;
        }
        while (!v12);
      }
      v40 = v43;
    }
    while (v43 != v61);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v60, v61[0]);
  std::string::basic_string[abi:ne180100]<0>(&v56, "generic_param");
  v44 = (unsigned int **)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)v7 + 24))(*(_QWORD *)v7, &v56);
  xgboost::Json::operator=(v44, (uint64_t)&__p);
  if (SHIBYTE(v58[0]) < 0)
    operator delete(v56);
  __p = &off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&v53, v54);
  v56 = &v49;
  std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
}

void sub_220F13204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
  _Unwind_Resume(a1);
}

void xgboost::LearnerIO::Save(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int **v10;
  uint64_t v11;
  unsigned int **v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  void *__p[2];
  char v21;
  void *v22;
  uint64_t v23;
  unsigned int **v24;
  unsigned int *v25;
  uint64_t v26;

  v23 = 0x300000000;
  v22 = &off_24E6BE1D0;
  v25 = 0;
  v26 = 0;
  v24 = &v25;
  v4 = (unsigned int *)operator new();
  v5 = v4;
  *((_QWORD *)v4 + 1) = 0x300000000;
  v6 = v4 + 2;
  *(_QWORD *)v4 = &off_24E6BE1D0;
  v7 = v25;
  *((_QWORD *)v4 + 2) = v24;
  *((_QWORD *)v4 + 3) = v7;
  v8 = v26;
  v25 = 0;
  v26 = 0;
  *((_QWORD *)v4 + 4) = v8;
  v24 = &v25;
  if (!v8)
    v7 = v4;
  *((_QWORD *)v7 + 2) = v4 + 6;
  do
    v9 = __ldxr(v6);
  while (__stxr(v9 + 1, v6));
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&v24, v25);
  v23 = 0x300000000;
  v22 = &off_24E6BE1D0;
  v25 = 0;
  v26 = 0;
  v24 = &v25;
  std::string::basic_string[abi:ne180100]<0>(__p, "Model");
  v10 = (unsigned int **)(*(uint64_t (**)(unsigned int *, void **))(*(_QWORD *)v5 + 24))(v5, __p);
  xgboost::Json::operator=(v10, (uint64_t)&v22);
  if (v21 < 0)
    operator delete(__p[0]);
  v22 = &off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&v24, v25);
  std::string::basic_string[abi:ne180100]<0>(&v22, "Model");
  v11 = (*(uint64_t (**)(unsigned int *, void **))(*(_QWORD *)v5 + 24))(v5, &v22);
  if (SHIBYTE(v24) < 0)
    operator delete(v22);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v11);
  v23 = 0x300000000;
  v22 = &off_24E6BE1D0;
  v25 = 0;
  v26 = 0;
  v24 = &v25;
  std::string::basic_string[abi:ne180100]<0>(__p, "Config");
  v12 = (unsigned int **)(*(uint64_t (**)(unsigned int *, void **))(*(_QWORD *)v5 + 24))(v5, __p);
  xgboost::Json::operator=(v12, (uint64_t)&v22);
  if (v21 < 0)
    operator delete(__p[0]);
  v22 = &off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&v24, v25);
  std::string::basic_string[abi:ne180100]<0>(&v22, "Config");
  v13 = (*(uint64_t (**)(unsigned int *, void **))(*(_QWORD *)v5 + 24))(v5, &v22);
  if (SHIBYTE(v24) < 0)
    operator delete(v22);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 264))(a1, v13);
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v19 = v5;
  do
    v14 = __ldxr(v6);
  while (__stxr(v14 + 1, v6));
  xgboost::Json::Dump(&v19, &v22, 4);
  do
  {
    v15 = __ldxr(v6);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, v6));
  if (!v16)
  {
    __dmb(9u);
    (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  (*(void (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a2 + 8))(a2, v22, v23 - (_QWORD)v22);
  if (v22)
  {
    v23 = (uint64_t)v22;
    operator delete(v22);
  }
  do
  {
    v17 = __ldxr(v6);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, v6));
  if (!v18)
  {
    __dmb(9u);
    (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
}

void sub_220F13778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23)
{
  uint64_t v23;
  unsigned int *v24;
  unsigned int v26;
  unsigned int v27;

  if (__p)
    operator delete(__p);
  do
  {
    v26 = __ldxr(v24);
    v27 = v26 - 1;
  }
  while (__stlxr(v27, v24));
  if (!v27)
  {
    __dmb(9u);
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::LearnerIO::Load(xgboost::LearnerIO *this, dmlc::Stream *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  std::string *v7;
  std::string::size_type v8;
  __n128 v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t j;
  std::string::size_type v13;
  int v14;
  std::string *v15;
  size_t size;
  void *v17;
  uint64_t v18;
  std::string *Entry;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  std::string::size_type v29;
  uint64_t v30;
  int v31;
  unsigned __int8 *v32;
  std::string *v33;
  std::string *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  int v38;
  void *v39;
  uint64_t v40;
  _QWORD *v41;
  void *v42;
  uint64_t v43;
  void **v44;
  void *v45;
  void **v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  std::string *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  int v55;
  void *v56;
  uint64_t v57;
  _QWORD *v58;
  void *v59;
  std::string *v60;
  std::string::size_type v61;
  unsigned int v62;
  unsigned int v63;
  std::string *v64;
  _QWORD *v65;
  unsigned int *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  std::string *v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t i;
  uint64_t v77;
  void *__p[2];
  uint64_t v79;
  void *v80[2];
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t __dst;
  std::string v86;
  char v87;
  char v88;
  _QWORD v89[2];
  __int128 v90;
  __int128 v91;

  v89[0] = &off_24E6B8AC8;
  v89[1] = a2;
  v90 = 0u;
  v91 = 0u;
  xgboost::common::PeekableInStream::PeekRead((xgboost::common::PeekableInStream *)v89, &v87, 2uLL);
  if (v87 != 123)
  {
    memset(&v86, 0, sizeof(v86));
    if (*((char *)this + 615) < 0)
      v13 = *((_QWORD *)this + 75);
    else
      v13 = *((unsigned __int8 *)this + 615);
    std::string::resize(&v86, v13, 0);
    if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &v86;
    else
      v15 = (std::string *)v86.__r_.__value_.__r.__words[0];
    if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v86.__r_.__value_.__r.__words[2]);
    else
      size = v86.__r_.__value_.__l.__size_;
    v17 = (void *)xgboost::common::PeekableInStream::Read((xgboost::common::PeekableInStream *)v89, (char *)v15, size);
    __p[0] = v17;
    if (*((char *)this + 615) < 0)
      v18 = *((_QWORD *)this + 75);
    else
      v18 = *((unsigned __int8 *)this + 615);
    __dst = v18;
    if (v17 != (void *)v18)
    {
      dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)v80);
      if (v80[0])
      {
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
        v20 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Check failed: ", 14);
        v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"fp.Read(&header[0], header.size()) == serialisation_header_.size()", 66);
        v23 = *((char *)v80[0] + 23);
        v24 = v23 >= 0 ? v80[0] : *(void **)v80[0];
        v25 = v23 >= 0 ? *((unsigned __int8 *)v80[0] + 23) : *((_QWORD *)v80[0] + 1);
        v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v24, v25);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
        v27 = v80[0];
        v80[0] = 0;
        if (v27)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v80, (uint64_t)v27);
      }
    }
    v28 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
    if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v29 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
    else
      v29 = v86.__r_.__value_.__l.__size_;
    v30 = *((unsigned __int8 *)this + 615);
    v31 = (char)v30;
    if ((v30 & 0x80u) != 0)
      v30 = *((_QWORD *)this + 75);
    if (v29 == v30)
    {
      if (v31 >= 0)
        v32 = (unsigned __int8 *)this + 592;
      else
        v32 = (unsigned __int8 *)*((_QWORD *)this + 74);
      if ((*((_BYTE *)&v86.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (!memcmp(v86.__r_.__value_.__l.__data_, v32, v86.__r_.__value_.__l.__size_))
          goto LABEL_60;
      }
      else
      {
        if (!*((_BYTE *)&v86.__r_.__value_.__s + 23))
          goto LABEL_60;
        v33 = &v86;
        while (v33->__r_.__value_.__s.__data_[0] == *v32)
        {
          v33 = (std::string *)((char *)v33 + 1);
          ++v32;
          if (!--v28)
            goto LABEL_60;
        }
      }
    }
    v73 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v80);
    dmlc::LogMessageFatal::Entry::Init(v73, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
    v74 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v80);
    v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"Check failed: header == serialisation_header_", 45);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)": ", 2);
    for (i = 0; i != 381; ++i)
      std::ostream::put();
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v80);
LABEL_60:
    __dst = -1;
    v77 = 8;
    __p[0] = (void *)xgboost::common::PeekableInStream::Read((xgboost::common::PeekableInStream *)v89, (char *)&__dst, 8uLL);
    if (__p[0] != (void *)8)
    {
      dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)v80);
      if (v80[0])
      {
        v34 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        dmlc::LogMessageFatal::Entry::Init(v34, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
        v35 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"Check failed: ", 14);
        v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"fp.Read(&sz, sizeof(sz)) == sizeof(sz)", 38);
        v38 = *((char *)v80[0] + 23);
        v39 = v38 >= 0 ? v80[0] : *(void **)v80[0];
        v40 = v38 >= 0 ? *((unsigned __int8 *)v80[0] + 23) : *((_QWORD *)v80[0] + 1);
        v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)v39, v40);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
        v42 = v80[0];
        v80[0] = 0;
        if (v42)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v80, (uint64_t)v42);
      }
    }
    LODWORD(__p[0]) = 0;
    if (__dst < 1)
    {
      dmlc::LogCheckFormat<long long,int>((uint64_t *)v80);
      if (v80[0])
      {
        v51 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        dmlc::LogMessageFatal::Entry::Init(v51, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
        v52 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"Check failed: ", 14);
        v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"sz > 0", 6);
        v55 = *((char *)v80[0] + 23);
        v56 = v55 >= 0 ? v80[0] : *(void **)v80[0];
        v57 = v55 >= 0 ? *((unsigned __int8 *)v80[0] + 23) : *((_QWORD *)v80[0] + 1);
        v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)v56, v57);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
        v59 = v80[0];
        v80[0] = 0;
        if (v59)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v80, (uint64_t)v59);
      }
    }
    v43 = __dst;
    xgboost::common::FixedSizeStream::FixedSizeStream((xgboost::common::FixedSizeStream *)v80, (xgboost::common::PeekableInStream *)v89);
    *(_OWORD *)__p = v83;
    v79 = v84;
    HIBYTE(v84) = 0;
    LOBYTE(v83) = 0;
    xgboost::common::FixedSizeStream::~FixedSizeStream(v80);
    if (v79 >= 0)
      v44 = __p;
    else
      v44 = (void **)__p[0];
    v80[0] = &unk_24E6B8500;
    v80[1] = v44;
    v81 = v43;
    v82 = 0;
    (*(void (**)(xgboost::LearnerIO *, void **))(*(_QWORD *)this + 104))(this, v80);
    v45 = (void *)HIBYTE(v79);
    if (v79 >= 0)
      v46 = __p;
    else
      v46 = (void **)__p[0];
    if (v79 < 0)
      v45 = __p[1];
    xgboost::Json::Load((uint64_t)v46 + v43, (uint64_t)v45 - v43, 8, (unsigned int **)&v77);
    (*(void (**)(xgboost::LearnerIO *, uint64_t *))(*(_QWORD *)this + 256))(this, &v77);
    v47 = (unsigned int *)v77;
    if (v77)
    {
      v48 = (unsigned int *)(v77 + 8);
      do
      {
        v49 = __ldxr(v48);
        v50 = v49 - 1;
      }
      while (__stlxr(v50, v48));
      if (!v50)
      {
        __dmb(9u);
        (*(void (**)(unsigned int *))(*(_QWORD *)v47 + 8))(v47);
      }
    }
    if (SHIBYTE(v79) < 0)
      operator delete(__p[0]);
    goto LABEL_121;
  }
  xgboost::common::ReadAll(&v86, a2, (xgboost::common::PeekableInStream *)v89);
  v4 = (unsigned int *)operator new();
  *((_QWORD *)v4 + 1) = 0x600000000;
  v5 = v4 + 2;
  *(_QWORD *)v4 = &off_24E6BE408;
  __dst = (uint64_t)v4;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  if (v88 == 34)
  {
    if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = &v86;
    else
      v7 = (std::string *)v86.__r_.__value_.__r.__words[0];
    if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
    else
      v8 = v86.__r_.__value_.__l.__size_;
    xgboost::Json::Load((uint64_t)v7, v8, 8, (unsigned int **)v80);
    __dst = (uint64_t)v80[0];
    v80[0] = v4;
    do
    {
      v10 = __ldxr(v5);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v5));
    if (!v11)
    {
      __dmb(9u);
      v9.n128_f64[0] = (*(double (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
    if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst(v9) + 4) >= 1)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
      xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)v80, (uint64_t)__p, 1040, 1);
      for (j = 0; j != 381; ++j)
        std::ostream::put();
      xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v80);
      if (SHIBYTE(v79) < 0)
        operator delete(__p[0]);
    }
  }
  else
  {
    if (v88 < 0)
      v14 = __maskrune(v88, 0x100uLL);
    else
      v14 = *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v88 + 60) & 0x100;
    if (v14)
    {
      if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v60 = &v86;
      else
        v60 = (std::string *)v86.__r_.__value_.__r.__words[0];
      if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v61 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
      else
        v61 = v86.__r_.__value_.__l.__size_;
      xgboost::Json::Load((uint64_t)v60, v61, 4, (unsigned int **)v80);
      __dst = (uint64_t)v80[0];
      v80[0] = v4;
      do
      {
        v62 = __ldxr(v5);
        v63 = v62 - 1;
      }
      while (__stlxr(v63, v5));
      if (!v63)
      {
        __dmb(9u);
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      }
    }
    else
    {
      v64 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v80);
      dmlc::LogMessageFatal::Entry::Init(v64, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
      v65 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v80);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"Invalid serialization file.", 27);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v80);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v80, "Model");
  v66 = (unsigned int *)__dst;
  v67 = *(_DWORD *)(*(_QWORD *)(*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)__dst + 24))(__dst, v80) + 12);
  if (SHIBYTE(v81) < 0)
    operator delete(v80[0]);
  if (v67 == 6)
  {
    (*(void (**)(xgboost::LearnerIO *, uint64_t *))(*(_QWORD *)this + 16))(this, &__dst);
    v66 = (unsigned int *)__dst;
    if (!__dst)
      goto LABEL_121;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v80, "Model");
    v68 = (*(uint64_t (**)(unsigned int *, void **))(*(_QWORD *)v66 + 24))(v66, v80);
    (*(void (**)(xgboost::LearnerIO *, uint64_t))(*(_QWORD *)this + 16))(this, v68);
    if (SHIBYTE(v81) < 0)
      operator delete(v80[0]);
    std::string::basic_string[abi:ne180100]<0>(v80, "Config");
    v69 = (*(uint64_t (**)(unsigned int *, void **))(*(_QWORD *)v66 + 24))(v66, v80);
    (*(void (**)(xgboost::LearnerIO *, uint64_t))(*(_QWORD *)this + 256))(this, v69);
    if (SHIBYTE(v81) < 0)
      operator delete(v80[0]);
  }
  v70 = v66 + 2;
  do
  {
    v71 = __ldxr(v70);
    v72 = v71 - 1;
  }
  while (__stlxr(v72, v70));
  if (!v72)
  {
    __dmb(9u);
    (*(void (**)(unsigned int *))(*(_QWORD *)v66 + 8))(v66);
  }
LABEL_121:
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v86.__r_.__value_.__l.__data_);
  v89[0] = &off_24E6B8AC8;
  if (SHIBYTE(v91) < 0)
    operator delete(*((void **)&v90 + 1));
}

void sub_220F140B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  uint64_t v23;

  if (*(char *)(v23 - 105) < 0)
    operator delete(*(void **)(v23 - 128));
  *(_QWORD *)(v23 - 96) = v22 + 16;
  if (*(char *)(v23 - 49) < 0)
    operator delete(*(void **)(v23 - 72));
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'xgboost::LearnerImpl::~LearnerImpl(xgboost::LearnerImpl *this)
{
  xgboost::LearnerImpl::~LearnerImpl((xgboost::LearnerImpl *)((char *)this - 8));
}

{
  xgboost::LearnerImpl::~LearnerImpl((xgboost::LearnerImpl *)((char *)this - 8));
  JUMPOUT(0x227667068);
}

{
  xgboost::LearnerImpl::~LearnerImpl((xgboost::LearnerImpl *)((char *)this - 16));
}

{
  xgboost::LearnerImpl::~LearnerImpl((xgboost::LearnerImpl *)((char *)this - 16));
  JUMPOUT(0x227667068);
}

void `non-virtual thunk to'xgboost::LearnerConfiguration::LoadConfig(xgboost::LearnerConfiguration *this, const xgboost::Json *a2)
{
  xgboost::LearnerConfiguration::LoadConfig((xgboost::LearnerConfiguration *)((char *)this - 8), a2);
}

void `non-virtual thunk to'xgboost::LearnerConfiguration::SaveConfig(xgboost::LearnerConfiguration *this, xgboost::Json *a2)
{
  xgboost::LearnerConfiguration::SaveConfig((xgboost::LearnerConfiguration *)((char *)this - 8), a2);
}

void `non-virtual thunk to'xgboost::LearnerIO::Load(xgboost::LearnerIO *this, dmlc::Stream *a2)
{
  xgboost::LearnerIO::Load((xgboost::LearnerIO *)((char *)this - 16), a2);
}

void `non-virtual thunk to'xgboost::LearnerIO::Save(uint64_t a1, uint64_t a2)
{
  xgboost::LearnerIO::Save(a1 - 16, a2);
}

void xgboost::LearnerConfiguration::~LearnerConfiguration(xgboost::LearnerConfiguration *this)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  BOOL v18;
  void **v19;

  *(_QWORD *)this = off_24E6BC668;
  *((_QWORD *)this + 1) = &unk_24E6BC788;
  *((_QWORD *)this + 2) = &unk_24E6BC7B8;
  v2 = (_QWORD *)dmlc::ThreadLocalStore<std::map<xgboost::Learner const*,xgboost::PredictionContainer>>::Get();
  v4 = v2 + 1;
  v3 = (uint64_t *)v2[1];
  if (v3)
  {
    v5 = v2 + 1;
    v6 = (_QWORD *)v2[1];
    do
    {
      v7 = v6[4];
      v8 = v7 >= (unint64_t)this;
      if (v7 >= (unint64_t)this)
        v9 = v6;
      else
        v9 = v6 + 1;
      if (v8)
        v5 = v6;
      v6 = (_QWORD *)*v9;
    }
    while (*v9);
    if (v5 != v4 && v5[4] <= (unint64_t)this)
    {
      v10 = v2 + 1;
      v11 = (_QWORD *)v2[1];
      do
      {
        v12 = v11[4];
        v13 = v12 >= (unint64_t)this;
        if (v12 >= (unint64_t)this)
          v14 = v11;
        else
          v14 = v11 + 1;
        if (v13)
          v10 = v11;
        v11 = (_QWORD *)*v14;
      }
      while (*v14);
      if (v10 != v4 && v10[4] <= (unint64_t)this)
      {
        v15 = (uint64_t *)v10[1];
        if (v15)
        {
          do
          {
            v16 = v15;
            v15 = (uint64_t *)*v15;
          }
          while (v15);
        }
        else
        {
          v17 = v10;
          do
          {
            v16 = (uint64_t *)v17[2];
            v18 = *v16 == (_QWORD)v17;
            v17 = v16;
          }
          while (!v18);
        }
        if ((uint64_t *)*v2 == v10)
          *v2 = v16;
        --v2[2];
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v3, v10);
        std::__hash_table<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::__unordered_map_hasher<xgboost::DMatrix *,std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::hash<xgboost::DMatrix *>,std::equal_to<xgboost::DMatrix *>,true>,std::__unordered_map_equal<xgboost::DMatrix *,std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::equal_to<xgboost::DMatrix *>,std::hash<xgboost::DMatrix *>,true>,std::allocator<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>>>::~__hash_table((uint64_t)(v10 + 5));
        operator delete(v10);
      }
    }
  }
  v19 = (void **)((char *)this + 544);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  if (*((char *)this + 543) < 0)
    operator delete(*((void **)this + 65));
  if (*((char *)this + 519) < 0)
    operator delete(*((void **)this + 62));
  xgboost::common::Monitor::~Monitor((char **)this + 33);
  v19 = (void **)((char *)this + 240);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 216);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 192, *((_QWORD **)this + 25));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 168, *((_QWORD **)this + 22));
  std::mutex::~mutex((std::mutex *)((char *)this + 96));
  xgboost::Learner::~Learner(this);
}

uint64_t xgboost::LearnerConfiguration::GetConfigurationArguments(xgboost::LearnerConfiguration *this)
{
  return (uint64_t)this + 168;
}

uint64_t dmlc::ThreadLocalStore<std::map<xgboost::Learner const*,xgboost::PredictionContainer>>::Get()
{
  uint64_t (*v0)(_QWORD);
  _QWORD *v2;

  {
    v2 = (_QWORD *)dmlc::ThreadLocalStore<std::map<xgboost::Learner const*,xgboost::PredictionContainer>>::Get(void)::inst(&dmlc::ThreadLocalStore<std::map<xgboost::Learner const*,xgboost::PredictionContainer>>::Get(void)::inst);
    v2[2] = 0;
    v2[1] = 0;
    *v2 = v2 + 1;
    _tlv_atexit((void (__cdecl *)(void *))std::map<xgboost::Learner const*,xgboost::PredictionContainer>::~map[abi:ne180100], v2);
  }
  return dmlc::ThreadLocalStore<std::map<xgboost::Learner const*,xgboost::PredictionContainer>>::Get(void)::inst(&dmlc::ThreadLocalStore<std::map<xgboost::Learner const*,xgboost::PredictionContainer>>::Get(void)::inst);
}

void xgboost::LearnerTrainParam::~LearnerTrainParam(void **this)
{
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

uint64_t std::map<xgboost::Learner const*,xgboost::PredictionContainer>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<xgboost::Learner const*,xgboost::PredictionContainer>,std::__map_value_compare<xgboost::Learner const*,std::__value_type<xgboost::Learner const*,xgboost::PredictionContainer>,std::less<xgboost::Learner const*>,true>,std::allocator<std::__value_type<xgboost::Learner const*,xgboost::PredictionContainer>>>::destroy(*(_QWORD **)(a1 + 8));
  return a1;
}

void std::__tree<std::__value_type<xgboost::Learner const*,xgboost::PredictionContainer>,std::__map_value_compare<xgboost::Learner const*,std::__value_type<xgboost::Learner const*,xgboost::PredictionContainer>,std::less<xgboost::Learner const*>,true>,std::allocator<std::__value_type<xgboost::Learner const*,xgboost::PredictionContainer>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<xgboost::Learner const*,xgboost::PredictionContainer>,std::__map_value_compare<xgboost::Learner const*,std::__value_type<xgboost::Learner const*,xgboost::PredictionContainer>,std::less<xgboost::Learner const*>,true>,std::allocator<std::__value_type<xgboost::Learner const*,xgboost::PredictionContainer>>>::destroy(*a1);
    std::__tree<std::__value_type<xgboost::Learner const*,xgboost::PredictionContainer>,std::__map_value_compare<xgboost::Learner const*,std::__value_type<xgboost::Learner const*,xgboost::PredictionContainer>,std::less<xgboost::Learner const*>,true>,std::allocator<std::__value_type<xgboost::Learner const*,xgboost::PredictionContainer>>>::destroy(a1[1]);
    std::__hash_table<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::__unordered_map_hasher<xgboost::DMatrix *,std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::hash<xgboost::DMatrix *>,std::equal_to<xgboost::DMatrix *>,true>,std::__unordered_map_equal<xgboost::DMatrix *,std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::equal_to<xgboost::DMatrix *>,std::hash<xgboost::DMatrix *>,true>,std::allocator<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>>>::~__hash_table((uint64_t)(a1 + 5));
    operator delete(a1);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::__unordered_map_hasher<xgboost::DMatrix *,std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::hash<xgboost::DMatrix *>,std::equal_to<xgboost::DMatrix *>,true>,std::__unordered_map_equal<xgboost::DMatrix *,std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::equal_to<xgboost::DMatrix *>,std::hash<xgboost::DMatrix *>,true>,std::allocator<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<xgboost::DMatrix * const,xgboost::PredictionCacheEntry>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

char *std::__tree<std::__value_type<xgboost::Learner const*,xgboost::PredictionContainer>,std::__map_value_compare<xgboost::Learner const*,std::__value_type<xgboost::Learner const*,xgboost::PredictionContainer>,std::less<xgboost::Learner const*>,true>,std::allocator<std::__value_type<xgboost::Learner const*,xgboost::PredictionContainer>>>::__emplace_unique_key_args<xgboost::Learner const*,std::piecewise_construct_t const&,std::tuple<xgboost::Learner const*&&>,std::tuple<>>(uint64_t **a1, unint64_t a2, _QWORD *a3)
{
  char *v5;
  uint64_t **v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = (char *)a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = v5;
        v8 = *((_QWORD *)v5 + 4);
        if (v8 <= a2)
          break;
        v5 = *(char **)v7;
        v6 = (uint64_t **)v7;
        if (!*(_QWORD *)v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = (char *)*((_QWORD *)v7 + 1);
      if (!v5)
      {
        v6 = (uint64_t **)(v7 + 8);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (char *)(a1 + 1);
LABEL_9:
    v9 = v7;
    v7 = (char *)operator new(0x50uLL);
    *((_QWORD *)v7 + 4) = *a3;
    *((_QWORD *)v7 + 9) = 0;
    *(_OWORD *)(v7 + 40) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    *((_DWORD *)v7 + 18) = 1065353216;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t dmlc::ThreadLocalStore<std::map<xgboost::Learner const*,xgboost::XGBAPIThreadLocalEntry>>::Get()
{
  uint64_t (*v0)(_QWORD);
  _QWORD *v2;

  {
    v2 = (_QWORD *)dmlc::ThreadLocalStore<std::map<xgboost::Learner const*,xgboost::XGBAPIThreadLocalEntry>>::Get(void)::inst(&dmlc::ThreadLocalStore<std::map<xgboost::Learner const*,xgboost::XGBAPIThreadLocalEntry>>::Get(void)::inst);
    v2[2] = 0;
    v2[1] = 0;
    *v2 = v2 + 1;
    _tlv_atexit((void (__cdecl *)(void *))std::map<xgboost::Learner const*,xgboost::XGBAPIThreadLocalEntry>::~map[abi:ne180100], v2);
  }
  return dmlc::ThreadLocalStore<std::map<xgboost::Learner const*,xgboost::XGBAPIThreadLocalEntry>>::Get(void)::inst(&dmlc::ThreadLocalStore<std::map<xgboost::Learner const*,xgboost::XGBAPIThreadLocalEntry>>::Get(void)::inst);
}

uint64_t std::map<xgboost::Learner const*,xgboost::XGBAPIThreadLocalEntry>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>,std::__map_value_compare<xgboost::DMatrix const*,std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>,std::less<xgboost::DMatrix const*>,true>,std::allocator<std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>>>::destroy(*(_QWORD **)(a1 + 8));
  return a1;
}

void xgboost::XGBoostParameter<xgboost::LearnerTrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>(xgboost::LearnerTrainParam *a1, _BYTE *a2, uint64_t *a3)
{
  if (*a2)
  {
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    *((_QWORD *)a1 + 2) = 0;
    xgboost::LearnerTrainParam::__MANAGER__(a1);
    dmlc::parameter::ParamManager::RunUpdate<std::__wrap_iter<std::pair<std::string,std::string> const*>>(&stru_253F36BA8, (uint64_t)a2, *a3, a3[1], 0, (uint64_t *)a1, 0);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    *((_QWORD *)a1 + 2) = 0;
    xgboost::LearnerTrainParam::__MANAGER__(a1);
    dmlc::parameter::ParamManager::RunInit<std::__wrap_iter<std::pair<std::string,std::string> const*>>(&stru_253F36BA8, (uint64_t)a2, *a3, a3[1], (uint64_t *)a1, 0);
    *a2 = 1;
  }
}

void sub_220F14A14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void *xgboost::Cast<xgboost::JsonObject,xgboost::Value>(_DWORD *a1)
{
  std::string *Entry;
  _QWORD *v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  void **v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  __int128 *v13;
  uint64_t v14;
  _QWORD v15[2];
  _QWORD **v16;
  _QWORD *v17[2];
  void *__p[2];
  unsigned __int8 v19;
  std::string v20;
  std::string v21;
  std::string v22;
  __int128 v23;
  int64_t v24;
  char v25;

  if (a1[3] == 3)
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v25);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/json.h");
  v4 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v25);
  xgboost::Value::TypeStr((xgboost::Value *)a1, &v20);
  v5 = std::string::insert(&v20, 0, "Invalid cast, from ");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v7 = std::string::append(&v21, " to ");
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  v15[1] = 0x300000000;
  v15[0] = &off_24E6BE1D0;
  v17[0] = 0;
  v17[1] = 0;
  v16 = v17;
  xgboost::Value::TypeStr((xgboost::Value *)v15, __p);
  if ((v19 & 0x80u) == 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v10 = v19;
  else
    v10 = (std::string::size_type)__p[1];
  v11 = std::string::append(&v22, (const std::string::value_type *)v9, v10);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v24 = v11->__r_.__value_.__r.__words[2];
  v23 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (v24 >= 0)
    v13 = &v23;
  else
    v13 = (__int128 *)v23;
  if (v24 >= 0)
    v14 = HIBYTE(v24);
  else
    v14 = *((_QWORD *)&v23 + 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v13, v14);
  if (SHIBYTE(v24) < 0)
    operator delete((void *)v23);
  if ((char)v19 < 0)
    operator delete(__p[0]);
  v15[0] = &off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&v16, v17[0]);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v25);
}

void sub_220F14C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;
  uint64_t v33;

  if (*(char *)(v33 - 57) < 0)
    operator delete(*(void **)(v33 - 80));
  if (a20 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy(v32, a13);
  if (*(char *)(v33 - 89) < 0)
    operator delete(*(void **)(v33 - 112));
  if (a32 < 0)
    operator delete(a27);
  if (a26 < 0)
    operator delete(a21);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v33 - 49));
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v6 = (void **)std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x50uLL);
    v12[1] = a1 + 1;
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_QWORD *)v7 + 8) = 0;
    *((_QWORD *)v7 + 9) = 0;
    *((_QWORD *)v7 + 7) = 0;
    v13 = 1;
    std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__insert_node_at(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v7;
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],std::string&,0>(_QWORD *a1, __int128 *a2)
{
  std::string *v4;
  __int128 v5;

  v4 = (std::string *)(std::string::basic_string[abi:ne180100]<0>(a1, "objective") + 3);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    v4->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return a1;
}

void sub_220F14E0C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void xgboost::LearnerModelParamLegacy::ToJson(xgboost::LearnerModelParamLegacy *this, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t *v6;
  char *v7;
  char *v8;
  int v9;
  std::string *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  xgboost::detail *v15;
  char *v16;
  int v17;
  std::string *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t *v21;
  char *v22;
  char *v23;
  uint64_t *v24;
  _QWORD *v25;
  unsigned int *v26;
  _QWORD *v27;
  uint64_t v28;
  unsigned int v29;
  std::string *Entry;
  _QWORD *v31;
  _QWORD *v32;
  void *__p[2];
  char v34;
  void *__dst[2];
  uint64_t v36;
  void (**v37)(xgboost::JsonString *__hidden);
  uint64_t v38;
  void *v39[2];
  uint64_t v40;
  void (**v41)(xgboost::JsonObject *__hidden);
  uint64_t v42;
  uint64_t *v43;
  _QWORD *v44;
  uint64_t v45;
  void **v46;
  __int128 *v47[2];
  _BYTE v48[3];
  _BYTE __src[16];
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v42 = 0x300000000;
  v41 = &off_24E6BE1D0;
  v44 = 0;
  v45 = 0;
  v43 = (uint64_t *)&v44;
  v4 = xgboost::detail::ToCharsFloatImpl((xgboost::detail *)__src, *(float *)a2, (char *)a2);
  if (v4 >= 16)
    v5 = 16;
  else
    v5 = v4;
  if (v4 >= 16)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
    v31 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Check failed: ret.ec == std::errc()", 35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v37);
  }
  std::string::basic_string[abi:ne180100](__dst, __src, v5);
  v38 = 0;
  *(_OWORD *)v39 = *(_OWORD *)__dst;
  v40 = v36;
  __dst[0] = 0;
  __dst[1] = 0;
  v36 = 0;
  v37 = off_24E6BE2B8;
  std::string::basic_string[abi:ne180100]<0>(__p, "base_score");
  v47[0] = (__int128 *)__p;
  v6 = std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v43, (const void **)__p, (uint64_t)&std::piecewise_construct, v47);
  xgboost::Json::operator=(v6 + 7, (uint64_t)&v37);
  if (v34 < 0)
    operator delete(__p[0]);
  v37 = off_24E6BE2B8;
  if (SHIBYTE(v40) < 0)
    operator delete(v39[0]);
  if (SHIBYTE(v36) < 0)
    operator delete(__dst[0]);
  v7 = (char *)*(unsigned int *)(a2 + 4);
  if ((_DWORD)v7)
  {
    v8 = xgboost::detail::ToCharsUnsignedImpl((xgboost::detail *)v47, (xgboost::detail *)v48, v7);
    if (v9)
    {
      v10 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
      dmlc::LogMessageFatal::Entry::Init(v10, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
      v11 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: ret.ec == std::errc()", 35);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v37);
    }
  }
  else
  {
    LOBYTE(v47[0]) = 48;
    v8 = (char *)v47 + 1;
  }
  std::string::basic_string[abi:ne180100](__dst, v47, v8 - (char *)v47);
  v37 = off_24E6BE2B8;
  v38 = 0;
  *(_OWORD *)v39 = *(_OWORD *)__dst;
  v40 = v36;
  __dst[0] = 0;
  __dst[1] = 0;
  v36 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "num_feature");
  v46 = __p;
  v13 = std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v43, (const void **)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v46);
  xgboost::Json::operator=(v13 + 7, (uint64_t)&v37);
  if (v34 < 0)
    operator delete(__p[0]);
  v37 = off_24E6BE2B8;
  if (SHIBYTE(v40) < 0)
    operator delete(v39[0]);
  if (SHIBYTE(v36) < 0)
    operator delete(__dst[0]);
  v14 = *(int *)(a2 + 8);
  if ((_DWORD)v14)
  {
    v15 = (xgboost::detail *)v47;
    if ((v14 & 0x80000000) != 0)
    {
      LOBYTE(v47[0]) = 45;
      v15 = (xgboost::detail *)((char *)v47 + 1);
      v14 = -v14;
    }
    v16 = xgboost::detail::ToCharsUnsignedImpl(v15, (xgboost::detail *)v48, (char *)v14);
    if (v17)
    {
      v18 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
      dmlc::LogMessageFatal::Entry::Init(v18, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
      v19 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Check failed: ret.ec == std::errc()", 35);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v37);
    }
  }
  else
  {
    LOBYTE(v47[0]) = 48;
    v16 = (char *)v47 + 1;
  }
  std::string::basic_string[abi:ne180100](__dst, v47, v16 - (char *)v47);
  v37 = off_24E6BE2B8;
  v38 = 0;
  *(_OWORD *)v39 = *(_OWORD *)__dst;
  v40 = v36;
  __dst[0] = 0;
  __dst[1] = 0;
  v36 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "num_class");
  v46 = __p;
  v21 = std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v43, (const void **)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v46);
  xgboost::Json::operator=(v21 + 7, (uint64_t)&v37);
  if (v34 < 0)
    operator delete(__p[0]);
  v37 = off_24E6BE2B8;
  if (SHIBYTE(v40) < 0)
    operator delete(v39[0]);
  if (SHIBYTE(v36) < 0)
    operator delete(__dst[0]);
  v22 = (char *)*(unsigned int *)(a2 + 28);
  if ((_DWORD)v22)
  {
    v23 = xgboost::detail::ToCharsUnsignedImpl((xgboost::detail *)v47, (xgboost::detail *)v48, v22);
  }
  else
  {
    LOBYTE(v47[0]) = 48;
    v23 = (char *)v47 + 1;
  }
  std::string::basic_string[abi:ne180100](__dst, v47, v23 - (char *)v47);
  v37 = off_24E6BE2B8;
  v38 = 0;
  *(_OWORD *)v39 = *(_OWORD *)__dst;
  v40 = v36;
  __dst[0] = 0;
  __dst[1] = 0;
  v36 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "num_target");
  v46 = __p;
  v24 = std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v43, (const void **)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v46);
  xgboost::Json::operator=(v24 + 7, (uint64_t)&v37);
  if (v34 < 0)
    operator delete(__p[0]);
  v37 = off_24E6BE2B8;
  if (SHIBYTE(v40) < 0)
    operator delete(v39[0]);
  if (SHIBYTE(v36) < 0)
    operator delete(__dst[0]);
  v25 = (_QWORD *)operator new();
  v25[1] = 0x300000000;
  v26 = (unsigned int *)(v25 + 1);
  *v25 = &off_24E6BE1D0;
  v27 = v44;
  v25[2] = v43;
  v25[3] = v27;
  v28 = v45;
  v44 = 0;
  v45 = 0;
  v25[4] = v28;
  v43 = (uint64_t *)&v44;
  if (!v28)
    v27 = v25;
  v27[2] = v25 + 3;
  *(_QWORD *)this = v25;
  do
    v29 = __ldxr(v26);
  while (__stxr(v29 + 1, v26));
  v41 = &off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&v43, v44);
}

void sub_220F1539C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,_QWORD *a32)
{
  uint64_t v32;

  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy(v32, a32);
  _Unwind_Resume(a1);
}

uint64_t std::vector<xgboost::Json>::emplace_back<std::string const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t *v16;
  uint64_t *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = (uint64_t)(v7 - *a1) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<xgboost::Json>::__throw_length_error[abi:ne180100]();
    v11 = v5 - *a1;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v19 = v4;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v4, v13);
    else
      v14 = 0;
    v15 = v14;
    v16 = (uint64_t *)&v14[8 * v10];
    v18 = &v14[8 * v13];
    std::allocator<xgboost::Json>::construct[abi:ne180100]<xgboost::Json,std::string const&>(v16, a2);
    v17 = v16 + 1;
    std::vector<xgboost::Json>::__swap_out_circular_buffer(a1, &v15);
    v9 = a1[1];
    result = std::__split_buffer<xgboost::Json>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    result = std::allocator<xgboost::Json>::construct[abi:ne180100]<xgboost::Json,std::string const&>(*(uint64_t **)(v4 - 8), a2);
    v9 = v7 + 8;
    a1[1] = v7 + 8;
  }
  a1[1] = v9;
  return result;
}

void sub_220F15568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t std::allocator<xgboost::Json>::construct[abi:ne180100]<xgboost::Json,std::string const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t result;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  xgboost::JsonString::JsonString(&v6, a2);
  result = operator new();
  *(_DWORD *)(result + 8) = 0;
  v4 = (unsigned int *)(result + 8);
  *(_DWORD *)(result + 12) = 0;
  *(_QWORD *)result = off_24E6BE2B8;
  *(_OWORD *)(result + 16) = v7;
  *(_QWORD *)(result + 32) = v8;
  *a1 = result;
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
  return result;
}

void sub_220F1560C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<xgboost::Json>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<xgboost::Json>,std::reverse_iterator<xgboost::Json*>,std::reverse_iterator<xgboost::Json*>,std::reverse_iterator<xgboost::Json*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<xgboost::Json>,std::reverse_iterator<xgboost::Json*>,std::reverse_iterator<xgboost::Json*>,std::reverse_iterator<xgboost::Json*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *--a3;
      *(_QWORD *)(v7 - 8) = v8;
      *a3 = 0;
      v7 = *((_QWORD *)&v14 + 1) - 8;
      *((_QWORD *)&v14 + 1) -= 8;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::Json>,std::reverse_iterator<xgboost::Json*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::Json>,std::reverse_iterator<xgboost::Json*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::Json>,std::reverse_iterator<xgboost::Json*>>::operator()[abi:ne180100]((unsigned int *)a1);
  return a1;
}

unsigned int *std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::Json>,std::reverse_iterator<xgboost::Json*>>::operator()[abi:ne180100](unsigned int *result)
{
  unsigned int **v1;
  unsigned int **v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v1 = *(unsigned int ***)(*((_QWORD *)result + 2) + 8);
  v2 = *(unsigned int ***)(*((_QWORD *)result + 1) + 8);
  while (v1 != v2)
  {
    result = *v1;
    if (*v1)
    {
      v3 = result + 2;
      do
      {
        v4 = __ldxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        __dmb(9u);
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      }
    }
    ++v1;
  }
  return result;
}

uint64_t std::__split_buffer<xgboost::Json>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<xgboost::Json>::__destruct_at_end[abi:ne180100]((unsigned int *)a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

unsigned int *std::__split_buffer<xgboost::Json>::__destruct_at_end[abi:ne180100](unsigned int *result, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v2 = *((_QWORD *)result + 2);
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      result = *(unsigned int **)(v2 - 8);
      *((_QWORD *)v4 + 2) = v2 - 8;
      if (result)
      {
        v5 = result + 2;
        do
        {
          v6 = __ldxr(v5);
          v7 = v6 - 1;
        }
        while (__stlxr(v7, v5));
        if (!v7)
        {
          __dmb(9u);
          result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
        }
      }
      v2 = *((_QWORD *)v4 + 2);
    }
    while (v2 != a2);
  }
  return result;
}

_QWORD *std::vector<std::pair<std::string,std::string>>::vector<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,0>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  std::string *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD v15[3];
  char v16;
  std::string *v17;
  std::string *v18;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 != a3)
  {
    v5 = a2;
    v6 = 0;
    v7 = v5;
    do
    {
      v8 = (_QWORD *)v7[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v7[2];
          v10 = *v9 == (_QWORD)v7;
          v7 = v9;
        }
        while (!v10);
      }
      ++v6;
      v7 = v9;
    }
    while (v9 != a3);
    std::vector<std::pair<std::string,std::string>>::__vallocate[abi:ne180100](a1, v6);
    v17 = (std::string *)a1[1];
    v18 = v17;
    v15[0] = a1 + 2;
    v15[1] = &v17;
    v15[2] = &v18;
    v16 = 0;
    v11 = v17;
    do
    {
      std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const,std::string,0>(v11, (__int128 *)v5 + 2);
      v12 = (_QWORD *)v5[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v5[2];
          v10 = *v13 == (_QWORD)v5;
          v5 = v13;
        }
        while (!v10);
      }
      v11 = v18 + 2;
      v18 += 2;
      v5 = v13;
    }
    while (v13 != a3);
    v16 = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v15);
    a1[1] = v11;
  }
  return a1;
}

void sub_220F159A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t xgboost::common::ToString<unsigned int>()
{
  _QWORD v1[11];
  char v2;
  uint64_t v3;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v1);
  std::ostream::operator<<();
  std::stringbuf::str();
  v1[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v1 + *(_QWORD *)(v1[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v1[1] = MEMORY[0x24BEDB848] + 16;
  if (v2 < 0)
    operator delete((void *)v1[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v3);
}

void sub_220F15A7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t xgboost::common::ToString<int>()
{
  _QWORD v1[11];
  char v2;
  uint64_t v3;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v1);
  std::ostream::operator<<();
  std::stringbuf::str();
  v1[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v1 + *(_QWORD *)(v1[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v1[1] = MEMORY[0x24BEDB848] + 16;
  if (v2 < 0)
    operator delete((void *)v1[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v3);
}

void sub_220F15B44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::deque<xgboost::Json>::push_back(_QWORD *a1, uint64_t *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  int64_t v77;
  void *v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t i;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  BOOL v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  char *v110;

  v4 = (char *)a1[1];
  v5 = (char *)a1[2];
  v6 = v5 - v4;
  if (v5 == v4)
    v7 = 0;
  else
    v7 = ((v5 - v4) << 6) - 1;
  v9 = a1[4];
  v8 = a1[5];
  v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 < 0x200)
    {
      v24 = v6 >> 3;
      v25 = (char *)a1[3];
      v26 = (char *)*a1;
      v27 = (uint64_t)&v25[-*a1];
      if (v6 >> 3 >= (unint64_t)(v27 >> 3))
      {
        v30 = v27 >> 2;
        if (v25 == v26)
          v31 = 1;
        else
          v31 = v30;
        v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v31);
        v34 = v33;
        v35 = operator new(0x1000uLL);
        v36 = &v32[8 * v24];
        v37 = &v32[8 * v34];
        if (v24 == v34)
        {
          v38 = 8 * v24;
          if (v6 < 1)
          {
            v78 = v35;
            v79 = v38 >> 2;
            if (v5 == v4)
              v80 = 1;
            else
              v80 = v79;
            v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v80);
            v36 = &v81[8 * (v80 >> 2)];
            v37 = &v81[8 * v82];
            if (v32)
              operator delete(v32);
            v32 = v81;
            v35 = v78;
          }
          else
          {
            v39 = v38 >> 3;
            if (v39 >= -1)
              v40 = v39 + 1;
            else
              v40 = v39 + 2;
            v36 -= 8 * (v40 >> 1);
          }
        }
        *(_QWORD *)v36 = v35;
        v83 = v36 + 8;
        for (i = a1[2]; i != a1[1]; i -= 8)
        {
          if (v36 == v32)
          {
            if (v83 >= v37)
            {
              if (v37 == v32)
                v89 = 1;
              else
                v89 = (v37 - v32) >> 2;
              v90 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v89);
              v92 = v90;
              v36 = &v90[(2 * v89 + 6) & 0xFFFFFFFFFFFFFFF8];
              v94 = v83 - v32;
              v93 = v83 == v32;
              v83 = v36;
              if (!v93)
              {
                v83 = &v36[v94 & 0xFFFFFFFFFFFFFFF8];
                v95 = 8 * (v94 >> 3);
                v96 = v36;
                v97 = (uint64_t *)v32;
                do
                {
                  v98 = *v97++;
                  *(_QWORD *)v96 = v98;
                  v96 += 8;
                  v95 -= 8;
                }
                while (v95);
              }
              v37 = &v90[8 * v91];
              if (v32)
                operator delete(v32);
              v32 = v92;
            }
            else
            {
              v85 = (v37 - v83) >> 3;
              if (v85 >= -1)
                v86 = v85 + 1;
              else
                v86 = v85 + 2;
              v87 = v86 >> 1;
              v36 = &v32[8 * (v86 >> 1)];
              v88 = v32;
              if (v83 != v32)
              {
                memmove(v36, v32, v83 - v32);
                v88 = v83;
              }
              v83 = &v88[8 * v87];
            }
          }
          v99 = *(_QWORD *)(i - 8);
          *((_QWORD *)v36 - 1) = v99;
          v36 -= 8;
        }
        v100 = (char *)*a1;
        *a1 = v32;
        a1[1] = v36;
        a1[2] = v83;
        a1[3] = v37;
        if (v100)
          operator delete(v100);
        goto LABEL_36;
      }
      v28 = operator new(0x1000uLL);
      v29 = v28;
      if (v25 == v5)
      {
        if (v4 == v26)
        {
          if (v5 == v4)
            v56 = 1;
          else
            v56 = (v25 - v4) >> 2;
          v57 = 2 * v56;
          v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v56);
          v4 = &v58[(v57 + 6) & 0xFFFFFFFFFFFFFFF8];
          v60 = (uint64_t *)a1[1];
          v61 = v4;
          v62 = a1[2] - (_QWORD)v60;
          if (v62)
          {
            v61 = &v4[v62 & 0xFFFFFFFFFFFFFFF8];
            v63 = 8 * (v62 >> 3);
            v64 = &v58[(v57 + 6) & 0xFFFFFFFFFFFFFFF8];
            do
            {
              v65 = *v60++;
              *(_QWORD *)v64 = v65;
              v64 += 8;
              v63 -= 8;
            }
            while (v63);
          }
          v66 = (char *)*a1;
          *a1 = v58;
          a1[1] = v4;
          a1[2] = v61;
          a1[3] = &v58[8 * v59];
          if (v66)
          {
            operator delete(v66);
            v4 = (char *)a1[1];
          }
        }
        *((_QWORD *)v4 - 1) = v29;
        v67 = (char *)a1[1];
        v68 = (char *)a1[2];
        a1[1] = v67 - 8;
        v69 = *((_QWORD *)v67 - 1);
        a1[1] = v67;
        if (v68 == (char *)a1[3])
        {
          v70 = (uint64_t)&v67[-*a1];
          if ((unint64_t)v67 <= *a1)
          {
            if (v68 == (char *)*a1)
              v101 = 1;
            else
              v101 = (uint64_t)&v68[-*a1] >> 2;
            v102 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v101);
            v104 = &v102[8 * (v101 >> 2)];
            v105 = (uint64_t *)a1[1];
            v68 = v104;
            v106 = a1[2] - (_QWORD)v105;
            if (v106)
            {
              v68 = &v104[v106 & 0xFFFFFFFFFFFFFFF8];
              v107 = 8 * (v106 >> 3);
              v108 = &v102[8 * (v101 >> 2)];
              do
              {
                v109 = *v105++;
                *(_QWORD *)v108 = v109;
                v108 += 8;
                v107 -= 8;
              }
              while (v107);
            }
            v110 = (char *)*a1;
            *a1 = v102;
            a1[1] = v104;
            a1[2] = v68;
            a1[3] = &v102[8 * v103];
            if (v110)
            {
              operator delete(v110);
              v68 = (char *)a1[2];
            }
          }
          else
          {
            v71 = v70 >> 3;
            v16 = v70 >> 3 < -1;
            v72 = (v70 >> 3) + 2;
            if (v16)
              v73 = v72;
            else
              v73 = v71 + 1;
            v74 = -(v73 >> 1);
            v75 = v73 >> 1;
            v76 = &v67[-8 * v75];
            v77 = v68 - v67;
            if (v68 != v67)
            {
              memmove(&v67[-8 * v75], v67, v68 - v67);
              v67 = (char *)a1[1];
            }
            v68 = &v76[v77];
            a1[1] = &v67[8 * v74];
            a1[2] = &v76[v77];
          }
        }
        *(_QWORD *)v68 = v69;
      }
      else
      {
        *(_QWORD *)v5 = v28;
      }
    }
    else
    {
      a1[4] = v9 - 512;
      v13 = *(_QWORD *)v4;
      v11 = v4 + 8;
      v12 = v13;
      a1[1] = v11;
      if (v5 == (char *)a1[3])
      {
        v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v5 == (char *)*a1)
            v41 = 1;
          else
            v41 = (uint64_t)&v5[-*a1] >> 2;
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v41);
          v44 = &v42[8 * (v41 >> 2)];
          v45 = (uint64_t *)a1[1];
          v5 = v44;
          v46 = a1[2] - (_QWORD)v45;
          if (v46)
          {
            v5 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            v47 = 8 * (v46 >> 3);
            v48 = &v42[8 * (v41 >> 2)];
            do
            {
              v49 = *v45++;
              *(_QWORD *)v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v5;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            v5 = (char *)a1[2];
          }
        }
        else
        {
          v15 = v14 >> 3;
          v16 = v14 >> 3 < -1;
          v17 = (v14 >> 3) + 2;
          if (v16)
            v18 = v17;
          else
            v18 = v15 + 1;
          v19 = -(v18 >> 1);
          v20 = v18 >> 1;
          v21 = &v11[-8 * v20];
          v22 = v5 - v11;
          if (v5 != v11)
          {
            memmove(&v11[-8 * v20], v11, v5 - v11);
            v5 = (char *)a1[1];
          }
          v23 = &v5[8 * v19];
          v5 = &v21[v22];
          a1[1] = v23;
          a1[2] = &v21[v22];
        }
      }
      *(_QWORD *)v5 = v12;
    }
    a1[2] += 8;
LABEL_36:
    v4 = (char *)a1[1];
    v8 = a1[5];
    v10 = v8 + a1[4];
  }
  v51 = *(_QWORD *)&v4[(v10 >> 6) & 0x3FFFFFFFFFFFFF8];
  v52 = v10 & 0x1FF;
  v53 = *a2;
  *(_QWORD *)(v51 + 8 * v52) = *a2;
  if (v53)
  {
    v54 = (unsigned int *)(v53 + 8);
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
    v8 = a1[5];
  }
  a1[5] = v8 + 1;
}

void sub_220F16034(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  if (v1)
    operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<std::string const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::__split_buffer<std::string>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<unsigned long>>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_220F1616C(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<char const(&)[17]>(uint64_t *a1, char *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  uint64_t v11;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<unsigned long>>>(v7, v9);
  else
    v10 = 0;
  __v.__first_ = v10;
  __v.__begin_ = v10 + v4;
  __v.__end_cap_.__value_ = &v10[v9];
  std::string::basic_string[abi:ne180100]<0>(__v.__begin_->__r_.__value_.__r.__words, a2);
  __v.__end_ = __v.__begin_ + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v11 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v11;
}

void sub_220F16270(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(__n128 *a1, __n128 *a2, uint64_t a3, char a4)
{
  unint64_t *v8;
  unint64_t *v9;
  __n128 *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __n128 *v14;
  uint64_t v15;
  __n128 v16;
  unint64_t v17;
  __n128 v18;
  uint64_t v19;
  __n128 v20;
  unint64_t v21;
  __n128 *v22;
  __n128 *v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __int8 *v27;
  __n128 v28;
  __n128 v29;
  BOOL v30;
  BOOL v31;
  __n128 v32;
  __n128 *v33;
  _BOOL4 v34;
  __n128 *v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  __int8 *v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  __n128 *v45;
  BOOL v47;
  uint64_t v48;
  __n128 *v49;
  __n128 *v50;
  __n128 v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  __n128 v55;
  int64_t v56;
  int64_t v57;
  int64_t v58;
  uint64_t v59;
  char *v60;
  unint64_t *v61;
  __n128 v62;
  unint64_t *v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  __n128 v67;
  int64_t v68;
  __n128 *v69;
  uint64_t v70;
  __n128 *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __n128 v78;
  __n128 v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  __n128 v84;
  uint64_t v85;
  __int128 v86;
  __n128 v87;
  uint64_t v88;
  __int8 *v90;
  __n128 *v91;
  __n128 v92;
  __int8 *v93;
  BOOL v94;
  __n128 v95;
  unint64_t v96;
  __n128 *v97;
  unsigned __int8 v98;
  __n128 *v99;
  __n128 v100;
  unint64_t v101;
  __n128 v102;
  unint64_t v103;
  uint64_t v104;

  v104 = *MEMORY[0x24BDAC8D0];
LABEL_2:
  v8 = &a2[-2].n128_u64[1];
  v97 = a2 - 3;
  v99 = a2;
  v9 = &a2[-5].n128_u64[1];
  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v10) >> 3);
    switch(v12)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v8, a1))
        {
          v42 = *a1;
          v101 = a1[1].n128_u64[0];
          v100 = v42;
          v43 = *(__n128 *)v8;
          a1[1].n128_u64[0] = v8[2];
          *a1 = v43;
          v44 = v100;
          v8[2] = v101;
          *(__n128 *)v8 = v44;
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, &a1[1].n128_u64[1], v8);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, v8);
        return;
      case 5:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, &a1[4].n128_u64[1], v8);
        return;
      default:
        if (v11 <= 575)
        {
          v45 = (__n128 *)((char *)a1 + 24);
          v47 = a1 == a2 || v45 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v47)
            {
              v48 = 0;
              v49 = a1;
              do
              {
                v50 = v49;
                v49 = v45;
                if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v45, v50))
                {
                  v51 = *v49;
                  v101 = v49[1].n128_u64[0];
                  v100 = v51;
                  v49->n128_u64[1] = 0;
                  v49[1].n128_u64[0] = 0;
                  v49->n128_u64[0] = 0;
                  v52 = v48;
                  while (1)
                  {
                    v53 = (char *)a1 + v52;
                    *(__n128 *)(v53 + 24) = *(__n128 *)((char *)a1 + v52);
                    *((_QWORD *)v53 + 5) = *(unint64_t *)((char *)a1[1].n128_u64 + v52);
                    v53[23] = 0;
                    *v53 = 0;
                    if (!v52)
                      break;
                    v52 -= 24;
                    if (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(&v100, (unint64_t *)((char *)a1->n128_u64 + v52)))
                    {
                      v54 = (uint64_t)&a1[1].n128_i64[1] + v52;
                      goto LABEL_81;
                    }
                  }
                  v54 = (uint64_t)a1;
LABEL_81:
                  v55 = v100;
                  *(_QWORD *)(v54 + 16) = v101;
                  *(__n128 *)v54 = v55;
                }
                v45 = (__n128 *)((char *)v49 + 24);
                v48 += 24;
              }
              while (&v49[1].n128_i8[8] != (__int8 *)a2);
            }
          }
          else if (!v47)
          {
            v90 = &a1[-2].n128_i8[8];
            do
            {
              v91 = a1;
              a1 = v45;
              if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v45, v91))
              {
                v92 = *a1;
                v101 = a1[1].n128_u64[0];
                v100 = v92;
                a1->n128_u64[1] = 0;
                a1[1].n128_u64[0] = 0;
                a1->n128_u64[0] = 0;
                v93 = v90;
                do
                {
                  *((_OWORD *)v93 + 3) = *(_OWORD *)(v93 + 24);
                  *((_QWORD *)v93 + 8) = *((_QWORD *)v93 + 5);
                  v93[47] = 0;
                  v93[24] = 0;
                  v94 = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(&v100, v93);
                  v93 -= 24;
                }
                while (v94);
                v95 = v100;
                *((_QWORD *)v93 + 8) = v101;
                *((__n128 *)v93 + 3) = v95;
              }
              v45 = (__n128 *)((char *)a1 + 24);
              v90 += 24;
            }
            while (&a1[1].n128_i8[8] != (__int8 *)a2);
          }
          return;
        }
        if (!a3)
        {
          if (a1 != a2)
          {
            v56 = (unint64_t)(v12 - 2) >> 1;
            v57 = v56;
            do
            {
              v58 = v57;
              if (v56 >= v57)
              {
                v59 = (2 * v57) | 1;
                v60 = (char *)a1 + 24 * v59;
                if (2 * v57 + 2 < v12
                  && std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(&a1->n128_u64[3 * v59], (_QWORD *)v60 + 3))
                {
                  v60 += 24;
                  v59 = 2 * v58 + 2;
                }
                v61 = &a1->n128_u64[3 * v58];
                if (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v60, v61))
                {
                  v62 = *(__n128 *)v61;
                  v101 = v61[2];
                  v100 = v62;
                  v61[1] = 0;
                  v61[2] = 0;
                  *v61 = 0;
                  do
                  {
                    v63 = (unint64_t *)v60;
                    v64 = *(_OWORD *)v60;
                    v61[2] = *((_QWORD *)v60 + 2);
                    *(_OWORD *)v61 = v64;
                    v60[23] = 0;
                    *v60 = 0;
                    if (v56 < v59)
                      break;
                    v65 = (2 * v59) | 1;
                    v60 = (char *)a1 + 24 * v65;
                    v66 = 2 * v59 + 2;
                    if (v66 < v12
                      && std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(&a1->n128_u64[3 * v65], (_QWORD *)v60 + 3))
                    {
                      v60 += 24;
                      v65 = v66;
                    }
                    v61 = v63;
                    v59 = v65;
                  }
                  while (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v60, &v100));
                  v67 = v100;
                  v63[2] = v101;
                  *(__n128 *)v63 = v67;
                }
              }
              v57 = v58 - 1;
            }
            while (v58);
            v68 = v11 / 0x18uLL;
            v69 = v99;
            do
            {
              v70 = 0;
              v71 = v69;
              v96 = a1->n128_u64[0];
              v102.n128_u64[0] = a1->n128_u64[1];
              *(unint64_t *)((char *)v102.n128_u64 + 7) = *(unint64_t *)((char *)&a1->n128_u64[1] + 7);
              v98 = a1[1].n128_u8[7];
              a1->n128_u64[1] = 0;
              a1[1].n128_u64[0] = 0;
              a1->n128_u64[0] = 0;
              v72 = v68 - 2;
              if (v68 < 2)
                v72 = v68 - 1;
              v73 = v72 >> 1;
              v74 = (uint64_t)a1;
              do
              {
                v75 = v74 + 24 * v70 + 24;
                v76 = 2 * v70;
                v70 = (2 * v70) | 1;
                v77 = v76 + 2;
                if (v76 + 2 < v68
                  && std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>((_QWORD *)v75, (_QWORD *)(v75 + 24)))
                {
                  v75 += 24;
                  v70 = v77;
                }
                if (*(char *)(v74 + 23) < 0)
                  operator delete(*(void **)v74);
                v78 = *(__n128 *)v75;
                *(_QWORD *)(v74 + 16) = *(_QWORD *)(v75 + 16);
                *(__n128 *)v74 = v78;
                *(_BYTE *)(v75 + 23) = 0;
                *(_BYTE *)v75 = 0;
                v74 = v75;
              }
              while (v70 <= v73);
              v69 = (__n128 *)((char *)v71 - 24);
              if ((__int8 *)v75 == &v71[-2].n128_i8[8])
              {
                *(_QWORD *)v75 = v96;
                v88 = *(uint64_t *)((char *)v102.n128_i64 + 7);
                *(_QWORD *)(v75 + 8) = v102.n128_u64[0];
                *(_QWORD *)(v75 + 15) = v88;
                *(_BYTE *)(v75 + 23) = v98;
              }
              else
              {
                v79 = *v69;
                *(_QWORD *)(v75 + 16) = v71[-1].n128_u64[1];
                *(__n128 *)v75 = v79;
                v71[-2].n128_u64[1] = v96;
                v80 = v102.n128_u64[0];
                *(unint64_t *)((char *)v71[-1].n128_u64 + 7) = *(unint64_t *)((char *)v102.n128_u64 + 7);
                v71[-1].n128_u64[0] = v80;
                v71[-1].n128_u8[15] = v98;
                v81 = v75 - (_QWORD)a1 + 24;
                if (v81 >= 25)
                {
                  v82 = (v81 / 0x18uLL - 2) >> 1;
                  v83 = (char *)a1 + 24 * v82;
                  if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v83, (_QWORD *)v75))
                  {
                    v84 = *(__n128 *)v75;
                    v101 = *(_QWORD *)(v75 + 16);
                    v100 = v84;
                    *(_QWORD *)(v75 + 8) = 0;
                    *(_QWORD *)(v75 + 16) = 0;
                    *(_QWORD *)v75 = 0;
                    do
                    {
                      v85 = (uint64_t)v83;
                      v86 = *(_OWORD *)v83;
                      *(_QWORD *)(v75 + 16) = *((_QWORD *)v83 + 2);
                      *(_OWORD *)v75 = v86;
                      v83[23] = 0;
                      *v83 = 0;
                      if (!v82)
                        break;
                      v82 = (v82 - 1) >> 1;
                      v83 = (char *)a1 + 24 * v82;
                      v75 = v85;
                    }
                    while (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v83, &v100));
                    v87 = v100;
                    *(_QWORD *)(v85 + 16) = v101;
                    *(__n128 *)v85 = v87;
                  }
                }
              }
            }
            while (v68-- > 2);
          }
          return;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = (__n128 *)((char *)a1 + 24 * ((unint64_t)v12 >> 1));
        if ((unint64_t)v11 < 0xC01)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v14, a1, v8);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, v14, v8);
          v15 = 3 * v13;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(&a1[1].n128_u64[1], (_QWORD *)&a1[-1] + v15 - 1, v97);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((__n128 *)a1[3].n128_u64, &a1[1].n128_u64[v15 + 1], v9);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((_QWORD *)&a1[-1] + v15 - 1, v14, &a1[1].n128_u64[v15 + 1]);
          v16 = *a1;
          v101 = a1[1].n128_u64[0];
          v100 = v16;
          v17 = v14[1].n128_u64[0];
          *a1 = *v14;
          a1[1].n128_u64[0] = v17;
          v18 = v100;
          v14[1].n128_u64[0] = v101;
          *v14 = v18;
        }
        --a3;
        if ((a4 & 1) == 0
          && !std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(&a1[-2].n128_u64[1], a1))
        {
          v32 = *a1;
          v103 = a1[1].n128_u64[0];
          v102 = v32;
          a1->n128_u64[1] = 0;
          a1[1].n128_u64[0] = 0;
          a1->n128_u64[0] = 0;
          if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(&v102, v8))
          {
            v10 = a1;
            do
              v10 = (__n128 *)((char *)v10 + 24);
            while (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(&v102, v10));
          }
          else
          {
            v33 = (__n128 *)((char *)a1 + 24);
            do
            {
              v10 = v33;
              if (v33 >= a2)
                break;
              v34 = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(&v102, v33);
              v33 = (__n128 *)((char *)v10 + 24);
            }
            while (!v34);
          }
          v35 = a2;
          if (v10 < a2)
          {
            v35 = a2;
            do
              v35 = (__n128 *)((char *)v35 - 24);
            while (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(&v102, v35));
          }
          while (v10 < v35)
          {
            v36 = *v10;
            v101 = v10[1].n128_u64[0];
            v100 = v36;
            v37 = *v35;
            v10[1].n128_u64[0] = v35[1].n128_u64[0];
            *v10 = v37;
            v38 = v100;
            v35[1].n128_u64[0] = v101;
            *v35 = v38;
            do
              v10 = (__n128 *)((char *)v10 + 24);
            while (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(&v102, v10));
            do
              v35 = (__n128 *)((char *)v35 - 24);
            while (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(&v102, v35));
          }
          v39 = &v10[-2].n128_i8[8];
          if (&v10[-2].n128_i8[8] == (__int8 *)a1)
          {
            if (v10[-1].n128_i8[15] < 0)
              operator delete((void *)a1->n128_u64[0]);
          }
          else
          {
            if (a1[1].n128_i8[7] < 0)
              operator delete((void *)a1->n128_u64[0]);
            v40 = *(__n128 *)v39;
            a1[1].n128_u64[0] = v10[-1].n128_u64[1];
            *a1 = v40;
            v10[-1].n128_u8[15] = 0;
            v10[-2].n128_u8[8] = 0;
          }
          a4 = 0;
          v41 = v102;
          v10[-1].n128_u64[1] = v103;
          *(__n128 *)v39 = v41;
          continue;
        }
        v19 = 0;
        v20 = *a1;
        v103 = a1[1].n128_u64[0];
        v102 = v20;
        a1->n128_u64[1] = 0;
        a1[1].n128_u64[0] = 0;
        a1->n128_u64[0] = 0;
        do
          v19 += 3;
        while (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(&a1->n128_u64[v19], &v102));
        v21 = (unint64_t)&a1->n128_u64[v19];
        v22 = v99;
        if (v19 == 3)
        {
          v22 = v99;
          do
          {
            if (v21 >= (unint64_t)v22)
              break;
            v22 = (__n128 *)((char *)v22 - 24);
          }
          while (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v22, &v102));
        }
        else
        {
          do
            v22 = (__n128 *)((char *)v22 - 24);
          while (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v22, &v102));
        }
        v10 = (__n128 *)((char *)a1 + v19 * 8);
        if (v21 < (unint64_t)v22)
        {
          v23 = v22;
          do
          {
            v24 = *v10;
            v101 = v10[1].n128_u64[0];
            v100 = v24;
            v25 = *v23;
            v10[1].n128_u64[0] = v23[1].n128_u64[0];
            *v10 = v25;
            v26 = v100;
            v23[1].n128_u64[0] = v101;
            *v23 = v26;
            do
              v10 = (__n128 *)((char *)v10 + 24);
            while (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v10, &v102));
            do
              v23 = (__n128 *)((char *)v23 - 24);
            while (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v23, &v102));
          }
          while (v10 < v23);
        }
        v27 = &v10[-2].n128_i8[8];
        if (&v10[-2].n128_i8[8] == (__int8 *)a1)
        {
          if (v10[-1].n128_i8[15] < 0)
            operator delete((void *)a1->n128_u64[0]);
        }
        else
        {
          if (a1[1].n128_i8[7] < 0)
            operator delete((void *)a1->n128_u64[0]);
          v28 = *(__n128 *)v27;
          a1[1].n128_u64[0] = v10[-1].n128_u64[1];
          *a1 = v28;
          v10[-1].n128_u8[15] = 0;
          v10[-2].n128_u8[8] = 0;
        }
        v29 = v102;
        v10[-1].n128_u64[1] = v103;
        *(__n128 *)v27 = v29;
        v30 = v21 >= (unint64_t)v22;
        a2 = v99;
        if (!v30)
        {
LABEL_35:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(a1, &v10[-2].n128_i8[8], a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v31 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, (__n128 *)((char *)v10 - 24));
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v10, v99))
        {
          if (v31)
            continue;
          goto LABEL_35;
        }
        a2 = (__n128 *)((char *)v10 - 24);
        if (!v31)
          goto LABEL_2;
        return;
    }
  }
}

BOOL std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(_QWORD *a1, _QWORD *a2)
{
  int v2;
  int v3;
  size_t v4;
  size_t v5;
  size_t v6;
  int v7;

  v2 = *((char *)a2 + 23);
  v3 = *((char *)a1 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = a1[1];
  if (v3 < 0)
    a1 = (_QWORD *)*a1;
  if (v2 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = a2[1];
  if (v2 < 0)
    a2 = (_QWORD *)*a2;
  if (v5 >= v4)
    v6 = v4;
  else
    v6 = v5;
  v7 = memcmp(a1, a2, v6);
  if (v7)
    return v7 < 0;
  else
    return v4 < v5;
}

BOOL std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  BOOL v6;
  _BOOL8 result;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v6 = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a2, a1);
  result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a3, a2);
  if (v6)
  {
    if (result)
    {
      v8 = a1[2];
      v9 = *(_OWORD *)a1;
      v10 = a3[2];
      *(_OWORD *)a1 = *(_OWORD *)a3;
      a1[2] = v10;
    }
    else
    {
      v17 = a1[2];
      v18 = *(_OWORD *)a1;
      v19 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v19;
      *(_OWORD *)a2 = v18;
      a2[2] = v17;
      result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a3, a2);
      if (!result)
        return result;
      v8 = a2[2];
      v9 = *(_OWORD *)a2;
      v20 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v20;
    }
    *(_OWORD *)a3 = v9;
    a3[2] = v8;
  }
  else if (result)
  {
    v11 = a2[2];
    v12 = *(_OWORD *)a2;
    v13 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v13;
    *(_OWORD *)a3 = v12;
    a3[2] = v11;
    result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a2, a1);
    if (result)
    {
      v14 = a1[2];
      v15 = *(_OWORD *)a1;
      v16 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v16;
      *(_OWORD *)a2 = v15;
      a2[2] = v14;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(__n128 *a1, __n128 *a2)
{
  unint64_t v4;
  _BOOL8 result;
  __n128 *v6;
  unint64_t v7;
  __n128 v8;
  unint64_t v9;
  __n128 *v10;
  unint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  unint64_t v18;

  v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (__n128 *)((char *)a2 - 24);
      if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(&a2[-2].n128_u64[1], a1))
      {
        v7 = a1[1].n128_u64[0];
        v8 = *a1;
        v9 = v6[1].n128_u64[0];
        *a1 = *v6;
        a1[1].n128_u64[0] = v9;
        *v6 = v8;
        v6[1].n128_u64[0] = v7;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, &a1[1].n128_u64[1], &a2[-2].n128_u64[1]);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, &a2[-2].n128_u64[1]);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, &a1[4].n128_u64[1], &a2[-2].n128_u64[1]);
      return 1;
    default:
      v10 = a1 + 3;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64);
      v11 = &a1[4].n128_u64[1];
      if (&a1[4].n128_i8[8] == (__int8 *)a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v11, v10))
    {
      v17 = *(_OWORD *)v11;
      v18 = v11[2];
      v11[1] = 0;
      v11[2] = 0;
      *v11 = 0;
      v14 = v12;
      while (1)
      {
        v15 = (char *)a1 + v14;
        *(__n128 *)(v15 + 72) = *(__n128 *)((char *)a1 + v14 + 48);
        *((_QWORD *)v15 + 11) = *(unint64_t *)((char *)a1[4].n128_u64 + v14);
        v15[71] = 0;
        v15[48] = 0;
        if (v14 == -48)
          break;
        v14 -= 24;
        if (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(&v17, (_QWORD *)v15 + 3))
        {
          v16 = (uint64_t)&a1[4].n128_i64[1] + v14;
          goto LABEL_12;
        }
      }
      v16 = (uint64_t)a1;
LABEL_12:
      *(_OWORD *)v16 = v17;
      *(_QWORD *)(v16 + 16) = v18;
      if (++v13 == 8)
        return v11 + 3 == (unint64_t *)a2;
    }
    v10 = (__n128 *)v11;
    v12 += 24;
    v11 += 3;
    if (v11 == (unint64_t *)a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(__n128 *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  __n128 result;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a2, a3);
  if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a4, a3))
  {
    v9 = a3[2];
    v10 = *(_OWORD *)a3;
    v11 = a4[2];
    *(_OWORD *)a3 = *(_OWORD *)a4;
    a3[2] = v11;
    *(_OWORD *)a4 = v10;
    a4[2] = v9;
    if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a3, a2))
    {
      v12 = a2[2];
      v13 = *(_OWORD *)a2;
      v14 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v14;
      *(_OWORD *)a3 = v13;
      a3[2] = v12;
      if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a2, a1))
      {
        v15 = a1[1].n128_u64[0];
        result = *a1;
        v16 = a2[2];
        *a1 = *(__n128 *)a2;
        a1[1].n128_u64[0] = v16;
        *(__n128 *)a2 = result;
        a2[2] = v15;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(__n128 *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  __n128 result;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a2, a3, a4);
  if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a5, a4))
  {
    v11 = a4[2];
    v12 = *(_OWORD *)a4;
    v13 = a5[2];
    *(_OWORD *)a4 = *(_OWORD *)a5;
    a4[2] = v13;
    *(_OWORD *)a5 = v12;
    a5[2] = v11;
    if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a4, a3))
    {
      v14 = a3[2];
      v15 = *(_OWORD *)a3;
      v16 = a4[2];
      *(_OWORD *)a3 = *(_OWORD *)a4;
      a3[2] = v16;
      *(_OWORD *)a4 = v15;
      a4[2] = v14;
      if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a3, a2))
      {
        v17 = a2[2];
        v18 = *(_OWORD *)a2;
        v19 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v19;
        *(_OWORD *)a3 = v18;
        a3[2] = v17;
        if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a2, a1))
        {
          v20 = a1[1].n128_u64[0];
          result = *a1;
          v21 = a2[2];
          *a1 = *(__n128 *)a2;
          a1[1].n128_u64[0] = v21;
          *(__n128 *)a2 = result;
          a2[2] = v20;
        }
      }
    }
  }
  return result;
}

uint64_t **std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](uint64_t **a1, __int128 *a2)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v3 = *a1;
  v5 = (*a1)[1];
  v4 = (*a1)[2];
  v6 = *a1;
  if (v5 >= v4)
  {
    v7 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v6, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v6, a2);
    v7 = v5 + 24;
  }
  v3[1] = v7;
  return a1;
}

uint64_t std::deque<xgboost::Json>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unsigned int **v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int **v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v2[v5 >> 9];
    v7 = (unsigned int **)((char *)*v6 + 8 * (v5 & 0x1FF));
    v8 = *(uint64_t *)((char *)v2 + (((*(_QWORD *)(a1 + 40) + v5) >> 6) & 0x3FFFFFFFFFFFFF8))
       + 8 * ((*(_QWORD *)(a1 + 40) + v5) & 0x1FF);
    if (v7 != (unsigned int **)v8)
    {
      do
      {
        v9 = *v7;
        if (*v7)
        {
          v10 = v9 + 2;
          do
          {
            v11 = __ldxr(v10);
            v12 = v11 - 1;
          }
          while (__stlxr(v12, v10));
          if (!v12)
          {
            __dmb(9u);
            (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
          }
        }
        if ((char *)++v7 - (_BYTE *)*v6 == 4096)
        {
          v13 = (unsigned int **)v6[1];
          ++v6;
          v7 = v13;
        }
      }
      while (v7 != (unsigned int **)v8);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *v4 = 0;
  v14 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v14 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v15 = v14 >> 3;
  if (v15 == 1)
  {
    v16 = 256;
    goto LABEL_19;
  }
  if (v15 == 2)
  {
    v16 = 512;
LABEL_19:
    *(_QWORD *)(a1 + 32) = v16;
  }
  if (v2 != v3)
  {
    do
    {
      v17 = *v2++;
      operator delete(v17);
    }
    while (v2 != v3);
    v19 = *(_QWORD *)(a1 + 8);
    v18 = *(_QWORD *)(a1 + 16);
    if (v18 != v19)
      *(_QWORD *)(a1 + 16) = v18 + ((v19 - v18 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void xgboost::LearnerImpl::CheckDataSplitMode(xgboost::LearnerImpl *this)
{
  void *Engine;
  int v3;
  std::string *v4;
  _QWORD *v5;
  std::string *Entry;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  char v10;
  char v11;

  Engine = rabit::engine::GetEngine(this);
  if ((*(unsigned int (**)(void *))(*(_QWORD *)Engine + 80))(Engine))
  {
    v3 = *((_DWORD *)this + 121);
    if (!v3)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v11);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
      v7 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v11);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: tparam_.dsplit != DataSplitMode::kAuto", 52);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Precondition violated; dsplit cannot be 'auto' in distributed mode",
        66);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v11);
      v3 = *((_DWORD *)this + 121);
    }
    if (v3 == 1)
    {
      v4 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
      dmlc::LogMessageFatal::Entry::Init(v4, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
      v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Column-wise data split is currently not supported.", 50);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v10);
    }
  }
}

void sub_220F17444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void xgboost::LearnerImpl::ValidateDMatrix(xgboost::LearnerImpl *this, xgboost::DMatrix *a2, int a3)
{
  xgboost::MetaInfo *v6;
  __n128 v7;
  _DWORD *v8;
  std::string *Entry;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  rabit::engine *v16;
  void *Engine;
  std::string *v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  void *__p[2];
  char v26;
  uint64_t v27[34];

  v6 = (xgboost::MetaInfo *)(**(uint64_t (***)(xgboost::DMatrix *))a2)(a2);
  xgboost::MetaInfo::Validate(v6);
  if ((*((_DWORD *)this + 121) & 0xFFFFFFFD) == 0)
  {
    v8 = (_DWORD *)((char *)this + 468);
    if (a3)
    {
      if (*(_QWORD *)((**(uint64_t (***)(xgboost::DMatrix *))a2)(a2) + 8) == *v8)
        goto LABEL_2;
      dmlc::LogCheckFormat<unsigned int,unsigned long long>(v27);
      if (!v27[0])
        goto LABEL_2;
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
      v10 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: ", 14);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"learner_model_param_.num_feature == p_fmat->Info().num_col_", 59);
      v13 = *(char *)(v27[0] + 23);
      if (v13 >= 0)
        v14 = v27[0];
      else
        v14 = *(_QWORD *)v27[0];
      if (v13 >= 0)
        v15 = *(unsigned __int8 *)(v27[0] + 23);
      else
        v15 = *(_QWORD *)(v27[0] + 8);
    }
    else
    {
      if (*(_QWORD *)((**(uint64_t (***)(xgboost::DMatrix *))a2)(a2) + 8) <= (unint64_t)*v8)
        goto LABEL_2;
      dmlc::LogCheckFormat<unsigned int,unsigned long long>(v27);
      if (!v27[0])
        goto LABEL_2;
      v18 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
      dmlc::LogMessageFatal::Entry::Init(v18, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
      v19 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Check failed: ", 14);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"learner_model_param_.num_feature >= p_fmat->Info().num_col_", 59);
      v21 = *(char *)(v27[0] + 23);
      if (v21 >= 0)
        v14 = v27[0];
      else
        v14 = *(_QWORD *)v27[0];
      if (v21 >= 0)
        v15 = *(unsigned __int8 *)(v27[0] + 23);
      else
        v15 = *(_QWORD *)(v27[0] + 8);
    }
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Number of columns does not match number of features in booster.", 63);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
    v24 = v27[0];
    v27[0] = 0;
    if (v24)
      std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v27, v24);
  }
LABEL_2:
  if (!*(_QWORD *)(**(uint64_t (***)(xgboost::DMatrix *))a2)(a2)
    && *(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst(v7) + 4) >= 1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
    xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)v27, (uint64_t)__p, 1350, 1);
    v16 = (rabit::engine *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Empty dataset at worker: ", 25);
    Engine = rabit::engine::GetEngine(v16);
    (*(void (**)(void *))(*(_QWORD *)Engine + 64))(Engine);
    std::ostream::operator<<();
    xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v27);
    if (v26 < 0)
      operator delete(__p[0]);
  }
}

void sub_220F17710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  uint64_t v17;

  v17 = a16;
  a16 = 0;
  if (v17)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a16, v17);
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::LearnerImpl::PredictRaw(xgboost::LearnerImpl *this, xgboost::DMatrix *a2, xgboost::PredictionCacheEntry *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  std::string *Entry;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  char v17;

  if (!*((_QWORD *)this + 4))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/learner.cc");
    v14 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Check failed: gbm_ != nullptr", 29);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Predict must happen after Load or configuration", 47);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v17);
  }
  xgboost::LearnerImpl::ValidateDMatrix(this, a2, 0);
  return (*(uint64_t (**)(_QWORD, xgboost::DMatrix *, xgboost::PredictionCacheEntry *, uint64_t, uint64_t, uint64_t))(**((_QWORD **)this + 4) + 88))(*((_QWORD *)this + 4), a2, a3, a4, a5, a6);
}

void sub_220F17860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::pair<std::string,std::string>>::vector<std::__map_iterator<std::__tree_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,0>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  std::string *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD v15[3];
  char v16;
  std::string *v17;
  std::string *v18;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 != a3)
  {
    v5 = a2;
    v6 = 0;
    v7 = v5;
    do
    {
      v8 = (_QWORD *)v7[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v7[2];
          v10 = *v9 == (_QWORD)v7;
          v7 = v9;
        }
        while (!v10);
      }
      ++v6;
      v7 = v9;
    }
    while (v9 != a3);
    std::vector<std::pair<std::string,std::string>>::__vallocate[abi:ne180100](a1, v6);
    v17 = (std::string *)a1[1];
    v18 = v17;
    v15[0] = a1 + 2;
    v15[1] = &v17;
    v15[2] = &v18;
    v16 = 0;
    v11 = v17;
    do
    {
      std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const,std::string,0>(v11, (__int128 *)v5 + 2);
      v12 = (_QWORD *)v5[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v5[2];
          v10 = *v13 == (_QWORD)v5;
          v5 = v13;
        }
        while (!v10);
      }
      v11 = v18 + 2;
      v18 += 2;
      v5 = v13;
    }
    while (v13 != a3);
    v16 = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v15);
    a1[1] = v11;
  }
  return a1;
}

void sub_220F179A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void xgboost::common::ReadAll(std::string *a1, void *lpsrc, xgboost::common::PeekableInStream *a3)
{
  void *v5;
  void *v6;
  void *v7;
  uint64_t *v8;
  std::string *Entry;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18[7];
  __int128 v19;
  std::string::size_type v20;
  uint64_t v21;
  uint64_t v22;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  if (lpsrc
  {
    v6 = v5;
    (*(void (**)(void *, uint64_t))(*(_QWORD *)v5 + 32))(v5, -1);
    v7 = (void *)(*(uint64_t (**)(void *))(*(_QWORD *)v6 + 40))(v6);
    v18[0] = v7;
    std::string::resize(a1, (std::string::size_type)v7, 0);
    (*(void (**)(void *, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0);
    if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = (uint64_t *)a1;
    else
      v8 = (uint64_t *)a1->__r_.__value_.__r.__words[0];
    v21 = (**(uint64_t (***)(void *, uint64_t *, void *))v6)(v6, v8, v7);
    if ((void *)v21 != v7)
    {
      dmlc::LogCheckFormat<unsigned long,unsigned long>(&v22);
      if (v22)
      {
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v21);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/io.h");
        v10 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v21);
        v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: ", 14);
        v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"fixed_size->Read(&buffer[0], size) == size", 42);
        v13 = *(char *)(v22 + 23);
        if (v13 >= 0)
          v14 = v22;
        else
          v14 = *(_QWORD *)v22;
        if (v13 >= 0)
          v15 = *(unsigned __int8 *)(v22 + 23);
        else
          v15 = *(_QWORD *)(v22 + 8);
        v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v21);
        v17 = v22;
        v22 = 0;
        if (v17)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v22, v17);
      }
    }
  }
  else
  {
    xgboost::common::FixedSizeStream::FixedSizeStream((xgboost::common::FixedSizeStream *)v18, a3);
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v19;
    a1->__r_.__value_.__r.__words[2] = v20;
    HIBYTE(v20) = 0;
    LOBYTE(v19) = 0;
    xgboost::common::FixedSizeStream::~FixedSizeStream(v18);
  }
}

void sub_220F17B80(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v2 - 40);
  *(_QWORD *)(v2 - 40) = 0;
  if (v4)
    std::default_delete<std::string>::operator()[abi:ne180100](v2 - 40, v4);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<std::string,std::string>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__erase_unique<std::string>(uint64_t **a1, const void **a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = (uint64_t *)std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 != (uint64_t **)v3)
  {
    v4 = v3;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer(a1, v3);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v4 + 4));
    operator delete(v4);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  return std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v6 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_220F17DE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::string>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_220F17E70(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<std::string,std::string>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::string>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_220F17EC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(uint64_t **result, __int128 *a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  __int128 *v9;
  uint64_t **leaf_high;
  __int128 *v11;
  BOOL v12;
  __int128 *v13;
  __int128 *v14;
  uint64_t **v15;
  uint64_t *v16;
  const void **v17;
  uint64_t v18;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = (const void **)v8;
    if (v8)
    {
      v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 2));
          std::string::operator=((std::string *)(v8 + 7), (const std::string *)((char *)v9 + 56));
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high((uint64_t)v5, &v18, v17 + 4);
          std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__insert_node_at(v5, v18, leaf_high, (uint64_t *)v17);
          v17 = (const void **)v16;
          if (v16)
            v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          v11 = (__int128 *)*((_QWORD *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = *(__int128 **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (__int128 *)*((_QWORD *)v9 + 2);
              v12 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = (uint64_t *)v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_multi<std::pair<std::string const,std::string> const&>(v5, a2 + 2);
      v13 = (__int128 *)*((_QWORD *)a2 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(__int128 **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (__int128 *)*((_QWORD *)a2 + 2);
          v12 = *(_QWORD *)v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_220F18058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high(uint64_t a1, _QWORD *a2, const void **a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *result;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v5 = (_QWORD *)v4;
        if (!std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32)))
          break;
        v4 = *v5;
        result = v5;
        if (!*v5)
          goto LABEL_9;
      }
      v4 = v5[1];
    }
    while (v4);
    result = v5 + 1;
  }
  else
  {
    result = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v5;
  return result;
}

_QWORD *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;

  result = *(_QWORD **)(a1 + 16);
  if (result)
  {
    v3 = (_QWORD *)*result;
    if (*result == a1)
    {
      *result = 0;
      while (1)
      {
        v4 = (_QWORD *)result[1];
        if (!v4)
          break;
        do
        {
          result = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; v3 = (_QWORD *)result[1])
      {
        do
        {
          result = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_multi<std::pair<std::string const,std::string> const&>(uint64_t **a1, __int128 *a2)
{
  uint64_t **leaf_high;
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7[3];

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>((uint64_t)a1, a2, (uint64_t)v7);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high((uint64_t)a1, &v6, (const void **)v7[0] + 4);
  std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__insert_node_at(a1, v6, leaf_high, v7[0]);
  v4 = v7[0];
  v7[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return v4;
}

void sub_220F181F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void dmlc::parameter::FieldEntry<unsigned int>::~FieldEntry(void **a1)
{
  dmlc::parameter::FieldAccessEntry::~FieldAccessEntry(a1);
  JUMPOUT(0x227667068);
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<unsigned int>,unsigned int>::SetDefault(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  std::runtime_error *exception;
  std::string v17;
  _QWORD v18[33];

  v2 = result;
  if (!*(_BYTE *)(result + 8))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Required parameter ", 19);
    v4 = *(char *)(v2 + 47);
    if (v4 >= 0)
      v5 = v2 + 24;
    else
      v5 = *(_QWORD *)(v2 + 24);
    if (v4 >= 0)
      v6 = *(unsigned __int8 *)(v2 + 47);
    else
      v6 = *(_QWORD *)(v2 + 32);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, v5, v6);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" of ", 4);
    v11 = *(_QWORD *)(v2 + 48);
    v10 = v2 + 48;
    v9 = v11;
    v12 = *(char *)(v10 + 23);
    if (v12 >= 0)
      v13 = v10;
    else
      v13 = v9;
    if (v12 >= 0)
      v14 = *(unsigned __int8 *)(v10 + 23);
    else
      v14 = *(_QWORD *)(v10 + 8);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v13, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" is not presented", 17);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v17);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_24E6B55F0;
  }
  *(_DWORD *)(a2 + *(_QWORD *)(result + 96)) = *(_DWORD *)(result + 104);
  return result;
}

void sub_220F18350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<unsigned int>,unsigned int>::Set(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  std::ios_base::iostate v10;
  std::ios_base *v11;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  std::runtime_error *exception;
  std::string v32;
  _QWORD v33[33];
  _QWORD v34[12];
  char v35;
  uint64_t v36;

  std::istringstream::basic_istringstream[abi:ne180100](v34, (const std::string *)a3, 8);
  MEMORY[0x227666D38](v34, a2 + *(_QWORD *)(a1 + 96));
  v6 = *(_QWORD *)(v34[0] - 24);
  v7 = *(_DWORD *)((char *)&v34[4] + v6);
  if ((v7 & 5) == 0 && (v7 & 2) == 0)
  {
    while (1)
    {
      v8 = std::istream::get();
      if (v8 == -1)
      {
        v10 = 0;
        v11 = (std::ios_base *)((char *)v34 + *(_QWORD *)(v34[0] - 24));
        goto LABEL_11;
      }
      if (v8 > 0x20u || ((1 << v8) & 0x100003600) == 0)
        break;
      v6 = *(_QWORD *)(v34[0] - 24);
      if ((*((_BYTE *)&v34[4] + v6) & 2) != 0)
        goto LABEL_12;
    }
    v11 = (std::ios_base *)((char *)v34 + *(_QWORD *)(v34[0] - 24));
    v10 = v11->__rdstate_ | 4;
LABEL_11:
    std::ios_base::clear(v11, v10);
    v6 = *(_QWORD *)(v34[0] - 24);
  }
LABEL_12:
  if ((*((_BYTE *)&v34[4] + v6) & 5) != 0)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v33);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Invalid Parameter format for ", 29);
    v14 = *(char *)(a1 + 47);
    if (v14 >= 0)
      v15 = a1 + 24;
    else
      v15 = *(_QWORD *)(a1 + 24);
    if (v14 >= 0)
      v16 = *(unsigned __int8 *)(a1 + 47);
    else
      v16 = *(_QWORD *)(a1 + 32);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" expect ", 8);
    v21 = *(_QWORD *)(a1 + 48);
    v20 = a1 + 48;
    v19 = v21;
    v22 = *(char *)(v20 + 23);
    if (v22 >= 0)
      v23 = v20;
    else
      v23 = v19;
    if (v22 >= 0)
      v24 = *(unsigned __int8 *)(v20 + 23);
    else
      v24 = *(_QWORD *)(v20 + 8);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v23, v24);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" but value='", 12);
    v27 = *(char *)(a3 + 23);
    if (v27 >= 0)
      v28 = a3;
    else
      v28 = *(_QWORD *)a3;
    if (v27 >= 0)
      v29 = *(unsigned __int8 *)(a3 + 23);
    else
      v29 = *(_QWORD *)(a3 + 8);
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
    v32.__r_.__value_.__s.__data_[0] = 39;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)&v32, 1);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v32);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_24E6B55F0;
  }
  v34[0] = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)((char *)v34 + *(_QWORD *)(v34[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 24);
  v34[2] = MEMORY[0x24BEDB848] + 16;
  if (v35 < 0)
    operator delete((void *)v34[10]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  return MEMORY[0x227666FE4](&v36);
}

void sub_220F18630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  void *v48;
  int v49;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v49 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      std::istringstream::~istringstream((uint64_t)&a48);
      _Unwind_Resume(a1);
    }
  }
  else if (!v49)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v48);
  goto LABEL_6;
}

uint64_t dmlc::parameter::FieldEntryNumeric<dmlc::parameter::FieldEntry<unsigned int>,unsigned int>::Check(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  std::runtime_error *exception;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  std::runtime_error *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  std::runtime_error *v65;
  std::string v66;
  _QWORD v67[33];

  v2 = *(_DWORD *)(a2 + *(_QWORD *)(result + 96));
  if (*(_BYTE *)(result + 108))
  {
    v3 = *(_DWORD *)(result + 112);
    if (*(_BYTE *)(result + 109))
    {
      if (v2 < v3 || v2 > *(_DWORD *)(result + 116))
      {
        v4 = result;
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v67);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"value ", 6);
        v5 = (_QWORD *)std::ostream::operator<<();
        v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" for Parameter ", 15);
        v7 = *(char *)(v4 + 47);
        if (v7 >= 0)
          v8 = v4 + 24;
        else
          v8 = *(_QWORD *)(v4 + 24);
        if (v7 >= 0)
          v9 = *(unsigned __int8 *)(v4 + 47);
        else
          v9 = *(_QWORD *)(v4 + 32);
        v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" exceed bound [", 15);
        v11 = (_QWORD *)std::ostream::operator<<();
        v66.__r_.__value_.__s.__data_[0] = 44;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v66, 1);
        v12 = (_QWORD *)std::ostream::operator<<();
        v66.__r_.__value_.__s.__data_[0] = 93;
        v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v66, 1);
        v66.__r_.__value_.__s.__data_[0] = 10;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)&v66, 1);
        v14 = *(char *)(v4 + 47);
        if (v14 >= 0)
          v15 = v4 + 24;
        else
          v15 = *(_QWORD *)(v4 + 24);
        if (v14 >= 0)
          v16 = *(unsigned __int8 *)(v4 + 47);
        else
          v16 = *(_QWORD *)(v4 + 32);
        v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v15, v16);
        v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)": ", 2);
        v21 = *(_QWORD *)(v4 + 72);
        v20 = v4 + 72;
        v19 = v21;
        v22 = *(char *)(v20 + 23);
        if (v22 >= 0)
          v23 = v20;
        else
          v23 = v19;
        if (v22 >= 0)
          v24 = *(unsigned __int8 *)(v20 + 23);
        else
          v24 = *(_QWORD *)(v20 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v23, v24);
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(exception, &v66);
        exception->__vftable = (std::runtime_error_vtbl *)&unk_24E6B55F0;
      }
    }
    else if (v2 < v3)
    {
      v46 = result;
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v67);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"value ", 6);
      v47 = (_QWORD *)std::ostream::operator<<();
      v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)" for Parameter ", 15);
      v49 = *(char *)(v46 + 47);
      if (v49 >= 0)
        v50 = v46 + 24;
      else
        v50 = *(_QWORD *)(v46 + 24);
      if (v49 >= 0)
        v51 = *(unsigned __int8 *)(v46 + 47);
      else
        v51 = *(_QWORD *)(v46 + 32);
      v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, v50, v51);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)" should be greater equal to ", 28);
      v53 = (_QWORD *)std::ostream::operator<<();
      v66.__r_.__value_.__s.__data_[0] = 10;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)&v66, 1);
      v54 = *(char *)(v46 + 47);
      if (v54 >= 0)
        v55 = v46 + 24;
      else
        v55 = *(_QWORD *)(v46 + 24);
      if (v54 >= 0)
        v56 = *(unsigned __int8 *)(v46 + 47);
      else
        v56 = *(_QWORD *)(v46 + 32);
      v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v55, v56);
      v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)": ", 2);
      v61 = *(_QWORD *)(v46 + 72);
      v60 = v46 + 72;
      v59 = v61;
      v62 = *(char *)(v60 + 23);
      if (v62 >= 0)
        v63 = v60;
      else
        v63 = v59;
      if (v62 >= 0)
        v64 = *(unsigned __int8 *)(v60 + 23);
      else
        v64 = *(_QWORD *)(v60 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, v63, v64);
      v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(v65, &v66);
      v65->__vftable = (std::runtime_error_vtbl *)&unk_24E6B55F0;
    }
  }
  else if (*(_BYTE *)(result + 109) && v2 > *(_DWORD *)(result + 116))
  {
    v26 = result;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"value ", 6);
    v27 = (_QWORD *)std::ostream::operator<<();
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" for Parameter ", 15);
    v29 = *(char *)(v26 + 47);
    if (v29 >= 0)
      v30 = v26 + 24;
    else
      v30 = *(_QWORD *)(v26 + 24);
    if (v29 >= 0)
      v31 = *(unsigned __int8 *)(v26 + 47);
    else
      v31 = *(_QWORD *)(v26 + 32);
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, v30, v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" should be smaller equal to ", 28);
    v33 = (_QWORD *)std::ostream::operator<<();
    v66.__r_.__value_.__s.__data_[0] = 10;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)&v66, 1);
    v34 = *(char *)(v26 + 47);
    if (v34 >= 0)
      v35 = v26 + 24;
    else
      v35 = *(_QWORD *)(v26 + 24);
    if (v34 >= 0)
      v36 = *(unsigned __int8 *)(v26 + 47);
    else
      v36 = *(_QWORD *)(v26 + 32);
    v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v35, v36);
    v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)": ", 2);
    v41 = *(_QWORD *)(v26 + 72);
    v40 = v26 + 72;
    v39 = v41;
    v42 = *(char *)(v40 + 23);
    if (v42 >= 0)
      v43 = v40;
    else
      v43 = v39;
    if (v42 >= 0)
      v44 = *(unsigned __int8 *)(v40 + 23);
    else
      v44 = *(_QWORD *)(v40 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, v43, v44);
    v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(v45, &v66);
    v45->__vftable = (std::runtime_error_vtbl *)&unk_24E6B55F0;
  }
  return result;
}

void sub_220F18ACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<unsigned int>,unsigned int>::GetStringValue(_QWORD *a1, uint64_t a2)
{
  _QWORD v5[11];
  char v6;
  uint64_t v7;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v5);
  (*(void (**)(_QWORD *, _QWORD *, _QWORD))(*a1 + 64))(a1, v5, *(unsigned int *)(a2 + a1[12]));
  std::stringbuf::str();
  v5[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v5[1] = MEMORY[0x24BEDB848] + 16;
  if (v6 < 0)
    operator delete((void *)v5[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v7);
}

void sub_220F18BFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<unsigned int>,unsigned int>::GetFieldInfo@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void **v8;
  __int128 v10;
  uint64_t v11;
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  std::string::operator=((std::string *)a2, (const std::string *)(a1 + 24));
  std::string::operator=((std::string *)(a2 + 24), (const std::string *)(a1 + 48));
  v4 = *(char *)(a1 + 71);
  if (v4 >= 0)
    v5 = a1 + 48;
  else
    v5 = *(_QWORD *)(a1 + 48);
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a1 + 71);
  else
    v6 = *(_QWORD *)(a1 + 56);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v5, v6);
  if (*(_BYTE *)(a1 + 8))
  {
    LOBYTE(v10) = 44;
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v10, 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" optional, default=", 19);
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 56))(a1, v12);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", required", 10);
  }
  std::stringbuf::str();
  v8 = (void **)(a2 + 48);
  if (*(char *)(a2 + 71) < 0)
    operator delete(*v8);
  *(_OWORD *)v8 = v10;
  *(_QWORD *)(a2 + 64) = v11;
  std::string::operator=((std::string *)(a2 + 72), (const std::string *)(a1 + 72));
  v12[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v12[1] = MEMORY[0x24BEDB848] + 16;
  if (v13 < 0)
    operator delete((void *)v12[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v14);
}

void sub_220F18D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v4;
  va_list va;

  va_start(va, a4);
  std::ostringstream::~ostringstream((uint64_t)va);
  dmlc::ParamFieldInfo::~ParamFieldInfo(v4);
  _Unwind_Resume(a1);
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<unsigned int>,unsigned int>::PrintDefaultValueString(unsigned int *a1, uint64_t a2)
{
  return (*(uint64_t (**)(unsigned int *, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, a2, a1[26]);
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<unsigned int>,unsigned int>::PrintValue()
{
  return std::ostream::operator<<();
}

uint64_t dmlc::parameter::FieldEntryNumeric<dmlc::parameter::FieldEntry<unsigned int>,unsigned int>::set_range(uint64_t result, int a2, int a3)
{
  *(_DWORD *)(result + 112) = a2;
  *(_DWORD *)(result + 116) = a3;
  *(_WORD *)(result + 108) = 257;
  return result;
}

void dmlc::parameter::FieldEntry<xgboost::DataSplitMode>::~FieldEntry(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24E6B5E08;
  std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(a1 + 152, *(char **)(a1 + 160));
  std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::destroy(a1 + 128, *(char **)(a1 + 136));
  dmlc::parameter::FieldAccessEntry::~FieldAccessEntry((void **)a1);
}

{
  *(_QWORD *)a1 = &unk_24E6B5E08;
  std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(a1 + 152, *(char **)(a1 + 160));
  std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::destroy(a1 + 128, *(char **)(a1 + 136));
  dmlc::parameter::FieldAccessEntry::~FieldAccessEntry((void **)a1);
  JUMPOUT(0x227667068);
}

void dmlc::parameter::FieldEntry<long long>::~FieldEntry(void **a1)
{
  dmlc::parameter::FieldAccessEntry::~FieldAccessEntry(a1);
  JUMPOUT(0x227667068);
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<long long>,long long>::SetDefault(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  std::runtime_error *exception;
  std::string v17;
  _QWORD v18[33];

  v2 = result;
  if (!*(_BYTE *)(result + 8))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Required parameter ", 19);
    v4 = *(char *)(v2 + 47);
    if (v4 >= 0)
      v5 = v2 + 24;
    else
      v5 = *(_QWORD *)(v2 + 24);
    if (v4 >= 0)
      v6 = *(unsigned __int8 *)(v2 + 47);
    else
      v6 = *(_QWORD *)(v2 + 32);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, v5, v6);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" of ", 4);
    v11 = *(_QWORD *)(v2 + 48);
    v10 = v2 + 48;
    v9 = v11;
    v12 = *(char *)(v10 + 23);
    if (v12 >= 0)
      v13 = v10;
    else
      v13 = v9;
    if (v12 >= 0)
      v14 = *(unsigned __int8 *)(v10 + 23);
    else
      v14 = *(_QWORD *)(v10 + 8);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v13, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" is not presented", 17);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v17);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_24E6B55F0;
  }
  *(_QWORD *)(a2 + *(_QWORD *)(result + 96)) = *(_QWORD *)(result + 104);
  return result;
}

void sub_220F18FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<long long>,long long>::Set(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  std::ios_base::iostate v10;
  std::ios_base *v11;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  std::runtime_error *exception;
  std::string v32;
  _QWORD v33[33];
  _QWORD v34[12];
  char v35;
  uint64_t v36;

  std::istringstream::basic_istringstream[abi:ne180100](v34, (const std::string *)a3, 8);
  MEMORY[0x227666D50](v34, a2 + *(_QWORD *)(a1 + 96));
  v6 = *(_QWORD *)(v34[0] - 24);
  v7 = *(_DWORD *)((char *)&v34[4] + v6);
  if ((v7 & 5) == 0 && (v7 & 2) == 0)
  {
    while (1)
    {
      v8 = std::istream::get();
      if (v8 == -1)
      {
        v10 = 0;
        v11 = (std::ios_base *)((char *)v34 + *(_QWORD *)(v34[0] - 24));
        goto LABEL_11;
      }
      if (v8 > 0x20u || ((1 << v8) & 0x100003600) == 0)
        break;
      v6 = *(_QWORD *)(v34[0] - 24);
      if ((*((_BYTE *)&v34[4] + v6) & 2) != 0)
        goto LABEL_12;
    }
    v11 = (std::ios_base *)((char *)v34 + *(_QWORD *)(v34[0] - 24));
    v10 = v11->__rdstate_ | 4;
LABEL_11:
    std::ios_base::clear(v11, v10);
    v6 = *(_QWORD *)(v34[0] - 24);
  }
LABEL_12:
  if ((*((_BYTE *)&v34[4] + v6) & 5) != 0)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v33);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Invalid Parameter format for ", 29);
    v14 = *(char *)(a1 + 47);
    if (v14 >= 0)
      v15 = a1 + 24;
    else
      v15 = *(_QWORD *)(a1 + 24);
    if (v14 >= 0)
      v16 = *(unsigned __int8 *)(a1 + 47);
    else
      v16 = *(_QWORD *)(a1 + 32);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" expect ", 8);
    v21 = *(_QWORD *)(a1 + 48);
    v20 = a1 + 48;
    v19 = v21;
    v22 = *(char *)(v20 + 23);
    if (v22 >= 0)
      v23 = v20;
    else
      v23 = v19;
    if (v22 >= 0)
      v24 = *(unsigned __int8 *)(v20 + 23);
    else
      v24 = *(_QWORD *)(v20 + 8);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v23, v24);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" but value='", 12);
    v27 = *(char *)(a3 + 23);
    if (v27 >= 0)
      v28 = a3;
    else
      v28 = *(_QWORD *)a3;
    if (v27 >= 0)
      v29 = *(unsigned __int8 *)(a3 + 23);
    else
      v29 = *(_QWORD *)(a3 + 8);
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
    v32.__r_.__value_.__s.__data_[0] = 39;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)&v32, 1);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v32);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_24E6B55F0;
  }
  v34[0] = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)((char *)v34 + *(_QWORD *)(v34[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 24);
  v34[2] = MEMORY[0x24BEDB848] + 16;
  if (v35 < 0)
    operator delete((void *)v34[10]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  return MEMORY[0x227666FE4](&v36);
}

void sub_220F192AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  void *v48;
  int v49;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v49 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      std::istringstream::~istringstream((uint64_t)&a48);
      _Unwind_Resume(a1);
    }
  }
  else if (!v49)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v48);
  goto LABEL_6;
}

uint64_t dmlc::parameter::FieldEntryNumeric<dmlc::parameter::FieldEntry<long long>,long long>::Check(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  std::runtime_error *exception;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  std::runtime_error *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  std::runtime_error *v65;
  std::string v66;
  _QWORD v67[33];

  v2 = *(_QWORD *)(a2 + *(_QWORD *)(result + 96));
  if (*(_BYTE *)(result + 112))
  {
    v3 = *(_QWORD *)(result + 120);
    if (*(_BYTE *)(result + 113))
    {
      if (v2 < v3 || v2 > *(_QWORD *)(result + 128))
      {
        v4 = result;
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v67);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"value ", 6);
        v5 = (_QWORD *)std::ostream::operator<<();
        v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" for Parameter ", 15);
        v7 = *(char *)(v4 + 47);
        if (v7 >= 0)
          v8 = v4 + 24;
        else
          v8 = *(_QWORD *)(v4 + 24);
        if (v7 >= 0)
          v9 = *(unsigned __int8 *)(v4 + 47);
        else
          v9 = *(_QWORD *)(v4 + 32);
        v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" exceed bound [", 15);
        v11 = (_QWORD *)std::ostream::operator<<();
        v66.__r_.__value_.__s.__data_[0] = 44;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v66, 1);
        v12 = (_QWORD *)std::ostream::operator<<();
        v66.__r_.__value_.__s.__data_[0] = 93;
        v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v66, 1);
        v66.__r_.__value_.__s.__data_[0] = 10;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)&v66, 1);
        v14 = *(char *)(v4 + 47);
        if (v14 >= 0)
          v15 = v4 + 24;
        else
          v15 = *(_QWORD *)(v4 + 24);
        if (v14 >= 0)
          v16 = *(unsigned __int8 *)(v4 + 47);
        else
          v16 = *(_QWORD *)(v4 + 32);
        v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v15, v16);
        v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)": ", 2);
        v21 = *(_QWORD *)(v4 + 72);
        v20 = v4 + 72;
        v19 = v21;
        v22 = *(char *)(v20 + 23);
        if (v22 >= 0)
          v23 = v20;
        else
          v23 = v19;
        if (v22 >= 0)
          v24 = *(unsigned __int8 *)(v20 + 23);
        else
          v24 = *(_QWORD *)(v20 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v23, v24);
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(exception, &v66);
        exception->__vftable = (std::runtime_error_vtbl *)&unk_24E6B55F0;
      }
    }
    else if (v2 < v3)
    {
      v46 = result;
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v67);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"value ", 6);
      v47 = (_QWORD *)std::ostream::operator<<();
      v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)" for Parameter ", 15);
      v49 = *(char *)(v46 + 47);
      if (v49 >= 0)
        v50 = v46 + 24;
      else
        v50 = *(_QWORD *)(v46 + 24);
      if (v49 >= 0)
        v51 = *(unsigned __int8 *)(v46 + 47);
      else
        v51 = *(_QWORD *)(v46 + 32);
      v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, v50, v51);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)" should be greater equal to ", 28);
      v53 = (_QWORD *)std::ostream::operator<<();
      v66.__r_.__value_.__s.__data_[0] = 10;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)&v66, 1);
      v54 = *(char *)(v46 + 47);
      if (v54 >= 0)
        v55 = v46 + 24;
      else
        v55 = *(_QWORD *)(v46 + 24);
      if (v54 >= 0)
        v56 = *(unsigned __int8 *)(v46 + 47);
      else
        v56 = *(_QWORD *)(v46 + 32);
      v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v55, v56);
      v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)": ", 2);
      v61 = *(_QWORD *)(v46 + 72);
      v60 = v46 + 72;
      v59 = v61;
      v62 = *(char *)(v60 + 23);
      if (v62 >= 0)
        v63 = v60;
      else
        v63 = v59;
      if (v62 >= 0)
        v64 = *(unsigned __int8 *)(v60 + 23);
      else
        v64 = *(_QWORD *)(v60 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, v63, v64);
      v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(v65, &v66);
      v65->__vftable = (std::runtime_error_vtbl *)&unk_24E6B55F0;
    }
  }
  else if (*(_BYTE *)(result + 113) && v2 > *(_QWORD *)(result + 128))
  {
    v26 = result;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"value ", 6);
    v27 = (_QWORD *)std::ostream::operator<<();
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" for Parameter ", 15);
    v29 = *(char *)(v26 + 47);
    if (v29 >= 0)
      v30 = v26 + 24;
    else
      v30 = *(_QWORD *)(v26 + 24);
    if (v29 >= 0)
      v31 = *(unsigned __int8 *)(v26 + 47);
    else
      v31 = *(_QWORD *)(v26 + 32);
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, v30, v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" should be smaller equal to ", 28);
    v33 = (_QWORD *)std::ostream::operator<<();
    v66.__r_.__value_.__s.__data_[0] = 10;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)&v66, 1);
    v34 = *(char *)(v26 + 47);
    if (v34 >= 0)
      v35 = v26 + 24;
    else
      v35 = *(_QWORD *)(v26 + 24);
    if (v34 >= 0)
      v36 = *(unsigned __int8 *)(v26 + 47);
    else
      v36 = *(_QWORD *)(v26 + 32);
    v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v35, v36);
    v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)": ", 2);
    v41 = *(_QWORD *)(v26 + 72);
    v40 = v26 + 72;
    v39 = v41;
    v42 = *(char *)(v40 + 23);
    if (v42 >= 0)
      v43 = v40;
    else
      v43 = v39;
    if (v42 >= 0)
      v44 = *(unsigned __int8 *)(v40 + 23);
    else
      v44 = *(_QWORD *)(v40 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, v43, v44);
    v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(v45, &v66);
    v45->__vftable = (std::runtime_error_vtbl *)&unk_24E6B55F0;
  }
  return result;
}

void sub_220F19748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<long long>,long long>::GetStringValue(_QWORD *a1, uint64_t a2)
{
  _QWORD v5[11];
  char v6;
  uint64_t v7;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v5);
  (*(void (**)(_QWORD *, _QWORD *, _QWORD))(*a1 + 64))(a1, v5, *(_QWORD *)(a2 + a1[12]));
  std::stringbuf::str();
  v5[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v5[1] = MEMORY[0x24BEDB848] + 16;
  if (v6 < 0)
    operator delete((void *)v5[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v7);
}

void sub_220F19878(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<long long>,long long>::GetFieldInfo@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void **v8;
  __int128 v10;
  uint64_t v11;
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  std::string::operator=((std::string *)a2, (const std::string *)(a1 + 24));
  std::string::operator=((std::string *)(a2 + 24), (const std::string *)(a1 + 48));
  v4 = *(char *)(a1 + 71);
  if (v4 >= 0)
    v5 = a1 + 48;
  else
    v5 = *(_QWORD *)(a1 + 48);
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a1 + 71);
  else
    v6 = *(_QWORD *)(a1 + 56);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v5, v6);
  if (*(_BYTE *)(a1 + 8))
  {
    LOBYTE(v10) = 44;
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v10, 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" optional, default=", 19);
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 56))(a1, v12);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", required", 10);
  }
  std::stringbuf::str();
  v8 = (void **)(a2 + 48);
  if (*(char *)(a2 + 71) < 0)
    operator delete(*v8);
  *(_OWORD *)v8 = v10;
  *(_QWORD *)(a2 + 64) = v11;
  std::string::operator=((std::string *)(a2 + 72), (const std::string *)(a1 + 72));
  v12[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v12[1] = MEMORY[0x24BEDB848] + 16;
  if (v13 < 0)
    operator delete((void *)v12[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v14);
}

void sub_220F19A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v4;
  va_list va;

  va_start(va, a4);
  std::ostringstream::~ostringstream((uint64_t)va);
  dmlc::ParamFieldInfo::~ParamFieldInfo(v4);
  _Unwind_Resume(a1);
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<long long>,long long>::PrintDefaultValueString(_QWORD *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 64))(a1, a2, a1[13]);
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<long long>,long long>::PrintValue()
{
  return std::ostream::operator<<();
}

uint64_t dmlc::parameter::FieldEntryNumeric<dmlc::parameter::FieldEntry<long long>,long long>::set_range(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(result + 120) = a2;
  *(_QWORD *)(result + 128) = a3;
  *(_WORD *)(result + 112) = 257;
  return result;
}

uint64_t dmlc::parameter::FieldEntryNumeric<dmlc::parameter::FieldEntry<long long>,long long>::set_lower_bound(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 120) = a2;
  *(_BYTE *)(result + 112) = 1;
  return result;
}

char *std::vector<std::shared_ptr<xgboost::DMatrix>>::__init_with_size[abi:ne180100]<std::shared_ptr<xgboost::DMatrix>*,std::shared_ptr<xgboost::DMatrix>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<xgboost::tree::GradStats>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_220F19B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<xgboost::DMatrix>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t dmlc::Registry<xgboost::TreeUpdaterReg>::~Registry(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  void **v11;

  v3 = *(_QWORD **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 != *(_QWORD *)a1)
  {
    v4 = 0;
    while (1)
    {
      v5 = v3[v4];
      if (v5)
        break;
LABEL_16:
      if (++v4 >= (unint64_t)((v2 - (uint64_t)v3) >> 3))
        goto LABEL_17;
    }
    if (*(char *)(v5 + 127) < 0)
      operator delete(*(void **)(v5 + 104));
    v6 = *(_QWORD **)(v5 + 96);
    if (v6 == (_QWORD *)(v5 + 72))
    {
      v6 = (_QWORD *)(v5 + 72);
      v7 = 4;
    }
    else
    {
      if (!v6)
      {
LABEL_11:
        v11 = (void **)(v5 + 48);
        std::vector<dmlc::ParamFieldInfo>::__destroy_vector::operator()[abi:ne180100](&v11);
        if (*(char *)(v5 + 47) < 0)
          operator delete(*(void **)(v5 + 24));
        if (*(char *)(v5 + 23) < 0)
          operator delete(*(void **)v5);
        MEMORY[0x227667068](v5, 0x1032C40EA5FD255);
        v3 = *(_QWORD **)a1;
        v2 = *(_QWORD *)(a1 + 8);
        goto LABEL_16;
      }
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
    goto LABEL_11;
  }
LABEL_17:
  std::mutex::~mutex((std::mutex *)(a1 + 72));
  std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>>>::destroy(*(char **)(a1 + 56));
  v8 = *(void **)(a1 + 24);
  if (v8)
  {
    *(_QWORD *)(a1 + 32) = v8;
    operator delete(v8);
  }
  v9 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v9;
    operator delete(v9);
  }
  return a1;
}

uint64_t xgboost::TreeUpdater::Create(uint64_t a1, uint64_t a2, __int16 a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  std::string *Entry;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  const void *v14;
  uint64_t v15;
  char v16;
  __int16 v17;

  dmlc::Registry<xgboost::TreeUpdaterReg>::Get();
  dmlc::Registry<xgboost::TreeUpdaterReg>::Get();
  v6 = (uint64_t *)std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)&qword_253F37858, (const void **)a1);
  if (v6 == &qword_253F37860 || (v7 = v6[7]) == 0)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v16);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_updater.cc");
    v11 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v16);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Unknown tree updater ", 21);
    v13 = *(char *)(a1 + 23);
    if (v13 >= 0)
      v14 = (const void *)a1;
    else
      v14 = *(const void **)a1;
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(a1 + 23);
    else
      v15 = *(_QWORD *)(a1 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v14, v15);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v16);
    __break(1u);
LABEL_12:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  v17 = a3;
  v8 = *(_QWORD *)(v7 + 96);
  if (!v8)
    goto LABEL_12;
  result = (*(uint64_t (**)(uint64_t, __int16 *))(*(_QWORD *)v8 + 48))(v8, &v17);
  *(_QWORD *)(result + 8) = a2;
  return result;
}

void sub_220F19D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, char a12)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a12);
  _Unwind_Resume(a1);
}

uint64_t xgboost::data::SimpleDMatrix::SimpleDMatrix<xgboost::data::DenseAdapter>(uint64_t a1, _QWORD *a2, int a3, float a4)
{
  uint64_t ***v8;
  uint64_t v9;
  char **v10;
  _QWORD *v11;
  unint64_t v12;
  rabit::engine *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  void *Engine;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  std::string *Entry;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  _QWORD *v44;
  char v45;

  *(_QWORD *)a1 = &off_24E6BC9C8;
  xgboost::MetaInfo::MetaInfo((xgboost::MetaInfo *)(a1 + 8));
  v8 = (uint64_t ***)(a1 + 216);
  _ZNSt3__115allocate_sharedB8ne180100IN7xgboost10SparsePageENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((_QWORD *)(a1 + 216));
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_DWORD *)(a1 + 296) = -1;
  *(_QWORD *)(a1 + 313) = 0;
  *(_QWORD *)(a1 + 308) = 0;
  *(_QWORD *)(a1 + 300) = 0;
  *(_QWORD *)(a1 + 328) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 340) = -1;
  *(_QWORD *)(a1 + 344) = 0;
  *(_BYTE *)(a1 + 352) = 0;
  *(_WORD *)(a1 + 364) = 0;
  *(_DWORD *)(a1 + 356) = a3;
  *(_DWORD *)(a1 + 360) = -1;
  v9 = *(_QWORD *)(a1 + 216);
  v10 = *(char ***)v9;
  v11 = *(_QWORD **)(v9 + 8);
  (*(void (**)(_QWORD *))(*a2 + 16))(a2);
  v12 = 0;
  while (1)
  {
    v13 = (rabit::engine *)(*(uint64_t (**)(_QWORD *))(*a2 + 24))(a2);
    if (!(_DWORD)v13)
      break;
    v14 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*a2 + 32))(a2);
    v15 = xgboost::SparsePage::Push<xgboost::data::DenseAdapterBatch>(*v8, v14, 1, a4);
    if (v15 > v12)
      v12 = v15;
  }
  v16 = a2[6];
  if (v16 == -1)
    v16 = v12;
  *(_QWORD *)(a1 + 16) = v16;
  Engine = rabit::engine::GetEngine(v13);
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t, unint64_t *(*)(unint64_t *, unint64_t *, int), _QWORD, _QWORD))(*(_QWORD *)Engine + 8))(Engine, a1 + 16, 8, 1, rabit::op::Reducer<rabit::op::Max,unsigned long long>, 0, 0);
  v18 = a2[5];
  v44 = v11;
  if (v18 == -1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v45);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/simple_dmatrix.cc");
    v23 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v45);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Check failed: (std::is_same<AdapterT, CSCAdapter>::value)", 57);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Expecting CSCAdapter", 20);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v45);
    v18 = ((v10[1] - *v10) >> 3) - 1;
  }
  else
  {
    v19 = *v10;
    v20 = v10[1];
    if (*v10 == v20)
    {
      v21 = (unint64_t)v10[2];
      if ((unint64_t)v19 >= v21)
      {
        v26 = v21 - (_QWORD)v19;
        v27 = v26 >> 2;
        if ((unint64_t)(v26 >> 2) <= 1)
          v27 = 1;
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
          v28 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v28 = v27;
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(v10 + 2), v28);
        v29 = *v10;
        v30 = v10[1];
        v32 = &v19[8 * v31];
        *(_QWORD *)v19 = 0;
        v20 = v19 + 8;
        while (v30 != v29)
        {
          v33 = *((_QWORD *)v30 - 1);
          v30 -= 8;
          *((_QWORD *)v19 - 1) = v33;
          v19 -= 8;
        }
        *v10 = v19;
        v10[1] = v20;
        v10[2] = v32;
        if (v29)
        {
          operator delete(v29);
          v19 = *v10;
        }
      }
      else
      {
        *(_QWORD *)v19 = 0;
        v20 = v19 + 8;
      }
      v10[1] = v20;
      v18 = a2[5];
    }
    v34 = (v20 - v19) >> 3;
    if (v34 - 1 < v18)
    {
      v35 = v10 + 2;
      do
      {
        if ((unint64_t)v20 >= *v35)
        {
          v36 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 61)
            std::vector<void *>::__throw_length_error[abi:ne180100]();
          v37 = *v35 - (_QWORD)v19;
          if (v37 >> 2 > v36)
            v36 = v37 >> 2;
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
            v38 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v38 = v36;
          if (v38)
          {
            v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(v10 + 2), v38);
            v19 = *v10;
            v40 = v10[1];
          }
          else
          {
            v39 = 0;
            v40 = v20;
          }
          v41 = &v39[8 * v34];
          *(_QWORD *)v41 = *((_QWORD *)v20 - 1);
          v20 = v41 + 8;
          while (v40 != v19)
          {
            v42 = *((_QWORD *)v40 - 1);
            v40 -= 8;
            *((_QWORD *)v41 - 1) = v42;
            v41 -= 8;
          }
          *v10 = v41;
          v10[1] = v20;
          v10[2] = &v39[8 * v38];
          if (v19)
          {
            operator delete(v19);
            v19 = *v10;
          }
          else
          {
            v19 = v41;
          }
        }
        else
        {
          *(_QWORD *)v20 = *((_QWORD *)v20 - 1);
          v20 += 8;
        }
        v10[1] = v20;
        v34 = (v20 - v19) >> 3;
        v18 = a2[5];
      }
      while (v34 - 1 < v18);
    }
  }
  *(_QWORD *)(a1 + 8) = v18;
  *(_QWORD *)(a1 + 24) = (uint64_t)(v44[1] - *v44) >> 3;
  if (!xgboost::SparsePage::IsIndicesSorted(*(uint64_t ***)(a1 + 216), 1))
    xgboost::SparsePage::SortIndices(*v8, 1);
  return a1;
}

{
  return __ZN7xgboost4data13SimpleDMatrixC2INS0_12DenseAdapterEEEPT_fi(a1, a2, a3, a4);
}

void sub_220F1A0D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xgboost::MetaInfo *a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14)
{
  xgboost::DMatrix *v14;
  uint64_t v15;
  uint64_t v16;
  xgboost::MetaInfo *v17;

  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v16 + 48);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v16 + 32);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](a10);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v16);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v15);
  xgboost::MetaInfo::~MetaInfo(v17);
  xgboost::DMatrix::~DMatrix(v14);
  _Unwind_Resume(a1);
}

uint64_t xgboost::data::SimpleDMatrix::SimpleDMatrix<xgboost::data::ArrayAdapter>(uint64_t a1, _QWORD *a2, int a3, float a4)
{
  uint64_t ***v8;
  uint64_t v9;
  char **v10;
  _QWORD *v11;
  unint64_t v12;
  rabit::engine *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *Engine;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  std::string *Entry;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  _QWORD *v44;
  char v45;

  *(_QWORD *)a1 = &off_24E6BC9C8;
  xgboost::MetaInfo::MetaInfo((xgboost::MetaInfo *)(a1 + 8));
  v8 = (uint64_t ***)(a1 + 216);
  _ZNSt3__115allocate_sharedB8ne180100IN7xgboost10SparsePageENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((_QWORD *)(a1 + 216));
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_DWORD *)(a1 + 296) = -1;
  *(_QWORD *)(a1 + 313) = 0;
  *(_QWORD *)(a1 + 308) = 0;
  *(_QWORD *)(a1 + 300) = 0;
  *(_QWORD *)(a1 + 328) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 340) = -1;
  *(_QWORD *)(a1 + 344) = 0;
  *(_BYTE *)(a1 + 352) = 0;
  *(_WORD *)(a1 + 364) = 0;
  *(_DWORD *)(a1 + 356) = a3;
  *(_DWORD *)(a1 + 360) = -1;
  v9 = *(_QWORD *)(a1 + 216);
  v10 = *(char ***)v9;
  v11 = *(_QWORD **)(v9 + 8);
  (*(void (**)(_QWORD *))(*a2 + 16))(a2);
  v12 = 0;
  while (1)
  {
    v13 = (rabit::engine *)(*(uint64_t (**)(_QWORD *))(*a2 + 24))(a2);
    if (!(_DWORD)v13)
      break;
    v14 = (*(uint64_t (**)(_QWORD *))(*a2 + 32))(a2);
    v15 = xgboost::SparsePage::Push<xgboost::data::ArrayAdapterBatch>(*v8, v14, 1, a4);
    if (v15 > v12)
      v12 = v15;
  }
  v16 = a2[16];
  if (v16 == -1)
    v16 = v12;
  *(_QWORD *)(a1 + 16) = v16;
  Engine = rabit::engine::GetEngine(v13);
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t, unint64_t *(*)(unint64_t *, unint64_t *, int), _QWORD, _QWORD))(*(_QWORD *)Engine + 8))(Engine, a1 + 16, 8, 1, rabit::op::Reducer<rabit::op::Max,unsigned long long>, 0, 0);
  v18 = a2[15];
  v44 = v11;
  if (v18 == -1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v45);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/simple_dmatrix.cc");
    v23 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v45);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Check failed: (std::is_same<AdapterT, CSCAdapter>::value)", 57);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Expecting CSCAdapter", 20);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v45);
    v18 = ((v10[1] - *v10) >> 3) - 1;
  }
  else
  {
    v19 = *v10;
    v20 = v10[1];
    if (*v10 == v20)
    {
      v21 = (unint64_t)v10[2];
      if ((unint64_t)v19 >= v21)
      {
        v26 = v21 - (_QWORD)v19;
        v27 = v26 >> 2;
        if ((unint64_t)(v26 >> 2) <= 1)
          v27 = 1;
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
          v28 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v28 = v27;
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(v10 + 2), v28);
        v29 = *v10;
        v30 = v10[1];
        v32 = &v19[8 * v31];
        *(_QWORD *)v19 = 0;
        v20 = v19 + 8;
        while (v30 != v29)
        {
          v33 = *((_QWORD *)v30 - 1);
          v30 -= 8;
          *((_QWORD *)v19 - 1) = v33;
          v19 -= 8;
        }
        *v10 = v19;
        v10[1] = v20;
        v10[2] = v32;
        if (v29)
        {
          operator delete(v29);
          v19 = *v10;
        }
      }
      else
      {
        *(_QWORD *)v19 = 0;
        v20 = v19 + 8;
      }
      v10[1] = v20;
      v18 = a2[15];
    }
    v34 = (v20 - v19) >> 3;
    if (v34 - 1 < v18)
    {
      v35 = v10 + 2;
      do
      {
        if ((unint64_t)v20 >= *v35)
        {
          v36 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 61)
            std::vector<void *>::__throw_length_error[abi:ne180100]();
          v37 = *v35 - (_QWORD)v19;
          if (v37 >> 2 > v36)
            v36 = v37 >> 2;
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
            v38 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v38 = v36;
          if (v38)
          {
            v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(v10 + 2), v38);
            v19 = *v10;
            v40 = v10[1];
          }
          else
          {
            v39 = 0;
            v40 = v20;
          }
          v41 = &v39[8 * v34];
          *(_QWORD *)v41 = *((_QWORD *)v20 - 1);
          v20 = v41 + 8;
          while (v40 != v19)
          {
            v42 = *((_QWORD *)v40 - 1);
            v40 -= 8;
            *((_QWORD *)v41 - 1) = v42;
            v41 -= 8;
          }
          *v10 = v41;
          v10[1] = v20;
          v10[2] = &v39[8 * v38];
          if (v19)
          {
            operator delete(v19);
            v19 = *v10;
          }
          else
          {
            v19 = v41;
          }
        }
        else
        {
          *(_QWORD *)v20 = *((_QWORD *)v20 - 1);
          v20 += 8;
        }
        v10[1] = v20;
        v34 = (v20 - v19) >> 3;
        v18 = a2[15];
      }
      while (v34 - 1 < v18);
    }
  }
  *(_QWORD *)(a1 + 8) = v18;
  *(_QWORD *)(a1 + 24) = (uint64_t)(v44[1] - *v44) >> 3;
  if (!xgboost::SparsePage::IsIndicesSorted(*(uint64_t ***)(a1 + 216), 1))
    xgboost::SparsePage::SortIndices(*v8, 1);
  return a1;
}

{
  return __ZN7xgboost4data13SimpleDMatrixC2INS0_12ArrayAdapterEEEPT_fi(a1, a2, a3, a4);
}

void sub_220F1A510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xgboost::MetaInfo *a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14)
{
  xgboost::DMatrix *v14;
  uint64_t v15;
  uint64_t v16;
  xgboost::MetaInfo *v17;

  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v16 + 48);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v16 + 32);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](a10);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v16);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v15);
  xgboost::MetaInfo::~MetaInfo(v17);
  xgboost::DMatrix::~DMatrix(v14);
  _Unwind_Resume(a1);
}

uint64_t xgboost::data::SimpleDMatrix::SimpleDMatrix<xgboost::data::CSRAdapter>(uint64_t a1, _QWORD *a2, int a3, float a4)
{
  uint64_t ***v8;
  uint64_t v9;
  char **v10;
  _QWORD *v11;
  unint64_t v12;
  rabit::engine *v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  void *Engine;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  std::string *Entry;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  _QWORD *v44;
  char v45;

  *(_QWORD *)a1 = &off_24E6BC9C8;
  xgboost::MetaInfo::MetaInfo((xgboost::MetaInfo *)(a1 + 8));
  v8 = (uint64_t ***)(a1 + 216);
  _ZNSt3__115allocate_sharedB8ne180100IN7xgboost10SparsePageENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((_QWORD *)(a1 + 216));
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_DWORD *)(a1 + 296) = -1;
  *(_QWORD *)(a1 + 313) = 0;
  *(_QWORD *)(a1 + 308) = 0;
  *(_QWORD *)(a1 + 300) = 0;
  *(_QWORD *)(a1 + 328) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 340) = -1;
  *(_QWORD *)(a1 + 344) = 0;
  *(_BYTE *)(a1 + 352) = 0;
  *(_WORD *)(a1 + 364) = 0;
  *(_DWORD *)(a1 + 356) = a3;
  *(_DWORD *)(a1 + 360) = -1;
  v9 = *(_QWORD *)(a1 + 216);
  v10 = *(char ***)v9;
  v11 = *(_QWORD **)(v9 + 8);
  (*(void (**)(_QWORD *))(*a2 + 16))(a2);
  v12 = 0;
  while (1)
  {
    v13 = (rabit::engine *)(*(uint64_t (**)(_QWORD *))(*a2 + 24))(a2);
    if (!(_DWORD)v13)
      break;
    v14 = (uint64_t *)(*(uint64_t (**)(_QWORD *))(*a2 + 32))(a2);
    v15 = xgboost::SparsePage::Push<xgboost::data::CSRAdapterBatch>(*v8, v14, 1, a4);
    if (v15 > v12)
      v12 = v15;
  }
  v16 = a2[7];
  if (v16 == -1)
    v16 = v12;
  *(_QWORD *)(a1 + 16) = v16;
  Engine = rabit::engine::GetEngine(v13);
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t, unint64_t *(*)(unint64_t *, unint64_t *, int), _QWORD, _QWORD))(*(_QWORD *)Engine + 8))(Engine, a1 + 16, 8, 1, rabit::op::Reducer<rabit::op::Max,unsigned long long>, 0, 0);
  v18 = a2[6];
  v44 = v11;
  if (v18 == -1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v45);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/simple_dmatrix.cc");
    v23 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v45);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Check failed: (std::is_same<AdapterT, CSCAdapter>::value)", 57);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Expecting CSCAdapter", 20);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v45);
    v18 = ((v10[1] - *v10) >> 3) - 1;
  }
  else
  {
    v19 = *v10;
    v20 = v10[1];
    if (*v10 == v20)
    {
      v21 = (unint64_t)v10[2];
      if ((unint64_t)v19 >= v21)
      {
        v26 = v21 - (_QWORD)v19;
        v27 = v26 >> 2;
        if ((unint64_t)(v26 >> 2) <= 1)
          v27 = 1;
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
          v28 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v28 = v27;
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(v10 + 2), v28);
        v29 = *v10;
        v30 = v10[1];
        v32 = &v19[8 * v31];
        *(_QWORD *)v19 = 0;
        v20 = v19 + 8;
        while (v30 != v29)
        {
          v33 = *((_QWORD *)v30 - 1);
          v30 -= 8;
          *((_QWORD *)v19 - 1) = v33;
          v19 -= 8;
        }
        *v10 = v19;
        v10[1] = v20;
        v10[2] = v32;
        if (v29)
        {
          operator delete(v29);
          v19 = *v10;
        }
      }
      else
      {
        *(_QWORD *)v19 = 0;
        v20 = v19 + 8;
      }
      v10[1] = v20;
      v18 = a2[6];
    }
    v34 = (v20 - v19) >> 3;
    if (v34 - 1 < v18)
    {
      v35 = v10 + 2;
      do
      {
        if ((unint64_t)v20 >= *v35)
        {
          v36 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 61)
            std::vector<void *>::__throw_length_error[abi:ne180100]();
          v37 = *v35 - (_QWORD)v19;
          if (v37 >> 2 > v36)
            v36 = v37 >> 2;
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
            v38 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v38 = v36;
          if (v38)
          {
            v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(v10 + 2), v38);
            v19 = *v10;
            v40 = v10[1];
          }
          else
          {
            v39 = 0;
            v40 = v20;
          }
          v41 = &v39[8 * v34];
          *(_QWORD *)v41 = *((_QWORD *)v20 - 1);
          v20 = v41 + 8;
          while (v40 != v19)
          {
            v42 = *((_QWORD *)v40 - 1);
            v40 -= 8;
            *((_QWORD *)v41 - 1) = v42;
            v41 -= 8;
          }
          *v10 = v41;
          v10[1] = v20;
          v10[2] = &v39[8 * v38];
          if (v19)
          {
            operator delete(v19);
            v19 = *v10;
          }
          else
          {
            v19 = v41;
          }
        }
        else
        {
          *(_QWORD *)v20 = *((_QWORD *)v20 - 1);
          v20 += 8;
        }
        v10[1] = v20;
        v34 = (v20 - v19) >> 3;
        v18 = a2[6];
      }
      while (v34 - 1 < v18);
    }
  }
  *(_QWORD *)(a1 + 8) = v18;
  *(_QWORD *)(a1 + 24) = (uint64_t)(v44[1] - *v44) >> 3;
  if (!xgboost::SparsePage::IsIndicesSorted(*(uint64_t ***)(a1 + 216), 1))
    xgboost::SparsePage::SortIndices(*v8, 1);
  return a1;
}

{
  return __ZN7xgboost4data13SimpleDMatrixC2INS0_10CSRAdapterEEEPT_fi(a1, a2, a3, a4);
}

void sub_220F1A950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xgboost::MetaInfo *a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14)
{
  xgboost::DMatrix *v14;
  uint64_t v15;
  uint64_t v16;
  xgboost::MetaInfo *v17;

  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v16 + 48);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v16 + 32);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](a10);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v16);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v15);
  xgboost::MetaInfo::~MetaInfo(v17);
  xgboost::DMatrix::~DMatrix(v14);
  _Unwind_Resume(a1);
}

uint64_t xgboost::data::SimpleDMatrix::SimpleDMatrix<xgboost::data::CSRArrayAdapter>(uint64_t a1, _QWORD *a2, int a3, float a4)
{
  uint64_t ***v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  rabit::engine *v13;
  xgboost::data::CSRArrayAdapterBatch *v14;
  unint64_t v15;
  unint64_t v16;
  void *Engine;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v43;

  *(_QWORD *)a1 = &off_24E6BC9C8;
  xgboost::MetaInfo::MetaInfo((xgboost::MetaInfo *)(a1 + 8));
  v8 = (uint64_t ***)(a1 + 216);
  _ZNSt3__115allocate_sharedB8ne180100IN7xgboost10SparsePageENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((_QWORD *)(a1 + 216));
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_DWORD *)(a1 + 296) = -1;
  *(_QWORD *)(a1 + 313) = 0;
  *(_QWORD *)(a1 + 308) = 0;
  *(_QWORD *)(a1 + 300) = 0;
  *(_QWORD *)(a1 + 328) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 340) = -1;
  *(_QWORD *)(a1 + 344) = 0;
  *(_BYTE *)(a1 + 352) = 0;
  *(_WORD *)(a1 + 364) = 0;
  *(_DWORD *)(a1 + 356) = a3;
  *(_DWORD *)(a1 + 360) = -1;
  v9 = *(uint64_t **)(a1 + 216);
  v10 = *v9;
  v11 = (_QWORD *)v9[1];
  (*(void (**)(_QWORD *))(*a2 + 16))(a2);
  v12 = 0;
  while (1)
  {
    v13 = (rabit::engine *)(*(uint64_t (**)(_QWORD *))(*a2 + 24))(a2);
    if (!(_DWORD)v13)
      break;
    v14 = (xgboost::data::CSRArrayAdapterBatch *)(*(uint64_t (**)(_QWORD *))(*a2 + 32))(a2);
    v15 = xgboost::SparsePage::Push<xgboost::data::CSRArrayAdapterBatch>(*v8, v14, 1, a4);
    if (v15 > v12)
      v12 = v15;
  }
  v16 = a2[45];
  if (v16 == -1)
    v16 = v12;
  *(_QWORD *)(a1 + 16) = v16;
  Engine = rabit::engine::GetEngine(v13);
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t, unint64_t *(*)(unint64_t *, unint64_t *, int), _QWORD, _QWORD))(*(_QWORD *)Engine + 8))(Engine, a1 + 16, 8, 1, rabit::op::Reducer<rabit::op::Max,unsigned long long>, 0, 0);
  v18 = *(_QWORD **)v10;
  v19 = *(_QWORD **)(v10 + 8);
  v43 = v11;
  if (*(_QWORD **)v10 == v19)
  {
    v20 = *(_QWORD *)(v10 + 16);
    if ((unint64_t)v18 >= v20)
    {
      v21 = v20 - (_QWORD)v18;
      v22 = v21 >> 2;
      if ((unint64_t)(v21 >> 2) <= 1)
        v22 = 1;
      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
        v23 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v23 = v22;
      v18 = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v10 + 16, v23);
      v24 = *(_QWORD **)v10;
      v25 = *(_QWORD **)(v10 + 8);
      v27 = &v18[v26];
      *v18 = 0;
      v19 = v18 + 1;
      while (v25 != v24)
      {
        v28 = *--v25;
        *--v18 = v28;
      }
      *(_QWORD *)v10 = v18;
      *(_QWORD *)(v10 + 8) = v19;
      *(_QWORD *)(v10 + 16) = v27;
      if (v24)
      {
        operator delete(v24);
        v18 = *(_QWORD **)v10;
      }
    }
    else
    {
      *v18 = 0;
      v19 = v18 + 1;
    }
    *(_QWORD *)(v10 + 8) = v19;
  }
  v29 = v19 - v18;
  v30 = a2[27];
  v31 = v30 != 0;
  v32 = v30 - 1;
  if (!v31)
    v32 = 0;
  if (v29 - 1 < v32)
  {
    v33 = (_QWORD *)(v10 + 16);
    do
    {
      if ((unint64_t)v19 >= *v33)
      {
        v34 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 61)
          std::vector<void *>::__throw_length_error[abi:ne180100]();
        v35 = *v33 - (_QWORD)v18;
        if (v35 >> 2 > v34)
          v34 = v35 >> 2;
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
          v36 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v36 = v34;
        if (v36)
        {
          v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v10 + 16, v36);
          v18 = *(_QWORD **)v10;
          v38 = *(_QWORD **)(v10 + 8);
        }
        else
        {
          v37 = 0;
          v38 = v19;
        }
        v39 = &v37[8 * v29];
        *(_QWORD *)v39 = *(v19 - 1);
        v19 = v39 + 8;
        while (v38 != v18)
        {
          v40 = *--v38;
          *((_QWORD *)v39 - 1) = v40;
          v39 -= 8;
        }
        *(_QWORD *)v10 = v39;
        *(_QWORD *)(v10 + 8) = v19;
        *(_QWORD *)(v10 + 16) = &v37[8 * v36];
        if (v18)
        {
          operator delete(v18);
          v18 = *(_QWORD **)v10;
        }
        else
        {
          v18 = v39;
        }
      }
      else
      {
        *v19 = *(v19 - 1);
        ++v19;
      }
      *(_QWORD *)(v10 + 8) = v19;
      v29 = v19 - v18;
      v41 = a2[27];
      v31 = v41 != 0;
      v32 = v41 - 1;
      if (!v31)
        v32 = 0;
    }
    while (v29 - 1 < v32);
  }
  *(_QWORD *)(a1 + 8) = v32;
  *(_QWORD *)(a1 + 24) = (uint64_t)(v43[1] - *v43) >> 3;
  if (!xgboost::SparsePage::IsIndicesSorted(*(uint64_t ***)(a1 + 216), 1))
    xgboost::SparsePage::SortIndices(*v8, 1);
  return a1;
}

{
  return __ZN7xgboost4data13SimpleDMatrixC2INS0_15CSRArrayAdapterEEEPT_fi(a1, a2, a3, a4);
}

void sub_220F1AD20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xgboost::MetaInfo *a10)
{
  xgboost::DMatrix *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v12 + 48);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v12 + 32);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v13);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v12);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v11);
  xgboost::MetaInfo::~MetaInfo(a10);
  xgboost::DMatrix::~DMatrix(v10);
  _Unwind_Resume(a1);
}

uint64_t xgboost::data::SimpleDMatrix::SimpleDMatrix<xgboost::data::CSCAdapter>(uint64_t a1, _QWORD *a2, int a3, float a4)
{
  uint64_t ***v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  rabit::engine *v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  void *Engine;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v40;

  *(_QWORD *)a1 = &off_24E6BC9C8;
  xgboost::MetaInfo::MetaInfo((xgboost::MetaInfo *)(a1 + 8));
  v8 = (uint64_t ***)(a1 + 216);
  _ZNSt3__115allocate_sharedB8ne180100IN7xgboost10SparsePageENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((_QWORD *)(a1 + 216));
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_DWORD *)(a1 + 296) = -1;
  *(_QWORD *)(a1 + 313) = 0;
  *(_QWORD *)(a1 + 308) = 0;
  *(_QWORD *)(a1 + 300) = 0;
  *(_QWORD *)(a1 + 328) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 340) = -1;
  *(_QWORD *)(a1 + 344) = 0;
  *(_BYTE *)(a1 + 352) = 0;
  *(_WORD *)(a1 + 364) = 0;
  *(_DWORD *)(a1 + 356) = a3;
  *(_DWORD *)(a1 + 360) = -1;
  v9 = *(uint64_t **)(a1 + 216);
  v10 = *v9;
  v11 = (_QWORD *)v9[1];
  (*(void (**)(_QWORD *))(*a2 + 16))(a2);
  v12 = 0;
  while (1)
  {
    v13 = (rabit::engine *)(*(uint64_t (**)(_QWORD *))(*a2 + 24))(a2);
    if (!(_DWORD)v13)
      break;
    v14 = (uint64_t *)(*(uint64_t (**)(_QWORD *))(*a2 + 32))(a2);
    v15 = xgboost::SparsePage::Push<xgboost::data::CSCAdapterBatch>(*v8, v14, a4);
    if (v15 > v12)
      v12 = v15;
  }
  v16 = a2[7];
  if (v16 == -1)
    v16 = v12;
  *(_QWORD *)(a1 + 16) = v16;
  Engine = rabit::engine::GetEngine(v13);
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t, unint64_t *(*)(unint64_t *, unint64_t *, int), _QWORD, _QWORD))(*(_QWORD *)Engine + 8))(Engine, a1 + 16, 8, 1, rabit::op::Reducer<rabit::op::Max,unsigned long long>, 0, 0);
  v18 = a2[6];
  v40 = v11;
  if (v18 + 1 > 1)
  {
    v19 = *(_QWORD **)v10;
    v20 = *(_QWORD **)(v10 + 8);
    if (*(_QWORD **)v10 == v20)
    {
      v21 = *(_QWORD *)(v10 + 16);
      if ((unint64_t)v19 >= v21)
      {
        v22 = v21 - (_QWORD)v19;
        v23 = v22 >> 2;
        if ((unint64_t)(v22 >> 2) <= 1)
          v23 = 1;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        v19 = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v10 + 16, v24);
        v25 = *(_QWORD **)v10;
        v26 = *(_QWORD **)(v10 + 8);
        v28 = &v19[v27];
        *v19 = 0;
        v20 = v19 + 1;
        while (v26 != v25)
        {
          v29 = *--v26;
          *--v19 = v29;
        }
        *(_QWORD *)v10 = v19;
        *(_QWORD *)(v10 + 8) = v20;
        *(_QWORD *)(v10 + 16) = v28;
        if (v25)
        {
          operator delete(v25);
          v19 = *(_QWORD **)v10;
        }
      }
      else
      {
        *v19 = 0;
        v20 = v19 + 1;
      }
      *(_QWORD *)(v10 + 8) = v20;
      v18 = a2[6];
    }
    v30 = v20 - v19;
    if (!v18)
      v18 = -1;
    if (v30 - 1 < v18)
    {
      v31 = (_QWORD *)(v10 + 16);
      do
      {
        if ((unint64_t)v20 >= *v31)
        {
          v32 = v30 + 1;
          if ((unint64_t)(v30 + 1) >> 61)
            std::vector<void *>::__throw_length_error[abi:ne180100]();
          v33 = *v31 - (_QWORD)v19;
          if (v33 >> 2 > v32)
            v32 = v33 >> 2;
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
            v34 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v34 = v32;
          if (v34)
          {
            v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v10 + 16, v34);
            v19 = *(_QWORD **)v10;
            v36 = *(_QWORD **)(v10 + 8);
          }
          else
          {
            v35 = 0;
            v36 = v20;
          }
          v37 = &v35[8 * v30];
          *(_QWORD *)v37 = *(v20 - 1);
          v20 = v37 + 8;
          while (v36 != v19)
          {
            v38 = *--v36;
            *((_QWORD *)v37 - 1) = v38;
            v37 -= 8;
          }
          *(_QWORD *)v10 = v37;
          *(_QWORD *)(v10 + 8) = v20;
          *(_QWORD *)(v10 + 16) = &v35[8 * v34];
          if (v19)
          {
            operator delete(v19);
            v19 = *(_QWORD **)v10;
          }
          else
          {
            v19 = v37;
          }
        }
        else
        {
          *v20 = *(v20 - 1);
          ++v20;
        }
        *(_QWORD *)(v10 + 8) = v20;
        v30 = v20 - v19;
        v18 = a2[6];
        if (!v18)
          v18 = -1;
      }
      while (v30 - 1 < v18);
    }
  }
  else
  {
    v18 = ((uint64_t)(*(_QWORD *)(v10 + 8) - *(_QWORD *)v10) >> 3) - 1;
  }
  *(_QWORD *)(a1 + 8) = v18;
  *(_QWORD *)(a1 + 24) = (uint64_t)(v40[1] - *v40) >> 3;
  if (!xgboost::SparsePage::IsIndicesSorted(*(uint64_t ***)(a1 + 216), 1))
    xgboost::SparsePage::SortIndices(*v8, 1);
  return a1;
}

{
  return __ZN7xgboost4data13SimpleDMatrixC2INS0_10CSCAdapterEEEPT_fi(a1, a2, a3, a4);
}

void sub_220F1B100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xgboost::MetaInfo *a9, uint64_t a10)
{
  xgboost::DMatrix *v10;
  uint64_t v11;
  uint64_t v12;
  xgboost::MetaInfo *v13;

  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v12 + 48);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v12 + 32);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](a10);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v12);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v11);
  xgboost::MetaInfo::~MetaInfo(v13);
  xgboost::DMatrix::~DMatrix(v10);
  _Unwind_Resume(a1);
}

uint64_t xgboost::data::SimpleDMatrix::SimpleDMatrix<xgboost::data::DataTableAdapter>(uint64_t a1, _QWORD *a2, int a3, float a4)
{
  uint64_t ***v8;
  uint64_t v9;
  char **v10;
  _QWORD *v11;
  unint64_t v12;
  rabit::engine *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  void *Engine;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  std::string *Entry;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  _QWORD *v44;
  char v45;

  *(_QWORD *)a1 = &off_24E6BC9C8;
  xgboost::MetaInfo::MetaInfo((xgboost::MetaInfo *)(a1 + 8));
  v8 = (uint64_t ***)(a1 + 216);
  _ZNSt3__115allocate_sharedB8ne180100IN7xgboost10SparsePageENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((_QWORD *)(a1 + 216));
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_DWORD *)(a1 + 296) = -1;
  *(_QWORD *)(a1 + 313) = 0;
  *(_QWORD *)(a1 + 308) = 0;
  *(_QWORD *)(a1 + 300) = 0;
  *(_QWORD *)(a1 + 328) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 340) = -1;
  *(_QWORD *)(a1 + 344) = 0;
  *(_BYTE *)(a1 + 352) = 0;
  *(_WORD *)(a1 + 364) = 0;
  *(_DWORD *)(a1 + 356) = a3;
  *(_DWORD *)(a1 + 360) = -1;
  v9 = *(_QWORD *)(a1 + 216);
  v10 = *(char ***)v9;
  v11 = *(_QWORD **)(v9 + 8);
  (*(void (**)(_QWORD *))(*a2 + 16))(a2);
  v12 = 0;
  while (1)
  {
    v13 = (rabit::engine *)(*(uint64_t (**)(_QWORD *))(*a2 + 24))(a2);
    if (!(_DWORD)v13)
      break;
    v14 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*a2 + 32))(a2);
    v15 = xgboost::SparsePage::Push<xgboost::data::DataTableAdapterBatch>(*v8, v14, a4);
    if (v15 > v12)
      v12 = v15;
  }
  v16 = a2[7];
  if (v16 == -1)
    v16 = v12;
  *(_QWORD *)(a1 + 16) = v16;
  Engine = rabit::engine::GetEngine(v13);
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t, unint64_t *(*)(unint64_t *, unint64_t *, int), _QWORD, _QWORD))(*(_QWORD *)Engine + 8))(Engine, a1 + 16, 8, 1, rabit::op::Reducer<rabit::op::Max,unsigned long long>, 0, 0);
  v18 = a2[6];
  v44 = v11;
  if (v18 == -1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v45);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/simple_dmatrix.cc");
    v23 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v45);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Check failed: (std::is_same<AdapterT, CSCAdapter>::value)", 57);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Expecting CSCAdapter", 20);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v45);
    v18 = ((v10[1] - *v10) >> 3) - 1;
  }
  else
  {
    v19 = *v10;
    v20 = v10[1];
    if (*v10 == v20)
    {
      v21 = (unint64_t)v10[2];
      if ((unint64_t)v19 >= v21)
      {
        v26 = v21 - (_QWORD)v19;
        v27 = v26 >> 2;
        if ((unint64_t)(v26 >> 2) <= 1)
          v27 = 1;
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
          v28 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v28 = v27;
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(v10 + 2), v28);
        v29 = *v10;
        v30 = v10[1];
        v32 = &v19[8 * v31];
        *(_QWORD *)v19 = 0;
        v20 = v19 + 8;
        while (v30 != v29)
        {
          v33 = *((_QWORD *)v30 - 1);
          v30 -= 8;
          *((_QWORD *)v19 - 1) = v33;
          v19 -= 8;
        }
        *v10 = v19;
        v10[1] = v20;
        v10[2] = v32;
        if (v29)
        {
          operator delete(v29);
          v19 = *v10;
        }
      }
      else
      {
        *(_QWORD *)v19 = 0;
        v20 = v19 + 8;
      }
      v10[1] = v20;
      v18 = a2[6];
    }
    v34 = (v20 - v19) >> 3;
    if (v34 - 1 < v18)
    {
      v35 = v10 + 2;
      do
      {
        if ((unint64_t)v20 >= *v35)
        {
          v36 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 61)
            std::vector<void *>::__throw_length_error[abi:ne180100]();
          v37 = *v35 - (_QWORD)v19;
          if (v37 >> 2 > v36)
            v36 = v37 >> 2;
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
            v38 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v38 = v36;
          if (v38)
          {
            v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(v10 + 2), v38);
            v19 = *v10;
            v40 = v10[1];
          }
          else
          {
            v39 = 0;
            v40 = v20;
          }
          v41 = &v39[8 * v34];
          *(_QWORD *)v41 = *((_QWORD *)v20 - 1);
          v20 = v41 + 8;
          while (v40 != v19)
          {
            v42 = *((_QWORD *)v40 - 1);
            v40 -= 8;
            *((_QWORD *)v41 - 1) = v42;
            v41 -= 8;
          }
          *v10 = v41;
          v10[1] = v20;
          v10[2] = &v39[8 * v38];
          if (v19)
          {
            operator delete(v19);
            v19 = *v10;
          }
          else
          {
            v19 = v41;
          }
        }
        else
        {
          *(_QWORD *)v20 = *((_QWORD *)v20 - 1);
          v20 += 8;
        }
        v10[1] = v20;
        v34 = (v20 - v19) >> 3;
        v18 = a2[6];
      }
      while (v34 - 1 < v18);
    }
  }
  *(_QWORD *)(a1 + 8) = v18;
  *(_QWORD *)(a1 + 24) = (uint64_t)(v44[1] - *v44) >> 3;
  if (!xgboost::SparsePage::IsIndicesSorted(*(uint64_t ***)(a1 + 216), 1))
    xgboost::SparsePage::SortIndices(*v8, 1);
  return a1;
}

{
  return __ZN7xgboost4data13SimpleDMatrixC2INS0_16DataTableAdapterEEEPT_fi(a1, a2, a3, a4);
}

void sub_220F1B524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xgboost::MetaInfo *a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14)
{
  xgboost::DMatrix *v14;
  uint64_t v15;
  uint64_t v16;
  xgboost::MetaInfo *v17;

  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v16 + 48);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v16 + 32);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](a10);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v16);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v15);
  xgboost::MetaInfo::~MetaInfo(v17);
  xgboost::DMatrix::~DMatrix(v14);
  _Unwind_Resume(a1);
}

uint64_t xgboost::data::SimpleDMatrix::SimpleDMatrix<xgboost::data::FileAdapter>(uint64_t a1, uint64_t a2, int a3, float a4)
{
  unint64_t *v8;
  uint64_t ***v9;
  uint64_t *v10;
  unint64_t v11;
  unsigned int v12;
  void **v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  unint64_t **v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  char *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  std::string *Entry;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t i;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  _DWORD *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  int v51;
  char *v52;
  _DWORD *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  int v61;
  void *Engine;
  char *v63;
  char *v64;
  uint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  _QWORD *v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  void *__p;
  void *__dst;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;

  *(_QWORD *)a1 = &off_24E6BC9C8;
  v8 = (unint64_t *)(a1 + 8);
  xgboost::MetaInfo::MetaInfo((xgboost::MetaInfo *)(a1 + 8));
  v9 = (uint64_t ***)(a1 + 216);
  _ZNSt3__115allocate_sharedB8ne180100IN7xgboost10SparsePageENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((_QWORD *)(a1 + 216));
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_DWORD *)(a1 + 296) = -1;
  *(_QWORD *)(a1 + 308) = 0;
  *(_QWORD *)(a1 + 300) = 0;
  *(_QWORD *)(a1 + 313) = 0;
  *(_QWORD *)(a1 + 328) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 340) = -1;
  *(_QWORD *)(a1 + 344) = 0;
  *(_BYTE *)(a1 + 352) = 0;
  *(_WORD *)(a1 + 364) = 0;
  *(_DWORD *)(a1 + 356) = a3;
  *(_DWORD *)(a1 + 360) = -1;
  __p = 0;
  __dst = 0;
  v81 = 0;
  v10 = *(uint64_t **)(a1 + 216);
  v76 = *v10;
  v75 = (_QWORD *)v10[1];
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  v77 = v8;
  v11 = 0;
  v12 = 0;
  v78 = 0;
  v13 = (void **)(a1 + 56);
  v14 = (_QWORD *)(a1 + 72);
  v15 = -1;
  while (1)
  {
    v16 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    if (!(_DWORD)v16)
      break;
    v17 = (unint64_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    v18 = xgboost::SparsePage::Push<xgboost::data::FileAdapterBatch>(*v9, v17, 1, a4);
    if (v18 > v11)
      v11 = v18;
    v19 = *v17;
    v20 = **v17;
    v21 = (char *)(*v17)[2];
    if (v21)
    {
      *(_QWORD *)(a1 + 48) = 1;
      std::vector<float>::__insert_with_size[abi:ne180100]<float const*,float const*>(*(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), v21, &v21[4 * *v19], *v19);
      v22 = *(_QWORD **)(a1 + 32);
      v23 = *(_QWORD *)(a1 + 40) + **v17;
      *(_QWORD *)(a1 + 40) = v23;
      v24 = (uint64_t)(v22[1] - *v22) >> 2;
      v82 = *(_QWORD *)(a1 + 48) * v23;
      v83 = v24;
      if (v24 != v82)
      {
        dmlc::LogCheckFormat<unsigned long,unsigned long>(&v84);
        if (v84)
        {
          Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v83);
          dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/linalg.h");
          v26 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v83);
          v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Check failed: ", 14);
          v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"this->Data()->Size() == detail::CalcSize(this->shape_)", 54);
          v29 = *(char *)(v84 + 23);
          v30 = v29 >= 0 ? v84 : *(_QWORD *)v84;
          v31 = v29 >= 0 ? *(unsigned __int8 *)(v84 + 23) : *(_QWORD *)(v84 + 8);
          v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, v30, v31);
          v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)": ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Inconsistent size after modification.", 37);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v83);
          v34 = v84;
          v84 = 0;
          if (v34)
            std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v84, v34);
        }
      }
      v19 = *v17;
    }
    v35 = (char *)v19[3];
    if (v35)
    {
      std::vector<float>::__insert_with_size[abi:ne180100]<float const*,float const*>(*(_QWORD *)(a1 + 80), *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8), v35, &v35[4 * *v19], *v19);
      v19 = *v17;
    }
    v78 += v20;
    v36 = (char *)v19[4];
    if (v36)
    {
      std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&__p, (uint64_t)__dst, v36, &v36[8 * *v19], *v19);
      v37 = *v17;
      v38 = **v17;
      if (v38)
      {
        for (i = 0; i < v38; ++i)
        {
          v40 = *(_QWORD *)(v37[4] + 8 * i);
          if (v15 == -1 || v15 != v40)
          {
            v42 = *(char **)(a1 + 64);
            v41 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v42 >= v41)
            {
              v44 = (char *)*v13;
              v45 = (v42 - (_BYTE *)*v13) >> 2;
              v46 = v45 + 1;
              if ((unint64_t)(v45 + 1) >> 62)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v47 = v41 - (_QWORD)v44;
              if (v47 >> 1 > v46)
                v46 = v47 >> 1;
              if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL)
                v48 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v48 = v46;
              if (v48)
              {
                v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 72, v48);
                v44 = *(char **)(a1 + 56);
                v42 = *(char **)(a1 + 64);
              }
              else
              {
                v49 = 0;
              }
              v50 = &v49[4 * v45];
              *(_DWORD *)v50 = v12;
              v43 = v50 + 4;
              while (v42 != v44)
              {
                v51 = *((_DWORD *)v42 - 1);
                v42 -= 4;
                *((_DWORD *)v50 - 1) = v51;
                v50 -= 4;
              }
              *(_QWORD *)(a1 + 56) = v50;
              *(_QWORD *)(a1 + 64) = v43;
              *(_QWORD *)(a1 + 72) = &v49[4 * v48];
              if (v44)
                operator delete(v44);
            }
            else
            {
              *(_DWORD *)v42 = v12;
              v43 = v42 + 4;
            }
            *(_QWORD *)(a1 + 64) = v43;
            v37 = *v17;
            v38 = **v17;
          }
          ++v12;
          v15 = v40;
        }
        v15 = v40;
        v9 = (uint64_t ***)(a1 + 216);
      }
    }
  }
  if (v15 != -1)
  {
    v52 = *(char **)(a1 + 64);
    if (v12 > *((_DWORD *)v52 - 1))
    {
      if ((unint64_t)v52 >= *v14)
      {
        v16 = (char *)*v13;
        v54 = (v52 - (_BYTE *)*v13) >> 2;
        v55 = v54 + 1;
        if ((unint64_t)(v54 + 1) >> 62)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v56 = *v14 - (_QWORD)v16;
        if (v56 >> 1 > v55)
          v55 = v56 >> 1;
        if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL)
          v57 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v57 = v55;
        if (v57)
        {
          v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 72, v57);
          v16 = *(char **)(a1 + 56);
          v52 = *(char **)(a1 + 64);
        }
        else
        {
          v58 = 0;
        }
        v59 = &v58[4 * v54];
        v60 = &v58[4 * v57];
        *(_DWORD *)v59 = v12;
        v53 = v59 + 4;
        while (v52 != v16)
        {
          v61 = *((_DWORD *)v52 - 1);
          v52 -= 4;
          *((_DWORD *)v59 - 1) = v61;
          v59 -= 4;
        }
        *(_QWORD *)(a1 + 56) = v59;
        *(_QWORD *)(a1 + 64) = v53;
        *(_QWORD *)(a1 + 72) = v60;
        if (v16)
          operator delete(v16);
      }
      else
      {
        *(_DWORD *)v52 = v12;
        v53 = v52 + 4;
      }
      *(_QWORD *)(a1 + 64) = v53;
    }
  }
  *(_QWORD *)(a1 + 16) = v11;
  Engine = rabit::engine::GetEngine((rabit::engine *)v16);
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t, unint64_t *(*)(unint64_t *, unint64_t *, int), _QWORD, _QWORD))(*(_QWORD *)Engine + 8))(Engine, a1 + 16, 8, 1, rabit::op::Reducer<rabit::op::Max,unsigned long long>, 0, 0);
  *v77 = v78;
  v63 = *(char **)v76;
  v64 = *(char **)(v76 + 8);
  v65 = (uint64_t)&v64[-*(_QWORD *)v76] >> 3;
  if (v65 - 1 < v78)
  {
    v66 = (_QWORD *)(v76 + 16);
    do
    {
      if ((unint64_t)v64 >= *v66)
      {
        v67 = v65 + 1;
        if ((unint64_t)(v65 + 1) >> 61)
          std::vector<void *>::__throw_length_error[abi:ne180100]();
        v68 = *v66 - (_QWORD)v63;
        if (v68 >> 2 > v67)
          v67 = v68 >> 2;
        if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8)
          v69 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v69 = v67;
        if (v69)
        {
          v70 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v76 + 16, v69);
          v63 = *(char **)v76;
          v71 = *(char **)(v76 + 8);
        }
        else
        {
          v70 = 0;
          v71 = v64;
        }
        v72 = &v70[8 * v65];
        *(_QWORD *)v72 = *((_QWORD *)v64 - 1);
        v64 = v72 + 8;
        while (v71 != v63)
        {
          v73 = *((_QWORD *)v71 - 1);
          v71 -= 8;
          *((_QWORD *)v72 - 1) = v73;
          v72 -= 8;
        }
        *(_QWORD *)v76 = v72;
        *(_QWORD *)(v76 + 8) = v64;
        *(_QWORD *)(v76 + 16) = &v70[8 * v69];
        if (v63)
        {
          operator delete(v63);
          v63 = *(char **)v76;
        }
        else
        {
          v63 = v72;
        }
      }
      else
      {
        *(_QWORD *)v64 = *((_QWORD *)v64 - 1);
        v64 += 8;
      }
      *(_QWORD *)(v76 + 8) = v64;
      v65 = (v64 - v63) >> 3;
    }
    while (v65 - 1 < v78);
  }
  *(_QWORD *)(a1 + 24) = (uint64_t)(v75[1] - *v75) >> 3;
  if (!xgboost::SparsePage::IsIndicesSorted(*(uint64_t ***)(a1 + 216), 1))
    xgboost::SparsePage::SortIndices(*(uint64_t ***)(a1 + 216), 1);
  if (__p)
  {
    __dst = __p;
    operator delete(__p);
  }
  return a1;
}

{
  return __ZN7xgboost4data13SimpleDMatrixC2INS0_11FileAdapterEEEPT_fi(a1, a2, a3, a4);
}

void sub_220F1BBB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22)
{
  xgboost::DMatrix *v22;
  xgboost::MetaInfo *v23;

  xgboost::MetaInfo::~MetaInfo(v23);
  xgboost::DMatrix::~DMatrix(v22);
  _Unwind_Resume(a1);
}

uint64_t xgboost::data::SimpleDMatrix::SimpleDMatrix<xgboost::data::IteratorAdapter<void *,int ()(void *,int (*)(void *,XGBoostBatchCSR),void *),XGBoostBatchCSR>>(uint64_t a1, _QWORD *a2, int a3, float a4)
{
  unint64_t *v8;
  uint64_t ***v9;
  uint64_t *v10;
  unint64_t v11;
  unsigned int v12;
  void **v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  unint64_t **v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  char *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  std::string *Entry;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t i;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  _DWORD *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  int v51;
  char *v52;
  _DWORD *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  int v61;
  unint64_t v62;
  void *Engine;
  char *v64;
  char *v65;
  uint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  _QWORD *v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  void *__p;
  void *__dst;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;

  *(_QWORD *)a1 = &off_24E6BC9C8;
  v8 = (unint64_t *)(a1 + 8);
  xgboost::MetaInfo::MetaInfo((xgboost::MetaInfo *)(a1 + 8));
  v9 = (uint64_t ***)(a1 + 216);
  _ZNSt3__115allocate_sharedB8ne180100IN7xgboost10SparsePageENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((_QWORD *)(a1 + 216));
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_DWORD *)(a1 + 296) = -1;
  *(_QWORD *)(a1 + 308) = 0;
  *(_QWORD *)(a1 + 300) = 0;
  *(_QWORD *)(a1 + 313) = 0;
  *(_QWORD *)(a1 + 328) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 340) = -1;
  *(_QWORD *)(a1 + 344) = 0;
  *(_BYTE *)(a1 + 352) = 0;
  *(_WORD *)(a1 + 364) = 0;
  *(_DWORD *)(a1 + 356) = a3;
  *(_DWORD *)(a1 + 360) = -1;
  __p = 0;
  __dst = 0;
  v82 = 0;
  v10 = *(uint64_t **)(a1 + 216);
  v77 = *v10;
  v76 = (_QWORD *)v10[1];
  (*(void (**)(_QWORD *))(*a2 + 16))(a2);
  v78 = v8;
  v11 = 0;
  v12 = 0;
  v79 = 0;
  v13 = (void **)(a1 + 56);
  v14 = (_QWORD *)(a1 + 72);
  v15 = -1;
  while (1)
  {
    v16 = (char *)(*(uint64_t (**)(_QWORD *))(*a2 + 24))(a2);
    if (!(_DWORD)v16)
      break;
    v17 = (unint64_t **)(*(uint64_t (**)(_QWORD *))(*a2 + 32))(a2);
    v18 = xgboost::SparsePage::Push<xgboost::data::FileAdapterBatch>(*v9, v17, 1, a4);
    if (v18 > v11)
      v11 = v18;
    v19 = *v17;
    v20 = **v17;
    v21 = (char *)(*v17)[2];
    if (v21)
    {
      *(_QWORD *)(a1 + 48) = 1;
      std::vector<float>::__insert_with_size[abi:ne180100]<float const*,float const*>(*(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), v21, &v21[4 * *v19], *v19);
      v22 = *(_QWORD **)(a1 + 32);
      v23 = *(_QWORD *)(a1 + 40) + **v17;
      *(_QWORD *)(a1 + 40) = v23;
      v24 = (uint64_t)(v22[1] - *v22) >> 2;
      v83 = *(_QWORD *)(a1 + 48) * v23;
      v84 = v24;
      if (v24 != v83)
      {
        dmlc::LogCheckFormat<unsigned long,unsigned long>(&v85);
        if (v85)
        {
          Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v84);
          dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/linalg.h");
          v26 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v84);
          v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Check failed: ", 14);
          v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"this->Data()->Size() == detail::CalcSize(this->shape_)", 54);
          v29 = *(char *)(v85 + 23);
          v30 = v29 >= 0 ? v85 : *(_QWORD *)v85;
          v31 = v29 >= 0 ? *(unsigned __int8 *)(v85 + 23) : *(_QWORD *)(v85 + 8);
          v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, v30, v31);
          v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)": ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Inconsistent size after modification.", 37);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v84);
          v34 = v85;
          v85 = 0;
          if (v34)
            std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v85, v34);
        }
      }
      v19 = *v17;
    }
    v35 = (char *)v19[3];
    if (v35)
    {
      std::vector<float>::__insert_with_size[abi:ne180100]<float const*,float const*>(*(_QWORD *)(a1 + 80), *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8), v35, &v35[4 * *v19], *v19);
      v19 = *v17;
    }
    v79 += v20;
    v36 = (char *)v19[4];
    if (v36)
    {
      std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&__p, (uint64_t)__dst, v36, &v36[8 * *v19], *v19);
      v37 = *v17;
      v38 = **v17;
      if (v38)
      {
        for (i = 0; i < v38; ++i)
        {
          v40 = *(_QWORD *)(v37[4] + 8 * i);
          if (v15 == -1 || v15 != v40)
          {
            v42 = *(char **)(a1 + 64);
            v41 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v42 >= v41)
            {
              v44 = (char *)*v13;
              v45 = (v42 - (_BYTE *)*v13) >> 2;
              v46 = v45 + 1;
              if ((unint64_t)(v45 + 1) >> 62)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v47 = v41 - (_QWORD)v44;
              if (v47 >> 1 > v46)
                v46 = v47 >> 1;
              if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL)
                v48 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v48 = v46;
              if (v48)
              {
                v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 72, v48);
                v44 = *(char **)(a1 + 56);
                v42 = *(char **)(a1 + 64);
              }
              else
              {
                v49 = 0;
              }
              v50 = &v49[4 * v45];
              *(_DWORD *)v50 = v12;
              v43 = v50 + 4;
              while (v42 != v44)
              {
                v51 = *((_DWORD *)v42 - 1);
                v42 -= 4;
                *((_DWORD *)v50 - 1) = v51;
                v50 -= 4;
              }
              *(_QWORD *)(a1 + 56) = v50;
              *(_QWORD *)(a1 + 64) = v43;
              *(_QWORD *)(a1 + 72) = &v49[4 * v48];
              if (v44)
                operator delete(v44);
            }
            else
            {
              *(_DWORD *)v42 = v12;
              v43 = v42 + 4;
            }
            *(_QWORD *)(a1 + 64) = v43;
            v37 = *v17;
            v38 = **v17;
          }
          ++v12;
          v15 = v40;
        }
        v15 = v40;
        v9 = (uint64_t ***)(a1 + 216);
      }
    }
  }
  if (v15 != -1)
  {
    v52 = *(char **)(a1 + 64);
    if (v12 > *((_DWORD *)v52 - 1))
    {
      if ((unint64_t)v52 >= *v14)
      {
        v16 = (char *)*v13;
        v54 = (v52 - (_BYTE *)*v13) >> 2;
        v55 = v54 + 1;
        if ((unint64_t)(v54 + 1) >> 62)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v56 = *v14 - (_QWORD)v16;
        if (v56 >> 1 > v55)
          v55 = v56 >> 1;
        if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL)
          v57 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v57 = v55;
        if (v57)
        {
          v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 72, v57);
          v16 = *(char **)(a1 + 56);
          v52 = *(char **)(a1 + 64);
        }
        else
        {
          v58 = 0;
        }
        v59 = &v58[4 * v54];
        v60 = &v58[4 * v57];
        *(_DWORD *)v59 = v12;
        v53 = v59 + 4;
        while (v52 != v16)
        {
          v61 = *((_DWORD *)v52 - 1);
          v52 -= 4;
          *((_DWORD *)v59 - 1) = v61;
          v59 -= 4;
        }
        *(_QWORD *)(a1 + 56) = v59;
        *(_QWORD *)(a1 + 64) = v53;
        *(_QWORD *)(a1 + 72) = v60;
        if (v16)
          operator delete(v16);
      }
      else
      {
        *(_DWORD *)v52 = v12;
        v53 = v52 + 4;
      }
      *(_QWORD *)(a1 + 64) = v53;
    }
  }
  v62 = a2[16];
  if (v62 == -1)
    v62 = v11;
  *(_QWORD *)(a1 + 16) = v62;
  Engine = rabit::engine::GetEngine((rabit::engine *)v16);
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t, unint64_t *(*)(unint64_t *, unint64_t *, int), _QWORD, _QWORD))(*(_QWORD *)Engine + 8))(Engine, a1 + 16, 8, 1, rabit::op::Reducer<rabit::op::Max,unsigned long long>, 0, 0);
  *v78 = v79;
  v64 = *(char **)v77;
  v65 = *(char **)(v77 + 8);
  v66 = (uint64_t)&v65[-*(_QWORD *)v77] >> 3;
  if (v66 - 1 < v79)
  {
    v67 = (_QWORD *)(v77 + 16);
    do
    {
      if ((unint64_t)v65 >= *v67)
      {
        v68 = v66 + 1;
        if ((unint64_t)(v66 + 1) >> 61)
          std::vector<void *>::__throw_length_error[abi:ne180100]();
        v69 = *v67 - (_QWORD)v64;
        if (v69 >> 2 > v68)
          v68 = v69 >> 2;
        if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8)
          v70 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v70 = v68;
        if (v70)
        {
          v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v77 + 16, v70);
          v64 = *(char **)v77;
          v72 = *(char **)(v77 + 8);
        }
        else
        {
          v71 = 0;
          v72 = v65;
        }
        v73 = &v71[8 * v66];
        *(_QWORD *)v73 = *((_QWORD *)v65 - 1);
        v65 = v73 + 8;
        while (v72 != v64)
        {
          v74 = *((_QWORD *)v72 - 1);
          v72 -= 8;
          *((_QWORD *)v73 - 1) = v74;
          v73 -= 8;
        }
        *(_QWORD *)v77 = v73;
        *(_QWORD *)(v77 + 8) = v65;
        *(_QWORD *)(v77 + 16) = &v71[8 * v70];
        if (v64)
        {
          operator delete(v64);
          v64 = *(char **)v77;
        }
        else
        {
          v64 = v73;
        }
      }
      else
      {
        *(_QWORD *)v65 = *((_QWORD *)v65 - 1);
        v65 += 8;
      }
      *(_QWORD *)(v77 + 8) = v65;
      v66 = (v65 - v64) >> 3;
    }
    while (v66 - 1 < v79);
  }
  *(_QWORD *)(a1 + 24) = (uint64_t)(v76[1] - *v76) >> 3;
  if (!xgboost::SparsePage::IsIndicesSorted(*(uint64_t ***)(a1 + 216), 1))
    xgboost::SparsePage::SortIndices(*(uint64_t ***)(a1 + 216), 1);
  if (__p)
  {
    __dst = __p;
    operator delete(__p);
  }
  return a1;
}

{
  return __ZN7xgboost4data13SimpleDMatrixC2INS0_15IteratorAdapterIPvFiS4_PFiS4_15XGBoostBatchCSRES4_ES5_EEEEPT_fi(a1, a2, a3, a4);
}

void sub_220F1C29C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22)
{
  xgboost::DMatrix *v22;
  xgboost::MetaInfo *v23;

  xgboost::MetaInfo::~MetaInfo(v23);
  xgboost::DMatrix::~DMatrix(v22);
  _Unwind_Resume(a1);
}

uint64_t xgboost::data::SimpleDMatrix::Info(xgboost::data::SimpleDMatrix *this)
{
  return (uint64_t)this + 8;
}

{
  return (uint64_t)this + 8;
}

uint64_t xgboost::data::SimpleDMatrix::Slice(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void **v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  const void ***v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  void *v44;
  void *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t (***v57)(_QWORD);
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63[2];
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;

  v3 = operator new();
  *(_QWORD *)v3 = &off_24E6BC9C8;
  v57 = (uint64_t (***)(_QWORD))v3;
  xgboost::MetaInfo::MetaInfo((xgboost::MetaInfo *)(v3 + 8));
  _ZNSt3__115allocate_sharedB8ne180100IN7xgboost10SparsePageENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((_QWORD *)(v3 + 216));
  *(_OWORD *)(v3 + 232) = 0u;
  *(_DWORD *)(v3 + 296) = -1;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_OWORD *)(v3 + 280) = 0u;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_QWORD *)(v3 + 308) = 0;
  *(_QWORD *)(v3 + 300) = 0;
  *(_QWORD *)(v3 + 313) = 0;
  *(_QWORD *)(v3 + 328) = 0x7FF8000000000000;
  *(_BYTE *)(v3 + 336) = 0;
  *(_DWORD *)(v3 + 340) = -1;
  *(_QWORD *)(v3 + 344) = 0;
  *(_BYTE *)(v3 + 352) = 0;
  *(_QWORD *)(v3 + 356) = 0xFFFFFFFF00000000;
  *(_WORD *)(v3 + 364) = 0;
  v59 = *(uint64_t **)(v3 + 216);
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v87);
  v85 = v87;
  v86 = v88;
  if (v88)
  {
    p_shared_owners = (unint64_t *)&v88->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  xgboost::BatchIterator<xgboost::SparsePage>::BatchIterator(&v83, 0);
  while ((xgboost::BatchIterator<xgboost::SparsePage>::operator!=(&v85) & 1) != 0)
  {
    v6 = (uint64_t **)xgboost::BatchIterator<xgboost::SparsePage>::operator*(&v85);
    v7 = *v59;
    v61 = *a2;
    if (*a2)
    {
      v8 = 0;
      v9 = 0;
      v62 = *v6[1];
      v10 = (void **)v59[1];
      v60 = **v6;
      v11 = *a2;
      while (1)
      {
        if (v9 >= v11)
          goto LABEL_55;
        v12 = *(_QWORD *)(v60 + 8 * *(int *)(a2[1] + 4 * v9));
        v13 = *(_QWORD *)(v60 + 8 * *(int *)(a2[1] + 4 * v9) + 8);
        if (!v62 && v13 != v12)
          goto LABEL_55;
        v14 = v13 - v12;
        if (v13 != v12)
          break;
LABEL_32:
        v8 += v14;
        v30 = *(_QWORD **)(v7 + 8);
        v29 = *(_QWORD *)(v7 + 16);
        if ((unint64_t)v30 >= v29)
        {
          v32 = *(_QWORD **)v7;
          v33 = ((uint64_t)v30 - *(_QWORD *)v7) >> 3;
          v34 = v33 + 1;
          if ((unint64_t)(v33 + 1) >> 61)
            std::vector<void *>::__throw_length_error[abi:ne180100]();
          v35 = v29 - (_QWORD)v32;
          if (v35 >> 2 > v34)
            v34 = v35 >> 2;
          if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
            v36 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v36 = v34;
          if (v36)
          {
            v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v7 + 16, v36);
            v32 = *(_QWORD **)v7;
            v30 = *(_QWORD **)(v7 + 8);
          }
          else
          {
            v37 = 0;
          }
          v38 = &v37[8 * v33];
          *(_QWORD *)v38 = v8;
          v31 = v38 + 8;
          while (v30 != v32)
          {
            v39 = *--v30;
            *((_QWORD *)v38 - 1) = v39;
            v38 -= 8;
          }
          *(_QWORD *)v7 = v38;
          *(_QWORD *)(v7 + 8) = v31;
          *(_QWORD *)(v7 + 16) = &v37[8 * v36];
          if (v32)
            operator delete(v32);
        }
        else
        {
          *v30 = v8;
          v31 = v30 + 1;
        }
        *(_QWORD *)(v7 + 8) = v31;
        v11 = *a2;
        if (v9 == *a2)
          goto LABEL_55;
        if (++v9 == v61)
          goto LABEL_50;
      }
      v15 = 0;
      v16 = v62 + 8 * v12;
      while (v15 < v14)
      {
        v18 = v10[1];
        v17 = (unint64_t)v10[2];
        if ((unint64_t)v18 >= v17)
        {
          v20 = ((char *)v18 - (_BYTE *)*v10) >> 3;
          if ((unint64_t)(v20 + 1) >> 61)
            std::vector<xgboost::Json>::__throw_length_error[abi:ne180100]();
          v21 = v17 - (_QWORD)*v10;
          v22 = v21 >> 2;
          if (v21 >> 2 <= (unint64_t)(v20 + 1))
            v22 = v20 + 1;
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
            v23 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v23 = v22;
          if (v23)
            v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(v10 + 2), v23);
          else
            v24 = 0;
          v25 = &v24[8 * v20];
          *(_QWORD *)v25 = *(_QWORD *)(v16 + 8 * v15);
          v19 = v25 + 8;
          v27 = (char *)*v10;
          v26 = (char *)v10[1];
          if (v26 != *v10)
          {
            do
            {
              v28 = *((_QWORD *)v26 - 1);
              v26 -= 8;
              *((_QWORD *)v25 - 1) = v28;
              v25 -= 8;
            }
            while (v26 != v27);
            v26 = (char *)*v10;
          }
          *v10 = v25;
          v10[1] = v19;
          v10[2] = &v24[8 * v23];
          if (v26)
            operator delete(v26);
        }
        else
        {
          *v18 = *(_QWORD *)(v16 + 8 * v15);
          v19 = v18 + 1;
        }
        v10[1] = v19;
        if (v15 == v14)
          break;
        if (++v15 == v14)
          goto LABEL_32;
      }
LABEL_55:
      std::terminate();
    }
LABEL_50:
    v40 = (const void ***)(**(uint64_t (***)(uint64_t))a1)(a1);
    v41 = a2[1];
    v63[0] = *a2;
    v63[1] = v41;
    xgboost::MetaInfo::Slice(v40, v63, (uint64_t)&v64);
    v3 = (uint64_t)v57;
    v42 = (**v57)(v57);
    v43 = v64;
    *(_QWORD *)(v42 + 16) = v65;
    *(_OWORD *)v42 = v43;
    xgboost::HostDeviceVector<float>::operator=((uint64_t *)(v42 + 24), &v66);
    v44 = *(void **)(v42 + 48);
    *(_OWORD *)(v42 + 32) = v67;
    if (v44)
    {
      *(_QWORD *)(v42 + 56) = v44;
      operator delete(v44);
      *(_QWORD *)(v42 + 48) = 0;
      *(_QWORD *)(v42 + 56) = 0;
      *(_QWORD *)(v42 + 64) = 0;
    }
    *(_OWORD *)(v42 + 48) = v68;
    *(_QWORD *)(v42 + 64) = v69;
    v68 = 0uLL;
    v69 = 0;
    xgboost::HostDeviceVector<float>::operator=((uint64_t *)(v42 + 72), &v70);
    xgboost::HostDeviceVector<float>::operator=((uint64_t *)(v42 + 80), &v71);
    *(_OWORD *)(v42 + 88) = v72;
    xgboost::HostDeviceVector<float>::operator=((uint64_t *)(v42 + 104), &v73);
    xgboost::HostDeviceVector<float>::operator=((uint64_t *)(v42 + 112), &v74);
    std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v42 + 120));
    *(_OWORD *)(v42 + 120) = v75;
    *(_QWORD *)(v42 + 136) = v76;
    v75 = 0uLL;
    v76 = 0;
    std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v42 + 144));
    *(_OWORD *)(v42 + 144) = v77;
    *(_QWORD *)(v42 + 160) = v78;
    v77 = 0uLL;
    v78 = 0;
    xgboost::HostDeviceVector<xgboost::FeatureType>::operator=((uint64_t *)(v42 + 168), &v79);
    xgboost::HostDeviceVector<float>::operator=((uint64_t *)(v42 + 176), &v80);
    v45 = *(void **)(v42 + 184);
    if (v45)
    {
      *(_QWORD *)(v42 + 192) = v45;
      operator delete(v45);
      *(_QWORD *)(v42 + 184) = 0;
      *(_QWORD *)(v42 + 192) = 0;
      *(_QWORD *)(v42 + 200) = 0;
    }
    *(_OWORD *)(v42 + 184) = v81;
    *(_QWORD *)(v42 + 200) = v82;
    v81 = 0uLL;
    v82 = 0;
    xgboost::MetaInfo::~MetaInfo((xgboost::MetaInfo *)&v64);
    v46 = *(_QWORD *)(*(_QWORD *)(v7 + 8) - 8);
    *(_QWORD *)((**v57)(v57) + 16) = v46;
    xgboost::BatchIterator<xgboost::SparsePage>::operator++(&v85);
  }
  v47 = v84;
  if (v84)
  {
    v48 = (unint64_t *)&v84->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = v86;
  if (v86)
  {
    v51 = (unint64_t *)&v86->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = v88;
  if (v88)
  {
    v54 = (unint64_t *)&v88->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  return v3;
}

void sub_220F1C990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,xgboost::DMatrix *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;

  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v32 - 120);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v32 - 104);
  _Unwind_Resume(a1);
}

void xgboost::data::SimpleDMatrix::GetRowBatches(xgboost::data::SimpleDMatrix *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v4 = (_QWORD *)operator new();
  v6 = *((_QWORD *)this + 27);
  v5 = *((_QWORD *)this + 28);
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *v4 = &off_24E6BD110;
  v4[1] = v6;
  v4[2] = v5;
  xgboost::BatchIterator<xgboost::SparsePage>::BatchIterator(&v16, (uint64_t)v4);
  v9 = v16;
  v10 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    v13 = v17;
    *a2 = v9;
    a2[1] = v10;
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  else
  {
    *a2 = v16;
    a2[1] = 0;
  }
}

void sub_220F1CAFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void xgboost::data::SimpleDMatrix::GetColumnBatches(xgboost::data::SimpleDMatrix *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  char **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  char **v25;
  uint64_t v26[2];

  v4 = (_QWORD *)((char *)this + 232);
  if (!*((_QWORD *)this + 29))
  {
    v5 = (_QWORD *)operator new();
    xgboost::SparsePage::GetTranspose(*((uint64_t ***)this + 27), *((_DWORD *)this + 4), 1, &v25);
    v6 = operator new();
    v7 = v25;
    *(_OWORD *)v6 = *(_OWORD *)v25;
    *(_QWORD *)(v6 + 16) = v7[2];
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *v5 = v6;
    v8 = operator new();
    v9 = (_QWORD *)v26[0];
    *(_OWORD *)v8 = *(_OWORD *)v26[0];
    *(_QWORD *)(v8 + 16) = v9[2];
    *v9 = 0;
    v9[1] = 0;
    v9[2] = 0;
    v10 = v26[1];
    v5[1] = v8;
    v5[2] = v10;
    std::shared_ptr<xgboost::CSCPage>::reset[abi:ne180100]<xgboost::CSCPage,void>(v4, (uint64_t)v5);
    xgboost::HostDeviceVector<xgboost::Entry>::~HostDeviceVector(v26);
    xgboost::HostDeviceVector<unsigned long>::~HostDeviceVector((uint64_t *)&v25);
  }
  v11 = (_QWORD *)operator new();
  v13 = *((_QWORD *)this + 29);
  v12 = *((_QWORD *)this + 30);
  if (v12)
  {
    v14 = (unint64_t *)(v12 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *v11 = &off_24E6BD168;
  v11[1] = v13;
  v11[2] = v12;
  xgboost::BatchIterator<xgboost::CSCPage>::BatchIterator(&v23, (uint64_t)v11);
  v16 = v23;
  v17 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
    v20 = v24;
    *a2 = v16;
    a2[1] = v17;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  else
  {
    *a2 = v23;
    a2[1] = 0;
  }
}

void sub_220F1CCD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t *v6;
  uint64_t v8;
  va_list va;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v8 = va_arg(va1, _QWORD);
  xgboost::HostDeviceVector<unsigned long>::~HostDeviceVector(v6);
  xgboost::HostDeviceVector<xgboost::Entry>::~HostDeviceVector((uint64_t *)va1);
  xgboost::HostDeviceVector<unsigned long>::~HostDeviceVector((uint64_t *)va);
  MEMORY[0x227667068](v6, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

void xgboost::data::SimpleDMatrix::GetSortedColumnBatches(xgboost::data::SimpleDMatrix *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t ***v4;
  _QWORD *v5;
  uint64_t v6;
  char **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  char **v25;
  uint64_t v26[2];

  v4 = (uint64_t ***)((char *)this + 248);
  if (!*((_QWORD *)this + 31))
  {
    v5 = (_QWORD *)operator new();
    xgboost::SparsePage::GetTranspose(*((uint64_t ***)this + 27), *((_DWORD *)this + 4), 1, &v25);
    v6 = operator new();
    v7 = v25;
    *(_OWORD *)v6 = *(_OWORD *)v25;
    *(_QWORD *)(v6 + 16) = v7[2];
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *v5 = v6;
    v8 = operator new();
    v9 = (_QWORD *)v26[0];
    *(_OWORD *)v8 = *(_OWORD *)v26[0];
    *(_QWORD *)(v8 + 16) = v9[2];
    *v9 = 0;
    v9[1] = 0;
    v9[2] = 0;
    v10 = v26[1];
    v5[1] = v8;
    v5[2] = v10;
    std::shared_ptr<xgboost::SortedCSCPage>::reset[abi:ne180100]<xgboost::SortedCSCPage,void>(v4, (uint64_t)v5);
    xgboost::HostDeviceVector<xgboost::Entry>::~HostDeviceVector(v26);
    xgboost::HostDeviceVector<unsigned long>::~HostDeviceVector((uint64_t *)&v25);
    xgboost::SparsePage::SortRows(*v4, 1);
  }
  v11 = (_QWORD *)operator new();
  v13 = *((_QWORD *)this + 31);
  v12 = *((_QWORD *)this + 32);
  if (v12)
  {
    v14 = (unint64_t *)(v12 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *v11 = &off_24E6BD1C0;
  v11[1] = v13;
  v11[2] = v12;
  xgboost::BatchIterator<xgboost::SortedCSCPage>::BatchIterator(&v23, (uint64_t)v11);
  v16 = v23;
  v17 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
    v20 = v24;
    *a2 = v16;
    a2[1] = v17;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  else
  {
    *a2 = v23;
    a2[1] = 0;
  }
}

void sub_220F1CF0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t *v6;
  uint64_t v8;
  va_list va;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v8 = va_arg(va1, _QWORD);
  xgboost::HostDeviceVector<unsigned long>::~HostDeviceVector(v6);
  xgboost::HostDeviceVector<xgboost::Entry>::~HostDeviceVector((uint64_t *)va1);
  xgboost::HostDeviceVector<unsigned long>::~HostDeviceVector((uint64_t *)va);
  MEMORY[0x227667068](v6, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

void xgboost::data::SimpleDMatrix::GetEllpackBatches(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int v6;
  int v7;
  int v10;
  std::string *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::string *Entry;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  int v49;
  int v50;

  if (*(_QWORD *)(a1 + 264))
  {
    v6 = *(_DWORD *)a2;
    v7 = *(_DWORD *)(a2 + 4);
    if (*(_QWORD *)(a2 + 8))
    {
      if (v6 == -1 && v7 == 0 && *(_QWORD *)(a2 + 16) == 0)
        goto LABEL_38;
    }
    else if (v6 == -1 && v7 == 0)
    {
      goto LABEL_38;
    }
    if (!*(_BYTE *)(a2 + 24)
      && *(_DWORD *)(a1 + 296) == v6
      && *(_DWORD *)(a1 + 300) == v7
      && *(double *)(a1 + 328) == *(double *)(a2 + 32))
    {
      goto LABEL_38;
    }
  }
  else
  {
    v6 = *(_DWORD *)a2;
  }
  v49 = 0;
  v50 = v6;
  if (v6 < 0)
  {
    dmlc::LogCheckFormat<int,int>(&v47);
    if (v47)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v50);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/simple_dmatrix.cc");
      v39 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v50);
      v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Check failed: ", 14);
      v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"param.gpu_id >= 0", 17);
      v42 = *(char *)(v47 + 23);
      v43 = v42 >= 0 ? v47 : *(_QWORD *)v47;
      v44 = v42 >= 0 ? *(unsigned __int8 *)(v47 + 23) : *(_QWORD *)(v47 + 8);
      v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, v43, v44);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v50);
      v46 = v47;
      v47 = 0;
      if (v46)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v47, v46);
    }
  }
  v10 = *(_DWORD *)(a2 + 4);
  v49 = 2;
  v50 = v10;
  if (v10 < 2)
  {
    dmlc::LogCheckFormat<int,int>(&v47);
    if (v47)
    {
      v11 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v50);
      dmlc::LogMessageFatal::Entry::Init(v11, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/simple_dmatrix.cc");
      v12 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v50);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Check failed: ", 14);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"param.max_bin >= 2", 18);
      v15 = *(char *)(v47 + 23);
      v16 = v15 >= 0 ? v47 : *(_QWORD *)v47;
      v17 = v15 >= 0 ? *(unsigned __int8 *)(v47 + 23) : *(_QWORD *)(v47 + 8);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v50);
      v19 = v47;
      v47 = 0;
      if (v19)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v47, v19);
    }
  }
  v20 = (_QWORD *)operator new();
  xgboost::EllpackPage::EllpackPage(v20);
  v21 = (_QWORD *)operator new();
  *v21 = &off_24E6BD218;
  v21[1] = 0;
  v21[2] = 0;
  v21[3] = v20;
  v22 = *(std::__shared_weak_count **)(a1 + 272);
  *(_QWORD *)(a1 + 264) = v20;
  *(_QWORD *)(a1 + 272) = v21;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  *(_QWORD *)(a1 + 296) = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 24);
LABEL_38:
  v26 = (_QWORD *)operator new();
  v28 = *(_QWORD *)(a1 + 264);
  v27 = *(_QWORD *)(a1 + 272);
  if (v27)
  {
    v29 = (unint64_t *)(v27 + 8);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  *v26 = &unk_24E6B9780;
  v26[1] = v28;
  v26[2] = v27;
  xgboost::BatchIterator<xgboost::EllpackPage>::BatchIterator(&v47, (uint64_t)v26);
  v31 = v47;
  v32 = v48;
  if (v48)
  {
    v33 = (unint64_t *)&v48->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
    v35 = v48;
    *a3 = v31;
    a3[1] = (uint64_t)v32;
    if (v35)
    {
      v36 = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
  }
  else
  {
    *a3 = v47;
    a3[1] = 0;
  }
}

void sub_220F1D308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, char a15)
{
  uint64_t v16;

  v16 = a12;
  a12 = 0;
  if (v16)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v16);
  _Unwind_Resume(exception_object);
}

void xgboost::data::`anonymous namespace'::CheckEmpty(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  _BOOL4 v5;
  std::string *Entry;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  char v10;

  v3 = *(_DWORD *)a1 != -1 || *(_DWORD *)(a1 + 4) != 0;
  if (*(_QWORD *)(a1 + 8) && *(_QWORD *)(a1 + 16))
    v3 = 1;
  if (!v3)
  {
    v5 = *(_DWORD *)a2 == -1 && *(_DWORD *)(a2 + 4) == 0;
    if (*(_QWORD *)(a2 + 8))
    {
      if (*(_QWORD *)(a2 + 16))
        v5 = 0;
      if (v5)
        goto LABEL_24;
    }
    else if (v5)
    {
LABEL_24:
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/simple_dmatrix.cc");
      v7 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: r != BatchParam{}", 31);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Batch parameter is not initialized.", 35);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v10);
    }
  }
}

void sub_220F1D468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void xgboost::data::SimpleDMatrix::GetGradientIndex(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  __n128 v6;
  int v7;
  int v8;
  std::string *Entry;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  std::string *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  double v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  void *v38;
  std::string *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  int v43;
  void *v44;
  uint64_t v45;
  _QWORD *v46;
  void *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  _QWORD v60[2];
  void *__p[2];
  char v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  char v66;
  uint64_t v67;
  int v68;

  if (*(_QWORD *)(a1 + 280))
  {
    v6.n128_u64[0] = *(_QWORD *)(a1 + 328);
    v8 = *(_DWORD *)a2;
    v7 = *(_DWORD *)(a2 + 4);
    if (*(_QWORD *)(a2 + 8))
    {
      if (v8 == -1 && v7 == 0 && *(_QWORD *)(a2 + 16) == 0)
        goto LABEL_54;
    }
    else if (v8 == -1 && v7 == 0)
    {
      goto LABEL_54;
    }
    if (!*(_BYTE *)(a2 + 24)
      && *(_DWORD *)(a1 + 296) == v8
      && *(_DWORD *)(a1 + 300) == v7
      && v6.n128_f64[0] == *(double *)(a2 + 32))
    {
      goto LABEL_54;
    }
  }
  if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst(v6) + 4) >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/simple_dmatrix.cc");
    xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)&v63, (uint64_t)__p, 102, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)"Generating new Gradient Index.", 30);
    xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)&v63);
    if (v62 < 0)
      operator delete(__p[0]);
  }
  LODWORD(__p[0]) = *(_DWORD *)(a2 + 4);
  v68 = 2;
  if (SLODWORD(__p[0]) < 2)
  {
    dmlc::LogCheckFormat<int,int>(&v63);
    if (v63)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/simple_dmatrix.cc");
      v13 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Check failed: ", 14);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"param.max_bin >= 2", 18);
      v16 = *(char *)(v63 + 23);
      v17 = v16 >= 0 ? v63 : *(_QWORD *)v63;
      v18 = v16 >= 0 ? *(unsigned __int8 *)(v63 + 23) : *(_QWORD *)(v63 + 8);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
      v20 = v63;
      v63 = 0;
      if (v20)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v63, v20);
    }
  }
  LODWORD(__p[0]) = *(_DWORD *)a2;
  v68 = -1;
  if (LODWORD(__p[0]) != -1)
  {
    dmlc::LogCheckFormat<int,int>(&v63);
    if (v63)
    {
      v21 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
      dmlc::LogMessageFatal::Entry::Init(v21, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/simple_dmatrix.cc");
      v22 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed: ", 14);
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"param.gpu_id == -1", 18);
      v25 = *(char *)(v63 + 23);
      v26 = v25 >= 0 ? v63 : *(_QWORD *)v63;
      v27 = v25 >= 0 ? *(unsigned __int8 *)(v63 + 23) : *(_QWORD *)(v63 + 8);
      v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, v26, v27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
      v29 = v63;
      v63 = 0;
      if (v29)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v63, v29);
    }
  }
  v30 = *(unsigned __int8 *)(a2 + 24);
  v31 = operator new();
  v32 = *(double *)(a2 + 32);
  v33 = *(_DWORD *)(a2 + 4);
  v34 = *(_QWORD *)(a2 + 16);
  v60[0] = *(_QWORD *)(a2 + 8);
  v60[1] = v34;
  xgboost::GHistIndexMatrix::GHistIndexMatrix(v31, a1, v33, v30, 1, v60, v32);
  std::shared_ptr<xgboost::GHistIndexMatrix>::reset[abi:ne180100]<xgboost::GHistIndexMatrix,void>((_QWORD *)(a1 + 280), v31);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 8);
  v35 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 312) = v35;
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 24);
  if (v35 != *(_QWORD *)(a2 + 16))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)" (", 2);
    v36 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" vs. ", 5);
    v37 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)") ", 2);
    v38 = (void *)operator new();
    std::stringbuf::str();
    __p[0] = v38;
    v63 = *MEMORY[0x24BEDB800];
    *(uint64_t *)((char *)&v63 + *(_QWORD *)(v63 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v64 = MEMORY[0x24BEDB848] + 16;
    if (v66 < 0)
      operator delete(v65);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x227666FE4](&v67);
    v39 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v63);
    dmlc::LogMessageFatal::Entry::Init(v39, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/simple_dmatrix.cc");
    v40 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v63);
    v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Check failed: ", 14);
    v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"batch_param_.hess.data() == param.hess.data()", 45);
    v43 = *((char *)__p[0] + 23);
    if (v43 >= 0)
      v44 = __p[0];
    else
      v44 = *(void **)__p[0];
    if (v43 >= 0)
      v45 = *((unsigned __int8 *)__p[0] + 23);
    else
      v45 = *((_QWORD *)__p[0] + 1);
    v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v44, v45);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v63);
    v47 = __p[0];
    __p[0] = 0;
    if (v47)
      std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)__p, (uint64_t)v47);
  }
LABEL_54:
  v48 = (_QWORD *)operator new();
  v50 = *(_QWORD *)(a1 + 280);
  v49 = *(_QWORD *)(a1 + 288);
  if (v49)
  {
    v51 = (unint64_t *)(v49 + 8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  *v48 = &off_24E6BD308;
  v48[1] = v50;
  v48[2] = v49;
  xgboost::BatchIterator<xgboost::GHistIndexMatrix>::BatchIterator(&v63, (uint64_t)v48);
  v53 = v63;
  v54 = v64;
  if (v64)
  {
    v55 = (unint64_t *)(v64 + 8);
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
    v57 = (std::__shared_weak_count *)v64;
    *a3 = v53;
    a3[1] = v54;
    if (v57)
    {
      p_shared_owners = (unint64_t *)&v57->__shared_owners_;
      do
        v59 = __ldaxr(p_shared_owners);
      while (__stlxr(v59 - 1, p_shared_owners));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
  }
  else
  {
    *a3 = v63;
    a3[1] = 0;
  }
}

void sub_220F1D9D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)&a19);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::shared_ptr<xgboost::GHistIndexMatrix>::reset[abi:ne180100]<xgboost::GHistIndexMatrix,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<xgboost::GHistIndexMatrix>::shared_ptr[abi:ne180100]<xgboost::GHistIndexMatrix,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

xgboost::data::SimpleDMatrix *xgboost::data::SimpleDMatrix::SimpleDMatrix(xgboost::data::SimpleDMatrix *this, dmlc::Stream *a2)
{
  xgboost::MetaInfo *v4;
  _QWORD ***v5;
  std::string *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  std::string *Entry;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _DWORD v25[2];
  int v26;
  unint64_t v27;

  *(_QWORD *)this = &off_24E6BC9C8;
  v4 = (xgboost::data::SimpleDMatrix *)((char *)this + 8);
  xgboost::MetaInfo::MetaInfo((xgboost::data::SimpleDMatrix *)((char *)this + 8));
  v5 = (_QWORD ***)((char *)this + 216);
  _ZNSt3__115allocate_sharedB8ne180100IN7xgboost10SparsePageENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((_QWORD *)this + 27);
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *((_DWORD *)this + 74) = -1;
  *(_QWORD *)((char *)this + 308) = 0;
  *(_QWORD *)((char *)this + 300) = 0;
  *(_QWORD *)((char *)this + 313) = 0;
  *((_QWORD *)this + 41) = 0x7FF8000000000000;
  *((_BYTE *)this + 336) = 0;
  *((_DWORD *)this + 85) = -1;
  *((_QWORD *)this + 43) = 0;
  *((_BYTE *)this + 352) = 0;
  *(_QWORD *)((char *)this + 356) = 0xFFFFFFFF00000000;
  *((_WORD *)this + 182) = 0;
  v25[0] = 0;
  if ((**(uint64_t (***)(dmlc::Stream *, _DWORD *, uint64_t))a2)(a2, v25, 4) != 4)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v27);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/simple_dmatrix.cc");
    v22 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v27);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed: in_stream->Read(&tmagic)", 38);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"invalid input file format", 25);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v27);
  }
  v25[1] = -21759;
  v26 = v25[0];
  if (v25[0] != -21759)
  {
    dmlc::LogCheckFormat<int,int>((uint64_t *)&v27);
    if (v27)
    {
      v6 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v26);
      dmlc::LogMessageFatal::Entry::Init(v6, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/simple_dmatrix.cc");
      v7 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v26);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: ", 14);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"tmagic == kMagic", 16);
      v10 = *(char *)(v27 + 23);
      v11 = v10 >= 0 ? v27 : *(_QWORD *)v27;
      v12 = v10 >= 0 ? *(unsigned __int8 *)(v27 + 23) : *(_QWORD *)(v27 + 8);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"invalid format, magic number mismatch", 37);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v26);
      v15 = v27;
      v27 = 0;
      if (v15)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v27, v15);
    }
  }
  xgboost::MetaInfo::LoadBinary(v4, a2);
  v16 = **v5;
  v27 = 0;
  if ((**(uint64_t (***)(dmlc::Stream *, unint64_t *, uint64_t))a2)(a2, &v27, 8) == 8)
  {
    v17 = v27;
    std::vector<unsigned long>::resize((uint64_t)v16, v27);
    if (v27)
      (**(void (***)(dmlc::Stream *, _QWORD, uint64_t))a2)(a2, *v16, 8 * v17);
  }
  v18 = (*v5)[1];
  v27 = 0;
  if ((**(uint64_t (***)(dmlc::Stream *, unint64_t *, uint64_t))a2)(a2, &v27, 8) == 8)
  {
    v19 = v27;
    std::vector<xgboost::Entry>::resize((uint64_t)v18, v27);
    if (v27)
      (**(void (***)(dmlc::Stream *, _QWORD, uint64_t))a2)(a2, *v18, 8 * v19);
  }
  return this;
}

void sub_220F1DE04(_Unwind_Exception *a1)
{
  xgboost::DMatrix *v1;
  xgboost::MetaInfo *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v4 + 48);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v4 + 32);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v5);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v4);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v3);
  xgboost::MetaInfo::~MetaInfo(v2);
  xgboost::DMatrix::~DMatrix(v1);
  _Unwind_Resume(a1);
}

uint64_t xgboost::data::SimpleDMatrix::SaveToLocalFile(uint64_t a1, char *a2)
{
  dmlc::Stream *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  int v8;
  uint64_t v9;

  if (a2[23] >= 0)
    v3 = (dmlc::Stream *)a2;
  else
    v3 = *(dmlc::Stream **)a2;
  v4 = dmlc::Stream::Create(v3, "w", 0);
  v8 = -21759;
  (*(void (**)(uint64_t, int *, uint64_t))(*(_QWORD *)v4 + 8))(v4, &v8, 4);
  xgboost::MetaInfo::SaveBinary(a1 + 8, v4);
  v5 = **(_QWORD ***)(a1 + 216);
  v9 = (uint64_t)(v5[1] - *v5) >> 3;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v4 + 8))(v4, &v9, 8);
  if (v9)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 8))(v4, *v5, v5[1] - *v5);
  v6 = *(_QWORD **)(*(_QWORD *)(a1 + 216) + 8);
  v9 = (uint64_t)(v6[1] - *v6) >> 3;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v4 + 8))(v4, &v9, 8);
  if (v9)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 8))(v4, *v6, v6[1] - *v6);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
}

void sub_220F1DFD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

_QWORD *xgboost::data::SimpleDMatrix::SimpleDMatrix<xgboost::data::RecordBatchesIterAdapter>(_QWORD *a1, _QWORD *a2, float a3)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  rabit::engine *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t (**v30)();
  _QWORD *v31;
  uint64_t v32;
  uint64x2_t v33;
  int8x16_t v34;
  int64x2_t v35;
  int32x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  int32x2_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  int v88;
  _DWORD *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *Engine;
  uint64_t v97;
  std::string *Entry;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  int v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  _QWORD *i;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t *v115;
  unint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  char *v119;
  int64x2_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  _QWORD *v124;
  _QWORD *v125;

  v5 = a1;
  *a1 = &off_24E6BC9C8;
  xgboost::MetaInfo::MetaInfo((xgboost::MetaInfo *)(a1 + 1));
  _ZNSt3__115allocate_sharedB8ne180100IN7xgboost10SparsePageENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v5 + 27);
  *(_OWORD *)(v5 + 29) = 0u;
  *(_OWORD *)(v5 + 31) = 0u;
  *(_OWORD *)(v5 + 33) = 0u;
  *(_OWORD *)(v5 + 35) = 0u;
  *((_DWORD *)v5 + 74) = -1;
  *(_QWORD *)((char *)v5 + 313) = 0;
  *(_QWORD *)((char *)v5 + 308) = 0;
  *(_QWORD *)((char *)v5 + 300) = 0;
  v5[41] = 0x7FF8000000000000;
  *((_BYTE *)v5 + 336) = 0;
  *((_DWORD *)v5 + 85) = -1;
  v5[43] = 0;
  *((_BYTE *)v5 + 352) = 0;
  *(_QWORD *)((char *)v5 + 356) = 0xFFFFFFFF00000000;
  *((_WORD *)v5 + 182) = 0;
  v6 = v5[27];
  v7 = *(_QWORD **)(v6 + 8);
  v110 = *(_QWORD **)v6;
  (*(void (**)(_QWORD *))(*a2 + 16))(a2);
  v109 = 0;
  v111 = 0;
  v120 = vdupq_n_s64(2uLL);
  v117 = v5;
  for (i = a2; ; a2 = i)
  {
    v8 = (rabit::engine *)(*(uint64_t (**)(_QWORD *))(*a2 + 24))(a2);
    if (!(_DWORD)v8)
      break;
    v9 = (uint64_t *)(*(uint64_t (**)(_QWORD *))(*a2 + 32))(a2);
    v10 = *v9;
    v11 = v9[1] - *v9;
    if ((int)((unint64_t)v11 >> 3) >= 1)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      while (1)
      {
        v112 = v13;
        v113 = v14;
        v15 = *(_QWORD *)(v10 + 8 * v12);
        v16 = *(uint64_t **)(v15 + 16);
        v17 = *v16;
        v18 = v16[1];
        v114 = v12;
        v115 = v16;
        if (v18 != *v16)
          break;
        v43 = *(char **)(v15 + 32);
LABEL_54:
        v54 = **(_QWORD **)(v15 + 8);
        v119 = *(char **)(v15 + 24);
        v55 = (_QWORD *)(v15 + 48);
        v124 = 0;
        std::vector<unsigned long>::resize(v15 + 48, v54 + 1, &v124);
        if (v54 >= 1)
        {
          v56 = 0;
          v57 = (v43 - v119) >> 4;
          if (v57 <= 1)
            v57 = 1;
          v116 = v57;
          do
          {
            v58 = v56;
            v59 = *(_QWORD *)(*v55 + 8 * v56++);
            *(_QWORD *)(*v55 + 8 * v56) = v59;
            if (v43 != v119)
            {
              v60 = 0;
              v61 = v116;
              do
              {
                if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v15 + 24) + v60) + 24))(*(_QWORD *)(*(_QWORD *)(v15 + 24) + v60), v58))
                {
                  ++*(_QWORD *)(*v55 + 8 * v56);
                }
                v60 += 16;
                --v61;
              }
              while (v61);
            }
          }
          while (v56 != v54);
        }
        v10 = *v9;
        v62 = *(_QWORD **)(*(_QWORD *)(*v9 + 8 * v114) + 8);
        if (v62)
          v62 = (_QWORD *)*v62;
        v5 = v117;
        v13 = *(_QWORD *)(*(_QWORD *)(v15 + 56) - 8) + v112;
        v14 = &v113[(_QWORD)v62];
        v12 = v114 + 1;
        v11 = v9[1] - v10;
        if (v114 + 1 >= (int)((unint64_t)v11 >> 3))
          goto LABEL_69;
      }
      v19 = 0;
      while (2)
      {
        v20 = v17 + 16 * v19;
        v21 = *(_QWORD *)(v20 + 8);
        if (v21 < 0)
        {
LABEL_11:
          v28 = v18;
          v27 = 0;
          v31 = 0;
          v124 = 0;
          v125 = 0;
        }
        else
        {
          v22 = *(uint64_t **)(v15 + 8);
          v24 = *v22;
          v23 = v22[1];
          v25 = *(uint64_t **)(*(_QWORD *)(v22[6] + 8 * v21) + 40);
          v26 = *v25;
          if (v23 < 0)
          {
            if (v26)
            {
              v23 = *v22;
              if (v24 >= 1)
              {
                v32 = 0;
                v33 = (uint64x2_t)vdupq_n_s64(v24 - 1);
                v34 = (int8x16_t)(unint64_t)v24;
                v35 = (int64x2_t)xmmword_220F60900;
                v36 = (int32x2_t)0x100000000;
                do
                {
                  v37 = (int64x2_t)v34;
                  v38 = (int64x2_t)vcgeq_u64(v33, (uint64x2_t)v35);
                  v39 = vmovn_s64(v38);
                  v40 = v32 >> 3;
                  if ((v39.i8[0] & 1) != 0)
                    v34.i8[0] = *(_BYTE *)(v26 + v40);
                  if ((v39.i8[4] & 1) != 0)
                    v34.i8[4] = *(_BYTE *)(v26 + v40);
                  v34 = (int8x16_t)vaddw_s32(v37, vtst_s32(*(int32x2_t *)v34.i8, (int32x2_t)vshl_u32((uint32x2_t)0x100000001, (uint32x2_t)vand_s8((int8x8_t)v36, (int8x8_t)0x700000007))));
                  v32 += 2;
                  v35 = vaddq_s64(v35, v120);
                  v36 = vadd_s32(v36, (int32x2_t)0x200000002);
                }
                while (((v24 + 1) & 0xFFFFFFFFFFFFFFFELL) != v32);
                v23 = vaddvq_s64((int64x2_t)vbslq_s8((int8x16_t)v38, v34, (int8x16_t)v37));
              }
            }
            else
            {
              v23 = 0;
            }
          }
          v118 = v25[1];
          switch(*(_BYTE *)v20)
          {
            case 1:
              v27 = operator new(0x50uLL);
              v28 = v18;
              v27[1] = 0;
              v27[2] = 0;
              *v27 = &off_24E6BCA70;
              v29 = v27;
              v30 = &off_24E6BCAC0;
              break;
            case 2:
              v27 = operator new(0x50uLL);
              v28 = v18;
              v27[1] = 0;
              v27[2] = 0;
              *v27 = &off_24E6BCB28;
              v29 = v27;
              v30 = &off_24E6BCB78;
              break;
            case 3:
              v27 = operator new(0x50uLL);
              v28 = v18;
              v27[1] = 0;
              v27[2] = 0;
              *v27 = &off_24E6BCBD0;
              v29 = v27;
              v30 = &off_24E6BCC20;
              break;
            case 4:
              v27 = operator new(0x50uLL);
              v28 = v18;
              v27[1] = 0;
              v27[2] = 0;
              *v27 = &off_24E6BCC78;
              v29 = v27;
              v30 = &off_24E6BCCC8;
              break;
            case 5:
              v27 = operator new(0x50uLL);
              v28 = v18;
              v27[1] = 0;
              v27[2] = 0;
              *v27 = &off_24E6BCD20;
              v29 = v27;
              v30 = &off_24E6BCD70;
              break;
            case 6:
              v27 = operator new(0x50uLL);
              v28 = v18;
              v27[1] = 0;
              v27[2] = 0;
              *v27 = &off_24E6BCDC8;
              v29 = v27;
              v30 = &off_24E6BCE18;
              break;
            case 7:
              v27 = operator new(0x50uLL);
              v28 = v18;
              v27[1] = 0;
              v27[2] = 0;
              *v27 = &off_24E6BCE70;
              v29 = v27;
              v30 = &off_24E6BCEC0;
              break;
            case 8:
              v27 = operator new(0x50uLL);
              v28 = v18;
              v27[1] = 0;
              v27[2] = 0;
              *v27 = &off_24E6BCF18;
              v29 = v27;
              v30 = &off_24E6BCF68;
              break;
            case 9:
              v27 = operator new(0x50uLL);
              v28 = v18;
              v27[1] = 0;
              v27[2] = 0;
              *v27 = &off_24E6BCFC0;
              v29 = v27;
              v30 = &off_24E6BD010;
              break;
            case 0xA:
              v27 = operator new(0x50uLL);
              v28 = v18;
              v27[1] = 0;
              v27[2] = 0;
              *v27 = &off_24E6BD068;
              v29 = v27;
              v30 = &off_24E6BD0B8;
              break;
            default:
              goto LABEL_11;
          }
          v29[3] = v30;
          v31 = v29 + 3;
          v27[4] = v19;
          v27[5] = v24;
          v27[6] = v23;
          v27[7] = v26;
          v27[8] = v118;
          *((float *)v27 + 18) = a3;
          v124 = v31;
          v125 = v27;
        }
        v42 = *(char **)(v15 + 32);
        v41 = *(_QWORD *)(v15 + 40);
        if ((unint64_t)v42 < v41)
        {
          *(_QWORD *)v42 = v31;
          *((_QWORD *)v42 + 1) = v27;
          v43 = v42 + 16;
          *(_QWORD *)(v15 + 32) = v42 + 16;
          v18 = v28;
          goto LABEL_49;
        }
        v44 = *(char **)(v15 + 24);
        v45 = (v42 - v44) >> 4;
        v46 = v45 + 1;
        if ((unint64_t)(v45 + 1) >> 60)
          std::vector<void *>::__throw_length_error[abi:ne180100]();
        v47 = v41 - (_QWORD)v44;
        if (v47 >> 3 > v46)
          v46 = v47 >> 3;
        if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF0)
          v48 = 0xFFFFFFFFFFFFFFFLL;
        else
          v48 = v46;
        if (v48 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v49 = (char *)operator new(16 * v48);
        v50 = &v49[16 * v45];
        *(_QWORD *)v50 = v31;
        *((_QWORD *)v50 + 1) = v27;
        v124 = 0;
        v125 = 0;
        if (v42 == v44)
        {
          v43 = v50 + 16;
          *(_QWORD *)(v15 + 24) = v50;
          *(_QWORD *)(v15 + 32) = v50 + 16;
          *(_QWORD *)(v15 + 40) = &v49[16 * v48];
          if (v42)
            goto LABEL_47;
        }
        else
        {
          v51 = &v49[16 * v45];
          do
          {
            v52 = *((_OWORD *)v42 - 1);
            v42 -= 16;
            *((_OWORD *)v51 - 1) = v52;
            v51 -= 16;
            *(_QWORD *)v42 = 0;
            *((_QWORD *)v42 + 1) = 0;
          }
          while (v42 != v44);
          v42 = *(char **)(v15 + 24);
          v53 = *(_QWORD *)(v15 + 32);
          v43 = v50 + 16;
          *(_QWORD *)(v15 + 24) = v51;
          *(_QWORD *)(v15 + 32) = v50 + 16;
          *(_QWORD *)(v15 + 40) = &v49[16 * v48];
          while ((char *)v53 != v42)
          {
            v53 -= 16;
            std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v53);
          }
          if (v42)
LABEL_47:
            operator delete(v42);
        }
        *(_QWORD *)(v15 + 32) = v43;
        v17 = *v115;
        v18 = v115[1];
LABEL_49:
        if (++v19 >= (unint64_t)((v18 - v17) >> 4))
          goto LABEL_54;
        continue;
      }
    }
    v14 = 0;
    v13 = 0;
LABEL_69:
    std::vector<unsigned long long>::vector(&v124, v11 >> 3);
    v63 = *v9;
    v64 = v9[1];
    v65 = v64 - *v9;
    v66 = v109;
    if (v64 != *v9)
    {
      v67 = 0;
      v68 = v65 >> 3;
      v69 = v124;
      if (v68 <= 1)
        v68 = 1;
      do
      {
        if (v67)
        {
          v70 = 8 * v67 - 8;
          v71 = *(_QWORD *)(v63 + v70);
          v72 = *(_QWORD **)(v71 + 8);
          if (v72)
            v72 = (_QWORD *)*v72;
          v69[v67] = (char *)v72 + *(_QWORD *)((char *)v69 + v70);
          v73 = *(_QWORD *)(v63 + 8 * v67);
          v74 = *(_QWORD **)(v73 + 48);
          v75 = *(_QWORD **)(v73 + 56);
          if (v74 != v75)
          {
            v76 = *(_QWORD *)(*(_QWORD *)(v71 + 56) - 8);
            do
              *v74++ += v76;
            while (v74 != v75);
          }
        }
        else
        {
          *v69 = v111;
          v77 = *(_QWORD **)(*(_QWORD *)v63 + 48);
          v78 = *(_QWORD **)(*(_QWORD *)v63 + 56);
          while (v77 != v78)
            *v77++ += v109;
        }
        ++v67;
      }
      while (v67 != v68);
    }
    v109 += v13;
    std::vector<xgboost::Entry>::resize((uint64_t)v7, v13 + v66);
    v111 += (uint64_t)v14;
    std::vector<unsigned long>::resize((uint64_t)v110, v111 + 1);
    v79 = *v9;
    if ((int)((unint64_t)(v9[1] - *v9) >> 3) >= 1)
    {
      v80 = 0;
      do
      {
        v81 = 0;
        v82 = *(_QWORD *)(v79 + 8 * v80);
        v83 = **(_QWORD **)(v82 + 48);
        while (1)
        {
          v84 = *(_QWORD **)(v82 + 8);
          if (v84)
            v84 = (_QWORD *)*v84;
          if (v81 >= (unint64_t)v84)
            break;
          v82 = *(_QWORD *)(v79 + 8 * v80);
          v85 = *(_QWORD *)(v82 + 24);
          if (*(_QWORD *)(v82 + 32) != v85)
          {
            v86 = 0;
            v87 = 0;
            do
            {
              (*(void (**)(uint64_t *__return_ptr, _QWORD, unint64_t))(**(_QWORD **)(v85 + v86) + 16))(&v121, *(_QWORD *)(v85 + v86), v81);
              v88 = v123;
              v89 = (_DWORD *)(*v7 + 8 * v83++);
              *v89 = v122;
              v89[1] = v88;
              v79 = *v9;
              v82 = *(_QWORD *)(*v9 + 8 * v80);
              ++v87;
              v85 = *(_QWORD *)(v82 + 24);
              v86 += 16;
            }
            while (v87 < (*(_QWORD *)(v82 + 32) - v85) >> 4);
          }
          ++v81;
        }
        ++v80;
        v90 = v9[1];
        v91 = (unint64_t)(v90 - v79) >> 3;
      }
      while (v80 < (int)v91);
      if ((int)v91 >= 1)
      {
        v92 = 0;
        do
        {
          v93 = *(_QWORD *)(v79 + 8 * v92);
          v95 = *(_QWORD *)(v93 + 48);
          v94 = *(_QWORD *)(v93 + 56);
          if (v94 != v95 + 8)
          {
            memmove((void *)(*v110 + 8 * v124[v92] + 8), (const void *)(v95 + 8), v94 - (v95 + 8));
            v79 = *v9;
            v90 = v9[1];
          }
          ++v92;
        }
        while (v92 < (int)((unint64_t)(v90 - v79) >> 3));
      }
    }
    if (v124)
    {
      v125 = v124;
      operator delete(v124);
    }
  }
  v5[2] = (uint64_t)(a2[4] - a2[3]) >> 4;
  Engine = rabit::engine::GetEngine(v8);
  (*(void (**)(void *, _QWORD *, uint64_t, uint64_t, unint64_t *(*)(unint64_t *, unint64_t *, int), _QWORD, _QWORD))(*(_QWORD *)Engine + 8))(Engine, v5 + 2, 8, 1, rabit::op::Reducer<rabit::op::Max,unsigned long long>, 0, 0);
  v97 = v7[1] - *v7;
  v5[3] = v97 >> 3;
  v5[1] = v111;
  if (*(_QWORD *)(v110[1] - 8) != v97 >> 3)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long long>((uint64_t *)&v124);
    if (v124)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v121);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/simple_dmatrix.cc");
      v99 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v121);
      v100 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)"Check failed: ", 14);
      v101 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"offset_vec.back() == info_.num_nonzero_", 39);
      v102 = *((char *)v124 + 23);
      v103 = v102 >= 0 ? v124 : (_QWORD *)*v124;
      v104 = v102 >= 0 ? *((unsigned __int8 *)v124 + 23) : v124[1];
      v105 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)v103, v104);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v105, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v121);
      v106 = (uint64_t)v124;
      v124 = 0;
      if (v106)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v124, v106);
    }
  }
  return v5;
}

void sub_220F1E9F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xgboost::MetaInfo *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,xgboost::DMatrix *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](a10 + 48);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](a10 + 32);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](a9);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](a10);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](a11);
  xgboost::MetaInfo::~MetaInfo(a12);
  xgboost::DMatrix::~DMatrix(a23);
  _Unwind_Resume(a1);
}

uint64_t xgboost::data::SimpleDMatrix::Ctx(xgboost::data::SimpleDMatrix *this)
{
  return (uint64_t)this + 336;
}

uint64_t xgboost::data::SimpleDMatrix::SingleColBlock(xgboost::data::SimpleDMatrix *this)
{
  return 1;
}

void xgboost::data::SimpleDMatrix::~SimpleDMatrix(xgboost::data::SimpleDMatrix *this)
{
  xgboost::data::SimpleDMatrix::~SimpleDMatrix(this);
  JUMPOUT(0x227667068);
}

{
  xgboost::MetaInfo *v2;

  *(_QWORD *)this = &off_24E6BC9C8;
  v2 = (xgboost::data::SimpleDMatrix *)((char *)this + 8);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)this + 280);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)this + 264);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)this + 248);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)this + 232);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)this + 216);
  xgboost::MetaInfo::~MetaInfo(v2);
  xgboost::DMatrix::~DMatrix(this);
}

BOOL xgboost::data::SimpleDMatrix::EllpackExists(xgboost::data::SimpleDMatrix *this)
{
  return *((_QWORD *)this + 33) != 0;
}

uint64_t xgboost::data::SimpleDMatrix::SparsePageExists(xgboost::data::SimpleDMatrix *this)
{
  return 1;
}

void std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<signed char>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24E6BCA70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<signed char>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24E6BCA70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227667068);
}

uint64_t std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<signed char>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void xgboost::data::PrimitiveColumn<signed char>::~PrimitiveColumn()
{
  JUMPOUT(0x227667068);
}

uint64_t xgboost::data::PrimitiveColumn<signed char>::GetElement@<X0>(_QWORD *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t result;
  float v8;
  std::string *Entry;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  char v13;

  if (!a1[5] || a1[2] <= a2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    v10 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: data_ && row_idx < length_", 40);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Column is empty or out-of-bound index of the column", 51);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v13);
  }
  v6 = a1[1];
  result = (*(uint64_t (**)(_QWORD *, unint64_t))(*a1 + 24))(a1, a2);
  if ((_DWORD)result)
    v8 = (float)*(char *)(a1[5] + a2);
  else
    v8 = NAN;
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = v6;
  *(float *)(a3 + 16) = v8;
  return result;
}

void sub_220F1EC78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

BOOL xgboost::data::PrimitiveColumn<signed char>::IsValidElement(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  int v3;
  BOOL v4;

  v2 = *(_QWORD *)(a1 + 32);
  if ((!v2 || ((*(unsigned __int8 *)(v2 + (a2 >> 3)) >> (a2 & 7)) & 1) != 0)
    && ((v3 = *(char *)(*(_QWORD *)(a1 + 40) + a2),
         (unint64_t)(COERCE__INT64(fabs((double)v3)) - 0x10000000000000) >> 53 > 0x3FE)
      ? (v4 = COERCE__INT64((double)v3) == 0)
      : (v4 = 1),
        v4))
  {
    return *(float *)(a1 + 48) != (float)v3;
  }
  else
  {
    return 0;
  }
}

float xgboost::data::PrimitiveColumn<signed char>::AsFloatVector@<S0>(uint64_t a1@<X0>, float **a2@<X8>)
{
  float result;
  uint64_t v5;
  char *v6;
  float *v7;
  int v8;
  std::string *Entry;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  char v13;

  if (!*(_QWORD *)(a1 + 40))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    v10 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: data_", 19);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Column is empty", 15);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v13);
  }
  std::vector<float>::vector(a2, *(_QWORD *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v6 = *(char **)(a1 + 40);
    v7 = *a2;
    do
    {
      v8 = *v6++;
      result = (float)v8;
      *v7++ = (float)v8;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_220F1EDB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

_QWORD *xgboost::data::PrimitiveColumn<signed char>::AsUint64Vector@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  std::string *Entry;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  char v13;

  if (!*(_QWORD *)(a1 + 40))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    v10 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: data_", 19);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Column is empty", 15);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v13);
  }
  result = std::vector<unsigned long long>::vector(a2, *(_QWORD *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v6 = *(char **)(a1 + 40);
    v7 = (_QWORD *)*a2;
    do
    {
      v8 = *v6++;
      *v7++ = v8;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_220F1EE84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<unsigned char>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24E6BCB28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<unsigned char>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24E6BCB28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227667068);
}

uint64_t std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<unsigned char>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void xgboost::data::PrimitiveColumn<unsigned char>::~PrimitiveColumn()
{
  JUMPOUT(0x227667068);
}

uint64_t xgboost::data::PrimitiveColumn<unsigned char>::GetElement@<X0>(_QWORD *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t result;
  unsigned int v8;
  float v9;
  std::string *Entry;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  char v14;

  if (!a1[5] || a1[2] <= a2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    v11 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: data_ && row_idx < length_", 40);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Column is empty or out-of-bound index of the column", 51);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v14);
  }
  v6 = a1[1];
  result = (*(uint64_t (**)(_QWORD *, unint64_t))(*a1 + 24))(a1, a2);
  if ((_DWORD)result)
  {
    LOBYTE(v8) = *(_BYTE *)(a1[5] + a2);
    v9 = (float)v8;
  }
  else
  {
    v9 = NAN;
  }
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = v6;
  *(float *)(a3 + 16) = v9;
  return result;
}

void sub_220F1EFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

BOOL xgboost::data::PrimitiveColumn<unsigned char>::IsValidElement(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;

  v2 = *(_QWORD *)(a1 + 32);
  if ((!v2 || ((*(unsigned __int8 *)(v2 + (a2 >> 3)) >> (a2 & 7)) & 1) != 0)
    && ((v3 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + a2),
         v4 = (unint64_t)(COERCE__INT64(fabs((double)v3)) - 0x10000000000000) >> 53,
         COERCE__INT64((double)v3) >= 0)
      ? (v5 = v4 > 0x3FE)
      : (v5 = 1),
        v5 ? (v6 = COERCE__INT64((double)v3) == 0) : (v6 = 1),
        v6))
  {
    return *(float *)(a1 + 48) != (float)v3;
  }
  else
  {
    return 0;
  }
}

float xgboost::data::PrimitiveColumn<unsigned char>::AsFloatVector@<S0>(uint64_t a1@<X0>, float **a2@<X8>)
{
  float result;
  uint64_t v5;
  unsigned __int8 *v6;
  float *v7;
  unsigned int v8;
  std::string *Entry;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  char v13;

  if (!*(_QWORD *)(a1 + 40))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    v10 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: data_", 19);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Column is empty", 15);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v13);
  }
  std::vector<float>::vector(a2, *(_QWORD *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v6 = *(unsigned __int8 **)(a1 + 40);
    v7 = *a2;
    do
    {
      v8 = *v6++;
      result = (float)v8;
      *v7++ = (float)v8;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_220F1F120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

_QWORD *xgboost::data::PrimitiveColumn<unsigned char>::AsUint64Vector@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  unsigned __int8 *v6;
  _QWORD *v7;
  unsigned int v8;
  std::string *Entry;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  char v13;

  if (!*(_QWORD *)(a1 + 40))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    v10 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: data_", 19);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Column is empty", 15);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v13);
  }
  result = std::vector<unsigned long long>::vector(a2, *(_QWORD *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v6 = *(unsigned __int8 **)(a1 + 40);
    v7 = (_QWORD *)*a2;
    do
    {
      v8 = *v6++;
      *v7++ = v8;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_220F1F1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<short>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24E6BCBD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<short>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24E6BCBD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227667068);
}

uint64_t std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<short>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void xgboost::data::PrimitiveColumn<short>::~PrimitiveColumn()
{
  JUMPOUT(0x227667068);
}

uint64_t xgboost::data::PrimitiveColumn<short>::GetElement@<X0>(_QWORD *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t result;
  float v8;
  std::string *Entry;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  char v13;

  if (!a1[5] || a1[2] <= a2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    v10 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: data_ && row_idx < length_", 40);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Column is empty or out-of-bound index of the column", 51);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v13);
  }
  v6 = a1[1];
  result = (*(uint64_t (**)(_QWORD *, unint64_t))(*a1 + 24))(a1, a2);
  if ((_DWORD)result)
    v8 = (float)*(__int16 *)(a1[5] + 2 * a2);
  else
    v8 = NAN;
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = v6;
  *(float *)(a3 + 16) = v8;
  return result;
}

void sub_220F1F34C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

BOOL xgboost::data::PrimitiveColumn<short>::IsValidElement(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  int v3;
  BOOL v4;

  v2 = *(_QWORD *)(a1 + 32);
  if ((!v2 || ((*(unsigned __int8 *)(v2 + (a2 >> 3)) >> (a2 & 7)) & 1) != 0)
    && ((v3 = *(__int16 *)(*(_QWORD *)(a1 + 40) + 2 * a2),
         (unint64_t)(COERCE__INT64(fabs((double)v3)) - 0x10000000000000) >> 53 > 0x3FE)
      ? (v4 = COERCE__INT64((double)v3) == 0)
      : (v4 = 1),
        v4))
  {
    return *(float *)(a1 + 48) != (float)v3;
  }
  else
  {
    return 0;
  }
}

float xgboost::data::PrimitiveColumn<short>::AsFloatVector@<S0>(uint64_t a1@<X0>, float **a2@<X8>)
{
  float result;
  uint64_t v5;
  __int16 *v6;
  float *v7;
  uint64_t v8;
  int v9;
  std::string *Entry;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  char v14;

  if (!*(_QWORD *)(a1 + 40))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    v11 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: data_", 19);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Column is empty", 15);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v14);
  }
  std::vector<float>::vector(a2, *(_QWORD *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v6 = *(__int16 **)(a1 + 40);
    v7 = *a2;
    v8 = 2 * v5;
    do
    {
      v9 = *v6++;
      result = (float)v9;
      *v7++ = (float)v9;
      v8 -= 2;
    }
    while (v8);
  }
  return result;
}

void sub_220F1F48C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

_QWORD *xgboost::data::PrimitiveColumn<short>::AsUint64Vector@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  __int16 *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  std::string *Entry;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  char v14;

  if (!*(_QWORD *)(a1 + 40))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    v11 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: data_", 19);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Column is empty", 15);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v14);
  }
  result = std::vector<unsigned long long>::vector(a2, *(_QWORD *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v6 = *(__int16 **)(a1 + 40);
    v7 = (_QWORD *)*a2;
    v8 = 2 * v5;
    do
    {
      v9 = *v6++;
      *v7++ = v9;
      v8 -= 2;
    }
    while (v8);
  }
  return result;
}

void sub_220F1F560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<unsigned short>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24E6BCC78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<unsigned short>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24E6BCC78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227667068);
}

uint64_t std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<unsigned short>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void xgboost::data::PrimitiveColumn<unsigned short>::~PrimitiveColumn()
{
  JUMPOUT(0x227667068);
}

uint64_t xgboost::data::PrimitiveColumn<unsigned short>::GetElement@<X0>(_QWORD *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t result;
  unsigned int v8;
  float v9;
  std::string *Entry;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  char v14;

  if (!a1[5] || a1[2] <= a2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    v11 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: data_ && row_idx < length_", 40);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Column is empty or out-of-bound index of the column", 51);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v14);
  }
  v6 = a1[1];
  result = (*(uint64_t (**)(_QWORD *, unint64_t))(*a1 + 24))(a1, a2);
  if ((_DWORD)result)
  {
    LOWORD(v8) = *(_WORD *)(a1[5] + 2 * a2);
    v9 = (float)v8;
  }
  else
  {
    v9 = NAN;
  }
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = v6;
  *(float *)(a3 + 16) = v9;
  return result;
}

void sub_220F1F6BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

BOOL xgboost::data::PrimitiveColumn<unsigned short>::IsValidElement(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;

  v2 = *(_QWORD *)(a1 + 32);
  if ((!v2 || ((*(unsigned __int8 *)(v2 + (a2 >> 3)) >> (a2 & 7)) & 1) != 0)
    && ((v3 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 40) + 2 * a2),
         v4 = (unint64_t)(COERCE__INT64(fabs((double)v3)) - 0x10000000000000) >> 53,
         COERCE__INT64((double)v3) >= 0)
      ? (v5 = v4 > 0x3FE)
      : (v5 = 1),
        v5 ? (v6 = COERCE__INT64((double)v3) == 0) : (v6 = 1),
        v6))
  {
    return *(float *)(a1 + 48) != (float)v3;
  }
  else
  {
    return 0;
  }
}

float xgboost::data::PrimitiveColumn<unsigned short>::AsFloatVector@<S0>(uint64_t a1@<X0>, float **a2@<X8>)
{
  float result;
  uint64_t v5;
  unsigned __int16 *v6;
  float *v7;
  uint64_t v8;
  unsigned int v9;
  std::string *Entry;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  char v14;

  if (!*(_QWORD *)(a1 + 40))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    v11 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: data_", 19);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Column is empty", 15);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v14);
  }
  std::vector<float>::vector(a2, *(_QWORD *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v6 = *(unsigned __int16 **)(a1 + 40);
    v7 = *a2;
    v8 = 2 * v5;
    do
    {
      v9 = *v6++;
      result = (float)v9;
      *v7++ = (float)v9;
      v8 -= 2;
    }
    while (v8);
  }
  return result;
}

void sub_220F1F800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

_QWORD *xgboost::data::PrimitiveColumn<unsigned short>::AsUint64Vector@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  unsigned __int16 *v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  std::string *Entry;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  char v14;

  if (!*(_QWORD *)(a1 + 40))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    v11 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: data_", 19);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Column is empty", 15);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v14);
  }
  result = std::vector<unsigned long long>::vector(a2, *(_QWORD *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v6 = *(unsigned __int16 **)(a1 + 40);
    v7 = (_QWORD *)*a2;
    v8 = 2 * v5;
    do
    {
      v9 = *v6++;
      *v7++ = v9;
      v8 -= 2;
    }
    while (v8);
  }
  return result;
}

void sub_220F1F8D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<int>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24E6BCD20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<int>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24E6BCD20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227667068);
}

uint64_t std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<int>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void xgboost::data::PrimitiveColumn<int>::~PrimitiveColumn()
{
  JUMPOUT(0x227667068);
}

uint64_t xgboost::data::PrimitiveColumn<int>::GetElement@<X0>(_QWORD *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t result;
  float v8;
  std::string *Entry;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  char v13;

  if (!a1[5] || a1[2] <= a2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    v10 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: data_ && row_idx < length_", 40);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Column is empty or out-of-bound index of the column", 51);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v13);
  }
  v6 = a1[1];
  result = (*(uint64_t (**)(_QWORD *, unint64_t))(*a1 + 24))(a1, a2);
  if ((_DWORD)result)
    v8 = (float)*(int *)(a1[5] + 4 * a2);
  else
    v8 = NAN;
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = v6;
  *(float *)(a3 + 16) = v8;
  return result;
}

void sub_220F1FA30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

BOOL xgboost::data::PrimitiveColumn<int>::IsValidElement(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  int v3;
  BOOL v4;

  v2 = *(_QWORD *)(a1 + 32);
  if ((!v2 || ((*(unsigned __int8 *)(v2 + (a2 >> 3)) >> (a2 & 7)) & 1) != 0)
    && ((v3 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * a2),
         (unint64_t)(COERCE__INT64(fabs((double)v3)) - 0x10000000000000) >> 53 > 0x3FE)
      ? (v4 = COERCE__INT64((double)v3) == 0)
      : (v4 = 1),
        v4))
  {
    return *(float *)(a1 + 48) != (float)v3;
  }
  else
  {
    return 0;
  }
}

float xgboost::data::PrimitiveColumn<int>::AsFloatVector@<S0>(uint64_t a1@<X0>, float **a2@<X8>)
{
  float result;
  uint64_t v5;
  int *v6;
  float *v7;
  uint64_t v8;
  int v9;
  std::string *Entry;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  char v14;

  if (!*(_QWORD *)(a1 + 40))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    v11 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: data_", 19);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Column is empty", 15);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v14);
  }
  std::vector<float>::vector(a2, *(_QWORD *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v6 = *(int **)(a1 + 40);
    v7 = *a2;
    v8 = 4 * v5;
    do
    {
      v9 = *v6++;
      result = (float)v9;
      *v7++ = (float)v9;
      v8 -= 4;
    }
    while (v8);
  }
  return result;
}

void sub_220F1FB6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

_QWORD *xgboost::data::PrimitiveColumn<int>::AsUint64Vector@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  int *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  std::string *Entry;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  char v14;

  if (!*(_QWORD *)(a1 + 40))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    v11 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: data_", 19);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Column is empty", 15);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v14);
  }
  result = std::vector<unsigned long long>::vector(a2, *(_QWORD *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v6 = *(int **)(a1 + 40);
    v7 = (_QWORD *)*a2;
    v8 = 4 * v5;
    do
    {
      v9 = *v6++;
      *v7++ = v9;
      v8 -= 4;
    }
    while (v8);
  }
  return result;
}

void sub_220F1FC40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<unsigned int>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24E6BCDC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<unsigned int>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24E6BCDC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227667068);
}

uint64_t std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<unsigned int>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void xgboost::data::PrimitiveColumn<unsigned int>::~PrimitiveColumn()
{
  JUMPOUT(0x227667068);
}

uint64_t xgboost::data::PrimitiveColumn<unsigned int>::GetElement@<X0>(_QWORD *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t result;
  float v8;
  std::string *Entry;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  char v13;

  if (!a1[5] || a1[2] <= a2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    v10 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: data_ && row_idx < length_", 40);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Column is empty or out-of-bound index of the column", 51);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v13);
  }
  v6 = a1[1];
  result = (*(uint64_t (**)(_QWORD *, unint64_t))(*a1 + 24))(a1, a2);
  if ((_DWORD)result)
    v8 = (float)*(unsigned int *)(a1[5] + 4 * a2);
  else
    v8 = NAN;
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = v6;
  *(float *)(a3 + 16) = v8;
  return result;
}

void sub_220F1FD9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

BOOL xgboost::data::PrimitiveColumn<unsigned int>::IsValidElement(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;

  v2 = *(_QWORD *)(a1 + 32);
  if ((!v2 || ((*(unsigned __int8 *)(v2 + (a2 >> 3)) >> (a2 & 7)) & 1) != 0)
    && ((v3 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * a2),
         v4 = (unint64_t)(COERCE__INT64(fabs((double)v3)) - 0x10000000000000) >> 53,
         COERCE__INT64((double)v3) >= 0)
      ? (v5 = v4 > 0x3FE)
      : (v5 = 1),
        v5 ? (v6 = COERCE__INT64((double)v3) == 0) : (v6 = 1),
        v6))
  {
    return *(float *)(a1 + 48) != (float)v3;
  }
  else
  {
    return 0;
  }
}

float xgboost::data::PrimitiveColumn<unsigned int>::AsFloatVector@<S0>(uint64_t a1@<X0>, float **a2@<X8>)
{
  float result;
  uint64_t v5;
  unsigned int *v6;
  float *v7;
  uint64_t v8;
  unsigned int v9;
  std::string *Entry;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  char v14;

  if (!*(_QWORD *)(a1 + 40))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    v11 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: data_", 19);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Column is empty", 15);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v14);
  }
  std::vector<float>::vector(a2, *(_QWORD *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v6 = *(unsigned int **)(a1 + 40);
    v7 = *a2;
    v8 = 4 * v5;
    do
    {
      v9 = *v6++;
      result = (float)v9;
      *v7++ = (float)v9;
      v8 -= 4;
    }
    while (v8);
  }
  return result;
}

void sub_220F1FEE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

_QWORD *xgboost::data::PrimitiveColumn<unsigned int>::AsUint64Vector@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  unsigned int *v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  std::string *Entry;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  char v14;

  if (!*(_QWORD *)(a1 + 40))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    v11 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: data_", 19);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Column is empty", 15);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v14);
  }
  result = std::vector<unsigned long long>::vector(a2, *(_QWORD *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v6 = *(unsigned int **)(a1 + 40);
    v7 = (_QWORD *)*a2;
    v8 = 4 * v5;
    do
    {
      v9 = *v6++;
      *v7++ = v9;
      v8 -= 4;
    }
    while (v8);
  }
  return result;
}

void sub_220F1FFB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<long long>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24E6BCE70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<long long>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24E6BCE70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227667068);
}

uint64_t std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<long long>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void xgboost::data::PrimitiveColumn<long long>::~PrimitiveColumn()
{
  JUMPOUT(0x227667068);
}

uint64_t xgboost::data::PrimitiveColumn<long long>::GetElement@<X0>(_QWORD *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t result;
  float v8;
  std::string *Entry;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  char v13;

  if (!a1[5] || a1[2] <= a2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    v10 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: data_ && row_idx < length_", 40);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Column is empty or out-of-bound index of the column", 51);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v13);
  }
  v6 = a1[1];
  result = (*(uint64_t (**)(_QWORD *, unint64_t))(*a1 + 24))(a1, a2);
  if ((_DWORD)result)
    v8 = (float)*(uint64_t *)(a1[5] + 8 * a2);
  else
    v8 = NAN;
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = v6;
  *(float *)(a3 + 16) = v8;
  return result;
}

void sub_220F20110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

BOOL xgboost::data::PrimitiveColumn<long long>::IsValidElement(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  v2 = *(_QWORD *)(a1 + 32);
  if ((!v2 || ((*(unsigned __int8 *)(v2 + (a2 >> 3)) >> (a2 & 7)) & 1) != 0)
    && ((v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * a2),
         (unint64_t)(COERCE__INT64(fabs((double)v3)) - 0x10000000000000) >> 53 > 0x3FE)
      ? (v4 = COERCE__INT64((double)v3) == 0)
      : (v4 = 1),
        v4))
  {
    return *(float *)(a1 + 48) != (float)v3;
  }
  else
  {
    return 0;
  }
}

float xgboost::data::PrimitiveColumn<long long>::AsFloatVector@<S0>(uint64_t a1@<X0>, float **a2@<X8>)
{
  float result;
  uint64_t v5;
  uint64_t *v6;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  std::string *Entry;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  char v14;

  if (!*(_QWORD *)(a1 + 40))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    v11 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: data_", 19);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Column is empty", 15);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v14);
  }
  std::vector<float>::vector(a2, *(_QWORD *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v6 = *(uint64_t **)(a1 + 40);
    v7 = *a2;
    v8 = 8 * v5;
    do
    {
      v9 = *v6++;
      result = (float)v9;
      *v7++ = (float)v9;
      v8 -= 8;
    }
    while (v8);
  }
  return result;
}

void sub_220F2024C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

_QWORD *xgboost::data::PrimitiveColumn<long long>::AsUint64Vector@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  std::string *Entry;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  char v14;

  if (!*(_QWORD *)(a1 + 40))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    v11 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: data_", 19);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Column is empty", 15);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v14);
  }
  result = std::vector<unsigned long long>::vector(a2, *(_QWORD *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v6 = *(uint64_t **)(a1 + 40);
    v7 = (_QWORD *)*a2;
    v8 = 8 * v5;
    do
    {
      v9 = *v6++;
      *v7++ = v9;
      v8 -= 8;
    }
    while (v8);
  }
  return result;
}

void sub_220F20320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<unsigned long long>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24E6BCF18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<unsigned long long>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24E6BCF18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227667068);
}

uint64_t std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<unsigned long long>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void xgboost::data::PrimitiveColumn<unsigned long long>::~PrimitiveColumn()
{
  JUMPOUT(0x227667068);
}

uint64_t xgboost::data::PrimitiveColumn<unsigned long long>::GetElement@<X0>(_QWORD *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t result;
  float v8;
  std::string *Entry;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  char v13;

  if (!a1[5] || a1[2] <= a2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    v10 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: data_ && row_idx < length_", 40);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Column is empty or out-of-bound index of the column", 51);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v13);
  }
  v6 = a1[1];
  result = (*(uint64_t (**)(_QWORD *, unint64_t))(*a1 + 24))(a1, a2);
  if ((_DWORD)result)
    v8 = (float)*(unint64_t *)(a1[5] + 8 * a2);
  else
    v8 = NAN;
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = v6;
  *(float *)(a3 + 16) = v8;
  return result;
}

void sub_220F2047C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

BOOL xgboost::data::PrimitiveColumn<unsigned long long>::IsValidElement(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;

  v2 = *(_QWORD *)(a1 + 32);
  if ((!v2 || ((*(unsigned __int8 *)(v2 + (a2 >> 3)) >> (a2 & 7)) & 1) != 0)
    && ((v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * a2),
         v4 = (unint64_t)(COERCE__INT64(fabs((double)v3)) - 0x10000000000000) >> 53,
         COERCE__INT64((double)v3) >= 0)
      ? (v5 = v4 > 0x3FE)
      : (v5 = 1),
        v5 ? (v6 = COERCE__INT64((double)v3) == 0) : (v6 = 1),
        v6))
  {
    return *(float *)(a1 + 48) != (float)v3;
  }
  else
  {
    return 0;
  }
}

float xgboost::data::PrimitiveColumn<unsigned long long>::AsFloatVector@<S0>(uint64_t a1@<X0>, float **a2@<X8>)
{
  float result;
  uint64_t v5;
  unint64_t *v6;
  float *v7;
  uint64_t v8;
  unint64_t v9;
  std::string *Entry;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  char v14;

  if (!*(_QWORD *)(a1 + 40))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    v11 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: data_", 19);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Column is empty", 15);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v14);
  }
  std::vector<float>::vector(a2, *(_QWORD *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v6 = *(unint64_t **)(a1 + 40);
    v7 = *a2;
    v8 = 8 * v5;
    do
    {
      v9 = *v6++;
      result = (float)v9;
      *v7++ = (float)v9;
      v8 -= 8;
    }
    while (v8);
  }
  return result;
}

void sub_220F205C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

_QWORD *xgboost::data::PrimitiveColumn<unsigned long long>::AsUint64Vector@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  std::string *Entry;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  char v14;

  if (!*(_QWORD *)(a1 + 40))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    v11 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: data_", 19);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Column is empty", 15);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v14);
  }
  result = std::vector<unsigned long long>::vector(a2, *(_QWORD *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v6 = *(uint64_t **)(a1 + 40);
    v7 = (_QWORD *)*a2;
    v8 = 8 * v5;
    do
    {
      v9 = *v6++;
      *v7++ = v9;
      v8 -= 8;
    }
    while (v8);
  }
  return result;
}

void sub_220F20694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<float>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24E6BCFC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<float>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24E6BCFC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227667068);
}

uint64_t std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<float>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void xgboost::data::PrimitiveColumn<float>::~PrimitiveColumn()
{
  JUMPOUT(0x227667068);
}

uint64_t xgboost::data::PrimitiveColumn<float>::GetElement@<X0>(_QWORD *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t result;
  int v8;
  std::string *Entry;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  char v13;

  if (!a1[5] || a1[2] <= a2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    v10 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: data_ && row_idx < length_", 40);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Column is empty or out-of-bound index of the column", 51);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v13);
  }
  v6 = a1[1];
  result = (*(uint64_t (**)(_QWORD *, unint64_t))(*a1 + 24))(a1, a2);
  if ((_DWORD)result)
    v8 = *(_DWORD *)(a1[5] + 4 * a2);
  else
    v8 = 2143289344;
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = v6;
  *(_DWORD *)(a3 + 16) = v8;
  return result;
}

void sub_220F207EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

BOOL xgboost::data::PrimitiveColumn<float>::IsValidElement(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  float v3;
  double v4;
  BOOL v5;

  v2 = *(_QWORD *)(a1 + 32);
  if ((!v2 || ((*(unsigned __int8 *)(v2 + (a2 >> 3)) >> (a2 & 7)) & 1) != 0)
    && ((v3 = *(float *)(*(_QWORD *)(a1 + 40) + 4 * a2),
         v4 = fabs(v3),
         (unint64_t)(*(_QWORD *)&v4 - 0x10000000000000) >> 53 > 0x3FE)
      ? (v5 = *(_QWORD *)&v4 == 0)
      : (v5 = 1),
        v5))
  {
    return v3 != *(float *)(a1 + 48);
  }
  else
  {
    return 0;
  }
}

float xgboost::data::PrimitiveColumn<float>::AsFloatVector@<S0>(uint64_t a1@<X0>, float **a2@<X8>)
{
  float result;
  uint64_t v5;
  float *v6;
  float *v7;
  uint64_t v8;
  float v9;
  std::string *Entry;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  char v14;

  if (!*(_QWORD *)(a1 + 40))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    v11 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: data_", 19);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Column is empty", 15);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v14);
  }
  std::vector<float>::vector(a2, *(_QWORD *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v6 = *(float **)(a1 + 40);
    v7 = *a2;
    v8 = 4 * v5;
    do
    {
      v9 = *v6++;
      result = v9;
      *v7++ = v9;
      v8 -= 4;
    }
    while (v8);
  }
  return result;
}

void sub_220F20920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

float xgboost::data::PrimitiveColumn<float>::AsUint64Vector@<S0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  float result;
  uint64_t v5;
  float *v6;
  _QWORD *v7;
  uint64_t v8;
  float v9;
  std::string *Entry;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  char v14;

  if (!*(_QWORD *)(a1 + 40))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    v11 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: data_", 19);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Column is empty", 15);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v14);
  }
  std::vector<unsigned long long>::vector(a2, *(_QWORD *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v6 = *(float **)(a1 + 40);
    v7 = (_QWORD *)*a2;
    v8 = 4 * v5;
    do
    {
      v9 = *v6++;
      result = v9;
      *v7++ = (unint64_t)v9;
      v8 -= 4;
    }
    while (v8);
  }
  return result;
}

void sub_220F209F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<double>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24E6BD068;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<double>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24E6BD068;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227667068);
}

uint64_t std::__shared_ptr_emplace<xgboost::data::PrimitiveColumn<double>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void xgboost::data::PrimitiveColumn<double>::~PrimitiveColumn()
{
  JUMPOUT(0x227667068);
}

uint64_t xgboost::data::PrimitiveColumn<double>::GetElement@<X0>(_QWORD *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t result;
  float v8;
  std::string *Entry;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  char v13;

  if (!a1[5] || a1[2] <= a2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    v10 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: data_ && row_idx < length_", 40);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Column is empty or out-of-bound index of the column", 51);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v13);
  }
  v6 = a1[1];
  result = (*(uint64_t (**)(_QWORD *, unint64_t))(*a1 + 24))(a1, a2);
  if ((_DWORD)result)
    v8 = *(double *)(a1[5] + 8 * a2);
  else
    v8 = NAN;
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = v6;
  *(float *)(a3 + 16) = v8;
  return result;
}

void sub_220F20B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

BOOL xgboost::data::PrimitiveColumn<double>::IsValidElement(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  float v3;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 && ((*(unsigned __int8 *)(v2 + (a2 >> 3)) >> (a2 & 7)) & 1) == 0
    || (*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * a2) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    return 0;
  }
  v3 = *(double *)(*(_QWORD *)(a1 + 40) + 8 * a2);
  return *(float *)(a1 + 48) != v3;
}

float xgboost::data::PrimitiveColumn<double>::AsFloatVector@<S0>(uint64_t a1@<X0>, float **a2@<X8>)
{
  float result;
  uint64_t v5;
  double *v6;
  float *v7;
  uint64_t v8;
  double v9;
  std::string *Entry;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  char v14;

  if (!*(_QWORD *)(a1 + 40))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    v11 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: data_", 19);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Column is empty", 15);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v14);
  }
  std::vector<float>::vector(a2, *(_QWORD *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v6 = *(double **)(a1 + 40);
    v7 = *a2;
    v8 = 8 * v5;
    do
    {
      v9 = *v6++;
      result = v9;
      *v7++ = result;
      v8 -= 8;
    }
    while (v8);
  }
  return result;
}

void sub_220F20C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

double xgboost::data::PrimitiveColumn<double>::AsUint64Vector@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  double result;
  uint64_t v5;
  double *v6;
  _QWORD *v7;
  uint64_t v8;
  double v9;
  std::string *Entry;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  char v14;

  if (!*(_QWORD *)(a1 + 40))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/adapter.h");
    v11 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: data_", 19);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Column is empty", 15);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v14);
  }
  std::vector<unsigned long long>::vector(a2, *(_QWORD *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v6 = *(double **)(a1 + 40);
    v7 = (_QWORD *)*a2;
    v8 = 8 * v5;
    do
    {
      v9 = *v6++;
      result = v9;
      *v7++ = (unint64_t)v9;
      v8 -= 8;
    }
    while (v8);
  }
  return result;
}

void sub_220F20D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

_QWORD *xgboost::data::SimpleBatchIteratorImpl<xgboost::SparsePage>::~SimpleBatchIteratorImpl(_QWORD *a1)
{
  *a1 = &off_24E6BD110;
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void xgboost::data::SimpleBatchIteratorImpl<xgboost::SparsePage>::~SimpleBatchIteratorImpl(_QWORD *a1)
{
  *a1 = &off_24E6BD110;
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x227667068);
}

uint64_t xgboost::data::SimpleBatchIteratorImpl<xgboost::SparsePage>::operator*(uint64_t a1)
{
  uint64_t result;
  std::string *Entry;
  _QWORD *v4;
  _QWORD *v5;
  char v6;

  result = *(_QWORD *)(a1 + 8);
  if (!result)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v6);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./simple_batch_iterator.h");
    v4 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v6);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: page_ != nullptr", 30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v6);
    return *(_QWORD *)(a1 + 8);
  }
  return result;
}

void sub_220F20EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

uint64_t xgboost::data::SimpleBatchIteratorImpl<xgboost::SparsePage>::operator++(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

BOOL xgboost::data::SimpleBatchIteratorImpl<xgboost::SparsePage>::AtEnd(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) == 0;
}

uint64_t xgboost::data::SimpleBatchIteratorImpl<xgboost::SparsePage>::Page@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 16);
  *a2 = *(_QWORD *)(result + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

_QWORD *xgboost::data::SimpleBatchIteratorImpl<xgboost::CSCPage>::~SimpleBatchIteratorImpl(_QWORD *a1)
{
  *a1 = &off_24E6BD168;
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void xgboost::data::SimpleBatchIteratorImpl<xgboost::CSCPage>::~SimpleBatchIteratorImpl(_QWORD *a1)
{
  *a1 = &off_24E6BD168;
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x227667068);
}

uint64_t xgboost::data::SimpleBatchIteratorImpl<xgboost::CSCPage>::operator*(uint64_t a1)
{
  uint64_t result;
  std::string *Entry;
  _QWORD *v4;
  _QWORD *v5;
  char v6;

  result = *(_QWORD *)(a1 + 8);
  if (!result)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v6);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./simple_batch_iterator.h");
    v4 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v6);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: page_ != nullptr", 30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v6);
    return *(_QWORD *)(a1 + 8);
  }
  return result;
}

void sub_220F21050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

uint64_t xgboost::data::SimpleBatchIteratorImpl<xgboost::CSCPage>::operator++(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

BOOL xgboost::data::SimpleBatchIteratorImpl<xgboost::CSCPage>::AtEnd(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) == 0;
}

uint64_t xgboost::data::SimpleBatchIteratorImpl<xgboost::CSCPage>::Page@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 16);
  *a2 = *(_QWORD *)(result + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

_QWORD *xgboost::data::SimpleBatchIteratorImpl<xgboost::SortedCSCPage>::~SimpleBatchIteratorImpl(_QWORD *a1)
{
  *a1 = &off_24E6BD1C0;
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void xgboost::data::SimpleBatchIteratorImpl<xgboost::SortedCSCPage>::~SimpleBatchIteratorImpl(_QWORD *a1)
{
  *a1 = &off_24E6BD1C0;
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x227667068);
}

uint64_t xgboost::data::SimpleBatchIteratorImpl<xgboost::SortedCSCPage>::operator*(uint64_t a1)
{
  uint64_t result;
  std::string *Entry;
  _QWORD *v4;
  _QWORD *v5;
  char v6;

  result = *(_QWORD *)(a1 + 8);
  if (!result)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v6);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./simple_batch_iterator.h");
    v4 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v6);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: page_ != nullptr", 30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v6);
    return *(_QWORD *)(a1 + 8);
  }
  return result;
}

void sub_220F211E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

uint64_t xgboost::data::SimpleBatchIteratorImpl<xgboost::SortedCSCPage>::operator++(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

BOOL xgboost::data::SimpleBatchIteratorImpl<xgboost::SortedCSCPage>::AtEnd(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) == 0;
}

uint64_t xgboost::data::SimpleBatchIteratorImpl<xgboost::SortedCSCPage>::Page@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 16);
  *a2 = *(_QWORD *)(result + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__shared_ptr_pointer<xgboost::EllpackPage *,std::shared_ptr<xgboost::EllpackPage>::__shared_ptr_default_delete<xgboost::EllpackPage,xgboost::EllpackPage>,std::allocator<xgboost::EllpackPage>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227667068);
}

xgboost::EllpackPage *std::__shared_ptr_pointer<xgboost::EllpackPage *,std::shared_ptr<xgboost::EllpackPage>::__shared_ptr_default_delete<xgboost::EllpackPage,xgboost::EllpackPage>,std::allocator<xgboost::EllpackPage>>::__on_zero_shared(uint64_t a1)
{
  xgboost::EllpackPage *result;

  result = *(xgboost::EllpackPage **)(a1 + 24);
  if (result)
  {
    xgboost::EllpackPage::~EllpackPage(result);
    JUMPOUT(0x227667068);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<xgboost::EllpackPage *,std::shared_ptr<xgboost::EllpackPage>::__shared_ptr_default_delete<xgboost::EllpackPage,xgboost::EllpackPage>,std::allocator<xgboost::EllpackPage>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<xgboost::GHistIndexMatrix>::shared_ptr[abi:ne180100]<xgboost::GHistIndexMatrix,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24E6BD290;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_220F2138C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<xgboost::GHistIndexMatrix>::reset[abi:ne180100]((xgboost::GHistIndexMatrix **)va, 0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<xgboost::GHistIndexMatrix *,std::shared_ptr<xgboost::GHistIndexMatrix>::__shared_ptr_default_delete<xgboost::GHistIndexMatrix,xgboost::GHistIndexMatrix>,std::allocator<xgboost::GHistIndexMatrix>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227667068);
}

xgboost::GHistIndexMatrix *std::__shared_ptr_pointer<xgboost::GHistIndexMatrix *,std::shared_ptr<xgboost::GHistIndexMatrix>::__shared_ptr_default_delete<xgboost::GHistIndexMatrix,xgboost::GHistIndexMatrix>,std::allocator<xgboost::GHistIndexMatrix>>::__on_zero_shared(uint64_t a1)
{
  xgboost::GHistIndexMatrix *result;

  result = *(xgboost::GHistIndexMatrix **)(a1 + 24);
  if (result)
  {
    xgboost::GHistIndexMatrix::~GHistIndexMatrix(result);
    JUMPOUT(0x227667068);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<xgboost::GHistIndexMatrix *,std::shared_ptr<xgboost::GHistIndexMatrix>::__shared_ptr_default_delete<xgboost::GHistIndexMatrix,xgboost::GHistIndexMatrix>,std::allocator<xgboost::GHistIndexMatrix>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

xgboost::GHistIndexMatrix *std::unique_ptr<xgboost::GHistIndexMatrix>::reset[abi:ne180100](xgboost::GHistIndexMatrix **a1, xgboost::GHistIndexMatrix *a2)
{
  xgboost::GHistIndexMatrix *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    xgboost::GHistIndexMatrix::~GHistIndexMatrix(result);
    JUMPOUT(0x227667068);
  }
  return result;
}

_QWORD *xgboost::data::SimpleBatchIteratorImpl<xgboost::GHistIndexMatrix>::~SimpleBatchIteratorImpl(_QWORD *a1)
{
  *a1 = &off_24E6BD308;
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void xgboost::data::SimpleBatchIteratorImpl<xgboost::GHistIndexMatrix>::~SimpleBatchIteratorImpl(_QWORD *a1)
{
  *a1 = &off_24E6BD308;
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x227667068);
}

uint64_t xgboost::data::SimpleBatchIteratorImpl<xgboost::GHistIndexMatrix>::operator*(uint64_t a1)
{
  uint64_t result;
  std::string *Entry;
  _QWORD *v4;
  _QWORD *v5;
  char v6;

  result = *(_QWORD *)(a1 + 8);
  if (!result)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v6);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./simple_batch_iterator.h");
    v4 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v6);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: page_ != nullptr", 30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v6);
    return *(_QWORD *)(a1 + 8);
  }
  return result;
}

void sub_220F21568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

uint64_t xgboost::data::SimpleBatchIteratorImpl<xgboost::GHistIndexMatrix>::operator++(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

BOOL xgboost::data::SimpleBatchIteratorImpl<xgboost::GHistIndexMatrix>::AtEnd(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) == 0;
}

uint64_t xgboost::data::SimpleBatchIteratorImpl<xgboost::GHistIndexMatrix>::Page@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 16);
  *a2 = *(_QWORD *)(result + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

_QWORD *std::vector<unsigned long long>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<void *>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_220F21668(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t dmlc::Registry<xgboost::TreeGenReg>::~Registry(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  void **v11;

  v3 = *(_QWORD **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 != *(_QWORD *)a1)
  {
    v4 = 0;
    while (1)
    {
      v5 = v3[v4];
      if (v5)
        break;
LABEL_16:
      if (++v4 >= (unint64_t)((v2 - (uint64_t)v3) >> 3))
        goto LABEL_17;
    }
    if (*(char *)(v5 + 127) < 0)
      operator delete(*(void **)(v5 + 104));
    v6 = *(_QWORD **)(v5 + 96);
    if (v6 == (_QWORD *)(v5 + 72))
    {
      v6 = (_QWORD *)(v5 + 72);
      v7 = 4;
    }
    else
    {
      if (!v6)
      {
LABEL_11:
        v11 = (void **)(v5 + 48);
        std::vector<dmlc::ParamFieldInfo>::__destroy_vector::operator()[abi:ne180100](&v11);
        if (*(char *)(v5 + 47) < 0)
          operator delete(*(void **)(v5 + 24));
        if (*(char *)(v5 + 23) < 0)
          operator delete(*(void **)v5);
        MEMORY[0x227667068](v5, 0x1032C40EA5FD255);
        v3 = *(_QWORD **)a1;
        v2 = *(_QWORD *)(a1 + 8);
        goto LABEL_16;
      }
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
    goto LABEL_11;
  }
LABEL_17:
  std::mutex::~mutex((std::mutex *)(a1 + 72));
  std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>>>::destroy(*(char **)(a1 + 56));
  v8 = *(void **)(a1 + 24);
  if (v8)
  {
    *(_QWORD *)(a1 + 32) = v8;
    operator delete(v8);
  }
  v9 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v9;
    operator delete(v9);
  }
  return a1;
}

void xgboost::RegTree::LoadCategoricalSplit<true>(uint64_t a1, _QWORD *a2)
{
  _DWORD **v4;
  _DWORD **v5;
  _DWORD **v6;
  _QWORD *v7;
  _DWORD **v8;
  _QWORD *v9;
  unsigned int *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  signed int v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  std::string *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  int v26;
  std::vector<unsigned int>::pointer v27;
  uint64_t v28;
  _QWORD *v29;
  std::vector<unsigned int>::pointer v30;
  std::string *Entry;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  int v35;
  std::vector<unsigned int>::pointer v36;
  uint64_t v37;
  _QWORD *v38;
  std::vector<unsigned int>::pointer v39;
  std::vector<unsigned int>::pointer begin;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  std::vector<unsigned int>::pointer end;
  uint64_t *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  std::vector<unsigned int>::value_type __x[2];
  std::vector<unsigned int> __p;
  unsigned int v54;

  std::string::basic_string[abi:ne180100]<0>(&__p, "categories_segments");
  v4 = (_DWORD **)(*(uint64_t (**)(_QWORD, std::vector<unsigned int> *))(*(_QWORD *)*a2 + 24))(*a2, &__p);
  v51 = xgboost::Cast<xgboost::JsonTypedArray<long long,(xgboost::Value::ValueKind)10> const,xgboost::Value>(*v4);
  if (SHIBYTE(__p.__end_cap_.__value_) < 0)
    operator delete(__p.__begin_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "categories_sizes");
  v5 = (_DWORD **)(*(uint64_t (**)(_QWORD, std::vector<unsigned int> *))(*(_QWORD *)*a2 + 24))(*a2, &__p);
  v50 = xgboost::Cast<xgboost::JsonTypedArray<long long,(xgboost::Value::ValueKind)10> const,xgboost::Value>(*v5);
  if (SHIBYTE(__p.__end_cap_.__value_) < 0)
    operator delete(__p.__begin_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "categories_nodes");
  v6 = (_DWORD **)(*(uint64_t (**)(_QWORD, std::vector<unsigned int> *))(*(_QWORD *)*a2 + 24))(*a2, &__p);
  v7 = xgboost::Cast<xgboost::JsonTypedArray<int,(xgboost::Value::ValueKind)9> const,xgboost::Value>(*v6);
  if (SHIBYTE(__p.__end_cap_.__value_) < 0)
    operator delete(__p.__begin_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "categories");
  v8 = (_DWORD **)(*(uint64_t (**)(_QWORD, std::vector<unsigned int> *))(*(_QWORD *)*a2 + 24))(*a2, &__p);
  v9 = xgboost::Cast<xgboost::JsonTypedArray<int,(xgboost::Value::ValueKind)9> const,xgboost::Value>(*v8);
  if (SHIBYTE(__p.__end_cap_.__value_) < 0)
    operator delete(__p.__begin_);
  v10 = (unsigned int *)v7[2];
  if (v10 == (unsigned int *)v7[3])
    v11 = 0xFFFFFFFFLL;
  else
    v11 = *v10;
  v12 = *(_DWORD *)(a1 + 12);
  if (v12 >= 1)
  {
    v13 = 0;
    v14 = 0;
    while (v13 != v11)
    {
      v21 = (uint64_t *)(*(_QWORD *)(a1 + 280) + 16 * v13);
      *v21 = (uint64_t)(v9[3] - v9[2]) >> 2;
      v21[1] = 0;
LABEL_57:
      if (++v13 >= v12)
        return;
    }
    v15 = *(_QWORD *)(v51[2] + 8 * v14);
    v16 = *(_QWORD *)(v50[2] + 8 * v14);
    v17 = v16 + v15;
    *(_QWORD *)__x = v16;
    v54 = 0;
    if (v16)
    {
      if (v16 >= 1)
      {
        v18 = 0x80000000;
        v19 = v15;
        do
        {
          if (v18 <= *(_DWORD *)(v9[2] + 4 * v19))
            v18 = *(_DWORD *)(v9[2] + 4 * v19);
          ++v19;
        }
        while (v19 < v17);
        __x[0] = 0x80000000;
        v54 = v18;
        v20 = 1;
        if (v18 != 0x80000000)
        {
LABEL_44:
          __x[0] = 0;
          std::vector<unsigned int>::vector(&__p, vcvtpd_u64_f64((double)(unint64_t)(v18 + 1) * 0.03125), __x);
          begin = __p.__begin_;
          v41 = __p.__end_ - __p.__begin_;
          if (v20)
          {
            v42 = v9[2];
            do
            {
              v43 = *(int *)(v42 + 4 * v15);
              if (v41 <= v43 >> 5)
                std::terminate();
              begin[v43 >> 5] |= 1 << ~(_BYTE)v43;
              ++v15;
            }
            while (v15 < v17);
          }
          v44 = *(_QWORD *)(a1 + 264) - *(_QWORD *)(a1 + 256);
          std::vector<unsigned int>::resize((std::vector<unsigned int> *)(a1 + 256), v41 + (v44 >> 2));
          v45 = v44 >> 2;
          v46 = __p.__begin_;
          if (__p.__end_ == __p.__begin_)
          {
            end = __p.__begin_;
          }
          else
          {
            memmove((void *)(*(_QWORD *)(a1 + 256) + 4 * v45), __p.__begin_, (char *)__p.__end_ - (char *)__p.__begin_);
            v46 = __p.__begin_;
            end = __p.__end_;
          }
          v48 = (uint64_t *)(*(_QWORD *)(a1 + 280) + 16 * v13);
          *v48 = v45;
          v48[1] = end - v46;
          ++v14;
          v49 = v7[2];
          if (v14 == (v7[3] - v49) >> 2)
          {
            v11 = 0xFFFFFFFFLL;
            if (!v46)
              goto LABEL_56;
          }
          else
          {
            v11 = *(unsigned int *)(v49 + 4 * v14);
            if (!v46)
            {
LABEL_56:
              v12 = *(_DWORD *)(a1 + 12);
              goto LABEL_57;
            }
          }
          __p.__end_ = v46;
          operator delete(v46);
          goto LABEL_56;
        }
LABEL_34:
        dmlc::LogCheckFormat<int,int>((uint64_t *)&__p);
        if (__p.__begin_)
        {
          Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
          dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
          v32 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
          v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Check failed: ", 14);
          v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"std::numeric_limits<bst_cat_t>::min() != max_cat", 48);
          v35 = *((char *)__p.__begin_ + 23);
          v36 = v35 >= 0 ? __p.__begin_ : *(std::vector<unsigned int>::pointer *)__p.__begin_;
          v37 = v35 >= 0 ? *((unsigned __int8 *)__p.__begin_ + 23) : *((_QWORD *)__p.__begin_ + 1);
          v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v36, v37);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)": ", 2);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__x);
          v39 = __p.__begin_;
          __p.__begin_ = 0;
          if (v39)
            std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&__p, (uint64_t)v39);
        }
        v18 = 0x80000000;
        goto LABEL_44;
      }
    }
    else
    {
      dmlc::LogCheckFormat<long long,int>((uint64_t *)&__p);
      if (__p.__begin_)
      {
        v22 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
        dmlc::LogMessageFatal::Entry::Init(v22, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
        v23 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
        v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Check failed: ", 14);
        v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"j_end - j_begin != 0", 20);
        v26 = *((char *)__p.__begin_ + 23);
        v27 = v26 >= 0 ? __p.__begin_ : *(std::vector<unsigned int>::pointer *)__p.__begin_;
        v28 = v26 >= 0 ? *((unsigned __int8 *)__p.__begin_ + 23) : *((_QWORD *)__p.__begin_ + 1);
        v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v27, v28);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)": ", 2);
        std::ostream::operator<<();
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__x);
        v30 = __p.__begin_;
        __p.__begin_ = 0;
        if (v30)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&__p, (uint64_t)v30);
      }
    }
    v20 = 0;
    __x[0] = 0x80000000;
    v54 = 0x80000000;
    goto LABEL_34;
  }
}

{
  __ZN7xgboost7RegTree20LoadCategoricalSplitILb1EEEvRKNS_4JsonE(a1, a2);
}

void sub_220F21C1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost::RegTree::LoadCategoricalSplit<false>(uint64_t a1, _QWORD *a2)
{
  _DWORD **v4;
  _DWORD **v5;
  _DWORD **v6;
  _DWORD **v7;
  _QWORD *v8;
  _DWORD **v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  signed int v17;
  uint64_t v18;
  signed int v19;
  int v20;
  uint64_t *v21;
  std::string *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  int v26;
  std::vector<unsigned int>::pointer v27;
  uint64_t v28;
  _QWORD *v29;
  std::vector<unsigned int>::pointer v30;
  std::string *Entry;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  int v35;
  std::vector<unsigned int>::pointer v36;
  uint64_t v37;
  _QWORD *v38;
  std::vector<unsigned int>::pointer v39;
  std::vector<unsigned int>::pointer begin;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  std::vector<unsigned int>::pointer end;
  uint64_t *v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  std::vector<unsigned int> *v52;
  std::vector<unsigned int>::value_type __x[2];
  std::vector<unsigned int> __p;
  unsigned int v55;

  std::string::basic_string[abi:ne180100]<0>(&__p, "categories_segments");
  v4 = (_DWORD **)(*(uint64_t (**)(_QWORD, std::vector<unsigned int> *))(*(_QWORD *)*a2 + 24))(*a2, &__p);
  v50 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v4);
  if (SHIBYTE(__p.__end_cap_.__value_) < 0)
    operator delete(__p.__begin_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "categories_sizes");
  v5 = (_DWORD **)(*(uint64_t (**)(_QWORD, std::vector<unsigned int> *))(*(_QWORD *)*a2 + 24))(*a2, &__p);
  v49 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v5);
  if (SHIBYTE(__p.__end_cap_.__value_) < 0)
    operator delete(__p.__begin_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "categories_nodes");
  v6 = (_DWORD **)(*(uint64_t (**)(_QWORD, std::vector<unsigned int> *))(*(_QWORD *)*a2 + 24))(*a2, &__p);
  v51 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v6);
  if (SHIBYTE(__p.__end_cap_.__value_) < 0)
    operator delete(__p.__begin_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "categories");
  v7 = (_DWORD **)(*(uint64_t (**)(_QWORD, std::vector<unsigned int> *))(*(_QWORD *)*a2 + 24))(*a2, &__p);
  v8 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v7);
  if (SHIBYTE(__p.__end_cap_.__value_) < 0)
    operator delete(__p.__begin_);
  v9 = (_DWORD **)v51[2];
  if (v9 == (_DWORD **)v51[3])
    v10 = 0xFFFFFFFFLL;
  else
    v10 = *((unsigned int *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*v9) + 4);
  v11 = *(_DWORD *)(a1 + 12);
  if (v11 >= 1)
  {
    v12 = 0;
    v13 = 0;
    v52 = (std::vector<unsigned int> *)(a1 + 256);
    while (v12 != v10)
    {
      v21 = (uint64_t *)(*(_QWORD *)(a1 + 280) + 16 * v12);
      *v21 = (uint64_t)(v8[3] - v8[2]) >> 3;
      v21[1] = 0;
LABEL_55:
      if (++v12 >= v11)
        return;
    }
    v14 = *((_QWORD *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*(_DWORD **)(v50[2] + 8 * v13)) + 2);
    v15 = *((_QWORD *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*(_DWORD **)(v49[2] + 8 * v13)) + 2);
    v16 = v15 + v14;
    *(_QWORD *)__x = v15;
    v55 = 0;
    if (v15)
    {
      if (v15 >= 1)
      {
        v17 = 0x80000000;
        v18 = v14;
        do
        {
          v19 = *((_DWORD *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*(_DWORD **)(v8[2] + 8 * v18))
                + 4);
          if (v17 <= v19)
            v17 = v19;
          ++v18;
        }
        while (v18 < v16);
        __x[0] = 0x80000000;
        v55 = v17;
        v20 = 1;
        if (v17 != 0x80000000)
        {
LABEL_44:
          __x[0] = 0;
          std::vector<unsigned int>::vector(&__p, vcvtpd_u64_f64((double)(unint64_t)(v17 + 1) * 0.03125), __x);
          begin = __p.__begin_;
          v41 = __p.__end_ - __p.__begin_;
          if (v20)
          {
            do
            {
              v42 = *((_QWORD *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*(_DWORD **)(v8[2] + 8 * v14))
                    + 2);
              if (v41 <= (unint64_t)(int)v42 >> 5)
                std::terminate();
              begin[(unint64_t)(int)v42 >> 5] |= 1 << ~(_BYTE)v42;
              ++v14;
            }
            while (v14 < v16);
            v41 = __p.__end_ - __p.__begin_;
          }
          v43 = *(_QWORD *)(a1 + 264) - *(_QWORD *)(a1 + 256);
          std::vector<unsigned int>::resize(v52, v41 + (v43 >> 2));
          v44 = v43 >> 2;
          v45 = __p.__begin_;
          if (__p.__end_ == __p.__begin_)
          {
            end = __p.__begin_;
          }
          else
          {
            memmove(&v52->__begin_[v44], __p.__begin_, (char *)__p.__end_ - (char *)__p.__begin_);
            v45 = __p.__begin_;
            end = __p.__end_;
          }
          v47 = (uint64_t *)(*(_QWORD *)(a1 + 280) + 16 * v12);
          *v47 = v44;
          v47[1] = end - v45;
          ++v13;
          v48 = v51[2];
          if (v13 == (v51[3] - v48) >> 3)
          {
            v10 = 0xFFFFFFFFLL;
            if (!v45)
            {
LABEL_54:
              v11 = *(_DWORD *)(a1 + 12);
              goto LABEL_55;
            }
          }
          else
          {
            v10 = *((unsigned int *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*(_DWORD **)(v48 + 8 * v13))
                  + 4);
            v45 = __p.__begin_;
            if (!__p.__begin_)
              goto LABEL_54;
          }
          __p.__end_ = v45;
          operator delete(v45);
          goto LABEL_54;
        }
LABEL_34:
        dmlc::LogCheckFormat<int,int>((uint64_t *)&__p);
        if (__p.__begin_)
        {
          Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
          dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
          v32 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
          v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Check failed: ", 14);
          v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"std::numeric_limits<bst_cat_t>::min() != max_cat", 48);
          v35 = *((char *)__p.__begin_ + 23);
          v36 = v35 >= 0 ? __p.__begin_ : *(std::vector<unsigned int>::pointer *)__p.__begin_;
          v37 = v35 >= 0 ? *((unsigned __int8 *)__p.__begin_ + 23) : *((_QWORD *)__p.__begin_ + 1);
          v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v36, v37);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)": ", 2);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__x);
          v39 = __p.__begin_;
          __p.__begin_ = 0;
          if (v39)
            std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&__p, (uint64_t)v39);
        }
        v17 = 0x80000000;
        goto LABEL_44;
      }
    }
    else
    {
      dmlc::LogCheckFormat<long long,int>((uint64_t *)&__p);
      if (__p.__begin_)
      {
        v22 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
        dmlc::LogMessageFatal::Entry::Init(v22, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
        v23 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
        v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Check failed: ", 14);
        v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"j_end - j_begin != 0", 20);
        v26 = *((char *)__p.__begin_ + 23);
        v27 = v26 >= 0 ? __p.__begin_ : *(std::vector<unsigned int>::pointer *)__p.__begin_;
        v28 = v26 >= 0 ? *((unsigned __int8 *)__p.__begin_ + 23) : *((_QWORD *)__p.__begin_ + 1);
        v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v27, v28);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)": ", 2);
        std::ostream::operator<<();
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__x);
        v30 = __p.__begin_;
        __p.__begin_ = 0;
        if (v30)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&__p, (uint64_t)v30);
      }
    }
    v20 = 0;
    __x[0] = 0x80000000;
    v55 = 0x80000000;
    goto LABEL_34;
  }
}

{
  __ZN7xgboost7RegTree20LoadCategoricalSplitILb0EEEvRKNS_4JsonE(a1, a2);
}

void sub_220F22170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::TreeGenerator::Create(uint64_t a1, uint64_t a2, std::string::value_type a3)
{
  std::string::size_type v6;
  std::string::size_type v7;
  uint64_t v8;
  std::string::size_type v9;
  uint64_t v10;
  uint64_t *v11;
  _BOOL4 v12;
  uint64_t *v13;
  uint64_t v14;
  std::string *Entry;
  _QWORD *v16;
  _QWORD *v17;
  std::string *p_p;
  std::string::size_type size;
  uint64_t v20;
  uint64_t v21;
  std::string v23;
  std::string v24;
  std::string i;
  std::string __p;
  char v27;

  v6 = std::string::find((const std::string *)a1, 58, 0);
  memset(&__p, 0, sizeof(__p));
  memset(&i, 0, sizeof(i));
  if (v6 == -1)
  {
    std::string::operator=(&__p, (const std::string *)a1);
  }
  else
  {
    v7 = v6;
    std::string::basic_string(&v24, (const std::string *)a1, 0, v6, (std::allocator<char> *)&v27);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v24;
    v8 = *(unsigned __int8 *)(a1 + 23);
    if ((v8 & 0x80u) != 0)
      v8 = *(_QWORD *)(a1 + 8);
    std::string::basic_string(&v24, (const std::string *)a1, v7 + 1, v8 + ~v7, (std::allocator<char> *)&v27);
    if (SHIBYTE(i.__r_.__value_.__r.__words[2]) < 0)
      operator delete(i.__r_.__value_.__l.__data_);
    for (i = v24; ; std::string::replace(&i, v9, 1uLL, "\""))
    {
      v9 = std::string::find(&i, 39, 0);
      if (v9 == -1)
        break;
    }
  }
  dmlc::Registry<xgboost::TreeGenReg>::Get();
  dmlc::Registry<xgboost::TreeGenReg>::Get();
  v10 = qword_253F37050;
  if (!qword_253F37050)
    goto LABEL_20;
  v11 = &qword_253F37050;
  do
  {
    v12 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_253F37058, (const void **)(v10 + 32), (const void **)&__p.__r_.__value_.__l.__data_);
    v13 = (uint64_t *)(v10 + 8);
    if (!v12)
    {
      v13 = (uint64_t *)v10;
      v11 = (uint64_t *)v10;
    }
    v10 = *v13;
  }
  while (*v13);
  if (v11 == &qword_253F37050
    || std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_253F37058, (const void **)&__p.__r_.__value_.__l.__data_, (const void **)v11 + 4)|| (v14 = v11[7]) == 0)
  {
LABEL_20:
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v24);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
    v16 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v24);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Unknown Model Builder:", 22);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)p_p, size);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v24);
    v14 = 0;
  }
  if (SHIBYTE(i.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v23, i.__r_.__value_.__l.__data_, i.__r_.__value_.__l.__size_);
  else
    v23 = i;
  v24.__r_.__value_.__s.__data_[0] = a3;
  v20 = *(_QWORD *)(v14 + 96);
  if (!v20)
    std::__throw_bad_function_call[abi:ne180100]();
  v21 = (*(uint64_t (**)(uint64_t, uint64_t, std::string *, std::string *))(*(_QWORD *)v20 + 48))(v20, a2, &v23, &v24);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(i.__r_.__value_.__r.__words[2]) < 0)
    operator delete(i.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v21;
}

void sub_220F22484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a23 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

void xgboost::GetSplitCategories(xgboost *this@<X0>, const xgboost::RegTree *a2@<X1>, char **a3@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;
  unint64_t v21[4];
  _QWORD v22[2];
  unint64_t v23;
  uint64_t v24;

  v4 = *((_QWORD *)this + 29);
  v21[2] = *((_QWORD *)this + 30) - v4;
  v21[3] = v4;
  v5 = *((_QWORD *)this + 32);
  v22[0] = (*((_QWORD *)this + 33) - v5) >> 2;
  v22[1] = v5;
  v6 = *((_QWORD *)this + 35);
  v23 = (*((_QWORD *)this + 36) - v6) >> 4;
  v24 = v6;
  if (v23 <= (int)a2)
    goto LABEL_25;
  xgboost::common::Span<float,18446744073709551615ul>::subspan(v22, *(_QWORD *)(v6 + 16 * (int)a2), *(_QWORD *)(v6 + 16 * (int)a2 + 8), v21);
  v7 = v21[0];
  v8 = v21[1];
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (32 * v7)
  {
    v9 = 0;
    v10 = 0;
    v11 = a3 + 2;
    while (v10 >> 5 < v7)
    {
      if ((*(_DWORD *)(v8 + 4 * (v10 >> 5)) & (1 << ~(_BYTE)v10)) != 0)
      {
        if ((unint64_t)v9 >= *v11)
        {
          v13 = *a3;
          v14 = (v9 - *a3) >> 2;
          v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 62)
            std::vector<xgboost::TreeUpdaterReg const*>::__throw_length_error[abi:ne180100]();
          v16 = *v11 - (_QWORD)v13;
          if (v16 >> 1 > v15)
            v15 = v16 >> 1;
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
            v17 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v17 = v15;
          if (v17)
          {
            v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a3 + 2), v17);
            v13 = *a3;
            v9 = a3[1];
          }
          else
          {
            v18 = 0;
          }
          v19 = &v18[4 * v14];
          *(_DWORD *)v19 = v10;
          v12 = v19 + 4;
          while (v9 != v13)
          {
            v20 = *((_DWORD *)v9 - 1);
            v9 -= 4;
            *((_DWORD *)v19 - 1) = v20;
            v19 -= 4;
          }
          *a3 = v19;
          a3[1] = v12;
          a3[2] = &v18[4 * v17];
          if (v13)
            operator delete(v13);
        }
        else
        {
          *(_DWORD *)v9 = v10;
          v12 = v9 + 4;
        }
        a3[1] = v12;
        v9 = v12;
      }
      if (++v10 == 32 * v7)
        return;
    }
LABEL_25:
    std::terminate();
  }
}

void sub_220F2268C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::PrintCatsAsSet(_QWORD *a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[11];
  char v8;
  uint64_t v9;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"{", 1);
  if (a1[1] != *a1)
  {
    v2 = 0;
    do
    {
      std::ostream::operator<<();
      v3 = (uint64_t)(a1[1] - *a1) >> 2;
      if (v2 != v3 - 1)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)",", 1);
        v3 = (uint64_t)(a1[1] - *a1) >> 2;
      }
      ++v2;
    }
    while (v2 < v3);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"}", 1);
  std::stringbuf::str();
  v6[0] = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v7[0] = v4;
  v7[1] = MEMORY[0x24BEDB848] + 16;
  if (v8 < 0)
    operator delete((void *)v7[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x227666FE4](&v9);
}

void sub_220F227F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t xgboost::RegTree::DumpModel(uint64_t a1, uint64_t a2, std::string::value_type a3, uint64_t a4)
{
  uint64_t v5;

  v5 = xgboost::TreeGenerator::Create(a4, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 88))(v5, a1);
  std::stringbuf::str();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 80))(v5);
}

void sub_220F22868(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 80))(v1);
  _Unwind_Resume(a1);
}

uint64_t xgboost::RegTree::Equal(xgboost::RegTree *this, const xgboost::RegTree *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int v11;
  uint64_t v12;
  int *v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v20;
  int v21;
  _OWORD v22[2];
  __int128 v23;

  if (*((_DWORD *)this + 3) + ~*((_DWORD *)this + 4) != *((_DWORD *)a2 + 3) + ~*((_DWORD *)a2 + 4))
    return 0;
  v23 = 0u;
  memset(v22, 0, sizeof(v22));
  std::deque<int>::push_back(v22, &xgboost::RegTree::kRoot);
  v4 = *((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    while (1)
    {
      v5 = v4 - 1;
      v6 = *(int *)(*(_QWORD *)(*((_QWORD *)&v22[0] + 1) + (((unint64_t)(v23 + v5) >> 7) & 0x1FFFFFFFFFFFFF8))
                  + 4 * ((v23 + v5) & 0x3FF));
      *((_QWORD *)&v23 + 1) = v5;
      std::deque<int>::__maybe_remove_back_spare[abi:ne180100](v22, 1);
      v7 = *((_QWORD *)this + 20);
      if (0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 21) - v7) >> 2) <= v6
        || (v8 = *((_QWORD *)a2 + 20), 0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)a2 + 21) - v8) >> 2) <= v6))
      {
        std::vector<xgboost::FeatureType>::__throw_out_of_range[abi:ne180100]();
      }
      if (*(_DWORD *)(v7 + 20 * v6) != *(_DWORD *)(v8 + 20 * v6))
        break;
      v9 = v7 + 20 * v6;
      v11 = *(_DWORD *)(v9 + 4);
      v10 = (int *)(v9 + 4);
      if (v11 != *(_DWORD *)(v8 + 20 * v6 + 4))
        break;
      v12 = v7 + 20 * v6;
      v14 = *(_DWORD *)(v12 + 8);
      v13 = (int *)(v12 + 8);
      v15 = v8 + 20 * v6;
      if (v14 != *(_DWORD *)(v15 + 8)
        || *(_DWORD *)(v7 + 20 * v6 + 12) != *(_DWORD *)(v15 + 12)
        || *(float *)(v7 + 20 * v6 + 16) != *(float *)(v8 + 20 * v6 + 16))
      {
        break;
      }
      v21 = 0;
      v16 = *v10;
      v20 = 0;
      v21 = v16;
      v17 = *v13;
      v20 = *v13;
      if (v16 != -1)
      {
        std::deque<int>::push_back(v22, &v21);
        v17 = v20;
      }
      if (v17 != -1)
        std::deque<int>::push_back(v22, &v20);
      v4 = *((_QWORD *)&v23 + 1);
      if (!*((_QWORD *)&v23 + 1))
        goto LABEL_15;
    }
    v18 = 0;
  }
  else
  {
LABEL_15:
    v18 = 1;
  }
  std::deque<int>::~deque[abi:ne180100](v22);
  return v18;
}

void sub_220F22A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::deque<int>::~deque[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t xgboost::RegTree::GetNumLeaves(xgboost::RegTree *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v10;
  int v11;
  _OWORD v12[2];
  __int128 v13;

  v13 = 0u;
  memset(v12, 0, sizeof(v12));
  std::deque<int>::push_back(v12, &xgboost::RegTree::kRoot);
  v2 = *((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    LODWORD(v3) = 0;
    do
    {
      v4 = v2 - 1;
      v5 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)&v12[0] + 1) + (((unint64_t)(v13 + v4) >> 7) & 0x1FFFFFFFFFFFFF8))
                     + 4 * ((v13 + v4) & 0x3FF));
      *((_QWORD *)&v13 + 1) = v4;
      std::deque<int>::__maybe_remove_back_spare[abi:ne180100](v12, 1);
      v6 = *((_QWORD *)this + 20) + 20 * v5;
      if (*(_DWORD *)(v6 + 4) == -1)
        v3 = (v3 + 1);
      else
        v3 = v3;
      v11 = 0;
      v7 = *(_DWORD *)(v6 + 4);
      v10 = 0;
      v11 = v7;
      v8 = *(_DWORD *)(v6 + 8);
      v10 = v8;
      if (v7 != -1)
      {
        std::deque<int>::push_back(v12, &v11);
        v8 = v10;
      }
      if (v8 != -1)
        std::deque<int>::push_back(v12, &v10);
      v2 = *((_QWORD *)&v13 + 1);
    }
    while (*((_QWORD *)&v13 + 1));
  }
  else
  {
    v3 = 0;
  }
  std::deque<int>::~deque[abi:ne180100](v12);
  return v3;
}

void sub_220F22B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::deque<int>::~deque[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t xgboost::RegTree::GetNumSplitNodes(xgboost::RegTree *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v10;
  int v11;
  _OWORD v12[2];
  __int128 v13;

  v13 = 0u;
  memset(v12, 0, sizeof(v12));
  std::deque<int>::push_back(v12, &xgboost::RegTree::kRoot);
  v2 = *((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    LODWORD(v3) = 0;
    do
    {
      v4 = v2 - 1;
      v5 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)&v12[0] + 1) + (((unint64_t)(v13 + v4) >> 7) & 0x1FFFFFFFFFFFFF8))
                     + 4 * ((v13 + v4) & 0x3FF));
      *((_QWORD *)&v13 + 1) = v4;
      std::deque<int>::__maybe_remove_back_spare[abi:ne180100](v12, 1);
      v6 = *((_QWORD *)this + 20) + 20 * v5;
      if (*(_DWORD *)(v6 + 4) == -1)
        v3 = v3;
      else
        v3 = (v3 + 1);
      v11 = 0;
      v7 = *(_DWORD *)(v6 + 4);
      v10 = 0;
      v11 = v7;
      v8 = *(_DWORD *)(v6 + 8);
      v10 = v8;
      if (v7 != -1)
      {
        std::deque<int>::push_back(v12, &v11);
        v8 = v10;
      }
      if (v8 != -1)
        std::deque<int>::push_back(v12, &v10);
      v2 = *((_QWORD *)&v13 + 1);
    }
    while (*((_QWORD *)&v13 + 1));
  }
  else
  {
    v3 = 0;
  }
  std::deque<int>::~deque[abi:ne180100](v12);
  return v3;
}

void sub_220F22C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::deque<int>::~deque[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void xgboost::RegTree::ExpandNode(xgboost::RegTree *this, int a2, unsigned int a3, float a4, int a5, float a6, float a7, float a8, float a9, float a10, float a11, float a12, int a13)
{
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::string *Entry;
  _QWORD *v45;
  _QWORD *v46;
  char v47;

  v26 = xgboost::RegTree::AllocNode(this);
  v27 = xgboost::RegTree::AllocNode(this);
  v28 = *((_QWORD *)this + 20);
  v29 = v28 + 20 * a2;
  v31 = *(_DWORD *)(v29 + 4);
  v30 = (_DWORD *)(v29 + 4);
  v32 = v28;
  if (v31 != -1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v47);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
    v45 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v47);
    v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Check failed: node.IsLeaf()", 27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v47);
    v32 = *((_QWORD *)this + 20);
  }
  *v30 = v26;
  v33 = v28 + 20 * a2;
  *(_DWORD *)(v32 + 20 * v26) = a2 | 0x80000000;
  *(_DWORD *)(v32 + 20 * v27) = a2;
  v34 = a3 | 0x80000000;
  if (!a5)
    v34 = a3;
  *(_DWORD *)(v33 + 8) = v27;
  *(_DWORD *)(v33 + 12) = v34;
  *(float *)(v33 + 16) = a4;
  v35 = *((_QWORD *)this + 20) + 20 * v26;
  *(float *)(v35 + 16) = a7;
  *(_DWORD *)(v35 + 4) = -1;
  *(_DWORD *)(v35 + 8) = a13;
  v36 = *((_QWORD *)this + 20) + 20 * v27;
  *(float *)(v36 + 16) = a8;
  *(_DWORD *)(v36 + 4) = -1;
  *(_DWORD *)(v36 + 8) = a13;
  v39 = *((_QWORD *)this + 29);
  v38 = (char *)this + 232;
  v37 = v39;
  v40 = *((_QWORD *)v38 - 3);
  v41 = v40 + 16 * a2;
  *(float *)v41 = a9;
  *(float *)(v41 + 4) = a10;
  *(float *)(v41 + 8) = a6;
  *(_DWORD *)(v41 + 12) = 0;
  v42 = v40 + 16 * v26;
  *(_DWORD *)v42 = 0;
  *(float *)(v42 + 4) = a11;
  *(float *)(v42 + 8) = a7;
  *(_DWORD *)(v42 + 12) = 0;
  v43 = v40 + 16 * v27;
  *(_DWORD *)v43 = 0;
  *(float *)(v43 + 4) = a12;
  *(float *)(v43 + 8) = a8;
  *(_DWORD *)(v43 + 12) = 0;
  if (*((_QWORD *)v38 + 1) - v39 <= (unint64_t)a2)
    std::vector<xgboost::FeatureType>::__throw_out_of_range[abi:ne180100]();
  *(_BYTE *)(v37 + a2) = 0;
}

void sub_220F22E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

uint64_t xgboost::RegTree::AllocNode(xgboost::RegTree *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  std::string *Entry;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v22;
  int v23;
  int v24;

  v2 = *((_DWORD *)this + 4);
  if (v2)
  {
    v3 = *((_QWORD *)this + 24);
    v4 = *(int *)(v3 - 4);
    *((_QWORD *)this + 24) = v3 - 4;
    *(_DWORD *)(*((_QWORD *)this + 20) + 20 * (int)v4 + 12) = 0;
    *((_DWORD *)this + 4) = v2 - 1;
  }
  else
  {
    v4 = *((unsigned int *)this + 3);
    *((_DWORD *)this + 3) = v4 + 1;
    v23 = 0x7FFFFFFF;
    v24 = v4 + 1;
    if ((_DWORD)v4 == 2147483646)
    {
      dmlc::LogCheckFormat<int,int>(&v22);
      if (v22)
      {
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v24);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/tree_model.h");
        v6 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v24);
        v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: ", 14);
        v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"param.num_nodes < std::numeric_limits<int>::max()", 49);
        v9 = *(char *)(v22 + 23);
        v10 = v9 >= 0 ? v22 : *(_QWORD *)v22;
        v11 = v9 >= 0 ? *(unsigned __int8 *)(v22 + 23) : *(_QWORD *)(v22 + 8);
        v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
        v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"number of nodes in the tree exceed 2^31", 39);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v24);
        v14 = v22;
        v22 = 0;
        if (v14)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v22, v14);
      }
    }
    std::vector<xgboost::RegTree::Node>::resize((uint64_t)this + 160, *((int *)this + 3));
    std::vector<xgboost::RTreeNodeStat>::resize((uint64_t)this + 208, *((int *)this + 3));
    v15 = *((int *)this + 3);
    v17 = *((_QWORD *)this + 29);
    v16 = *((_QWORD *)this + 30);
    LOBYTE(v22) = 0;
    v18 = v16 - v17;
    v19 = v15 >= v18;
    v20 = v15 - v18;
    if (v20 != 0 && v19)
    {
      std::vector<xgboost::FeatureType>::__append((unint64_t *)this + 29, v20, &v22);
      v15 = *((int *)this + 3);
    }
    else if (!v19)
    {
      *((_QWORD *)this + 30) = v17 + v15;
    }
    std::vector<xgboost::RTreeNodeStat>::resize((uint64_t)this + 280, v15);
  }
  return v4;
}

void sub_220F23004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11)
{
  uint64_t v12;

  v12 = a9;
  a9 = 0;
  if (v12)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a9, v12);
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::RegTree::ExpandCategorical(uint64_t a1, int a2, unsigned int a3, uint64_t a4, int a5, float a6, float a7, float a8, float a9, float a10, float a11, float a12)
{
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;

  xgboost::RegTree::ExpandNode((xgboost::RegTree *)a1, a2, a3, NAN, a5, a6, a7, a8, a9, a10, a11, a12, -1);
  v15 = (uint64_t)(*(_QWORD *)(a1 + 264) - *(_QWORD *)(a1 + 256)) >> 2;
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)(a1 + 256), *(_QWORD *)a4 + v15);
  if (*(_QWORD *)a4)
    memmove((void *)(*(_QWORD *)(a1 + 256) + 4 * v15), *(const void **)(a4 + 8), 4 * *(_QWORD *)a4);
  v17 = *(_QWORD *)(a1 + 232);
  result = a1 + 232;
  if (*(_QWORD *)(a1 + 240) - v17 <= (unint64_t)a2)
    std::vector<xgboost::FeatureType>::__throw_out_of_range[abi:ne180100]();
  *(_BYTE *)(v17 + a2) = 1;
  v18 = *(_QWORD *)(a1 + 280);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 288) - v18) >> 4))
    std::vector<xgboost::FeatureType>::__throw_out_of_range[abi:ne180100]();
  v19 = *(_QWORD *)a4;
  v20 = (uint64_t *)(v18 + 16 * a2);
  *v20 = v15;
  v20[1] = v19;
  return result;
}

void xgboost::RegTree::Load(uint64_t a1, uint64_t (***a2)(_QWORD, uint64_t, uint64_t))
{
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::string *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::string *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  void **v39;
  int v40;
  uint64_t i;
  unint64_t v42;
  char *v43;
  _DWORD *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  int v52;
  int v53;
  std::string *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  BOOL v67;
  unint64_t v68;
  std::string *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v80 = (**a2)(a2, a1 + 8, 148);
  if (v80 != 148)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v81);
    if (v81)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v80);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
      v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v80);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: ", 14);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"fi->Read(&param, sizeof(TreeParam)) == sizeof(TreeParam)", 56);
      v8 = *(char *)(v81 + 23);
      v9 = v8 >= 0 ? v81 : *(_QWORD *)v81;
      v10 = v8 >= 0 ? *(unsigned __int8 *)(v81 + 23) : *(_QWORD *)(v81 + 8);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v80);
      v12 = v81;
      v81 = 0;
      if (v12)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v81, v12);
    }
  }
  std::vector<xgboost::RegTree::Node>::resize(a1 + 160, *(int *)(a1 + 12));
  std::vector<xgboost::RTreeNodeStat>::resize(a1 + 208, *(int *)(a1 + 12));
  LODWORD(v80) = *(_DWORD *)(a1 + 12);
  if (!(_DWORD)v80)
  {
    dmlc::LogCheckFormat<int,int>(&v81);
    if (v81)
    {
      v69 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v80);
      dmlc::LogMessageFatal::Entry::Init(v69, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
      v70 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v80);
      v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"Check failed: ", 14);
      v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)"param.num_nodes != 0", 20);
      v73 = *(char *)(v81 + 23);
      v74 = v73 >= 0 ? v81 : *(_QWORD *)v81;
      v75 = v73 >= 0 ? *(unsigned __int8 *)(v81 + 23) : *(_QWORD *)(v81 + 8);
      v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, v74, v75);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v80);
      v77 = v81;
      v81 = 0;
      if (v77)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v81, v77);
    }
  }
  v14 = *(_QWORD *)(a1 + 160);
  v13 = *(_QWORD *)(a1 + 168);
  if (v13 == v14)
    v15 = 0;
  else
    v15 = *(_QWORD *)(a1 + 160);
  v16 = (**a2)(a2, v15, v13 - v14);
  v78 = *(_QWORD *)(a1 + 168) - *(_QWORD *)(a1 + 160);
  v80 = v16;
  if (v16 != v78)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v81);
    if (v81)
    {
      v17 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v80);
      dmlc::LogMessageFatal::Entry::Init(v17, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
      v18 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v80);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Check failed: ", 14);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"fi->Read(dmlc::BeginPtr(nodes_), sizeof(Node) * nodes_.size()) == sizeof(Node) * nodes_.size()", 94);
      v21 = *(char *)(v81 + 23);
      v22 = v21 >= 0 ? v81 : *(_QWORD *)v81;
      v23 = v21 >= 0 ? *(unsigned __int8 *)(v81 + 23) : *(_QWORD *)(v81 + 8);
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v80);
      v25 = v81;
      v81 = 0;
      if (v25)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v81, v25);
    }
  }
  v27 = *(_QWORD *)(a1 + 208);
  v26 = *(_QWORD *)(a1 + 216);
  if (v26 == v27)
    v28 = 0;
  else
    v28 = *(_QWORD *)(a1 + 208);
  v29 = (**a2)(a2, v28, v26 - v27);
  v79 = *(_QWORD *)(a1 + 216) - *(_QWORD *)(a1 + 208);
  v80 = v29;
  if (v29 != v79)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v81);
    if (v81)
    {
      v30 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v80);
      dmlc::LogMessageFatal::Entry::Init(v30, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
      v31 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v80);
      v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Check failed: ", 14);
      v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"fi->Read(dmlc::BeginPtr(stats_), sizeof(RTreeNodeStat) * stats_.size()) == sizeof(RTreeNodeStat) * stats_.size()", 112);
      v34 = *(char *)(v81 + 23);
      v35 = v34 >= 0 ? v81 : *(_QWORD *)v81;
      v36 = v34 >= 0 ? *(unsigned __int8 *)(v81 + 23) : *(_QWORD *)(v81 + 8);
      v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, v35, v36);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v80);
      v38 = v81;
      v81 = 0;
      if (v38)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v81, v38);
    }
  }
  v39 = (void **)(a1 + 184);
  std::vector<int>::resize((std::vector<int> *)(a1 + 184), 0);
  v40 = *(_DWORD *)(a1 + 12);
  if (v40 >= 2)
  {
    for (i = 1; i < v40; ++i)
    {
      if (*(_DWORD *)(*(_QWORD *)(a1 + 160) + 20 * i + 12) == -1)
      {
        v43 = *(char **)(a1 + 192);
        v42 = *(_QWORD *)(a1 + 200);
        if ((unint64_t)v43 >= v42)
        {
          v45 = (char *)*v39;
          v46 = (v43 - (_BYTE *)*v39) >> 2;
          v47 = v46 + 1;
          if ((unint64_t)(v46 + 1) >> 62)
            std::vector<xgboost::TreeUpdaterReg const*>::__throw_length_error[abi:ne180100]();
          v48 = v42 - (_QWORD)v45;
          if (v48 >> 1 > v47)
            v47 = v48 >> 1;
          if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL)
            v49 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v49 = v47;
          if (v49)
          {
            v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 200, v49);
            v45 = *(char **)(a1 + 184);
            v43 = *(char **)(a1 + 192);
          }
          else
          {
            v50 = 0;
          }
          v51 = &v50[4 * v46];
          *(_DWORD *)v51 = i;
          v44 = v51 + 4;
          while (v43 != v45)
          {
            v52 = *((_DWORD *)v43 - 1);
            v43 -= 4;
            *((_DWORD *)v51 - 1) = v52;
            v51 -= 4;
          }
          *(_QWORD *)(a1 + 184) = v51;
          *(_QWORD *)(a1 + 192) = v44;
          *(_QWORD *)(a1 + 200) = &v50[4 * v49];
          if (v45)
            operator delete(v45);
        }
        else
        {
          *(_DWORD *)v43 = i;
          v44 = v43 + 4;
        }
        *(_QWORD *)(a1 + 192) = v44;
        v40 = *(_DWORD *)(a1 + 12);
      }
    }
  }
  v53 = *(_DWORD *)(a1 + 16);
  LODWORD(v80) = (*(_QWORD *)(a1 + 192) - *(_QWORD *)(a1 + 184)) >> 2;
  if (v53 != (_DWORD)v80)
  {
    dmlc::LogCheckFormat<int,int>(&v81);
    if (v81)
    {
      v54 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v80);
      dmlc::LogMessageFatal::Entry::Init(v54, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
      v55 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v80);
      v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"Check failed: ", 14);
      v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"static_cast<int>(deleted_nodes_.size()) == param.num_deleted", 60);
      v58 = *(char *)(v81 + 23);
      v59 = v58 >= 0 ? v81 : *(_QWORD *)v81;
      v60 = v58 >= 0 ? *(unsigned __int8 *)(v81 + 23) : *(_QWORD *)(v81 + 8);
      v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, v59, v60);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v80);
      v62 = v81;
      v81 = 0;
      if (v62)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v81, v62);
    }
  }
  v63 = *(int *)(a1 + 12);
  v65 = *(_QWORD *)(a1 + 232);
  v64 = *(_QWORD *)(a1 + 240);
  LOBYTE(v81) = 0;
  v66 = v64 - v65;
  v67 = v63 >= v66;
  v68 = v63 - v66;
  if (v68 != 0 && v67)
  {
    std::vector<xgboost::FeatureType>::__append((unint64_t *)(a1 + 232), v68, &v81);
    v63 = *(int *)(a1 + 12);
  }
  else if (!v67)
  {
    *(_QWORD *)(a1 + 240) = v65 + v63;
  }
  std::vector<xgboost::RTreeNodeStat>::resize(a1 + 280, v63);
}

void sub_220F236B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

void sub_220F236E0(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x220F236C4);
}

void sub_220F236F0(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x220F236C4);
}

void sub_220F23700(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x220F236C4);
}

void sub_220F23710(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x220F236C4);
}

void sub_220F23720(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x220F236C4);
}

uint64_t xgboost::RegTree::Save(uint64_t a1, uint64_t a2)
{
  int v4;
  std::string *Entry;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  std::string *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  std::string *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::string *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  std::string *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  int v54;
  int v55;

  v4 = *(_DWORD *)(a1 + 12);
  v54 = -858993459 * ((*(_QWORD *)(a1 + 168) - *(_QWORD *)(a1 + 160)) >> 2);
  v55 = v4;
  if (v4 != v54)
  {
    dmlc::LogCheckFormat<int,int>(&v53);
    if (v53)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v55);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
      v6 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v55);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: ", 14);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"param.num_nodes == static_cast<int>(nodes_.size())", 50);
      v9 = *(char *)(v53 + 23);
      v10 = v9 >= 0 ? v53 : *(_QWORD *)v53;
      v11 = v9 >= 0 ? *(unsigned __int8 *)(v53 + 23) : *(_QWORD *)(v53 + 8);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v55);
      v13 = v53;
      v53 = 0;
      if (v13)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v53, v13);
    }
  }
  v14 = *(_DWORD *)(a1 + 12);
  v54 = (*(_QWORD *)(a1 + 216) - *(_QWORD *)(a1 + 208)) >> 4;
  v55 = v14;
  if (v14 != v54)
  {
    dmlc::LogCheckFormat<int,int>(&v53);
    if (v53)
    {
      v15 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v55);
      dmlc::LogMessageFatal::Entry::Init(v15, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
      v16 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v55);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Check failed: ", 14);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"param.num_nodes == static_cast<int>(stats_.size())", 50);
      v19 = *(char *)(v53 + 23);
      v20 = v19 >= 0 ? v53 : *(_QWORD *)v53;
      v21 = v19 >= 0 ? *(unsigned __int8 *)(v53 + 23) : *(_QWORD *)(v53 + 8);
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v55);
      v23 = v53;
      v53 = 0;
      if (v23)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v53, v23);
    }
  }
  v24 = *(_DWORD *)(a1 + 8);
  v54 = 1;
  v55 = v24;
  if (v24 != 1)
  {
    dmlc::LogCheckFormat<int,int>(&v53);
    if (v53)
    {
      v25 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v55);
      dmlc::LogMessageFatal::Entry::Init(v25, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
      v26 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v55);
      v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Check failed: ", 14);
      v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"param.deprecated_num_roots == 1", 31);
      v29 = *(char *)(v53 + 23);
      v30 = v29 >= 0 ? v53 : *(_QWORD *)v53;
      v31 = v29 >= 0 ? *(unsigned __int8 *)(v53 + 23) : *(_QWORD *)(v53 + 8);
      v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, v30, v31);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v55);
      v33 = v53;
      v53 = 0;
      if (v33)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v53, v33);
    }
  }
  v34 = *(_DWORD *)(a1 + 12);
  v54 = 0;
  v55 = v34;
  if (!v34)
  {
    dmlc::LogCheckFormat<int,int>(&v53);
    if (v53)
    {
      v40 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v55);
      dmlc::LogMessageFatal::Entry::Init(v40, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
      v41 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v55);
      v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"Check failed: ", 14);
      v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"param.num_nodes != 0", 20);
      v44 = *(char *)(v53 + 23);
      v45 = v44 >= 0 ? v53 : *(_QWORD *)v53;
      v46 = v44 >= 0 ? *(unsigned __int8 *)(v53 + 23) : *(_QWORD *)(v53 + 8);
      v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, v45, v46);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v55);
      v48 = v53;
      v53 = 0;
      if (v48)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v53, v48);
    }
  }
  if (*(_QWORD *)(a1 + 256) != *(_QWORD *)(a1 + 264))
  {
    v49 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v53);
    dmlc::LogMessageFatal::Entry::Init(v49, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
    v50 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v53);
    v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"Check failed: !HasCategoricalSplit()", 36);
    v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"Please use JSON/UBJSON for saving models with categorical splits.", 65);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v53);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 8))(a2, a1 + 8, 148);
  v36 = *(_QWORD *)(a1 + 160);
  v35 = *(_QWORD *)(a1 + 168);
  if (v35 == v36)
    v37 = 0;
  else
    v37 = *(_QWORD *)(a1 + 160);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 8))(a2, v37, v35 - v36);
  if (*(_QWORD *)(a1 + 216) == *(_QWORD *)(a1 + 208))
    v38 = 0;
  else
    v38 = *(_QWORD *)(a1 + 208);
  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)a2 + 8))(a2, v38, 0xCCCCCCCCCCCCCCD0 * ((*(_QWORD *)(a1 + 168) - *(_QWORD *)(a1 + 160)) >> 2));
}

void sub_220F23B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a9);
  _Unwind_Resume(a1);
}

void sub_220F23B6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a11);
  JUMPOUT(0x220F23B50);
}

void sub_220F23B7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a11);
  JUMPOUT(0x220F23B50);
}

void sub_220F23B8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a11);
  JUMPOUT(0x220F23B50);
}

void sub_220F23B9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a11);
  JUMPOUT(0x220F23B50);
}

void xgboost::RegTree::SaveCategoricalSplit(xgboost::RegTree *this, xgboost::Json *a2)
{
  uint64_t v4;
  std::string *Entry;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  std::string *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  int v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  unint64_t v53;
  _DWORD *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  int v64;
  int64_t v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  int64_t *v74;
  int64_t v75;
  std::string *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t *v88;
  xgboost::Json *v89;
  void *v90[2];
  char v91;
  int v92;
  uint64_t v93;
  _QWORD v94[2];
  _QWORD v95[2];
  void *__p;
  char *v97;
  char *v98;
  _QWORD v99[2];
  void *v100;
  char *v101;
  char *v102;
  _QWORD v103[2];
  int64_t *v104;
  char *v105;
  char *v106;
  uint64_t v107[2];
  uint64_t *v108;
  uint64_t *v109;
  uint64_t *v110;

  v4 = *((int *)this + 3);
  v103[0] = *((_QWORD *)this + 30) - *((_QWORD *)this + 29);
  if (v103[0] != v4)
  {
    dmlc::LogCheckFormat<unsigned long,int>(v107);
    if (v107[0])
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v103);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
      v6 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v103);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: ", 14);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"this->split_types_.size() == param.num_nodes", 44);
      v9 = *(char *)(v107[0] + 23);
      v10 = v9 >= 0 ? v107[0] : *(_QWORD *)v107[0];
      v11 = v9 >= 0 ? *(unsigned __int8 *)(v107[0] + 23) : *(_QWORD *)(v107[0] + 8);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v103);
      v13 = v107[0];
      v107[0] = 0;
      if (v13)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v107, v13);
    }
  }
  v103[0] = (uint64_t)(*((_QWORD *)this + 36) - *((_QWORD *)this + 35)) >> 4;
  v89 = a2;
  if (v103[0] != *((_DWORD *)this + 3))
  {
    dmlc::LogCheckFormat<unsigned long,int>(v107);
    if (v107[0])
    {
      v14 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v103);
      dmlc::LogMessageFatal::Entry::Init(v14, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
      v15 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v103);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Check failed: ", 14);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"this->GetSplitCategoriesPtr().size() == param.num_nodes", 55);
      v18 = *(char *)(v107[0] + 23);
      v19 = v18 >= 0 ? v107[0] : *(_QWORD *)v107[0];
      v20 = v18 >= 0 ? *(unsigned __int8 *)(v107[0] + 23) : *(_QWORD *)(v107[0] + 8);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v103);
      v22 = v107[0];
      v107[0] = 0;
      if (v22)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v107, v22);
    }
  }
  v107[1] = 0xA00000000;
  v106 = 0;
  v107[0] = (uint64_t)&unk_24E6BD970;
  v109 = 0;
  v110 = 0;
  v108 = 0;
  v103[1] = 0xA00000000;
  v103[0] = &unk_24E6BD970;
  v104 = 0;
  v105 = 0;
  v99[1] = 0x900000000;
  v98 = 0;
  v99[0] = &unk_24E6BD928;
  v101 = 0;
  v102 = 0;
  v100 = 0;
  v95[1] = 0x900000000;
  v95[0] = &unk_24E6BD928;
  __p = 0;
  v97 = 0;
  v24 = *((_QWORD *)this + 20);
  v23 = *((_QWORD *)this + 21);
  if (v23 != v24)
  {
    v25 = 0;
    do
    {
      if (*(_BYTE *)(*((_QWORD *)this + 29) + v25) == 1)
      {
        v26 = v97;
        if (v97 >= v98)
        {
          v28 = (char *)__p;
          v29 = (v97 - (_BYTE *)__p) >> 2;
          v30 = v29 + 1;
          if ((unint64_t)(v29 + 1) >> 62)
            std::vector<xgboost::TreeUpdaterReg const*>::__throw_length_error[abi:ne180100]();
          v31 = v98 - (_BYTE *)__p;
          if ((v98 - (_BYTE *)__p) >> 1 > v30)
            v30 = v31 >> 1;
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
            v32 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v32 = v30;
          if (v32)
          {
            v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v98, v32);
            v28 = (char *)__p;
            v26 = v97;
          }
          else
          {
            v33 = 0;
          }
          v34 = &v33[4 * v29];
          *(_DWORD *)v34 = v25;
          v27 = v34 + 4;
          while (v26 != v28)
          {
            v35 = *((_DWORD *)v26 - 1);
            v26 -= 4;
            *((_DWORD *)v34 - 1) = v35;
            v34 -= 4;
          }
          __p = v34;
          v97 = v27;
          v98 = &v33[4 * v32];
          if (v28)
            operator delete(v28);
        }
        else
        {
          *(_DWORD *)v97 = v25;
          v27 = v26 + 4;
        }
        v97 = v27;
        v36 = (v101 - (_BYTE *)v100) >> 2;
        v37 = v109;
        if (v109 >= v110)
        {
          v39 = v108;
          v40 = v109 - v108;
          v41 = v40 + 1;
          if ((unint64_t)(v40 + 1) >> 61)
            std::vector<void *>::__throw_length_error[abi:ne180100]();
          v42 = (char *)v110 - (char *)v108;
          if (((char *)v110 - (char *)v108) >> 2 > v41)
            v41 = v42 >> 2;
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
            v43 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v43 = v41;
          if (v43)
          {
            v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)&v110, v43);
            v39 = v108;
            v37 = v109;
          }
          else
          {
            v44 = 0;
          }
          v45 = (uint64_t *)&v44[8 * v40];
          *v45 = v36;
          v38 = v45 + 1;
          while (v37 != v39)
          {
            v46 = *--v37;
            *--v45 = v46;
          }
          v108 = v45;
          v109 = v38;
          v110 = (uint64_t *)&v44[8 * v43];
          if (v39)
            operator delete(v39);
        }
        else
        {
          *v109 = v36;
          v38 = v37 + 1;
        }
        v109 = v38;
        v47 = (unint64_t *)(*((_QWORD *)this + 35) + 16 * v25);
        v48 = *v47;
        v49 = v47[1];
        v50 = *((_QWORD *)this + 32);
        v94[0] = (*((_QWORD *)this + 33) - v50) >> 2;
        v94[1] = v50;
        xgboost::common::Span<float,18446744073709551615ul>::subspan(v94, v48, v49, (unint64_t *)v90);
        v51 = v90[0];
        v52 = 32 * (uint64_t)v90[0];
        if (32 * (uint64_t)v90[0])
        {
          v53 = 0;
          v54 = v90[1];
          do
          {
            if (v53 >> 5 >= (unint64_t)v51)
              std::terminate();
            if ((v54[v53 >> 5] & (1 << ~(_BYTE)v53)) != 0)
            {
              v55 = v101;
              if (v101 >= v102)
              {
                v57 = (char *)v100;
                v58 = (v101 - (_BYTE *)v100) >> 2;
                v59 = v58 + 1;
                if ((unint64_t)(v58 + 1) >> 62)
                  std::vector<xgboost::TreeUpdaterReg const*>::__throw_length_error[abi:ne180100]();
                v60 = v102 - (_BYTE *)v100;
                if ((v102 - (_BYTE *)v100) >> 1 > v59)
                  v59 = v60 >> 1;
                if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL)
                  v61 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v61 = v59;
                if (v61)
                {
                  v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v102, v61);
                  v57 = (char *)v100;
                  v55 = v101;
                }
                else
                {
                  v62 = 0;
                }
                v63 = &v62[4 * v58];
                *(_DWORD *)v63 = v53;
                v56 = v63 + 4;
                while (v55 != v57)
                {
                  v64 = *((_DWORD *)v55 - 1);
                  v55 -= 4;
                  *((_DWORD *)v63 - 1) = v64;
                  v63 -= 4;
                }
                v100 = v63;
                v101 = v56;
                v102 = &v62[4 * v61];
                if (v57)
                  operator delete(v57);
              }
              else
              {
                *(_DWORD *)v101 = v53;
                v56 = v55 + 4;
              }
              v101 = v56;
            }
            ++v53;
          }
          while (v53 != v52);
        }
        v65 = ((v101 - (_BYTE *)v100) >> 2) - v36;
        v94[0] = v65;
        v66 = v105;
        if (v105 >= v106)
        {
          v68 = (char *)v104;
          v69 = (v105 - (char *)v104) >> 3;
          v70 = v69 + 1;
          if ((unint64_t)(v69 + 1) >> 61)
            std::vector<void *>::__throw_length_error[abi:ne180100]();
          v71 = v106 - (char *)v104;
          if ((v106 - (char *)v104) >> 2 > v70)
            v70 = v71 >> 2;
          if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8)
            v72 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v72 = v70;
          if (v72)
          {
            v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)&v106, v72);
            v68 = (char *)v104;
            v66 = v105;
            v65 = v94[0];
          }
          else
          {
            v73 = 0;
          }
          v74 = (int64_t *)&v73[8 * v69];
          *v74 = v65;
          v67 = (char *)(v74 + 1);
          while (v66 != v68)
          {
            v75 = *((_QWORD *)v66 - 1);
            v66 -= 8;
            *--v74 = v75;
          }
          v104 = v74;
          v105 = v67;
          v106 = &v73[8 * v72];
          if (v68)
          {
            operator delete(v68);
            v65 = v94[0];
          }
        }
        else
        {
          *(_QWORD *)v105 = v65;
          v67 = v66 + 8;
        }
        v105 = v67;
        v92 = 0;
        if (!v65)
        {
          dmlc::LogCheckFormat<unsigned long,int>(&v93);
          if (v93)
          {
            v76 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v92);
            dmlc::LogMessageFatal::Entry::Init(v76, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
            v77 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v92);
            v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"Check failed: ", 14);
            v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"size != 0", 9);
            v80 = *(char *)(v93 + 23);
            v81 = v80 >= 0 ? v93 : *(_QWORD *)v93;
            v82 = v80 >= 0 ? *(unsigned __int8 *)(v93 + 23) : *(_QWORD *)(v93 + 8);
            v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, v81, v82);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)": ", 2);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v92);
            v84 = v93;
            v93 = 0;
            if (v84)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v93, v84);
          }
        }
        v24 = *((_QWORD *)this + 20);
        v23 = *((_QWORD *)this + 21);
      }
      ++v25;
    }
    while (v25 < 0xCCCCCCCCCCCCCCCDLL * ((v23 - v24) >> 2));
  }
  std::string::basic_string[abi:ne180100]<0>(v90, "categories_segments");
  v85 = (uint64_t *)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)v89 + 24))(*(_QWORD *)v89, v90);
  xgboost::Json::operator=<long long,(xgboost::Value::ValueKind)10>(v85, (uint64_t)v107);
  if (v91 < 0)
    operator delete(v90[0]);
  std::string::basic_string[abi:ne180100]<0>(v90, "categories_sizes");
  v86 = (uint64_t *)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)v89 + 24))(*(_QWORD *)v89, v90);
  xgboost::Json::operator=<long long,(xgboost::Value::ValueKind)10>(v86, (uint64_t)v103);
  if (v91 < 0)
    operator delete(v90[0]);
  std::string::basic_string[abi:ne180100]<0>(v90, "categories_nodes");
  v87 = (uint64_t *)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)v89 + 24))(*(_QWORD *)v89, v90);
  xgboost::Json::operator=<int,(xgboost::Value::ValueKind)9>(v87, (uint64_t)v95);
  if (v91 < 0)
    operator delete(v90[0]);
  std::string::basic_string[abi:ne180100]<0>(v90, "categories");
  v88 = (uint64_t *)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)v89 + 24))(*(_QWORD *)v89, v90);
  xgboost::Json::operator=<int,(xgboost::Value::ValueKind)9>(v88, (uint64_t)v99);
  if (v91 < 0)
    operator delete(v90[0]);
  v95[0] = &unk_24E6BD928;
  if (__p)
  {
    v97 = (char *)__p;
    operator delete(__p);
  }
  v99[0] = &unk_24E6BD928;
  if (v100)
  {
    v101 = (char *)v100;
    operator delete(v100);
  }
  v103[0] = &unk_24E6BD970;
  if (v104)
  {
    v105 = (char *)v104;
    operator delete(v104);
  }
  v107[0] = (uint64_t)&unk_24E6BD970;
  if (v108)
  {
    v109 = v108;
    operator delete(v108);
  }
}

void sub_220F243E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,int a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36)
{
  uint64_t v36;
  void *v38;
  void *v39;

  if (__p)
    operator delete(__p);
  if (a35)
    operator delete(a35);
  *(_QWORD *)(v36 - 168) = &unk_24E6BD970;
  v38 = *(void **)(v36 - 152);
  if (v38)
  {
    *(_QWORD *)(v36 - 144) = v38;
    operator delete(v38);
  }
  *(_QWORD *)(v36 - 128) = &unk_24E6BD970;
  v39 = *(void **)(v36 - 112);
  if (v39)
  {
    *(_QWORD *)(v36 - 104) = v39;
    operator delete(v39);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *xgboost::Json::operator=<long long,(xgboost::Value::ValueKind)10>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0xA00000000;
  v5 = (unsigned int *)(v4 + 8);
  *(_QWORD *)v4 = &unk_24E6BD970;
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(v4 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  v7 = (unsigned int *)*a1;
  *a1 = v4;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      __dmb(9u);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return a1;
}

uint64_t *xgboost::Json::operator=<int,(xgboost::Value::ValueKind)9>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0x900000000;
  v5 = (unsigned int *)(v4 + 8);
  *(_QWORD *)v4 = &unk_24E6BD928;
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(v4 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  v7 = (unsigned int *)*a1;
  *a1 = v4;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      __dmb(9u);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return a1;
}

_QWORD *xgboost::JsonTypedArray<int,(xgboost::Value::ValueKind)9>::~JsonTypedArray(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24E6BD928;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

_QWORD *xgboost::JsonTypedArray<long long,(xgboost::Value::ValueKind)10>::~JsonTypedArray(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24E6BD970;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void xgboost::RegTree::LoadModel(xgboost::RegTree *this, const xgboost::Json *a2)
{
  int v4;
  int v5;
  BOOL v6;
  void **v8;
  void **v9;
  void **v10;
  BOOL v11;
  _DWORD **v12;
  _DWORD **v13;
  std::string *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _DWORD **v23;
  std::string *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _DWORD **v33;
  std::string *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _DWORD **v43;
  std::string *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _DWORD **v53;
  std::string *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _DWORD **v63;
  std::string *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _DWORD **v73;
  std::string *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _DWORD **v83;
  std::string *v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  _DWORD **v93;
  std::string *v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  _DWORD **v106;
  uint64_t **v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  std::string *v115;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  char *v129;
  unsigned int v130;
  unsigned int v131;
  int v132;
  unsigned int v133;
  unsigned int v134;
  _BOOL4 v135;
  unsigned int *v136;
  unsigned int v137;
  const xgboost::Json *v138;
  _DWORD **v139;
  _DWORD **v140;
  _QWORD *v141;
  std::string *v142;
  _QWORD *v143;
  _QWORD *v144;
  _QWORD *v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  _DWORD **v151;
  _QWORD *v152;
  std::string *v153;
  _QWORD *v154;
  _QWORD *v155;
  _QWORD *v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  _DWORD **v162;
  std::string *v163;
  _QWORD *v164;
  _QWORD *v165;
  _QWORD *v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  _DWORD **v172;
  std::string *v173;
  _QWORD *v174;
  _QWORD *v175;
  _QWORD *v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  _DWORD **v182;
  std::string *v183;
  _QWORD *v184;
  _QWORD *v185;
  _QWORD *v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  _DWORD **v192;
  std::string *v193;
  _QWORD *v194;
  _QWORD *v195;
  _QWORD *v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  _DWORD **v202;
  std::string *v203;
  _QWORD *v204;
  _QWORD *v205;
  _QWORD *v206;
  int v207;
  uint64_t v208;
  uint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  _DWORD **v212;
  _QWORD *v213;
  std::string *v214;
  _QWORD *v215;
  _QWORD *v216;
  _QWORD *v217;
  int v218;
  uint64_t v219;
  uint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  _DWORD **v223;
  _QWORD *v224;
  std::string *v225;
  _QWORD *v226;
  _QWORD *v227;
  _QWORD *v228;
  int v229;
  uint64_t v230;
  uint64_t v231;
  _QWORD *v232;
  uint64_t v233;
  char *v234;
  uint64_t v235;
  char *v236;
  _DWORD **v237;
  char **v238;
  _QWORD *v239;
  void *v240;
  _QWORD *v241;
  void *v242;
  _QWORD *v243;
  void *v244;
  void *v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  _QWORD *v249;
  _DWORD **v250;
  _DWORD **v251;
  _QWORD *v252;
  std::string *v253;
  _QWORD *v254;
  _QWORD *v255;
  _QWORD *v256;
  int v257;
  uint64_t v258;
  uint64_t v259;
  _QWORD *v260;
  uint64_t v261;
  _DWORD **v262;
  _QWORD *v263;
  std::string *v264;
  _QWORD *v265;
  _QWORD *v266;
  _QWORD *v267;
  int v268;
  uint64_t v269;
  uint64_t v270;
  _QWORD *v271;
  uint64_t v272;
  _DWORD **v273;
  std::string *v274;
  _QWORD *v275;
  _QWORD *v276;
  _QWORD *v277;
  int v278;
  uint64_t v279;
  uint64_t v280;
  _QWORD *v281;
  uint64_t v282;
  _DWORD **v283;
  std::string *v284;
  _QWORD *v285;
  _QWORD *v286;
  _QWORD *v287;
  int v288;
  uint64_t v289;
  uint64_t v290;
  _QWORD *v291;
  uint64_t v292;
  _DWORD **v293;
  std::string *v294;
  _QWORD *v295;
  _QWORD *v296;
  _QWORD *v297;
  int v298;
  uint64_t v299;
  uint64_t v300;
  _QWORD *v301;
  uint64_t v302;
  _DWORD **v303;
  std::string *v304;
  _QWORD *v305;
  _QWORD *v306;
  _QWORD *v307;
  int v308;
  uint64_t v309;
  uint64_t v310;
  _QWORD *v311;
  uint64_t v312;
  _DWORD **v313;
  std::string *v314;
  _QWORD *v315;
  _QWORD *v316;
  _QWORD *v317;
  int v318;
  uint64_t v319;
  uint64_t v320;
  _QWORD *v321;
  uint64_t v322;
  _DWORD **v323;
  _QWORD *v324;
  std::string *v325;
  _QWORD *v326;
  _QWORD *v327;
  _QWORD *v328;
  int v329;
  uint64_t v330;
  uint64_t v331;
  _QWORD *v332;
  uint64_t v333;
  _DWORD **v334;
  _QWORD *v335;
  std::string *v336;
  _QWORD *v337;
  _QWORD *v338;
  _QWORD *v339;
  int v340;
  uint64_t v341;
  uint64_t v342;
  _QWORD *v343;
  uint64_t v344;
  char *v345;
  _DWORD **v346;
  char **v347;
  _QWORD *v348;
  void *v349;
  _QWORD *v350;
  void *v351;
  _QWORD *v352;
  void *v353;
  void *v354;
  uint64_t v355;
  uint64_t v356;
  int v357;
  _QWORD *v358;
  std::string *v359;
  _QWORD *v360;
  _QWORD *v361;
  _QWORD *v362;
  int v363;
  uint64_t v364;
  uint64_t v365;
  _QWORD *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  _DWORD *v371;
  unsigned int *v372;
  unsigned int v373;
  unsigned int v374;
  uint64_t v375;
  unsigned int v376;
  std::string *Entry;
  _QWORD *v378;
  _QWORD *v379;
  _QWORD *v380;
  int v381;
  uint64_t v382;
  uint64_t v383;
  _QWORD *v384;
  uint64_t v385;
  _DWORD **v386;
  _DWORD **v387;
  std::string *v388;
  _QWORD *v389;
  _QWORD *v390;
  _QWORD *v391;
  int v392;
  uint64_t v393;
  uint64_t v394;
  _QWORD *v395;
  uint64_t v396;
  _DWORD **v397;
  std::string *v398;
  _QWORD *v399;
  _QWORD *v400;
  _QWORD *v401;
  int v402;
  uint64_t v403;
  uint64_t v404;
  _QWORD *v405;
  uint64_t v406;
  _DWORD **v407;
  std::string *v408;
  _QWORD *v409;
  _QWORD *v410;
  _QWORD *v411;
  int v412;
  uint64_t v413;
  uint64_t v414;
  _QWORD *v415;
  uint64_t v416;
  _DWORD **v417;
  std::string *v418;
  _QWORD *v419;
  _QWORD *v420;
  _QWORD *v421;
  int v422;
  uint64_t v423;
  uint64_t v424;
  _QWORD *v425;
  uint64_t v426;
  _DWORD **v427;
  std::string *v428;
  _QWORD *v429;
  _QWORD *v430;
  _QWORD *v431;
  int v432;
  uint64_t v433;
  uint64_t v434;
  _QWORD *v435;
  uint64_t v436;
  _DWORD **v437;
  std::string *v438;
  _QWORD *v439;
  _QWORD *v440;
  _QWORD *v441;
  int v442;
  uint64_t v443;
  uint64_t v444;
  _QWORD *v445;
  uint64_t v446;
  _DWORD **v447;
  std::string *v448;
  _QWORD *v449;
  _QWORD *v450;
  _QWORD *v451;
  int v452;
  uint64_t v453;
  uint64_t v454;
  _QWORD *v455;
  uint64_t v456;
  _DWORD **v457;
  std::string *v458;
  _QWORD *v459;
  _QWORD *v460;
  _QWORD *v461;
  int v462;
  uint64_t v463;
  uint64_t v464;
  _QWORD *v465;
  uint64_t v466;
  _DWORD **v467;
  std::string *v468;
  _QWORD *v469;
  _QWORD *v470;
  _QWORD *v471;
  int v472;
  uint64_t v473;
  uint64_t v474;
  _QWORD *v475;
  uint64_t v476;
  char *v477;
  uint64_t v478;
  char *v479;
  _DWORD **v480;
  uint64_t **v481;
  void *v482;
  void *v483;
  void *v484;
  void *v485;
  uint64_t v486;
  uint64_t v487;
  int v488;
  std::string *v489;
  _QWORD *v490;
  _QWORD *v491;
  _QWORD *v492;
  int v493;
  uint64_t v494;
  uint64_t v495;
  _QWORD *v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  char *v501;
  char *v502;
  char *v503;
  unsigned int v504;
  unsigned int v505;
  int v506;
  unsigned int v507;
  unsigned int v508;
  _BOOL4 v509;
  unsigned int *v510;
  unsigned int v511;
  std::string *v512;
  _QWORD *v513;
  _QWORD *v514;
  _QWORD *v515;
  int v516;
  uint64_t v517;
  uint64_t v518;
  _QWORD *v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  _DWORD *v524;
  unsigned int *v525;
  unsigned int v526;
  unsigned int v527;
  unsigned int v528;
  unsigned int v529;
  void *v530;
  int64_t v531;
  char *v532;
  void **v533;
  int v534;
  _QWORD *v535;
  uint64_t i;
  char *v537;
  char *v538;
  uint64_t v539;
  unint64_t v540;
  uint64_t v541;
  unint64_t v542;
  char *v543;
  char *v544;
  int v545;
  uint64_t v546;
  int *v547;
  uint64_t j;
  unint64_t v549;
  int v550;
  std::string *v551;
  _QWORD *v552;
  _QWORD *v553;
  _QWORD *v554;
  int v555;
  std::vector<std::pair<std::string, std::string>>::pointer v556;
  uint64_t v557;
  _QWORD *v558;
  std::vector<std::pair<std::string, std::string>>::pointer begin;
  std::string *v560;
  _QWORD *v561;
  _QWORD *v562;
  _QWORD *v563;
  int v564;
  std::vector<std::pair<std::string, std::string>>::pointer data;
  std::string::size_type size;
  _QWORD *v567;
  std::vector<std::pair<std::string, std::string>>::pointer v568;
  std::string *v569;
  _QWORD *v570;
  _QWORD *v571;
  _QWORD *v572;
  int v573;
  uint64_t v574;
  uint64_t v575;
  _QWORD *v576;
  uint64_t v577;
  std::string *v578;
  _QWORD *v579;
  _QWORD *v580;
  _QWORD *v581;
  int v582;
  uint64_t v583;
  uint64_t v584;
  _QWORD *v585;
  uint64_t v586;
  std::string *v587;
  _QWORD *v588;
  _QWORD *v589;
  _QWORD *v590;
  int v591;
  uint64_t v592;
  uint64_t v593;
  _QWORD *v594;
  uint64_t v595;
  int v596;
  const xgboost::Json *v597;
  _QWORD *v598;
  _QWORD *v599;
  _QWORD *v600;
  _QWORD *v601;
  _QWORD *v602;
  _QWORD *v603;
  _QWORD *v604;
  _QWORD *v605;
  _QWORD *v606;
  _QWORD *v607;
  _QWORD *v608;
  _QWORD *v609;
  _QWORD *v610;
  _QWORD *v611;
  _QWORD *v612;
  _QWORD *v613;
  xgboost::RegTree *v614;
  _QWORD *v615;
  _QWORD *v616;
  _QWORD *v617;
  _QWORD *v618;
  _QWORD *v619;
  _QWORD *v620;
  _QWORD *v621;
  _QWORD *v622;
  void **v623;
  _QWORD *v624;
  _QWORD *v625;
  void **v626;
  _QWORD *v627;
  _QWORD *v628;
  void **v629;
  _QWORD *v630;
  _QWORD *v631;
  uint64_t v632;
  _BYTE __p[24];
  int v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  std::vector<std::pair<std::string, std::string>> v638;

  std::string::basic_string[abi:ne180100]<0>(&v638, "loss_changes");
  v4 = *(_DWORD *)(*(_QWORD *)(*(uint64_t (**)(_QWORD, std::vector<std::pair<std::string, std::string>> *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v638)+ 12);
  if (SHIBYTE(v638.__end_cap_.__value_) < 0)
    operator delete(v638.__begin_);
  std::string::basic_string[abi:ne180100]<0>(&v638, "split_indices");
  v5 = *(_DWORD *)(*(_QWORD *)(*(uint64_t (**)(_QWORD, std::vector<std::pair<std::string, std::string>> *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v638)+ 12);
  if (SHIBYTE(v638.__end_cap_.__value_) < 0)
    operator delete(v638.__begin_);
  v6 = v4 == 7 && v5 == 10;
  v614 = this;
  v597 = a2;
  if (v6)
  {
    std::string::basic_string[abi:ne180100]<0>(&v635, "tree_param");
    v139 = (_DWORD **)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v635);
    xgboost::FromJson<xgboost::TreeParam>(&v638, *v139, (uint64_t)this + 8);
    *(_QWORD *)__p = &v638;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (SHIBYTE(v637) < 0)
      operator delete((void *)v635);
    v634 = *((_DWORD *)this + 3);
    *(_DWORD *)__p = v634;
    LODWORD(v632) = 0;
    if (!v634)
    {
      dmlc::LogCheckFormat<int,int>(&v635);
      if (v635)
      {
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
        v378 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        v379 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v378, (uint64_t)"Check failed: ", 14);
        v380 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v379, (uint64_t)"n_nodes != 0", 12);
        v381 = *(char *)(v635 + 23);
        v382 = v381 >= 0 ? v635 : *(_QWORD *)v635;
        v383 = v381 >= 0 ? *(unsigned __int8 *)(v635 + 23) : *(_QWORD *)(v635 + 8);
        v384 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v380, v382, v383);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v384, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
        v385 = v635;
        v635 = 0;
        if (v385)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v635, v385);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v635, "loss_changes");
    v140 = (_DWORD **)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v635);
    v141 = xgboost::Cast<xgboost::JsonTypedArray<float,(xgboost::Value::ValueKind)7> const,xgboost::Value>(*v140);
    if (SHIBYTE(v637) < 0)
      operator delete((void *)v635);
    *(_QWORD *)__p = (uint64_t)(v141[3] - v141[2]) >> 2;
    if (*(_QWORD *)__p != v634)
    {
      dmlc::LogCheckFormat<unsigned long,int>(&v635);
      if (v635)
      {
        v142 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        dmlc::LogMessageFatal::Entry::Init(v142, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
        v143 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        v144 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v143, (uint64_t)"Check failed: ", 14);
        v145 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v144, (uint64_t)"loss_changes.size() == n_nodes", 30);
        v146 = *(char *)(v635 + 23);
        v147 = v146 >= 0 ? v635 : *(_QWORD *)v635;
        v148 = v146 >= 0 ? *(unsigned __int8 *)(v635 + 23) : *(_QWORD *)(v635 + 8);
        v149 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v145, v147, v148);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v149, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
        v150 = v635;
        v635 = 0;
        if (v150)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v635, v150);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v635, "sum_hessian");
    v151 = (_DWORD **)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v635);
    v152 = xgboost::Cast<xgboost::JsonTypedArray<float,(xgboost::Value::ValueKind)7> const,xgboost::Value>(*v151);
    if (SHIBYTE(v637) < 0)
      operator delete((void *)v635);
    *(_QWORD *)__p = (uint64_t)(v152[3] - v152[2]) >> 2;
    if (*(_QWORD *)__p != v634)
    {
      dmlc::LogCheckFormat<unsigned long,int>(&v635);
      if (v635)
      {
        v153 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        dmlc::LogMessageFatal::Entry::Init(v153, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
        v154 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        v155 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v154, (uint64_t)"Check failed: ", 14);
        v156 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v155, (uint64_t)"sum_hessian.size() == n_nodes", 29);
        v157 = *(char *)(v635 + 23);
        v158 = v157 >= 0 ? v635 : *(_QWORD *)v635;
        v159 = v157 >= 0 ? *(unsigned __int8 *)(v635 + 23) : *(_QWORD *)(v635 + 8);
        v160 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, v158, v159);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v160, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
        v161 = v635;
        v635 = 0;
        if (v161)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v635, v161);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v635, "base_weights");
    v162 = (_DWORD **)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v635);
    v630 = xgboost::Cast<xgboost::JsonTypedArray<float,(xgboost::Value::ValueKind)7> const,xgboost::Value>(*v162);
    if (SHIBYTE(v637) < 0)
      operator delete((void *)v635);
    *(_QWORD *)__p = (uint64_t)(v630[3] - v630[2]) >> 2;
    if (*(_QWORD *)__p != v634)
    {
      dmlc::LogCheckFormat<unsigned long,int>(&v635);
      if (v635)
      {
        v163 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        dmlc::LogMessageFatal::Entry::Init(v163, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
        v164 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        v165 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v164, (uint64_t)"Check failed: ", 14);
        v166 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v165, (uint64_t)"base_weights.size() == n_nodes", 30);
        v167 = *(char *)(v635 + 23);
        v168 = v167 >= 0 ? v635 : *(_QWORD *)v635;
        v169 = v167 >= 0 ? *(unsigned __int8 *)(v635 + 23) : *(_QWORD *)(v635 + 8);
        v170 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v166, v168, v169);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v170, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
        v171 = v635;
        v635 = 0;
        if (v171)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v635, v171);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v635, "left_children");
    v172 = (_DWORD **)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v635);
    v627 = xgboost::Cast<xgboost::JsonTypedArray<int,(xgboost::Value::ValueKind)9> const,xgboost::Value>(*v172);
    if (SHIBYTE(v637) < 0)
      operator delete((void *)v635);
    *(_QWORD *)__p = (uint64_t)(v627[3] - v627[2]) >> 2;
    if (*(_QWORD *)__p != v634)
    {
      dmlc::LogCheckFormat<unsigned long,int>(&v635);
      if (v635)
      {
        v173 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        dmlc::LogMessageFatal::Entry::Init(v173, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
        v174 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        v175 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v174, (uint64_t)"Check failed: ", 14);
        v176 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v175, (uint64_t)"lefts.size() == n_nodes", 23);
        v177 = *(char *)(v635 + 23);
        v178 = v177 >= 0 ? v635 : *(_QWORD *)v635;
        v179 = v177 >= 0 ? *(unsigned __int8 *)(v635 + 23) : *(_QWORD *)(v635 + 8);
        v180 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v176, v178, v179);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v180, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
        v181 = v635;
        v635 = 0;
        if (v181)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v635, v181);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v635, "right_children");
    v182 = (_DWORD **)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v635);
    v624 = xgboost::Cast<xgboost::JsonTypedArray<int,(xgboost::Value::ValueKind)9> const,xgboost::Value>(*v182);
    if (SHIBYTE(v637) < 0)
      operator delete((void *)v635);
    *(_QWORD *)__p = (uint64_t)(v624[3] - v624[2]) >> 2;
    if (*(_QWORD *)__p != v634)
    {
      dmlc::LogCheckFormat<unsigned long,int>(&v635);
      if (v635)
      {
        v183 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        dmlc::LogMessageFatal::Entry::Init(v183, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
        v184 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        v185 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v184, (uint64_t)"Check failed: ", 14);
        v186 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v185, (uint64_t)"rights.size() == n_nodes", 24);
        v187 = *(char *)(v635 + 23);
        v188 = v187 >= 0 ? v635 : *(_QWORD *)v635;
        v189 = v187 >= 0 ? *(unsigned __int8 *)(v635 + 23) : *(_QWORD *)(v635 + 8);
        v190 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v186, v188, v189);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v190, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
        v191 = v635;
        v635 = 0;
        if (v191)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v635, v191);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v635, "parents");
    v192 = (_DWORD **)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v635);
    v620 = xgboost::Cast<xgboost::JsonTypedArray<int,(xgboost::Value::ValueKind)9> const,xgboost::Value>(*v192);
    if (SHIBYTE(v637) < 0)
      operator delete((void *)v635);
    *(_QWORD *)__p = (uint64_t)(v620[3] - v620[2]) >> 2;
    if (*(_QWORD *)__p != v634)
    {
      dmlc::LogCheckFormat<unsigned long,int>(&v635);
      if (v635)
      {
        v193 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        dmlc::LogMessageFatal::Entry::Init(v193, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
        v194 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        v195 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v194, (uint64_t)"Check failed: ", 14);
        v196 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v195, (uint64_t)"parents.size() == n_nodes", 25);
        v197 = *(char *)(v635 + 23);
        v198 = v197 >= 0 ? v635 : *(_QWORD *)v635;
        v199 = v197 >= 0 ? *(unsigned __int8 *)(v635 + 23) : *(_QWORD *)(v635 + 8);
        v200 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v196, v198, v199);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
        v201 = v635;
        v635 = 0;
        if (v201)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v635, v201);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v635, "split_indices");
    v202 = (_DWORD **)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v635);
    v616 = xgboost::Cast<xgboost::JsonTypedArray<long long,(xgboost::Value::ValueKind)10> const,xgboost::Value>(*v202);
    if (SHIBYTE(v637) < 0)
      operator delete((void *)v635);
    *(_QWORD *)__p = (uint64_t)(v616[3] - v616[2]) >> 3;
    if (*(_QWORD *)__p != v634)
    {
      dmlc::LogCheckFormat<unsigned long,int>(&v635);
      if (v635)
      {
        v203 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        dmlc::LogMessageFatal::Entry::Init(v203, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
        v204 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        v205 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v204, (uint64_t)"Check failed: ", 14);
        v206 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v205, (uint64_t)"indices.size() == n_nodes", 25);
        v207 = *(char *)(v635 + 23);
        v208 = v207 >= 0 ? v635 : *(_QWORD *)v635;
        v209 = v207 >= 0 ? *(unsigned __int8 *)(v635 + 23) : *(_QWORD *)(v635 + 8);
        v210 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v206, v208, v209);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v210, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
        v211 = v635;
        v635 = 0;
        if (v211)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v635, v211);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v635, "split_conditions");
    v212 = (_DWORD **)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v635);
    v213 = xgboost::Cast<xgboost::JsonTypedArray<float,(xgboost::Value::ValueKind)7> const,xgboost::Value>(*v212);
    if (SHIBYTE(v637) < 0)
      operator delete((void *)v635);
    *(_QWORD *)__p = (uint64_t)(v213[3] - v213[2]) >> 2;
    if (*(_QWORD *)__p != v634)
    {
      dmlc::LogCheckFormat<unsigned long,int>(&v635);
      if (v635)
      {
        v214 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        dmlc::LogMessageFatal::Entry::Init(v214, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
        v215 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        v216 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v215, (uint64_t)"Check failed: ", 14);
        v217 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v216, (uint64_t)"conds.size() == n_nodes", 23);
        v218 = *(char *)(v635 + 23);
        v219 = v218 >= 0 ? v635 : *(_QWORD *)v635;
        v220 = v218 >= 0 ? *(unsigned __int8 *)(v635 + 23) : *(_QWORD *)(v635 + 8);
        v221 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v217, v219, v220);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v221, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
        v222 = v635;
        v635 = 0;
        if (v222)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v635, v222);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v635, "default_left");
    v223 = (_DWORD **)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v635);
    v224 = xgboost::Cast<xgboost::JsonTypedArray<unsigned char,(xgboost::Value::ValueKind)8> const,xgboost::Value>(*v223);
    if (SHIBYTE(v637) < 0)
      operator delete((void *)v635);
    *(_QWORD *)__p = v224[3] - v224[2];
    if (*(_QWORD *)__p != v634)
    {
      dmlc::LogCheckFormat<unsigned long,int>(&v635);
      if (v635)
      {
        v225 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        dmlc::LogMessageFatal::Entry::Init(v225, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
        v226 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        v227 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v226, (uint64_t)"Check failed: ", 14);
        v228 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v227, (uint64_t)"default_left.size() == n_nodes", 30);
        v229 = *(char *)(v635 + 23);
        v230 = v229 >= 0 ? v635 : *(_QWORD *)v635;
        v231 = v229 >= 0 ? *(unsigned __int8 *)(v635 + 23) : *(_QWORD *)(v635 + 8);
        v232 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v228, v230, v231);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v232, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
        v233 = v635;
        v635 = 0;
        if (v233)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v635, v233);
      }
    }
    v234 = (char *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*(_DWORD **)a2) + 16;
    std::string::basic_string[abi:ne180100]<0>(&v635, "split_type");
    v235 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)v234, (const void **)&v635);
    v236 = (char *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*(_DWORD **)a2) + 24;
    if (SHIBYTE(v637) < 0)
      operator delete((void *)v635);
    v635 = 0;
    v636 = 0;
    v637 = 0;
    if (v236 != (char *)v235)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "split_type");
      v237 = (_DWORD **)(*(uint64_t (**)(_QWORD, _BYTE *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, __p);
      v238 = (char **)xgboost::Cast<xgboost::JsonTypedArray<unsigned char,(xgboost::Value::ValueKind)8> const,xgboost::Value>(*v237);
      if (&v635 != (uint64_t *)(v238 + 2))
        std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v635, v238[2], v238[3], v238[3] - v238[2]);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
    v611 = v152;
    std::vector<xgboost::RTreeNodeStat>::vector(__p, v634);
    v239 = (_QWORD *)((char *)v614 + 208);
    v240 = (void *)*((_QWORD *)v614 + 26);
    if (v240)
    {
      *((_QWORD *)v614 + 27) = v240;
      operator delete(v240);
      *v239 = 0;
      *((_QWORD *)v614 + 27) = 0;
      *((_QWORD *)v614 + 28) = 0;
    }
    *((_OWORD *)v614 + 13) = *(_OWORD *)__p;
    *((_QWORD *)v614 + 28) = *(_QWORD *)&__p[16];
    std::vector<xgboost::RegTree::Node>::vector(__p, v634);
    v241 = (_QWORD *)((char *)v614 + 160);
    v242 = (void *)*((_QWORD *)v614 + 20);
    if (v242)
    {
      *((_QWORD *)v614 + 21) = v242;
      operator delete(v242);
      *v241 = 0;
      *((_QWORD *)v614 + 21) = 0;
      *((_QWORD *)v614 + 22) = 0;
    }
    *((_OWORD *)v614 + 10) = *(_OWORD *)__p;
    *((_QWORD *)v614 + 22) = *(_QWORD *)&__p[16];
    std::vector<xgboost::FeatureType>::vector(__p, v634);
    v243 = (_QWORD *)((char *)v614 + 232);
    v244 = (void *)*((_QWORD *)v614 + 29);
    if (v244)
    {
      *((_QWORD *)v614 + 30) = v244;
      operator delete(v244);
      *v243 = 0;
      *((_QWORD *)v614 + 30) = 0;
      *((_QWORD *)v614 + 31) = 0;
    }
    *(_OWORD *)((char *)v614 + 232) = *(_OWORD *)__p;
    *((_QWORD *)v614 + 31) = *(_QWORD *)&__p[16];
    std::vector<xgboost::RegTree::Segment>::vector(__p, v634);
    v245 = (void *)*((_QWORD *)v614 + 35);
    if (v245)
    {
      *((_QWORD *)v614 + 36) = v245;
      operator delete(v245);
      *((_QWORD *)v614 + 35) = 0;
      *((_QWORD *)v614 + 36) = 0;
      *((_QWORD *)v614 + 37) = 0;
    }
    v246 = *(_QWORD *)__p;
    *((_QWORD *)v614 + 35) = *(_QWORD *)__p;
    v247 = *(_QWORD *)&__p[8];
    *((_OWORD *)v614 + 18) = *(_OWORD *)&__p[8];
    v632 = (v247 - v246) >> 4;
    v248 = v634;
    if (v632 == v634)
    {
      v249 = v611;
    }
    else
    {
      dmlc::LogCheckFormat<int,unsigned long>((uint64_t *)__p);
      v249 = v611;
      if (*(_QWORD *)__p)
      {
        v359 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v632);
        dmlc::LogMessageFatal::Entry::Init(v359, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
        v360 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v632);
        v361 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v360, (uint64_t)"Check failed: ", 14);
        v362 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v361, (uint64_t)"n_nodes == split_categories_segments.size()", 43);
        v363 = *(char *)(*(_QWORD *)__p + 23);
        v364 = v363 >= 0 ? *(_QWORD *)__p : **(_QWORD **)__p;
        v365 = v363 >= 0 ? *(unsigned __int8 *)(*(_QWORD *)__p + 23) : *(_QWORD *)(*(_QWORD *)__p + 8);
        v366 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v362, v364, v365);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v366, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v632);
        v367 = *(_QWORD *)__p;
        *(_QWORD *)__p = 0;
        if (v367)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)__p, v367);
      }
      v248 = v634;
    }
    if (v248 >= 1)
    {
      v368 = 0;
      v369 = 0;
      v370 = 0;
      do
      {
        v371 = (_DWORD *)(*v239 + v368);
        *v371 = *(_DWORD *)(v141[2] + 4 * v370);
        v371[1] = *(_DWORD *)(v249[2] + 4 * v370);
        v371[2] = *(_DWORD *)(v630[2] + 4 * v370);
        v372 = (unsigned int *)(*v241 + v369);
        v373 = *(_DWORD *)(v627[2] + 4 * v370);
        v374 = *(_DWORD *)(v624[2] + 4 * v370);
        v375 = *(_QWORD *)(v616[2] + 8 * v370);
        v376 = *(_DWORD *)(v213[2] + 4 * v370);
        if (*(_BYTE *)(v224[2] + v370) == 1)
          LODWORD(v375) = v375 | 0x80000000;
        *v372 = *(_DWORD *)(v620[2] + 4 * v370) | 0x80000000;
        v372[1] = v373;
        v372[2] = v374;
        v372[3] = v375;
        v372[4] = v376;
        if (v236 != (char *)v235)
          *(_BYTE *)(*v243 + v370) = *(_BYTE *)(v635 + v370);
        ++v370;
        v369 += 20;
        v368 += 16;
      }
      while (v370 < v634);
    }
  }
  else
  {
    if (v4 != 7 || v5 == 10)
    {
      v8 = (void **)((char *)this + 208);
      v9 = (void **)((char *)this + 160);
      v10 = (void **)((char *)this + 280);
      v11 = v4 != 7 && v5 == 10;
      v629 = (void **)((char *)this + 208);
      v623 = (void **)((char *)this + 232);
      v626 = (void **)((char *)this + 160);
      if (v11)
      {
        std::string::basic_string[abi:ne180100]<0>(&v635, "tree_param");
        v386 = (_DWORD **)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v635);
        xgboost::FromJson<xgboost::TreeParam>(&v638, *v386, (uint64_t)this + 8);
        *(_QWORD *)__p = &v638;
        std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if (SHIBYTE(v637) < 0)
          operator delete((void *)v635);
        v634 = *((_DWORD *)this + 3);
        *(_DWORD *)__p = v634;
        LODWORD(v632) = 0;
        if (!v634)
        {
          dmlc::LogCheckFormat<int,int>(&v635);
          if (v635)
          {
            v587 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
            dmlc::LogMessageFatal::Entry::Init(v587, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
            v588 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
            v589 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v588, (uint64_t)"Check failed: ", 14);
            v590 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v589, (uint64_t)"n_nodes != 0", 12);
            v591 = *(char *)(v635 + 23);
            v592 = v591 >= 0 ? v635 : *(_QWORD *)v635;
            v593 = v591 >= 0 ? *(unsigned __int8 *)(v635 + 23) : *(_QWORD *)(v635 + 8);
            v594 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v590, v592, v593);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v594, (uint64_t)": ", 2);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
            v595 = v635;
            v635 = 0;
            if (v595)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v635, v595);
          }
        }
        std::string::basic_string[abi:ne180100]<0>(&v635, "loss_changes");
        v387 = (_DWORD **)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v635);
        v622 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v387);
        if (SHIBYTE(v637) < 0)
          operator delete((void *)v635);
        *(_QWORD *)__p = (uint64_t)(v622[3] - v622[2]) >> 3;
        if (*(_QWORD *)__p != v634)
        {
          dmlc::LogCheckFormat<unsigned long,int>(&v635);
          if (v635)
          {
            v388 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
            dmlc::LogMessageFatal::Entry::Init(v388, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
            v389 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
            v390 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v389, (uint64_t)"Check failed: ", 14);
            v391 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v390, (uint64_t)"loss_changes.size() == n_nodes", 30);
            v392 = *(char *)(v635 + 23);
            v393 = v392 >= 0 ? v635 : *(_QWORD *)v635;
            v394 = v392 >= 0 ? *(unsigned __int8 *)(v635 + 23) : *(_QWORD *)(v635 + 8);
            v395 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v391, v393, v394);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v395, (uint64_t)": ", 2);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
            v396 = v635;
            v635 = 0;
            if (v396)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v635, v396);
          }
        }
        std::string::basic_string[abi:ne180100]<0>(&v635, "sum_hessian");
        v397 = (_DWORD **)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v635);
        v618 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v397);
        if (SHIBYTE(v637) < 0)
          operator delete((void *)v635);
        *(_QWORD *)__p = (uint64_t)(v618[3] - v618[2]) >> 3;
        if (*(_QWORD *)__p != v634)
        {
          dmlc::LogCheckFormat<unsigned long,int>(&v635);
          if (v635)
          {
            v398 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
            dmlc::LogMessageFatal::Entry::Init(v398, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
            v399 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
            v400 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v399, (uint64_t)"Check failed: ", 14);
            v401 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v400, (uint64_t)"sum_hessian.size() == n_nodes", 29);
            v402 = *(char *)(v635 + 23);
            v403 = v402 >= 0 ? v635 : *(_QWORD *)v635;
            v404 = v402 >= 0 ? *(unsigned __int8 *)(v635 + 23) : *(_QWORD *)(v635 + 8);
            v405 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v401, v403, v404);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v405, (uint64_t)": ", 2);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
            v406 = v635;
            v635 = 0;
            if (v406)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v635, v406);
          }
        }
        std::string::basic_string[abi:ne180100]<0>(&v635, "base_weights");
        v407 = (_DWORD **)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v635);
        v613 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v407);
        if (SHIBYTE(v637) < 0)
          operator delete((void *)v635);
        *(_QWORD *)__p = (uint64_t)(v613[3] - v613[2]) >> 3;
        if (*(_QWORD *)__p != v634)
        {
          dmlc::LogCheckFormat<unsigned long,int>(&v635);
          if (v635)
          {
            v408 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
            dmlc::LogMessageFatal::Entry::Init(v408, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
            v409 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
            v410 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v409, (uint64_t)"Check failed: ", 14);
            v411 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v410, (uint64_t)"base_weights.size() == n_nodes", 30);
            v412 = *(char *)(v635 + 23);
            v413 = v412 >= 0 ? v635 : *(_QWORD *)v635;
            v414 = v412 >= 0 ? *(unsigned __int8 *)(v635 + 23) : *(_QWORD *)(v635 + 8);
            v415 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v411, v413, v414);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v415, (uint64_t)": ", 2);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
            v416 = v635;
            v635 = 0;
            if (v416)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v635, v416);
          }
        }
        std::string::basic_string[abi:ne180100]<0>(&v635, "left_children");
        v417 = (_DWORD **)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v635);
        v609 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v417);
        if (SHIBYTE(v637) < 0)
          operator delete((void *)v635);
        *(_QWORD *)__p = (uint64_t)(v609[3] - v609[2]) >> 3;
        if (*(_QWORD *)__p != v634)
        {
          dmlc::LogCheckFormat<unsigned long,int>(&v635);
          if (v635)
          {
            v418 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
            dmlc::LogMessageFatal::Entry::Init(v418, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
            v419 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
            v420 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v419, (uint64_t)"Check failed: ", 14);
            v421 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v420, (uint64_t)"lefts.size() == n_nodes", 23);
            v422 = *(char *)(v635 + 23);
            v423 = v422 >= 0 ? v635 : *(_QWORD *)v635;
            v424 = v422 >= 0 ? *(unsigned __int8 *)(v635 + 23) : *(_QWORD *)(v635 + 8);
            v425 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v421, v423, v424);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v425, (uint64_t)": ", 2);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
            v426 = v635;
            v635 = 0;
            if (v426)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v635, v426);
          }
        }
        std::string::basic_string[abi:ne180100]<0>(&v635, "right_children");
        v427 = (_DWORD **)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v635);
        v607 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v427);
        if (SHIBYTE(v637) < 0)
          operator delete((void *)v635);
        *(_QWORD *)__p = (uint64_t)(v607[3] - v607[2]) >> 3;
        if (*(_QWORD *)__p != v634)
        {
          dmlc::LogCheckFormat<unsigned long,int>(&v635);
          if (v635)
          {
            v428 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
            dmlc::LogMessageFatal::Entry::Init(v428, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
            v429 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
            v430 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v429, (uint64_t)"Check failed: ", 14);
            v431 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v430, (uint64_t)"rights.size() == n_nodes", 24);
            v432 = *(char *)(v635 + 23);
            v433 = v432 >= 0 ? v635 : *(_QWORD *)v635;
            v434 = v432 >= 0 ? *(unsigned __int8 *)(v635 + 23) : *(_QWORD *)(v635 + 8);
            v435 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v431, v433, v434);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v435, (uint64_t)": ", 2);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
            v436 = v635;
            v635 = 0;
            if (v436)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v635, v436);
          }
        }
        std::string::basic_string[abi:ne180100]<0>(&v635, "parents");
        v437 = (_DWORD **)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v635);
        v605 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v437);
        if (SHIBYTE(v637) < 0)
          operator delete((void *)v635);
        *(_QWORD *)__p = (uint64_t)(v605[3] - v605[2]) >> 3;
        if (*(_QWORD *)__p != v634)
        {
          dmlc::LogCheckFormat<unsigned long,int>(&v635);
          if (v635)
          {
            v438 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
            dmlc::LogMessageFatal::Entry::Init(v438, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
            v439 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
            v440 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v439, (uint64_t)"Check failed: ", 14);
            v441 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v440, (uint64_t)"parents.size() == n_nodes", 25);
            v442 = *(char *)(v635 + 23);
            v443 = v442 >= 0 ? v635 : *(_QWORD *)v635;
            v444 = v442 >= 0 ? *(unsigned __int8 *)(v635 + 23) : *(_QWORD *)(v635 + 8);
            v445 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v441, v443, v444);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v445, (uint64_t)": ", 2);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
            v446 = v635;
            v635 = 0;
            if (v446)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v635, v446);
          }
        }
        std::string::basic_string[abi:ne180100]<0>(&v635, "split_indices");
        v447 = (_DWORD **)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v635);
        v603 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v447);
        if (SHIBYTE(v637) < 0)
          operator delete((void *)v635);
        *(_QWORD *)__p = (uint64_t)(v603[3] - v603[2]) >> 3;
        if (*(_QWORD *)__p != v634)
        {
          dmlc::LogCheckFormat<unsigned long,int>(&v635);
          if (v635)
          {
            v448 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
            dmlc::LogMessageFatal::Entry::Init(v448, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
            v449 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
            v450 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v449, (uint64_t)"Check failed: ", 14);
            v451 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v450, (uint64_t)"indices.size() == n_nodes", 25);
            v452 = *(char *)(v635 + 23);
            v453 = v452 >= 0 ? v635 : *(_QWORD *)v635;
            v454 = v452 >= 0 ? *(unsigned __int8 *)(v635 + 23) : *(_QWORD *)(v635 + 8);
            v455 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v451, v453, v454);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v455, (uint64_t)": ", 2);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
            v456 = v635;
            v635 = 0;
            if (v456)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v635, v456);
          }
        }
        std::string::basic_string[abi:ne180100]<0>(&v635, "split_conditions");
        v457 = (_DWORD **)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v635);
        v601 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v457);
        if (SHIBYTE(v637) < 0)
          operator delete((void *)v635);
        *(_QWORD *)__p = (uint64_t)(v601[3] - v601[2]) >> 3;
        if (*(_QWORD *)__p != v634)
        {
          dmlc::LogCheckFormat<unsigned long,int>(&v635);
          if (v635)
          {
            v458 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
            dmlc::LogMessageFatal::Entry::Init(v458, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
            v459 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
            v460 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v459, (uint64_t)"Check failed: ", 14);
            v461 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v460, (uint64_t)"conds.size() == n_nodes", 23);
            v462 = *(char *)(v635 + 23);
            v463 = v462 >= 0 ? v635 : *(_QWORD *)v635;
            v464 = v462 >= 0 ? *(unsigned __int8 *)(v635 + 23) : *(_QWORD *)(v635 + 8);
            v465 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v461, v463, v464);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v465, (uint64_t)": ", 2);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
            v466 = v635;
            v635 = 0;
            if (v466)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v635, v466);
          }
        }
        std::string::basic_string[abi:ne180100]<0>(&v635, "default_left");
        v467 = (_DWORD **)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v635);
        v599 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v467);
        if (SHIBYTE(v637) < 0)
          operator delete((void *)v635);
        *(_QWORD *)__p = (uint64_t)(v599[3] - v599[2]) >> 3;
        if (*(_QWORD *)__p != v634)
        {
          dmlc::LogCheckFormat<unsigned long,int>(&v635);
          if (v635)
          {
            v468 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
            dmlc::LogMessageFatal::Entry::Init(v468, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
            v469 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
            v470 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v469, (uint64_t)"Check failed: ", 14);
            v471 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v470, (uint64_t)"default_left.size() == n_nodes", 30);
            v472 = *(char *)(v635 + 23);
            v473 = v472 >= 0 ? v635 : *(_QWORD *)v635;
            v474 = v472 >= 0 ? *(unsigned __int8 *)(v635 + 23) : *(_QWORD *)(v635 + 8);
            v475 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v471, v473, v474);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v475, (uint64_t)": ", 2);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
            v476 = v635;
            v635 = 0;
            if (v476)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v635, v476);
          }
        }
        v477 = (char *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*(_DWORD **)a2) + 16;
        std::string::basic_string[abi:ne180100]<0>(&v635, "split_type");
        v478 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)v477, (const void **)&v635);
        v479 = (char *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*(_DWORD **)a2) + 24;
        if (SHIBYTE(v637) < 0)
          operator delete((void *)v635);
        v635 = 0;
        v636 = 0;
        v637 = 0;
        if (v479 != (char *)v478)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "split_type");
          v480 = (_DWORD **)(*(uint64_t (**)(_QWORD, _BYTE *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, __p);
          v481 = (uint64_t **)xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v480);
          if (&v635 != (uint64_t *)(v481 + 2))
            std::vector<xgboost::Json>::__assign_with_size[abi:ne180100]<xgboost::Json*,xgboost::Json*>((uint64_t)&v635, v481[2], v481[3], v481[3] - v481[2]);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
        }
        std::vector<xgboost::RTreeNodeStat>::vector(__p, v634);
        v482 = *v8;
        if (*v8)
        {
          *((_QWORD *)this + 27) = v482;
          operator delete(v482);
          *v8 = 0;
          *((_QWORD *)this + 27) = 0;
          *((_QWORD *)this + 28) = 0;
        }
        *((_OWORD *)this + 13) = *(_OWORD *)__p;
        *((_QWORD *)this + 28) = *(_QWORD *)&__p[16];
        std::vector<xgboost::RegTree::Node>::vector(__p, v634);
        v483 = *v9;
        if (*v9)
        {
          *((_QWORD *)this + 21) = v483;
          operator delete(v483);
          *v9 = 0;
          *((_QWORD *)this + 21) = 0;
          *((_QWORD *)this + 22) = 0;
        }
        *((_OWORD *)this + 10) = *(_OWORD *)__p;
        *((_QWORD *)this + 22) = *(_QWORD *)&__p[16];
        std::vector<xgboost::FeatureType>::vector(__p, v634);
        v484 = *v623;
        if (*v623)
        {
          *((_QWORD *)this + 30) = v484;
          operator delete(v484);
          *v623 = 0;
          *((_QWORD *)this + 30) = 0;
          *((_QWORD *)this + 31) = 0;
        }
        *(_OWORD *)((char *)this + 232) = *(_OWORD *)__p;
        *((_QWORD *)this + 31) = *(_QWORD *)&__p[16];
        std::vector<xgboost::RegTree::Segment>::vector(__p, v634);
        v485 = *v10;
        if (*v10)
        {
          *((_QWORD *)this + 36) = v485;
          operator delete(v485);
          *v10 = 0;
          *((_QWORD *)this + 36) = 0;
          *((_QWORD *)this + 37) = 0;
        }
        v486 = *(_QWORD *)__p;
        *((_QWORD *)this + 35) = *(_QWORD *)__p;
        v487 = *(_QWORD *)&__p[8];
        *((_OWORD *)this + 18) = *(_OWORD *)&__p[8];
        v632 = (v487 - v486) >> 4;
        v488 = v634;
        if (v632 != v634)
        {
          dmlc::LogCheckFormat<int,unsigned long>((uint64_t *)__p);
          if (*(_QWORD *)__p)
          {
            v489 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v632);
            dmlc::LogMessageFatal::Entry::Init(v489, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
            v490 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v632);
            v491 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v490, (uint64_t)"Check failed: ", 14);
            v492 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v491, (uint64_t)"n_nodes == split_categories_segments.size()", 43);
            v493 = *(char *)(*(_QWORD *)__p + 23);
            v494 = v493 >= 0 ? *(_QWORD *)__p : **(_QWORD **)__p;
            v495 = v493 >= 0 ? *(unsigned __int8 *)(*(_QWORD *)__p + 23) : *(_QWORD *)(*(_QWORD *)__p + 8);
            v496 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v492, v494, v495);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v496, (uint64_t)": ", 2);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v632);
            v497 = *(_QWORD *)__p;
            *(_QWORD *)__p = 0;
            if (v497)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)__p, v497);
          }
          v488 = v634;
        }
        if (v488 >= 1)
        {
          v498 = 0;
          v499 = 0;
          v500 = 0;
          do
          {
            v501 = (char *)*v8;
            *(_DWORD *)&v501[v498] = *((_DWORD *)xgboost::Cast<xgboost::JsonNumber const,xgboost::Value const>(*(_DWORD **)(v622[2] + 8 * v500))
                                     + 4);
            v502 = &v501[v498];
            *((_DWORD *)v502 + 1) = *((_DWORD *)xgboost::Cast<xgboost::JsonNumber const,xgboost::Value const>(*(_DWORD **)(v618[2] + 8 * v500))
                                    + 4);
            *((_DWORD *)v502 + 2) = *((_DWORD *)xgboost::Cast<xgboost::JsonNumber const,xgboost::Value const>(*(_DWORD **)(v613[2] + 8 * v500))
                                    + 4);
            v503 = (char *)*v9;
            v504 = *((_DWORD *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*(_DWORD **)(v609[2] + 8 * v500))
                   + 4);
            v505 = *((_DWORD *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*(_DWORD **)(v607[2] + 8 * v500))
                   + 4);
            v506 = *((_DWORD *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*(_DWORD **)(v605[2] + 8 * v500))
                   + 4);
            v507 = *((_DWORD *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*(_DWORD **)(v603[2] + 8 * v500))
                   + 4);
            v508 = *((_DWORD *)xgboost::Cast<xgboost::JsonNumber const,xgboost::Value const>(*(_DWORD **)(v601[2] + 8 * v500))
                   + 4);
            v509 = xgboost::GetElem<xgboost::JsonBoolean,xgboost::Json>(v599[2], v500);
            v510 = (unsigned int *)&v503[v499];
            *v510 = v506 | 0x80000000;
            v510[1] = v504;
            if (v509)
              v511 = v507 | 0x80000000;
            else
              v511 = v507;
            v510[2] = v505;
            v510[3] = v511;
            v510[4] = v508;
            if (v479 != (char *)v478)
              *((_BYTE *)*v623 + v500) = *((_QWORD *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*(_DWORD **)(v635 + 8 * v500))
                                         + 2);
            ++v500;
            v499 += 20;
            v498 += 16;
            this = v614;
            v9 = v626;
            v8 = v629;
          }
          while (v500 < v634);
        }
        *(_QWORD *)__p = &v635;
        std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        v138 = v597;
        if (v479 == (char *)v478)
          goto LABEL_617;
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v635, "tree_param");
        v12 = (_DWORD **)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v635);
        xgboost::FromJson<xgboost::TreeParam>(&v638, *v12, (uint64_t)this + 8);
        *(_QWORD *)__p = &v638;
        std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if (SHIBYTE(v637) < 0)
          operator delete((void *)v635);
        v634 = *((_DWORD *)this + 3);
        *(_DWORD *)__p = v634;
        LODWORD(v632) = 0;
        if (!v634)
        {
          dmlc::LogCheckFormat<int,int>(&v635);
          if (v635)
          {
            v578 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
            dmlc::LogMessageFatal::Entry::Init(v578, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
            v579 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
            v580 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v579, (uint64_t)"Check failed: ", 14);
            v581 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v580, (uint64_t)"n_nodes != 0", 12);
            v582 = *(char *)(v635 + 23);
            v583 = v582 >= 0 ? v635 : *(_QWORD *)v635;
            v584 = v582 >= 0 ? *(unsigned __int8 *)(v635 + 23) : *(_QWORD *)(v635 + 8);
            v585 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v581, v583, v584);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v585, (uint64_t)": ", 2);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
            v586 = v635;
            v635 = 0;
            if (v586)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v635, v586);
          }
        }
        std::string::basic_string[abi:ne180100]<0>(&v635, "loss_changes");
        v13 = (_DWORD **)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v635);
        v619 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v13);
        if (SHIBYTE(v637) < 0)
          operator delete((void *)v635);
        *(_QWORD *)__p = (uint64_t)(v619[3] - v619[2]) >> 3;
        if (*(_QWORD *)__p != v634)
        {
          dmlc::LogCheckFormat<unsigned long,int>(&v635);
          if (v635)
          {
            v14 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
            dmlc::LogMessageFatal::Entry::Init(v14, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
            v15 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
            v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Check failed: ", 14);
            v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"loss_changes.size() == n_nodes", 30);
            v18 = *(char *)(v635 + 23);
            v19 = v18 >= 0 ? v635 : *(_QWORD *)v635;
            v20 = v18 >= 0 ? *(unsigned __int8 *)(v635 + 23) : *(_QWORD *)(v635 + 8);
            v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)": ", 2);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
            v22 = v635;
            v635 = 0;
            if (v22)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v635, v22);
          }
        }
        std::string::basic_string[abi:ne180100]<0>(&v635, "sum_hessian");
        v23 = (_DWORD **)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v635);
        v615 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v23);
        if (SHIBYTE(v637) < 0)
          operator delete((void *)v635);
        *(_QWORD *)__p = (uint64_t)(v615[3] - v615[2]) >> 3;
        if (*(_QWORD *)__p != v634)
        {
          dmlc::LogCheckFormat<unsigned long,int>(&v635);
          if (v635)
          {
            v24 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
            dmlc::LogMessageFatal::Entry::Init(v24, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
            v25 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
            v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Check failed: ", 14);
            v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"sum_hessian.size() == n_nodes", 29);
            v28 = *(char *)(v635 + 23);
            v29 = v28 >= 0 ? v635 : *(_QWORD *)v635;
            v30 = v28 >= 0 ? *(unsigned __int8 *)(v635 + 23) : *(_QWORD *)(v635 + 8);
            v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, v29, v30);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)": ", 2);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
            v32 = v635;
            v635 = 0;
            if (v32)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v635, v32);
          }
        }
        std::string::basic_string[abi:ne180100]<0>(&v635, "base_weights");
        v33 = (_DWORD **)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v635);
        v610 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v33);
        if (SHIBYTE(v637) < 0)
          operator delete((void *)v635);
        *(_QWORD *)__p = (uint64_t)(v610[3] - v610[2]) >> 3;
        if (*(_QWORD *)__p != v634)
        {
          dmlc::LogCheckFormat<unsigned long,int>(&v635);
          if (v635)
          {
            v34 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
            dmlc::LogMessageFatal::Entry::Init(v34, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
            v35 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
            v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"Check failed: ", 14);
            v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"base_weights.size() == n_nodes", 30);
            v38 = *(char *)(v635 + 23);
            v39 = v38 >= 0 ? v635 : *(_QWORD *)v635;
            v40 = v38 >= 0 ? *(unsigned __int8 *)(v635 + 23) : *(_QWORD *)(v635 + 8);
            v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, v39, v40);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)": ", 2);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
            v42 = v635;
            v635 = 0;
            if (v42)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v635, v42);
          }
        }
        std::string::basic_string[abi:ne180100]<0>(&v635, "left_children");
        v43 = (_DWORD **)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v635);
        v608 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v43);
        if (SHIBYTE(v637) < 0)
          operator delete((void *)v635);
        *(_QWORD *)__p = (uint64_t)(v608[3] - v608[2]) >> 3;
        if (*(_QWORD *)__p != v634)
        {
          dmlc::LogCheckFormat<unsigned long,int>(&v635);
          if (v635)
          {
            v44 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
            dmlc::LogMessageFatal::Entry::Init(v44, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
            v45 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
            v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Check failed: ", 14);
            v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"lefts.size() == n_nodes", 23);
            v48 = *(char *)(v635 + 23);
            v49 = v48 >= 0 ? v635 : *(_QWORD *)v635;
            v50 = v48 >= 0 ? *(unsigned __int8 *)(v635 + 23) : *(_QWORD *)(v635 + 8);
            v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, v49, v50);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)": ", 2);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
            v52 = v635;
            v635 = 0;
            if (v52)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v635, v52);
          }
        }
        std::string::basic_string[abi:ne180100]<0>(&v635, "right_children");
        v53 = (_DWORD **)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v635);
        v606 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v53);
        if (SHIBYTE(v637) < 0)
          operator delete((void *)v635);
        *(_QWORD *)__p = (uint64_t)(v606[3] - v606[2]) >> 3;
        if (*(_QWORD *)__p != v634)
        {
          dmlc::LogCheckFormat<unsigned long,int>(&v635);
          if (v635)
          {
            v54 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
            dmlc::LogMessageFatal::Entry::Init(v54, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
            v55 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
            v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"Check failed: ", 14);
            v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"rights.size() == n_nodes", 24);
            v58 = *(char *)(v635 + 23);
            v59 = v58 >= 0 ? v635 : *(_QWORD *)v635;
            v60 = v58 >= 0 ? *(unsigned __int8 *)(v635 + 23) : *(_QWORD *)(v635 + 8);
            v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, v59, v60);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)": ", 2);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
            v62 = v635;
            v635 = 0;
            if (v62)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v635, v62);
          }
        }
        std::string::basic_string[abi:ne180100]<0>(&v635, "parents");
        v63 = (_DWORD **)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v635);
        v604 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v63);
        if (SHIBYTE(v637) < 0)
          operator delete((void *)v635);
        *(_QWORD *)__p = (uint64_t)(v604[3] - v604[2]) >> 3;
        if (*(_QWORD *)__p != v634)
        {
          dmlc::LogCheckFormat<unsigned long,int>(&v635);
          if (v635)
          {
            v64 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
            dmlc::LogMessageFatal::Entry::Init(v64, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
            v65 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
            v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"Check failed: ", 14);
            v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"parents.size() == n_nodes", 25);
            v68 = *(char *)(v635 + 23);
            v69 = v68 >= 0 ? v635 : *(_QWORD *)v635;
            v70 = v68 >= 0 ? *(unsigned __int8 *)(v635 + 23) : *(_QWORD *)(v635 + 8);
            v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v69, v70);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)": ", 2);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
            v72 = v635;
            v635 = 0;
            if (v72)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v635, v72);
          }
        }
        std::string::basic_string[abi:ne180100]<0>(&v635, "split_indices");
        v73 = (_DWORD **)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v635);
        v602 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v73);
        if (SHIBYTE(v637) < 0)
          operator delete((void *)v635);
        *(_QWORD *)__p = (uint64_t)(v602[3] - v602[2]) >> 3;
        if (*(_QWORD *)__p != v634)
        {
          dmlc::LogCheckFormat<unsigned long,int>(&v635);
          if (v635)
          {
            v74 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
            dmlc::LogMessageFatal::Entry::Init(v74, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
            v75 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
            v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"Check failed: ", 14);
            v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"indices.size() == n_nodes", 25);
            v78 = *(char *)(v635 + 23);
            v79 = v78 >= 0 ? v635 : *(_QWORD *)v635;
            v80 = v78 >= 0 ? *(unsigned __int8 *)(v635 + 23) : *(_QWORD *)(v635 + 8);
            v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, v79, v80);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)": ", 2);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
            v82 = v635;
            v635 = 0;
            if (v82)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v635, v82);
          }
        }
        std::string::basic_string[abi:ne180100]<0>(&v635, "split_conditions");
        v83 = (_DWORD **)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v635);
        v600 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v83);
        if (SHIBYTE(v637) < 0)
          operator delete((void *)v635);
        *(_QWORD *)__p = (uint64_t)(v600[3] - v600[2]) >> 3;
        if (*(_QWORD *)__p != v634)
        {
          dmlc::LogCheckFormat<unsigned long,int>(&v635);
          if (v635)
          {
            v84 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
            dmlc::LogMessageFatal::Entry::Init(v84, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
            v85 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
            v86 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)"Check failed: ", 14);
            v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)"conds.size() == n_nodes", 23);
            v88 = *(char *)(v635 + 23);
            v89 = v88 >= 0 ? v635 : *(_QWORD *)v635;
            v90 = v88 >= 0 ? *(unsigned __int8 *)(v635 + 23) : *(_QWORD *)(v635 + 8);
            v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, v89, v90);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)": ", 2);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
            v92 = v635;
            v635 = 0;
            if (v92)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v635, v92);
          }
        }
        std::string::basic_string[abi:ne180100]<0>(&v635, "default_left");
        v93 = (_DWORD **)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v635);
        v598 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v93);
        if (SHIBYTE(v637) < 0)
          operator delete((void *)v635);
        *(_QWORD *)__p = (uint64_t)(v598[3] - v598[2]) >> 3;
        if (*(_QWORD *)__p != v634)
        {
          dmlc::LogCheckFormat<unsigned long,int>(&v635);
          if (v635)
          {
            v94 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
            dmlc::LogMessageFatal::Entry::Init(v94, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
            v95 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
            v96 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)"Check failed: ", 14);
            v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)"default_left.size() == n_nodes", 30);
            v98 = *(char *)(v635 + 23);
            v99 = v98 >= 0 ? v635 : *(_QWORD *)v635;
            v100 = v98 >= 0 ? *(unsigned __int8 *)(v635 + 23) : *(_QWORD *)(v635 + 8);
            v101 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, v99, v100);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)": ", 2);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
            v102 = v635;
            v635 = 0;
            if (v102)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v635, v102);
          }
        }
        v103 = (char *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*(_DWORD **)a2) + 16;
        std::string::basic_string[abi:ne180100]<0>(&v635, "split_type");
        v104 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)v103, (const void **)&v635);
        v596 = v4;
        v105 = (char *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*(_DWORD **)a2) + 24;
        if (SHIBYTE(v637) < 0)
          operator delete((void *)v635);
        v635 = 0;
        v636 = 0;
        v637 = 0;
        if (v105 != (char *)v104)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "split_type");
          v106 = (_DWORD **)(*(uint64_t (**)(_QWORD, _BYTE *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, __p);
          v107 = (uint64_t **)xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v106);
          if (&v635 != (uint64_t *)(v107 + 2))
            std::vector<xgboost::Json>::__assign_with_size[abi:ne180100]<xgboost::Json*,xgboost::Json*>((uint64_t)&v635, v107[2], v107[3], v107[3] - v107[2]);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
        }
        std::vector<xgboost::RTreeNodeStat>::vector(__p, v634);
        v108 = *v8;
        if (*v8)
        {
          *((_QWORD *)this + 27) = v108;
          operator delete(v108);
          *v8 = 0;
          *((_QWORD *)this + 27) = 0;
          *((_QWORD *)this + 28) = 0;
        }
        *((_OWORD *)this + 13) = *(_OWORD *)__p;
        *((_QWORD *)this + 28) = *(_QWORD *)&__p[16];
        std::vector<xgboost::RegTree::Node>::vector(__p, v634);
        v109 = *v9;
        if (*v9)
        {
          *((_QWORD *)this + 21) = v109;
          operator delete(v109);
          *v9 = 0;
          *((_QWORD *)this + 21) = 0;
          *((_QWORD *)this + 22) = 0;
        }
        *((_OWORD *)this + 10) = *(_OWORD *)__p;
        *((_QWORD *)this + 22) = *(_QWORD *)&__p[16];
        std::vector<xgboost::FeatureType>::vector(__p, v634);
        v110 = *v623;
        if (*v623)
        {
          *((_QWORD *)this + 30) = v110;
          operator delete(v110);
          *v623 = 0;
          *((_QWORD *)this + 30) = 0;
          *((_QWORD *)this + 31) = 0;
        }
        *(_OWORD *)((char *)this + 232) = *(_OWORD *)__p;
        *((_QWORD *)this + 31) = *(_QWORD *)&__p[16];
        std::vector<xgboost::RegTree::Segment>::vector(__p, v634);
        v111 = *v10;
        if (*v10)
        {
          *((_QWORD *)this + 36) = v111;
          operator delete(v111);
          *v10 = 0;
          *((_QWORD *)this + 36) = 0;
          *((_QWORD *)this + 37) = 0;
        }
        v112 = *(_QWORD *)__p;
        *((_QWORD *)this + 35) = *(_QWORD *)__p;
        v113 = *(_QWORD *)&__p[8];
        *((_OWORD *)this + 18) = *(_OWORD *)&__p[8];
        v632 = (v113 - v112) >> 4;
        v114 = v634;
        if (v632 != v634)
        {
          dmlc::LogCheckFormat<int,unsigned long>((uint64_t *)__p);
          if (*(_QWORD *)__p)
          {
            v115 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v632);
            dmlc::LogMessageFatal::Entry::Init(v115, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
            v116 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v632);
            v117 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116, (uint64_t)"Check failed: ", 14);
            v118 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v117, (uint64_t)"n_nodes == split_categories_segments.size()", 43);
            v119 = *(char *)(*(_QWORD *)__p + 23);
            v120 = v119 >= 0 ? *(_QWORD *)__p : **(_QWORD **)__p;
            v121 = v119 >= 0 ? *(unsigned __int8 *)(*(_QWORD *)__p + 23) : *(_QWORD *)(*(_QWORD *)__p + 8);
            v122 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v118, v120, v121);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v122, (uint64_t)": ", 2);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v632);
            v123 = *(_QWORD *)__p;
            *(_QWORD *)__p = 0;
            if (v123)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)__p, v123);
          }
          v114 = v634;
        }
        if (v114 >= 1)
        {
          v124 = 0;
          v125 = 0;
          v126 = 0;
          do
          {
            v127 = (char *)*v8;
            *(_DWORD *)&v127[v124] = *((_DWORD *)xgboost::Cast<xgboost::JsonNumber const,xgboost::Value const>(*(_DWORD **)(v619[2] + 8 * v126))
                                     + 4);
            v128 = &v127[v124];
            *((_DWORD *)v128 + 1) = *((_DWORD *)xgboost::Cast<xgboost::JsonNumber const,xgboost::Value const>(*(_DWORD **)(v615[2] + 8 * v126))
                                    + 4);
            *((_DWORD *)v128 + 2) = *((_DWORD *)xgboost::Cast<xgboost::JsonNumber const,xgboost::Value const>(*(_DWORD **)(v610[2] + 8 * v126))
                                    + 4);
            v129 = (char *)*v9;
            v130 = *((_DWORD *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*(_DWORD **)(v608[2] + 8 * v126))
                   + 4);
            v131 = *((_DWORD *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*(_DWORD **)(v606[2] + 8 * v126))
                   + 4);
            v132 = *((_DWORD *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*(_DWORD **)(v604[2] + 8 * v126))
                   + 4);
            v133 = *((_DWORD *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*(_DWORD **)(v602[2] + 8 * v126))
                   + 4);
            v134 = *((_DWORD *)xgboost::Cast<xgboost::JsonNumber const,xgboost::Value const>(*(_DWORD **)(v600[2] + 8 * v126))
                   + 4);
            v135 = xgboost::GetElem<xgboost::JsonBoolean,xgboost::Json>(v598[2], v126);
            v136 = (unsigned int *)&v129[v125];
            *v136 = v132 | 0x80000000;
            v136[1] = v130;
            if (v135)
              v137 = v133 | 0x80000000;
            else
              v137 = v133;
            v136[2] = v131;
            v136[3] = v137;
            v136[4] = v134;
            if (v105 != (char *)v104)
              *((_BYTE *)*v623 + v126) = *((_QWORD *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*(_DWORD **)(v635 + 8 * v126))
                                         + 2);
            ++v126;
            v125 += 20;
            v124 += 16;
            this = v614;
            v9 = v626;
            v8 = v629;
          }
          while (v126 < v634);
        }
        *(_QWORD *)__p = &v635;
        std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        v138 = v597;
        if (v105 == (char *)v104)
          goto LABEL_617;
        if (v596 == 7)
        {
LABEL_616:
          xgboost::RegTree::LoadCategoricalSplit<true>((uint64_t)this, v138);
          goto LABEL_619;
        }
      }
      xgboost::RegTree::LoadCategoricalSplit<false>((uint64_t)this, v138);
      goto LABEL_619;
    }
    std::string::basic_string[abi:ne180100]<0>(&v635, "tree_param");
    v250 = (_DWORD **)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v635);
    xgboost::FromJson<xgboost::TreeParam>(&v638, *v250, (uint64_t)this + 8);
    *(_QWORD *)__p = &v638;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (SHIBYTE(v637) < 0)
      operator delete((void *)v635);
    v634 = *((_DWORD *)this + 3);
    *(_DWORD *)__p = v634;
    LODWORD(v632) = 0;
    if (!v634)
    {
      dmlc::LogCheckFormat<int,int>(&v635);
      if (v635)
      {
        v569 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        dmlc::LogMessageFatal::Entry::Init(v569, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
        v570 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        v571 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v570, (uint64_t)"Check failed: ", 14);
        v572 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v571, (uint64_t)"n_nodes != 0", 12);
        v573 = *(char *)(v635 + 23);
        v574 = v573 >= 0 ? v635 : *(_QWORD *)v635;
        v575 = v573 >= 0 ? *(unsigned __int8 *)(v635 + 23) : *(_QWORD *)(v635 + 8);
        v576 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v572, v574, v575);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v576, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
        v577 = v635;
        v635 = 0;
        if (v577)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v635, v577);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v635, "loss_changes");
    v251 = (_DWORD **)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v635);
    v252 = xgboost::Cast<xgboost::JsonTypedArray<float,(xgboost::Value::ValueKind)7> const,xgboost::Value>(*v251);
    if (SHIBYTE(v637) < 0)
      operator delete((void *)v635);
    *(_QWORD *)__p = (uint64_t)(v252[3] - v252[2]) >> 2;
    if (*(_QWORD *)__p != v634)
    {
      dmlc::LogCheckFormat<unsigned long,int>(&v635);
      if (v635)
      {
        v253 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        dmlc::LogMessageFatal::Entry::Init(v253, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
        v254 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        v255 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v254, (uint64_t)"Check failed: ", 14);
        v256 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v255, (uint64_t)"loss_changes.size() == n_nodes", 30);
        v257 = *(char *)(v635 + 23);
        v258 = v257 >= 0 ? v635 : *(_QWORD *)v635;
        v259 = v257 >= 0 ? *(unsigned __int8 *)(v635 + 23) : *(_QWORD *)(v635 + 8);
        v260 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v256, v258, v259);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v260, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
        v261 = v635;
        v635 = 0;
        if (v261)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v635, v261);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v635, "sum_hessian");
    v262 = (_DWORD **)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v635);
    v263 = xgboost::Cast<xgboost::JsonTypedArray<float,(xgboost::Value::ValueKind)7> const,xgboost::Value>(*v262);
    if (SHIBYTE(v637) < 0)
      operator delete((void *)v635);
    *(_QWORD *)__p = (uint64_t)(v263[3] - v263[2]) >> 2;
    if (*(_QWORD *)__p != v634)
    {
      dmlc::LogCheckFormat<unsigned long,int>(&v635);
      if (v635)
      {
        v264 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        dmlc::LogMessageFatal::Entry::Init(v264, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
        v265 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        v266 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v265, (uint64_t)"Check failed: ", 14);
        v267 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v266, (uint64_t)"sum_hessian.size() == n_nodes", 29);
        v268 = *(char *)(v635 + 23);
        v269 = v268 >= 0 ? v635 : *(_QWORD *)v635;
        v270 = v268 >= 0 ? *(unsigned __int8 *)(v635 + 23) : *(_QWORD *)(v635 + 8);
        v271 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v267, v269, v270);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v271, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
        v272 = v635;
        v635 = 0;
        if (v272)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v635, v272);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v635, "base_weights");
    v273 = (_DWORD **)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v635);
    v631 = xgboost::Cast<xgboost::JsonTypedArray<float,(xgboost::Value::ValueKind)7> const,xgboost::Value>(*v273);
    if (SHIBYTE(v637) < 0)
      operator delete((void *)v635);
    *(_QWORD *)__p = (uint64_t)(v631[3] - v631[2]) >> 2;
    if (*(_QWORD *)__p != v634)
    {
      dmlc::LogCheckFormat<unsigned long,int>(&v635);
      if (v635)
      {
        v274 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        dmlc::LogMessageFatal::Entry::Init(v274, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
        v275 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        v276 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v275, (uint64_t)"Check failed: ", 14);
        v277 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v276, (uint64_t)"base_weights.size() == n_nodes", 30);
        v278 = *(char *)(v635 + 23);
        v279 = v278 >= 0 ? v635 : *(_QWORD *)v635;
        v280 = v278 >= 0 ? *(unsigned __int8 *)(v635 + 23) : *(_QWORD *)(v635 + 8);
        v281 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v277, v279, v280);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v281, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
        v282 = v635;
        v635 = 0;
        if (v282)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v635, v282);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v635, "left_children");
    v283 = (_DWORD **)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v635);
    v628 = xgboost::Cast<xgboost::JsonTypedArray<int,(xgboost::Value::ValueKind)9> const,xgboost::Value>(*v283);
    if (SHIBYTE(v637) < 0)
      operator delete((void *)v635);
    *(_QWORD *)__p = (uint64_t)(v628[3] - v628[2]) >> 2;
    if (*(_QWORD *)__p != v634)
    {
      dmlc::LogCheckFormat<unsigned long,int>(&v635);
      if (v635)
      {
        v284 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        dmlc::LogMessageFatal::Entry::Init(v284, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
        v285 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        v286 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v285, (uint64_t)"Check failed: ", 14);
        v287 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v286, (uint64_t)"lefts.size() == n_nodes", 23);
        v288 = *(char *)(v635 + 23);
        v289 = v288 >= 0 ? v635 : *(_QWORD *)v635;
        v290 = v288 >= 0 ? *(unsigned __int8 *)(v635 + 23) : *(_QWORD *)(v635 + 8);
        v291 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v287, v289, v290);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v291, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
        v292 = v635;
        v635 = 0;
        if (v292)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v635, v292);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v635, "right_children");
    v293 = (_DWORD **)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v635);
    v625 = xgboost::Cast<xgboost::JsonTypedArray<int,(xgboost::Value::ValueKind)9> const,xgboost::Value>(*v293);
    if (SHIBYTE(v637) < 0)
      operator delete((void *)v635);
    *(_QWORD *)__p = (uint64_t)(v625[3] - v625[2]) >> 2;
    if (*(_QWORD *)__p != v634)
    {
      dmlc::LogCheckFormat<unsigned long,int>(&v635);
      if (v635)
      {
        v294 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        dmlc::LogMessageFatal::Entry::Init(v294, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
        v295 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        v296 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v295, (uint64_t)"Check failed: ", 14);
        v297 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v296, (uint64_t)"rights.size() == n_nodes", 24);
        v298 = *(char *)(v635 + 23);
        v299 = v298 >= 0 ? v635 : *(_QWORD *)v635;
        v300 = v298 >= 0 ? *(unsigned __int8 *)(v635 + 23) : *(_QWORD *)(v635 + 8);
        v301 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v297, v299, v300);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v301, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
        v302 = v635;
        v635 = 0;
        if (v302)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v635, v302);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v635, "parents");
    v303 = (_DWORD **)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v635);
    v621 = xgboost::Cast<xgboost::JsonTypedArray<int,(xgboost::Value::ValueKind)9> const,xgboost::Value>(*v303);
    if (SHIBYTE(v637) < 0)
      operator delete((void *)v635);
    *(_QWORD *)__p = (uint64_t)(v621[3] - v621[2]) >> 2;
    if (*(_QWORD *)__p != v634)
    {
      dmlc::LogCheckFormat<unsigned long,int>(&v635);
      if (v635)
      {
        v304 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        dmlc::LogMessageFatal::Entry::Init(v304, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
        v305 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        v306 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v305, (uint64_t)"Check failed: ", 14);
        v307 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v306, (uint64_t)"parents.size() == n_nodes", 25);
        v308 = *(char *)(v635 + 23);
        v309 = v308 >= 0 ? v635 : *(_QWORD *)v635;
        v310 = v308 >= 0 ? *(unsigned __int8 *)(v635 + 23) : *(_QWORD *)(v635 + 8);
        v311 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v307, v309, v310);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v311, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
        v312 = v635;
        v635 = 0;
        if (v312)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v635, v312);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v635, "split_indices");
    v313 = (_DWORD **)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v635);
    v617 = xgboost::Cast<xgboost::JsonTypedArray<int,(xgboost::Value::ValueKind)9> const,xgboost::Value>(*v313);
    if (SHIBYTE(v637) < 0)
      operator delete((void *)v635);
    *(_QWORD *)__p = (uint64_t)(v617[3] - v617[2]) >> 2;
    if (*(_QWORD *)__p != v634)
    {
      dmlc::LogCheckFormat<unsigned long,int>(&v635);
      if (v635)
      {
        v314 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        dmlc::LogMessageFatal::Entry::Init(v314, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
        v315 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        v316 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v315, (uint64_t)"Check failed: ", 14);
        v317 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v316, (uint64_t)"indices.size() == n_nodes", 25);
        v318 = *(char *)(v635 + 23);
        v319 = v318 >= 0 ? v635 : *(_QWORD *)v635;
        v320 = v318 >= 0 ? *(unsigned __int8 *)(v635 + 23) : *(_QWORD *)(v635 + 8);
        v321 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v317, v319, v320);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v321, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
        v322 = v635;
        v635 = 0;
        if (v322)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v635, v322);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v635, "split_conditions");
    v323 = (_DWORD **)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v635);
    v324 = xgboost::Cast<xgboost::JsonTypedArray<float,(xgboost::Value::ValueKind)7> const,xgboost::Value>(*v323);
    if (SHIBYTE(v637) < 0)
      operator delete((void *)v635);
    *(_QWORD *)__p = (uint64_t)(v324[3] - v324[2]) >> 2;
    if (*(_QWORD *)__p != v634)
    {
      dmlc::LogCheckFormat<unsigned long,int>(&v635);
      if (v635)
      {
        v325 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        dmlc::LogMessageFatal::Entry::Init(v325, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
        v326 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        v327 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v326, (uint64_t)"Check failed: ", 14);
        v328 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v327, (uint64_t)"conds.size() == n_nodes", 23);
        v329 = *(char *)(v635 + 23);
        v330 = v329 >= 0 ? v635 : *(_QWORD *)v635;
        v331 = v329 >= 0 ? *(unsigned __int8 *)(v635 + 23) : *(_QWORD *)(v635 + 8);
        v332 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v328, v330, v331);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v332, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
        v333 = v635;
        v635 = 0;
        if (v333)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v635, v333);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v635, "default_left");
    v334 = (_DWORD **)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v635);
    v335 = xgboost::Cast<xgboost::JsonTypedArray<unsigned char,(xgboost::Value::ValueKind)8> const,xgboost::Value>(*v334);
    if (SHIBYTE(v637) < 0)
      operator delete((void *)v635);
    *(_QWORD *)__p = v335[3] - v335[2];
    if (*(_QWORD *)__p != v634)
    {
      dmlc::LogCheckFormat<unsigned long,int>(&v635);
      if (v635)
      {
        v336 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        dmlc::LogMessageFatal::Entry::Init(v336, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
        v337 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        v338 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v337, (uint64_t)"Check failed: ", 14);
        v339 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v338, (uint64_t)"default_left.size() == n_nodes", 30);
        v340 = *(char *)(v635 + 23);
        v341 = v340 >= 0 ? v635 : *(_QWORD *)v635;
        v342 = v340 >= 0 ? *(unsigned __int8 *)(v635 + 23) : *(_QWORD *)(v635 + 8);
        v343 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v339, v341, v342);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v343, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
        v344 = v635;
        v635 = 0;
        if (v344)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v635, v344);
      }
    }
    v345 = (char *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*(_DWORD **)a2) + 16;
    std::string::basic_string[abi:ne180100]<0>(&v635, "split_type");
    v235 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)v345, (const void **)&v635);
    v236 = (char *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*(_DWORD **)a2) + 24;
    if (SHIBYTE(v637) < 0)
      operator delete((void *)v635);
    v635 = 0;
    v636 = 0;
    v637 = 0;
    if (v236 != (char *)v235)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "split_type");
      v346 = (_DWORD **)(*(uint64_t (**)(_QWORD, _BYTE *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, __p);
      v347 = (char **)xgboost::Cast<xgboost::JsonTypedArray<unsigned char,(xgboost::Value::ValueKind)8> const,xgboost::Value>(*v346);
      if (&v635 != (uint64_t *)(v347 + 2))
        std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v635, v347[2], v347[3], v347[3] - v347[2]);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
    v612 = v263;
    std::vector<xgboost::RTreeNodeStat>::vector(__p, v634);
    v348 = (_QWORD *)((char *)v614 + 208);
    v349 = (void *)*((_QWORD *)v614 + 26);
    if (v349)
    {
      *((_QWORD *)v614 + 27) = v349;
      operator delete(v349);
      *v348 = 0;
      *((_QWORD *)v614 + 27) = 0;
      *((_QWORD *)v614 + 28) = 0;
    }
    *((_OWORD *)v614 + 13) = *(_OWORD *)__p;
    *((_QWORD *)v614 + 28) = *(_QWORD *)&__p[16];
    std::vector<xgboost::RegTree::Node>::vector(__p, v634);
    v350 = (_QWORD *)((char *)v614 + 160);
    v351 = (void *)*((_QWORD *)v614 + 20);
    if (v351)
    {
      *((_QWORD *)v614 + 21) = v351;
      operator delete(v351);
      *v350 = 0;
      *((_QWORD *)v614 + 21) = 0;
      *((_QWORD *)v614 + 22) = 0;
    }
    *((_OWORD *)v614 + 10) = *(_OWORD *)__p;
    *((_QWORD *)v614 + 22) = *(_QWORD *)&__p[16];
    std::vector<xgboost::FeatureType>::vector(__p, v634);
    v352 = (_QWORD *)((char *)v614 + 232);
    v353 = (void *)*((_QWORD *)v614 + 29);
    if (v353)
    {
      *((_QWORD *)v614 + 30) = v353;
      operator delete(v353);
      *v352 = 0;
      *((_QWORD *)v614 + 30) = 0;
      *((_QWORD *)v614 + 31) = 0;
    }
    *(_OWORD *)((char *)v614 + 232) = *(_OWORD *)__p;
    *((_QWORD *)v614 + 31) = *(_QWORD *)&__p[16];
    std::vector<xgboost::RegTree::Segment>::vector(__p, v634);
    v354 = (void *)*((_QWORD *)v614 + 35);
    if (v354)
    {
      *((_QWORD *)v614 + 36) = v354;
      operator delete(v354);
      *((_QWORD *)v614 + 35) = 0;
      *((_QWORD *)v614 + 36) = 0;
      *((_QWORD *)v614 + 37) = 0;
    }
    v355 = *(_QWORD *)__p;
    *((_QWORD *)v614 + 35) = *(_QWORD *)__p;
    v356 = *(_QWORD *)&__p[8];
    *((_OWORD *)v614 + 18) = *(_OWORD *)&__p[8];
    v632 = (v356 - v355) >> 4;
    v357 = v634;
    if (v632 == v634)
    {
      v358 = v612;
    }
    else
    {
      dmlc::LogCheckFormat<int,unsigned long>((uint64_t *)__p);
      v358 = v612;
      if (*(_QWORD *)__p)
      {
        v512 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v632);
        dmlc::LogMessageFatal::Entry::Init(v512, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
        v513 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v632);
        v514 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v513, (uint64_t)"Check failed: ", 14);
        v515 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v514, (uint64_t)"n_nodes == split_categories_segments.size()", 43);
        v516 = *(char *)(*(_QWORD *)__p + 23);
        v517 = v516 >= 0 ? *(_QWORD *)__p : **(_QWORD **)__p;
        v518 = v516 >= 0 ? *(unsigned __int8 *)(*(_QWORD *)__p + 23) : *(_QWORD *)(*(_QWORD *)__p + 8);
        v519 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v515, v517, v518);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v519, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v632);
        v520 = *(_QWORD *)__p;
        *(_QWORD *)__p = 0;
        if (v520)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)__p, v520);
      }
      v357 = v634;
    }
    if (v357 >= 1)
    {
      v521 = 0;
      v522 = 0;
      v523 = 0;
      do
      {
        v524 = (_DWORD *)(*v348 + v521);
        *v524 = *(_DWORD *)(v252[2] + 4 * v523);
        v524[1] = *(_DWORD *)(v358[2] + 4 * v523);
        v524[2] = *(_DWORD *)(v631[2] + 4 * v523);
        v525 = (unsigned int *)(*v350 + v522);
        v526 = *(_DWORD *)(v628[2] + 4 * v523);
        v527 = *(_DWORD *)(v625[2] + 4 * v523);
        v528 = *(_DWORD *)(v617[2] + 4 * v523);
        v529 = *(_DWORD *)(v324[2] + 4 * v523);
        if (*(_BYTE *)(v335[2] + v523) == 1)
          v528 |= 0x80000000;
        *v525 = *(_DWORD *)(v621[2] + 4 * v523) | 0x80000000;
        v525[1] = v526;
        v525[2] = v527;
        v525[3] = v528;
        v525[4] = v529;
        if (v236 != (char *)v235)
          *(_BYTE *)(*v352 + v523) = *(_BYTE *)(v635 + v523);
        ++v523;
        v522 += 20;
        v521 += 16;
      }
      while (v523 < v634);
    }
  }
  if (v635)
  {
    v636 = v635;
    operator delete((void *)v635);
  }
  this = v614;
  v138 = v597;
  if (v236 != (char *)v235)
    goto LABEL_616;
LABEL_617:
  std::vector<xgboost::RTreeNodeStat>::resize((uint64_t)this + 280, *((int *)this + 3));
  v530 = (void *)*((_QWORD *)this + 29);
  v531 = *((_QWORD *)this + 30) - (_QWORD)v530;
  if (v531 >= 1)
    bzero(v530, v531);
LABEL_619:
  v533 = (void **)((char *)this + 184);
  v532 = (char *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 24) = v532;
  v534 = *((_DWORD *)this + 3);
  if (v534 >= 2)
  {
    v535 = (_QWORD *)((char *)this + 200);
    for (i = 1; i < v534; ++i)
    {
      if (*(_DWORD *)(*((_QWORD *)this + 20) + 20 * i + 12) == -1)
      {
        if ((unint64_t)v532 >= *v535)
        {
          v538 = (char *)*v533;
          v539 = (v532 - (_BYTE *)*v533) >> 2;
          v540 = v539 + 1;
          if ((unint64_t)(v539 + 1) >> 62)
            std::vector<xgboost::TreeUpdaterReg const*>::__throw_length_error[abi:ne180100]();
          v541 = *v535 - (_QWORD)v538;
          if (v541 >> 1 > v540)
            v540 = v541 >> 1;
          if ((unint64_t)v541 >= 0x7FFFFFFFFFFFFFFCLL)
            v542 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v542 = v540;
          if (v542)
          {
            v543 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 200, v542);
            v538 = (char *)*((_QWORD *)this + 23);
            v532 = (char *)*((_QWORD *)this + 24);
          }
          else
          {
            v543 = 0;
          }
          v544 = &v543[4 * v539];
          *(_DWORD *)v544 = i;
          v537 = v544 + 4;
          while (v532 != v538)
          {
            v545 = *((_DWORD *)v532 - 1);
            v532 -= 4;
            *((_DWORD *)v544 - 1) = v545;
            v544 -= 4;
          }
          *((_QWORD *)this + 23) = v544;
          *((_QWORD *)this + 24) = v537;
          *((_QWORD *)this + 25) = &v543[4 * v542];
          if (v538)
            operator delete(v538);
        }
        else
        {
          *(_DWORD *)v532 = i;
          v537 = v532 + 4;
        }
        *((_QWORD *)this + 24) = v537;
        v534 = *((_DWORD *)this + 3);
        v532 = v537;
      }
    }
    if (v534 >= 2)
    {
      v546 = *((_QWORD *)this + 20);
      v547 = (int *)(v546 + 20);
      for (j = 1; j != v534; ++j)
      {
        *v547 = *v547 & 0x7FFFFFFF | ((j == *(_DWORD *)(v546 + 20 * (*v547 & 0x7FFFFFFF) + 4)) << 31);
        v547 += 5;
      }
    }
  }
  v549 = (unint64_t)&v532[-*((_QWORD *)this + 23)] >> 2;
  v550 = *((_DWORD *)this + 4);
  LODWORD(v635) = v549;
  *(_DWORD *)__p = v550;
  if (v550 != (_DWORD)v549)
  {
    dmlc::LogCheckFormat<int,int>((uint64_t *)&v638);
    if (v638.__begin_)
    {
      v551 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v635);
      dmlc::LogMessageFatal::Entry::Init(v551, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
      v552 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v635);
      v553 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v552, (uint64_t)"Check failed: ", 14);
      v554 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v553, (uint64_t)"static_cast<bst_node_t>(deleted_nodes_.size()) == param.num_deleted", 67);
      v555 = SHIBYTE(v638.__begin_->first.__r_.__value_.__r.__words[2]);
      v556 = v555 >= 0
           ? v638.__begin_
           : (std::vector<std::pair<std::string, std::string>>::pointer)v638.__begin_->first.__r_.__value_.__r.__words[0];
      v557 = v555 >= 0
           ? HIBYTE(v638.__begin_->first.__r_.__value_.__r.__words[2])
           : v638.__begin_->first.__r_.__value_.__l.__size_;
      v558 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v554, (uint64_t)v556, v557);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v558, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v635);
      begin = v638.__begin_;
      v638.__begin_ = 0;
      if (begin)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v638, (uint64_t)begin);
    }
  }
  v635 = (uint64_t)(*((_QWORD *)this + 36) - *((_QWORD *)this + 35)) >> 4;
  if (v635 != *((_DWORD *)this + 3))
  {
    dmlc::LogCheckFormat<unsigned long,int>((uint64_t *)&v638);
    if (v638.__begin_)
    {
      v560 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v635);
      dmlc::LogMessageFatal::Entry::Init(v560, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
      v561 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v635);
      v562 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v561, (uint64_t)"Check failed: ", 14);
      v563 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v562, (uint64_t)"this->split_categories_segments_.size() == param.num_nodes", 58);
      v564 = SHIBYTE(v638.__begin_->first.__r_.__value_.__r.__words[2]);
      if (v564 >= 0)
        data = v638.__begin_;
      else
        data = (std::vector<std::pair<std::string, std::string>>::pointer)v638.__begin_->first.__r_.__value_.__l.__data_;
      if (v564 >= 0)
        size = HIBYTE(v638.__begin_->first.__r_.__value_.__r.__words[2]);
      else
        size = v638.__begin_->first.__r_.__value_.__l.__size_;
      v567 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v563, (uint64_t)data, size);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v567, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v635);
      v568 = v638.__begin_;
      v638.__begin_ = 0;
      if (v568)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v638, (uint64_t)v568);
    }
  }
}

void sub_220F281C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  __p = (void *)(v30 - 152);
  std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void xgboost::RegTree::SaveModel(xgboost::RegTree *this, xgboost::Json *a2)
{
  xgboost::RegTree *v3;
  int *v4;
  int v5;
  std::string *Entry;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  std::vector<std::pair<std::string, std::string>>::pointer v11;
  uint64_t v12;
  _QWORD *v13;
  std::vector<std::pair<std::string, std::string>>::pointer begin;
  uint64_t v15;
  std::string *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  std::vector<std::pair<std::string, std::string>>::pointer v21;
  uint64_t v22;
  _QWORD *v23;
  std::vector<std::pair<std::string, std::string>>::pointer v24;
  std::string::size_type v25;
  uint64_t *v26;
  std::string *v27;
  std::string *v28;
  BOOL v29;
  unsigned int **v30;
  _QWORD *v31;
  _DWORD **v32;
  char *v33;
  const void **v34;
  uint64_t v35;
  size_t v36;
  uint64_t v37;
  std::string::size_type size;
  char v39;
  std::string *v40;
  const void **v41;
  std::string *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  int v46;
  __int128 *v47;
  uint64_t v48;
  _QWORD *v49;
  __int128 *v50;
  unint64_t v51;
  std::string *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  int v56;
  void *v57;
  uint64_t v58;
  _QWORD *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t j;
  _DWORD *v64;
  _DWORD *v65;
  uint64_t v66;
  uint64_t *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t i;
  _DWORD *v72;
  _DWORD *v73;
  int v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t *v85;
  void *__p[2];
  char v87;
  void *v88[2];
  void *v89;
  void *v90;
  _QWORD v91[2];
  void *v92;
  void *v93;
  _QWORD v94[2];
  void *v95;
  void *v96;
  _QWORD v97[2];
  void *v98;
  void *v99;
  _QWORD v100[2];
  void *v101;
  void *v102;
  _QWORD v103[2];
  void *v104;
  void *v105;
  __int128 *v106[2];
  _DWORD *v107;
  _DWORD *v108;
  std::string v109;
  std::string::size_type v110;
  void *v111[2];
  uint64_t *v112;
  _QWORD *v113[2];
  std::vector<std::pair<std::string, std::string>> v114;
  std::pair<std::string, std::string> *value;
  char v116;

  v3 = this;
  v4 = (int *)((char *)this + 12);
  v5 = -858993459 * ((*((_QWORD *)this + 21) - *((_QWORD *)this + 20)) >> 2);
  LODWORD(v111[0]) = *((_DWORD *)this + 3);
  LODWORD(v109.__r_.__value_.__l.__data_) = v5;
  if (LODWORD(v111[0]) != v5)
  {
    this = (xgboost::RegTree *)dmlc::LogCheckFormat<int,int>((uint64_t *)&v114);
    if (v114.__begin_)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v111);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
      v7 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v111);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: ", 14);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"param.num_nodes == static_cast<int>(nodes_.size())", 50);
      v10 = SHIBYTE(v114.__begin_->first.__r_.__value_.__r.__words[2]);
      v11 = v10 >= 0
          ? v114.__begin_
          : (std::vector<std::pair<std::string, std::string>>::pointer)v114.__begin_->first.__r_.__value_.__r.__words[0];
      v12 = v10 >= 0
          ? HIBYTE(v114.__begin_->first.__r_.__value_.__r.__words[2])
          : v114.__begin_->first.__r_.__value_.__l.__size_;
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v11, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v111);
      begin = v114.__begin_;
      v114.__begin_ = 0;
      if (begin)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v114, (uint64_t)begin);
    }
  }
  v15 = (*((_QWORD *)v3 + 27) - *((_QWORD *)v3 + 26)) >> 4;
  LODWORD(v111[0]) = *((_DWORD *)v3 + 3);
  LODWORD(v109.__r_.__value_.__l.__data_) = v15;
  if (LODWORD(v111[0]) != (_DWORD)v15)
  {
    this = (xgboost::RegTree *)dmlc::LogCheckFormat<int,int>((uint64_t *)&v114);
    if (v114.__begin_)
    {
      v16 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v111);
      dmlc::LogMessageFatal::Entry::Init(v16, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
      v17 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v111);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Check failed: ", 14);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"param.num_nodes == static_cast<int>(stats_.size())", 50);
      v20 = SHIBYTE(v114.__begin_->first.__r_.__value_.__r.__words[2]);
      v21 = v20 >= 0
          ? v114.__begin_
          : (std::vector<std::pair<std::string, std::string>>::pointer)v114.__begin_->first.__r_.__value_.__r.__words[0];
      v22 = v20 >= 0
          ? HIBYTE(v114.__begin_->first.__r_.__value_.__r.__words[2])
          : v114.__begin_->first.__r_.__value_.__l.__size_;
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v21, v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v111);
      v24 = v114.__begin_;
      v114.__begin_ = 0;
      if (v24)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v114, (uint64_t)v24);
    }
  }
  v111[1] = (void *)0x300000000;
  v111[0] = &off_24E6BE1D0;
  v113[0] = 0;
  v113[1] = 0;
  v112 = (uint64_t *)v113;
  xgboost::TreeParam::__MANAGER__(this);
  dmlc::parameter::ParamManager::GetDict((dmlc::parameter::ParamManager *)&xgboost::TreeParam::__MANAGER__(void)::inst, v4 - 1, &v114);
  std::map<std::string,std::string>::map[abi:ne180100]<std::__wrap_iter<std::pair<std::string,std::string> *>>((uint64_t)&v109, (const void **)&v114.__begin_->first.__r_.__value_.__l.__data_, (const void **)&v114.__end_->first.__r_.__value_.__l.__data_);
  v106[0] = (__int128 *)&v114;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)v106);
  v25 = v109.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v109.__r_.__value_.__l.__data_ != &v109.__r_.__value_.__r.__words[1])
  {
    do
    {
      xgboost::JsonString::JsonString(&v114, (__int128 *)(v25 + 56));
      v106[0] = (__int128 *)(v25 + 32);
      v26 = std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v112, (const void **)(v25 + 32), (uint64_t)&std::piecewise_construct, v106);
      xgboost::Json::operator=(v26 + 7, (uint64_t)&v114);
      v114.__begin_ = (std::vector<std::pair<std::string, std::string>>::pointer)off_24E6BE2B8;
      if (v116 < 0)
        operator delete(v114.__end_cap_.__value_);
      v27 = *(std::string **)(v25 + 8);
      if (v27)
      {
        do
        {
          v28 = v27;
          v27 = (std::string *)v27->__r_.__value_.__r.__words[0];
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = *(std::string **)(v25 + 16);
          v29 = v28->__r_.__value_.__r.__words[0] == v25;
          v25 = (std::string::size_type)v28;
        }
        while (!v29);
      }
      v25 = (std::string::size_type)v28;
    }
    while (v28 != (std::string *)&v109.__r_.__value_.__r.__words[1]);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v109, (_QWORD *)v109.__r_.__value_.__l.__size_);
  std::string::basic_string[abi:ne180100]<0>(&v114, "tree_param");
  v30 = (unsigned int **)(*(uint64_t (**)(_QWORD, std::vector<std::pair<std::string, std::string>> *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v114);
  xgboost::Json::operator=(v30, (uint64_t)v111);
  if (SHIBYTE(v114.__end_cap_.__value_) < 0)
    operator delete(v114.__begin_);
  v111[0] = &off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&v112, v113[0]);
  std::string::basic_string[abi:ne180100]<0>(&v114, "tree_param");
  v31 = (_QWORD *)(*(uint64_t (**)(_QWORD, std::vector<std::pair<std::string, std::string>> *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v114);
  std::string::basic_string[abi:ne180100]<0>(v111, "num_nodes");
  v32 = (_DWORD **)(*(uint64_t (**)(_QWORD, void **))(*(_QWORD *)*v31 + 24))(*v31, v111);
  v33 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>(*v32);
  std::to_string(&v109, *v4);
  v34 = (const void **)(v33 + 16);
  v35 = v33[39];
  v36 = *((_QWORD *)v33 + 3);
  if ((v35 & 0x80u) == 0)
    v37 = v33[39];
  else
    v37 = *((_QWORD *)v33 + 3);
  size = HIBYTE(v109.__r_.__value_.__r.__words[2]);
  v39 = HIBYTE(v109.__r_.__value_.__r.__words[2]);
  if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v109.__r_.__value_.__l.__size_;
  if (v37 != size)
    goto LABEL_48;
  if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v40 = &v109;
  else
    v40 = (std::string *)v109.__r_.__value_.__r.__words[0];
  if ((v35 & 0x80) != 0)
  {
    if (memcmp(*v34, v40, v36))
      goto LABEL_48;
  }
  else if ((_DWORD)v35)
  {
    v41 = v34;
    while (*(unsigned __int8 *)v41 == v40->__r_.__value_.__s.__data_[0])
    {
      v41 = (const void **)((char *)v41 + 1);
      v40 = (std::string *)((char *)v40 + 1);
      if (!--v35)
        goto LABEL_127;
    }
LABEL_48:
    dmlc::LogCheckFormat<std::string,std::string>((uint64_t)v34, (uint64_t)&v109, (uint64_t *)v106);
    if ((*((_BYTE *)&v109.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_50;
    goto LABEL_49;
  }
LABEL_127:
  v106[0] = 0;
  if (v39 < 0)
LABEL_49:
    operator delete(v109.__r_.__value_.__l.__data_);
LABEL_50:
  if (SHIBYTE(v112) < 0)
    operator delete(v111[0]);
  if (SHIBYTE(v114.__end_cap_.__value_) < 0)
    operator delete(v114.__begin_);
  if (v106[0])
  {
    v42 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v114);
    dmlc::LogMessageFatal::Entry::Init(v42, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
    v43 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v114);
    v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Check failed: ", 14);
    v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"get<String>(out[\"tree_param\"][\"num_nodes\"]) == std::to_string(param.num_nodes)", 78);
    v46 = *((char *)v106[0] + 23);
    v47 = v46 >= 0 ? v106[0] : *(__int128 **)v106[0];
    v48 = v46 >= 0 ? *((unsigned __int8 *)v106[0] + 23) : *((_QWORD *)v106[0] + 1);
    v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)v47, v48);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v114);
    v50 = v106[0];
    v106[0] = 0;
    if (v50)
      std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v106, (uint64_t)v50);
  }
  v51 = *v4;
  xgboost::JsonTypedArray<float,(xgboost::Value::ValueKind)7>::JsonTypedArray(&v114, v51);
  xgboost::JsonTypedArray<float,(xgboost::Value::ValueKind)7>::JsonTypedArray(v111, v51);
  xgboost::JsonTypedArray<float,(xgboost::Value::ValueKind)7>::JsonTypedArray(&v109, v51);
  xgboost::JsonTypedArray<int,(xgboost::Value::ValueKind)9>::JsonTypedArray((uint64_t)v106, v51);
  xgboost::JsonTypedArray<int,(xgboost::Value::ValueKind)9>::JsonTypedArray((uint64_t)v103, v51);
  xgboost::JsonTypedArray<int,(xgboost::Value::ValueKind)9>::JsonTypedArray((uint64_t)v100, v51);
  xgboost::JsonTypedArray<float,(xgboost::Value::ValueKind)7>::JsonTypedArray(v97, v51);
  xgboost::JsonTypedArray<unsigned char,(xgboost::Value::ValueKind)8>::JsonTypedArray((uint64_t)v94, v51);
  xgboost::JsonTypedArray<unsigned char,(xgboost::Value::ValueKind)8>::JsonTypedArray((uint64_t)v91, v51);
  __p[0] = (void *)(*((_QWORD *)v3 + 30) - *((_QWORD *)v3 + 29));
  if (__p[0] != (void *)*((int *)v3 + 3))
  {
    dmlc::LogCheckFormat<unsigned long,int>((uint64_t *)v88);
    if (v88[0])
    {
      v52 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
      dmlc::LogMessageFatal::Entry::Init(v52, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
      v53 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
      v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"Check failed: ", 14);
      v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"this->split_types_.size() == param.num_nodes", 44);
      v56 = *((char *)v88[0] + 23);
      v57 = v56 >= 0 ? v88[0] : *(void **)v88[0];
      v58 = v56 >= 0 ? *((unsigned __int8 *)v88[0] + 23) : *((_QWORD *)v88[0] + 1);
      v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)v57, v58);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
      v60 = v88[0];
      v88[0] = 0;
      if (v60)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v88, (uint64_t)v60);
    }
  }
  if ((*((_DWORD *)v3 + 6) & 0x80000000) != 0)
  {
    xgboost::JsonTypedArray<long long,(xgboost::Value::ValueKind)10>::JsonTypedArray(v88, v51);
    if ((int)v51 >= 1)
    {
      v69 = 0;
      v70 = 0;
      for (i = 0; i != v51; ++i)
      {
        v72 = (_DWORD *)(*((_QWORD *)v3 + 26) + v69);
        *((_DWORD *)&v114.__end_cap_.__value_->first.__r_.__value_.__l.__data_ + i) = *v72;
        *((_DWORD *)v112 + i) = v72[1];
        *(_DWORD *)(v109.__r_.__value_.__r.__words[2] + 4 * i) = v72[2];
        v73 = (_DWORD *)(*((_QWORD *)v3 + 20) + v70);
        v107[i] = v73[1];
        *((_DWORD *)v104 + i) = v73[2];
        *((_DWORD *)v101 + i) = *v73 & 0x7FFFFFFF;
        v74 = v73[3];
        *((_QWORD *)v89 + i) = v74 & 0x7FFFFFFF;
        *((_DWORD *)v98 + i) = v73[4];
        *((_BYTE *)v95 + i) = v74 < 0;
        v75 = *((_QWORD *)v3 + 29);
        if (*((_QWORD *)v3 + 30) - v75 <= i)
          std::vector<xgboost::FeatureType>::__throw_out_of_range[abi:ne180100]();
        *((_BYTE *)v92 + i) = *(_BYTE *)(v75 + i);
        v70 += 20;
        v69 += 16;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "split_indices");
    v76 = (uint64_t *)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, __p);
    xgboost::Json::operator=<long long,(xgboost::Value::ValueKind)10>(v76, (uint64_t)v88);
    if (v87 < 0)
      operator delete(__p[0]);
  }
  else
  {
    xgboost::JsonTypedArray<int,(xgboost::Value::ValueKind)9>::JsonTypedArray((uint64_t)v88, v51);
    if ((int)v51 >= 1)
    {
      v61 = 0;
      v62 = 0;
      for (j = 0; j != v51; ++j)
      {
        v64 = (_DWORD *)(*((_QWORD *)v3 + 26) + v61);
        *((_DWORD *)&v114.__end_cap_.__value_->first.__r_.__value_.__l.__data_ + j) = *v64;
        *((_DWORD *)v112 + j) = v64[1];
        *(_DWORD *)(v109.__r_.__value_.__r.__words[2] + 4 * j) = v64[2];
        v65 = (_DWORD *)(*((_QWORD *)v3 + 20) + v62);
        v107[j] = v65[1];
        *((_DWORD *)v104 + j) = v65[2];
        *((_DWORD *)v101 + j) = *v65 & 0x7FFFFFFF;
        *((_DWORD *)v89 + j) = v65[3] & 0x7FFFFFFF;
        *((_DWORD *)v98 + j) = v65[4];
        *((_BYTE *)v95 + j) = (int)v65[3] < 0;
        v66 = *((_QWORD *)v3 + 29);
        if (*((_QWORD *)v3 + 30) - v66 <= j)
          std::vector<xgboost::FeatureType>::__throw_out_of_range[abi:ne180100]();
        *((_BYTE *)v92 + j) = *(_BYTE *)(v66 + j);
        v62 += 20;
        v61 += 16;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "split_indices");
    v67 = (uint64_t *)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, __p);
    xgboost::Json::operator=<int,(xgboost::Value::ValueKind)9>(v67, (uint64_t)v88);
    if (v87 < 0)
      operator delete(__p[0]);
  }
  v88[0] = v68 + 16;
  if (v89)
  {
    v90 = v89;
    operator delete(v89);
  }
  xgboost::RegTree::SaveCategoricalSplit(v3, a2);
  std::string::basic_string[abi:ne180100]<0>(v88, "split_type");
  v77 = (uint64_t *)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, v88);
  xgboost::Json::operator=<unsigned char,(xgboost::Value::ValueKind)8>(v77, (uint64_t)v91);
  if (SHIBYTE(v89) < 0)
    operator delete(v88[0]);
  std::string::basic_string[abi:ne180100]<0>(v88, "loss_changes");
  v78 = (uint64_t *)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, v88);
  xgboost::Json::operator=<float,(xgboost::Value::ValueKind)7>(v78, (uint64_t)&v114);
  if (SHIBYTE(v89) < 0)
    operator delete(v88[0]);
  std::string::basic_string[abi:ne180100]<0>(v88, "sum_hessian");
  v79 = (uint64_t *)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, v88);
  xgboost::Json::operator=<float,(xgboost::Value::ValueKind)7>(v79, (uint64_t)v111);
  if (SHIBYTE(v89) < 0)
    operator delete(v88[0]);
  std::string::basic_string[abi:ne180100]<0>(v88, "base_weights");
  v80 = (uint64_t *)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, v88);
  xgboost::Json::operator=<float,(xgboost::Value::ValueKind)7>(v80, (uint64_t)&v109);
  if (SHIBYTE(v89) < 0)
    operator delete(v88[0]);
  std::string::basic_string[abi:ne180100]<0>(v88, "left_children");
  v81 = (uint64_t *)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, v88);
  xgboost::Json::operator=<int,(xgboost::Value::ValueKind)9>(v81, (uint64_t)v106);
  if (SHIBYTE(v89) < 0)
    operator delete(v88[0]);
  std::string::basic_string[abi:ne180100]<0>(v88, "right_children");
  v82 = (uint64_t *)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, v88);
  xgboost::Json::operator=<int,(xgboost::Value::ValueKind)9>(v82, (uint64_t)v103);
  if (SHIBYTE(v89) < 0)
    operator delete(v88[0]);
  std::string::basic_string[abi:ne180100]<0>(v88, "parents");
  v83 = (uint64_t *)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, v88);
  xgboost::Json::operator=<int,(xgboost::Value::ValueKind)9>(v83, (uint64_t)v100);
  if (SHIBYTE(v89) < 0)
    operator delete(v88[0]);
  std::string::basic_string[abi:ne180100]<0>(v88, "split_conditions");
  v84 = (uint64_t *)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, v88);
  xgboost::Json::operator=<float,(xgboost::Value::ValueKind)7>(v84, (uint64_t)v97);
  if (SHIBYTE(v89) < 0)
    operator delete(v88[0]);
  std::string::basic_string[abi:ne180100]<0>(v88, "default_left");
  v85 = (uint64_t *)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, v88);
  xgboost::Json::operator=<unsigned char,(xgboost::Value::ValueKind)8>(v85, (uint64_t)v94);
  if (SHIBYTE(v89) < 0)
    operator delete(v88[0]);
  v91[0] = &unk_24E6BD8E0;
  if (v92)
  {
    v93 = v92;
    operator delete(v92);
  }
  v94[0] = &unk_24E6BD8E0;
  if (v95)
  {
    v96 = v95;
    operator delete(v95);
  }
  v97[0] = &unk_24E6B8A30;
  if (v98)
  {
    v99 = v98;
    operator delete(v98);
  }
  v100[0] = &unk_24E6BD928;
  if (v101)
  {
    v102 = v101;
    operator delete(v101);
  }
  v103[0] = &unk_24E6BD928;
  if (v104)
  {
    v105 = v104;
    operator delete(v104);
  }
  v106[0] = (__int128 *)&unk_24E6BD928;
  if (v107)
  {
    v108 = v107;
    operator delete(v107);
  }
  v109.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24E6B8A30;
  if (v109.__r_.__value_.__r.__words[2])
  {
    v110 = v109.__r_.__value_.__r.__words[2];
    operator delete((void *)v109.__r_.__value_.__r.__words[2]);
  }
  v111[0] = &unk_24E6B8A30;
  if (v112)
  {
    v113[0] = v112;
    operator delete(v112);
  }
  v114.__begin_ = (std::vector<std::pair<std::string, std::string>>::pointer)&unk_24E6B8A30;
  if (v114.__end_cap_.__value_)
  {
    value = v114.__end_cap_.__value_;
    operator delete(v114.__end_cap_.__value_);
  }
}

void sub_220F29374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43)
{
  uint64_t v43;
  void *v45;
  void *v46;
  void *v47;
  void *v48;

  if (__p)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  if (a27)
    operator delete(a27);
  if (a32)
    operator delete(a32);
  if (a37)
    operator delete(a37);
  if (a42)
    operator delete(a42);
  *(_QWORD *)(v43 - 248) = &unk_24E6BD928;
  v45 = *(void **)(v43 - 232);
  if (v45)
  {
    *(_QWORD *)(v43 - 224) = v45;
    operator delete(v45);
  }
  *(_QWORD *)(v43 - 208) = &unk_24E6B8A30;
  v46 = *(void **)(v43 - 192);
  if (v46)
  {
    *(_QWORD *)(v43 - 184) = v46;
    operator delete(v46);
  }
  *(_QWORD *)(v43 - 168) = &unk_24E6B8A30;
  v47 = *(void **)(v43 - 152);
  if (v47)
  {
    *(_QWORD *)(v43 - 144) = v47;
    operator delete(v47);
  }
  *(_QWORD *)(v43 - 128) = &unk_24E6B8A30;
  v48 = *(void **)(v43 - 112);
  if (v48)
  {
    *(_QWORD *)(v43 - 104) = v48;
    operator delete(v48);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *xgboost::Json::operator=<unsigned char,(xgboost::Value::ValueKind)8>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0x800000000;
  v5 = (unsigned int *)(v4 + 8);
  *(_QWORD *)v4 = &unk_24E6BD8E0;
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(v4 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  v7 = (unsigned int *)*a1;
  *a1 = v4;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      __dmb(9u);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return a1;
}

_QWORD *xgboost::JsonTypedArray<unsigned char,(xgboost::Value::ValueKind)8>::~JsonTypedArray(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24E6BD8E0;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void xgboost::RegTree::CalculateContributionsApprox(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  float *v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  signed int Next;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  std::string *Entry;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31[6];
  int v32;
  uint64_t v33;

  v9 = *(float **)a3;
  v8 = *(_QWORD *)(a3 + 8);
  v32 = 0;
  v10 = v8 - (_QWORD)v9;
  v33 = v10 >> 2;
  if (!v10)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned int>(v31);
    if (v31[0])
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v33);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
      v23 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v33);
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Check failed: ", 14);
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"mean_values->size() > 0U", 24);
      v26 = *(char *)(v31[0] + 23);
      v27 = v26 >= 0 ? v31[0] : *(_QWORD *)v31[0];
      v28 = v26 >= 0 ? *(unsigned __int8 *)(v31[0] + 23) : *(_QWORD *)(v31[0] + 8);
      v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, v27, v28);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v33);
      v30 = v31[0];
      v31[0] = 0;
      if (v30)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v31, v30);
    }
  }
  v11 = **(float **)a3;
  *(float *)(a4 + a2[1] - *a2) = v11 + *(float *)(a4 + a2[1] - *a2);
  v12 = a1[20];
  if (*(_DWORD *)(v12 + 4) != -1)
  {
    v13 = 0;
    Next = 0;
    v15 = a1[29];
    v31[0] = a1[30] - v15;
    v31[1] = v15;
    v16 = a1[32];
    v31[2] = (a1[33] - v16) >> 2;
    v31[3] = v16;
    v17 = a1[35];
    v31[4] = (a1[36] - v17) >> 4;
    v31[5] = v17;
    do
    {
      v18 = v11;
      v19 = v12 + 20 * v13;
      v20 = *(_DWORD *)(v19 + 12) & 0x7FFFFFFF;
      Next = xgboost::predictor::GetNextNode<true,true>(v19, Next, *(_DWORD *)(*a2 + 4 * v20) == -1, v31, *(float *)(*a2 + 4 * v20));
      v13 = Next;
      v11 = *(float *)(*(_QWORD *)a3 + 4 * Next);
      v21 = *(float *)(a4 + 4 * v20) + (float)(v11 - v18);
      *(float *)(a4 + 4 * v20) = v21;
      v12 = a1[20];
    }
    while (*(_DWORD *)(v12 + 20 * Next + 4) != -1);
    *(float *)(a4 + 4 * v20) = v21 + (float)(*(float *)(v12 + 20 * Next + 16) - v11);
  }
}

void sub_220F299FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v17;

  v17 = a9;
  a9 = 0;
  if (v17)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a9, v17);
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::ExtendPath(uint64_t result, int a2, int a3, float a4, float a5)
{
  uint64_t v5;
  float v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;

  v5 = result + 16 * a2;
  *(_DWORD *)v5 = a3;
  *(float *)(v5 + 4) = a4;
  *(float *)(v5 + 8) = a5;
  v6 = 0.0;
  if (!a2)
    v6 = 1.0;
  *(float *)(v5 + 12) = v6;
  if (a2 - 1 >= 0)
  {
    v7 = (float)(a2 + 1);
    v8 = 16 * (a2 - 1);
    v9 = result + 12;
    v10 = 1;
    do
    {
      *(float *)(result + 16 * a2 + 12) = *(float *)(result + 16 * a2 + 12)
                                          + (float)((float)((float)(*(float *)(v9 + v8) * a5) * (float)a2) / v7);
      *(float *)(v9 + v8) = (float)((float)(*(float *)(v9 + v8) * a4) * (float)v10) / v7;
      v8 -= 16;
      ++v10;
      --a2;
    }
    while (v8 != -16);
  }
  return result;
}

double xgboost::UnwindPath(uint64_t a1, unsigned int a2, unsigned int a3, double result)
{
  uint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  float *v10;
  unsigned int v11;
  float v12;
  float v13;
  double *v15;
  unint64_t v16;

  v4 = a2 - 1;
  if ((int)(a2 - 1) >= 0)
  {
    v5 = a1 + 16 * a3;
    v6 = *(float *)(v5 + 4);
    LODWORD(result) = *(_DWORD *)(v5 + 8);
    v7 = *(float *)(a1 + 16 * a2 + 12);
    v8 = (float)(a2 + 1);
    v9 = v4 + 1;
    v10 = (float *)(a1 + 16 * v4 + 12);
    v11 = 1;
    do
    {
      v12 = *v10;
      if (*(float *)&result == 0.0)
      {
        v13 = (float)(v12 * v8) / (float)(v6 * (float)v11);
      }
      else
      {
        v13 = (float)(v7 * v8) / (float)(*(float *)&result * (float)(int)v9);
        v7 = v12 - (float)((float)((float)(v6 * v13) * (float)v11) / v8);
      }
      *v10 = v13;
      v10 -= 4;
      ++v11;
    }
    while (v9-- > 1);
  }
  if (a3 < a2)
  {
    v15 = (double *)(a1 + 16 * a3 + 20);
    v16 = a2 - (unint64_t)a3;
    do
    {
      *((_DWORD *)v15 - 5) = *((_DWORD *)v15 - 1);
      result = *v15;
      *(v15 - 2) = *v15;
      v15 += 2;
      --v16;
    }
    while (v16);
  }
  return result;
}

float xgboost::UnwoundPathSum(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  float v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  float v13;
  unsigned int v14;
  uint64_t v15;
  float v16;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  std::string *Entry;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v33;
  _QWORD v34[11];
  char v35;
  uint64_t v36;

  v3 = a2 - 1;
  if ((int)(a2 - 1) < 0)
    return 0.0;
  v4 = a1 + 16 * a3;
  v6 = *(float *)(v4 + 4);
  v5 = *(float *)(v4 + 8);
  v7 = *(float *)(a1 + 16 * a2 + 12);
  v8 = (float)(a2 + 1);
  v9 = v3 + 1;
  v10 = *MEMORY[0x24BEDB800];
  v11 = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v12 = (float *)(a1 + 16 * v3 + 12);
  v13 = 0.0;
  v14 = 1;
  v15 = MEMORY[0x24BEDB848] + 16;
  do
  {
    if (v5 == 0.0)
    {
      if (v6 == 0.0)
      {
        if (*v12 != 0.0)
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v34);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" (", 2);
          v18 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" vs. ", 5);
          v19 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)") ", 2);
          v20 = operator new();
          std::stringbuf::str();
          v33 = v20;
          v34[0] = v10;
          *(_QWORD *)((char *)v34 + *(_QWORD *)(v10 - 24)) = v11;
          v34[1] = v15;
          if (v35 < 0)
            operator delete((void *)v34[9]);
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x227666FE4](&v36);
          if (v33)
          {
            Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v34);
            dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
            v22 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v34);
            v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed: ", 14);
            v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"unique_path[i].pweight == 0", 27);
            v25 = *(char *)(v33 + 23);
            if (v25 >= 0)
              v26 = v33;
            else
              v26 = *(_QWORD *)v33;
            if (v25 >= 0)
              v27 = *(unsigned __int8 *)(v33 + 23);
            else
              v27 = *(_QWORD *)(v33 + 8);
            v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, v26, v27);
            v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)": ", 2);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Unique path ", 12);
            v30 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" must have zero weight", 22);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v34);
            v31 = v33;
            v33 = 0;
            if (v31)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v33, v31);
          }
        }
      }
      else
      {
        v13 = v13 + (float)((float)(*v12 / v6) / (float)((float)v14 / v8));
      }
    }
    else
    {
      v16 = (float)(v7 * v8) / (float)(v5 * (float)(int)v9);
      v13 = v13 + v16;
      v7 = *v12 + (float)((float)-(float)(v16 * v6) * (float)((float)v14 / v8));
    }
    ++v14;
    v12 -= 4;
  }
  while (v9-- > 1);
  return v13;
}

void sub_220F29E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  MEMORY[0x227667068](v3, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void xgboost::RegTree::TreeShap(_QWORD *a1, _QWORD *a2, uint64_t a3, signed int a4, unsigned int a5, char *a6, int a7, uint64_t a8, float a9, float a10, float a11, int a12)
{
  uint64_t v13;
  float v14;
  unsigned int v17;
  float v20;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t Next;
  double v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  float v39;
  float v40;
  float v41;
  unsigned int v42;
  float v43;
  uint64_t v44;
  unsigned int v45;
  float v46;
  float v47;
  float v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[6];
  __int128 v52;
  float v53;

  v13 = a1[20] + 20 * a4;
  v14 = *(float *)(v13 + 16);
  v52 = *(_OWORD *)v13;
  v53 = v14;
  if (a11 != 0.0)
  {
    v17 = a5;
    v20 = a11;
    v24 = &a6[16 * a5];
    v25 = (uint64_t)(v24 + 16);
    if (16 * a5 != -16)
      memmove(v24 + 16, a6, 16 * a5 + 16);
    if (!(_DWORD)a8 || a12 != a7)
      xgboost::ExtendPath(v25, v17, a7, a9, a10);
    if (DWORD1(v52) == -1)
    {
      if (v17)
      {
        v42 = 1;
        v43 = v53;
        do
        {
          *(float *)(a3 + 4 * *(int *)(v25 + 16 * v42)) = *(float *)(a3 + 4 * *(int *)(v25 + 16 * v42))
                                                            + (float)((float)(v43
                                                                            * (float)(xgboost::UnwoundPathSum(v25, v17, v42)* (float)(*(float *)(v25 + 16 * v42 + 8)- *(float *)(v25 + 16 * v42 + 4))))* v20);
          ++v42;
        }
        while (v42 <= v17);
      }
    }
    else
    {
      v26 = HIDWORD(v52) & 0x7FFFFFFF;
      v27 = a1[29];
      v50 = a4;
      v51[0] = a1[30] - v27;
      v28 = a1[32];
      v29 = (a1[33] - v28) >> 2;
      v51[1] = v27;
      v51[2] = v29;
      v30 = a1[35];
      v31 = (a1[36] - v30) >> 4;
      v51[3] = v28;
      v51[4] = v31;
      v51[5] = v30;
      Next = xgboost::predictor::GetNextNode<true,true>((uint64_t)&v52, a4, *(_DWORD *)(*a2 + 4 * v26) == -1, v51, *(float *)(*a2 + 4 * v26));
      v34 = Next;
      v35 = 0;
      if ((_DWORD)Next == DWORD1(v52))
        v36 = DWORD2(v52);
      else
        v36 = DWORD1(v52);
      v37 = a1[26];
      LODWORD(v33) = *(_DWORD *)(v37 + 16 * v50 + 4);
      v38 = *(float *)(v37 + 16 * (int)Next + 4) / *(float *)&v33;
      v39 = *(float *)(v37 + 16 * (int)v36 + 4) / *(float *)&v33;
      do
      {
        if (*(_DWORD *)(v25 + 16 * v35) == (_DWORD)v26)
          break;
        ++v35;
      }
      while (v35 <= v17);
      v40 = 1.0;
      if (v35 == v17 + 1)
      {
        v41 = 1.0;
      }
      else
      {
        v44 = v25 + 16 * v35;
        v40 = *(float *)(v44 + 4);
        v41 = *(float *)(v44 + 8);
        xgboost::UnwindPath(v25, v17--, v35, v33);
      }
      if ((int)a8 >= 1 && (_DWORD)v26 == a12)
      {
        v45 = v17 - 1;
        v46 = 0.0;
      }
      else
      {
        v47 = v38 * v20;
        v48 = v39 * v20;
        v45 = v17 - 1;
        if ((_DWORD)v26 != a12)
        {
          v45 = v17;
          v47 = v20;
          v48 = v20;
        }
        if ((int)a8 < 0)
        {
          v46 = v48;
        }
        else
        {
          v45 = v17;
          v46 = v20;
        }
        if ((int)a8 < 0)
          v20 = v47;
      }
      v49 = v45 + 1;
      xgboost::RegTree::TreeShap(a1, a2, a3, v34, v49, v25, v26, a8, v38 * v40, v41, v20, a12);
      xgboost::RegTree::TreeShap(a1, a2, a3, v36, v49, v25, v26, a8, v39 * v40, 0.0, v46, a12);
    }
  }
}

void xgboost::RegTree::CalculateContributions(xgboost::RegTree *this, _QWORD *a2, float **a3, uint64_t a4, uint64_t a5, int a6)
{
  int v11;
  void *__p[3];

  if (!(_DWORD)a5)
    *(float *)(a4 + a2[1] - *a2) = **a3 + *(float *)(a4 + a2[1] - *a2);
  v11 = xgboost::RegTree::MaxDepth(this, 0);
  std::vector<xgboost::PathElement>::vector(__p, (uint64_t)((v11 + 2) * (v11 + 3) + ((v11 + 2) * (v11 + 3) < 0)) >> 1);
  xgboost::RegTree::TreeShap(this, a2, a4, 0, 0, (char *)__p[0], -1, a5, 1.0, 1.0, 1.0, a6);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_220F2A240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost::RegTree::~RegTree(xgboost::RegTree *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  *(_QWORD *)this = &off_24E6BD360;
  v2 = (void *)*((_QWORD *)this + 35);
  if (v2)
  {
    *((_QWORD *)this + 36) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 32);
  if (v3)
  {
    *((_QWORD *)this + 33) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 29);
  if (v4)
  {
    *((_QWORD *)this + 30) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 26);
  if (v5)
  {
    *((_QWORD *)this + 27) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 23);
  if (v6)
  {
    *((_QWORD *)this + 24) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 20);
  if (v7)
  {
    *((_QWORD *)this + 21) = v7;
    operator delete(v7);
  }
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  *(_QWORD *)this = &off_24E6BD360;
  v2 = (void *)*((_QWORD *)this + 35);
  if (v2)
  {
    *((_QWORD *)this + 36) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 32);
  if (v3)
  {
    *((_QWORD *)this + 33) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 29);
  if (v4)
  {
    *((_QWORD *)this + 30) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 26);
  if (v5)
  {
    *((_QWORD *)this + 27) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 23);
  if (v6)
  {
    *((_QWORD *)this + 24) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 20);
  if (v7)
  {
    *((_QWORD *)this + 21) = v7;
    operator delete(v7);
  }
  JUMPOUT(0x227667068);
}

void xgboost::JsonTypedArray<int,(xgboost::Value::ValueKind)9>::~JsonTypedArray(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24E6BD928;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x227667068);
}

void xgboost::JsonTypedArray<long long,(xgboost::Value::ValueKind)10>::~JsonTypedArray(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24E6BD970;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x227667068);
}

void std::vector<xgboost::FeatureType>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

void xgboost::JsonTypedArray<unsigned char,(xgboost::Value::ValueKind)8>::~JsonTypedArray(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24E6BD8E0;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x227667068);
}

void xgboost::TreeParam::__DECLARE__(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  std::string __p;
  std::string __str;

  std::string::basic_string[abi:ne180100]<0>(&__p, "num_nodes");
  v3 = operator new();
  *(_BYTE *)(v3 + 8) = 0;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_WORD *)(v3 + 108) = 0;
  *(_QWORD *)v3 = &unk_24E6B5E08;
  *(_BYTE *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 128) = v3 + 136;
  *(_QWORD *)(v3 + 160) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_QWORD *)(v3 + 152) = v3 + 160;
  *(_QWORD *)(v3 + 168) = 0;
  std::string::operator=((std::string *)(v3 + 24), &__p);
  if (*(char *)(v3 + 71) < 0)
  {
    if (*(_QWORD *)(v3 + 56))
      goto LABEL_8;
  }
  else if (*(_BYTE *)(v3 + 71))
  {
    goto LABEL_8;
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, "int");
  v4 = (void **)(v3 + 48);
  if (*(char *)(v3 + 71) < 0)
    operator delete(*v4);
  *(_OWORD *)v4 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
  *(_QWORD *)(v3 + 64) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
LABEL_8:
  *(_QWORD *)(v3 + 96) = 4;
  dmlc::parameter::ParamManager::AddEntry(a2, (const void **)&__p.__r_.__value_.__l.__data_, v3);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 80))(v3, 1);
  *(_DWORD *)(v5 + 104) = 1;
  *(_BYTE *)(v5 + 8) = 1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_feature");
  v6 = operator new();
  *(_QWORD *)(v6 + 112) = 0;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)v6 = 0u;
  *(_QWORD *)v6 = &unk_24E6BC7E8;
  std::string::operator=((std::string *)(v6 + 24), &__p);
  if (*(char *)(v6 + 71) < 0)
  {
    if (*(_QWORD *)(v6 + 56))
      goto LABEL_17;
  }
  else if (*(_BYTE *)(v6 + 71))
  {
    goto LABEL_17;
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, "int (non-negative)");
  v7 = (void **)(v6 + 48);
  if (*(char *)(v6 + 71) < 0)
    operator delete(*v7);
  *(_OWORD *)v7 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
  *(_QWORD *)(v6 + 64) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
LABEL_17:
  *(_QWORD *)(v6 + 96) = 16;
  dmlc::parameter::ParamManager::AddEntry(a2, (const void **)&__p.__r_.__value_.__l.__data_, v6);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Number of features used in tree construction.");
  std::string::operator=((std::string *)(v6 + 72), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_deleted");
  v8 = operator new();
  *(_BYTE *)(v8 + 8) = 0;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_WORD *)(v8 + 108) = 0;
  *(_QWORD *)v8 = &unk_24E6B5E08;
  *(_BYTE *)(v8 + 120) = 0;
  *(_QWORD *)(v8 + 136) = 0;
  *(_QWORD *)(v8 + 128) = v8 + 136;
  *(_QWORD *)(v8 + 160) = 0;
  *(_QWORD *)(v8 + 144) = 0;
  *(_QWORD *)(v8 + 152) = v8 + 160;
  *(_QWORD *)(v8 + 168) = 0;
  std::string::operator=((std::string *)(v8 + 24), &__p);
  if (*(char *)(v8 + 71) < 0)
  {
    if (*(_QWORD *)(v8 + 56))
      goto LABEL_28;
  }
  else if (*(_BYTE *)(v8 + 71))
  {
    goto LABEL_28;
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, "int");
  v9 = (void **)(v8 + 48);
  if (*(char *)(v8 + 71) < 0)
    operator delete(*v9);
  *(_OWORD *)v9 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
  *(_QWORD *)(v8 + 64) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
LABEL_28:
  *(_QWORD *)(v8 + 96) = 8;
  dmlc::parameter::ParamManager::AddEntry(a2, (const void **)&__p.__r_.__value_.__l.__data_, v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "size_leaf_vector");
  v10 = operator new();
  *(_BYTE *)(v10 + 8) = 0;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_OWORD *)(v10 + 80) = 0u;
  *(_WORD *)(v10 + 108) = 0;
  *(_QWORD *)v10 = &unk_24E6B5E08;
  *(_BYTE *)(v10 + 120) = 0;
  *(_QWORD *)(v10 + 136) = 0;
  *(_QWORD *)(v10 + 128) = v10 + 136;
  *(_QWORD *)(v10 + 160) = 0;
  *(_QWORD *)(v10 + 144) = 0;
  *(_QWORD *)(v10 + 152) = v10 + 160;
  *(_QWORD *)(v10 + 168) = 0;
  std::string::operator=((std::string *)(v10 + 24), &__p);
  if (*(char *)(v10 + 71) < 0)
  {
    if (*(_QWORD *)(v10 + 56))
      goto LABEL_37;
  }
  else if (*(_BYTE *)(v10 + 71))
  {
    goto LABEL_37;
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, "int");
  v11 = (void **)(v10 + 48);
  if (*(char *)(v10 + 71) < 0)
    operator delete(*v11);
  *(_OWORD *)v11 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
  *(_QWORD *)(v10 + 64) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
LABEL_37:
  *(_QWORD *)(v10 + 96) = 20;
  dmlc::parameter::ParamManager::AddEntry(a2, (const void **)&__p.__r_.__value_.__l.__data_, v10);
  v12 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 80))(v10, 0);
  *(_DWORD *)(v12 + 104) = 0;
  *(_BYTE *)(v12 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&__str, "Size of leaf vector, reserved for vector tree");
  std::string::operator=((std::string *)(v12 + 72), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_220F2A8FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void dmlc::parameter::FieldEntry<std::vector<int>>::~FieldEntry(dmlc::parameter::FieldAccessEntry *this)
{
  void *v2;

  *(_QWORD *)this = &off_24E6BD430;
  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    operator delete(v2);
  }
  dmlc::parameter::FieldAccessEntry::~FieldAccessEntry((void **)this);
}

{
  void *v2;

  *(_QWORD *)this = &off_24E6BD430;
  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    operator delete(v2);
  }
  dmlc::parameter::FieldAccessEntry::~FieldAccessEntry((void **)this);
  JUMPOUT(0x227667068);
}

char *dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<std::vector<int>>,std::vector<int>>::SetDefault(char *result, uint64_t a2)
{
  char *v2;
  char *v3;
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  std::runtime_error *exception;
  std::string v18;
  _QWORD v19[33];

  if (!result[8])
  {
    v3 = result;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v19);
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Required parameter ", 19);
    v5 = v3[47];
    if (v5 >= 0)
      v6 = (uint64_t)(v3 + 24);
    else
      v6 = *((_QWORD *)v3 + 3);
    if (v5 >= 0)
      v7 = v3[47];
    else
      v7 = *((_QWORD *)v3 + 4);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" of ", 4);
    v12 = *((_QWORD *)v3 + 6);
    v11 = (uint64_t)(v3 + 48);
    v10 = v12;
    v13 = *(char *)(v11 + 23);
    if (v13 >= 0)
      v14 = v11;
    else
      v14 = v10;
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(v11 + 23);
    else
      v15 = *(_QWORD *)(v11 + 8);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v14, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" is not presented", 17);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v18);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_24E6B55F0;
  }
  v2 = (char *)(a2 + *((_QWORD *)result + 12));
  if (v2 != result + 104)
    return std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v2, *((char **)result + 13), *((_QWORD *)result + 14), (uint64_t)(*((_QWORD *)result + 14) - *((_QWORD *)result + 13)) >> 2);
  return result;
}

void sub_220F2AB1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<std::vector<int>>,std::vector<int>>::Set(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  std::ios_base::iostate v10;
  std::ios_base *v11;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  std::runtime_error *exception;
  std::string v32;
  _QWORD v33[33];
  _QWORD v34[12];
  char v35;
  uint64_t v36;

  std::istringstream::basic_istringstream[abi:ne180100](v34, (const std::string *)a3, 8);
  std::operator>>(v34, (char **)(a2 + *(_QWORD *)(a1 + 96)));
  v6 = *(_QWORD *)(v34[0] - 24);
  v7 = *(_DWORD *)((char *)&v34[4] + v6);
  if ((v7 & 5) == 0 && (v7 & 2) == 0)
  {
    while (1)
    {
      v8 = std::istream::get();
      if (v8 == -1)
      {
        v10 = 0;
        v11 = (std::ios_base *)((char *)v34 + *(_QWORD *)(v34[0] - 24));
        goto LABEL_11;
      }
      if (v8 > 0x20u || ((1 << v8) & 0x100003600) == 0)
        break;
      v6 = *(_QWORD *)(v34[0] - 24);
      if ((*((_BYTE *)&v34[4] + v6) & 2) != 0)
        goto LABEL_12;
    }
    v11 = (std::ios_base *)((char *)v34 + *(_QWORD *)(v34[0] - 24));
    v10 = v11->__rdstate_ | 4;
LABEL_11:
    std::ios_base::clear(v11, v10);
    v6 = *(_QWORD *)(v34[0] - 24);
  }
LABEL_12:
  if ((*((_BYTE *)&v34[4] + v6) & 5) != 0)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v33);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Invalid Parameter format for ", 29);
    v14 = *(char *)(a1 + 47);
    if (v14 >= 0)
      v15 = a1 + 24;
    else
      v15 = *(_QWORD *)(a1 + 24);
    if (v14 >= 0)
      v16 = *(unsigned __int8 *)(a1 + 47);
    else
      v16 = *(_QWORD *)(a1 + 32);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" expect ", 8);
    v21 = *(_QWORD *)(a1 + 48);
    v20 = a1 + 48;
    v19 = v21;
    v22 = *(char *)(v20 + 23);
    if (v22 >= 0)
      v23 = v20;
    else
      v23 = v19;
    if (v22 >= 0)
      v24 = *(unsigned __int8 *)(v20 + 23);
    else
      v24 = *(_QWORD *)(v20 + 8);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v23, v24);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" but value='", 12);
    v27 = *(char *)(a3 + 23);
    if (v27 >= 0)
      v28 = a3;
    else
      v28 = *(_QWORD *)a3;
    if (v27 >= 0)
      v29 = *(unsigned __int8 *)(a3 + 23);
    else
      v29 = *(_QWORD *)(a3 + 8);
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
    v32.__r_.__value_.__s.__data_[0] = 39;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)&v32, 1);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v32);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_24E6B55F0;
  }
  v34[0] = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)((char *)v34 + *(_QWORD *)(v34[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 24);
  v34[2] = MEMORY[0x24BEDB848] + 16;
  if (v35 < 0)
    operator delete((void *)v34[10]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  return MEMORY[0x227666FE4](&v36);
}

void sub_220F2ADFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  void *v48;
  int v49;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v49 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      std::istringstream::~istringstream((uint64_t)&a48);
      _Unwind_Resume(a1);
    }
  }
  else if (!v49)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v48);
  goto LABEL_6;
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<std::vector<int>>,std::vector<int>>::GetStringValue(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void *__p;
  void *v7;
  uint64_t v8;
  _QWORD v9[11];
  char v10;
  uint64_t v11;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
  v4 = a2 + a1[12];
  v7 = 0;
  v8 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v4, *(_QWORD *)(v4 + 8), (uint64_t)(*(_QWORD *)(v4 + 8) - *(_QWORD *)v4) >> 2);
  (*(void (**)(_QWORD *, _QWORD *, void **))(*a1 + 64))(a1, v9, &__p);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
  std::stringbuf::str();
  v9[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v9[1] = MEMORY[0x24BEDB848] + 16;
  if (v10 < 0)
    operator delete((void *)v9[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v11);
}

void sub_220F2AF58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12)
{
  if (__p)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<std::vector<int>>,std::vector<int>>::GetFieldInfo@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void **v8;
  __int128 v10;
  uint64_t v11;
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  std::string::operator=((std::string *)a2, (const std::string *)(a1 + 24));
  std::string::operator=((std::string *)(a2 + 24), (const std::string *)(a1 + 48));
  v4 = *(char *)(a1 + 71);
  if (v4 >= 0)
    v5 = a1 + 48;
  else
    v5 = *(_QWORD *)(a1 + 48);
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a1 + 71);
  else
    v6 = *(_QWORD *)(a1 + 56);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v5, v6);
  if (*(_BYTE *)(a1 + 8))
  {
    LOBYTE(v10) = 44;
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v10, 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" optional, default=", 19);
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 56))(a1, v12);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", required", 10);
  }
  std::stringbuf::str();
  v8 = (void **)(a2 + 48);
  if (*(char *)(a2 + 71) < 0)
    operator delete(*v8);
  *(_OWORD *)v8 = v10;
  *(_QWORD *)(a2 + 64) = v11;
  std::string::operator=((std::string *)(a2 + 72), (const std::string *)(a1 + 72));
  v12[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v12[1] = MEMORY[0x24BEDB848] + 16;
  if (v13 < 0)
    operator delete((void *)v12[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v14);
}

void sub_220F2B10C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v4;
  va_list va;

  va_start(va, a4);
  std::ostringstream::~ostringstream((uint64_t)va);
  dmlc::ParamFieldInfo::~ParamFieldInfo(v4);
  _Unwind_Resume(a1);
}

void dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<std::vector<int>>,std::vector<int>>::PrintDefaultValueString(uint64_t a1, uint64_t a2)
{
  void *__p;
  void *v5;
  uint64_t v6;

  __p = 0;
  v5 = 0;
  v6 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a1 + 104), *(_QWORD *)(a1 + 112), (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2);
  (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2, &__p);
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
}

void sub_220F2B1A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<std::vector<int>>,std::vector<int>>::PrintValue(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  char v8;
  char v9;
  char v10;
  char v11;

  v8 = 40;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)&v8, 1);
  v5 = *a3;
  if (*a3 == a3[1])
  {
    v6 = *a3;
  }
  else
  {
    do
    {
      if (v5 != *a3)
      {
        v9 = 44;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)&v9, 1);
      }
      v5 += 4;
      std::ostream::operator<<();
    }
    while (v5 != a3[1]);
    v6 = *a3;
  }
  if (v5 - v6 == 4)
  {
    v10 = 44;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)&v10, 1);
  }
  v11 = 41;
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)&v11, 1);
}

void dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<std::vector<int>>,std::vector<int>>::~FieldEntryBase(dmlc::parameter::FieldAccessEntry *this)
{
  void *v2;

  *(_QWORD *)this = &off_24E6BD430;
  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    operator delete(v2);
  }
  dmlc::parameter::FieldAccessEntry::~FieldAccessEntry((void **)this);
}

{
  void *v2;

  *(_QWORD *)this = &off_24E6BD430;
  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    operator delete(v2);
  }
  dmlc::parameter::FieldAccessEntry::~FieldAccessEntry((void **)this);
  JUMPOUT(0x227667068);
}

void dmlc::parameter::FieldEntry<double>::~FieldEntry(void **a1)
{
  dmlc::parameter::FieldAccessEntry::~FieldAccessEntry(a1);
  JUMPOUT(0x227667068);
}

double dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<double>,double>::SetDefault(uint64_t a1, uint64_t a2)
{
  double result;
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  std::runtime_error *exception;
  std::string v18;
  _QWORD v19[33];

  if (!*(_BYTE *)(a1 + 8))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v19);
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Required parameter ", 19);
    v5 = *(char *)(a1 + 47);
    if (v5 >= 0)
      v6 = a1 + 24;
    else
      v6 = *(_QWORD *)(a1 + 24);
    if (v5 >= 0)
      v7 = *(unsigned __int8 *)(a1 + 47);
    else
      v7 = *(_QWORD *)(a1 + 32);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" of ", 4);
    v12 = *(_QWORD *)(a1 + 48);
    v11 = a1 + 48;
    v10 = v12;
    v13 = *(char *)(v11 + 23);
    if (v13 >= 0)
      v14 = v11;
    else
      v14 = v10;
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(v11 + 23);
    else
      v15 = *(_QWORD *)(v11 + 8);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v14, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" is not presented", 17);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v18);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_24E6B55F0;
  }
  result = *(double *)(a1 + 104);
  *(double *)(a2 + *(_QWORD *)(a1 + 96)) = result;
  return result;
}

void sub_220F2B464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void dmlc::parameter::FieldEntry<double>::Set(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  BOOL v15;
  double v16;
  double v17;
  double v18;
  std::string::size_type v19;
  std::string *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  std::string::size_type v29;
  uint64_t v30;
  char *i;
  int v32;
  unsigned __int8 *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  double v42;
  std::string *Entry;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  BOOL v55;
  uint64_t v56;
  double v57;
  unsigned int v58;
  unsigned int v59;
  BOOL v60;
  std::logic_error *exception;
  void (*v62)(void *);
  struct type_info *v63;
  _QWORD *v64;
  std::string *v65;
  std::string::size_type size;
  _QWORD *v67;
  std::runtime_error *v68;
  std::string v69;
  uint64_t v70[33];
  _BYTE *v71;
  char v72;
  uint64_t v73;

  v6 = 0;
  v71 = 0;
  if (*(char *)(a3 + 23) >= 0)
    v7 = (_BYTE *)a3;
  else
    v7 = *(_BYTE **)a3;
  while (1)
  {
    v8 = v7[v6];
    if (v8 > 0x20 || ((1 << v8) & 0x100003600) == 0)
      break;
    ++v6;
  }
  v10 = 0;
  v11 = v8 == 45 || v8 == 43;
  v12 = v11;
  if (v11)
    v13 = v7 + 1;
  else
    v13 = v7;
  v14 = &v13[v6 + 8];
  while ((v13[v10 + v6] | 0x20) == aInfinity[v10])
  {
    if (++v10 == 8)
      goto LABEL_24;
  }
  v14 = &v7[v12 + v6 + v10];
  if ((_DWORD)v10 != 8 && (_DWORD)v10 != 3)
  {
    v30 = 0;
    v14 = &v7[v12 + 3 + v6];
    while ((v7[v12 + v30 + v6] | 0x20) == aNan[v30])
    {
      if (++v30 == 3)
      {
        if (*v14 == 40)
        {
          for (i = &v7[v12 + 4 + v6]; ; ++i)
          {
            v32 = *i;
            if ((v32 - 48) >= 0xA && v32 != 95 && (v32 & 0xFFFFFFDF) - 65 > 0x19)
              break;
          }
          v72 = 41;
          if (v32 != 41)
          {
            dmlc::LogCheckFormat<char,char>(i, &v72, &v73);
            if (v73)
            {
              Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v70);
              dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/././strtonum.h");
              v44 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v70);
              v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"Check failed: ", 14);
              v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"*p == ')'", 9);
              v47 = *(char *)(v73 + 23);
              v48 = v47 >= 0 ? v73 : *(_QWORD *)v73;
              v49 = v47 >= 0 ? *(unsigned __int8 *)(v73 + 23) : *(_QWORD *)(v73 + 8);
              v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, v48, v49);
              v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)": ", 2);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"Invalid NAN literal", 19);
              dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v70);
              v52 = v73;
              v73 = 0;
              if (v52)
                std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v73, v52);
            }
          }
          v14 = i + 1;
        }
        v53 = 0x7FF8000000000000;
        goto LABEL_82;
      }
    }
    v34 = &v7[v12 + v6];
    v35 = *v34;
    if (v35 - 48 > 9)
    {
      v36 = 0;
    }
    else
    {
      v36 = 0;
      do
      {
        v36 = 10 * v36 + v35 - 48;
        v37 = *++v34;
        v35 = v37;
      }
      while (v37 - 48 < 0xA);
    }
    v16 = (double)(unint64_t)v36;
    if (v35 == 46)
    {
      v35 = v34[1];
      if (v35 - 48 > 9)
      {
        v42 = 0.0;
        ++v34;
      }
      else
      {
        v38 = 0;
        v39 = 0;
        v40 = 1;
        do
        {
          v41 = 10 * v39 + v35 - 48;
          if (v38 < 0x13)
          {
            v40 *= 10;
            v39 = v41;
          }
          v35 = v34[v38++ + 2];
        }
        while (v35 - 48 < 0xA);
        v42 = (double)v39 / (double)v40;
        v34 += v38 + 1;
      }
      v16 = v42 + v16;
    }
    if ((v35 | 0x20) != 0x65)
    {
      v14 = v34;
LABEL_111:
      if ((v35 | 0x20) == 0x66)
        ++v14;
      v17 = -v16;
      v15 = v8 == 45;
      goto LABEL_25;
    }
    v54 = v34[1];
    v55 = v54 == 45 || v54 == 43;
    v56 = 1;
    if (v55)
    {
      v56 = 2;
      v14 = v34 + 2;
    }
    else
    {
      v14 = v34 + 1;
    }
    v35 = v34[v56];
    v57 = 1.0;
    if (v35 - 48 > 9)
    {
LABEL_108:
      if (v54 == 45)
        v16 = v16 / v57;
      else
        v16 = v16 * v57;
      goto LABEL_111;
    }
    v58 = 0;
    do
    {
      v58 = v35 + 10 * v58 - 48;
      v59 = *++v14;
      v35 = v59;
    }
    while (v59 - 48 < 0xA);
    if (v58 >= 0x135)
    {
LABEL_96:
      *__error() = 34;
      v53 = 0x7FF0000000000000;
LABEL_82:
      v18 = *(double *)&v53;
      goto LABEL_28;
    }
    if (v58 == 308)
    {
      v60 = v16 > 1.79769313;
      if (v54 == 45)
        v60 = v16 < 2.22507386;
      if (v60)
        goto LABEL_96;
    }
    else
    {
      v57 = 1.0;
      if (v58 <= 7)
        goto LABEL_106;
    }
    v57 = 1.0;
    do
    {
      v57 = v57 * 100000000.0;
      v58 -= 8;
    }
    while (v58 > 7);
LABEL_106:
    while (v58)
    {
      v57 = v57 * 10.0;
      --v58;
    }
    goto LABEL_108;
  }
LABEL_24:
  v15 = v8 == 45;
  v16 = INFINITY;
  v17 = -INFINITY;
LABEL_25:
  if (v15)
    v18 = v17;
  else
    v18 = v16;
LABEL_28:
  if (*__error() == 34 && v18 == INFINITY)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Out of range value");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    v62 = (void (*)(void *))MEMORY[0x24BEDAB00];
    v63 = (struct type_info *)off_24E6B45A8;
    goto LABEL_116;
  }
  if (v14 == v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "No conversion could be performed");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    v62 = (void (*)(void *))MEMORY[0x24BEDAB88];
    v63 = (struct type_info *)off_24E6B45B0;
LABEL_116:
    __cxa_throw(exception, v63, v62);
  }
  v71 = (_BYTE *)(v14 - v7);
  *(double *)(a2 + *(_QWORD *)(a1 + 96)) = v18;
  v19 = *(unsigned __int8 *)(a3 + 23);
  if ((v19 & 0x80u) != 0)
    v19 = *(_QWORD *)(a3 + 8);
  v69.__r_.__value_.__r.__words[0] = v19;
  if (v14 - v7 > v19)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(v70);
    if (v70[0])
    {
      v20 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v69);
      dmlc::LogMessageFatal::Entry::Init(v20, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/./parameter.h");
      v21 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v69);
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Check failed: ", 14);
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"pos <= value.length()", 21);
      v24 = *(char *)(v70[0] + 23);
      v25 = v24 >= 0 ? v70[0] : *(_QWORD *)v70[0];
      v26 = v24 >= 0 ? *(unsigned __int8 *)(v70[0] + 23) : *(_QWORD *)(v70[0] + 8);
      v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v69);
      v28 = v70[0];
      v70[0] = 0;
      if (v28)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v70, v28);
    }
  }
  v29 = *(unsigned __int8 *)(a3 + 23);
  if ((v29 & 0x80u) != 0)
    v29 = *(_QWORD *)(a3 + 8);
  if ((unint64_t)v71 < v29)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v70);
    v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"Some trailing characters could not be parsed: '", 47);
    std::string::basic_string(&v69, (const std::string *)a3, (std::string::size_type)v71, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v73);
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v65 = &v69;
    else
      v65 = (std::string *)v69.__r_.__value_.__r.__words[0];
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v69.__r_.__value_.__r.__words[2]);
    else
      size = v69.__r_.__value_.__l.__size_;
    v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)v65, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"'", 1);
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v69.__r_.__value_.__l.__data_);
    v68 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(v68, &v69);
    v68->__vftable = (std::runtime_error_vtbl *)&unk_24E6B55F0;
  }
}

void sub_220F2BB78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;
  int v17;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a16);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void sub_220F2BC10(void *a1, int a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  std::runtime_error *exception;
  uint64_t v27;
  va_list va;
  uint64_t v29;
  uint64_t v30;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v27 = va_arg(va1, _QWORD);
  v29 = va_arg(va1, _QWORD);
  v30 = va_arg(va1, _QWORD);
  __cxa_free_exception(v5);
  if (a2 == 2)
  {
    __cxa_begin_catch(a1);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)va1);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((uint64_t *)va1, (uint64_t)"Invalid Parameter format for ", 29);
    v9 = *(char *)(v4 + 47);
    if (v9 >= 0)
      v10 = v4 + 24;
    else
      v10 = *(_QWORD *)(v4 + 24);
    if (v9 >= 0)
      v11 = *(unsigned __int8 *)(v4 + 47);
    else
      v11 = *(_QWORD *)(v4 + 32);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" expect ", 8);
    v16 = *(_QWORD *)(v4 + 48);
    v15 = v4 + 48;
    v14 = v16;
    v17 = *(char *)(v15 + 23);
    if (v17 >= 0)
      v18 = v15;
    else
      v18 = v14;
    if (v17 >= 0)
      v19 = *(unsigned __int8 *)(v15 + 23);
    else
      v19 = *(_QWORD *)(v15 + 8);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v18, v19);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" but value='", 12);
    v22 = *(char *)(v3 + 23);
    if (v22 >= 0)
      v23 = v3;
    else
      v23 = *(_QWORD *)v3;
    if (v22 >= 0)
      v24 = *(unsigned __int8 *)(v3 + 23);
    else
      v24 = *(_QWORD *)(v3 + 8);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v23, v24);
    LOBYTE(v27) = 39;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)va, 1);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, (const std::string *)va);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_24E6B55F0;
  }
  JUMPOUT(0x220F2BD78);
}

void sub_220F2BC28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v14;

  v14 = a13;
  a13 = 0;
  if (v14)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a13, v14);
  _Unwind_Resume(a1);
}

void sub_220F2BC54()
{
  JUMPOUT(0x220F2BC5CLL);
}

void sub_220F2BE60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;
  int v17;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a16);
      __cxa_end_catch();
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

uint64_t dmlc::parameter::FieldEntryNumeric<dmlc::parameter::FieldEntry<double>,double>::Check(uint64_t result, uint64_t a2)
{
  double v2;
  double v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  std::runtime_error *exception;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  std::runtime_error *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  std::runtime_error *v65;
  std::string v66;
  _QWORD v67[33];

  v2 = *(double *)(a2 + *(_QWORD *)(result + 96));
  if (*(_BYTE *)(result + 112))
  {
    v3 = *(double *)(result + 120);
    if (*(_BYTE *)(result + 113))
    {
      if (v2 < v3 || v2 > *(double *)(result + 128))
      {
        v4 = result;
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v67);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"value ", 6);
        v5 = (_QWORD *)std::ostream::operator<<();
        v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" for Parameter ", 15);
        v7 = *(char *)(v4 + 47);
        if (v7 >= 0)
          v8 = v4 + 24;
        else
          v8 = *(_QWORD *)(v4 + 24);
        if (v7 >= 0)
          v9 = *(unsigned __int8 *)(v4 + 47);
        else
          v9 = *(_QWORD *)(v4 + 32);
        v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" exceed bound [", 15);
        v11 = (_QWORD *)std::ostream::operator<<();
        v66.__r_.__value_.__s.__data_[0] = 44;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v66, 1);
        v12 = (_QWORD *)std::ostream::operator<<();
        v66.__r_.__value_.__s.__data_[0] = 93;
        v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v66, 1);
        v66.__r_.__value_.__s.__data_[0] = 10;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)&v66, 1);
        v14 = *(char *)(v4 + 47);
        if (v14 >= 0)
          v15 = v4 + 24;
        else
          v15 = *(_QWORD *)(v4 + 24);
        if (v14 >= 0)
          v16 = *(unsigned __int8 *)(v4 + 47);
        else
          v16 = *(_QWORD *)(v4 + 32);
        v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v15, v16);
        v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)": ", 2);
        v21 = *(_QWORD *)(v4 + 72);
        v20 = v4 + 72;
        v19 = v21;
        v22 = *(char *)(v20 + 23);
        if (v22 >= 0)
          v23 = v20;
        else
          v23 = v19;
        if (v22 >= 0)
          v24 = *(unsigned __int8 *)(v20 + 23);
        else
          v24 = *(_QWORD *)(v20 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v23, v24);
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(exception, &v66);
        exception->__vftable = (std::runtime_error_vtbl *)&unk_24E6B55F0;
      }
    }
    else if (v2 < v3)
    {
      v46 = result;
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v67);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"value ", 6);
      v47 = (_QWORD *)std::ostream::operator<<();
      v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)" for Parameter ", 15);
      v49 = *(char *)(v46 + 47);
      if (v49 >= 0)
        v50 = v46 + 24;
      else
        v50 = *(_QWORD *)(v46 + 24);
      if (v49 >= 0)
        v51 = *(unsigned __int8 *)(v46 + 47);
      else
        v51 = *(_QWORD *)(v46 + 32);
      v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, v50, v51);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)" should be greater equal to ", 28);
      v53 = (_QWORD *)std::ostream::operator<<();
      v66.__r_.__value_.__s.__data_[0] = 10;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)&v66, 1);
      v54 = *(char *)(v46 + 47);
      if (v54 >= 0)
        v55 = v46 + 24;
      else
        v55 = *(_QWORD *)(v46 + 24);
      if (v54 >= 0)
        v56 = *(unsigned __int8 *)(v46 + 47);
      else
        v56 = *(_QWORD *)(v46 + 32);
      v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v55, v56);
      v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)": ", 2);
      v61 = *(_QWORD *)(v46 + 72);
      v60 = v46 + 72;
      v59 = v61;
      v62 = *(char *)(v60 + 23);
      if (v62 >= 0)
        v63 = v60;
      else
        v63 = v59;
      if (v62 >= 0)
        v64 = *(unsigned __int8 *)(v60 + 23);
      else
        v64 = *(_QWORD *)(v60 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, v63, v64);
      v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(v65, &v66);
      v65->__vftable = (std::runtime_error_vtbl *)&unk_24E6B55F0;
    }
  }
  else if (*(_BYTE *)(result + 113) && v2 > *(double *)(result + 128))
  {
    v26 = result;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"value ", 6);
    v27 = (_QWORD *)std::ostream::operator<<();
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" for Parameter ", 15);
    v29 = *(char *)(v26 + 47);
    if (v29 >= 0)
      v30 = v26 + 24;
    else
      v30 = *(_QWORD *)(v26 + 24);
    if (v29 >= 0)
      v31 = *(unsigned __int8 *)(v26 + 47);
    else
      v31 = *(_QWORD *)(v26 + 32);
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, v30, v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" should be smaller equal to ", 28);
    v33 = (_QWORD *)std::ostream::operator<<();
    v66.__r_.__value_.__s.__data_[0] = 10;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)&v66, 1);
    v34 = *(char *)(v26 + 47);
    if (v34 >= 0)
      v35 = v26 + 24;
    else
      v35 = *(_QWORD *)(v26 + 24);
    if (v34 >= 0)
      v36 = *(unsigned __int8 *)(v26 + 47);
    else
      v36 = *(_QWORD *)(v26 + 32);
    v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v35, v36);
    v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)": ", 2);
    v41 = *(_QWORD *)(v26 + 72);
    v40 = v26 + 72;
    v39 = v41;
    v42 = *(char *)(v40 + 23);
    if (v42 >= 0)
      v43 = v40;
    else
      v43 = v39;
    if (v42 >= 0)
      v44 = *(unsigned __int8 *)(v40 + 23);
    else
      v44 = *(_QWORD *)(v40 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, v43, v44);
    v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(v45, &v66);
    v45->__vftable = (std::runtime_error_vtbl *)&unk_24E6B55F0;
  }
  return result;
}

void sub_220F2C34C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a16 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<double>,double>::GetStringValue(_QWORD *a1, uint64_t a2)
{
  _QWORD v5[11];
  char v6;
  uint64_t v7;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v5);
  (*(void (**)(_QWORD *, _QWORD *, double))(*a1 + 64))(a1, v5, *(double *)(a2 + a1[12]));
  std::stringbuf::str();
  v5[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v5[1] = MEMORY[0x24BEDB848] + 16;
  if (v6 < 0)
    operator delete((void *)v5[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v7);
}

void sub_220F2C47C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<double>,double>::GetFieldInfo@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void **v8;
  __int128 v10;
  uint64_t v11;
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  std::string::operator=((std::string *)a2, (const std::string *)(a1 + 24));
  std::string::operator=((std::string *)(a2 + 24), (const std::string *)(a1 + 48));
  v4 = *(char *)(a1 + 71);
  if (v4 >= 0)
    v5 = a1 + 48;
  else
    v5 = *(_QWORD *)(a1 + 48);
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a1 + 71);
  else
    v6 = *(_QWORD *)(a1 + 56);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v5, v6);
  if (*(_BYTE *)(a1 + 8))
  {
    LOBYTE(v10) = 44;
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v10, 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" optional, default=", 19);
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 56))(a1, v12);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", required", 10);
  }
  std::stringbuf::str();
  v8 = (void **)(a2 + 48);
  if (*(char *)(a2 + 71) < 0)
    operator delete(*v8);
  *(_OWORD *)v8 = v10;
  *(_QWORD *)(a2 + 64) = v11;
  std::string::operator=((std::string *)(a2 + 72), (const std::string *)(a1 + 72));
  v12[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v12[1] = MEMORY[0x24BEDB848] + 16;
  if (v13 < 0)
    operator delete((void *)v12[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v14);
}

void sub_220F2C618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v4;
  va_list va;

  va_start(va, a4);
  std::ostringstream::~ostringstream((uint64_t)va);
  dmlc::ParamFieldInfo::~ParamFieldInfo(v4);
  _Unwind_Resume(a1);
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<double>,double>::PrintDefaultValueString(double *a1)
{
  return (*(uint64_t (**)(double *, double))(*(_QWORD *)a1 + 64))(a1, a1[13]);
}

uint64_t dmlc::parameter::FieldEntry<double>::PrintValue(uint64_t a1, _QWORD *a2)
{
  *(_QWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 16) = 17;
  return std::ostream::operator<<();
}

uint64_t dmlc::parameter::FieldEntryNumeric<dmlc::parameter::FieldEntry<double>,double>::set_lower_bound(uint64_t result, double a2)
{
  *(double *)(result + 120) = a2;
  *(_BYTE *)(result + 112) = 1;
  return result;
}

void std::vector<xgboost::TreeGenReg const*>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void std::__function::__func<xgboost::$_1,std::allocator<xgboost::$_1>,xgboost::TreeGenerator * ()(xgboost::FeatureMap const&,std::string,BOOL)>::~__func()
{
  JUMPOUT(0x227667068);
}

_QWORD *std::__function::__func<xgboost::$_1,std::allocator<xgboost::$_1>,xgboost::TreeGenerator * ()(xgboost::FeatureMap const&,std::string,BOOL)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6BD538;
  return result;
}

uint64_t std::__function::__func<xgboost::$_1,std::allocator<xgboost::$_1>,xgboost::TreeGenerator * ()(xgboost::FeatureMap const&,std::string,BOOL)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  char v5;
  uint64_t v6;

  v5 = *a4;
  v6 = operator new();
  *(_QWORD *)v6 = &off_24E6BD650;
  *(_QWORD *)(v6 + 8) = a2;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](v6 + 16);
  *(_BYTE *)(v6 + 296) = v5;
  *(_QWORD *)v6 = &off_24E6BD5B8;
  return v6;
}

void sub_220F2C738(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10F3C405A4AFA71);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<xgboost::$_1,std::allocator<xgboost::$_1>,xgboost::TreeGenerator * ()(xgboost::FeatureMap const&,std::string,BOOL)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<xgboost::$_1,std::allocator<xgboost::$_1>,xgboost::TreeGenerator * ()(xgboost::FeatureMap const&,std::string,BOOL)>::target_type()
{
}

void xgboost::TextGenerator::Indicator(xgboost::FeatureMap **this@<X0>, const xgboost::RegTree *a2@<X1>, int __val@<W2>, std::string *a4@<X8>)
{
  unsigned __int8 v8;
  uint64_t v9;
  int v10;
  int *v11;
  int *v12;
  int v13;
  uint64_t v14;
  int v15;
  int *v16;
  int *v17;
  uint64_t i;
  const void **v19;
  std::string __p;
  std::string v21;
  char *v22;
  std::string v23;
  _QWORD v24[3];
  const void *v25[3];
  std::string v26;
  _QWORD v27[6];
  _QWORD v28[3];
  std::string v29;
  _QWORD v30[3];
  __int128 v31;
  _QWORD v32[2];

  v32[1] = *MEMORY[0x24BDAC8D0];
  v8 = atomic_load((unsigned __int8 *)&qword_253F36C60);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_253F36C60))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_253F36D48, "{nid}:[{fname}] yes={yes},no={no}");
    __cxa_atexit(MEMORY[0x24BEDACF0], qword_253F36D48, &dword_220DF6000);
    __cxa_guard_release(&qword_253F36C60);
  }
  v9 = *((_QWORD *)a2 + 20) + 20 * __val;
  v10 = *(_DWORD *)(v9 + 12);
  v11 = (int *)(v9 + 8);
  v12 = (int *)(v9 + 4);
  if (v10 < 0)
    v12 = v11;
  v13 = *v12;
  std::to_string(&v23, __val);
  std::string::basic_string[abi:ne180100]<0>(v25, "{nid}");
  v26 = v23;
  memset(&v23, 0, sizeof(v23));
  v22 = xgboost::FeatureMap::Name(this[1], v10 & 0x7FFFFFFF);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const*,0>(v27, &v22);
  std::to_string(&v21, v13);
  std::string::basic_string[abi:ne180100]<0>(v28, "{yes}");
  v29 = v21;
  memset(&v21, 0, sizeof(v21));
  v14 = *((_QWORD *)a2 + 20) + 20 * __val;
  v15 = *(_DWORD *)(v14 + 12);
  v16 = (int *)(v14 + 4);
  v17 = (int *)(v14 + 8);
  if (v15 < 0)
    v17 = v16;
  std::to_string(&__p, *v17);
  std::string::basic_string[abi:ne180100]<0>(v30, "{no}");
  v31 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  v32[0] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  memset(&__p, 0, sizeof(__p));
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v24, v25, 4);
  xgboost::TreeGenerator::Match(a4, (uint64_t)qword_253F36D48, v24);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v24, (_QWORD *)v24[1]);
  for (i = 0; i != -24; i -= 6)
  {
    v19 = &v25[i];
    if (SHIBYTE(v32[i]) < 0)
      operator delete((void *)v19[21]);
    if (*((char *)v19 + 167) < 0)
      operator delete((void *)v19[18]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
}

void sub_220F2CA30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,char a31)
{
  __cxa_guard_abort(&qword_253F36C60);
  _Unwind_Resume(a1);
}

void xgboost::TextGenerator::Categorical(xgboost::TextGenerator *this@<X0>, const xgboost::RegTree *a2@<X1>, xgboost::RegTree *a3@<X2>, int a4@<W3>, std::string *a5@<X8>)
{
  int v6;
  unsigned __int8 v10;
  std::string __p;
  std::string v12;
  void *v13[3];

  v6 = (int)a3;
  xgboost::GetSplitCategories(a2, a3, (char **)v13);
  xgboost::PrintCatsAsSet(v13);
  v10 = atomic_load((unsigned __int8 *)&qword_253F36C68);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_253F36C68))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_253F36D60, "{tabs}{nid}:[{fname}:{cond}] yes={right},no={left},missing={missing}");
    __cxa_atexit(MEMORY[0x24BEDACF0], qword_253F36D60, &dword_220DF6000);
    __cxa_guard_release(&qword_253F36C68);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
  else
    __p = v12;
  xgboost::TextGenerator::SplitNodeImpl(a5, (uint64_t)this, (uint64_t)a2, v6, (uint64_t)qword_253F36D60, (__int128 *)&__p, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (v13[0])
  {
    v13[1] = v13[0];
    operator delete(v13[0]);
  }
}

void sub_220F2CC58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23)
{
  __cxa_guard_abort(&qword_253F36C68);
  if (a21 < 0)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  _Unwind_Resume(a1);
}

void xgboost::TextGenerator::Integer(xgboost::TextGenerator *this@<X0>, const xgboost::RegTree *a2@<X1>, int a3@<W2>, int a4@<W3>, std::string *a5@<X8>)
{
  unsigned __int8 v10;
  float v11;
  unsigned int v12;
  int v13;
  std::string v14;

  v10 = atomic_load((unsigned __int8 *)&qword_253F36C70);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_253F36C70))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_253F36D78, "{tabs}{nid}:[{fname}<{cond}] yes={left},no={right},missing={missing}");
    __cxa_atexit(MEMORY[0x24BEDACF0], qword_253F36D78, &dword_220DF6000);
    __cxa_guard_release(&qword_253F36C70);
  }
  v11 = *(float *)(*((_QWORD *)a2 + 20) + 20 * a3 + 16);
  v12 = vcvtms_s32_f32(v11);
  if (floorf(v11) == v11)
    v13 = v12;
  else
    v13 = v12 + 1;
  std::to_string(&v14, v13);
  xgboost::TextGenerator::SplitNodeImpl(a5, (uint64_t)this, (uint64_t)a2, a3, (uint64_t)qword_253F36D78, (__int128 *)&v14, a4);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
}

void sub_220F2CDB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_guard_abort(&qword_253F36C70);
  _Unwind_Resume(a1);
}

void xgboost::TextGenerator::Quantitive(xgboost::TextGenerator *this@<X0>, const xgboost::RegTree *a2@<X1>, int a3@<W2>, int a4@<W3>, std::string *a5@<X8>)
{
  unsigned __int8 v10;
  __int128 __p;
  char v12;

  v10 = atomic_load((unsigned __int8 *)&qword_253F36C78);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_253F36C78))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_253F36D90, "{tabs}{nid}:[{fname}<{cond}] yes={left},no={right},missing={missing}");
    __cxa_atexit(MEMORY[0x24BEDACF0], qword_253F36D90, &dword_220DF6000);
    __cxa_guard_release(&qword_253F36C78);
  }
  xgboost::TreeGenerator::ToStr<float>();
  xgboost::TextGenerator::SplitNodeImpl(a5, (uint64_t)this, (uint64_t)a2, a3, (uint64_t)qword_253F36D90, &__p, a4);
  if (v12 < 0)
    operator delete((void *)__p);
}

void sub_220F2CED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_guard_abort(&qword_253F36C78);
  _Unwind_Resume(a1);
}

void xgboost::TextGenerator::NodeStat(std::string *a1@<X8>)
{
  unsigned __int8 v4;
  uint64_t i;
  const void **v6;
  void *__p[2];
  uint64_t v8;
  void *v9[2];
  uint64_t v10;
  _QWORD v11[3];
  const void *v12[3];
  __int128 v13;
  uint64_t v14;
  _QWORD v15[3];
  __int128 v16;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x24BDAC8D0];
  v4 = atomic_load((unsigned __int8 *)&qword_253F36C80);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_253F36C80))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_253F36DA8, ",gain={loss_chg},cover={sum_hess}");
    __cxa_atexit(MEMORY[0x24BEDACF0], qword_253F36DA8, &dword_220DF6000);
    __cxa_guard_release(&qword_253F36C80);
  }
  xgboost::TreeGenerator::ToStr<float>();
  std::string::basic_string[abi:ne180100]<0>(v12, "{loss_chg}");
  v13 = *(_OWORD *)v9;
  v14 = v10;
  xgboost::TreeGenerator::ToStr<float>();
  std::string::basic_string[abi:ne180100]<0>(v15, "{sum_hess}");
  v16 = *(_OWORD *)__p;
  v17[0] = v8;
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v11, v12, 2);
  xgboost::TreeGenerator::Match(a1, (uint64_t)qword_253F36DA8, v11);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v11, (_QWORD *)v11[1]);
  for (i = 0; i != -12; i -= 6)
  {
    v6 = &v12[i];
    if (SHIBYTE(v17[i]) < 0)
      operator delete((void *)v6[9]);
    if (*((char *)v6 + 71) < 0)
      operator delete((void *)v6[6]);
  }
}

void sub_220F2D0C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24)
{
  __cxa_guard_abort(&qword_253F36C80);
  _Unwind_Resume(a1);
}

void xgboost::TextGenerator::PlainNode(xgboost::TextGenerator *this@<X0>, const xgboost::RegTree *a2@<X1>, int a3@<W2>, int a4@<W3>, std::string *a5@<X8>)
{
  unsigned __int8 v10;
  __int128 __p;
  char v12;

  v10 = atomic_load((unsigned __int8 *)&qword_253F36C88);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_253F36C88))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_253F36DC0, "{tabs}{nid}:[f{fname}<{cond}] yes={left},no={right},missing={missing}");
    __cxa_atexit(MEMORY[0x24BEDACF0], qword_253F36DC0, &dword_220DF6000);
    __cxa_guard_release(&qword_253F36C88);
  }
  xgboost::TreeGenerator::ToStr<float>();
  xgboost::TextGenerator::SplitNodeImpl(a5, (uint64_t)this, (uint64_t)a2, a3, (uint64_t)qword_253F36DC0, &__p, a4);
  if (v12 < 0)
    operator delete((void *)__p);
}

void sub_220F2D28C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_guard_abort(&qword_253F36C88);
  _Unwind_Resume(a1);
}

void xgboost::TreeGenerator::SplitNode(xgboost::TreeGenerator *this@<X0>, const xgboost::RegTree *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  unint64_t v10;
  int v11;
  xgboost::FeatureMap *v12;
  unint64_t *v13;
  std::string *v14;
  _QWORD *v15;
  std::string *Entry;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  char *v20;
  size_t v21;
  _QWORD *v22;
  __int128 v23;
  unint64_t *v24;
  __int128 v25;
  unint64_t *v26;
  BOOL v27;
  unint64_t v28;

  v10 = *(_DWORD *)(*((_QWORD *)a2 + 20) + 20 * (int)a3 + 12) & 0x7FFFFFFF;
  LODWORD(v28) = v10;
  a5[1] = 0;
  a5[2] = 0;
  v11 = *(unsigned __int8 *)(*((_QWORD *)a2 + 29) + (int)a3);
  *a5 = 0;
  v27 = v11 == 1;
  v12 = (xgboost::FeatureMap *)*((_QWORD *)this + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v12 + 1) - *(_QWORD *)v12) >> 3) > v10)
  {
    *(_QWORD *)&v25 = &v27;
    *((_QWORD *)&v25 + 1) = this;
    v26 = &v28;
    switch(xgboost::FeatureMap::TypeOf(v12, v10))
    {
      case 0u:
        xgboost::TreeGenerator::SplitNode(xgboost::RegTree const&,int,unsigned int)::{lambda(void)#2}::operator()((uint64_t)&v25);
        (**(void (***)(__int128 *__return_ptr, xgboost::TreeGenerator *, const xgboost::RegTree *, uint64_t, uint64_t))this)(&v23, this, a2, a3, a4);
        goto LABEL_13;
      case 1u:
      case 3u:
        xgboost::TreeGenerator::SplitNode(xgboost::RegTree const&,int,unsigned int)::{lambda(void)#2}::operator()((uint64_t)&v25);
        (*(void (**)(__int128 *__return_ptr, xgboost::TreeGenerator *, const xgboost::RegTree *, uint64_t, uint64_t))(*(_QWORD *)this + 24))(&v23, this, a2, a3, a4);
        goto LABEL_13;
      case 2u:
        xgboost::TreeGenerator::SplitNode(xgboost::RegTree const&,int,unsigned int)::{lambda(void)#2}::operator()((uint64_t)&v25);
        (*(void (**)(__int128 *__return_ptr, xgboost::TreeGenerator *, const xgboost::RegTree *, uint64_t, uint64_t))(*(_QWORD *)this + 16))(&v23, this, a2, a3, a4);
        goto LABEL_13;
      case 4u:
        if (!v27)
        {
          Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v23);
          dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
          v17 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v23);
          v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Check failed: is_categorical", 28);
          v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)": ", 2);
          v20 = xgboost::FeatureMap::Name(*((xgboost::FeatureMap **)this + 1), v28);
          v21 = strlen(v20);
          v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" in feature map is numerical but tree node is categorical.", 58);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v23);
        }
        (*(void (**)(__int128 *__return_ptr, xgboost::TreeGenerator *, const xgboost::RegTree *, uint64_t, uint64_t))(*(_QWORD *)this + 8))(&v23, this, a2, a3, a4);
LABEL_13:
        *(_OWORD *)a5 = v23;
        v13 = v24;
        goto LABEL_14;
      default:
        v14 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v23);
        dmlc::LogMessageFatal::Entry::Init(v14, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
        v15 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v23);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Unknown feature map type.", 25);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v23);
        return;
    }
  }
  if (v11 == 1)
    (*(void (**)(__int128 *__return_ptr, xgboost::TreeGenerator *, const xgboost::RegTree *, uint64_t, uint64_t))(*(_QWORD *)this + 8))(&v25, this, a2, a3, a4);
  else
    (*(void (**)(__int128 *__return_ptr, xgboost::TreeGenerator *, const xgboost::RegTree *, uint64_t, uint64_t))(*(_QWORD *)this + 40))(&v25, this, a2, a3, a4);
  *(_OWORD *)a5 = v25;
  v13 = v26;
LABEL_14:
  a5[2] = v13;
}

void sub_220F2D510(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  _Unwind_Resume(a1);
}

void xgboost::TextGenerator::LeafNode(xgboost::TextGenerator *this@<X0>, int a2@<W2>, int a3@<W3>, std::string *a4@<X8>)
{
  unsigned __int8 v9;
  unsigned __int8 v10;
  int v11;
  uint64_t i;
  const void **v13;
  void *v14[2];
  uint64_t v15;
  _QWORD v16[3];
  std::string __p;
  void *v18[2];
  uint64_t v19;
  std::string v20;
  std::string v21;
  void *v22[3];
  void *v23[2];
  char v24;
  __int128 v25;
  uint64_t v26;
  const void *v27[3];
  std::string v28;
  _QWORD v29[3];
  std::string v30;
  _QWORD v31[3];
  __int128 v32;
  uint64_t v33;
  _QWORD v34[3];
  __int128 v35;
  _QWORD v36[2];

  v36[1] = *MEMORY[0x24BDAC8D0];
  v9 = atomic_load((unsigned __int8 *)&qword_253F36C90);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_253F36C90))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_253F36DD8, "{tabs}{nid}:leaf={leaf}{stats}");
    __cxa_atexit(MEMORY[0x24BEDACF0], qword_253F36DD8, &dword_220DF6000);
    __cxa_guard_release(&qword_253F36C90);
  }
  v10 = atomic_load((unsigned __int8 *)&qword_253F36C98);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_253F36C98))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_253F36DF0, ",cover={cover}");
    __cxa_atexit(MEMORY[0x24BEDACF0], qword_253F36DF0, &dword_220DF6000);
    __cxa_guard_release(&qword_253F36C98);
  }
  xgboost::TreeGenerator::Tabs(&v21, a3);
  std::string::basic_string[abi:ne180100]<0>(v27, "{tabs}");
  v28 = v21;
  memset(&v21, 0, sizeof(v21));
  std::to_string(&v20, a2);
  std::string::basic_string[abi:ne180100]<0>(v29, "{nid}");
  v30 = v20;
  memset(&v20, 0, sizeof(v20));
  xgboost::TreeGenerator::ToStr<float>();
  std::string::basic_string[abi:ne180100]<0>(v31, "{leaf}");
  v32 = *(_OWORD *)v18;
  v33 = v19;
  v18[1] = 0;
  v19 = 0;
  v18[0] = 0;
  v11 = *((unsigned __int8 *)this + 296);
  if (v11)
  {
    xgboost::TreeGenerator::ToStr<float>();
    std::string::basic_string[abi:ne180100]<0>(v23, "{cover}");
    v25 = *(_OWORD *)v14;
    v26 = v15;
    HIBYTE(v15) = 0;
    v14[0] = 0;
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v16, (const void **)v23, 1);
    xgboost::TreeGenerator::Match(&__p, (uint64_t)qword_253F36DF0, v16);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&unk_220F8364E);
  }
  std::string::basic_string[abi:ne180100]<0>(v34, "{stats}");
  v35 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  v36[0] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  memset(&__p, 0, sizeof(__p));
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v22, v27, 4);
  xgboost::TreeGenerator::Match(a4, (uint64_t)qword_253F36DD8, v22);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v22, (_QWORD *)v22[1]);
  for (i = 0; i != -24; i -= 6)
  {
    v13 = &v27[i];
    if (SHIBYTE(v36[i]) < 0)
      operator delete((void *)v13[21]);
    if (*((char *)v13 + 167) < 0)
      operator delete((void *)v13[18]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v11)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v16, (_QWORD *)v16[1]);
    if (SHIBYTE(v26) < 0)
      operator delete((void *)v25);
    if (v24 < 0)
      operator delete(v23[0]);
    if (SHIBYTE(v15) < 0)
      operator delete(v14[0]);
  }
  if (SHIBYTE(v19) < 0)
    operator delete(v18[0]);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_220F2D8C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  __cxa_guard_abort(&qword_253F36C98);
  _Unwind_Resume(a1);
}

void sub_220F2DA04()
{
  JUMPOUT(0x220F2D9C4);
}

void sub_220F2DA10()
{
  JUMPOUT(0x220F2D9C4);
}

void sub_220F2DA20()
{
  JUMPOUT(0x220F2D9FCLL);
}

void xgboost::TextGenerator::BuildTree(xgboost::TextGenerator *this@<X0>, const xgboost::RegTree *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, std::string *a5@<X8>)
{
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t i;
  const void **v13;
  void *__p[2];
  uint64_t v15;
  void *v16[2];
  uint64_t v17;
  void *v18[2];
  uint64_t v19;
  void *v20[2];
  uint64_t v21;
  _QWORD v22[3];
  const void *v23[3];
  __int128 v24;
  uint64_t v25;
  _QWORD v26[3];
  __int128 v27;
  uint64_t v28;
  _QWORD v29[3];
  __int128 v30;
  uint64_t v31;
  _QWORD v32[3];
  __int128 v33;
  _QWORD v34[2];

  v34[1] = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(*((_QWORD *)a2 + 20) + 20 * (int)a3 + 4) == -1)
  {
    (*(void (**)(xgboost::TextGenerator *, const xgboost::RegTree *, uint64_t, uint64_t))(*(_QWORD *)this + 56))(this, a2, a3, a4);
  }
  else
  {
    v10 = atomic_load((unsigned __int8 *)&qword_253F36CA0);
    if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_253F36CA0))
    {
      std::string::basic_string[abi:ne180100]<0>(qword_253F36E08, "{parent}{stat}\n{left}\n{right}");
      __cxa_atexit(MEMORY[0x24BEDACF0], qword_253F36E08, &dword_220DF6000);
      __cxa_guard_release(&qword_253F36CA0);
    }
    (*(void (**)(void **__return_ptr, xgboost::TextGenerator *, const xgboost::RegTree *, uint64_t, uint64_t))(*(_QWORD *)this + 48))(v20, this, a2, a3, a4);
    std::string::basic_string[abi:ne180100]<0>(v23, "{parent}");
    v24 = *(_OWORD *)v20;
    v25 = v21;
    v20[1] = 0;
    v21 = 0;
    v20[0] = 0;
    if (*((_BYTE *)this + 296))
      (*(void (**)(void **__return_ptr, xgboost::TextGenerator *, const xgboost::RegTree *, uint64_t))(*(_QWORD *)this + 32))(v18, this, a2, a3);
    else
      std::string::basic_string[abi:ne180100]<0>(v18, (char *)&unk_220F8364E);
    std::string::basic_string[abi:ne180100]<0>(v26, "{stat}");
    v27 = *(_OWORD *)v18;
    v28 = v19;
    v18[1] = 0;
    v19 = 0;
    v18[0] = 0;
    v11 = (a4 + 1);
    (*(void (**)(void **__return_ptr, xgboost::TextGenerator *, const xgboost::RegTree *, _QWORD, uint64_t))(*(_QWORD *)this + 64))(v16, this, a2, *(unsigned int *)(*((_QWORD *)a2 + 20) + 20 * (int)a3 + 4), v11);
    std::string::basic_string[abi:ne180100]<0>(v29, "{left}");
    v30 = *(_OWORD *)v16;
    v31 = v17;
    v16[1] = 0;
    v17 = 0;
    v16[0] = 0;
    (*(void (**)(void **__return_ptr, xgboost::TextGenerator *, const xgboost::RegTree *, _QWORD, uint64_t))(*(_QWORD *)this + 64))(__p, this, a2, *(unsigned int *)(*((_QWORD *)a2 + 20) + 20 * (int)a3 + 8), v11);
    std::string::basic_string[abi:ne180100]<0>(v32, "{right}");
    v33 = *(_OWORD *)__p;
    v34[0] = v15;
    __p[1] = 0;
    v15 = 0;
    __p[0] = 0;
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v22, v23, 4);
    xgboost::TreeGenerator::Match(a5, (uint64_t)qword_253F36E08, v22);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v22, (_QWORD *)v22[1]);
    for (i = 0; i != -24; i -= 6)
    {
      v13 = &v23[i];
      if (SHIBYTE(v34[i]) < 0)
        operator delete((void *)v13[21]);
      if (*((char *)v13 + 167) < 0)
        operator delete((void *)v13[18]);
    }
    if (SHIBYTE(v15) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v17) < 0)
      operator delete(v16[0]);
    if (SHIBYTE(v19) < 0)
      operator delete(v18[0]);
    if (SHIBYTE(v21) < 0)
      operator delete(v20[0]);
  }
}

void sub_220F2DD80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,uint64_t a35,char a36)
{
  __cxa_guard_abort(&qword_253F36CA0);
  _Unwind_Resume(a1);
}

void sub_220F2DE84()
{
  JUMPOUT(0x220F2DE7CLL);
}

void xgboost::TextGenerator::~TextGenerator(xgboost::TextGenerator *this)
{
  xgboost::TreeGenerator::~TreeGenerator(this);
  JUMPOUT(0x227667068);
}

void xgboost::TextGenerator::BuildTree(xgboost::TextGenerator *this, const xgboost::RegTree *a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  std::string *v6;
  std::string::size_type size;
  void *v8[2];
  uint64_t v9;
  _QWORD v10[3];
  std::string v11;
  void *v12[2];
  char v13;
  void *__p[2];
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v4 = atomic_load((unsigned __int8 *)&qword_253F36CB0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_253F36CB0))
  {
    std::string::basic_string[abi:ne180100]<0>(_ZGRZN7xgboost13TextGenerator9BuildTreeERKNS_7RegTreeEE13kTreeTemplate_, "{nodes}\n");
    __cxa_atexit(MEMORY[0x24BEDACF0], _ZGRZN7xgboost13TextGenerator9BuildTreeERKNS_7RegTreeEE13kTreeTemplate_, &dword_220DF6000);
    qword_253F36CA8 = (uint64_t)_ZGRZN7xgboost13TextGenerator9BuildTreeERKNS_7RegTreeEE13kTreeTemplate_;
    __cxa_guard_release(&qword_253F36CB0);
  }
  v5 = qword_253F36CA8;
  (*(void (**)(void **__return_ptr, xgboost::TextGenerator *, const xgboost::RegTree *, _QWORD, _QWORD))(*(_QWORD *)this + 64))(v8, this, a2, 0, 0);
  std::string::basic_string[abi:ne180100]<0>(v12, "{nodes}");
  *(_OWORD *)__p = *(_OWORD *)v8;
  v15 = v9;
  v8[1] = 0;
  v9 = 0;
  v8[0] = 0;
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v10, (const void **)v12, 1);
  xgboost::TreeGenerator::Match(&v11, v5, v10);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v10, (_QWORD *)v10[1]);
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
  if (v13 < 0)
    operator delete(v12[0]);
  if (SHIBYTE(v9) < 0)
    operator delete(v8[0]);
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &v11;
  else
    v6 = (std::string *)v11.__r_.__value_.__r.__words[0];
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v11.__r_.__value_.__r.__words[2]);
  else
    size = v11.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)this + 4, (uint64_t)v6, size);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_220F2E054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  __cxa_guard_abort(&qword_253F36CB0);
  _Unwind_Resume(a1);
}

_QWORD *xgboost::TreeGenerator::Indicator@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, (char *)&unk_220F8364E);
}

_QWORD *xgboost::TreeGenerator::Integer@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, (char *)&unk_220F8364E);
}

_QWORD *xgboost::TreeGenerator::Quantitive@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, (char *)&unk_220F8364E);
}

_QWORD *xgboost::TreeGenerator::NodeStat@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, (char *)&unk_220F8364E);
}

void xgboost::TreeGenerator::BuildTree(xgboost::TreeGenerator *this, const xgboost::RegTree *a2)
{
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  void *__p[2];
  unsigned __int8 v6;

  v2 = (_QWORD *)((char *)this + 32);
  (*(void (**)(void **__return_ptr))(*(_QWORD *)this + 64))(__p);
  if ((v6 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v6 & 0x80u) == 0)
    v4 = v6;
  else
    v4 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  if ((char)v6 < 0)
    operator delete(__p[0]);
}

void sub_220F2E17C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost::TreeGenerator::Match(std::string *this, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int64_t size;
  std::string *v9;
  int v10;
  char *v11;
  int64_t v12;
  std::string *Entry;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  std::string::size_type v22;
  int v23;
  const std::string::value_type *v24;
  std::string::size_type v25;
  _QWORD *v26;
  _QWORD *v27;
  BOOL v28;
  char *v29;
  int v30;
  std::string *v31;
  int64_t v32;
  char *v33;
  char *v34;
  char v35;
  uint64_t v36;
  std::string::size_type __pos;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    *this = *(std::string *)a2;
  v7 = (_QWORD *)*a3;
  v5 = a3 + 1;
  v6 = v7;
  if (v7 != v5)
  {
    do
    {
      __pos = 0;
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      if ((size & 0x80u) == 0)
        v9 = this;
      else
        v9 = (std::string *)this->__r_.__value_.__r.__words[0];
      v10 = *((char *)v6 + 55);
      if (v10 >= 0)
        v11 = (char *)(v6 + 4);
      else
        v11 = (char *)v6[4];
      if (v10 >= 0)
        v12 = *((unsigned __int8 *)v6 + 55);
      else
        v12 = v6[5];
      if (v12)
      {
        if ((size & 0x80u) != 0)
          size = this->__r_.__value_.__l.__size_;
        if (size >= v12)
        {
          v29 = (char *)v9 + size;
          v30 = *v11;
          v31 = v9;
          do
          {
            v32 = size - v12;
            if (v32 == -1)
              break;
            v33 = (char *)memchr(v31, v30, v32 + 1);
            if (!v33)
              break;
            v34 = v33;
            if (!memcmp(v33, v11, v12))
            {
              if (v34 == v29)
                break;
              __pos = v34 - (char *)v9;
              if (v34 - (char *)v9 != -1)
                goto LABEL_28;
              goto LABEL_19;
            }
            v31 = (std::string *)(v34 + 1);
            size = v29 - (v34 + 1);
          }
          while (size >= v12);
        }
        __pos = -1;
LABEL_19:
        dmlc::LogCheckFormat<unsigned long,unsigned long>(&v36);
        if (v36)
        {
          Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v35);
          dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
          v14 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v35);
          v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Check failed: ", 14);
          v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"pos != std::string::npos", 24);
          v17 = *(char *)(v36 + 23);
          v18 = v17 >= 0 ? v36 : *(_QWORD *)v36;
          v19 = v17 >= 0 ? *(unsigned __int8 *)(v36 + 23) : *(_QWORD *)(v36 + 8);
          v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v18, v19);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)": ", 2);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v35);
          v21 = v36;
          v36 = 0;
          if (v21)
            std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v36, v21);
        }
      }
LABEL_28:
      if (*((char *)v6 + 55) < 0)
        v22 = v6[5];
      else
        v22 = *((unsigned __int8 *)v6 + 55);
      v23 = *((char *)v6 + 79);
      if (v23 >= 0)
        v24 = (const std::string::value_type *)(v6 + 7);
      else
        v24 = (const std::string::value_type *)v6[7];
      if (v23 >= 0)
        v25 = *((unsigned __int8 *)v6 + 79);
      else
        v25 = v6[8];
      std::string::replace(this, __pos, v22, v24, v25);
      v26 = (_QWORD *)v6[1];
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD *)v6[2];
          v28 = *v27 == (_QWORD)v6;
          v6 = v27;
        }
        while (!v28);
      }
      v6 = v27;
    }
    while (v27 != v5);
  }
}

void sub_220F2E404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14)
{
  uint64_t v14;

  if (*(char *)(v14 + 23) < 0)
    operator delete(*(void **)v14);
  _Unwind_Resume(exception_object);
}

char *xgboost::FeatureMap::Name(xgboost::FeatureMap *this, unint64_t a2)
{
  std::string *Entry;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  char *result;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v16 = a2;
  v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3);
  if (v14 <= a2)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v15);
    if (v15)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/feature_map.h");
      v4 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
      v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: ", 14);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"idx < names_.size()", 19);
      v7 = *(char *)(v15 + 23);
      v8 = v7 >= 0 ? v15 : *(_QWORD *)v15;
      v9 = v7 >= 0 ? *(unsigned __int8 *)(v15 + 23) : *(_QWORD *)(v15 + 8);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"FeatureMap feature index exceed bound", 37);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v14);
      v12 = v15;
      v15 = 0;
      if (v12)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v15, v12);
    }
  }
  result = (char *)(*(_QWORD *)this + 24 * v16);
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

void sub_220F2E570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v12;

  v12 = a11;
  a11 = 0;
  if (v12)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a11, v12);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const*,0>(_QWORD *a1, char **a2)
{
  _QWORD *v4;

  v4 = std::string::basic_string[abi:ne180100]<0>(a1, "{fname}");
  std::string::basic_string[abi:ne180100]<0>(v4 + 3, *a2);
  return a1;
}

void sub_220F2E5E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::map<std::string,std::string>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 48 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>((uint64_t **)a1, v4, a2, (__int128 *)a2);
      a2 += 6;
      v6 -= 48;
    }
    while (v6);
  }
  return a1;
}

void sub_220F2E664(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void xgboost::TextGenerator::SplitNodeImpl(std::string *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, __int128 *a6, int a7)
{
  int v13;
  xgboost::FeatureMap *v14;
  char *v15;
  uint64_t v16;
  int v17;
  int *v18;
  int *v19;
  uint64_t v20;
  const void **v21;
  std::string __p;
  std::string v23;
  std::string v24;
  std::string v25;
  std::string v26;
  std::string v27;
  _QWORD v28[3];
  const void *v29[3];
  std::string v30;
  _QWORD v31[3];
  std::string v32;
  _QWORD v33[3];
  std::string v34;
  _QWORD v35[6];
  _QWORD v36[3];
  std::string v37;
  _QWORD v38[3];
  std::string v39;
  _QWORD v40[3];
  std::string v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v13 = *(_DWORD *)(*(_QWORD *)(a3 + 160) + 20 * a4 + 12);
  xgboost::TreeGenerator::Tabs(&v27, a7);
  std::string::basic_string[abi:ne180100]<0>(v29, "{tabs}");
  v30 = v27;
  memset(&v27, 0, sizeof(v27));
  std::to_string(&v26, a4);
  std::string::basic_string[abi:ne180100]<0>(v31, "{nid}");
  v32 = v26;
  memset(&v26, 0, sizeof(v26));
  v14 = *(xgboost::FeatureMap **)(a2 + 8);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v14 + 1) - *(_QWORD *)v14) >> 3) <= (v13 & 0x7FFFFFFFu))
  {
    std::to_string(&v25, v13 & 0x7FFFFFFF);
  }
  else
  {
    v15 = xgboost::FeatureMap::Name(v14, v13 & 0x7FFFFFFF);
    std::string::basic_string[abi:ne180100]<0>(&v25, v15);
  }
  std::string::basic_string[abi:ne180100]<0>(v33, "{fname}");
  v34 = v25;
  memset(&v25, 0, sizeof(v25));
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],std::string&,0>(v35, a6);
  std::to_string(&v24, *(_DWORD *)(*(_QWORD *)(a3 + 160) + 20 * a4 + 4));
  std::string::basic_string[abi:ne180100]<0>(v36, "{left}");
  v37 = v24;
  memset(&v24, 0, sizeof(v24));
  std::to_string(&v23, *(_DWORD *)(*(_QWORD *)(a3 + 160) + 20 * a4 + 8));
  std::string::basic_string[abi:ne180100]<0>(v38, "{right}");
  v39 = v23;
  memset(&v23, 0, sizeof(v23));
  v16 = *(_QWORD *)(a3 + 160) + 20 * a4;
  v17 = *(_DWORD *)(v16 + 12);
  v18 = (int *)(v16 + 4);
  v19 = (int *)(v16 + 8);
  if (v17 < 0)
    v19 = v18;
  std::to_string(&__p, *v19);
  std::string::basic_string[abi:ne180100]<0>(v40, "{missing}");
  v41 = __p;
  memset(&__p, 0, sizeof(__p));
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v28, v29, 7);
  xgboost::TreeGenerator::Match(a1, a5, v28);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v28, (_QWORD *)v28[1]);
  v20 = 42;
  do
  {
    v21 = &v29[v20];
    if (SHIBYTE(v29[v20 - 1]) < 0)
      operator delete((void *)*(v21 - 3));
    if (*((char *)v21 - 25) < 0)
      operator delete((void *)*(v21 - 6));
    v20 -= 6;
  }
  while (v20 * 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
}

void sub_220F2E9C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45,_QWORD *a46,uint64_t a47,char a48)
{
  uint64_t i;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a45, a46);
  for (i = 288; i != -48; i -= 48)
    std::pair<std::string,std::string>::~pair((uint64_t)(&a48 + i));
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  if (a38 < 0)
    operator delete(a33);
  if (a44 < 0)
    operator delete(a39);
  _Unwind_Resume(a1);
}

void xgboost::TreeGenerator::Tabs(std::string *this, int a2)
{
  int v2;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (a2)
  {
    v2 = a2;
    do
    {
      std::string::push_back(this, 9);
      --v2;
    }
    while (v2);
  }
}

void sub_220F2EB40(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],std::string&,0>(_QWORD *a1, __int128 *a2)
{
  std::string *v4;
  __int128 v5;

  v4 = (std::string *)(std::string::basic_string[abi:ne180100]<0>(a1, "{cond}") + 3);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    v4->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return a1;
}

void sub_220F2EBB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::TreeGenerator::ToStr<float>()
{
  uint64_t v0;
  _QWORD v2[2];
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v2);
  *(_QWORD *)((char *)&v3[2] + *(_QWORD *)(v3[0] - 24)) = 9;
  std::ostream::operator<<();
  std::stringbuf::str();
  v2[0] = *MEMORY[0x24BEDB7F0];
  v0 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v2 + *(_QWORD *)(v2[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v3[0] = v0;
  v3[1] = MEMORY[0x24BEDB848] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x227666FE4](&v5);
}

void sub_220F2ECA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t xgboost::FeatureMap::TypeOf(xgboost::FeatureMap *this, unint64_t a2)
{
  std::string *Entry;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v16 = a2;
  v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3);
  if (v14 <= a2)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v15);
    if (v15)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/feature_map.h");
      v4 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
      v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: ", 14);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"idx < names_.size()", 19);
      v7 = *(char *)(v15 + 23);
      if (v7 >= 0)
        v8 = v15;
      else
        v8 = *(_QWORD *)v15;
      if (v7 >= 0)
        v9 = *(unsigned __int8 *)(v15 + 23);
      else
        v9 = *(_QWORD *)(v15 + 8);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"FeatureMap feature index exceed bound", 37);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v14);
      v12 = v15;
      v15 = 0;
      if (v12)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v15, v12);
    }
  }
  return *(unsigned int *)(*((_QWORD *)this + 3) + 4 * v16);
}

void sub_220F2EDC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v12;

  v12 = a11;
  a11 = 0;
  if (v12)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a11, v12);
  _Unwind_Resume(exception_object);
}

void xgboost::TreeGenerator::SplitNode(xgboost::RegTree const&,int,unsigned int)::{lambda(void)#2}::operator()(uint64_t a1)
{
  uint64_t v2;
  std::string *Entry;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  char *v7;
  size_t v8;
  _QWORD *v9;
  char v10;

  if (**(_BYTE **)a1)
  {
    v2 = *(_QWORD *)(a1 + 8);
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
    v4 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: is_numerical", 26);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": ", 2);
    v7 = xgboost::FeatureMap::Name(*(xgboost::FeatureMap **)(v2 + 8), **(unsigned int **)(a1 + 16));
    v8 = strlen(v7);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" in feature map is categorical but tree node is numerical.", 58);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v10);
  }
}

void sub_220F2EEBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void xgboost::TreeGenerator::~TreeGenerator(xgboost::TreeGenerator *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (uint64_t *)MEMORY[0x24BEDB7F0];
  *(_QWORD *)this = &off_24E6BD650;
  v3 = *v2;
  *((_QWORD *)this + 2) = *v2;
  v4 = v2[9];
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24) + 16) = v2[8];
  *((_QWORD *)this + 5) = MEMORY[0x24BEDB848] + 16;
  *((_QWORD *)this + 4) = v4;
  if (*((char *)this + 127) < 0)
    operator delete(*((void **)this + 13));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x227666FE4]((char *)this + 144);
}

void std::__function::__func<xgboost::$_2,std::allocator<xgboost::$_2>,xgboost::TreeGenerator * ()(xgboost::FeatureMap const&,std::string,BOOL)>::~__func()
{
  JUMPOUT(0x227667068);
}

_QWORD *std::__function::__func<xgboost::$_2,std::allocator<xgboost::$_2>,xgboost::TreeGenerator * ()(xgboost::FeatureMap const&,std::string,BOOL)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6BD6D0;
  return result;
}

uint64_t std::__function::__func<xgboost::$_2,std::allocator<xgboost::$_2>,xgboost::TreeGenerator * ()(xgboost::FeatureMap const&,std::string,BOOL)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  char v5;
  uint64_t v6;

  v5 = *a4;
  v6 = operator new();
  *(_QWORD *)v6 = &off_24E6BD650;
  *(_QWORD *)(v6 + 8) = a2;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](v6 + 16);
  *(_BYTE *)(v6 + 296) = v5;
  *(_QWORD *)v6 = &off_24E6BD740;
  return v6;
}

void sub_220F2F014(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10F3C405A4AFA71);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<xgboost::$_2,std::allocator<xgboost::$_2>,xgboost::TreeGenerator * ()(xgboost::FeatureMap const&,std::string,BOOL)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<xgboost::$_2,std::allocator<xgboost::$_2>,xgboost::TreeGenerator * ()(xgboost::FeatureMap const&,std::string,BOOL)>::target_type()
{
}

void xgboost::JsonGenerator::Indicator(xgboost::FeatureMap **this@<X0>, const xgboost::RegTree *a2@<X1>, int __val@<W2>, unsigned int a4@<W3>, std::string *a5@<X8>)
{
  uint64_t v10;
  int v11;
  int *v12;
  int *v13;
  int v14;
  unsigned __int8 v15;
  int v16;
  uint64_t v17;
  int v18;
  int *v19;
  int *v20;
  uint64_t i;
  const void **v22;
  std::string v23;
  std::string v24;
  char *v25;
  std::string v26;
  std::string v27;
  _QWORD v28[3];
  const void *v29[3];
  std::string v30;
  _QWORD v31[3];
  std::string v32;
  _QWORD v33[6];
  _QWORD v34[3];
  std::string v35;
  _QWORD v36[3];
  __int128 v37;
  _QWORD v38[2];

  v38[1] = *MEMORY[0x24BDAC8D0];
  v10 = *((_QWORD *)a2 + 20) + 20 * __val;
  v11 = *(_DWORD *)(v10 + 12);
  v12 = (int *)(v10 + 8);
  v13 = (int *)(v10 + 4);
  if (v11 < 0)
    v13 = v12;
  v14 = *v13;
  v15 = atomic_load((unsigned __int8 *)&qword_253F36CB8);
  if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_253F36CB8))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_253F36E20, " \"nodeid\": {nid}, \"depth\": {depth}, \"split\": \"{fname}\", \"yes\": {yes}, \"no\": {no}");
    __cxa_atexit(MEMORY[0x24BEDACF0], qword_253F36E20, &dword_220DF6000);
    __cxa_guard_release(&qword_253F36CB8);
  }
  v16 = *(_DWORD *)(*((_QWORD *)a2 + 20) + 20 * __val + 12);
  std::to_string(&v27, __val);
  std::string::basic_string[abi:ne180100]<0>(v29, "{nid}");
  v30 = v27;
  memset(&v27, 0, sizeof(v27));
  std::to_string(&v26, a4);
  std::string::basic_string[abi:ne180100]<0>(v31, "{depth}");
  v32 = v26;
  memset(&v26, 0, sizeof(v26));
  v25 = xgboost::FeatureMap::Name(this[1], v16 & 0x7FFFFFFF);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const*,0>(v33, &v25);
  std::to_string(&v24, v14);
  std::string::basic_string[abi:ne180100]<0>(v34, "{yes}");
  v35 = v24;
  memset(&v24, 0, sizeof(v24));
  v17 = *((_QWORD *)a2 + 20) + 20 * __val;
  v18 = *(_DWORD *)(v17 + 12);
  v19 = (int *)(v17 + 4);
  v20 = (int *)(v17 + 8);
  if (v18 < 0)
    v20 = v19;
  std::to_string(&v23, *v20);
  std::string::basic_string[abi:ne180100]<0>(v36, "{no}");
  v37 = *(_OWORD *)&v23.__r_.__value_.__l.__data_;
  v38[0] = *((_QWORD *)&v23.__r_.__value_.__l + 2);
  memset(&v23, 0, sizeof(v23));
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v28, v29, 5);
  xgboost::TreeGenerator::Match(a5, (uint64_t)qword_253F36E20, v28);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v28, (_QWORD *)v28[1]);
  for (i = 0; i != -30; i -= 6)
  {
    v22 = &v29[i];
    if (SHIBYTE(v38[i]) < 0)
      operator delete((void *)v22[27]);
    if (*((char *)v22 + 215) < 0)
      operator delete((void *)v22[24]);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
}

void sub_220F2F36C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,uint64_t a37,char a38)
{
  __cxa_guard_abort(&qword_253F36CB8);
  _Unwind_Resume(a1);
}

void xgboost::JsonGenerator::Categorical(xgboost::JsonGenerator *this@<X0>, const xgboost::RegTree *a2@<X1>, xgboost::RegTree *a3@<X2>, unsigned int a4@<W3>, std::string *a5@<X8>)
{
  int v6;
  unsigned __int8 v10;
  _DWORD *v11;
  unint64_t v12;
  std::string *v13;
  std::string::size_type size;
  unint64_t v15;
  std::string __p;
  std::string v17;
  std::string v18;
  void *v19;
  _BYTE *v20;

  v6 = (int)a3;
  xgboost::GetSplitCategories(a2, a3, (char **)&v19);
  v10 = atomic_load((unsigned __int8 *)&qword_253F36CC0);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_253F36CC0))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_253F36E38, " \"nodeid\": {nid}, \"depth\": {depth}, \"split\": \"{fname}\", \"split_condition\": {cond}, \"yes\": {right}, \"no\": {left}, \"missing\": {missing}");
    __cxa_atexit(MEMORY[0x24BEDACF0], qword_253F36E38, &dword_220DF6000);
    __cxa_guard_release(&qword_253F36CC0);
  }
  std::string::basic_string[abi:ne180100]<0>(&v18, "[");
  v11 = v19;
  if (v20 != v19)
  {
    v12 = 0;
    do
    {
      std::to_string(&v17, v11[v12]);
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = &v17;
      else
        v13 = (std::string *)v17.__r_.__value_.__r.__words[0];
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
      else
        size = v17.__r_.__value_.__l.__size_;
      std::string::append(&v18, (const std::string::value_type *)v13, size);
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v17.__r_.__value_.__l.__data_);
      v11 = v19;
      v15 = (v20 - (_BYTE *)v19) >> 2;
      if (v12 != v15 - 1)
      {
        std::string::append(&v18, ", ");
        v11 = v19;
        v15 = (v20 - (_BYTE *)v19) >> 2;
      }
      ++v12;
    }
    while (v12 < v15);
  }
  std::string::append(&v18, "]");
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
  else
    __p = v18;
  xgboost::JsonGenerator::SplitNodeImpl(a5, (uint64_t)this, (uint64_t)a2, v6, (uint64_t)qword_253F36E38, (__int128 *)&__p, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (v19)
  {
    v20 = v19;
    operator delete(v19);
  }
}

void sub_220F2F664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28)
{
  __cxa_guard_abort(&qword_253F36CC0);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void xgboost::JsonGenerator::Integer(xgboost::JsonGenerator *this@<X0>, const xgboost::RegTree *a2@<X1>, int a3@<W2>, unsigned int a4@<W3>, std::string *a5@<X8>)
{
  float v10;
  unsigned int v11;
  int v12;
  unsigned __int8 v13;
  std::string v14;

  v10 = *(float *)(*((_QWORD *)a2 + 20) + 20 * a3 + 16);
  v11 = vcvtms_s32_f32(v10);
  if (floorf(v10) == v10)
    v12 = v11;
  else
    v12 = v11 + 1;
  v13 = atomic_load((unsigned __int8 *)&qword_253F36CC8);
  if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_253F36CC8))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_253F36E50, " \"nodeid\": {nid}, \"depth\": {depth}, \"split\": \"{fname}\", \"split_condition\": {cond}, \"yes\": {left}, \"no\": {right}, \"missing\": {missing}");
    __cxa_atexit(MEMORY[0x24BEDACF0], qword_253F36E50, &dword_220DF6000);
    __cxa_guard_release(&qword_253F36CC8);
  }
  std::to_string(&v14, v12);
  xgboost::JsonGenerator::SplitNodeImpl(a5, (uint64_t)this, (uint64_t)a2, a3, (uint64_t)qword_253F36E50, (__int128 *)&v14, a4);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
}

void sub_220F2F7E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_guard_abort(&qword_253F36CC8);
  _Unwind_Resume(a1);
}

void xgboost::JsonGenerator::Quantitive(xgboost::JsonGenerator *this@<X0>, const xgboost::RegTree *a2@<X1>, int a3@<W2>, unsigned int a4@<W3>, std::string *a5@<X8>)
{
  unsigned __int8 v10;
  __int128 __p;
  char v12;

  v10 = atomic_load((unsigned __int8 *)&qword_253F36CD0);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_253F36CD0))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_253F36E68, " \"nodeid\": {nid}, \"depth\": {depth}, \"split\": \"{fname}\", \"split_condition\": {cond}, \"yes\": {left}, \"no\": {right}, \"missing\": {missing}");
    __cxa_atexit(MEMORY[0x24BEDACF0], qword_253F36E68, &dword_220DF6000);
    __cxa_guard_release(&qword_253F36CD0);
  }
  xgboost::TreeGenerator::ToStr<float>();
  xgboost::JsonGenerator::SplitNodeImpl(a5, (uint64_t)this, (uint64_t)a2, a3, (uint64_t)qword_253F36E68, &__p, a4);
  if (v12 < 0)
    operator delete((void *)__p);
}

void sub_220F2F904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_guard_abort(&qword_253F36CD0);
  _Unwind_Resume(a1);
}

void xgboost::JsonGenerator::NodeStat(std::string *a1@<X8>)
{
  unsigned __int8 v4;
  uint64_t i;
  const void **v6;
  void *__p[2];
  uint64_t v8;
  void *v9[2];
  uint64_t v10;
  _QWORD v11[3];
  const void *v12[3];
  __int128 v13;
  uint64_t v14;
  _QWORD v15[3];
  __int128 v16;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x24BDAC8D0];
  v4 = atomic_load((unsigned __int8 *)&qword_253F36CD8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_253F36CD8))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_253F36E80, ", \"gain\": {loss_chg}, \"cover\": {sum_hess}");
    __cxa_atexit(MEMORY[0x24BEDACF0], qword_253F36E80, &dword_220DF6000);
    __cxa_guard_release(&qword_253F36CD8);
  }
  xgboost::TreeGenerator::ToStr<float>();
  std::string::basic_string[abi:ne180100]<0>(v12, "{loss_chg}");
  v13 = *(_OWORD *)v9;
  v14 = v10;
  xgboost::TreeGenerator::ToStr<float>();
  std::string::basic_string[abi:ne180100]<0>(v15, "{sum_hess}");
  v16 = *(_OWORD *)__p;
  v17[0] = v8;
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v11, v12, 2);
  xgboost::TreeGenerator::Match(a1, (uint64_t)qword_253F36E80, v11);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v11, (_QWORD *)v11[1]);
  for (i = 0; i != -12; i -= 6)
  {
    v6 = &v12[i];
    if (SHIBYTE(v17[i]) < 0)
      operator delete((void *)v6[9]);
    if (*((char *)v6 + 71) < 0)
      operator delete((void *)v6[6]);
  }
}

void sub_220F2FAFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24)
{
  __cxa_guard_abort(&qword_253F36CD8);
  _Unwind_Resume(a1);
}

void xgboost::JsonGenerator::PlainNode(xgboost::JsonGenerator *this@<X0>, const xgboost::RegTree *a2@<X1>, int a3@<W2>, unsigned int a4@<W3>, std::string *a5@<X8>)
{
  unsigned __int8 v10;
  __int128 __p;
  char v12;

  v10 = atomic_load((unsigned __int8 *)&qword_253F36CE0);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_253F36CE0))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_253F36E98, " \"nodeid\": {nid}, \"depth\": {depth}, \"split\": \"{fname}\", \"split_condition\": {cond}, \"yes\": {left}, \"no\": {right}, \"missing\": {missing}");
    __cxa_atexit(MEMORY[0x24BEDACF0], qword_253F36E98, &dword_220DF6000);
    __cxa_guard_release(&qword_253F36CE0);
  }
  xgboost::TreeGenerator::ToStr<float>();
  xgboost::JsonGenerator::SplitNodeImpl(a5, (uint64_t)this, (uint64_t)a2, a3, (uint64_t)qword_253F36E98, &__p, a4);
  if (v12 < 0)
    operator delete((void *)__p);
}

void sub_220F2FCC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_guard_abort(&qword_253F36CE0);
  _Unwind_Resume(a1);
}

void xgboost::JsonGenerator::SplitNode(xgboost::JsonGenerator *this@<X0>, const xgboost::RegTree *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, std::string *a5@<X8>)
{
  int v5;
  unsigned __int8 v10;
  int v11;
  uint64_t i;
  const void **v13;
  std::string __p;
  void *v15[2];
  uint64_t v16;
  void *v17[2];
  uint64_t v18;
  void *v19[2];
  uint64_t v20;
  _QWORD v21[3];
  std::string v22;
  const void *v23[3];
  std::string v24;
  _QWORD v25[3];
  __int128 v26;
  uint64_t v27;
  _QWORD v28[3];
  __int128 v29;
  uint64_t v30;
  _QWORD v31[3];
  __int128 v32;
  uint64_t v33;
  _QWORD v34[3];
  __int128 v35;
  _QWORD v36[2];

  v5 = a4;
  v36[1] = *MEMORY[0x24BDAC8D0];
  xgboost::TreeGenerator::SplitNode(this, a2, a3, a4, &v22);
  v10 = atomic_load((unsigned __int8 *)&qword_253F36CE8);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_253F36CE8))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_253F36EB0, "{{properties} {stat}, \"children\": [{left}, {right}\n{indent}]}");
    __cxa_atexit(MEMORY[0x24BEDACF0], qword_253F36EB0, &dword_220DF6000);
    __cxa_guard_release(&qword_253F36CE8);
  }
  std::string::basic_string[abi:ne180100]<0>(v23, "{properties}");
  v11 = SHIBYTE(v22.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v24, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
  else
    v24 = v22;
  if (*((_BYTE *)this + 296))
    (*(void (**)(void **__return_ptr, xgboost::JsonGenerator *, const xgboost::RegTree *, uint64_t))(*(_QWORD *)this + 32))(v19, this, a2, a3);
  else
    std::string::basic_string[abi:ne180100]<0>(v19, (char *)&unk_220F8364E);
  std::string::basic_string[abi:ne180100]<0>(v25, "{stat}");
  v26 = *(_OWORD *)v19;
  v27 = v20;
  v19[1] = 0;
  v20 = 0;
  v19[0] = 0;
  (*(void (**)(void **__return_ptr, xgboost::JsonGenerator *, const xgboost::RegTree *, _QWORD, _QWORD))(*(_QWORD *)this + 64))(v17, this, a2, *(unsigned int *)(*((_QWORD *)a2 + 20) + 20 * (int)a3 + 4), (v5 + 1));
  std::string::basic_string[abi:ne180100]<0>(v28, "{left}");
  v29 = *(_OWORD *)v17;
  v30 = v18;
  v17[1] = 0;
  v18 = 0;
  v17[0] = 0;
  (*(void (**)(void **__return_ptr, xgboost::JsonGenerator *, const xgboost::RegTree *, _QWORD, _QWORD))(*(_QWORD *)this + 64))(v15, this, a2, *(unsigned int *)(*((_QWORD *)a2 + 20) + 20 * (int)a3 + 8), (v5 + 1));
  std::string::basic_string[abi:ne180100]<0>(v31, "{right}");
  v32 = *(_OWORD *)v15;
  v33 = v16;
  v15[1] = 0;
  v16 = 0;
  v15[0] = 0;
  xgboost::JsonGenerator::Indent(&__p, v5);
  std::string::basic_string[abi:ne180100]<0>(v34, "{indent}");
  v35 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  v36[0] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  memset(&__p, 0, sizeof(__p));
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v21, v23, 5);
  xgboost::TreeGenerator::Match(a5, (uint64_t)qword_253F36EB0, v21);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v21, (_QWORD *)v21[1]);
  for (i = 0; i != -30; i -= 6)
  {
    v13 = &v23[i];
    if (SHIBYTE(v36[i]) < 0)
      operator delete((void *)v13[27]);
    if (*((char *)v13 + 215) < 0)
      operator delete((void *)v13[24]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
  if (SHIBYTE(v18) < 0)
    operator delete(v17[0]);
  if ((SHIBYTE(v20) & 0x80000000) == 0)
  {
    if ((v11 & 0x80000000) == 0)
      return;
LABEL_24:
    operator delete(v22.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v19[0]);
  if (v11 < 0)
    goto LABEL_24;
}

void sub_220F30034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  __cxa_guard_abort(&qword_253F36CE8);
  if (a42 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_220F30158()
{
  JUMPOUT(0x220F30114);
}

void sub_220F30164()
{
  JUMPOUT(0x220F30140);
}

void sub_220F3016C()
{
  JUMPOUT(0x220F30150);
}

void xgboost::JsonGenerator::LeafNode(xgboost::JsonGenerator *this@<X0>, int __val@<W2>, std::string *a3@<X8>)
{
  unsigned __int8 v7;
  unsigned __int8 v8;
  int v9;
  uint64_t i;
  const void **v11;
  void *v12[2];
  uint64_t v13;
  _QWORD v14[3];
  std::string __p;
  void *v16[2];
  uint64_t v17;
  std::string v18;
  void *v19[3];
  void *v20[2];
  char v21;
  __int128 v22;
  uint64_t v23;
  const void *v24[3];
  std::string v25;
  _QWORD v26[3];
  __int128 v27;
  uint64_t v28;
  _QWORD v29[3];
  __int128 v30;
  _QWORD v31[2];

  v31[1] = *MEMORY[0x24BDAC8D0];
  v7 = atomic_load((unsigned __int8 *)&qword_253F36CF0);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_253F36CF0))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_253F36EC8, "{ \"nodeid\": {nid}, \"leaf\": {leaf} {stat}}");
    __cxa_atexit(MEMORY[0x24BEDACF0], qword_253F36EC8, &dword_220DF6000);
    __cxa_guard_release(&qword_253F36CF0);
  }
  v8 = atomic_load((unsigned __int8 *)&qword_253F36CF8);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_253F36CF8))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_253F36EE0, ", \"cover\": {sum_hess} ");
    __cxa_atexit(MEMORY[0x24BEDACF0], qword_253F36EE0, &dword_220DF6000);
    __cxa_guard_release(&qword_253F36CF8);
  }
  std::to_string(&v18, __val);
  std::string::basic_string[abi:ne180100]<0>(v24, "{nid}");
  v25 = v18;
  memset(&v18, 0, sizeof(v18));
  xgboost::TreeGenerator::ToStr<float>();
  std::string::basic_string[abi:ne180100]<0>(v26, "{leaf}");
  v27 = *(_OWORD *)v16;
  v28 = v17;
  v16[1] = 0;
  v17 = 0;
  v16[0] = 0;
  v9 = *((unsigned __int8 *)this + 296);
  if (v9)
  {
    xgboost::TreeGenerator::ToStr<float>();
    std::string::basic_string[abi:ne180100]<0>(v20, "{sum_hess}");
    v22 = *(_OWORD *)v12;
    v23 = v13;
    HIBYTE(v13) = 0;
    v12[0] = 0;
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v14, (const void **)v20, 1);
    xgboost::TreeGenerator::Match(&__p, (uint64_t)qword_253F36EE0, v14);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&unk_220F8364E);
  }
  std::string::basic_string[abi:ne180100]<0>(v29, "{stat}");
  v30 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  v31[0] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  memset(&__p, 0, sizeof(__p));
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v19, v24, 3);
  xgboost::TreeGenerator::Match(a3, (uint64_t)qword_253F36EC8, v19);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v19, (_QWORD *)v19[1]);
  for (i = 0; i != -18; i -= 6)
  {
    v11 = &v24[i];
    if (SHIBYTE(v31[i]) < 0)
      operator delete((void *)v11[15]);
    if (*((char *)v11 + 119) < 0)
      operator delete((void *)v11[12]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v9)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v14, (_QWORD *)v14[1]);
    if (SHIBYTE(v23) < 0)
      operator delete((void *)v22);
    if (v21 < 0)
      operator delete(v20[0]);
    if (SHIBYTE(v13) < 0)
      operator delete(v12[0]);
  }
  if (SHIBYTE(v17) < 0)
    operator delete(v16[0]);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
}

void sub_220F304A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  __cxa_guard_abort(&qword_253F36CF8);
  _Unwind_Resume(a1);
}

void sub_220F305E8()
{
  JUMPOUT(0x220F305E0);
}

void xgboost::JsonGenerator::BuildTree(xgboost::JsonGenerator *this@<X0>, const xgboost::RegTree *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, std::string *a5@<X8>)
{
  unsigned __int8 v10;
  char *v11;
  uint64_t v12;
  uint64_t i;
  const void **v14;
  void *__p[2];
  uint64_t v16;
  std::string v17;
  _QWORD v18[3];
  const void *v19[3];
  _QWORD v20[3];
  _QWORD v21[3];
  std::string v22;
  _QWORD v23[3];
  __int128 v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x24BDAC8D0];
  v10 = atomic_load((unsigned __int8 *)&qword_253F36D00);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_253F36D00))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_253F36EF8, "{newline}{indent}{nodes}");
    __cxa_atexit(MEMORY[0x24BEDACF0], qword_253F36EF8, &dword_220DF6000);
    __cxa_guard_release(&qword_253F36D00);
  }
  std::string::basic_string[abi:ne180100]<0>(v19, "{newline}");
  if ((_DWORD)a4)
    v11 = "\n";
  else
    v11 = (char *)&unk_220F8364E;
  std::string::basic_string[abi:ne180100]<0>(v20, v11);
  xgboost::JsonGenerator::Indent(&v17, a4);
  std::string::basic_string[abi:ne180100]<0>(v21, "{indent}");
  v22 = v17;
  memset(&v17, 0, sizeof(v17));
  v12 = 48;
  if (*(_DWORD *)(*((_QWORD *)a2 + 20) + 20 * (int)a3 + 4) == -1)
    v12 = 56;
  (*(void (**)(void **__return_ptr, xgboost::JsonGenerator *, const xgboost::RegTree *, uint64_t, uint64_t))(*(_QWORD *)this + v12))(__p, this, a2, a3, a4);
  std::string::basic_string[abi:ne180100]<0>(v23, "{nodes}");
  v24 = *(_OWORD *)__p;
  v25[0] = v16;
  __p[1] = 0;
  v16 = 0;
  __p[0] = 0;
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v18, v19, 3);
  xgboost::TreeGenerator::Match(a5, (uint64_t)qword_253F36EF8, v18);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v18, (_QWORD *)v18[1]);
  for (i = 0; i != -18; i -= 6)
  {
    v14 = &v19[i];
    if (SHIBYTE(v25[i]) < 0)
      operator delete((void *)v14[15]);
    if (*((char *)v14 + 119) < 0)
      operator delete((void *)v14[12]);
  }
  if (SHIBYTE(v16) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
}

void sub_220F30830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24)
{
  __cxa_guard_abort(&qword_253F36D00);
  _Unwind_Resume(a1);
}

void sub_220F308F8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  JUMPOUT(0x220F308F0);
}

void sub_220F30910()
{
  JUMPOUT(0x220F308F0);
}

void xgboost::JsonGenerator::~JsonGenerator(xgboost::JsonGenerator *this)
{
  xgboost::TreeGenerator::~TreeGenerator(this);
  JUMPOUT(0x227667068);
}

void xgboost::JsonGenerator::SplitNodeImpl(std::string *a1, uint64_t a2, uint64_t a3, int __val, uint64_t a5, __int128 *a6, unsigned int a7)
{
  int v14;
  xgboost::FeatureMap *v15;
  char *v16;
  uint64_t v17;
  int v18;
  int *v19;
  int *v20;
  uint64_t v21;
  const void **v22;
  std::string v23;
  std::string v24;
  std::string v25;
  std::string v26;
  std::string v27;
  std::string v28;
  _QWORD v29[3];
  const void *v30[3];
  std::string v31;
  _QWORD v32[3];
  std::string v33;
  _QWORD v34[3];
  std::string v35;
  _QWORD v36[6];
  _QWORD v37[3];
  std::string v38;
  _QWORD v39[3];
  std::string v40;
  _QWORD v41[3];
  std::string v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v14 = *(_DWORD *)(*(_QWORD *)(a3 + 160) + 20 * __val + 12);
  std::to_string(&v28, __val);
  std::string::basic_string[abi:ne180100]<0>(v30, "{nid}");
  v31 = v28;
  memset(&v28, 0, sizeof(v28));
  std::to_string(&v27, a7);
  std::string::basic_string[abi:ne180100]<0>(v32, "{depth}");
  v33 = v27;
  memset(&v27, 0, sizeof(v27));
  v15 = *(xgboost::FeatureMap **)(a2 + 8);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v15 + 1) - *(_QWORD *)v15) >> 3) <= (v14 & 0x7FFFFFFFu))
  {
    std::to_string(&v26, v14 & 0x7FFFFFFF);
  }
  else
  {
    v16 = xgboost::FeatureMap::Name(v15, v14 & 0x7FFFFFFF);
    std::string::basic_string[abi:ne180100]<0>(&v26, v16);
  }
  std::string::basic_string[abi:ne180100]<0>(v34, "{fname}");
  v35 = v26;
  memset(&v26, 0, sizeof(v26));
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],std::string&,0>(v36, a6);
  std::to_string(&v25, *(_DWORD *)(*(_QWORD *)(a3 + 160) + 20 * __val + 4));
  std::string::basic_string[abi:ne180100]<0>(v37, "{left}");
  v38 = v25;
  memset(&v25, 0, sizeof(v25));
  std::to_string(&v24, *(_DWORD *)(*(_QWORD *)(a3 + 160) + 20 * __val + 8));
  std::string::basic_string[abi:ne180100]<0>(v39, "{right}");
  v40 = v24;
  memset(&v24, 0, sizeof(v24));
  v17 = *(_QWORD *)(a3 + 160) + 20 * __val;
  v18 = *(_DWORD *)(v17 + 12);
  v19 = (int *)(v17 + 4);
  v20 = (int *)(v17 + 8);
  if (v18 < 0)
    v20 = v19;
  std::to_string(&v23, *v20);
  std::string::basic_string[abi:ne180100]<0>(v41, "{missing}");
  v42 = v23;
  memset(&v23, 0, sizeof(v23));
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v29, v30, 7);
  xgboost::TreeGenerator::Match(a1, a5, v29);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v29, (_QWORD *)v29[1]);
  v21 = 42;
  do
  {
    v22 = &v30[v21];
    if (SHIBYTE(v30[v21 - 1]) < 0)
      operator delete((void *)*(v22 - 3));
    if (*((char *)v22 - 25) < 0)
      operator delete((void *)*(v22 - 6));
    v21 -= 6;
  }
  while (v21 * 8);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
}

void sub_220F30C90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46,_QWORD *a47,uint64_t a48,char a49)
{
  uint64_t i;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a46, a47);
  for (i = 288; i != -48; i -= 48)
    std::pair<std::string,std::string>::~pair((uint64_t)(&a49 + i));
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  if (a39 < 0)
    operator delete(a34);
  if (a45 < 0)
    operator delete(a40);
  _Unwind_Resume(a1);
}

std::string *xgboost::JsonGenerator::Indent(std::string *this, int a2)
{
  std::string *v2;
  int v3;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (a2 != -1)
  {
    v2 = this;
    v3 = a2 + 1;
    do
    {
      this = std::string::append(v2, "  ");
      --v3;
    }
    while (v3);
  }
  return this;
}

void sub_220F30E1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void xgboost::GraphvizParam::~GraphvizParam(void **this)
{
  if (*((char *)this + 151) < 0)
    operator delete(this[16]);
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

void std::__function::__func<xgboost::$_3,std::allocator<xgboost::$_3>,xgboost::TreeGenerator * ()(xgboost::FeatureMap const&,std::string,BOOL)>::~__func()
{
  JUMPOUT(0x227667068);
}

_QWORD *std::__function::__func<xgboost::$_3,std::allocator<xgboost::$_3>,xgboost::TreeGenerator * ()(xgboost::FeatureMap const&,std::string,BOOL)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6BD7D8;
  return result;
}

uint64_t std::__function::__func<xgboost::$_3,std::allocator<xgboost::$_3>,xgboost::TreeGenerator * ()(xgboost::FeatureMap const&,std::string,BOOL)>::operator()(uint64_t a1, uint64_t a2, std::string *a3, char *a4)
{
  char v5;
  uint64_t v6;
  xgboost::GraphvizParam *v7;
  std::string::size_type size;
  uint64_t *v9;
  uint64_t **v10;
  _QWORD *v11;
  uint64_t **v12;
  std::string *v13;
  void **v14;
  uint64_t *v15;
  uint64_t **v16;
  _OWORD *v17;
  _QWORD *v18;
  std::string *v19;
  __int128 v20;
  int v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  void **v28;
  std::string::size_type v29;
  _QWORD *v30;
  _QWORD *v31;
  BOOL v32;
  uint64_t **v33;
  _OWORD *v34;
  _QWORD *v35;
  std::string *v36;
  __int128 v37;
  int v38;
  const std::string::value_type *v39;
  std::string::size_type v40;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  __int128 v44;
  void **v45;
  std::string::size_type v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t **v49;
  _OWORD *v50;
  uint64_t v51;
  _OWORD *v52;
  uint64_t **v53;
  _OWORD *v54;
  _OWORD *v55;
  uint64_t v56;
  _OWORD *v57;
  uint64_t **v58;
  _OWORD *v59;
  _OWORD *v60;
  unsigned __int8 v61;
  _QWORD *v62;
  __int128 v63;
  std::string *v64;
  std::string::size_type v65;
  uint64_t i;
  void **v67;
  _QWORD *v68;
  _QWORD *v69;
  __n128 v70;
  uint64_t *v71;
  std::string *v72;
  std::string::size_type v73;
  _QWORD *v74;
  uint64_t *v75;
  uint64_t **v76;
  std::string *v77;
  std::string::size_type v78;
  uint64_t v79;
  std::string v81;
  std::string v82;
  void *v83[2];
  uint64_t v84;
  uint64_t **v85;
  uint64_t *v86;
  uint64_t v87;
  std::vector<std::pair<std::string, std::string>> v88;
  __int128 *v89;
  __int128 v90;
  std::string v91;
  std::string __str;
  void *__p;
  uint64_t **v94;
  uint64_t v95;
  void **p_p;
  void *v97[2];
  uint64_t v98;
  std::string v99;
  void *v100[5];
  void *v101;
  char v102;
  char v103;
  uint64_t v104;
  _QWORD v105[22];

  v105[20] = *MEMORY[0x24BDAC8D0];
  v81 = *a3;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  a3->__r_.__value_.__r.__words[0] = 0;
  v5 = *a4;
  v6 = operator new();
  *(_QWORD *)v6 = &off_24E6BD650;
  *(_QWORD *)(v6 + 8) = a2;
  v7 = (xgboost::GraphvizParam *)std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](v6 + 16);
  *(_BYTE *)(v6 + 296) = v5;
  *(_QWORD *)v6 = &off_24E6BD848;
  *(_BYTE *)(v6 + 304) = 0;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  *(_OWORD *)(v6 + 360) = 0u;
  *(_OWORD *)(v6 + 376) = 0u;
  *(_OWORD *)(v6 + 392) = 0u;
  *(_OWORD *)(v6 + 408) = 0u;
  *(_OWORD *)(v6 + 424) = 0u;
  *(_OWORD *)(v6 + 440) = 0u;
  v97[1] = 0;
  v98 = 0;
  v97[0] = &v97[1];
  memset(&v88, 0, sizeof(v88));
  xgboost::GraphvizParam::__MANAGER__(v7);
  dmlc::parameter::ParamManager::RunInit<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&stru_253F36FD0, v6 + 304, &v97[1], &v97[1], &v88, 0);
  *(_BYTE *)(v6 + 304) = 1;
  v82.__r_.__value_.__r.__words[0] = (std::string::size_type)&v88;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v82);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v97, (_QWORD *)v97[1]);
  v86 = 0;
  v87 = 0;
  v85 = &v86;
  size = HIBYTE(v81.__r_.__value_.__r.__words[2]);
  if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v81.__r_.__value_.__l.__size_;
  if (size)
  {
    std::istringstream::basic_istringstream[abi:ne180100](v97, &v81, 8);
    v82.__r_.__value_.__r.__words[0] = (std::string::size_type)v97;
    *(_OWORD *)&v82.__r_.__value_.__r.__words[1] = 0u;
    *(_OWORD *)v83 = 0u;
    v84 = 0;
    std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy(v86);
    v86 = 0;
    v87 = 0;
    v85 = &v86;
    dmlc::JSONReader::BeginObject((dmlc::JSONReader *)&v82);
    memset(&v91, 0, sizeof(v91));
    while (dmlc::JSONReader::NextObjectItem(&v82, (uint64_t)&v91))
    {
      v90 = 0uLL;
      v89 = &v90;
      dmlc::JSONReader::BeginObject((dmlc::JSONReader *)&v82);
      __p = 0;
      v94 = 0;
      v95 = 0;
      while (dmlc::JSONReader::NextObjectItem(&v82, (uint64_t)&__p))
      {
        memset(&__str, 0, sizeof(__str));
        dmlc::JSONReader::ReadString(&v82, (uint64_t)&__str);
        p_p = &__p;
        v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v89, (const void **)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
        std::string::operator=((std::string *)(v9 + 7), &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v95) < 0)
        operator delete(__p);
      v10 = (uint64_t **)std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__find_equal<std::string>((uint64_t)&v85, &p_p, (const void **)&v91.__r_.__value_.__l.__data_);
      v11 = *v10;
      if (!*v10)
      {
        v12 = v10;
        v11 = operator new(0x50uLL);
        __p = v11;
        v94 = &v86;
        LOBYTE(v95) = 0;
        v13 = (std::string *)(v11 + 4);
        if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v13, v91.__r_.__value_.__l.__data_, v91.__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)&v91.__r_.__value_.__l.__data_;
          v11[6] = *((_QWORD *)&v91.__r_.__value_.__l + 2);
        }
        v11[9] = 0;
        v11[8] = 0;
        v11[7] = v11 + 8;
        LOBYTE(v95) = 1;
        v14 = p_p;
        *v11 = 0;
        v11[1] = 0;
        v11[2] = v14;
        *v12 = v11;
        v15 = v11;
        if (*v85)
        {
          v85 = (uint64_t **)*v85;
          v15 = *v12;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v86, v15);
        ++v87;
        __p = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)&__p);
      }
      if (v11 + 7 != &v89)
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)v11 + 7, v89, &v90);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v89, (_QWORD *)v90);
    }
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v91.__r_.__value_.__l.__data_);
    if (v83[0])
    {
      v83[1] = v83[0];
      operator delete(v83[0]);
    }
    v97[0] = *(void **)MEMORY[0x24BEDB7F8];
    *(void **)((char *)v97 + *((_QWORD *)v97[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F8] + 24);
    v98 = MEMORY[0x24BEDB848] + 16;
    if (v102 < 0)
      operator delete(v100[4]);
    std::streambuf::~streambuf();
    std::istream::~istream();
    MEMORY[0x227666FE4](&v104);
  }
  std::string::basic_string[abi:ne180100]<0>(v97, "condition_node_params");
  v16 = (uint64_t **)std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)&v85, (const void **)v97);
  if (SHIBYTE(v98) < 0)
    operator delete(v97[0]);
  if (&v86 != v16)
  {
    std::string::basic_string[abi:ne180100]<0>(v97, "condition_node_params");
    v82.__r_.__value_.__r.__words[0] = (std::string::size_type)v97;
    v17 = std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v85, (const void **)v97, &v82);
    if (SHIBYTE(v98) < 0)
      operator delete(v97[0]);
    v18 = (_QWORD *)*((_QWORD *)v17 + 7);
    if (v18 != (_QWORD *)(v17 + 4))
    {
      do
      {
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v91, (const void **)v18 + 4);
        v19 = std::string::append(&v91, "\"");
        v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        v21 = *((char *)v18 + 79);
        if (v21 >= 0)
          v22 = (const std::string::value_type *)(v18 + 7);
        else
          v22 = (const std::string::value_type *)v18[7];
        if (v21 >= 0)
          v23 = *((unsigned __int8 *)v18 + 79);
        else
          v23 = v18[8];
        v24 = std::string::append(&__str, v22, v23);
        v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v82.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        v26 = std::string::append(&v82, "\" ");
        v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        v98 = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)v97 = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        if (v98 >= 0)
          v28 = v97;
        else
          v28 = (void **)v97[0];
        if (v98 >= 0)
          v29 = HIBYTE(v98);
        else
          v29 = (std::string::size_type)v97[1];
        std::string::append((std::string *)(v6 + 384), (const std::string::value_type *)v28, v29);
        if (SHIBYTE(v98) < 0)
          operator delete(v97[0]);
        if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v82.__r_.__value_.__l.__data_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v91.__r_.__value_.__l.__data_);
        v30 = (_QWORD *)v18[1];
        if (v30)
        {
          do
          {
            v31 = v30;
            v30 = (_QWORD *)*v30;
          }
          while (v30);
        }
        else
        {
          do
          {
            v31 = (_QWORD *)v18[2];
            v32 = *v31 == (_QWORD)v18;
            v18 = v31;
          }
          while (!v32);
        }
        v18 = v31;
      }
      while (v31 != (_QWORD *)(v17 + 4));
    }
    std::string::basic_string[abi:ne180100]<0>(v97, "condition_node_params");
    std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__erase_unique<std::string>(&v85, (const void **)v97);
    if (SHIBYTE(v98) < 0)
      operator delete(v97[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v97, "leaf_node_params");
  v33 = (uint64_t **)std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)&v85, (const void **)v97);
  if (SHIBYTE(v98) < 0)
    operator delete(v97[0]);
  if (&v86 != v33)
  {
    std::string::basic_string[abi:ne180100]<0>(v97, "leaf_node_params");
    v82.__r_.__value_.__r.__words[0] = (std::string::size_type)v97;
    v34 = std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v85, (const void **)v97, &v82);
    if (SHIBYTE(v98) < 0)
      operator delete(v97[0]);
    v35 = (_QWORD *)*((_QWORD *)v34 + 7);
    if (v35 != (_QWORD *)(v34 + 4))
    {
      do
      {
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v91, (const void **)v35 + 4);
        v36 = std::string::append(&v91, "\"");
        v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        v38 = *((char *)v35 + 79);
        if (v38 >= 0)
          v39 = (const std::string::value_type *)(v35 + 7);
        else
          v39 = (const std::string::value_type *)v35[7];
        if (v38 >= 0)
          v40 = *((unsigned __int8 *)v35 + 79);
        else
          v40 = v35[8];
        v41 = std::string::append(&__str, v39, v40);
        v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        v82.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        v43 = std::string::append(&v82, "\" ");
        v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
        v98 = v43->__r_.__value_.__r.__words[2];
        *(_OWORD *)v97 = v44;
        v43->__r_.__value_.__l.__size_ = 0;
        v43->__r_.__value_.__r.__words[2] = 0;
        v43->__r_.__value_.__r.__words[0] = 0;
        if (v98 >= 0)
          v45 = v97;
        else
          v45 = (void **)v97[0];
        if (v98 >= 0)
          v46 = HIBYTE(v98);
        else
          v46 = (std::string::size_type)v97[1];
        std::string::append((std::string *)(v6 + 408), (const std::string::value_type *)v45, v46);
        if (SHIBYTE(v98) < 0)
          operator delete(v97[0]);
        if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v82.__r_.__value_.__l.__data_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v91.__r_.__value_.__l.__data_);
        v47 = (_QWORD *)v35[1];
        if (v47)
        {
          do
          {
            v48 = v47;
            v47 = (_QWORD *)*v47;
          }
          while (v47);
        }
        else
        {
          do
          {
            v48 = (_QWORD *)v35[2];
            v32 = *v48 == (_QWORD)v35;
            v35 = v48;
          }
          while (!v32);
        }
        v35 = v48;
      }
      while (v48 != (_QWORD *)(v34 + 4));
    }
    std::string::basic_string[abi:ne180100]<0>(v97, "leaf_node_params");
    std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__erase_unique<std::string>(&v85, (const void **)v97);
    if (SHIBYTE(v98) < 0)
      operator delete(v97[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v97, "edge");
  v49 = (uint64_t **)std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)&v85, (const void **)v97);
  if (SHIBYTE(v98) < 0)
    operator delete(v97[0]);
  if (&v86 != v49)
  {
    std::string::basic_string[abi:ne180100]<0>(v97, "edge");
    v82.__r_.__value_.__r.__words[0] = (std::string::size_type)v97;
    v50 = std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v85, (const void **)v97, &v82);
    std::string::basic_string[abi:ne180100]<0>(&v82, "yes_color");
    v51 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)v50 + 56, (const void **)&v82.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&__str, "edge");
    v91.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
    v52 = std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v85, (const void **)&__str.__r_.__value_.__l.__data_, &v91);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v82.__r_.__value_.__l.__data_);
    if (SHIBYTE(v98) < 0)
      operator delete(v97[0]);
    if (v52 + 4 != (_OWORD *)v51)
    {
      std::string::basic_string[abi:ne180100]<0>(v97, "edge");
      v82.__r_.__value_.__r.__words[0] = (std::string::size_type)v97;
      v53 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v85, (const void **)v97, &v82);
      std::string::basic_string[abi:ne180100]<0>(&v82, "yes_color");
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v82;
      v54 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v53 + 7, (const void **)&v82.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__str);
      std::string::operator=((std::string *)(v6 + 312), (const std::string *)((char *)v54 + 56));
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v82.__r_.__value_.__l.__data_);
      if (SHIBYTE(v98) < 0)
        operator delete(v97[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v97, "edge");
    v82.__r_.__value_.__r.__words[0] = (std::string::size_type)v97;
    v55 = std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v85, (const void **)v97, &v82);
    std::string::basic_string[abi:ne180100]<0>(&v82, "no_color");
    v56 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)v55 + 56, (const void **)&v82.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&__str, "edge");
    v91.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
    v57 = std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v85, (const void **)&__str.__r_.__value_.__l.__data_, &v91);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v82.__r_.__value_.__l.__data_);
    if (SHIBYTE(v98) < 0)
      operator delete(v97[0]);
    if (v57 + 4 != (_OWORD *)v56)
    {
      std::string::basic_string[abi:ne180100]<0>(v97, "edge");
      v82.__r_.__value_.__r.__words[0] = (std::string::size_type)v97;
      v58 = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v85, (const void **)v97, &v82);
      std::string::basic_string[abi:ne180100]<0>(&v82, "no_color");
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v82;
      v59 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v58 + 7, (const void **)&v82.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__str);
      std::string::operator=((std::string *)(v6 + 336), (const std::string *)((char *)v59 + 56));
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v82.__r_.__value_.__l.__data_);
      if (SHIBYTE(v98) < 0)
        operator delete(v97[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v97, "edge");
    std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__erase_unique<std::string>(&v85, (const void **)v97);
    if (SHIBYTE(v98) < 0)
      operator delete(v97[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v97, "graph_attrs");
  v82.__r_.__value_.__r.__words[0] = (std::string::size_type)v97;
  v60 = std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v85, (const void **)v97, &v82);
  if (SHIBYTE(v98) < 0)
    operator delete(v97[0]);
  v61 = atomic_load((unsigned __int8 *)&qword_253F36D08);
  if ((v61 & 1) == 0 && __cxa_guard_acquire(&qword_253F36D08))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_253F36F10, "    graph [ {key}=\"{value}\" ]\n");
    __cxa_atexit(MEMORY[0x24BEDACF0], qword_253F36F10, &dword_220DF6000);
    __cxa_guard_release(&qword_253F36D08);
  }
  v62 = (_QWORD *)*((_QWORD *)v60 + 7);
  if (v62 != (_QWORD *)(v60 + 4))
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v97, "{key}");
      if (*((char *)v62 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(&v99, (const std::string::value_type *)v62[4], v62[5]);
      }
      else
      {
        v63 = *((_OWORD *)v62 + 2);
        v99.__r_.__value_.__r.__words[2] = v62[6];
        *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v63;
      }
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],std::string const&,0>(v100, "{value}", (__int128 *)(v62 + 7));
      std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&__str, (const void **)v97, 2);
      xgboost::TreeGenerator::Match(&v82, (uint64_t)qword_253F36F10, &__str);
      if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v64 = &v82;
      else
        v64 = (std::string *)v82.__r_.__value_.__r.__words[0];
      if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v65 = HIBYTE(v82.__r_.__value_.__r.__words[2]);
      else
        v65 = v82.__r_.__value_.__l.__size_;
      std::string::append((std::string *)(v6 + 432), (const std::string::value_type *)v64, v65);
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v82.__r_.__value_.__l.__data_);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&__str, (_QWORD *)__str.__r_.__value_.__l.__size_);
      for (i = 0; i != -12; i -= 6)
      {
        v67 = &v97[i];
        if (*((char *)&v101 + i * 8 + 7) < 0)
          operator delete(v67[9]);
        if (*((char *)v67 + 71) < 0)
          operator delete(v67[6]);
      }
      v68 = (_QWORD *)v62[1];
      if (v68)
      {
        do
        {
          v69 = v68;
          v68 = (_QWORD *)*v68;
        }
        while (v68);
      }
      else
      {
        do
        {
          v69 = (_QWORD *)v62[2];
          v32 = *v69 == (_QWORD)v62;
          v62 = v69;
        }
        while (!v32);
      }
      v62 = v69;
    }
    while (v69 != (_QWORD *)(v60 + 4));
  }
  std::string::basic_string[abi:ne180100]<0>(v97, "graph_attrs");
  std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__erase_unique<std::string>(&v85, (const void **)v97);
  if (SHIBYTE(v98) < 0)
    operator delete(v97[0]);
  if (v87)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v97);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v98, (uint64_t)"The following parameters for graphviz are not recognized:\n", 58);
    v71 = (uint64_t *)v85;
    if (v85 != &v86)
    {
      do
      {
        if (*((char *)v71 + 55) < 0)
          std::string::__init_copy_ctor_external(&v82, (const std::string::value_type *)v71[4], v71[5]);
        else
          v82 = *(std::string *)(v71 + 4);
        std::map<std::string,std::string>::map[abi:ne180100]((uint64_t *)v83, (const void ***)v71 + 7);
        if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v72 = &v82;
        else
          v72 = (std::string *)v82.__r_.__value_.__r.__words[0];
        if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v73 = HIBYTE(v82.__r_.__value_.__r.__words[2]);
        else
          v73 = v82.__r_.__value_.__l.__size_;
        v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v98, (uint64_t)v72, v73);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)", ", 2);
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v83, (_QWORD *)v83[1]);
        if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v82.__r_.__value_.__l.__data_);
        v75 = (uint64_t *)v71[1];
        if (v75)
        {
          do
          {
            v76 = (uint64_t **)v75;
            v75 = (uint64_t *)*v75;
          }
          while (v75);
        }
        else
        {
          do
          {
            v76 = (uint64_t **)v71[2];
            v32 = *v76 == v71;
            v71 = (uint64_t *)v76;
          }
          while (!v32);
        }
        v71 = (uint64_t *)v76;
      }
      while (v76 != &v86);
    }
    if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst(v70) + 4) >= 1)
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
      xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)&v82, (uint64_t)&__str, 613, 1);
      std::stringbuf::str();
      if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v77 = &v91;
      else
        v77 = (std::string *)v91.__r_.__value_.__r.__words[0];
      if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v78 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
      else
        v78 = v91.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)v77, v78);
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v91.__r_.__value_.__l.__data_);
      xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)&v82);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
    v97[0] = *(void **)MEMORY[0x24BEDB7F0];
    v79 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(void **)((char *)v97 + *((_QWORD *)v97[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    v98 = v79;
    v99.__r_.__value_.__r.__words[0] = MEMORY[0x24BEDB848] + 16;
    if (v103 < 0)
      operator delete(v101);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227666FE4](v105);
  }
  std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy(v86);
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v81.__r_.__value_.__l.__data_);
  return v6;
}

void sub_220F31E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, xgboost::TreeGenerator *a10, void **a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,_QWORD *a55)
{
  __cxa_guard_abort(&qword_253F36D08);
  std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy(a55);
  xgboost::GraphvizParam::~GraphvizParam(a11);
  xgboost::TreeGenerator::~TreeGenerator(a10);
  MEMORY[0x227667068](a10, 0x10F3C403D46ECABLL);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_220F320E4(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13, uint64_t a14, int a15, __int16 a16, char a17, unsigned __int8 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  char a68;
  void *v70;
  dmlc::LogMessageFatal::Entry *Entry;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  size_t v80;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(&a60, a61);
  if (a68 < 0)
    operator delete(a63);
  if (a23)
  {
    a24 = a23;
    operator delete(a23);
  }
  if (a2 == 1)
  {
    v70 = __cxa_begin_catch(a1);
    Entry = (dmlc::LogMessageFatal::Entry *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&a20);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc", 566);
    v72 = dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&a20);
    v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, "Failed to parse graphviz parameters:\n\t", 38);
    if ((a18 & 0x80u) == 0)
      v74 = &a13;
    else
      v74 = a13;
    if ((a18 & 0x80u) == 0)
      v75 = a18;
    else
      v75 = a14;
    v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, v74, v75);
    v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, "\n", 1);
    v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, "With error:\n", 12);
    v79 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v70 + 16))(v70);
    v80 = strlen(v79);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, v79, v80);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a20);
    __cxa_end_catch();
    JUMPOUT(0x220F3124CLL);
  }
  JUMPOUT(0x220F32230);
}

void sub_220F320F0(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13, uint64_t a14, int a15, __int16 a16, char a17, unsigned __int8 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,_QWORD *a61,uint64_t a62,void *a63)
{
  char a68;
  void *__p;
  char a72;
  void *v74;
  std::string *Entry;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  const char *v83;
  size_t v84;

  if (a72 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a60, a61);
  if (a68 < 0)
    operator delete(a63);
  if (a23)
  {
    a24 = a23;
    operator delete(a23);
  }
  if (a2 == 1)
  {
    v74 = __cxa_begin_catch(a1);
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&a20);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/tree_model.cc");
    v76 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&a20);
    v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"Failed to parse graphviz parameters:\n\t", 38);
    if ((a18 & 0x80u) == 0)
      v78 = &a13;
    else
      v78 = a13;
    if ((a18 & 0x80u) == 0)
      v79 = a18;
    else
      v79 = a14;
    v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)v78, v79);
    v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"\n", 1);
    v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"With error:\n", 12);
    v83 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v74 + 16))(v74);
    v84 = strlen(v83);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)v83, v84);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a20);
    __cxa_end_catch();
    JUMPOUT(0x220F3124CLL);
  }
  JUMPOUT(0x220F32230);
}

void sub_220F32210(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a71;

  std::istringstream::~istringstream(&a71);
  JUMPOUT(0x220F32098);
}

void sub_220F32218()
{
  __cxa_end_catch();
  JUMPOUT(0x220F32230);
}

void sub_220F3223C(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x220F320DCLL);
}

uint64_t std::__function::__func<xgboost::$_3,std::allocator<xgboost::$_3>,xgboost::TreeGenerator * ()(xgboost::FeatureMap const&,std::string,BOOL)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<xgboost::$_3,std::allocator<xgboost::$_3>,xgboost::TreeGenerator * ()(xgboost::FeatureMap const&,std::string,BOOL)>::target_type()
{
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(uint64_t a1, const void **a2)
{
  size_t v3;
  uint64_t result;
  char *v5;
  const void *v6;

  if (*((char *)a2 + 23) >= 0)
    v3 = *((unsigned __int8 *)a2 + 23);
  else
    v3 = (size_t)a2[1];
  result = std::string::basic_string[abi:ne180100](a1, v3 + 1);
  if (*(char *)(result + 23) >= 0)
    v5 = (char *)result;
  else
    v5 = *(char **)result;
  if (v3)
  {
    if (*((char *)a2 + 23) >= 0)
      v6 = a2;
    else
      v6 = *a2;
    result = (uint64_t)memmove(v5, v6, v3);
  }
  *(_WORD *)&v5[v3] = 61;
  return result;
}

uint64_t std::pair<std::string const,std::map<std::string,std::string>>::~pair(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void xgboost::GraphvizGenerator::Categorical(xgboost::GraphvizGenerator *this@<X0>, const xgboost::RegTree *a2@<X1>, xgboost::RegTree *a3@<X2>, std::string *a4@<X8>)
{
  unsigned __int8 v8;
  int v9;
  unint64_t v10;
  xgboost::FeatureMap *v11;
  unint64_t v12;
  char *v13;
  std::string::const_iterator v14;
  unint64_t i;
  std::string *v16;
  std::string *v17;
  std::string::size_type size;
  std::string *v19;
  std::string::size_type v20;
  std::string v21;
  std::string __p;
  std::string v23;
  _QWORD v24[3];
  __int128 v25;
  char v26;
  void *v27[3];
  std::string v28[2];
  _QWORD v29[3];
  std::string v30;
  _QWORD v31[6];
  _QWORD v32[9];

  v32[6] = *MEMORY[0x24BDAC8D0];
  v8 = atomic_load((unsigned __int8 *)&qword_253F36D10);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_253F36D10))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_253F36F28, "    {nid} [ label=\"{fname}:{cond}\" {params}]\n");
    __cxa_atexit(MEMORY[0x24BEDACF0], qword_253F36F28, &dword_220DF6000);
    __cxa_guard_release(&qword_253F36D10);
  }
  xgboost::GetSplitCategories(a2, a3, (char **)v27);
  xgboost::PrintCatsAsSet(v27);
  v9 = *(_DWORD *)(*((_QWORD *)a2 + 20) + 20 * (int)a3 + 12);
  std::to_string(&v23, (int)a3);
  std::string::basic_string[abi:ne180100]<0>(v28, "{nid}");
  v10 = v9 & 0x7FFFFFFF;
  v28[1] = v23;
  memset(&v23, 0, sizeof(v23));
  v11 = (xgboost::FeatureMap *)*((_QWORD *)this + 1);
  v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v11 + 1) - *(_QWORD *)v11) >> 3);
  if (v12 <= v10)
  {
    std::to_string(&v21, v10);
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v21;
    else
      v14.__i_ = (std::__wrap_iter<const char *>::iterator_type)v21.__r_.__value_.__r.__words[0];
    std::string::insert(&v21, v14, 102);
    __p = v21;
    memset(&v21, 0, sizeof(v21));
  }
  else
  {
    v13 = xgboost::FeatureMap::Name(v11, v10);
    std::string::basic_string[abi:ne180100]<0>(&__p, v13);
  }
  std::string::basic_string[abi:ne180100]<0>(v29, "{fname}");
  v30 = __p;
  memset(&__p, 0, sizeof(__p));
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],std::string&,0>(v31, &v25);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],std::string const&,0>(v32, (__int128 *)this + 24);
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v24, (const void **)&v28[0].__r_.__value_.__l.__data_, 4);
  xgboost::TreeGenerator::Match(a4, (uint64_t)qword_253F36F28, v24);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v24, (_QWORD *)v24[1]);
  for (i = 0; i != 0x1FFFFFFFFFFFFFE8; i -= 6)
  {
    v16 = &v28[i / 3];
    if (SHIBYTE(v32[i + 5]) < 0)
      operator delete(v16[7].__r_.__value_.__l.__data_);
    if (SHIBYTE(v16[6].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16[6].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v12 <= v10 && SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  xgboost::GraphvizGenerator::BuildEdge<true>(v28, (uint64_t)this, (uint64_t)a2, (int)a3, *(_DWORD *)(*((_QWORD *)a2 + 20) + 20 * (int)a3 + 4), 1);
  if ((v28[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = v28;
  else
    v17 = (std::string *)v28[0].__r_.__value_.__r.__words[0];
  if ((v28[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v28[0].__r_.__value_.__r.__words[2]);
  else
    size = v28[0].__r_.__value_.__l.__size_;
  std::string::append(a4, (const std::string::value_type *)v17, size);
  if (SHIBYTE(v28[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28[0].__r_.__value_.__l.__data_);
  xgboost::GraphvizGenerator::BuildEdge<true>(v28, (uint64_t)this, (uint64_t)a2, (int)a3, *(_DWORD *)(*((_QWORD *)a2 + 20) + 20 * (int)a3 + 8), 0);
  if ((v28[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = v28;
  else
    v19 = (std::string *)v28[0].__r_.__value_.__r.__words[0];
  if ((v28[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = HIBYTE(v28[0].__r_.__value_.__r.__words[2]);
  else
    v20 = v28[0].__r_.__value_.__l.__size_;
  std::string::append(a4, (const std::string::value_type *)v19, v20);
  if (SHIBYTE(v28[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28[0].__r_.__value_.__l.__data_);
  if (v26 < 0)
    operator delete((void *)v25);
  if (v27[0])
  {
    v27[1] = v27[0];
    operator delete(v27[0]);
  }
}

void sub_220F326E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  __cxa_guard_abort(&qword_253F36D10);
  _Unwind_Resume(a1);
}

void xgboost::GraphvizGenerator::PlainNode(xgboost::GraphvizGenerator *this@<X0>, const xgboost::RegTree *a2@<X1>, int a3@<W2>, std::string *a4@<X8>)
{
  int v8;
  unsigned __int8 v9;
  unint64_t v10;
  xgboost::FeatureMap *v11;
  _BOOL4 v12;
  xgboost::FeatureMap *v13;
  unint64_t v14;
  char *v15;
  std::string::const_iterator v16;
  char *v17;
  unint64_t i;
  std::string *v19;
  std::string *v20;
  std::string::size_type size;
  std::string *v22;
  std::string::size_type v23;
  void *__p[2];
  uint64_t v25;
  std::string v26;
  std::string v27;
  std::string v28;
  _QWORD v29[3];
  std::string v30[2];
  _QWORD v31[3];
  std::string v32;
  _QWORD v33[3];
  _QWORD v34[3];
  _QWORD v35[3];
  __int128 v36;
  uint64_t v37;
  _QWORD v38[9];

  v38[6] = *MEMORY[0x24BDAC8D0];
  v8 = *(_DWORD *)(*((_QWORD *)a2 + 20) + 20 * a3 + 12);
  v9 = atomic_load((unsigned __int8 *)&qword_253F36D20);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_253F36D20))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_253F36F58, "    {nid} [ label=\"{fname}{<}{cond}\" {params}]\n");
    __cxa_atexit(MEMORY[0x24BEDACF0], qword_253F36F58, &dword_220DF6000);
    __cxa_guard_release(&qword_253F36D20);
  }
  v10 = v8 & 0x7FFFFFFF;
  v11 = (xgboost::FeatureMap *)*((_QWORD *)this + 1);
  v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v11 + 1) - *(_QWORD *)v11) >> 3) <= v10
     || xgboost::FeatureMap::TypeOf(v11, v8 & 0x7FFFFFFF) != 0;
  std::to_string(&v28, a3);
  std::string::basic_string[abi:ne180100]<0>(v30, "{nid}");
  v30[1] = v28;
  memset(&v28, 0, sizeof(v28));
  v13 = (xgboost::FeatureMap *)*((_QWORD *)this + 1);
  v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v13 + 1) - *(_QWORD *)v13) >> 3);
  if (v14 <= v10)
  {
    std::to_string(&v26, v10);
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v26;
    else
      v16.__i_ = (std::__wrap_iter<const char *>::iterator_type)v26.__r_.__value_.__r.__words[0];
    std::string::insert(&v26, v16, 102);
    v27 = v26;
    memset(&v26, 0, sizeof(v26));
  }
  else
  {
    v15 = xgboost::FeatureMap::Name(v13, v10);
    std::string::basic_string[abi:ne180100]<0>(&v27, v15);
  }
  std::string::basic_string[abi:ne180100]<0>(v31, "{fname}");
  v32 = v27;
  memset(&v27, 0, sizeof(v27));
  std::string::basic_string[abi:ne180100]<0>(v33, "{<}");
  if (v12)
    v17 = "<";
  else
    v17 = (char *)&unk_220F8364E;
  std::string::basic_string[abi:ne180100]<0>(v34, v17);
  if (v12)
    xgboost::TreeGenerator::ToStr<float>();
  else
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_220F8364E);
  std::string::basic_string[abi:ne180100]<0>(v35, "{cond}");
  v36 = *(_OWORD *)__p;
  v37 = v25;
  __p[1] = 0;
  v25 = 0;
  __p[0] = 0;
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],std::string const&,0>(v38, (__int128 *)this + 24);
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v29, (const void **)&v30[0].__r_.__value_.__l.__data_, 5);
  xgboost::TreeGenerator::Match(a4, (uint64_t)qword_253F36F58, v29);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v29, (_QWORD *)v29[1]);
  for (i = 0; i != 0x1FFFFFFFFFFFFFE2; i -= 6)
  {
    v19 = &v30[i / 3];
    if (SHIBYTE(v38[i + 5]) < 0)
      operator delete(v19[9].__r_.__value_.__l.__data_);
    if (SHIBYTE(v19[8].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19[8].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (v14 <= v10 && SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  xgboost::GraphvizGenerator::BuildEdge<false>(v30, (uint64_t)this, (uint64_t)a2, a3, *(_DWORD *)(*((_QWORD *)a2 + 20) + 20 * a3 + 4), 1);
  if ((v30[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = v30;
  else
    v20 = (std::string *)v30[0].__r_.__value_.__r.__words[0];
  if ((v30[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v30[0].__r_.__value_.__r.__words[2]);
  else
    size = v30[0].__r_.__value_.__l.__size_;
  std::string::append(a4, (const std::string::value_type *)v20, size);
  if (SHIBYTE(v30[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30[0].__r_.__value_.__l.__data_);
  xgboost::GraphvizGenerator::BuildEdge<false>(v30, (uint64_t)this, (uint64_t)a2, a3, *(_DWORD *)(*((_QWORD *)a2 + 20) + 20 * a3 + 8), 0);
  if ((v30[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = v30;
  else
    v22 = (std::string *)v30[0].__r_.__value_.__r.__words[0];
  if ((v30[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = HIBYTE(v30[0].__r_.__value_.__r.__words[2]);
  else
    v23 = v30[0].__r_.__value_.__l.__size_;
  std::string::append(a4, (const std::string::value_type *)v22, v23);
  if (SHIBYTE(v30[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30[0].__r_.__value_.__l.__data_);
}

void sub_220F32C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  __cxa_guard_abort(&qword_253F36D20);
  _Unwind_Resume(a1);
}

void xgboost::GraphvizGenerator::LeafNode(xgboost::GraphvizGenerator *this@<X0>, int __val@<W2>, std::string *a3@<X8>)
{
  unsigned __int8 v7;
  uint64_t i;
  const void **v9;
  void *__p[2];
  uint64_t v11;
  std::string v12;
  _QWORD v13[3];
  const void *v14[3];
  std::string v15;
  _QWORD v16[3];
  __int128 v17;
  uint64_t v18;
  _QWORD v19[7];

  v19[6] = *MEMORY[0x24BDAC8D0];
  v7 = atomic_load((unsigned __int8 *)&qword_253F36D30);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_253F36D30))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_253F36F88, "    {nid} [ label=\"leaf={leaf-value}\" {params}]\n");
    __cxa_atexit(MEMORY[0x24BEDACF0], qword_253F36F88, &dword_220DF6000);
    __cxa_guard_release(&qword_253F36D30);
  }
  std::to_string(&v12, __val);
  std::string::basic_string[abi:ne180100]<0>(v14, "{nid}");
  v15 = v12;
  memset(&v12, 0, sizeof(v12));
  xgboost::TreeGenerator::ToStr<float>();
  std::string::basic_string[abi:ne180100]<0>(v16, "{leaf-value}");
  v17 = *(_OWORD *)__p;
  v18 = v11;
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],std::string const&,0>(v19, (__int128 *)((char *)this + 408));
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v13, v14, 3);
  xgboost::TreeGenerator::Match(a3, (uint64_t)qword_253F36F88, v13);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v13, (_QWORD *)v13[1]);
  for (i = 0; i != -18; i -= 6)
  {
    v9 = &v14[i];
    if (SHIBYTE(v19[i + 5]) < 0)
      operator delete((void *)v9[15]);
    if (*((char *)v9 + 119) < 0)
      operator delete((void *)v9[12]);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
}

void sub_220F32FB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24)
{
  __cxa_guard_abort(&qword_253F36D30);
  _Unwind_Resume(a1);
}

void xgboost::GraphvizGenerator::BuildTree(xgboost::GraphvizGenerator *this@<X0>, const xgboost::RegTree *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, std::string *a5@<X8>)
{
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  const void **v14;
  void *__p[2];
  uint64_t v16;
  void *v17[2];
  uint64_t v18;
  void *v19[3];
  void *v20[2];
  char v21;
  const void *v22[6];
  _QWORD v23[3];
  __int128 v24;
  uint64_t v25;
  _QWORD v26[3];
  __int128 v27;
  _QWORD v28[2];

  v28[1] = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(*((_QWORD *)a2 + 20) + 20 * (int)a3 + 4) == -1)
  {
    (*(void (**)(xgboost::GraphvizGenerator *, const xgboost::RegTree *, uint64_t, uint64_t))(*(_QWORD *)this + 56))(this, a2, a3, a4);
  }
  else
  {
    v10 = atomic_load((unsigned __int8 *)&qword_253F36D38);
    if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_253F36D38))
    {
      std::string::basic_string[abi:ne180100]<0>(qword_253F36FA0, "{parent}\n{left}\n{right}");
      __cxa_atexit(MEMORY[0x24BEDACF0], qword_253F36FA0, &dword_220DF6000);
      __cxa_guard_release(&qword_253F36D38);
    }
    v11 = 40;
    if (*(_BYTE *)(*((_QWORD *)a2 + 29) + (int)a3) == 1)
      v11 = 8;
    (*(void (**)(void **__return_ptr, xgboost::GraphvizGenerator *, const xgboost::RegTree *, uint64_t, uint64_t))(*(_QWORD *)this + v11))(v20, this, a2, a3, a4);
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],std::string&,0>(v22, "{parent}", (__int128 *)v20);
    v12 = (a4 + 1);
    (*(void (**)(void **__return_ptr, xgboost::GraphvizGenerator *, const xgboost::RegTree *, _QWORD, uint64_t))(*(_QWORD *)this + 64))(v17, this, a2, *(unsigned int *)(*((_QWORD *)a2 + 20) + 20 * (int)a3 + 4), v12);
    std::string::basic_string[abi:ne180100]<0>(v23, "{left}");
    v24 = *(_OWORD *)v17;
    v25 = v18;
    v17[1] = 0;
    v18 = 0;
    v17[0] = 0;
    (*(void (**)(void **__return_ptr, xgboost::GraphvizGenerator *, const xgboost::RegTree *, _QWORD, uint64_t))(*(_QWORD *)this + 64))(__p, this, a2, *(unsigned int *)(*((_QWORD *)a2 + 20) + 20 * (int)a3 + 8), v12);
    std::string::basic_string[abi:ne180100]<0>(v26, "{right}");
    v27 = *(_OWORD *)__p;
    v28[0] = v16;
    __p[1] = 0;
    v16 = 0;
    __p[0] = 0;
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v19, v22, 3);
    xgboost::TreeGenerator::Match(a5, (uint64_t)qword_253F36FA0, v19);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v19, (_QWORD *)v19[1]);
    for (i = 0; i != -18; i -= 6)
    {
      v14 = &v22[i];
      if (SHIBYTE(v28[i]) < 0)
        operator delete((void *)v14[15]);
      if (*((char *)v14 + 119) < 0)
        operator delete((void *)v14[12]);
    }
    if (SHIBYTE(v16) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v18) < 0)
      operator delete(v17[0]);
    if (v21 < 0)
      operator delete(v20[0]);
  }
}

void sub_220F33360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  __cxa_guard_abort(&qword_253F36D38);
  _Unwind_Resume(a1);
}

void xgboost::GraphvizGenerator::~GraphvizGenerator(void **this)
{
  xgboost::GraphvizGenerator::~GraphvizGenerator(this);
  JUMPOUT(0x227667068);
}

{
  *this = &off_24E6BD848;
  if (*((char *)this + 455) < 0)
    operator delete(this[54]);
  if (*((char *)this + 431) < 0)
    operator delete(this[51]);
  if (*((char *)this + 407) < 0)
    operator delete(this[48]);
  if (*((char *)this + 383) < 0)
    operator delete(this[45]);
  if (*((char *)this + 359) < 0)
    operator delete(this[42]);
  if (*((char *)this + 335) < 0)
    operator delete(this[39]);
  xgboost::TreeGenerator::~TreeGenerator((xgboost::TreeGenerator *)this);
}

void xgboost::GraphvizGenerator::BuildTree(xgboost::GraphvizGenerator *this, const xgboost::RegTree *a2)
{
  unsigned __int8 v4;
  uint64_t i;
  const void **v6;
  std::string *v7;
  std::string::size_type size;
  void *__p[2];
  uint64_t v10;
  _QWORD v11[3];
  std::string v12;
  const void *v13[3];
  std::string v14;
  _QWORD v15[3];
  std::string v16;
  _QWORD v17[3];
  __int128 v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x24BDAC8D0];
  v4 = atomic_load((unsigned __int8 *)&qword_253F36D40);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_253F36D40))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_253F36FB8, "digraph {\n    graph [ rankdir={rankdir} ]\n{graph_attrs}\n{nodes}}");
    __cxa_atexit(MEMORY[0x24BEDACF0], qword_253F36FB8, &dword_220DF6000);
    __cxa_guard_release(&qword_253F36D40);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "{rankdir}");
  if (*((char *)this + 383) < 0)
    std::string::__init_copy_ctor_external(&v14, *((const std::string::value_type **)this + 45), *((_QWORD *)this + 46));
  else
    v14 = *(std::string *)((_BYTE *)this + 15);
  std::string::basic_string[abi:ne180100]<0>(v15, "{graph_attrs}");
  if (*((char *)this + 455) < 0)
    std::string::__init_copy_ctor_external(&v16, *((const std::string::value_type **)this + 54), *((_QWORD *)this + 55));
  else
    v16 = *(std::string *)((_BYTE *)this + 18);
  (*(void (**)(void **__return_ptr, xgboost::GraphvizGenerator *, const xgboost::RegTree *, _QWORD, _QWORD))(*(_QWORD *)this + 64))(__p, this, a2, 0, 0);
  std::string::basic_string[abi:ne180100]<0>(v17, "{nodes}");
  v18 = *(_OWORD *)__p;
  v19[0] = v10;
  __p[1] = 0;
  v10 = 0;
  __p[0] = 0;
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v11, v13, 3);
  xgboost::TreeGenerator::Match(&v12, (uint64_t)qword_253F36FB8, v11);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v11, (_QWORD *)v11[1]);
  for (i = 0; i != -18; i -= 6)
  {
    v6 = &v13[i];
    if (SHIBYTE(v19[i]) < 0)
      operator delete((void *)v6[15]);
    if (*((char *)v6 + 119) < 0)
      operator delete((void *)v6[12]);
  }
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v12;
  else
    v7 = (std::string *)v12.__r_.__value_.__r.__words[0];
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
  else
    size = v12.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)this + 4, (uint64_t)v7, size);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
}

void sub_220F336B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  __cxa_guard_abort(&qword_253F36D40);
  _Unwind_Resume(a1);
}

void dmlc::JSONReader::BeginObject(dmlc::JSONReader *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v7;
  std::string *Entry;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  void **v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  void *__p[2];
  unsigned __int8 v37;
  char v38;
  uint64_t v39;
  unsigned int v40;
  char v41;

  v2 = (char *)this + 8;
  v3 = (char *)this + 16;
  v4 = MEMORY[0x24BDAC740];
  do
  {
    while (1)
    {
      v5 = std::istream::get();
      v6 = v5;
      v7 = v3;
      if (v5 != 10)
      {
        v7 = v2;
        if (v5 != 13)
          break;
      }
      ++*v7;
LABEL_5:
      if ((*(_DWORD *)(v4 + 4 * v5 + 60) & 0x4000) == 0)
        goto LABEL_9;
    }
    if (v5 <= 0x7F)
      goto LABEL_5;
  }
  while (__maskrune(v5, 0x4000uLL));
LABEL_9:
  v40 = v6;
  LOBYTE(__p[0]) = 123;
  if (v6 != 123)
  {
    dmlc::LogCheckFormat<int,char>(&v39, (uint64_t)&v40, (char *)__p);
    if (v39)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v38);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/././json.h");
      v9 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v38);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Check failed: ", 14);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"ch == '{'", 9);
      v12 = *(char *)(v39 + 23);
      if (v12 >= 0)
        v13 = v39;
      else
        v13 = *(_QWORD *)v39;
      if (v12 >= 0)
        v14 = *(unsigned __int8 *)(v39 + 23);
      else
        v14 = *(_QWORD *)(v39 + 8);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v13, v14);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)": ", 2);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Error at", 8);
      dmlc::JSONReader::line_info((dmlc::JSONReader *)__p, this);
      if ((v37 & 0x80u) == 0)
        v18 = __p;
      else
        v18 = (void **)__p[0];
      if ((v37 & 0x80u) == 0)
        v19 = v37;
      else
        v19 = (uint64_t)__p[1];
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", Expect '{' but get '", 22);
      v41 = v6;
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)&v41, 1);
      v41 = 39;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)&v41, 1);
      if ((char)v37 < 0)
        operator delete(__p[0]);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v38);
      v23 = v39;
      v39 = 0;
      if (v23)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v39, v23);
    }
  }
  v24 = *((_QWORD *)this + 5);
  v25 = (char *)*((_QWORD *)this + 4);
  if ((unint64_t)v25 >= v24)
  {
    v27 = (char *)*((_QWORD *)this + 3);
    v28 = (v25 - v27) >> 3;
    if ((unint64_t)(v28 + 1) >> 61)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v29 = v24 - (_QWORD)v27;
    v30 = (uint64_t)(v24 - (_QWORD)v27) >> 2;
    if (v30 <= v28 + 1)
      v30 = v28 + 1;
    if (v29 >= 0x7FFFFFFFFFFFFFF8)
      v31 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v31 = v30;
    if (v31)
    {
      v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)this + 40, v31);
      v27 = (char *)*((_QWORD *)this + 3);
      v25 = (char *)*((_QWORD *)this + 4);
    }
    else
    {
      v32 = 0;
    }
    v33 = &v32[8 * v28];
    v34 = &v32[8 * v31];
    *(_QWORD *)v33 = 0;
    v26 = v33 + 8;
    while (v25 != v27)
    {
      v35 = *((_QWORD *)v25 - 1);
      v25 -= 8;
      *((_QWORD *)v33 - 1) = v35;
      v33 -= 8;
    }
    *((_QWORD *)this + 3) = v33;
    *((_QWORD *)this + 4) = v26;
    *((_QWORD *)this + 5) = v34;
    if (v27)
      operator delete(v27);
  }
  else
  {
    *(_QWORD *)v25 = 0;
    v26 = v25 + 8;
  }
  *((_QWORD *)this + 4) = v26;
}

void sub_220F33A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  uint64_t v20;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a18);
  v20 = a19;
  a19 = 0;
  if (v20)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a19, v20);
  _Unwind_Resume(a1);
}

uint64_t dmlc::JSONReader::NextObjectItem(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v9;
  std::string *Entry;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *p_p;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t result;
  unsigned int v30;
  unsigned int v31;
  _QWORD *v32;
  std::string *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  void *v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  void *__p;
  uint64_t v50;
  unsigned __int8 v51;
  char v52;
  uint64_t v53;
  unsigned int v54;
  char v55;

  v4 = MEMORY[0x24BDAC740];
  v5 = a1 + 1;
  v6 = a1 + 2;
  if (!*(_QWORD *)(a1[4] - 8))
  {
    while (1)
    {
      v26 = std::istream::peek();
      v27 = v26;
      v28 = v6;
      if (v26 == 10 || (v28 = v5, v26 == 13))
      {
        ++*v28;
      }
      else if (v26 > 0x7F)
      {
        if (!__maskrune(v26, 0x4000uLL))
          goto LABEL_37;
        goto LABEL_29;
      }
      if ((*(_DWORD *)(v4 + 4 * v26 + 60) & 0x4000) == 0)
      {
LABEL_37:
        if (v27 != 125)
          goto LABEL_40;
        std::istream::get();
LABEL_39:
        result = 0;
        a1[4] -= 8;
        return result;
      }
LABEL_29:
      std::istream::get();
    }
  }
  do
  {
    while (1)
    {
      v7 = std::istream::get();
      v8 = v7;
      v9 = v6;
      if (v7 != 10)
      {
        v9 = v5;
        if (v7 != 13)
          break;
      }
      ++*v9;
LABEL_5:
      if ((*(_DWORD *)(v4 + 4 * v7 + 60) & 0x4000) == 0)
        goto LABEL_9;
    }
    if (v7 <= 0x7F)
      goto LABEL_5;
  }
  while (__maskrune(v7, 0x4000uLL));
LABEL_9:
  v54 = v8;
  if (v8 == -1 || v8 == 125)
    goto LABEL_39;
  LOBYTE(__p) = 44;
  if (v8 != 44)
  {
    dmlc::LogCheckFormat<int,char>(&v53, (uint64_t)&v54, (char *)&__p);
    if (v53)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v52);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/././json.h");
      v11 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v52);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: ", 14);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ch == ','", 9);
      v14 = *(char *)(v53 + 23);
      if (v14 >= 0)
        v15 = v53;
      else
        v15 = *(_QWORD *)v53;
      if (v14 >= 0)
        v16 = *(unsigned __int8 *)(v53 + 23);
      else
        v16 = *(_QWORD *)(v53 + 8);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)": ", 2);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Error at", 8);
      dmlc::JSONReader::line_info((dmlc::JSONReader *)&__p, a1);
      if ((v51 & 0x80u) == 0)
        p_p = &__p;
      else
        p_p = __p;
      if ((v51 & 0x80u) == 0)
        v21 = v51;
      else
        v21 = v50;
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)p_p, v21);
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)", JSON object expect '}' or ',' '", 33);
      v55 = v8;
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)&v55, 1);
      v55 = 39;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)&v55, 1);
      if ((char)v51 < 0)
        operator delete(__p);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v52);
      v25 = v53;
      v53 = 0;
      if (v25)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v53, v25);
    }
  }
LABEL_40:
  ++*(_QWORD *)(a1[4] - 8);
  dmlc::JSONReader::ReadString(a1, a2);
  while (2)
  {
    while (2)
    {
      v30 = std::istream::get();
      v31 = v30;
      v32 = a1 + 2;
      if (v30 == 10 || (v32 = a1 + 1, v30 == 13))
      {
        ++*v32;
        goto LABEL_44;
      }
      if (v30 <= 0x7F)
      {
LABEL_44:
        if ((*(_DWORD *)(v4 + 4 * v30 + 60) & 0x4000) == 0)
          goto LABEL_48;
        continue;
      }
      break;
    }
    if (__maskrune(v30, 0x4000uLL))
      continue;
    break;
  }
LABEL_48:
  v54 = v31;
  LOBYTE(__p) = 58;
  if (v31 != 58)
  {
    dmlc::LogCheckFormat<int,char>(&v53, (uint64_t)&v54, (char *)&__p);
    if (v53)
    {
      v33 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v52);
      dmlc::LogMessageFatal::Entry::Init(v33, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/././json.h");
      v34 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v52);
      v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Check failed: ", 14);
      v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"ch == ':'", 9);
      v37 = *(char *)(v53 + 23);
      if (v37 >= 0)
        v38 = v53;
      else
        v38 = *(_QWORD *)v53;
      if (v37 >= 0)
        v39 = *(unsigned __int8 *)(v53 + 23);
      else
        v39 = *(_QWORD *)(v53 + 8);
      v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, v38, v39);
      v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)": ", 2);
      v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"Error at", 8);
      dmlc::JSONReader::line_info((dmlc::JSONReader *)&__p, a1);
      if ((v51 & 0x80u) == 0)
        v43 = &__p;
      else
        v43 = __p;
      if ((v51 & 0x80u) == 0)
        v44 = v51;
      else
        v44 = v50;
      v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v43, v44);
      v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)", Expect ':' but get '", 22);
      v55 = v31;
      v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)&v55, 1);
      v55 = 39;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)&v55, 1);
      if ((char)v51 < 0)
        operator delete(__p);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v52);
      v48 = v53;
      v53 = 0;
      if (v48)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v53, v48);
    }
  }
  return 1;
}

void sub_220F33EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  uint64_t v20;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a18);
  v20 = a19;
  a19 = 0;
  if (v20)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a19, v20);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,std::string>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,std::string>>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t dmlc::JSONReader::line_info(dmlc::JSONReader *this, _QWORD *a2)
{
  const std::locale::facet *v3;
  _QWORD *v4;
  size_t v5;
  _QWORD *v6;
  _QWORD v8[11];
  char v9;
  uint64_t v10;
  std::locale v11;
  char __s[64];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" Line ", 6);
  std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)(*a2 + *(_QWORD *)(*(_QWORD *)*a2 - 24)));
  v3 = std::locale::use_facet(&v11, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale(&v11);
  std::istream::getline();
  v5 = strlen(__s);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)__s, v5);
  std::stringbuf::str();
  v8[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v8[1] = MEMORY[0x24BEDB848] + 16;
  if (v9 < 0)
    operator delete((void *)v8[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v10);
}

void sub_220F3416C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t dmlc::LogCheckFormat<int,char>(uint64_t *a1, uint64_t a2, char *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[11];
  char v11;
  uint64_t v12;
  char v13;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (", 2);
  v5 = (_QWORD *)std::ostream::operator<<();
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" vs. ", 5);
  v13 = *a3;
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v13, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
  v8 = operator new();
  std::stringbuf::str();
  v10[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  *a1 = v8;
  v10[1] = MEMORY[0x24BEDB848] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v12);
}

void sub_220F342BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  MEMORY[0x227667068](v9, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t dmlc::JSONReader::ReadString(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v9;
  std::string *Entry;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  void *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *p_p;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  int v26;
  int v27;
  std::string *v29;
  _QWORD *v30;
  _QWORD *v31;
  void **v32;
  uint64_t v33;
  _QWORD *v34;
  char v35;
  const char *v36;
  std::string *v37;
  _QWORD *v38;
  _QWORD *v39;
  void *v41[2];
  uint64_t v42;
  void *__p;
  uint64_t v44;
  unsigned __int8 v45;
  void *v46;
  char v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  _BYTE v51[9];

  v4 = a1 + 1;
  v5 = a1 + 2;
  v6 = MEMORY[0x24BDAC740];
  do
  {
    while (1)
    {
      v7 = std::istream::get();
      v8 = v7;
      v9 = v5;
      if (v7 != 10)
      {
        v9 = v4;
        if (v7 != 13)
          break;
      }
      ++*v9;
LABEL_5:
      if ((*(_DWORD *)(v6 + 4 * v7 + 60) & 0x4000) == 0)
        goto LABEL_9;
    }
    if (v7 <= 0x7F)
      goto LABEL_5;
  }
  while (__maskrune(v7, 0x4000uLL));
LABEL_9:
  v50 = v8;
  LOBYTE(__p) = 34;
  if (v8 != 34)
  {
    dmlc::LogCheckFormat<int,char>((uint64_t *)v41, (uint64_t)&v50, (char *)&__p);
    if (v41[0])
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v49);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/././json.h");
      v11 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v49);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: ", 14);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ch == '\\\"'", 10);
      v14 = *((char *)v41[0] + 23);
      if (v14 >= 0)
        v15 = v41[0];
      else
        v15 = *(void **)v41[0];
      if (v14 >= 0)
        v16 = *((unsigned __int8 *)v41[0] + 23);
      else
        v16 = *((_QWORD *)v41[0] + 1);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v15, v16);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)": ", 2);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Error at", 8);
      dmlc::JSONReader::line_info((dmlc::JSONReader *)&__p, a1);
      if ((v45 & 0x80u) == 0)
        p_p = &__p;
      else
        p_p = __p;
      if ((v45 & 0x80u) == 0)
        v21 = v45;
      else
        v21 = v44;
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)p_p, v21);
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)", Expect '\"' but get '", 22);
      v51[0] = v8;
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v51, 1);
      v51[0] = 39;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v51, 1);
      if ((char)v45 < 0)
        operator delete(__p);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v49);
      v25 = v41[0];
      v41[0] = 0;
      if (v25)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v41, (uint64_t)v25);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
  while (1)
  {
    while (1)
    {
      v26 = std::istream::get();
      v27 = v26;
      if (v26 != 92)
        break;
      v35 = std::istream::get();
      if (v35 <= 109)
      {
        if (v35 == 34)
        {
          v36 = "\"";
          goto LABEL_53;
        }
        if (v35 == 92)
        {
          v36 = "\\";
          goto LABEL_53;
        }
      }
      else
      {
        if (v35 == 110)
        {
          v36 = "\n";
          goto LABEL_53;
        }
        v36 = "\r";
        if (v35 == 114)
          goto LABEL_53;
        if (v35 == 116)
        {
          v36 = "\t";
LABEL_53:
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)v36, 1);
          continue;
        }
      }
      v37 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v51);
      dmlc::LogMessageFatal::Entry::Init(v37, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/././json.h");
      v38 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v51);
      v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"unknown string escape \\", 23);
      LOBYTE(v41[0]) = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)v41, 1);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v51);
    }
    if (v26 == 34)
      break;
    LOBYTE(v41[0]) = v26;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)v41, 1);
    if ((v27 + 1) <= 0xE && ((1 << (v27 + 1)) & 0x4801) != 0)
    {
      v29 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v51);
      dmlc::LogMessageFatal::Entry::Init(v29, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/././json.h");
      v30 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v51);
      v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Error at", 8);
      dmlc::JSONReader::line_info((dmlc::JSONReader *)v41, a1);
      if (v42 >= 0)
        v32 = v41;
      else
        v32 = (void **)v41[0];
      if (v42 >= 0)
        v33 = HIBYTE(v42);
      else
        v33 = (uint64_t)v41[1];
      v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v32, v33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)", Expect '\"' but reach end of line ", 35);
      if (SHIBYTE(v42) < 0)
        operator delete(v41[0]);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v51);
    }
  }
  std::stringbuf::str();
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_OWORD *)a2 = *(_OWORD *)v41;
  *(_QWORD *)(a2 + 16) = v42;
  __p = (void *)*MEMORY[0x24BEDB800];
  *(void **)((char *)&__p + *((_QWORD *)__p - 3)) = *(void **)(MEMORY[0x24BEDB800] + 24);
  v44 = MEMORY[0x24BEDB848] + 16;
  if (v47 < 0)
    operator delete(v46);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v48);
}

void sub_220F34740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v23;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v21 - 97));
  v23 = (uint64_t)a10;
  a10 = 0;
  if (v23)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a10, v23);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,std::string>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

_OWORD *std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, _OWORD **a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[2];
  char v12;
  uint64_t v13;

  v5 = (void **)std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__find_equal<std::string>((uint64_t)a1, &v13, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x50uLL);
    v11[1] = a1 + 1;
    v8 = *a3;
    v9 = *((_QWORD *)*a3 + 2);
    v6[2] = **a3;
    *((_QWORD *)v6 + 6) = v9;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    *((_QWORD *)v6 + 9) = 0;
    *((_QWORD *)v6 + 8) = 0;
    *((_QWORD *)v6 + 7) = v6 + 4;
    v12 = 1;
    std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__insert_node_at(a1, v13, v7, (uint64_t *)v6);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v11);
  }
  return v6;
}

void std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__erase_unique<std::string>(_QWORD *a1, const void **a2)
{
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  uint64_t *v9;

  v3 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 != (_QWORD *)v3)
  {
    v4 = (uint64_t *)v3;
    v5 = *(_QWORD **)(v3 + 8);
    if (v5)
    {
      do
      {
        v6 = v5;
        v5 = (_QWORD *)*v5;
      }
      while (v5);
    }
    else
    {
      v7 = (_QWORD *)v3;
      do
      {
        v6 = (_QWORD *)v7[2];
        v8 = *v6 == (_QWORD)v7;
        v7 = v6;
      }
      while (!v8);
    }
    if (*a1 == v3)
      *a1 = v6;
    v9 = (uint64_t *)a1[1];
    --a1[2];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v9, v4);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,std::string>>,0>((uint64_t)(v4 + 4));
    operator delete(v4);
  }
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],std::string const&,0>(_QWORD *a1, char *a2, __int128 *a3)
{
  std::string *v5;
  __int128 v6;

  v5 = (std::string *)(std::string::basic_string[abi:ne180100]<0>(a1, a2) + 3);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_220F349E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void xgboost::GraphvizGenerator::BuildEdge<true>(std::string *a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  unsigned __int8 v12;
  uint64_t v13;
  int v14;
  int *v15;
  int *v16;
  int v17;
  char *v18;
  char *v19;
  const std::string::value_type *p_p;
  std::string::size_type v21;
  std::string *v22;
  std::string::size_type size;
  void *v24;
  int v25;
  __int128 *v26;
  uint64_t i;
  void **v28;
  std::string v29;
  std::string v30;
  void *__p;
  _QWORD *v32;
  unsigned __int8 v33;
  std::string::size_type v34;
  _BYTE v35[15];
  char v36;
  std::string v37;
  std::string v38;
  _QWORD v39[3];
  std::string v40;
  _QWORD v41[6];
  _QWORD v42[7];

  v42[6] = *MEMORY[0x24BDAC8D0];
  v12 = atomic_load((unsigned __int8 *)&qword_253F36D18);
  if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_253F36D18))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_253F36F40, "    {nid} -> {child} [label=\"{branch}\" color=\"{color}\"]\n");
    __cxa_atexit(MEMORY[0x24BEDACF0], qword_253F36F40, &dword_220DF6000);
    __cxa_guard_release(&qword_253F36D18);
  }
  v13 = *(_QWORD *)(a3 + 160) + 20 * a4;
  v14 = *(_DWORD *)(v13 + 12);
  v15 = (int *)(v13 + 4);
  v16 = (int *)(v13 + 8);
  if (v14 < 0)
    v16 = v15;
  v17 = *v16;
  if (a6)
    v18 = "no";
  else
    v18 = "yes";
  std::string::basic_string[abi:ne180100]<0>(&v37, v18);
  if (v17 == a5)
    v19 = ", missing";
  else
    v19 = (char *)&unk_220F8364E;
  std::string::basic_string[abi:ne180100]<0>(&__p, v19);
  if ((v33 & 0x80u) == 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if ((v33 & 0x80u) == 0)
    v21 = v33;
  else
    v21 = (std::string::size_type)v32;
  v22 = std::string::append(&v37, p_p, v21);
  v24 = (void *)v22->__r_.__value_.__r.__words[0];
  size = v22->__r_.__value_.__l.__size_;
  v34 = v22->__r_.__value_.__r.__words[0];
  *(_QWORD *)v35 = size;
  *(_QWORD *)&v35[7] = *(std::string::size_type *)((char *)&v22->__r_.__value_.__r.__words[1] + 7);
  v25 = SHIBYTE(v22->__r_.__value_.__r.__words[2]);
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  v36 = v25;
  if ((char)v33 < 0)
    operator delete(__p);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  std::to_string(&v30, a4);
  std::string::basic_string[abi:ne180100]<0>(&v37, "{nid}");
  v38 = v30;
  memset(&v30, 0, sizeof(v30));
  std::to_string(&v29, a5);
  std::string::basic_string[abi:ne180100]<0>(v39, "{child}");
  v40 = v29;
  memset(&v29, 0, sizeof(v29));
  if (v17 == a5)
    v26 = (__int128 *)(a2 + 312);
  else
    v26 = (__int128 *)(a2 + 336);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],std::string const&,0>(v41, "{color}", v26);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],std::string&,0>(v42, "{branch}", (__int128 *)&v34);
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&__p, (const void **)&v37.__r_.__value_.__l.__data_, 4);
  xgboost::TreeGenerator::Match(a1, (uint64_t)qword_253F36F40, &__p);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&__p, v32);
  for (i = 0; i != -24; i -= 6)
  {
    v28 = (void **)((char *)&v37.__r_.__value_.__l.__data_ + i * 8);
    if (SHIBYTE(v42[i + 5]) < 0)
      operator delete(v28[21]);
    if (*((char *)v28 + 167) < 0)
      operator delete(v28[18]);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v25 & 0x80000000) == 0)
      return;
LABEL_35:
    operator delete(v24);
    return;
  }
  operator delete(v30.__r_.__value_.__l.__data_);
  if (v25 < 0)
    goto LABEL_35;
}

void sub_220F34CF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  __cxa_guard_abort(&qword_253F36D18);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],std::string const&,0>(_QWORD *a1, __int128 *a2)
{
  std::string *v4;
  __int128 v5;

  v4 = (std::string *)(std::string::basic_string[abi:ne180100]<0>(a1, "{params}") + 3);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    v4->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return a1;
}

void sub_220F34E5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],std::string&,0>(_QWORD *a1, char *a2, __int128 *a3)
{
  std::string *v5;
  __int128 v6;

  v5 = (std::string *)(std::string::basic_string[abi:ne180100]<0>(a1, a2) + 3);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_220F34EC8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void xgboost::GraphvizGenerator::BuildEdge<false>(std::string *a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  unsigned __int8 v12;
  uint64_t v13;
  int v14;
  int *v15;
  int *v16;
  int v17;
  char *v18;
  char *v19;
  const std::string::value_type *p_p;
  std::string::size_type v21;
  std::string *v22;
  std::string::size_type size;
  void *v24;
  int v25;
  __int128 *v26;
  uint64_t i;
  void **v28;
  std::string v29;
  std::string v30;
  void *__p;
  _QWORD *v32;
  unsigned __int8 v33;
  std::string::size_type v34;
  _BYTE v35[15];
  char v36;
  std::string v37;
  std::string v38;
  _QWORD v39[3];
  std::string v40;
  _QWORD v41[6];
  _QWORD v42[7];

  v42[6] = *MEMORY[0x24BDAC8D0];
  v12 = atomic_load((unsigned __int8 *)&qword_253F36D28);
  if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_253F36D28))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_253F36F70, "    {nid} -> {child} [label=\"{branch}\" color=\"{color}\"]\n");
    __cxa_atexit(MEMORY[0x24BEDACF0], qword_253F36F70, &dword_220DF6000);
    __cxa_guard_release(&qword_253F36D28);
  }
  v13 = *(_QWORD *)(a3 + 160) + 20 * a4;
  v14 = *(_DWORD *)(v13 + 12);
  v15 = (int *)(v13 + 4);
  v16 = (int *)(v13 + 8);
  if (v14 < 0)
    v16 = v15;
  v17 = *v16;
  if (a6)
    v18 = "yes";
  else
    v18 = "no";
  std::string::basic_string[abi:ne180100]<0>(&v37, v18);
  if (v17 == a5)
    v19 = ", missing";
  else
    v19 = (char *)&unk_220F8364E;
  std::string::basic_string[abi:ne180100]<0>(&__p, v19);
  if ((v33 & 0x80u) == 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if ((v33 & 0x80u) == 0)
    v21 = v33;
  else
    v21 = (std::string::size_type)v32;
  v22 = std::string::append(&v37, p_p, v21);
  v24 = (void *)v22->__r_.__value_.__r.__words[0];
  size = v22->__r_.__value_.__l.__size_;
  v34 = v22->__r_.__value_.__r.__words[0];
  *(_QWORD *)v35 = size;
  *(_QWORD *)&v35[7] = *(std::string::size_type *)((char *)&v22->__r_.__value_.__r.__words[1] + 7);
  v25 = SHIBYTE(v22->__r_.__value_.__r.__words[2]);
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  v36 = v25;
  if ((char)v33 < 0)
    operator delete(__p);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  std::to_string(&v30, a4);
  std::string::basic_string[abi:ne180100]<0>(&v37, "{nid}");
  v38 = v30;
  memset(&v30, 0, sizeof(v30));
  std::to_string(&v29, a5);
  std::string::basic_string[abi:ne180100]<0>(v39, "{child}");
  v40 = v29;
  memset(&v29, 0, sizeof(v29));
  if (v17 == a5)
    v26 = (__int128 *)(a2 + 312);
  else
    v26 = (__int128 *)(a2 + 336);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],std::string const&,0>(v41, "{color}", v26);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],std::string&,0>(v42, "{branch}", (__int128 *)&v34);
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&__p, (const void **)&v37.__r_.__value_.__l.__data_, 4);
  xgboost::TreeGenerator::Match(a1, (uint64_t)qword_253F36F70, &__p);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&__p, v32);
  for (i = 0; i != -24; i -= 6)
  {
    v28 = (void **)((char *)&v37.__r_.__value_.__l.__data_ + i * 8);
    if (SHIBYTE(v42[i + 5]) < 0)
      operator delete(v28[21]);
    if (*((char *)v28 + 167) < 0)
      operator delete(v28[18]);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v25 & 0x80000000) == 0)
      return;
LABEL_35:
    operator delete(v24);
    return;
  }
  operator delete(v30.__r_.__value_.__l.__data_);
  if (v25 < 0)
    goto LABEL_35;
}

void sub_220F351D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  __cxa_guard_abort(&qword_253F36D28);
  _Unwind_Resume(a1);
}

void *xgboost::Cast<xgboost::JsonTypedArray<long long,(xgboost::Value::ValueKind)10> const,xgboost::Value>(_DWORD *a1)
{
  std::string *Entry;
  _QWORD *v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  void **v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  __int128 *v13;
  uint64_t v14;
  _QWORD v15[5];
  void *__p[2];
  unsigned __int8 v17;
  std::string v18;
  std::string v19;
  std::string v20;
  __int128 v21;
  int64_t v22;
  char v23;

  if (a1[3] == 10)
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v23);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/json.h");
  v4 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v23);
  xgboost::Value::TypeStr((xgboost::Value *)a1, &v18);
  v5 = std::string::insert(&v18, 0, "Invalid cast, from ");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v7 = std::string::append(&v19, " to ");
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  v15[1] = 0xA00000000;
  v15[0] = &unk_24E6BD970;
  memset(&v15[2], 0, 24);
  xgboost::Value::TypeStr((xgboost::Value *)v15, __p);
  if ((v17 & 0x80u) == 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if ((v17 & 0x80u) == 0)
    v10 = v17;
  else
    v10 = (std::string::size_type)__p[1];
  v11 = std::string::append(&v20, (const std::string::value_type *)v9, v10);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v22 = v11->__r_.__value_.__r.__words[2];
  v21 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (v22 >= 0)
    v13 = &v21;
  else
    v13 = (__int128 *)v21;
  if (v22 >= 0)
    v14 = HIBYTE(v22);
  else
    v14 = *((_QWORD *)&v21 + 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v13, v14);
  if (SHIBYTE(v22) < 0)
    operator delete((void *)v21);
  if ((char)v17 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v23);
}

void sub_220F3555C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  if (*(char *)(v32 - 41) < 0)
    operator delete(*(void **)(v32 - 64));
  if (a20 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 73) < 0)
    operator delete(*(void **)(v32 - 96));
  if (a32 < 0)
    operator delete(a27);
  if (a26 < 0)
    operator delete(a21);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v32 - 33));
  _Unwind_Resume(a1);
}

void *xgboost::Cast<xgboost::JsonTypedArray<int,(xgboost::Value::ValueKind)9> const,xgboost::Value>(_DWORD *a1)
{
  std::string *Entry;
  _QWORD *v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  void **v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  __int128 *v13;
  uint64_t v14;
  _QWORD v15[5];
  void *__p[2];
  unsigned __int8 v17;
  std::string v18;
  std::string v19;
  std::string v20;
  __int128 v21;
  int64_t v22;
  char v23;

  if (a1[3] == 9)
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v23);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/json.h");
  v4 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v23);
  xgboost::Value::TypeStr((xgboost::Value *)a1, &v18);
  v5 = std::string::insert(&v18, 0, "Invalid cast, from ");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v7 = std::string::append(&v19, " to ");
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  v15[1] = 0x900000000;
  v15[0] = &unk_24E6BD928;
  memset(&v15[2], 0, 24);
  xgboost::Value::TypeStr((xgboost::Value *)v15, __p);
  if ((v17 & 0x80u) == 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if ((v17 & 0x80u) == 0)
    v10 = v17;
  else
    v10 = (std::string::size_type)__p[1];
  v11 = std::string::append(&v20, (const std::string::value_type *)v9, v10);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v22 = v11->__r_.__value_.__r.__words[2];
  v21 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (v22 >= 0)
    v13 = &v21;
  else
    v13 = (__int128 *)v21;
  if (v22 >= 0)
    v14 = HIBYTE(v22);
  else
    v14 = *((_QWORD *)&v21 + 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v13, v14);
  if (SHIBYTE(v22) < 0)
    operator delete((void *)v21);
  if ((char)v17 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v23);
}

void sub_220F357DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  if (*(char *)(v32 - 41) < 0)
    operator delete(*(void **)(v32 - 64));
  if (a20 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 73) < 0)
    operator delete(*(void **)(v32 - 96));
  if (a32 < 0)
    operator delete(a27);
  if (a26 < 0)
    operator delete(a21);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v32 - 33));
  _Unwind_Resume(a1);
}

void xgboost::FromJson<xgboost::TreeParam>(std::vector<std::pair<std::string, std::string>> *a1, _DWORD *a2, uint64_t a3)
{
  xgboost::TreeParam *v5;
  _QWORD *v6;
  _QWORD *v7;
  char *v8;
  uint64_t *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t *v13;
  _QWORD *v14[2];
  __int128 *v15;

  v5 = (xgboost::TreeParam *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(a2);
  v14[0] = 0;
  v14[1] = 0;
  v13 = (uint64_t *)v14;
  v6 = (_QWORD *)*((_QWORD *)v5 + 2);
  v7 = (_QWORD *)((char *)v5 + 24);
  if (v6 != (_QWORD *)((char *)v5 + 24))
  {
    do
    {
      v8 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>((_DWORD *)v6[7]);
      v15 = (__int128 *)(v6 + 4);
      v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v13, (const void **)v6 + 4, (uint64_t)&std::piecewise_construct, &v15);
      v5 = (xgboost::TreeParam *)std::string::operator=((std::string *)(v9 + 7), (const std::string *)(v8 + 16));
      v10 = (_QWORD *)v6[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v6[2];
          v12 = *v11 == (_QWORD)v6;
          v6 = v11;
        }
        while (!v12);
      }
      v6 = v11;
    }
    while (v11 != v7);
  }
  a1->__begin_ = 0;
  a1->__end_ = 0;
  a1->__end_cap_.__value_ = 0;
  xgboost::TreeParam::__MANAGER__(v5);
  dmlc::parameter::ParamManager::RunUpdate<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&xgboost::TreeParam::__MANAGER__(void)::inst, a3, v13, v14, 0, a1, 0);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v13, v14[0]);
}

void sub_220F35988(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)va, v5);
  _Unwind_Resume(a1);
}

void *xgboost::Cast<xgboost::JsonTypedArray<float,(xgboost::Value::ValueKind)7> const,xgboost::Value>(_DWORD *a1)
{
  std::string *Entry;
  _QWORD *v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  void **v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  __int128 *v13;
  uint64_t v14;
  _QWORD v15[5];
  void *__p[2];
  unsigned __int8 v17;
  std::string v18;
  std::string v19;
  std::string v20;
  __int128 v21;
  int64_t v22;
  char v23;

  if (a1[3] == 7)
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v23);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/json.h");
  v4 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v23);
  xgboost::Value::TypeStr((xgboost::Value *)a1, &v18);
  v5 = std::string::insert(&v18, 0, "Invalid cast, from ");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v7 = std::string::append(&v19, " to ");
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  v15[1] = 0x700000000;
  v15[0] = &unk_24E6B8A30;
  memset(&v15[2], 0, 24);
  xgboost::Value::TypeStr((xgboost::Value *)v15, __p);
  if ((v17 & 0x80u) == 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if ((v17 & 0x80u) == 0)
    v10 = v17;
  else
    v10 = (std::string::size_type)__p[1];
  v11 = std::string::append(&v20, (const std::string::value_type *)v9, v10);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v22 = v11->__r_.__value_.__r.__words[2];
  v21 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (v22 >= 0)
    v13 = &v21;
  else
    v13 = (__int128 *)v21;
  if (v22 >= 0)
    v14 = HIBYTE(v22);
  else
    v14 = *((_QWORD *)&v21 + 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v13, v14);
  if (SHIBYTE(v22) < 0)
    operator delete((void *)v21);
  if ((char)v17 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v23);
}

void sub_220F35BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  if (*(char *)(v32 - 41) < 0)
    operator delete(*(void **)(v32 - 64));
  if (a20 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 73) < 0)
    operator delete(*(void **)(v32 - 96));
  if (a32 < 0)
    operator delete(a27);
  if (a26 < 0)
    operator delete(a21);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v32 - 33));
  _Unwind_Resume(a1);
}

void *xgboost::Cast<xgboost::JsonTypedArray<unsigned char,(xgboost::Value::ValueKind)8> const,xgboost::Value>(_DWORD *a1)
{
  std::string *Entry;
  _QWORD *v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  void **v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  __int128 *v13;
  uint64_t v14;
  _QWORD v15[5];
  void *__p[2];
  unsigned __int8 v17;
  std::string v18;
  std::string v19;
  std::string v20;
  __int128 v21;
  int64_t v22;
  char v23;

  if (a1[3] == 8)
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v23);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/json.h");
  v4 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v23);
  xgboost::Value::TypeStr((xgboost::Value *)a1, &v18);
  v5 = std::string::insert(&v18, 0, "Invalid cast, from ");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v7 = std::string::append(&v19, " to ");
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  v15[1] = 0x800000000;
  v15[0] = &unk_24E6BD8E0;
  memset(&v15[2], 0, 24);
  xgboost::Value::TypeStr((xgboost::Value *)v15, __p);
  if ((v17 & 0x80u) == 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if ((v17 & 0x80u) == 0)
    v10 = v17;
  else
    v10 = (std::string::size_type)__p[1];
  v11 = std::string::append(&v20, (const std::string::value_type *)v9, v10);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v22 = v11->__r_.__value_.__r.__words[2];
  v21 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (v22 >= 0)
    v13 = &v21;
  else
    v13 = (__int128 *)v21;
  if (v22 >= 0)
    v14 = HIBYTE(v22);
  else
    v14 = *((_QWORD *)&v21 + 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v13, v14);
  if (SHIBYTE(v22) < 0)
    operator delete((void *)v21);
  if ((char)v17 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v23);
}

void sub_220F35E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  if (*(char *)(v32 - 41) < 0)
    operator delete(*(void **)(v32 - 64));
  if (a20 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 73) < 0)
    operator delete(*(void **)(v32 - 96));
  if (a32 < 0)
    operator delete(a27);
  if (a26 < 0)
    operator delete(a21);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v32 - 33));
  _Unwind_Resume(a1);
}

_QWORD *std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  size_t v11;
  _BYTE *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;

  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v10 = 2 * v8;
    if (2 * v8 <= a4)
      v10 = a4;
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<char>::__vallocate[abi:ne180100](v7, v11);
    v9 = (char *)v7[1];
    goto LABEL_17;
  }
  v12 = (_BYTE *)result[1];
  v13 = v12 - v9;
  if (v12 - v9 >= a4)
  {
LABEL_17:
    v16 = a3 - __src;
    if (v16)
      result = memmove(v9, __src, v16);
    v15 = &v9[v16];
    goto LABEL_20;
  }
  v14 = &__src[v13];
  if (v12 != v9)
  {
    result = memmove((void *)*result, __src, v13);
    v9 = (char *)v7[1];
  }
  if (a3 != v14)
    result = memmove(v9, v14, a3 - v14);
  v15 = &v9[a3 - v14];
LABEL_20:
  v7[1] = v15;
  return result;
}

_QWORD *std::vector<xgboost::RTreeNodeStat>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<xgboost::tree::GradStats>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_220F36018(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<xgboost::RegTree::Node>::vector(_QWORD *a1, unint64_t a2)
{
  _OWORD *v4;
  char *v5;
  uint64_t v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<xgboost::RegTree::Node>::__vallocate[abi:ne180100](a1, a2);
    v4 = (_OWORD *)a1[1];
    v5 = (char *)v4 + 20 * a2;
    v6 = 20 * a2;
    do
    {
      *v4 = xmmword_220F642D0;
      v4 = (_OWORD *)((char *)v4 + 20);
      v6 -= 20;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_220F36094(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<xgboost::FeatureType>::vector(_QWORD *a1, size_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<xgboost::FeatureType>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_220F36104(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<xgboost::RegTree::Segment>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<xgboost::tree::GradStats>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_220F36178(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL xgboost::GetElem<xgboost::JsonBoolean,xgboost::Json>(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(a1 + 8 * a2);
  if (v2[3] == 5)
    return *((_BYTE *)xgboost::Cast<xgboost::JsonBoolean const,xgboost::Value const>(v2) + 16) != 0;
  else
    return *((_QWORD *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(v2) + 2) == 1;
}

unsigned int *std::vector<xgboost::Json>::__assign_with_size[abi:ne180100]<xgboost::Json*,xgboost::Json*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int **v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int *result;
  unint64_t v14;
  unsigned int **v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;

  v9 = a1 + 16;
  v8 = *(_QWORD *)(a1 + 16);
  v10 = *(unsigned int ***)a1;
  if (a4 > (v8 - *(_QWORD *)a1) >> 3)
  {
    if (v10)
    {
      std::vector<xgboost::Json>::__clear[abi:ne180100]((unsigned int *)a1);
      operator delete(*(void **)a1);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a4 >> 61)
      std::vector<xgboost::Json>::__throw_length_error[abi:ne180100]();
    v11 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v11 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    std::vector<xgboost::Json>::__vallocate[abi:ne180100]((_QWORD *)a1, v12);
    result = (unsigned int *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<xgboost::Json>,xgboost::Json*,xgboost::Json*,xgboost::Json*>(v9, a2, a3, *(uint64_t **)(a1 + 8));
    goto LABEL_13;
  }
  v14 = (uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v10) >> 3;
  if (v14 < a4)
  {
    v15 = (unsigned int **)&a2[v14];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<xgboost::Json *,xgboost::Json *,xgboost::Json *>((unsigned int **)a2, v15, v10);
    result = (unsigned int *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<xgboost::Json>,xgboost::Json*,xgboost::Json*,xgboost::Json*>(v9, (uint64_t *)v15, a3, *(uint64_t **)(a1 + 8));
LABEL_13:
    *(_QWORD *)(a1 + 8) = result;
    return result;
  }
  result = (unsigned int *)std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<xgboost::Json *,xgboost::Json *,xgboost::Json *>((unsigned int **)a2, (unsigned int **)a3, v10);
  v16 = result;
  v17 = *(unsigned int **)(a1 + 8);
  if (v17 != result)
  {
    do
    {
      v18 = (unsigned int *)*((_QWORD *)v17 - 1);
      v17 -= 2;
      result = v18;
      if (v18)
      {
        v19 = result + 2;
        do
        {
          v20 = __ldxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
        {
          __dmb(9u);
          result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
        }
      }
    }
    while (v17 != v16);
  }
  *(_QWORD *)(a1 + 8) = v16;
  return result;
}

void sub_220F36334(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_220F3633C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

unsigned int **std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<xgboost::Json *,xgboost::Json *,xgboost::Json *>(unsigned int **a1, unsigned int **a2, unsigned int **a3)
{
  unsigned int **v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *v5;
      if (*v5)
      {
        v7 = v6 + 2;
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      v9 = *a3;
      *a3 = v6;
      if (v9)
      {
        v10 = v9 + 2;
        do
        {
          v11 = __ldxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          __dmb(9u);
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
        }
      }
      ++v5;
      ++a3;
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t xgboost::JsonTypedArray<int,(xgboost::Value::ValueKind)9>::JsonTypedArray(uint64_t a1, std::vector<int>::size_type a2)
{
  *(_QWORD *)(a1 + 8) = 0x900000000;
  *(_QWORD *)a1 = &unk_24E6BD928;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  std::vector<int>::resize((std::vector<int> *)(a1 + 16), a2);
  return a1;
}

void sub_220F36434(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::JsonTypedArray<unsigned char,(xgboost::Value::ValueKind)8>::JsonTypedArray(uint64_t a1, std::vector<char>::size_type a2)
{
  *(_QWORD *)(a1 + 8) = 0x800000000;
  *(_QWORD *)a1 = &unk_24E6BD8E0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  if (a2)
    std::vector<char>::__append((std::vector<char> *)(a1 + 16), a2);
  return a1;
}

void sub_220F364AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *xgboost::JsonTypedArray<long long,(xgboost::Value::ValueKind)10>::JsonTypedArray(_QWORD *a1, unint64_t a2)
{
  a1[1] = 0xA00000000;
  *a1 = &unk_24E6BD970;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  std::vector<unsigned long>::resize((uint64_t)(a1 + 2), a2);
  return a1;
}

void sub_220F36520(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<xgboost::PathElement>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<xgboost::PathElement>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_220F36594(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<xgboost::PathElement>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<xgboost::TreeGenReg const*>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WQSummary<float,float>::Entry>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void dmlc::io::InputSplitBase::Init(dmlc::io::InputSplitBase *this, dmlc::io::FileSystem *a2, char *__s, unint64_t a4, int a5)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  std::string *Entry;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  void *__p[2];
  char v18;

  *((_QWORD *)this + 1) = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  dmlc::io::InputSplitBase::InitInputFileInfo((uint64_t)this, (uint64_t)__p, a5);
  if (v18 < 0)
    operator delete(__p[0]);
  std::vector<unsigned long>::resize((uint64_t)this + 16, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 3) + 1);
  **((_QWORD **)this + 2) = 0;
  v9 = *((_QWORD *)this + 8);
  v8 = *((_QWORD *)this + 9);
  if (v8 != v9)
  {
    v10 = 0;
    v11 = 72;
    do
    {
      *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v10 + 8) = *(_QWORD *)(v9 + v11)
                                                       + *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v10);
      if (*(_QWORD *)(v9 + v11) % a4)
      {
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/input_split_base.cc");
        v13 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Check failed: files_[i].size % align_bytes == 0", 47);
        v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"file do not align by ", 21);
        v16 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" bytes", 6);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
        v9 = *((_QWORD *)this + 8);
        v8 = *((_QWORD *)this + 9);
      }
      ++v10;
      v11 += 88;
    }
    while (v10 < 0x2E8BA2E8BA2E8BA3 * ((v8 - v9) >> 3));
  }
  *((_QWORD *)this + 20) = a4;
}

void sub_220F36784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void dmlc::io::InputSplitBase::InitInputFileInfo(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::string *Entry;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38[2];
  char v39;
  void *v40;
  char v41;
  void *__p;
  char v43;
  uint64_t v44;
  int v45;
  int64x2_t v46;
  void **v47;

  dmlc::io::InputSplitBase::ConvertToURIs(a1, (const std::string *)a2, &v46);
  v5 = v46.i64[0];
  if (v46.i64[1] != v46.i64[0])
  {
    v6 = 0;
    if (a3)
      v7 = 4;
    else
      v7 = 3;
    do
    {
      (*(void (**)(void **__return_ptr, _QWORD, unint64_t))(**(_QWORD **)(a1 + 8) + 16))(v38, *(_QWORD *)(a1 + 8), v5 + 72 * v6);
      if (v45 == 1)
      {
        v35 = 0;
        v36 = 0;
        v37 = 0;
        (*(void (**)(void))(**(_QWORD **)(a1 + 8) + 8 * v7))();
        v9 = v35;
        v8 = v36;
        if (v36 != v35)
        {
          v10 = 0;
          v11 = 0;
          do
          {
            v12 = v9 + v10;
            if (*(_QWORD *)(v9 + v10 + 72) && !*(_DWORD *)(v12 + 80))
            {
              v13 = *(_QWORD *)(a1 + 72);
              if (v13 >= *(_QWORD *)(a1 + 80))
              {
                v14 = std::vector<dmlc::io::FileInfo>::__push_back_slow_path<dmlc::io::FileInfo const&>((uint64_t *)(a1 + 64), (__int128 *)(v9 + v10));
              }
              else
              {
                std::allocator<dmlc::io::FileInfo>::construct[abi:ne180100]<dmlc::io::FileInfo,dmlc::io::FileInfo const&>(a1 + 80, *(std::string **)(a1 + 72), (__int128 *)v12);
                v14 = v13 + 88;
                *(_QWORD *)(a1 + 72) = v13 + 88;
              }
              *(_QWORD *)(a1 + 72) = v14;
              v9 = v35;
              v8 = v36;
            }
            ++v11;
            v10 += 88;
          }
          while (v11 < 0x2E8BA2E8BA2E8BA3 * ((v8 - v9) >> 3));
        }
        v47 = (void **)&v35;
        std::vector<dmlc::io::FileInfo>::__destroy_vector::operator()[abi:ne180100](&v47);
      }
      else if (v44)
      {
        v15 = *(_QWORD *)(a1 + 72);
        if (v15 >= *(_QWORD *)(a1 + 80))
        {
          v16 = std::vector<dmlc::io::FileInfo>::__push_back_slow_path<dmlc::io::FileInfo const&>((uint64_t *)(a1 + 64), (__int128 *)v38);
        }
        else
        {
          std::allocator<dmlc::io::FileInfo>::construct[abi:ne180100]<dmlc::io::FileInfo,dmlc::io::FileInfo const&>(a1 + 80, *(std::string **)(a1 + 72), (__int128 *)v38);
          v16 = v15 + 88;
          *(_QWORD *)(a1 + 72) = v15 + 88;
        }
        *(_QWORD *)(a1 + 72) = v16;
      }
      if (v43 < 0)
        operator delete(__p);
      if (v41 < 0)
        operator delete(v40);
      if (v39 < 0)
        operator delete(v38[0]);
      ++v6;
      v5 = v46.i64[0];
    }
    while (v6 < 0x8E38E38E38E38E39 * ((v46.i64[1] - v46.i64[0]) >> 3));
  }
  v18 = *(_QWORD *)(a1 + 64);
  v17 = *(_QWORD *)(a1 + 72);
  LODWORD(v47) = 0;
  v19 = v17 - v18;
  v35 = 0x2E8BA2E8BA2E8BA3 * (v19 >> 3);
  if (!v19)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned int>((uint64_t *)v38);
    if (v38[0])
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v35);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/input_split_base.cc");
      v21 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v35);
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Check failed: ", 14);
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"files_.size() != 0U", 19);
      v24 = *((char *)v38[0] + 23);
      if (v24 >= 0)
        v25 = v38[0];
      else
        v25 = *(void **)v38[0];
      if (v24 >= 0)
        v26 = *((unsigned __int8 *)v38[0] + 23);
      else
        v26 = *((_QWORD *)v38[0] + 1);
      v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v25, v26);
      v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)": ", 2);
      v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Cannot find any files that matches the URI pattern ", 51);
      v30 = *(char *)(a2 + 23);
      if (v30 >= 0)
        v31 = a2;
      else
        v31 = *(_QWORD *)a2;
      if (v30 >= 0)
        v32 = *(unsigned __int8 *)(a2 + 23);
      else
        v32 = *(_QWORD *)(a2 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, v31, v32);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v35);
      v33 = v38[0];
      v38[0] = 0;
      if (v33)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v38, (uint64_t)v33);
    }
  }
  v38[0] = &v46;
  std::vector<dmlc::io::URI>::__destroy_vector::operator()[abi:ne180100]((void ***)v38);
}

void sub_220F36AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  a13 = (void **)&a24;
  std::vector<dmlc::io::URI>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

_QWORD *dmlc::io::InputSplitBase::ResetPartition(_QWORD *this, unsigned int a2, unsigned int a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::string *Entry;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  std::string *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;

  v3 = (_QWORD *)this[3];
  v4 = *(v3 - 1);
  v5 = (this[20] + (v4 + a3 - 1) / a3 - 1) / this[20] * this[20];
  if (v4 >= v5 * a2)
    v6 = v5 * a2;
  else
    v6 = *(v3 - 1);
  v7 = v5 * (a2 + 1);
  if (v4 >= v7)
    v4 = v7;
  this[6] = v6;
  this[7] = v4;
  this[5] = v6;
  if (v6 != v4)
  {
    v8 = (uint64_t)this;
    v9 = (_QWORD *)this[2];
    if (v3 == v9)
    {
      this[12] = -1;
    }
    else
    {
      v10 = v3 - v9;
      v11 = v10;
      v12 = (_QWORD *)this[2];
      do
      {
        v13 = v11 >> 1;
        v14 = &v12[v11 >> 1];
        v16 = *v14;
        v15 = v14 + 1;
        v11 += ~(v11 >> 1);
        if (v6 < v16)
          v11 = v13;
        else
          v12 = v15;
      }
      while (v11);
      this[12] = v12 - v9 - 1;
      v3 = v9;
      do
      {
        v17 = v10 >> 1;
        v18 = &v3[v10 >> 1];
        v20 = *v18;
        v19 = v18 + 1;
        v10 += ~(v10 >> 1);
        if (v4 < v20)
          v10 = v17;
        else
          v3 = v19;
      }
      while (v10);
    }
    v21 = v3 - v9 - 1;
    this[13] = v21;
    v22 = this[11];
    if (v22)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22);
      *(_QWORD *)(v8 + 88) = 0;
      v4 = *(_QWORD *)(v8 + 56);
      v21 = *(_QWORD *)(v8 + 104);
      v9 = *(_QWORD **)(v8 + 16);
    }
    v23 = v9[v21];
    if (v4 != v23)
    {
      if (v4 <= v23)
      {
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v38);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/input_split_base.cc");
        v25 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v38);
        v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Check failed: offset_end_ >file_offset_[file_ptr_end_]", 54);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v38);
        v21 = *(_QWORD *)(v8 + 104);
      }
      v27 = *(_QWORD *)(v8 + 64);
      if (v21 >= 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(v8 + 72) - v27) >> 3))
      {
        v28 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
        dmlc::LogMessageFatal::Entry::Init(v28, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/input_split_base.cc");
        v29 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
        v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Check failed: file_ptr_end_ < files_.size()", 43);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v37);
        v21 = *(_QWORD *)(v8 + 104);
        v27 = *(_QWORD *)(v8 + 64);
      }
      v31 = (*(uint64_t (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(v8 + 8) + 48))(*(_QWORD *)(v8 + 8), v27 + 88 * v21, 0);
      *(_QWORD *)(v8 + 88) = v31;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v31 + 32))(v31, *(_QWORD *)(v8 + 56) - *(_QWORD *)(*(_QWORD *)(v8 + 16) + 8 * *(_QWORD *)(v8 + 104)));
      *(_QWORD *)(v8 + 56) += (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 112))(v8, *(_QWORD *)(v8 + 88));
      v32 = *(_QWORD *)(v8 + 88);
      if (v32)
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32);
    }
    v33 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v8 + 8) + 48))(*(_QWORD *)(v8 + 8), *(_QWORD *)(v8 + 64) + 88 * *(_QWORD *)(v8 + 96), 0);
    *(_QWORD *)(v8 + 88) = v33;
    v34 = *(_QWORD *)(v8 + 48);
    v35 = *(_QWORD *)(*(_QWORD *)(v8 + 16) + 8 * *(_QWORD *)(v8 + 96));
    v36 = v34 - v35;
    if (v34 != v35)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 32))(v33, v36);
      *(_QWORD *)(v8 + 48) += (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 112))(v8, *(_QWORD *)(v8 + 88));
    }
    return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v36);
  }
  return this;
}

void sub_220F36E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a12);
  _Unwind_Resume(a1);
}

_QWORD *dmlc::io::InputSplitBase::BeforeFirst(_QWORD *this)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = this[6];
  if (v1 < this[7])
  {
    v2 = (uint64_t)this;
    v3 = (_QWORD *)this[2];
    v4 = (_QWORD *)this[3];
    if (v4 != v3)
    {
      v5 = v4 - v3;
      v4 = (_QWORD *)this[2];
      do
      {
        v6 = v5 >> 1;
        v7 = &v4[v5 >> 1];
        v9 = *v7;
        v8 = v7 + 1;
        v5 += ~(v5 >> 1);
        if (v1 < v9)
          v5 = v6;
        else
          v4 = v8;
      }
      while (v5);
    }
    v10 = v4 - v3 - 1;
    v11 = this[11];
    if (*(_QWORD *)(v2 + 96) != v10)
    {
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
      *(_QWORD *)(v2 + 96) = v10;
      v11 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v2 + 8) + 48))(*(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 64) + 88 * v10, 0);
      *(_QWORD *)(v2 + 88) = v11;
      v1 = *(_QWORD *)(v2 + 48);
      v10 = *(_QWORD *)(v2 + 96);
      v3 = *(_QWORD **)(v2 + 16);
    }
    this = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v11 + 32))(v11, v1 - v3[v10]);
    *(_QWORD *)(v2 + 40) = *(_QWORD *)(v2 + 48);
    *(_QWORD *)(v2 + 112) = 0;
    *(_QWORD *)(v2 + 120) = 0;
    if (*(char *)(v2 + 191) < 0)
    {
      **(_BYTE **)(v2 + 168) = 0;
      *(_QWORD *)(v2 + 176) = 0;
    }
    else
    {
      *(_BYTE *)(v2 + 168) = 0;
      *(_BYTE *)(v2 + 191) = 0;
    }
  }
  return this;
}

void dmlc::io::InputSplitBase::~InputSplitBase(dmlc::io::InputSplitBase *this)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void **v5;

  *(_QWORD *)this = &off_24E6BDA00;
  v2 = *((_QWORD *)this + 11);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  if (*((char *)this + 191) < 0)
    operator delete(*((void **)this + 21));
  v3 = (void *)*((_QWORD *)this + 16);
  if (v3)
  {
    *((_QWORD *)this + 17) = v3;
    operator delete(v3);
  }
  v5 = (void **)((char *)this + 64);
  std::vector<dmlc::io::FileInfo>::__destroy_vector::operator()[abi:ne180100](&v5);
  v4 = (void *)*((_QWORD *)this + 2);
  if (v4)
  {
    *((_QWORD *)this + 3) = v4;
    operator delete(v4);
  }
}

__n128 dmlc::io::InputSplitBase::StripEnd@<Q0>(std::string *this@<X1>, unsigned __int8 a2@<W2>, uint64_t a3@<X8>)
{
  int v5;
  std::string::size_type v6;
  std::string::size_type size;
  std::string::size_type v8;
  __n128 result;

  v5 = a2;
  while (1)
  {
    v6 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      size = this->__r_.__value_.__l.__size_;
      if (!size)
        goto LABEL_12;
    }
    else
    {
      if (!*((_BYTE *)&this->__r_.__value_.__s + 23))
        goto LABEL_12;
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    }
    v8 = size - 1;
    if ((v6 & 0x80) != 0)
      break;
    if (this->__r_.__value_.__s.__data_[v8] != v5)
      goto LABEL_12;
LABEL_11:
    std::string::resize(this, v6 - 1, 0);
  }
  if (*(unsigned __int8 *)(this->__r_.__value_.__r.__words[0] + v8) == v5)
  {
    v6 = this->__r_.__value_.__l.__size_;
    goto LABEL_11;
  }
LABEL_12:
  result = *(__n128 *)&this->__r_.__value_.__l.__data_;
  *(_OWORD *)a3 = *(_OWORD *)&this->__r_.__value_.__l.__data_;
  *(_QWORD *)(a3 + 16) = *((_QWORD *)&this->__r_.__value_.__l + 2);
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  this->__r_.__value_.__r.__words[0] = 0;
  return result;
}

void dmlc::io::InputSplitBase::ConvertToURIs(uint64_t a1@<X0>, const std::string *a2@<X1>, int64x2_t *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  std::string::size_type v7;
  std::string::size_type v8;
  std::string::size_type size;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  char v16;
  std::string::size_type v17;
  uint64_t v18;
  int v19;
  unsigned __int8 *v20;
  uint64_t v21;
  std::string *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  BOOL v28;
  _BOOL4 v29;
  __int128 *v30;
  unint64_t v31;
  uint64_t v32;
  std::string::size_type v33;
  std::string *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  const std::string::value_type **v39;
  __int128 v40;
  const char *v41;
  const char *v42;
  const char *v43;
  uint64_t v44;
  _QWORD *v45;
  _BYTE *v46;
  _BYTE *v47;
  const char *v48;
  char v49;
  unsigned int v50;
  _DWORD *v51;
  BOOL v52;
  uint64_t v53;
  _QWORD *v54;
  _OWORD *v55;
  char *v56;
  __int128 v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  uint64_t v61;
  const char *v62;
  __int128 *v63;
  __int128 *v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  __int128 v72;
  __int128 *v73;
  char *v74;
  _BYTE *v75;
  _BYTE *v76;
  __int128 v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  _OWORD *v86;
  uint64_t v87;
  char *v88;
  __int128 v89;
  unint64_t v90;
  char *v91;
  _QWORD *v92;
  _BYTE *v93;
  _OWORD *v94;
  __int128 v95;
  int64_t v96;
  char *v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  char *v101;
  std::string::size_type v102;
  void *v103;
  void *v104;
  _BYTE *v105;
  unsigned int v106;
  std::string::size_type v107;
  char v108;
  uint64_t v109;
  _QWORD *v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  int v115;
  unsigned int v116;
  const char *v117;
  uint64_t v118;
  _QWORD *v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  void **v131;
  _BYTE *v132;
  _QWORD *v133;
  _QWORD *v134;
  unint64_t v135;
  _QWORD *v136;
  unint64_t v137;
  char *v138;
  char *v139;
  unint64_t v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  size_t v152;
  char *v153;
  char *v154;
  unint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  unint64_t v169;
  uint64_t v170;
  __int128 v171;
  uint64_t v172;
  uint64_t v173;
  std::string::size_type v174;
  char *v175;
  std::vector<std::csub_match>::value_type *v176;
  const char *first;
  const char **p_second;
  const char *v179;
  const char *v180;
  int64_t v181;
  unint64_t v182;
  char *v183;
  char *v184;
  uint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  char *v191;
  std::vector<std::csub_match>::value_type *v192;
  const char *v193;
  const char **v194;
  BOOL *p_matched;
  char *v196;
  char v197;
  _BOOL4 matched;
  char v199;
  uint64_t v200;
  uint64_t v201;
  size_t v202;
  size_t v203;
  size_t v204;
  const char *v205;
  void **v206;
  uint64_t v207;
  size_t v208;
  int v209;
  int v210;
  BOOL v211;
  void *v212;
  int v213;
  unint64_t v214;
  uint64_t v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  unint64_t i;
  int64x2_t *v221;
  unint64_t v222;
  int v223;
  char *v224;
  uint64_t v225;
  int v226;
  _QWORD *v227;
  const char *v228;
  char *v229;
  void *v230;
  const char *v231;
  const char *v232;
  const char *v233;
  std::string v234;
  void *v235;
  const char *v236;
  unsigned __int8 v237;
  std::regex_traits<char> v238;
  __int128 v239;
  __int128 v240;
  uint64_t v241;
  std::string v242;
  std::string v243;
  std::string v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  std::string v248;
  std::string v249;
  std::string __p;
  std::string __sz;
  std::string __s;
  std::string v253;
  uint64_t v254;
  uint64_t v255;
  std::string v256;
  std::vector<std::csub_match>::value_type v257;
  const char *v258;
  const char *v259;
  BOOL v260;
  std::vector<std::csub_match>::value_type v261;
  char v262;
  const char *v263;
  void *v264[2];
  __int128 v265;
  int64x2_t v266;
  char *v267;
  void *__src;
  char *v269;
  char *v270;
  char *v271;
  uint64_t v272;
  void *v273;
  void *v274;
  uint64_t v275;
  _BYTE v276[56];
  _OWORD v277[3];
  std::vector<std::csub_match>::value_type __x;

  dmlc::Split(a2, 0x3Bu, &v254);
  a3->i64[0] = 0;
  a3->i64[1] = 0;
  a3[1].i64[0] = 0;
  v4 = v254;
  if (v255 == v254)
    goto LABEL_382;
  v5 = 0;
  v223 = (_DWORD)a3 + 16;
  v221 = a3;
  do
  {
    v6 = (char *)(v4 + 24 * v5);
    if (v6[23] < 0)
      v6 = *(char **)v6;
    dmlc::io::URI::URI((dmlc::io::URI *)&__sz, v6);
    v7 = std::string::rfind(&v253, 47, 0xFFFFFFFFFFFFFFFFLL);
    if (v7 == -1)
      goto LABEL_9;
    v8 = v7;
    size = HIBYTE(v253.__r_.__value_.__r.__words[2]);
    if ((v253.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v253.__r_.__value_.__l.__size_;
    if (v7 + 1 == size)
    {
LABEL_9:
      v10 = a3->u64[1];
      if (v10 >= a3[1].i64[0])
      {
        v11 = std::vector<dmlc::io::URI>::__push_back_slow_path<dmlc::io::URI const&>(a3, (__int128 *)&__sz);
      }
      else
      {
        std::allocator<dmlc::io::URI>::construct[abi:ne180100]<dmlc::io::URI,dmlc::io::URI const&>(v223, (std::string *)a3->i64[1], (__int128 *)&__sz);
        v11 = v10 + 72;
        a3->i64[1] = v10 + 72;
      }
      a3->i64[1] = v11;
      goto LABEL_368;
    }
    if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v248, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
    else
      v248 = __sz;
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v249, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    else
      v249 = __s;
    if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v253.__r_.__value_.__l.__data_, v253.__r_.__value_.__l.__size_);
    else
      __p = v253;
    std::string::basic_string(&v256, &v253, 0, v8, (std::allocator<char> *)v276);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v256;
    v245 = 0;
    v246 = 0;
    v247 = 0;
    (*(void (**)(_QWORD, std::string *, uint64_t *))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), &v248, &v245);
    v12 = v245;
    if (v246 != v245)
    {
      v13 = 0;
      while (1)
      {
        v14 = v12 + 88 * v13;
        if (*(char *)(v14 + 71) < 0)
        {
          std::string::__init_copy_ctor_external(&v244, *(const std::string::value_type **)(v14 + 48), *(_QWORD *)(v14 + 56));
        }
        else
        {
          v15 = *(_OWORD *)(v14 + 48);
          v244.__r_.__value_.__r.__words[2] = *(_QWORD *)(v14 + 64);
          *(_OWORD *)&v244.__r_.__value_.__l.__data_ = v15;
        }
        dmlc::io::InputSplitBase::StripEnd(&v244, 0x2Fu, (uint64_t)&v256);
        if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v243, v253.__r_.__value_.__l.__data_, v253.__r_.__value_.__l.__size_);
        else
          v243 = v253;
        dmlc::io::InputSplitBase::StripEnd(&v243, 0x2Fu, (uint64_t)v276);
        v16 = HIBYTE(v256.__r_.__value_.__r.__words[2]);
        if ((v256.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v17 = HIBYTE(v256.__r_.__value_.__r.__words[2]);
        else
          v17 = v256.__r_.__value_.__l.__size_;
        v18 = v276[23];
        v19 = v276[23];
        if (v276[23] < 0)
          v18 = *(_QWORD *)&v276[8];
        if (v17 != v18)
          break;
        if (v276[23] >= 0)
          v20 = v276;
        else
          v20 = *(unsigned __int8 **)v276;
        if ((*((_BYTE *)&v256.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          v29 = memcmp(v256.__r_.__value_.__l.__data_, v20, v256.__r_.__value_.__l.__size_) == 0;
          if (v19 < 0)
            goto LABEL_58;
        }
        else if (*((_BYTE *)&v256.__r_.__value_.__s + 23))
        {
          v21 = HIBYTE(v256.__r_.__value_.__r.__words[2]) - 1;
          v22 = &v256;
          do
          {
            v24 = v22->__r_.__value_.__s.__data_[0];
            v22 = (std::string *)((char *)v22 + 1);
            v23 = v24;
            v26 = *v20++;
            v25 = v26;
            v28 = v21-- != 0;
            v29 = v23 == v25;
          }
          while (v23 == v25 && v28);
          if ((v276[23] & 0x80000000) != 0)
            goto LABEL_58;
        }
        else
        {
          v29 = 1;
          if ((v276[23] & 0x80000000) != 0)
            goto LABEL_58;
        }
LABEL_50:
        if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v243.__r_.__value_.__l.__data_);
          if (v16 < 0)
LABEL_60:
            operator delete(v256.__r_.__value_.__l.__data_);
        }
        else if (v16 < 0)
        {
          goto LABEL_60;
        }
        if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v244.__r_.__value_.__l.__data_);
        if (v29)
        {
          v30 = (__int128 *)(v245 + 88 * v13);
          v31 = a3->u64[1];
          if (v31 >= a3[1].i64[0])
          {
            v32 = std::vector<dmlc::io::URI>::__push_back_slow_path<dmlc::io::URI const&>(a3, v30);
          }
          else
          {
            std::allocator<dmlc::io::URI>::construct[abi:ne180100]<dmlc::io::URI,dmlc::io::URI const&>(v223, (std::string *)a3->i64[1], v30);
            v32 = v31 + 72;
            a3->i64[1] = v31 + 72;
          }
          a3->i64[1] = v32;
          goto LABEL_362;
        }
        ++v13;
        v12 = v245;
        if (v13 >= 0x2E8BA2E8BA2E8BA3 * ((v246 - v245) >> 3))
          goto LABEL_65;
      }
      v29 = 0;
      if ((v276[23] & 0x80000000) == 0)
        goto LABEL_50;
LABEL_58:
      operator delete(*(void **)v276);
      goto LABEL_50;
    }
LABEL_65:
    if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v242, v253.__r_.__value_.__l.__data_, v253.__r_.__value_.__l.__size_);
    else
      v242 = v253;
    std::regex_traits<char>::regex_traits(&v238);
    v241 = 0;
    v239 = 0u;
    v240 = 0u;
    v33 = HIBYTE(v242.__r_.__value_.__r.__words[2]);
    if ((v242.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v34 = &v242;
    else
      v34 = (std::string *)v242.__r_.__value_.__r.__words[0];
    if ((v242.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v33 = v242.__r_.__value_.__l.__size_;
    v222 = v5;
    if ((char *)v34 + v33 != std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>((uint64_t)&v238, (char *)v34, (char *)v34 + v33))std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
    v36 = v245;
    v35 = v246;
    if (v246 == v245)
      goto LABEL_352;
    v37 = 0;
    do
    {
      if (*(_DWORD *)(v36 + 88 * v37 + 80) || !*(_QWORD *)(v36 + 88 * v37 + 72))
        goto LABEL_345;
      v38 = v36 + 88 * v37;
      v39 = (const std::string::value_type **)(v38 + 48);
      if (*(char *)(v38 + 71) < 0)
      {
        std::string::__init_copy_ctor_external(&v234, *v39, *(_QWORD *)(v38 + 56));
      }
      else
      {
        v40 = *(_OWORD *)v39;
        v234.__r_.__value_.__r.__words[2] = *(_QWORD *)(v38 + 64);
        *(_OWORD *)&v234.__r_.__value_.__l.__data_ = v40;
      }
      dmlc::io::InputSplitBase::StripEnd(&v234, 0x2Fu, (uint64_t)&v235);
      if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v234.__r_.__value_.__l.__data_);
      v41 = (const char *)v237;
      if ((v237 & 0x80u) == 0)
        v42 = (const char *)&v235;
      else
        v42 = (const char *)v235;
      if ((v237 & 0x80u) != 0)
        v41 = v236;
      v233 = v41;
      v43 = &v41[(_QWORD)v42];
      v258 = 0;
      v259 = 0;
      v260 = 0;
      memset(&v261, 0, 17);
      v262 = 0;
      v263 = 0;
      memset(&v256, 0, sizeof(v256));
      v257.first = &v41[(_QWORD)v42];
      v257.second = &v41[(_QWORD)v42];
      v257.matched = 0;
      std::vector<std::sub_match<char const*>>::assign((std::vector<std::csub_match> *)&v256, (DWORD1(v239) + 1), &v257);
      v258 = v42;
      v259 = v42;
      v260 = 0;
      v261 = v257;
      v263 = v42;
      v262 = 1;
      v231 = v42;
      if ((v239 & 0x1F0) == 0)
      {
        if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>((uint64_t)&v238, v42, v43, (uint64_t *)&v256, 4160, 1) & 1) != 0)goto LABEL_281;
        goto LABEL_302;
      }
      v232 = v43;
      if (DWORD1(v239))
      {
        v264[1] = 0;
        v264[0] = 0;
        *(_QWORD *)&v265 = 0;
        v44 = v240;
        if (!(_QWORD)v240)
        {
          *(_QWORD *)v276 = v264;
          std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v276);
          goto LABEL_302;
        }
        __x.first = v43;
        __x.second = v43;
        __x.matched = 0;
        *(_DWORD *)v276 = 0;
        memset(&v276[8], 0, 48);
        memset(v277, 0, 37);
        v264[1] = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((int64x2_t *)v264, (uint64_t)v276);
        if (*(_QWORD *)&v277[0])
          operator delete(*(void **)&v277[0]);
        if (*(_QWORD *)&v276[32])
          operator delete(*(void **)&v276[32]);
        v45 = v264[1];
        *((_DWORD *)v264[1] - 24) = 0;
        *(v45 - 11) = v42;
        *(v45 - 10) = v42;
        *(v45 - 9) = v43;
        std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v45 - 8), DWORD1(v239), &__x);
        std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)((char *)v264[1] - 40), DWORD2(v239));
        v46 = 0;
        v224 = 0;
        v227 = 0;
        v229 = 0;
        v47 = 0;
        v225 = 0;
        v48 = 0;
        v49 = 0;
        v50 = 0;
        v51 = v264[1];
        *((_QWORD *)v264[1] - 2) = v44;
        *(v51 - 2) = 4160;
        *((_BYTE *)v51 - 4) = 1;
        do
        {
          v52 = (++v50 & 0xFFF) != 0 || (int)(v50 >> 12) < (int)v233;
          if (!v52)
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
          v54 = v51 - 4;
          v53 = *((_QWORD *)v51 - 2);
          v55 = v51 - 24;
          if (v53)
            (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v53 + 16))(v53, v51 - 24);
          switch(*(_DWORD *)v55)
          {
            case 0xFFFFFC18:
              if (*((const char **)v51 - 10) != v232)
                goto LABEL_107;
              v62 = &v232[-*((_QWORD *)v51 - 11)];
              if ((v49 & ((uint64_t)v48 >= (uint64_t)v62)) == 0)
              {
                v64 = (__int128 *)*((_QWORD *)v51 - 8);
                v63 = (__int128 *)*((_QWORD *)v51 - 7);
                v65 = 0xAAAAAAAAAAAAAAABLL * (((char *)v63 - (char *)v64) >> 3);
                v66 = (uint64_t)v224;
                if (0xAAAAAAAAAAAAAAABLL * ((v224 - v229) >> 3) >= v65)
                {
                  if (0xAAAAAAAAAAAAAAABLL * ((v46 - v229) >> 3) >= v65)
                  {
                    if (v64 == v63)
                    {
                      v80 = v229;
                    }
                    else
                    {
                      v79 = v229;
                      v80 = v229;
                      do
                      {
                        *(_OWORD *)v79 = *v64;
                        v79[16] = *((_BYTE *)v64 + 16);
                        v80 += 24;
                        v64 = (__int128 *)((char *)v64 + 24);
                        v79 += 24;
                      }
                      while (v64 != v63);
                    }
                    v46 = v229;
                    v78 = v80 - v229;
                  }
                  else
                  {
                    v73 = (__int128 *)((char *)v64 + 8 * ((v46 - v229) >> 3));
                    if (v46 != v229)
                    {
                      v74 = v229;
                      do
                      {
                        *(_OWORD *)v74 = *v64;
                        v74[16] = *((_BYTE *)v64 + 16);
                        v64 = (__int128 *)((char *)v64 + 24);
                        v74 += 24;
                      }
                      while (v64 != v73);
                    }
                    v75 = v46;
                    if (v73 != v63)
                    {
                      v76 = v46;
                      do
                      {
                        v77 = *v73;
                        *((_QWORD *)v76 + 2) = *((_QWORD *)v73 + 2);
                        *(_OWORD *)v76 = v77;
                        v76 += 24;
                        v73 = (__int128 *)((char *)v73 + 24);
                        v75 += 24;
                      }
                      while (v73 != v63);
                    }
                    v78 = v75 - v46;
                  }
                }
                else
                {
                  if (v229)
                  {
                    operator delete(v229);
                    v66 = 0;
                  }
                  if (v65 > 0xAAAAAAAAAAAAAAALL)
                    goto LABEL_378;
                  v67 = 0x5555555555555556 * (v66 >> 3);
                  if (v67 <= v65)
                    v67 = 0xAAAAAAAAAAAAAAABLL * (((char *)v63 - (char *)v64) >> 3);
                  v68 = 0xAAAAAAAAAAAAAAABLL * (v66 >> 3) >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v67;
                  if (v68 > 0xAAAAAAAAAAAAAAALL)
LABEL_378:
                    std::vector<void *>::__throw_length_error[abi:ne180100]();
                  v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(v68);
                  v46 = v69;
                  v71 = v69;
                  while (v64 != v63)
                  {
                    v72 = *v64;
                    *((_QWORD *)v71 + 2) = *((_QWORD *)v64 + 2);
                    *(_OWORD *)v71 = v72;
                    v71 += 24;
                    v64 = (__int128 *)((char *)v64 + 24);
                  }
                  v224 = &v69[24 * v70];
                  v78 = v71 - v69;
                  v229 = v69;
                }
                v82 = (char *)*((_QWORD *)v51 - 5);
                v81 = (char *)*((_QWORD *)v51 - 4);
                v83 = (v81 - v82) >> 4;
                if (v83 <= (v225 - (uint64_t)v227) >> 4)
                {
                  v90 = (v47 - (_BYTE *)v227) >> 4;
                  if (v90 >= v83)
                  {
                    if (v82 == v81)
                    {
                      v47 = v227;
                      v97 = (char *)v227;
                    }
                    else
                    {
                      v47 = v227;
                      v97 = (char *)v227;
                      v98 = v227;
                      do
                      {
                        *v98 = *(_QWORD *)v82;
                        v98[1] = *((_QWORD *)v82 + 1);
                        v97 += 16;
                        v82 += 16;
                        v98 += 2;
                      }
                      while (v82 != v81);
                    }
                    v96 = v97 - v47;
                  }
                  else
                  {
                    v91 = &v82[16 * v90];
                    if (v47 != (_BYTE *)v227)
                    {
                      v92 = v227;
                      do
                      {
                        *v92 = *(_QWORD *)v82;
                        v92[1] = *((_QWORD *)v82 + 1);
                        v82 += 16;
                        v92 += 2;
                      }
                      while (v82 != v91);
                    }
                    v93 = v47;
                    if (v91 != v81)
                    {
                      v94 = v47;
                      do
                      {
                        v95 = *(_OWORD *)v91;
                        v91 += 16;
                        *v94++ = v95;
                        v93 += 16;
                      }
                      while (v91 != v81);
                    }
                    v96 = v93 - v47;
                  }
                }
                else
                {
                  if (v227)
                  {
                    operator delete(v227);
                    v225 = 0;
                  }
                  if (v81 - v82 < 0)
                    goto LABEL_379;
                  v84 = v225 >> 3;
                  if (v225 >> 3 <= v83)
                    v84 = (v81 - v82) >> 4;
                  v85 = (unint64_t)v225 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v84;
                  if (v85 >> 60)
LABEL_379:
                    std::vector<void *>::__throw_length_error[abi:ne180100]();
                  v86 = std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WQSummary<float,float>>>(v85);
                  v47 = v86;
                  v88 = (char *)v86;
                  while (v82 != v81)
                  {
                    v89 = *(_OWORD *)v82;
                    v82 += 16;
                    *(_OWORD *)v88 = v89;
                    v88 += 16;
                  }
                  v225 = (uint64_t)&v86[v87];
                  v96 = v88 - (char *)v86;
                  v227 = v86;
                }
                v46 += v78;
                v47 += v96;
                v48 = v62;
              }
              v99 = v264[1];
              if (v48 == v233)
              {
                v100 = v264[0];
                while (v99 != v100)
                {
                  v99 -= 12;
                  std::allocator<std::__state<char>>::destroy[abi:ne180100](v99);
                }
                v264[1] = v100;
                v49 = 1;
                v48 = v233;
              }
              else
              {
                v101 = (char *)v264[1] - 96;
                std::allocator<std::__state<char>>::destroy[abi:ne180100]((_QWORD *)v264[1] - 12);
                v264[1] = v101;
                v49 = 1;
              }
              break;
            case 0xFFFFFC1D:
            case 0xFFFFFC1E:
            case 0xFFFFFC21:
              break;
            case 0xFFFFFC1F:
LABEL_107:
              v56 = (char *)v264[1] - 96;
              std::allocator<std::__state<char>>::destroy[abi:ne180100]((_QWORD *)v264[1] - 12);
              v264[1] = v56;
              break;
            case 0xFFFFFC20:
              v57 = *((_OWORD *)v51 - 5);
              *(_OWORD *)v276 = *v55;
              *(_OWORD *)&v276[16] = v57;
              memset(&v276[32], 0, 24);
              std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v276[32], *((__int128 **)v51 - 8), *((__int128 **)v51 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v51 - 7) - *((_QWORD *)v51 - 8)) >> 3));
              memset(v277, 0, 24);
              std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)v277, *((__int128 **)v51 - 5), *((__int128 **)v51 - 4), (uint64_t)(*((_QWORD *)v51 - 4) - *((_QWORD *)v51 - 5)) >> 4);
              v58 = *v54;
              *(_QWORD *)((char *)&v277[1] + 13) = *(_QWORD *)((char *)v51 - 11);
              *((_QWORD *)&v277[1] + 1) = v58;
              (*(void (**)(_QWORD, uint64_t, _DWORD *))(*(_QWORD *)*v54 + 24))(*v54, 1, v51 - 24);
              (*(void (**)(_QWORD, _QWORD, _BYTE *))(**((_QWORD **)&v277[1] + 1) + 24))(*((_QWORD *)&v277[1] + 1), 0, v276);
              v59 = (char *)v264[1];
              if (v264[1] >= (void *)v265)
              {
                v264[1] = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((int64x2_t *)v264, (uint64_t)v276);
                if (*(_QWORD *)&v277[0])
                {
                  *((_QWORD *)&v277[0] + 1) = *(_QWORD *)&v277[0];
                  operator delete(*(void **)&v277[0]);
                }
              }
              else
              {
                v60 = *(_OWORD *)&v276[16];
                *(_OWORD *)v264[1] = *(_OWORD *)v276;
                *((_OWORD *)v59 + 1) = v60;
                *((_QWORD *)v59 + 4) = 0;
                *((_QWORD *)v59 + 5) = 0;
                *((_QWORD *)v59 + 6) = 0;
                *((_QWORD *)v59 + 7) = 0;
                *((_OWORD *)v59 + 2) = *(_OWORD *)&v276[32];
                *((_QWORD *)v59 + 6) = *(_QWORD *)&v276[48];
                memset(&v276[32], 0, 24);
                *((_QWORD *)v59 + 8) = 0;
                *((_QWORD *)v59 + 9) = 0;
                *(_OWORD *)(v59 + 56) = v277[0];
                *((_QWORD *)v59 + 9) = *(_QWORD *)&v277[1];
                memset(v277, 0, 24);
                v61 = *((_QWORD *)&v277[1] + 1);
                *(_QWORD *)(v59 + 85) = *(_QWORD *)((char *)&v277[1] + 13);
                *((_QWORD *)v59 + 10) = v61;
                v264[1] = v59 + 96;
              }
              if (*(_QWORD *)&v276[32])
              {
                *(_QWORD *)&v276[40] = *(_QWORD *)&v276[32];
                operator delete(*(void **)&v276[32]);
              }
              break;
            default:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
          }
          v51 = v264[1];
        }
        while (v264[0] != v264[1]);
        if ((v49 & 1) != 0)
        {
          v102 = v256.__r_.__value_.__r.__words[0];
          *(_QWORD *)v256.__r_.__value_.__l.__data_ = v231;
          *(_QWORD *)(v102 + 8) = &v48[(_QWORD)v231];
          *(_BYTE *)(v102 + 16) = 1;
          v103 = v227;
          v104 = v229;
          if (v46 != v229)
          {
            v105 = v229 + 16;
            v106 = 1;
            do
            {
              v107 = v102 + 24 * v106;
              *(_OWORD *)v107 = *((_OWORD *)v105 - 1);
              v108 = *v105;
              v105 += 24;
              *(_BYTE *)(v107 + 16) = v108;
              v52 = 0xAAAAAAAAAAAAAAABLL * ((v46 - v229) >> 3) > v106++;
            }
            while (v52);
          }
          a3 = v221;
          if (!v227)
          {
LABEL_278:
            if (v104)
              operator delete(v104);
            *(_QWORD *)v276 = v264;
            std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v276);
            if ((v49 & 1) != 0)
              goto LABEL_281;
            goto LABEL_302;
          }
        }
        else
        {
          a3 = v221;
          v103 = v227;
          v104 = v229;
          if (!v227)
            goto LABEL_278;
        }
        operator delete(v103);
        goto LABEL_278;
      }
      v265 = 0u;
      v266 = 0u;
      *(_OWORD *)v264 = 0u;
      v109 = v240;
      if ((_QWORD)v240)
      {
        *(_DWORD *)v276 = 0;
        memset(&v276[8], 0, 48);
        memset(v277, 0, 37);
        std::deque<std::__state<char>>::push_back(v264, (uint64_t)v276);
        if (*(_QWORD *)&v277[0])
          operator delete(*(void **)&v277[0]);
        if (*(_QWORD *)&v276[32])
          operator delete(*(void **)&v276[32]);
        v110 = v264[1];
        v111 = v266.i64[1] + v266.i64[0] - 1;
        v112 = v111 / 0x2A;
        v113 = 3 * (v111 % 0x2A);
        v114 = *((_QWORD *)v264[1] + v112) + 32 * v113;
        *(_DWORD *)v114 = 0;
        *(_QWORD *)(v114 + 8) = v231;
        *(_QWORD *)(v110[v112] + 32 * v113 + 16) = v231;
        *(_QWORD *)(v110[v112] + 32 * v113 + 24) = v43;
        std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(v110[v112] + 32 * v113 + 56), DWORD2(v239));
        v115 = 0;
        v116 = 0;
        v117 = 0;
        v118 = v266.i64[1];
        v119 = v264[1];
        v120 = v266.i64[1] + v266.i64[0] - 1;
        v121 = v120 / 0x2A;
        v122 = 3 * (v120 % 0x2A);
        *(_QWORD *)(*((_QWORD *)v264[1] + v121) + 32 * v122 + 80) = v109;
        v123 = v119[v121] + 32 * v122;
        *(_DWORD *)(v123 + 88) = 4160;
        *(_BYTE *)(v123 + 92) = 1;
        while (2)
        {
          if ((++v116 & 0xFFF) == 0 && (int)(v116 >> 12) >= (int)v233)
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
          v125 = v118 + v266.i64[0] - 1;
          v126 = *((_QWORD *)v264[1] + v125 / 0x2A);
          v127 = v125 % 0x2A;
          v128 = v126 + 96 * (v125 % 0x2A);
          v130 = (_QWORD *)(v128 + 80);
          v129 = *(_QWORD *)(v128 + 80);
          if (v129)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v129 + 16))(v129, v126 + 96 * v127);
          switch(*(_DWORD *)v128)
          {
            case 0xFFFFFC18:
              if (*(const char **)(v126 + 96 * v127 + 16) != v43)
                goto LABEL_270;
              if ((v115 & ((uint64_t)v117 >= (uint64_t)&v43[-*(_QWORD *)(v126 + 96 * v127 + 8)])) == 0)
                v117 = &v43[-*(_QWORD *)(v126 + 96 * v127 + 8)];
              if (v117 != v233)
              {
                std::deque<std::__state<char>>::pop_back(v264);
                v115 = 1;
                goto LABEL_271;
              }
              v131 = (void **)v264[1];
              v132 = (_BYTE *)v265;
              if ((void *)v265 == v264[1])
              {
                v132 = v264[1];
              }
              else
              {
                v133 = (char *)v264[1] + 8 * (v266.i64[0] / 0x2AuLL);
                v134 = (_QWORD *)(*v133 + 96 * (v266.i64[0] % 0x2AuLL));
                v135 = *((_QWORD *)v264[1] + (v266.i64[1] + v266.i64[0]) / 0x2AuLL)
                     + 96 * ((v266.i64[1] + v266.i64[0]) % 0x2AuLL);
                if (v134 != (_QWORD *)v135)
                {
                  do
                  {
                    std::allocator<std::__state<char>>::destroy[abi:ne180100](v134);
                    v134 += 12;
                    if ((_QWORD *)((char *)v134 - *v133) == (_QWORD *)4032)
                    {
                      v136 = (_QWORD *)v133[1];
                      ++v133;
                      v134 = v136;
                    }
                  }
                  while (v134 != (_QWORD *)v135);
                  v132 = (_BYTE *)v265;
                  v131 = (void **)v264[1];
                }
              }
              v266.i64[1] = 0;
              v165 = v132 - (_BYTE *)v131;
              if (v165 >= 0x11)
              {
                do
                {
                  operator delete(*v131);
                  v131 = (void **)((char *)v264[1] + 8);
                  v264[1] = v131;
                  v165 = v265 - (_QWORD)v131;
                }
                while ((_QWORD)v265 - (_QWORD)v131 > 0x10uLL);
              }
              if (v165 >> 3 == 1)
              {
                v166 = 21;
              }
              else
              {
                if (v165 >> 3 != 2)
                  goto LABEL_258;
                v166 = 42;
              }
              v266.i64[0] = v166;
LABEL_258:
              v115 = 1;
              v117 = v233;
LABEL_271:
              v118 = v266.i64[1];
              if (v266.i64[1])
                continue;
              a3 = v221;
              if ((v115 & 1) == 0)
                goto LABEL_274;
              v174 = v256.__r_.__value_.__r.__words[0];
              *(_QWORD *)v256.__r_.__value_.__l.__data_ = v231;
              *(_QWORD *)(v174 + 8) = &v117[(_QWORD)v231];
              *(_BYTE *)(v174 + 16) = 1;
              std::deque<std::__state<char>>::~deque[abi:ne180100]((uint64_t)v264);
              break;
            case 0xFFFFFC19:
            case 0xFFFFFC1E:
            case 0xFFFFFC21:
              goto LABEL_271;
            case 0xFFFFFC1D:
              v137 = v266.i64[0];
              v138 = (char *)v264[1];
              v139 = (char *)v265;
              if (!v266.i64[0])
              {
                v140 = (uint64_t)(v265 - (unint64_t)v264[1]) >> 3;
                v141 = 42 * v140 - 1;
                if ((void *)v265 == v264[1])
                  v141 = 0;
                if ((unint64_t)(v141 - v266.i64[1]) < 0x2A)
                {
                  if (v140 >= (uint64_t)(*((_QWORD *)&v265 + 1) - (unint64_t)v264[0]) >> 3)
                  {
                    if (*((void **)&v265 + 1) == v264[0])
                      v144 = 1;
                    else
                      v144 = (uint64_t)(*((_QWORD *)&v265 + 1) - (unint64_t)v264[0]) >> 2;
                    v271 = (char *)&v265 + 8;
                    v267 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v144);
                    __src = v267;
                    v269 = v267;
                    v270 = &v267[8 * v145];
                    v226 = v115;
                    v228 = v117;
                    *(_QWORD *)v276 = operator new(0xFC0uLL);
                    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(&v267, v276);
                    v146 = (uint64_t *)v264[1];
                    v147 = v269;
                    for (i = v37; v146 != (uint64_t *)v265; v269 += 8)
                    {
                      if (v147 == v270)
                      {
                        v148 = (char *)__src;
                        if (__src <= v267)
                        {
                          v230 = v267;
                          if (v147 == v267)
                            v155 = 1;
                          else
                            v155 = (v147 - v267) >> 2;
                          v156 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v155);
                          v158 = v147 - v148;
                          v211 = v147 == v148;
                          v147 = &v156[8 * (v155 >> 2)];
                          if (!v211)
                          {
                            v147 = &v156[8 * (v155 >> 2) + (v158 & 0xFFFFFFFFFFFFFFF8)];
                            v159 = 8 * (v158 >> 3);
                            v160 = &v156[8 * (v155 >> 2)];
                            do
                            {
                              v161 = *(_QWORD *)v148;
                              v148 += 8;
                              *(_QWORD *)v160 = v161;
                              v160 += 8;
                              v159 -= 8;
                            }
                            while (v159);
                          }
                          v267 = v156;
                          __src = &v156[8 * (v155 >> 2)];
                          v269 = v147;
                          v270 = &v156[8 * v157];
                          if (v230)
                            operator delete(v230);
                        }
                        else
                        {
                          v149 = ((_BYTE *)__src - v267) >> 3;
                          if (v149 >= -1)
                            v150 = v149 + 1;
                          else
                            v150 = v149 + 2;
                          v151 = (char *)__src - 8 * (v150 >> 1);
                          v152 = v147 - (_BYTE *)__src;
                          if (v147 != __src)
                          {
                            v153 = (char *)__src - 8 * (v150 >> 1);
                            memmove(v153, __src, v152);
                            v151 = v153;
                            v147 = v148;
                          }
                          v154 = &v147[-8 * (v150 >> 1)];
                          v147 = &v151[v152];
                          v269 = &v151[v152];
                          __src = v154;
                          v37 = i;
                        }
                      }
                      v162 = *v146++;
                      *(_QWORD *)v147 = v162;
                      v147 = v269 + 8;
                    }
                    v163 = v264[0];
                    v264[0] = v267;
                    v264[1] = __src;
                    *(_QWORD *)&v265 = v147;
                    *((_QWORD *)&v265 + 1) = v270;
                    v164 = 21;
                    if (v147 - (_BYTE *)__src != 8)
                      v164 = v266.i64[0] + 42;
                    v266.i64[0] = v164;
                    v115 = v226;
                    if (v163)
                      operator delete(v163);
                    v43 = v232;
                    v117 = v228;
                  }
                  else
                  {
                    if (v264[1] == v264[0])
                    {
                      v273 = operator new(0xFC0uLL);
                      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(v264, &v273);
                      v272 = *(_QWORD *)(v265 - 8);
                      *(_QWORD *)&v265 = v265 - 8;
                      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)v264, &v272);
                    }
                    else
                    {
                      v274 = operator new(0xFC0uLL);
                      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)v264, &v274);
                    }
                    v167 = 21;
                    if ((_QWORD)v265 - (unint64_t)v264[1] != 8)
                      v167 = v266.i64[0] + 42;
                    v266.i64[0] = v167;
                  }
                }
                else
                {
                  v266.i64[0] = 42;
                  v275 = *(_QWORD *)(v265 - 8);
                  *(_QWORD *)&v265 = v265 - 8;
                  std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)v264, &v275);
                }
                v137 = v266.i64[0];
                v138 = (char *)v264[1];
                v139 = (char *)v265;
              }
              v168 = &v138[8 * (v137 / 0x2A)];
              v169 = *(_QWORD *)v168 + 96 * (v137 % 0x2A);
              if (v139 == v138)
                v170 = 0;
              else
                v170 = v169;
              if (v170 == *(_QWORD *)v168)
                v170 = *((_QWORD *)v168 - 1) + 4032;
              v171 = *(_OWORD *)(v128 + 16);
              *(_OWORD *)(v170 - 96) = *(_OWORD *)v128;
              *(_OWORD *)(v170 - 80) = v171;
              v172 = v126 + 96 * v127;
              *(_QWORD *)(v170 - 56) = 0;
              *(_QWORD *)(v170 - 48) = 0;
              *(_QWORD *)(v170 - 64) = 0;
              *(_OWORD *)(v170 - 64) = *(_OWORD *)(v172 + 32);
              *(_QWORD *)(v170 - 48) = *(_QWORD *)(v172 + 48);
              *(_QWORD *)(v172 + 32) = 0;
              *(_QWORD *)(v172 + 40) = 0;
              *(_QWORD *)(v172 + 48) = 0;
              *(_QWORD *)(v170 - 40) = 0;
              *(_QWORD *)(v170 - 32) = 0;
              *(_QWORD *)(v170 - 24) = 0;
              *(_OWORD *)(v170 - 40) = *(_OWORD *)(v172 + 56);
              *(_QWORD *)(v170 - 24) = *(_QWORD *)(v172 + 72);
              *(_QWORD *)(v172 + 56) = 0;
              *(_QWORD *)(v172 + 64) = 0;
              *(_QWORD *)(v172 + 72) = 0;
              v173 = *v130;
              *(_QWORD *)(v170 - 11) = *(_QWORD *)(v128 + 85);
              *(_QWORD *)(v170 - 16) = v173;
              v266 = vaddq_s64(v266, (int64x2_t)xmmword_220F658F0);
              goto LABEL_270;
            case 0xFFFFFC1F:
LABEL_270:
              std::deque<std::__state<char>>::pop_back(v264);
              goto LABEL_271;
            case 0xFFFFFC20:
              v142 = *(_OWORD *)(v128 + 16);
              *(_OWORD *)v276 = *(_OWORD *)v128;
              *(_OWORD *)&v276[16] = v142;
              memset(&v276[32], 0, 24);
              std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v276[32], *(__int128 **)(v126 + 96 * v127 + 32), *(__int128 **)(v126 + 96 * v127 + 40), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(_QWORD *)(v126 + 96 * v127 + 40) - *(_QWORD *)(v126 + 96 * v127 + 32)) >> 3));
              memset(v277, 0, 24);
              std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)v277, *(__int128 **)(v126 + 96 * v127 + 56), *(__int128 **)(v126 + 96 * v127 + 64), (uint64_t)(*(_QWORD *)(v126 + 96 * v127 + 64) - *(_QWORD *)(v126 + 96 * v127 + 56)) >> 4);
              v143 = *v130;
              *(_QWORD *)((char *)&v277[1] + 13) = *(_QWORD *)(v128 + 85);
              *((_QWORD *)&v277[1] + 1) = v143;
              (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)*v130 + 24))(*v130, 1, v126 + 96 * v127);
              (*(void (**)(_QWORD, _QWORD, _BYTE *))(**((_QWORD **)&v277[1] + 1) + 24))(*((_QWORD *)&v277[1] + 1), 0, v276);
              std::deque<std::__state<char>>::push_back(v264, (uint64_t)v276);
              if (*(_QWORD *)&v277[0])
              {
                *((_QWORD *)&v277[0] + 1) = *(_QWORD *)&v277[0];
                operator delete(*(void **)&v277[0]);
              }
              if (*(_QWORD *)&v276[32])
              {
                *(_QWORD *)&v276[40] = *(_QWORD *)&v276[32];
                operator delete(*(void **)&v276[32]);
              }
              goto LABEL_271;
            default:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
          }
          break;
        }
LABEL_281:
        v175 = (char *)v256.__r_.__value_.__r.__words[0];
        if (v256.__r_.__value_.__l.__size_ == v256.__r_.__value_.__r.__words[0])
          v176 = &v257;
        else
          v176 = (std::vector<std::csub_match>::value_type *)v256.__r_.__value_.__r.__words[0];
        first = v176->first;
        p_second = (const char **)(v256.__r_.__value_.__r.__words[0] + 8);
        if (v256.__r_.__value_.__l.__size_ == v256.__r_.__value_.__r.__words[0])
          p_second = &v257.second;
        v179 = v258;
        v180 = *p_second;
        v259 = first;
        v260 = v258 != first;
        v261.first = v180;
        v261.matched = v180 != v261.second;
        v181 = v256.__r_.__value_.__l.__size_ - v256.__r_.__value_.__r.__words[0];
        if (v256.__r_.__value_.__l.__size_ == v256.__r_.__value_.__r.__words[0])
        {
          v184 = 0;
          v186 = 0;
        }
        else
        {
          v182 = v181 / 24;
          if ((unint64_t)(v181 / 24) > 0xAAAAAAAAAAAAAAALL)
            std::vector<void *>::__throw_length_error[abi:ne180100]();
          v183 = (char *)operator new(v181);
          v184 = v183;
          v185 = 0;
          v186 = &v183[24 * v182];
          do
          {
            v187 = &v183[v185];
            *(_QWORD *)v187 = 0;
            *((_QWORD *)v187 + 1) = 0;
            v187[16] = 0;
            v185 += 24;
          }
          while (24 * v182 != v185);
          v188 = 0;
          v189 = 0;
          if (v182 <= 1)
            v190 = 1;
          else
            v190 = v182;
          do
          {
            v191 = &v175[v188];
            if (v182 <= v189)
              v192 = &v257;
            else
              v192 = (std::vector<std::csub_match>::value_type *)&v175[v188];
            v193 = v192->first;
            v194 = (const char **)(v191 + 8);
            if (v182 <= v189)
              v194 = &v257.second;
            p_matched = (BOOL *)(v191 + 16);
            if (v182 <= v189)
              p_matched = &v257.matched;
            v196 = &v183[v188];
            *(_QWORD *)v196 = &v231[v193 - v179];
            *((_QWORD *)v196 + 1) = &v231[*v194 - v179];
            v196[16] = *p_matched;
            ++v189;
            v188 += 24;
          }
          while (v190 != v189);
        }
        v197 = 1;
        goto LABEL_305;
      }
LABEL_274:
      std::deque<std::__state<char>>::~deque[abi:ne180100]((uint64_t)v264);
LABEL_302:
      v197 = 0;
      v184 = 0;
      v186 = 0;
      v175 = (char *)v256.__r_.__value_.__r.__words[0];
LABEL_305:
      matched = v261.matched;
      if (v175)
        operator delete(v175);
      v199 = v197 ^ 1;
      if (matched)
        v199 = 1;
      if ((v199 & 1) != 0 || v186 == v184)
      {
LABEL_340:
        if (!v184)
          goto LABEL_342;
LABEL_341:
        operator delete(v184);
        goto LABEL_342;
      }
      v200 = 0;
      if ((unint64_t)((v186 - v184) / 24) <= 1)
        v201 = 1;
      else
        v201 = (v186 - v184) / 24;
      while (1)
      {
        if (v184[24 * v200 + 16])
        {
          std::string::__init_with_size[abi:ne180100]<char *,char *>(&v256, *(char **)&v184[24 * v200], *(char **)&v184[24 * v200 + 8], *(_QWORD *)&v184[24 * v200 + 8] - *(_QWORD *)&v184[24 * v200]);
          v202 = HIBYTE(v256.__r_.__value_.__r.__words[2]);
          v203 = v256.__r_.__value_.__l.__size_;
        }
        else
        {
          v203 = 0;
          v202 = 0;
          memset(&v256, 0, sizeof(v256));
        }
        if ((v202 & 0x80u) == 0)
          v204 = v202;
        else
          v204 = v203;
        v205 = (const char *)v237;
        if ((v237 & 0x80u) != 0)
          v205 = v236;
        if ((const char *)v204 != v205)
        {
          if ((char)v202 < 0)
            operator delete(v256.__r_.__value_.__l.__data_);
          goto LABEL_339;
        }
        v206 = (v237 & 0x80u) == 0 ? &v235 : (void **)v235;
        if (((char)v202 & 0x80000000) == 0)
          break;
        v212 = (void *)v256.__r_.__value_.__r.__words[0];
        v213 = memcmp(v256.__r_.__value_.__l.__data_, v206, v203);
        operator delete(v212);
        if (!v213)
          goto LABEL_347;
LABEL_339:
        if (++v200 == v201)
          goto LABEL_340;
      }
      if (v202)
      {
        v207 = 0;
        v208 = v202 - 1;
        do
        {
          v209 = v256.__r_.__value_.__s.__data_[v207];
          v210 = *((unsigned __int8 *)v206 + v207);
          v211 = v209 != v210 || v208 == v207++;
        }
        while (!v211);
        if (v209 != v210)
          goto LABEL_339;
      }
LABEL_347:
      v214 = a3->u64[1];
      if (v214 >= a3[1].i64[0])
      {
        v215 = std::vector<dmlc::io::URI>::__push_back_slow_path<dmlc::io::URI const&>(a3, (__int128 *)(v245 + 88 * v37));
      }
      else
      {
        std::allocator<dmlc::io::URI>::construct[abi:ne180100]<dmlc::io::URI,dmlc::io::URI const&>(v223, (std::string *)a3->i64[1], (__int128 *)(v245 + 88 * v37));
        v215 = v214 + 72;
        a3->i64[1] = v214 + 72;
      }
      a3->i64[1] = v215;
      if (v184)
        goto LABEL_341;
LABEL_342:
      if ((char)v237 < 0)
        operator delete(v235);
      v36 = v245;
      v35 = v246;
LABEL_345:
      ++v37;
    }
    while (v37 < 0x2E8BA2E8BA2E8BA3 * ((v35 - v36) >> 3));
LABEL_352:
    v216 = (std::__shared_weak_count *)*((_QWORD *)&v240 + 1);
    v5 = v222;
    if (*((_QWORD *)&v240 + 1))
    {
      v217 = (unint64_t *)(*((_QWORD *)&v240 + 1) + 8);
      do
        v218 = __ldaxr(v217);
      while (__stlxr(v218 - 1, v217));
      if (!v218)
      {
        ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
        std::__shared_weak_count::__release_weak(v216);
      }
    }
    std::locale::~locale(&v238.__loc_);
    if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v242.__r_.__value_.__l.__data_);
LABEL_362:
    v256.__r_.__value_.__r.__words[0] = (std::string::size_type)&v245;
    std::vector<dmlc::io::FileInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v256);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v249.__r_.__value_.__l.__data_);
    if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v248.__r_.__value_.__l.__data_);
LABEL_368:
    if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v253.__r_.__value_.__l.__data_);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__sz.__r_.__value_.__l.__data_);
    ++v5;
    v4 = v254;
  }
  while (v5 < 0xAAAAAAAAAAAAAAABLL * ((v255 - v254) >> 3));
LABEL_382:
  v256.__r_.__value_.__r.__words[0] = (std::string::size_type)&v254;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v256);
}

